[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in shared_elements:\n            shared_elements.append(i)\n    return shared_elements\n",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [4, 5, 6, 7]) == [4, 5]",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(1) == True # 1 is not a prime number",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [9, 8, 7, 6, 5, 4, 3, 2, 1]",
        "num_ids": 1536,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # check if x is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n    # check if x is a power of two\n    if x & (x-1) != 0:\n        return False\n    # check if the binary representation of x has only one bit set to 1\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count == 1\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Return the words\n    return words\n",
        "test": "assert find_char_long(\"This is an example sentence.\") == [\"This\", \"example\", \"sentence\"]",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n",
        "test": "assert square_nums([1,2,3,4]) == [1,4,9,16]",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 2\n    else:\n        for i in range(n):\n            if str[i] == str[0]:\n                return i\n        return n\n",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 1104,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1 and last_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    elif first_occurrence != -1:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    elif last_occurrence != -1:\n        return s[:last_occurrence] + s[last_occurrence+1:]\n    else:\n        return s\n",
        "test": "assert remove_Occ(\"hello world\", \"x\") == \"hello world\" # example 4",
        "num_ids": 1282,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def sort_matrix(M):\n    # create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n    # sort the list of tuples by the sum of the rows in ascending order\n    row_sums.sort(key=lambda x: x[0])\n    # extract the sorted rows from the sorted tuples and create a new matrix from them\n    M_sorted = [row for _, row in row_sums]\n    return M_sorted\n",
        "test": "assert sort_matrix([[3, 2], [1, 4]]) == [[1, 4], [3, 2]] or sort_matrix([[3, 2], [1, 4]]) == [[3, 2], [1, 4]] # matrix with rows of equal sum",
        "num_ids": 1847,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(0, 2, 4) == 0, \"Error in calculation of volume\"",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+(_[a-z]+)*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore('hello_world'), \"Should be True\"",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "",
        "test": "assert str_to_list('hello world', 'wrd') == 'hello '",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    # Create a set from the array to remove duplicates\n    unique_nums = set(arraynums)\n    \n    # Check if the length of the array and the set are not equal\n    if len(arraynums) != len(unique_nums):\n        # If the lengths are not equal, there must be a duplicate element\n        return True\n    else:\n        # If the lengths are equal, there is no duplicate element\n        return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num_str = str(x)\n    # check if the number has only unique digits\n    if len(num_str) != len(set(num_str)):\n        return False\n    # check if the sum of digits is equal to the square of the length\n    return sum(int(digit) for digit in num_str) == len(num_str)**2\n",
        "test": "assert is_woodall(2) == False",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    if num - rev_num == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(121) == False, \"rev(121) should return False\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    if not arr:\n        return \"\"\n\n    arr.sort(reverse=True)\n    result = []\n\n    while arr:\n        num = arr.pop()\n        result.append(str(num))\n        if len(result) > 1:\n            if int(\"\".join(result)) > int(\"\".join(result[::-1])):\n                result.pop()\n            else:\n                result.pop(0)\n\n    return int(\"\".join(result))",
        "test": "assert find_Max_Num([1, 3, 5, 7]) == 7 # Example 2",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(10, -20) == True",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2\n",
        "test": "assert is_octagonal(1) == True # First octagonal number is 1",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = int(s[i:j])\n            count[sub] += 1\n            count[sub+1] -= 1\n    return sum(count.values())\n",
        "test": "assert count_Substrings(\"123456\") == 5, \"Wrong answer for '123456'\"",
        "num_ids": 2402,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(1, 100), (2, 90), (3, 80)]) == [(3, 80), (2, 90), (1, 100)] # test case 2",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        total_sum = 0\n        for item in data_list:\n            if type(item) == list:\n                total_sum += recursive_list_sum(item)\n            else:\n                total_sum += item\n        return total_sum\n    else:\n        return 0\n",
        "test": "assert recursive_list_sum([1,2,3,4,5]) == 15",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5  # test case 1",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n    return bell[n]\n",
        "test": "assert bell_number(0) == 1  # the only partition of an empty set is the empty partition",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize a flag variable\n    is_monotonic = True\n    # Loop through the array\n    for i in range(len(A)-1):\n        # Check if the next element is smaller than or equal to the current element\n        if A[i] > A[i+1]:\n            is_monotonic = False\n            break\n    # Return the final value of the flag variable\n    return is_monotonic\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True # monotonic increasing array",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0])+1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n",
        "test": "assert is_sublist([1, 2, 3, 4], [1, 2, 3]) == True",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    equal_length = True\n    length = None\n    for tup in Input:\n        if length is None:\n            length = len(tup)\n        elif len(tup) != length:\n            equal_length = False\n            break\n    return equal_length",
        "test": "assert find_equal_tuple((\"apple\", \"banana\", \"cherry\", \"date\")) == False",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb_sort algorithm.\n    \"\"\"\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1362,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    # Check if n is a perfect square\n    if n == 0 or n == 1:\n        return False\n    for i in range(int(n ** 0.5) + 1):\n        if i * i > n:\n            break\n        if (n - i * i) ** 0.5 == int((n - i * i) ** 0.5):\n            return True\n    return False\n",
        "test": "assert dif_Square(7) == False # 7 is not the difference of two squares",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Check the length of the input arrays\n    if len(colors) != len(patterns):\n        return False\n\n    # Create a dictionary to store the patterns and their respective colors\n    color_dict = {}\n    for i in range(len(colors)):\n        color_dict[patterns[i]] = colors[i]\n\n    # Check if the color sequence matches the given pattern\n    for i in range(len(colors)):\n        if color_dict[patterns[i]] != colors[i]:\n            return False\n\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\"], [\"A\", \"B\", \"C\", \"A\"]) == False",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def find_tuples(test_list, k):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tpl in test_list:\n        flag = True\n        for i in tpl:\n            if i % k != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tpl)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == []",
        "num_ids": 1596,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(12) == False",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"apple\") == True, \"Error: 'apple' should be odd\"",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1, \"Error in tetrahedral_number\" ",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol",
        "test": "assert volume_sphere(0) == 0, \"Error in volume_sphere calculation\" ",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    # Convert the string to a list of characters\n    char_list = list(strr)\n\n    # Initialize the sum to 0\n    sum_ascii = 0\n\n    # Loop through the list of characters and add their ASCII values\n    for char in char_list:\n        sum_ascii += ord(char)\n\n    # Calculate the sum modulo 26\n    mod_sum = sum_ascii % 26\n\n    # Convert the result back to a character using the ASCII value\n    result = chr(mod_sum + 97) if mod_sum < 26 else chr(mod_sum - 26 + 97)\n\n    # Return the result\n    return result\n",
        "test": "assert get_Char('xyz') == 'z' ",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequence(n):\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 1, 1, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b\n        return c\n",
        "test": "assert sequence(1) == 1 # second number in the sequence is 1",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793, \"Incorrect surface area for radius 5\"",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"Error in centered_hexagonal_number(1)\"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Initialize an empty dictionary to hold the merged result\n    merged_dict = {}\n\n    # Merge the three dictionaries into the new dictionary\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n\n    # Return the merged dictionary\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"c\": 3, \"d\": 4}, {\"e\": 5, \"f\": 6}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import collections\n\ndef freq_count(list1):\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through the list and update the frequency count for each element\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the dictionary of frequency counts\n    return freq_dict\n",
        "test": "assert freq_count([1,2,3,4,5,1,2,3]) == {1:2, 2:2, 3:2, 4:1, 5:1}",
        "num_ids": 1238,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def closest_num(N):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    # Initialize a variable to keep track of the closest number\n    closest = float('inf')\n    \n    # Loop through all numbers from 1 to N-1\n    for i in range(1, N):\n        # If the current number is closer to N than the current closest number, update closest\n        if abs(N-i) < abs(N-closest):\n            closest = i\n    \n    # Return the closest number\n    return closest\n",
        "test": "assert closest_num(5) == 4",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6 # longest word is \"banana\"",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"This is a test string\", \"TEST\") == False",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the input number to a string to manipulate its digits\n    n_str = str(n)\n\n    # Check if the number is even, in which case it can't be undulating\n    if len(n_str) % 2 == 0:\n        return False\n\n    # Check if the first and last digits are the same\n    if n_str[0] == n_str[-1]:\n        return False\n\n    # Check if the second and second-to-last digits are the same\n    if n_str[1] == n_str[-2]:\n        return False\n\n    # Check if the third and third-to-last digits are the same\n    if n_str[2] == n_str[-3]:\n        return False\n\n    # If all checks pass, the number is undulating\n    return True\n",
        "test": "assert is_undulating(123456) == False",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    # Sort the list in ascending order based on the second value of the tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 5), (2, 4), (3, 3), (4, 2), (5, 1)]) == 5",
        "num_ids": 1482,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1 # should return 1",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10], [10, 11]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2, 11: 1}",
        "num_ids": 2058,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([1]) == 1.0, \"The function multiply_num([1]) should return 1.0\"",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary.lstrip('0') or '0'\n",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    if str(num) == str(num)[::-1]:\n        return num\n    elif num < 10:\n        return 11\n    elif num < 100:\n        for i in range(num+1, 100):\n            if str(i) == str(i)[::-1]:\n                return i\n    elif num < 1000:\n        for i in range(num+1, 1000):\n            if str(i) == str(i)[::-1]:\n                return i\n    else:\n        for i in range(num+1, 10000):\n            if str(i) == str(i)[::-1]:\n                return i\n",
        "test": "assert next_smallest_palindrome(12321) == 12321",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5  # example usage 3",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by underscore character\n    words = word.split('_')\n    # Concatenate the words, capitalizing the first letter of each word\n    return words[0].lower() + ''.join([word.capitalize() for word in words[1:]])",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0 or m < 0:\n        return 0\n    if m == 0:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)",
        "test": "assert eulerian_num(0, 0) == 1, \"The base case is incorrect.\"",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([['cat', 'dog', 'bat'], ['apple', 'banana', 'cherry'], ['hello', 'world', 'python']]) == [['bat', 'cat', 'dog'], ['apple', 'banana', 'cherry'], ['hello', 'python', 'world']] ",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, False, True, False]) == 2",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list and then append the list to it.\n    test_list = list(test_tup) + test_list\n    return test_list",
        "test": "assert add_lists([], (1,2,3)) == [1,2,3]",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n    \n    if num1:\n        merged_list.extend(num1)\n    if num2:\n        merged_list.extend(num2)\n    if num3:\n        merged_list.extend(num3)\n    \n    return merged_list",
        "test": "assert merge_sorted_list([1,3,5],[2,4],[6]) == [1,2,3,4,5,6]",
        "num_ids": 2521,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def odd_Equivalent(s,n):\n    binary_string = list(s)\n    length = len(binary_string)\n    count = 0\n    \n    for i in range(n):\n        temp = binary_string[0]\n        binary_string[0] = binary_string[-1]\n        binary_string[-1] = temp\n        \n        if binary_string[0] == '1':\n            count += 1\n    \n    return count\n",
        "test": "assert odd_Equivalent(\"10101\", 2) == 2 # odd number of 1s",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # find the common elements between all sublists\n    common = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common = common.intersection(set(nestedlist[i]))\n    # convert the set to a list and return it\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [4, 5, 6]]) == []",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {}]) == True",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result\n",
        "test": "assert tuple_to_int((1, 0, 0, 1)) == 1001",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    float_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_sublist.append(float(item))\n            except ValueError:\n                new_sublist.append(item)\n        float_list.append(new_sublist)\n    return float_list\n",
        "test": "assert list_to_float([[1,2,3],[4.5, 6, \"7\"], [\"8.9\", 10]]) == [[1.0, 2.0, 3.0], [4.5, 6.0, 7.0], [8.9, 10.0]]",
        "num_ids": 2286,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    \n    # Check if the array has only two elements\n    if len(arr) == 2:\n        # If the array has only two elements, compare them\n        if arr[0] != arr[1]:\n            return arr[0]\n        else:\n            return None\n    \n    # Check if the array has an odd number of elements\n    if len(arr) % 2 != 0:\n        # If the array has an odd number of elements, return the middle element\n        return arr[len(arr) // 2]\n    else:\n        # If the array has an even number of elements, return None\n        return None\n",
        "test": "assert search([1, 1, 2, 3, 4, 4, 5]) == 3  # example sorted array with no element that appears only once, but with one element that appears exactly twice",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][0]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][0])\n            if abs(list1[i][1]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][1]*list1[j][1])\n    return max_product\n",
        "test": "assert max_product_tuple([(2,3),(4,5)]) == 15",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a dictionary to store the sum of proper divisors for each number\n    divisor_sums = {}\n    for i in range(1, limit+1):\n        divisor_sum = sum(get_proper_divisors(i))\n        divisor_sums[i] = divisor_sum\n\n    # Calculate the amicable numbers and their sums\n    amicable_numbers = [i for i in range(1, limit+1) if divisor_sums[i] in divisor_sums and i != divisor_sums[i] and divisor_sums[i] < limit]\n    amicable_number_sum = sum(amicable_numbers)\n\n    return amicable_number_sum\n\n\ndef get_proper_divisors(n):\n    '''\n    Helper function to get the proper divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n",
        "test": "assert amicable_numbers_sum(200) == 50222, \"Incorrect output for limit 200\"",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the phase of the complex number\n    phase = cmath.phase(complex(a, b))\n    \n    # Convert the phase to degrees\n    degrees = round(math.degrees(phase))\n    \n    return degrees",
        "test": "assert angle_complex(1, 0) == 0 # the angle of 1 + 0j is 0 degrees",
        "num_ids": 993,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of the number of 0s and 1s in the current substring\n    current_0s = 0\n    current_1s = 0\n\n    # Initialize variables to keep track of the maximum difference seen so far\n    max_diff = 0\n\n    # Loop through each character in the string\n    for char in string:\n        if char == '0':\n            # Increment the count of 0s in the current substring\n            current_0s += 1\n        elif char == '1':\n            # Increment the count of 1s in the current substring\n            current_1s += 1\n\n        # Calculate the current difference between the number of 0s and 1s in the current substring\n        current_diff = abs(current_0s - current_1s)\n\n        # Update the maximum difference seen so far\n        max_diff = max(max_diff, current_diff)\n\n    # Return the maximum difference seen so far\n    return max_diff\n",
        "test": "assert find_length(\"101101\") == 2 ",
        "num_ids": 3148,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize sum\n    sum_divisors = 0\n\n    # Find common divisors\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n\n    return sum_divisors",
        "test": "assert sum(8,12) == 20 # test case 4",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(1, \"Python is fun\") == []  # test for no words longer than 1 character",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # First, we need to check that the matrix has a dimension of n x n, where n is an odd integer.\n    n = len(my_matrix)\n    if n % 2 == 0 or n < 1 or n > 26:\n        return False\n    \n    # Now, we need to check if the matrix has the right sums at each row, column and diagonal.\n    target_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != target_sum:\n            return False\n    for col in range(n):\n        if sum(row[col] for row in my_matrix) != target_sum:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != target_sum or sum(my_matrix[i][n-i-1] for i in range(n)) != target_sum:\n        return False\n    \n    # If all checks pass, we can say that the matrix is a magic square.\n    return True\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num\n",
        "test": "assert max_occurrences([1, 2, 3, 2, 3, 1, 2, 1, 2]) == 2",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    reversed_vowels = vowels_list[::-1]\n    new_str1 = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str1 += reversed_vowels.pop(0)\n        else:\n            new_str1 += char\n    return new_str1",
        "test": "assert reverse_vowels(\"\") == \"\", \"Reverse vowels function not working correctly.\"",
        "num_ids": 1304,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1.strip()\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n    # Return the sum\n    return sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0, \"The sum of negative numbers is incorrect\"",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    a, b = 0, 1  # initialize first two Fibonacci numbers\n    count = 0  # initialize counter\n    while count < n:\n        a, b = b, a + b  # update Fibonacci numbers\n        count += 1  # increment counter\n    return a",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    non_zero_count = len(nums) - count\n    ratio = count / non_zero_count\n    return ratio\n",
        "test": "assert zero_count([1, 1, 2, 3, 4, 5]) == 0/6",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # convert the given number to binary form\n    binary_form = bin(n)\n    # check if the binary form has only zeros and ones\n    if '0b' in binary_form or '1b' not in binary_form:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == True # test case 1",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    circumference = 2 * pi * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0, \"Error in circle_circumference\"",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = set()\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.add(num)\n    return flattened_list\n",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Perform bubble sort algorithm\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(n-i-1):\n            # Swap if the element found is greater than the next element\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                \n        # Reverse the last i elements to place the current largest element at its correct position\n        nums = nums[:n-i-1][::-1] + nums[n-i-1:]\n        \n    return nums\n",
        "test": "assert pancake_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) != [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9, 10]",
        "num_ids": 1701,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[4,5,6],[7,8,9]) == 0",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0  # Test case for an empty tuple",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initialize variables to keep track of the minimum and maximum values seen so far\n    min_val = arr[0]\n    max_val = arr[0]\n    \n    # Iterate over the rest of the array\n    for val in arr[1:]:\n        # Update the minimum and maximum values seen so far\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n            \n    # Return the maximum absolute difference between any two elements in the array\n    return max(max_val - min_val, 0)\n",
        "test": "assert max_Abs_Diff([1, 1, 1, 1, 1]) == 0",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        y = n // b\n        if n % b == 0:\n            return (0, y)\n        else:\n            return None\n    elif b == 0:\n        x = n // a\n        if n % a == 0:\n            return (x, 0)\n        else:\n            return None\n    else:\n        x = n // a\n        y = x * b\n        if y == n:\n            return (x, y)\n        else:\n            return None\n",
        "test": "assert find_solution(1, 0, 1) == (1, 0)",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [3, 4]) == [1, 2, 5] ",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n    return total",
        "test": "assert sum_series(8) == 20, \"Error: sum_series(8) should be 20\"",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Formula for the area of a regular polygon: 1/2*s*l\n    # Where s is the side length and l is the number of sides\n    area = 0.5 * s * l\n    return area\n",
        "test": "assert area_polygon(3, 4) == 6.0, \"The area of a regular triangle with 3 sides of length 4 is 6.0\"",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors) == n\n",
        "test": "assert div_sum(13) == False, \"Should return False for 13\"",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower() # convert string to lowercase\n    for i in range(26):\n        if str1.count(chr(ord('a')+i)) > 0:\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"\") == 0  # There are no characters that occur at the same position as in the English alphabet.",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1,3,5]) == 0",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9], 4) == 1 # check if the function is working correctly for a specific input",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1):\n        return \"Invalid range\"\n    else:\n        return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9 # correct range",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(3) == 15.0",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"This is a string\") == 0",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    if all(type(x) == data_type for x in test_tuple):\n        return True\n    else:\n        return False\n",
        "test": "assert check_type((1,2,3)) is True # tuple with integers",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9, 10], 10, 5) == False",
        "num_ids": 2115,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0 ",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\" # remove 'e' as it has an odd index value",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert min_of_three(10,20,30) == 10",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i).count('1') != n:\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 0, 1) == False",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Separate negative and positive elements\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # Combine the elements in their new order\n    new_arr = neg + pos\n    \n    return new_arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5, -1, -2, -3, -4, -5], 10) == [1, 2, 3, 4, 5, -1, -2, -3, -4, -5] # Test case 4",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1\n",
        "test": "assert replace_blank(\"\",\"*\") == \"\" # Test case 4",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Using heapq to get the n largest items from the list\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([1, 1, 1, 1, 1], 1) == [1]  # test case 3",
        "num_ids": 1266,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "import math\n\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsuface = 2 * math.pi * r * h\n    return lateralsuface\n",
        "test": "assert lateralsuface_cylinder(1,2) == 12.566370614359172",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume",
        "test": "assert volume_cube(2) == 8 # check if volume of a cube with side length 2 is 8",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    while n > 0:\n        if n & 1 == 0:  # checks if the least significant bit of n is 0\n            result |= n  # sets the least significant bit of result to 1\n        n >>= 1  # shifts the bits of n to the right by 1\n    return result",
        "test": "assert even_bit_set_number(0b0000) == 0b0000  # all bits are even",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 237,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for tup in test_list:\n        counter[tup] += 1\n    return dict(counter)",
        "test": "assert check_occurences([]) == {}  # test 3",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def number_of_substrings(str):\n    # Initialize the count variable\n    count = 0\n\n    # Loop through each character of the string\n    for i in range(len(str)):\n        # Loop through each possible substring starting at index i\n        for j in range(i+1, len(str)+1):\n            # Increment the count for each non-empty substring\n            if str[i:j] != '':\n                count += 1\n\n    return count",
        "test": "assert number_of_substrings(\"\") == 0  # empty string",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total_sequences = 0\n    prev_element = 0\n\n    # Loop through each possible starting element\n    for i in range(2, m+1):\n        # Loop through each possible length of the sequence\n        for j in range(1, n+1):\n            # Check if the current element is within the range\n            if i >= 2*prev_element and i <= m:\n                # If it is, add the number of possible sequences for that element\n                total_sequences += 2**(j-1)\n            # Update the previous element\n            prev_element = i\n\n    # Return the total number of possible sequences\n    return total_sequences\n",
        "test": "assert get_total_number_of_sequences(10, 1) == 1",
        "num_ids": 2841,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # First, find the length of the second list\n    list2_len = len(list2)\n    \n    # Then, replace the last element of the first list with the second list\n    list1[-1:] = list2\n    \n    # Return the updated first list\n    return list1\n",
        "test": "assert replace_list([1,2,3], [4,5]) == [1,2,4,5]",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"\") == 0, \"Incorrect count\"",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        return (sqrt_N + 1)**2\n    else:\n        return int(math.ceil(sqrt_N))**2",
        "test": "assert next_Perfect_Square(9) == 16 # test for N=9",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = [0] * n\n    inc_max = [0] * n\n    dec_max = [0] * n\n    \n    # Initialize max_sum, inc_max and dec_max\n    max_sum[0] = arr[0]\n    inc_max[0] = arr[0]\n    dec_max[0] = 0\n    \n    for i in range(1, n):\n        # Update max_sum for the current index\n        max_sum[i] = max(max_sum[i-1] + arr[i], inc_max[i-1])\n        \n        # Update inc_max for the current index\n        if arr[i] > arr[i-1]:\n            inc_max[i] = max(inc_max[i-1] + arr[i], max_sum[i-1])\n        else:\n            inc_max[i] = max_sum[i-1]\n            \n        # Update dec_max for the current index\n        dec_max[i] = max(dec_max[i-1], dec_max[i-1])\n        \n        # Update dec_max for the current index if arr[i] > arr[i-1]\n        if arr[i] < arr[i-1]:\n            dec_max[i] = max(dec_max[i], dec_max[i-1] + arr[i])\n    \n    return max_sum[n-1]\n",
        "test": "assert max_sum([1]) == 1  # Example of a single element bitonic subsequence",
        "num_ids": 2043,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the Babylonian method.\n    '''\n    # initialize the approximation to the square root\n    approximation = number / 2\n\n    # iterate until the difference between successive approximations is small\n    while abs(approximation**2 - number) > 0.0001:\n        approximation = (approximation + number / approximation) / 2\n\n    # return the approximation as the square root of the number\n    return approximation\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"BBABCBCAB\") == 7, \"Longest palindromic subsequence not found correctly for the input string 'BBABCBCAB'\"",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(1) == 0, \"harmonic_sum(1) should return 0\"",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert intersection_array([1,2,3,4,5], [5,4,3,2,1]) == [1,2,3,4,5] # test case 3",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count",
        "test": "assert count_X((1, 2, 3, 4, 5), 2) == 1, \"Count should be 1 for 2\"",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def insert_element(lst, elem):\n    result = []\n    for i in lst:\n        result.append(elem)\n        result.append(i)\n    return result",
        "test": "assert insert_element([1,2,3],4) == [4,1,4,2,4,3]",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        if type(number) != complex:\n            raise TypeError(\"Input must be a complex number\")\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert(0) == (0, 0) # should return (0, 0)",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5 ",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for comb in combinations_with_replacement(l, n):\n        result.append(comb)\n    return result\n",
        "test": "assert combinations_colors(['r', 'g', 'b'], 1) == [('r',), ('g',), ('b',)]",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        # check if the number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4 # There are 4 prime numbers less than 10: 2, 3, 5, and 7",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Create an empty list to store the maximum values\n    max_list = []\n    \n    # Iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # If the element at the current index is greater than the element at the same index in the second tuple\n        if test_tup1[i] > test_tup2[i]:\n            # Add the element to the max_list\n            max_list.append(test_tup1[i])\n        else:\n            # Add the element from the second tuple to the max_list\n            max_list.append(test_tup2[i])\n    \n    # Convert the max_list to a tuple and return it\n    return tuple(max_list)\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6) ",
        "num_ids": 1547,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    \n    count = 1\n    i = 3\n    while count < n:\n        if i % 2 == 0:\n            i += 1\n            continue\n        is_prime = True\n        for j in range(3, int(i**0.5)+1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        i += 2\n        \n    return i - 2\n",
        "test": "assert newman_prime(1) == 2, \"Function is not correct for n=1\"",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result_tuple += (test_tup1[i]/test_tup2[i],)\n        else:\n            result_tuple += (None,)\n    return result_tuple",
        "test": "assert division_elements((2, 4, 6), (2, 2, 3)) == (1.0, 2.0, 2.0)",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def split_two_parts(list1, L):\n    # If L is greater than the length of list1, return None\n    if L > len(list1):\n        return None\n    \n    # Split the list into two parts with the first part having length L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the resulting lists in a tuple\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 1456,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert dog_age(4) == 37 # if a human being is 4 years old, their dog is 37 years old.",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    temp = []\n    for i in range(len(S)):\n        temp.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(temp)\n            temp = []\n    if temp:\n        result.append(temp)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]] # check if list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) returns [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]] ",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(1) == 6  # when l = 1, the lateral surface area of a cube is 6 square units. ",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, 2*n, 2):\n        odd_sum += i*i\n    return odd_sum\n",
        "test": "assert square_Sum(1) == 1  # the first odd number is 1, which when squared is 1.",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    # initialize variables\n    count = 0\n    stars = 1\n    \n    # loop through numbers until the nth star is found\n    while count < n:\n        count += stars\n        stars += 1\n    \n    # return the n'th star number\n    return stars - 1\n",
        "test": "assert find_star_num(1) == 1, \"Error in find_star_num(1)\" ",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0, \"The function should return 0 for [1,3,5,7,9]\" ",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Raise the even number to the fifth power and add it to the sum\n        sum += i**5\n    # Return the sum\n    return sum\n",
        "test": "assert even_Power_Sum(1) == 2 ** 5  # Testing for n=1",
        "num_ids": 1968,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tuple = tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n    return result_tuple\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 1267,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(3) == 4  # input n=3, expected output=4",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(3, 5) == 314.1592653589793  # The volume of a cylinder with radius 3 and height 5 is 314.16. ",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def dict_filter(d, n):\n    '''\n    Filter a dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in d.items() if v >= n}\n",
        "test": "assert dict_filter({\"a\": 10, \"b\": 5, \"c\": 15, \"d\": 10}, 8) == {\"a\": 10, \"c\": 15, \"d\": 10}",
        "num_ids": 1267,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i != 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n        elif i == 0 and test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(()) == 0  # test empty tuple",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n*2 - 1)) // 2\n",
        "test": "assert is_num_decagonal(4) == 16  # 4th decagonal number is 16",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1051,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert all_unique([1, 2, 3]) == True  # Test 1",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3] ",
        "num_ids": 1483,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n):\n    # convert the integer to a string\n    s = str(n)\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    # iterate through each digit in the string\n    for digit in s:\n        # if the digit is not in the dictionary, add it with a count of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # if the digit is already in the dictionary, increment its count\n        else:\n            freq[digit] += 1\n    # iterate through each digit in the dictionary and check if its frequency is <= the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    return True\n",
        "test": "assert validate(12345) == True # the frequency of each digit is less than or equal to the digit itself",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Function that checks whether all elements in a list are equal to a given element\n\n    Args:\n    lst (list): List of elements to check\n    element (any): Element to compare with\n\n    Returns:\n    bool: True if all elements in lst are equal to element, False otherwise\n    \"\"\"\n    return all(elem == element for elem in lst)\n",
        "test": "assert check_element([], 1) == True",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"ababb\") == True",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the array k times\n    a_repeated = [x for i in range(k) for x in a]\n    n_repeated = len(a_repeated)\n    # Initialize variables to keep track of the maximum sum\n    max_sum = float('-inf')\n    current_sum = 0\n    # Iterate through the repeated array\n    for i in range(n_repeated):\n        current_sum += a_repeated[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5, -6], 1, 1) == -1",
        "num_ids": 1750,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through first n even natural numbers\n    for i in range(1, 2*n, 2):\n        # Add square of the current number to sum\n        sum += i**2\n    \n    # Return the sum\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_length(list1):\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12, 13]]) == 4  # there is one list of length 4 in the input list",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # Base cases\n    if n == 1 or k == 1:\n        return 1\n\n    # Initialize dp array with all 1's\n    dp = [1] * n\n\n    # Fill the dp array\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i] += dp[i-1] * dp[i-2]\n\n    # Return the result\n    return dp[-1]",
        "test": "assert count_no_of_ways(1, 1) == 1  # there is only 1 way to paint the fence with 1 post and 1 color",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return n // m\n",
        "test": "assert find(10, 3) == 3 # check if it returns 3 for 10 divided by 3",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the Pythagorean theorem to calculate the missing side\n    missing_side = math.sqrt(w**2 + h**2)\n    return missing_side\n",
        "test": "assert otherside_rightangle(3,4) == 5, \"Incorrect value returned\"",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(1) == 1  # The only divisor of 1 is 1 itself.",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def flatten_list(nested_list):\n    \"\"\"\n    Function to flatten a nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n",
        "test": "assert flatten_list([1, 2, [3, [4, 5], 6], 7, [8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "num_ids": 1204,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # Create a dictionary to store the aggregates\n    aggregates = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for start, end, value in stdata:\n        # Add the value to the aggregate for each day between start and end\n        for day in range(start, end+1):\n            aggregates[day] += value\n    \n    # Find the maximum aggregate\n    max_agg = max(aggregates.values())\n    \n    return max_agg\n",
        "test": "assert max_aggregate([(1,2), (3,4), (-5,-3)]) == 9",
        "num_ids": 1699,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        first_sum = 2**n - 1\n        last_sum = 2**n - 1\n        count = 0\n        for i in range(1, first_sum+1):\n            if i < last_sum:\n                count += count_binary_seq(n-1)\n            else:\n                last_sum -= 2**(n-1)\n                count += count_binary_seq(n-1)\n        return count",
        "test": "assert count_binary_seq(0) == 0",
        "num_ids": 2849,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = depth\n    for key in d:\n        if type(d[key]) == dict:\n            max_depth = max(max_depth, dict_depth(d[key], depth + 1))\n    return max_depth\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr):\n        return \"Invalid index\"\n    \n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            index -= rotations[i]\n            \n    return arr[index]\n",
        "test": "assert find_Element([1,2,3,4,5], [1,2], [1,1], 3) == 2, \"Incorrect result\"",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]\n",
        "test": "assert start_withp(['python', 'java', 'ruby', 'perl']) == ['python', 'perl'] ",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize variables\n    max_sum = 0\n    dp = [0] * (n+1)\n\n    # Fill the dp array\n    for i in range(n+1):\n        dp[i] = a[i]\n\n    # Iterate over all indices from i to k\n    for i in range(index+1, k+1):\n        # Find the maximum sum from prefix until ith index\n        prev_max = float('-inf')\n        for j in range(i):\n            if a[j] < a[i]:\n                prev_max = max(prev_max, dp[j])\n        dp[i] = a[i] + prev_max\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 1, 4) == 15",
        "num_ids": 2642,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Make a deep copy of the input tuple to avoid modifying the original tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Check if m and n are within the range of the tuple length\n    if m > len(new_tuplex) or n < 0 or m < 0:\n        return None\n    \n    # Get the colon from the copied tuple\n    colon = new_tuplex[m:n]\n    \n    return colon\n",
        "test": "assert colon_tuplex((), 0, 0) == ()",
        "num_ids": 1308,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize empty list to store products\n    products = []\n    \n    # Loop through each number in nums1\n    for num1 in nums1:\n        # Loop through each number in nums2\n        for num2 in nums2:\n            # Multiply the two numbers together and append to products list\n            products.append(num1 * num2)\n    \n    # Sort the products list in descending order\n    products.sort(reverse=True)\n    \n    # Return the specified number of largest products from the products list\n    return products[:N]\n",
        "test": "assert large_product([1, -2, 3, 4], [-1, -2, -3, -4], 2) == [8, 6], \"Incorrect output\"",
        "num_ids": 1897,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10,20) == 20",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1) # return the tuple of characters\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    while ((n & 1) == 1):\n        n >>= 1\n    return n | 1\n",
        "test": "assert set_left_most_unset_bit(0b00000000) == 0b00000001  # 0b00000000 is 0000 0000 0000 0000 in binary, left most unset bit is at index 0",
        "num_ids": 937,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(3, 4) == 108.8775183910044, \"Error in function volume_cone\"",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while (2**count <= n):\n        count += 1\n    return 2**(count-1)",
        "test": "assert highest_Power_of_2(2) == 2",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2 # base case",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n",
        "test": "assert add_string([], '{}') == []",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    memo = {}\n    def dfs(i):\n        if i in memo:\n            return memo[i]\n        if i <= 1:\n            return i\n        memo[i] = max(dfs(i//2) + dfs(i//3) + dfs(i//4) + dfs(i//5), i)\n        return memo[i]\n    return dfs(n)\n",
        "test": "assert get_max_sum(2) == 2",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3],[4,5],[6,7,8,9]]) == [6,7,8,9] ",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "test": "assert check_distinct(()) == True",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store count of each character\n    char_count = {}\n    \n    # iterate through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the string again and find the first character that appears only once\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"aabbcddeeff\") == \"c\"",
        "num_ids": 2055,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"aa\") == True  # Should return True",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a, b, c])\n    length = len(numbers)\n    median = numbers[length // 2]\n    return median",
        "test": "assert median_numbers(3, 2, 1) == 2 # check if median of 3, 2, 1 is 2",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup\n",
        "test": "assert bitwise_xor((0, 1, 1), (1, 0, 1)) == (1, 1, 0)  # test case 1",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4), (1, 2), (2, 3), (3, 4)]) == 3 ",
        "num_ids": 2111,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((), ()) == () ",
        "num_ids": 1806,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(2,3) == 2, \"The function should return the smaller value\"",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((\"apple\", \"banana\", \"cherry\"), (\"kiwi\", \"orange\")) == False",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert find_Parity(1) == True  # positive odd number ",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    # Convert number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Create a new number by concatenating the digits\n    return int(''.join(map(str, digits)))\n",
        "test": "assert rearrange_bigger(12345) == 54321",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    visited = set()\n\n    def add_pair(i, j):\n        if (i, j) not in visited:\n            visited.add((i, j))\n            heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n\n    for j in range(len(nums2)):\n        add_pair(0, j)\n\n    for i in range(1, len(nums1)):\n        for j in range(len(nums2)):\n            add_pair(i, j)\n\n    result = []\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n\n    return result",
        "test": "assert k_smallest_pairs([1,2,3], [4,5,6], 2) == [(1,4), (1,5)]",
        "num_ids": 2099,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0]\n            if product < 0:\n                product = -product\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(2,3), (4,6), (8,9)]) == (2,3), (4,6)",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val < min_val:\n                min_val = val\n    return min_val\n",
        "test": "assert min_val([1,2,3]) == 1",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef snake_to_camel(word):\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)",
        "test": "assert snake_to_camel(\"\") == \"\" # Example 3",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n",
        "test": "assert remove_odd([1,2,3,4,5,6,7,8]) == [2,4,6,8]",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n-1])\n    return result\n",
        "test": "assert extract_nth_element([(1,2), (3,4), (5,6)], 0) == (1,2)  # check if it can handle a list of tuples with different sizes",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def overlapping(list1, list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3,4,5],[4,5,6,7,8]) == True ",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_Product([-10,-10,-10]) == 100, \"Incorrect result for [-10,-10,-10]\"",
        "num_ids": 2270,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        if Input[i][0] in Input[i+1:]:\n            common_elements.append(Input[i][0])\n    return common_elements\n",
        "test": "assert group_tuples([]) == []",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['apple', 'banana', 'cherry']) == 'banana'",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))\n",
        "test": "assert round_and_sum([9.876, 5.432, 3.141, 6.283]) == 257.1 # example input 2",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the first n even numbers\n    for i in range(1, n*2, 2):\n        # find the cube of the number\n        cube = i ** 3\n        \n        # add the cube to the sum variable\n        sum += cube\n    \n    # return the sum of the cubes of the even numbers\n    return sum\n",
        "test": "assert cube_Sum(1) == 1, \"Function should return 1 for n=1\" ",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for i in test_tup:\n        result += i + delimiter\n    return result[:-1] #remove last delimiter\n",
        "test": "assert concatenate_tuple(()) == \"\" # concatenate_tuple returns \"\" when called with an empty tuple",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total / n\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1.0, \"Error in function find_Average_Of_Cube for n=1\"",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        result += (string[-1],)\n    return result\n",
        "test": "assert extract_rear(('abc', 'def', 'ghi')) == ('c', 'f', 'i')",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 1) == 1, \"Counting should be correct for this list and element.\"",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 != 0]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split the date into year, month, and day components\n    year, month, day = map(int, re.split('-', dt))\n    # Combine the day, month, and year components into the desired format\n    return f'{day:02d}-{month:02d}-{year}'",
        "test": "assert change_date_format(\"2022-01-01\") == \"01-01-2022\" ",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list\n",
        "test": "assert shell_sort([5, 3, 8, 1, 7]) == [1, 3, 5, 7, 8] # test with an example input",
        "num_ids": 1362,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (True,)\n        else:\n            result_tup += (False,)\n    return result_tup\n",
        "test": "assert and_tuples((True, True, False), (True, False, False)) == (True, False, False)",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the roots of the quadratic equation\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        # Calculate the directrix\n        directrix = (root1 + root2) / 2\n    \n    # If the discriminant is zero or negative, the parabola has no real roots\n    else:\n        directrix = None\n        \n    return directrix\n",
        "test": "assert parabola_directrix(1, 2, 3) == None  # no directrix",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of the first list\n    set1 = set(list1)\n    \n    # Check if any element in the second list is in the set of the first list\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # If no common element is found, return False\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False ",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(4, 6, 4) == 5  # test base1=4, base2=6, height=4 ",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 2) == True  # The entered number is greater than all elements of the array",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"abbb\") == True",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the number to string\n    num_str = str(n)\n    \n    # finding the last digit of the number\n    last_digit = int(num_str[-1])\n    \n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for num in list1:\n        if num < 0:\n            neg_nos.append(num)\n    return neg_nos\n",
        "test": "assert neg_nos([1, 2, 3, -4, 5, -6, -7]) == [-4, -6, -7] ",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\" # empty string",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,4), (4,5)]) == 0",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n",
        "test": "assert multiple_to_single([0]) == 0, \"Error: Incorrect output for multiple_to_single([0])\"",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to match adverbs\n    adv_regex = r'\\b(early|earlier|later|lately|late|soon|often|usually|oftentimes|oftenly)\\b'\n    \n    # Find all matches of adverbs in the given text\n    matches = re.findall(adv_regex, text)\n    \n    # If no adverbs are found, return an empty list\n    if not matches:\n        return []\n    \n    # Get the first adverb and its position in the text\n    first_adv = matches[0]\n    first_adv_pos = text.find(first_adv)\n    \n    # Return a list with the first adverb and its position\n    return [(first_adv, first_adv_pos)]\n",
        "test": "assert find_adverb_position(\"The weather is forecasted to be sunny.\") == []",
        "num_ids": 1389,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "test": "assert surfacearea_cube(6) == 216, \"Error: surfacearea_cube is not correct for side length 6\"",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count([1,2,3,4,5]) == 5/5",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([2, 4, -3, 1, -5]) == -3 ",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = (tup[K:len(tup)-K],)\n        result.append(new_tup)\n    return result",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == [(), (), ()]",
        "num_ids": 1280,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i]*test_tup2[i],)\n    return result_tuple\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for item in lst:\n        count[item] += tup.count(item)\n    return count\n",
        "test": "assert count_Occurrence(('a', 'b', 'c', 'b', 'c'), []) == {}",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += 2*i - 1\n    return perrin_sum\n",
        "test": "assert cal_sum(1) == 1, \"Error: cal_sum(1) should be 1\"",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str_list]\n",
        "test": "assert extract_string([], 3) == []",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(' ', '', text1)\n    return text1\n",
        "test": "assert remove_whitespaces(\"\") == \"\"",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 120) == 0",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n            if n//i != i and n//i%2 == 0:\n                sum += n//i\n    return sum",
        "test": "assert sumofFactors(1) == 0, \"sumofFactors(1) should be 0\"",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches",
        "test": "assert text_match_wordz(\"The word with the letter z is not in the text.\") == None",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(4) == True",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]  # example 1",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def Find_Min(lst):\n    min_len = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i < min_len:\n                min_len = j-i\n    return min_len\n",
        "test": "assert Find_Min([1,1,1,1,1]) == 1 # smallest sublist is [1]",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(2, 3) == 6  # test case 1",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]+\\b', '', str1)\n",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def Extract(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]  # test for a list of sublists of length 3 ",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World!\") == 2 # Expected output: 2",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    \n    result = []\n    for i in range(1, len(list1)+1):\n        temp = list(itertools.combinations(list1, i))\n        result.extend(temp)\n    \n    return result\n",
        "test": "assert combinations_list([]) == [] ",
        "num_ids": 1856,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_subarray_product(arr):\n    max_product = 1\n    min_product = 1\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n        else:\n            max_product, min_product = min_product * arr[i], max_product * arr[i]\n            \n        max_so_far = max(max_so_far, max_product)\n    \n    return max_so_far\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0  # All numbers are negative",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a variable to keep track of the first value encountered\n    first_value = None\n    # iterate over the key-value pairs in the dictionary\n    for key, value in dict.items():\n        # if the first value is None, set it to the current value\n        if first_value is None:\n            first_value = value\n        # if the current value is different from the first value, return False\n        elif value != first_value:\n            return False\n    # if all values are the same, return True\n    return True\n",
        "test": "assert check_value({1:2, 3:4, 5:2}, 2) == False # Expected output: False",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({'name': 'John', 'age': 30, 'email': '', 'phone': '555-5555'}) == {'name': 'John', 'age': 30, 'phone': '555-5555'}  # remove empty string from email key",
        "num_ids": 1257,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        dp[i] = max(dp[i-1]*arr[i], dp[i-2]*arr[i], arr[i])\n    \n    return dp[n-1]",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120, \"Incorrect result\"",
        "num_ids": 1392,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise(()) == () # empty tuple",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "test": "assert find_remainder([1,2,3,4,5], 10) == 0 # Example usage of find_remainder",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list is empty\n    if len(l) == 0:\n        return False\n    \n    # Check if the list contains consecutive numbers\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # Convert both lists to sets to enable set operations\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersect = set1.intersection(set2)\n    \n    # Convert the intersection back to a tuple\n    result = tuple(intersect)\n    \n    return result\n",
        "test": "assert tuple_intersection((1, 2, 3), (4, 5, 6)) == ()",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char('hello', 'l', 'z') == 'hezzo'  # Replace the first 'l' with 'z'",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    count_dict = Counter(dict1)\n    # Sort the counter object by value\n    sorted_count_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    # Return the sorted dictionary\n    return dict(sorted_count_dict)\n",
        "test": "assert sort_counter({\"a\": 5, \"b\": 2, \"c\": 1}) == {\"c\": 1, \"b\": 2, \"a\": 5} # test with a dictionary",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n",
        "test": "assert big_sum([0, 0, 0, 0, 0]) == 0 ",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello World\") == \"hello world\" ",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r\"[a-z]+\")\n    return pattern.sub(\"\", str1)\n",
        "test": "assert remove_lowercase('aaa') == ''",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string so we can access its digits\n    s = str(n)\n    # return the first digit of the number\n    return int(s[0])\n",
        "test": "assert first_Digit(123) == 1 # Testing for positive integer input",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for i in list:\n        if i % 2 != 0:\n            odd_list.append(i)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5] # odd numbers only ",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(1) == 1 - 1",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if bin((A[i]^A[j]))[2:].count('1')%2 == 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 1) == 0 # there are 0 pairs whose xor value is odd ",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the numbers to strings so we can iterate over their digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum to 0\n    sum_diff = 0\n\n    # Iterate over the digits of the first number\n    for digit in n1_str:\n        # Find the corresponding digit in the second number\n        digit2 = n2_str[n1_str.index(digit)]\n\n        # Calculate the absolute difference between the digits and add it to the sum\n        sum_diff += abs(int(digit) - int(digit2))\n\n    return sum_diff\n",
        "test": "assert digit_distance_nums(12345, 54321) == 12  # 1 - 5 + 2 - 4 + 3 - 1 = 12",
        "num_ids": 1936,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4, -5], 5) == -1 #test 2",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union = set(test_tup1).union(set(test_tup2))\n    \n    # sort the union and return it as a tuple\n    return tuple(sorted(union))\n",
        "test": "assert union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to match values between quotation marks\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "test": "assert extract_values(\"There are no values in this sentence.\") == []",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10  # Example usage for count_Pairs function",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"] # Test case 1",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list has only one element\n    if len(list1) <= 1:\n        return True\n    \n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # If the list is sorted, return True\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True # list is sorted",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([['apples', 'bananas', 'oranges'], ['grapes', 'strawberries']]) == [['apples', 'bananas', 'oranges'], ['grapes', 'strawberries']]",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    surface_area = 2 * pi * r * h + 2 * pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_cylinder(8,9) == 848.534163194686 # for r=8 and h=9",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(A)):\n        if A[i] != B[i]:\n            return False\n    \n    return True\n",
        "test": "assert is_Sub_Array([1, 2, 3, 4, 5], [2, 3, 6]) == False # Incorrect sub-array",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(str(factorial)[-1])\n",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        return \"Error: Lists must be of the same length.\"\n    else:\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i])\n            result.append(list2[i])\n            result.append(list3[i])\n        return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_list.append(elem)\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            dissimilar_list.append(elem)\n    return tuple(dissimilar_list)\n",
        "test": "assert find_dissimilar((1,2,3), (2,3,4)) == (1, 4)",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            inner_result = even_fnc(i)\n            if inner_result:\n                result.append(inner_result)\n        elif i % 2 == 0:\n            result.append(i)\n    return tuple(result)\n",
        "test": "assert even_ele((1,2,3,4,5), lambda x: x % 2 == 0) == (2, 4) ",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s + 2 * (b * b) * (1/3)\n    return area\n",
        "test": "assert surface_Area(3,2) == 12 # base edge = 3, height = 2",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True, \"Empty dictionary should be considered empty\"",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan\n",
        "test": "assert catalan_number(0) == 1, \"Catalan number of 0 should be 1\"",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef find_adverbs(text):\n    adverb = re.search(r'\\b(\\w+ly)\\b', text)\n    if adverb:\n        return adverb.group()\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"The dog jumps joyfully.\") == ([\"joyfully\"], [11]) ",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappushpop(heap, item)\n    return [item for item in reversed(heap)]\n",
        "test": "assert expensive_items([(1, 5), (2, 3), (3, 1), (4, 8), (5, 10)], 2) == [(5, 10), (4, 8)] ",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"n is greater than the length of the list.\")\n        return\n    \n    new_list = l[n:] + l[:n]\n    return new_list\n",
        "test": "assert split_Arr([1,2,3,4,5], 0) == [1,2,3,4,5,4,5]",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) ",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17, \"Test 1 Failed\"",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    perfect_squares_list = []\n    for i in range(a, b+1):\n        root = int(i ** 0.5)\n        if root * root == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(16, 25) == [16, 25]",
        "num_ids": 1596,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import cmath\n\ndef polar_rect(rho, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    return x, y\n",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1] ",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Compute the binomial coefficient C(n, k) using the formula:\n        C(n, k) = n! / (k! * (n-k)!) = n * (n-1) * ... * (n-k+1) / k * ... * 1\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    coeff = 1\n    for i in range(k):\n        coeff = coeff * (n - i)\n    return coeff // factorial(k)\n\n\ndef factorial(n):\n    \"\"\"\n    Compute the factorial of n recursively.\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\n\ndef sum_of_product_of_consecutive_binomial_coeff(n, k):\n    \"\"\"\n    Compute the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    total = 0\n    for i in range(k):\n        total += binomial_Coeff(n, i) * binomial_Coeff(n, k-i-1)\n    return total\n",
        "test": "assert binomial_Coeff(5, 2) == 10",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octets = re.findall(r'\\d+', ip)\n    for i in range(len(octets)):\n        octets[i] = str(int(octets[i]))\n    return '.'.join(octets)\n",
        "test": "assert removezero_ip(\"255.255.255.255\") == \"255.255.255.255\"",
        "num_ids": 1261,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if not even_found and num % 2 == 0:\n            even_found = True\n            even_num = num\n        elif not odd_found and num % 2 == 1:\n            odd_found = True\n            odd_num = num\n        \n        if even_found and odd_found:\n            break\n    \n    return abs(even_num - odd_num)\n",
        "test": "assert diff_even_odd([1,2,3,4]) == 1, \"Error in diff_even_odd([1,2,3,4])\" ",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        raise ValueError(\"Both strings must have the same length\")\n\n    swaps = 0\n    index_map = {}\n\n    for i, c in enumerate(str1):\n        if c == '1':\n            index_map[i] = '1'\n\n    for i, c in enumerate(str2):\n        if c == '1':\n            if i not in index_map:\n                swaps += 1\n            else:\n                del index_map[i]\n\n    return swaps + len(index_map)",
        "test": "assert min_Swaps('1111','1110') == 1",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)",
        "test": "assert tuple_size((1,2,3)) == 12 # two integers each occupy 8 bytes in memory, so 12 bytes in total for 3 integers in a tuple. ",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    \n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if i + k <= len(arr1):\n                return arr1[i+k-1]\n            else:\n                return arr2[j]\n        else:\n            if j + k <= len(arr2):\n                return arr2[j+k-1]\n            else:\n                return arr1[i]\n    \n    while i < len(arr1):\n        if i + k <= len(arr1):\n            return arr1[i+k-1]\n        else:\n            break\n    \n    while j < len(arr2):\n        if j + k <= len(arr2):\n            return arr2[j+k-1]\n        else:\n            break\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 3) == 5",
        "num_ids": 2110,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to string for calculation\n    num_str = str(number)\n    # initialize the sum and length of the number\n    sum = 0\n    length = len(num_str)\n    # loop through each digit of the number\n    for digit in num_str:\n        # calculate the sum of the cubes of each digit\n        sum += int(digit)**length\n    # check if the sum is equal to the given number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True # 153 is an Armstrong number ",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    avg = total/number\n    return total, avg\n",
        "test": "assert sum_average(10) == (55, 5.5) ",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(4) == True ",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the string again and return the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"Hello, world!\") == \"l\"",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(1, n+1):\n        if sum(int(digit)**len(str(i)) for digit in str(i)) == i:\n            lucid.append(i)\n    return lucid\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 2309,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the order of the words\n    words = words[::-1]\n    \n    # Join the reversed words back into a string\n    reversed_s = \" \".join(words)\n    \n    return reversed_s\n",
        "test": "assert reverse_words(\"   \") == \"\"  # test case 4",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    # Check for factors\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2), \"2 is a prime number\"",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radians = math.radians(degree)\n    return radians\n",
        "test": "assert radian_degree(0) == 0 # Check if 0 degrees is converted to 0 radians.",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog.\", re.compile(r'\\b[a-z]{3}\\b')) == ('fox', 16, 19)",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    else:\n        bell_sum = 0\n        for k in range(n):\n            bell_sum += bell_Number(k) * bell_Number(n-1-k)\n        return bell_sum\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.pop(L-1)  # L is 1-indexed, so subtract 1 to get the correct index for pop()\n    return list1\n",
        "test": "assert remove_kth_element([1], 0) == []",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = None\n    for row in test_list:\n        if len(row) > N:\n            if max_value is None or row[N] > max_value:\n                max_value = row[N]\n    return max_value\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 9 # Test case 4",
        "num_ids": 1519,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def merge(lst):\n    # create two empty lists\n    first_half = []\n    second_half = []\n    # iterate over the given list\n    for sublist in lst:\n        # append the first element of each sublist to the first list\n        first_half.append(sublist[0])\n        # append the second element of each sublist to the second list\n        second_half.append(sublist[1])\n    # return a list of two lists containing the first and second half of the original list\n    return [first_half, second_half]\n",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]] # merge([[1,2],[3,4],[5,6]]) should return [[1,3,5],[2,4,6]]",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    # initialize a list to store the cumulative sum at each index\n    cum_list = []\n    # iterate over the test_list\n    for i in range(len(test_list)):\n        # add the current value to the cumulative sum\n        cum_sum += test_list[i]\n        # append the cumulative sum to the cum_list\n        cum_list.append(cum_sum)\n    # return the cum_list\n    return cum_list\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6], \"Error in function cummulative_sum\"",
        "num_ids": 1079,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Iterate over each tuple in the input list\n    for tup in nums:\n        # Compute the average of the elements in the current tuple\n        avg = sum(tup) / len(tup)\n        # Append the average to the output list\n        averages.append(avg)\n    \n    return averages\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6))) == [2.0, 5.0]",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((1,2,3,4),(5,6,7,8)) == (1,2,3,4)",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    jumps = 0\n    pos = 0\n    \n    # Iterate over steps until we reach the destination\n    while pos < d:\n        # Check if we can reach the next position\n        if pos + steps > d:\n            # We can't, so we need to take more jumps\n            jumps += 1\n            # Reset the position to 0 and decrement the number of steps\n            pos = 0\n            steps -= 1\n            # If we have reached the end of the steps array, we can't reach the destination\n            if steps == 0:\n                return -1\n        else:\n            # We can reach the next position, so increment the position\n            pos += steps\n    \n    # We've reached the destination, so return the number of jumps\n    return jumps\n",
        "test": "assert min_Jumps(2, 1) == 1",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result\n",
        "test": "assert div_list([1, 2, 3], [1, 2, 3]) == [1, 1, 1]",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    non_nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums + nums)",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()  # sort the list in ascending order\n    n = len(a)\n    max_size = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] % a[i] == 0:\n            j += 1\n        max_size = max(max_size, j - i)\n        i = j\n    return max_size\n",
        "test": "assert largest_subset([]) == 0",
        "num_ids": 1625,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    i = 0\n    j = 0\n    k = 0\n    median = None\n\n    while k < n:\n        if i == len(arr1) or j == len(arr2):\n            break\n        elif arr1[i] < arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n\n        k += 1\n\n    if k == n:\n        if i == len(arr1):\n            median = arr2[j]\n        elif j == len(arr2):\n            median = arr1[i]\n\n    return median\n",
        "test": "assert get_median([1, 2], [3, 4, 5], 2) == 3     # one sorted list, one not sorted, median should be 3",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16] # Test 1",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"123\") == False",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]  # test with a simple list",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\n\ndef triangle_area(r):\n    # Find the circumference of the semicircle using the formula 2*pi*r\n    circumference = 2 * math.pi * r\n    \n    # Find the maximum possible area of a triangle that can be inscribed in the semicircle\n    max_area = (r ** 2) / 2\n    \n    # Find the minimum possible area of a triangle that can be inscribed in the semicircle\n    min_area = (r ** 2) / 3\n    \n    # Initialize a variable to store the area of the largest possible triangle\n    largest_area = 0\n    \n    # Initialize a variable to store the length of the largest possible triangle\n    largest_length = 0\n    \n    # Iterate through all possible lengths of triangles in the semicircle\n    for length in range(int(circumference / 2), int(r) + 1):\n        # Calculate the area of the current triangle\n        current_area = (r ** 2) / (4 * length)\n        \n        # If the current area is greater than the max_area, break out of the loop\n        if current_area > max_area:\n            break\n        \n        # If the current area is greater than the largest_area, update the largest_area and largest_length\n        if current_area > largest_area:\n            largest_area = current_area\n            largest_length = length\n    \n    # Return the largest possible area of a triangle inscribed in the semicircle with radius r\n    return largest_area\n",
        "test": "assert triangle_area(4) == 8.638  # radius = 4, area = pi*4^2/4 = 8.638",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i] != i + 1:\n            return i + 1\n    return end + 1\n",
        "test": "assert find_First_Missing([1,2,3,4,5,7,8,9]) == 6",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n",
        "test": "assert replace_spaces(\"Hello world\") == \"Hello%20world\"",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([1,2,3,4]) == [2,4]",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjac_list = [(x-1, y), (x, y-1), (x+1, y), (x, y+1)]\n    if sub:\n        adjac_list = [item for item in adjac_list if item not in sub]\n    return adjac_list\n",
        "test": "assert adjac((1,1)) == [(0,1), (1,0), (2,1), (1,2)]  # adjacent coordinates of (1,1)",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    if \" \" in text:\n        return text.replace(\" \", \"_\")\n    elif \"_\" in text:\n        return text.replace(\"_\", \" \")\n    else:\n        return text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_indices = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_indices.append(i)\n    for i in zero_indices[::-1]:\n        num_list.pop(i)\n    num_list.extend([0]*len(zero_indices))\n    return num_list\n",
        "test": "assert move_zero([1, 2, 3, 4]) == [1, 2, 3, 4]  # check that list with no zeroes returns the same list",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def pair_xor_sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([10, 20, 30, 40, 50], 5) == 50, \"Error in pair_xor_Sum function\"",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list using heapq module.\n    \"\"\"\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert heap_sort([5, 2, 7, 1, 8]) == [1, 2, 5, 7, 8] ",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    rounded_wci = round(wci)\n    \n    return rounded_wci\n",
        "test": "assert wind_chill(10, -10) == 23 ",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"Alice\", \"bob\", \"charlie\", \"Danielle\", \"eve\"]) == 13 # check that the function can handle mixed cases",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    # using regex to match pattern inside parenthesis and remove it\n    pattern = re.compile(r'\\((.*?)\\)')\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis('()') == '', 'Function should remove empty parenthesis'",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    \n    # Calculate the nth nonagonal number using a loop\n    nonagonal_num = 0\n    num = 1\n    \n    for i in range(1, n+1):\n        nonagonal_num = (2 * i * (i-1) + 1) * num\n        num = nonagonal_num\n    \n    return nonagonal_num\n",
        "test": "assert is_nonagonal(1) == 1, \"is_nonagonal(1) should be 1\"",
        "num_ids": 1002,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Create a regular expression pattern to match words with 'z' in the middle\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"hello world\") == False",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def reverse_Array_Upto_K(input, k):\n    if k >= len(input):\n        k = len(input) - 1\n    \n    start = 0\n    end = k\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((\"apple\", 2), {\"color\": \"red\"}) == (\"apple\", 2, {\"color\": \"red\"})",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    if n == 1:\n        return cost[0][0]\n    \n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n    \n    max_average = -1\n    for i in range(n):\n        for j in range(n):\n            average = dp[i][j] / (i + j + 1)\n            if average > max_average:\n                max_average = average\n    \n    return max_average\n",
        "test": "assert maxAverageOfPath([[5,1,3],[1,5,9],[7,3,5]]) == 5, \"The maxAverageOfPath function is not working correctly for this input\" ",
        "num_ids": 2779,
        "indeed": true
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for key, value in students.items():\n        if value[0] > h and value[1] > w:\n            filtered_students[key] = value\n    return filtered_students\n",
        "test": "assert filter_data({'John': (1.8, 80), 'Emily': (1.65, 70), 'David': (1.75, 85)}, 1.7, 75) == {'John': (1.8, 80), 'David': (1.75, 85)} ",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Converting the base to string\n    base = str(base)\n    # Initializing the sum variable to 0\n    sum = 0\n    # Iterating through each digit of the base raised to the power\n    for digit in str(int(base) ** power):\n        # Adding the value of the digit to the sum variable\n        sum += int(digit)\n    # Returning the sum\n    return sum\n",
        "test": "assert power_base_sum(4, 1) == 4 # should return 4^1 = 4",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Using regular expression to find values between quotation marks \" \"\n    values = re.findall(r'\"(.*?)\"', text1)\n    # Returning the values found\n    return values\n",
        "test": "assert extract_quotation('\"hello! world\"') == 'hello! world'  # case with exclamation mark",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1,2,3)) == (2,6) # for (1,2) * (2,3)",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize the result list with the length of the shorter list\n    result = [0] * min(len(lst1), len(lst2))\n    # Loop through the lists and sum the corresponding elements\n    for i in range(min(len(lst1), len(lst2))):\n        result[i] = lst1[i] + lst2[i]\n    # If the first list is longer, append the remaining elements\n    if len(lst1) > len(lst2):\n        result.extend(lst1[len(lst2):])\n    # If the second list is longer, append the remaining elements\n    elif len(lst2) > len(lst1):\n        result.extend(lst2[len(lst1):])\n    return result",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(k)\n        if len(list(g)) > 1:\n            result.extend(list(g)[1:])\n    return result\n",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * math.pi * r * h\n    return s\n",
        "test": "assert lateralsurface_cone(1, 2) == 12.566370614359172, \"Error in lateralsurface_cone(1, 2)\" # radius 1, height 2",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ,.]', ':', text)",
        "test": "assert replace_specialchar(\"This is a test.\") == \"This:is:a:test:\" ",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    n = len(A)\n    left = 0\n    right = n - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 3) == 2  # The first occurrence of 3 is at index 2",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            res += prod\n\n    return res",
        "test": "assert sum_Of_Subarray_Prod([0, 0, 0, 0, 0]) == 0, \"Error in sum_Of_Subarray_Prod([0, 0, 0, 0, 0])\" ",
        "num_ids": 1620,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # First, extract the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    # Toggle all the bits in between the first and last bit\n    middle_bits = n & ~(2**(n.bit_length()-2)-1)\n    # Reassemble the original number with toggled middle bits\n    return (first_bit << (n.bit_length()-1)) | middle_bits | last_bit\n",
        "test": "assert set_middle_bits(0b10000000000000000000000000) == 0b10000000000000000000000000 # Set middle bits of 0b10000000000000000000000000 to itself",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    :param a: sorted list\n    :param x: value to be inserted\n    :return: index of the left insertion point\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 3, 4, 6], 1) == 0, \"Error\"",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('apple') == True",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1.0/((n-1)*n)) + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    i = 1\n    count = 0\n    smallest = 1\n    \n    # Loop until count reaches n\n    while count < n:\n        # Increment i and calculate the i-th triangular number\n        i += 1\n        triangular = i * (i + 1) // 2\n        \n        # Increment count if triangular number has n digits\n        if len(str(triangular)) == n:\n            count += 1\n            \n        # Update smallest triangular number with n digits\n        if len(str(triangular)) == n and triangular < smallest:\n            smallest = triangular\n            \n    # Return index of smallest triangular number with n digits\n    return i - 1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) <= 1\n",
        "test": "assert all_Characters_Same('hello') == False # Testing with a string with different characters",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "Unfortunately, it is not possible to solve this problem without additional information. Tetrahedrons can have different types of faces and different ways to calculate the area. For example, the sum of the areas of the triangular faces or the sum of the areas of the square faces. Therefore, we need to know the type of faces or formula for calculating the area of a tetrahedron to provide a more accurate answer. ",
        "test": "assert area_tetrahedron(6) == math.sqrt(15)/4 * 6 # the area of a regular tetrahedron with edge length of 6",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. \n    '''\n    # convert m to positive\n    m = m % len(list)\n    \n    # reverse the whole list\n    list.reverse()\n    \n    # reverse the first m elements\n    list[:m] = reversed(list[:m])\n    \n    # reverse the remaining elements\n    list[m:] = reversed(list[m:])\n    \n    # return the rotated list\n    return list\n",
        "test": "assert rotate_right([1], 2) == [1]  # rotate 2 items to the right, but only one item in the list",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_none(()) == False",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(10000, 20000) == [10000, 12000, 15000, 18000, 20000] # should return a list of numbers divisible by 1, 2, 3, 4, and 5",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r ** 2 * a / 360\n",
        "test": "assert sector_area(1, 361) == None # check if angle larger than 360 degrees returns None",
        "num_ids": 992,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Initialize the memoization matrix with zeros\n    lcs_memo = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    \n    # Fill the memoization matrix\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs_memo[i][j][k] = lcs_memo[i-1][j-1][k-1] + 1\n                else:\n                    lcs_memo[i][j][k] = max(lcs_memo[i-1][j][k], lcs_memo[i][j-1][k], lcs_memo[i][j][k-1])\n    \n    # Fill the result matrix with zeros\n    lcs_result = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    \n    # Backtrack the memoization matrix to find the longest common subsequence\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs_result[i][j][k] = lcs_result[i-1][j-1][k-1] + 1\n            i -= 1\n            j -= 1\n            k -= 1\n        else:\n            if lcs_memo[i-1][j][k] > lcs_memo[i][j-1][k] and lcs_memo[i-1][j][k] > lcs_memo[i][j][k-1]:\n                i -= 1\n            elif lcs_memo[i][j-1][k] > lcs_memo[i-1][j][k] and lcs_memo[i][j-1][k] > lcs_memo[i][j][k-1]:\n                j -= 1\n            else:\n                k -= 1\n    \n    # Extract the longest common subsequence from the result matrix\n    lcs = []\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        else:\n            if lcs_result[i-1][j][k] > lcs_result[i][j-1][k] and lcs_result[i-1][j][k] > lcs_result[i][j][k-1]:\n                i -= 1\n            elif lcs_result[i][j-1][k] > lcs_result[i-1][j][k] and lcs_result[i][j-1][k] > lcs_result[i][j][k-1]:\n                j -= 1\n            else:\n                k -= 1\n    lcs.reverse()\n    return ''.join(lcs)\n",
        "test": "assert lcs_of_three(\"abc\", \"def\", \"ghi\") == \"\"",
        "num_ids": 3670,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'([A-Z][a-z]+)'\n    words = re.findall(pattern, str1)\n    return ' '.join(words)",
        "test": "assert capital_words_spaces(\"\") == \"\"",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=float)\n",
        "test": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2, 3), (4, 5, 6)], (7, 8, 9)) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the left child of the current node is within the bounds of the array\n    left_child = 2 * i + 1\n    if left_child < len(arr):\n        # Check if the parent node is less than or equal to its left child\n        if arr[i] > arr[left_child]:\n            return False\n    # Check if the right child of the current node is within the bounds of the array\n    right_child = 2 * i + 2\n    if right_child < len(arr):\n        # Check if the parent node is less than or equal to its right child\n        if arr[i] > arr[right_child]:\n            return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n    # Traverse through the array and check if each parent node is less than or equal to its children nodes\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n",
        "test": "assert check_min_heap_helper([3, 2, 1, 4, 5], 2) == True",
        "num_ids": 2024,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) * 2\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    return sorted(test_list)[:K]\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)] # test case 1",
        "num_ids": 1696,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(i)\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) != [1, 3]",
        "num_ids": 1293,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest\n",
        "test": "assert second_smallest([4, 2, 1, 5, 3]) == 2 ",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a([b]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs(['abc', 'xyz', 'hello', 'world']) == 0 ",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for lst in list1:\n        if isinstance(lst, list):\n            tup = tuple(lst)\n            if tup in sublists:\n                sublists[tup] += 1\n            else:\n                sublists[tup] = 1\n    return sublists\n",
        "test": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {(1, 2, 3): 2, (4, 5, 6): 1, (7, 8, 9): 1}",
        "num_ids": 1847,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if float_num.is_integer() and float_num != 0:\n            return False\n        elif float_num.is_integer() and float_num == 0:\n            return False\n        elif float_num > 0 and len(str(float_num).split('.')[1]) > 2:\n            return False\n        elif float_num < 0 and len(str(float_num).split('.')[1]) > 3:\n            return False\n        elif float_num.is_integer():\n            return True\n        else:\n            return True\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal('123.45') == True",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    if len(arr) == 1:\n        return True\n    \n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return False\n    \n    return True\n",
        "test": "assert unique_Element([1]) == True, \"Error in unique_Element with one element list\"",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(2) == False # February has 28 or 29 days",
        "num_ids": 886,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort() # Sort the array in ascending order\n    min_diff = abs(arr[1] - arr[0]) # Initialize the minimum difference with the difference between first two elements\n    \n    # Loop through the array and find the minimum difference between any two elements\n    for i in range(1,n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1, \"Incorrect output\"",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"\") == 0  # should return 0 (number of digits in the empty string)",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def count_polite(i):\n        \"\"\"\n        Count the number of polite numbers up to i.\n        \"\"\"\n        count = 0\n        for j in range(1, i+1):\n            if all(j % k != 0 for k in range(2, int(math.sqrt(j))+1)):\n                count += 1\n        return count\n    \n    polite_count = count_polite(n)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif polite_count == n:\n        return n\n    else:\n        return is_polite(n-1)\n",
        "test": "assert is_polite(1) == 1  # since 1 is a polite number",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i + 1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2",
        "num_ids": 1441,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3,4],[1,2,3]) == [4]",
        "num_ids": 963,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**4\n    return odd_sum",
        "test": "assert odd_num_sum(1) == 1, \"Incorrect result for odd_num_sum(1)\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "test": "assert check_expression('()') == True # Correctly balanced parentheses expression",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def remove_length(test_str, K):\n    # split the string into a list of words\n    words = test_str.split()\n    # create a new list to store the words that have length >= K\n    filtered_words = []\n    # iterate over each word in the list of words\n    for word in words:\n        # check if the length of the word is less than K\n        if len(word) < K:\n            # add the word to the new list\n            filtered_words.append(word)\n    # join the words in the new list with spaces to form a new string\n    result = ' '.join(filtered_words)\n    # return the new string\n    return result\n",
        "test": "assert remove_length(\"The quick brown fox jumps over the lazy dog.\", 3) == \"The quick brown jumps over lazy dog.\"",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    results = []\n    pattern = re.compile(pattern)\n    for match in pattern.finditer(text):\n        results.append((match.group(), match.start()))\n    return results or None\n",
        "test": "assert occurance_substring(\"This is a sample text\", \"sample\") == [('sample', 10)]",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1,2,3,4,5,6]) == False #Example 1",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"python\") == 0",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    # iterate over the list\n    for element in arr:\n        # if the element is not in the dictionary, add it and set the count to 1\n        if element not in count_dict:\n            count_dict[element] = 1\n        # if the element is already in the dictionary, increment its count\n        else:\n            count_dict[element] += 1\n    # initialize the sum to 0\n    sum = 0\n    # iterate over the dictionary and add the count of non-repeated elements to the sum\n    for key in count_dict:\n        if count_dict[key] == 1:\n            sum += key\n    # return the sum of non-repeated elements\n    return sum\n",
        "test": "assert find_sum([1,2,3,4,5]) == 15 ",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]] ",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the count of sublists\n    sublist_count = {}\n\n    # Iterate through the list of lists\n    for sublist in list1:\n        # Convert each sublist to a tuple\n        sublist_tuple = tuple(sublist)\n\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # Increment the count of the tuple by 1\n            sublist_count[sublist_tuple] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            sublist_count[sublist_tuple] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1437,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    n = len(test_list)\n    result = []\n    for i in range(1, n+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                result.append(combo)\n    return result",
        "test": "assert find_combinations([1]) == [], \"Error in find_combinations for [1]\" ",
        "num_ids": 1947,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef count_divisors(n):\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 2 if i*i != n else 1\n    return divisor_count\n",
        "test": "assert count_divisors(1) == 1  # should return 1",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    # initialize sum to 0\n    sum = 0\n    # loop through all possible subarrays\n    for i in range(n):\n        # calculate the length of the current subarray\n        l = i + 1\n        # if the length is odd, add the sum of the subarray to sum\n        if l % 2 != 0:\n            sum += sum_of_subarray(arr, i, l)\n    # return the sum of all odd length subarrays\n    return sum\n\n\ndef sum_of_subarray(arr, start, length):\n    '''\n    Helper function to calculate the sum of a subarray given its starting index and length.\n    '''\n    # calculate the sum of the subarray\n    sum = 0\n    for i in range(start, start + length):\n        sum += arr[i]\n    return sum\n",
        "test": "assert odd_length_sum([1]) == 1, \"Incorrect result\" ",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if delta == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2339,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    count_even = 0\n    count_odd = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            count_even += 1\n            if count_even == 2:\n                break\n        else:\n            odd_product *= num\n            count_odd += 1\n            if count_odd == 2:\n                break\n\n    return even_product * odd_product\n",
        "test": "assert mul_even_odd([0, 1, 2, 3, 4, 5]) == 0  # 2 * 4 = 0, since there are no even and odd numbers in the list",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(map(int, test_str.strip('()').split(', ')))\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) ",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1,3,4,7], 5) == 3  # should return 3, as 5 should be inserted between 4 and 7",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_three(text):\n    # Using regular expressions to match pattern\n    pattern = r\"ab{3}\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_three(\"abbb\") == True # True because it matches \"abbb\"",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n",
        "test": "assert new_tuple([1, 2, 3], \"\") == (1, 2, 3)",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2,4,6,8]) == True",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result += remove_nested(item)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == ()  # test empty tuple",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2],[3,4]]) == 2, \"Incorrect count for [[1,2],[3,4]]\"",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    last_pos = -1\n    \n    for i in range(n):\n        if arr[i] == x:\n            last_pos = i\n    \n    return last_pos\n",
        "test": "assert last([1,2,3,4,5], 6) == -1 ",
        "num_ids": 2191,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"cat\") == False",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({1: 2, 3: 4}) == 6",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n\n    # iterate over range from l to r\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2 != 0:\n            # add the number to the sum\n            sum += i\n\n    # return the sum of all odd numbers\n    return sum\n",
        "test": "assert sum_odd(0) == 0",
        "num_ids": 924,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"The sum of [1, 2, 3, 4, 5] should be 15\"",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:].zfill(32)\n    \n    # Rotate the bits by d bits\n    rotated_str = binary_str[d:] + binary_str[:d]\n    \n    # Convert the rotated binary string back to decimal integer\n    rotated_int = int(rotated_str, 2)\n    \n    return rotated_int\n",
        "test": "assert left_rotate(0, 100) == 0  # Should return 0 ",
        "num_ids": 1571,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)\n",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 2, 3) == 0",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # set the lower and upper bounds\n    low = 0\n    high = n-1\n    \n    # keep searching until low becomes greater than high\n    while low < high:\n        mid = (low + high) // 2\n        \n        # if arr[mid] is greater than arr[high], then the pivot is in the lower half of the array\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        # if arr[mid] is less than arr[high], then the pivot is in the upper half of the array\n        else:\n            high = mid\n    \n    # the index of the pivot point is low\n    pivot = low\n    \n    # calculate the number of rotations required to generate a sorted array\n    rotations = (n - pivot) % n\n    \n    return rotations\n",
        "test": "assert count_rotation([4, 5, 6, 1, 2, 3]) == 3",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    '''\n    Function to check whether the given number is a perfect square or not.\n    '''\n    root = int(n**0.5)\n    if root*root == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_perfect_square(16) == True, \"Test case 1 failed\"",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 3, 4]) == True, \"Test case 1 failed\"",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9] # example 1",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase('') == 0",
        "num_ids": 1014,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([2, 4, 6, 7, 8, 9]) == 7",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((\"a\", \"b\", \"c\"), \"a\") == True, \"Tuple should contain 'a'\"",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # checking if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # iterating over the elements of second tuple\n        for i in range(len(test_tup2)):\n            # checking if the element is smaller than the corresponding element in the first tuple\n            if test_tup2[i] < test_tup1[i]:\n                return True\n        return False\n    else:\n        return False\n",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == False",
        "num_ids": 1133,
        "indeed": true
    }
]