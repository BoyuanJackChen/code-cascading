[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert similar_elements((\"apple\", \"banana\", \"cherry\"), (\"banana\", \"cherry\", \"grape\")) == [\"banana\", \"cherry\"]",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False\n",
        "test": "assert is_not_prime(2) == False ",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 2) == [5, 4]",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 == 1:\n            return False\n        x //= 2\n    return True\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long('The quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert square_nums([1,2,3,4]) == [1, 4, 9, 16]",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        s = str[n-1] + str\n        for i in range(n-1, 0, -1):\n            if s[i] != str[i]:\n                return i+1\n        return 0",
        "test": "assert find_Rotations(\"a\") == 0",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        # find first occurrence of the character\n        first_occurrence = s.find(ch)\n        # find last occurrence of the character\n        last_occurrence = s.rfind(ch)\n        # create a substring of the original string without the first and last occurrence of the character\n        new_string = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n        # return the new string\n        return new_string\n    else:\n        # if the character is not present in the string, return the original string\n        return s\n",
        "test": "assert remove_Occ(\"hello\", \"o\") == \"hell\" ",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    if n == 0:\n        return []\n    if n == 1:\n        return [M[0]]\n    if n == 2:\n        if sum(M[0]) < sum(M[1]):\n            return [M[1], M[0]]\n        else:\n            return [M[0], M[1]]\n    \n    mid = n // 2\n    left_matrix = sort_matrix(M[:mid])\n    right_matrix = sort_matrix(M[mid:])\n    \n    i = j = 0\n    result = []\n    while i < len(left_matrix) and j < len(right_matrix):\n        if sum(left_matrix[i]) < sum(right_matrix[j]):\n            result.append(left_matrix[i])\n            i += 1\n        else:\n            result.append(right_matrix[j])\n            j += 1\n            \n    result += left_matrix[i:]\n    result += right_matrix[j:]\n    \n    return result\n",
        "test": "assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [5, 6], [3, 4]] ",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    return 0.5 * l * b * h\n",
        "test": "assert find_Volume(2,4,5) == 20, \"Incorrect Volume\"",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\"), \"should return True\"",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "test": "assert square_perimeter(5) == 20 # the perimeter of a square with side length 5 is 20",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string):\n    # Create a list of size 256 initialized with 0\n    char_list = [0] * NO_OF_CHARS\n\n    # Iterate over the string and increment the count of each character in the list\n    for char in string:\n        char_list[ord(char)] += 1\n\n    # Create an empty string to store the result\n    result = ''\n\n    # Iterate over the string again and append each character to the result if its count is greater than 0 in the list\n    for char in string:\n        if char_list[ord(char)] > 0:\n            result += char\n            char_list[ord(char)] -= 1\n\n    return result\n",
        "test": "assert str_to_list(\"python\") == [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]  # test 2",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False, \"Error in test_duplicate with non-duplicate input\"",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    sum = 0\n    for i in range(n):\n        digit = int(x % 10)\n        x = x // 10\n        sum += digit ** n\n    return sum == x",
        "test": "assert is_woodall(1234567) == False, \"Error: 1234567 is a woodall number\"",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and then reverse it\n    reverse_str = str(num)[::-1]\n    \n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse_str)\n    \n    # Check if num is one less than twice the reverse\n    if num == reverse_num * 2 - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # First, we need to find all possible permutations of the given digits\n    permutations = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                permutations.append(int(str(arr[i]) + str(arr[j]) + str(arr[k])))\n    \n    # Next, we need to sort the permutations in descending order and find the largest one\n    permutations.sort(reverse=True)\n    max_num = permutations[0]\n    \n    return max_num\n",
        "test": "assert find_Max_Num([9,9,9]) == 999  # check if it can handle a list of 3 identical digits",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(-5, 3) == True",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 1\n        i += 2\n    return i\n",
        "test": "assert is_octagonal(1) == True #first octagonal number is 1",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            count[sum(int(d) for d in s[i:j+1])] += 1\n    return sum(count[i] * (count[i] - 1) // 2 for i in range(1, n+1))",
        "test": "assert count_Substrings(\"12345\") == 2, \"Function should return 2 for input '12345'\"",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([5, 3, 1, 7, 9]) == 8 # example tuple list",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(90, \"Maths\"), (80, \"Science\"), (70, \"English\")]) == [(\"Maths\", 90), (\"Science\", 80), (\"English\", 70)] ",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n",
        "test": "assert recursive_list_sum([]) == 0  # empty list returns 0",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1,2,3,4,5]) == 5",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    \n    # Initialize a list to store the Bell numbers\n    bell_numbers = [1]\n    \n    # Calculate the Bell numbers using the recursive formula\n    for i in range(1, n + 1):\n        bell_numbers.append(bell_numbers[-1] * (n - i + 1) // i)\n        \n    # Calculate the number of ways to partition the set of Bell numbers\n    ways = bell_numbers[-1]\n    for i in range(n - 1, 0, -1):\n        ways = bell_numbers[i] + (ways * (n - i)) // i\n    \n    return ways\n",
        "test": "assert bell_number(0) == 1 # Test case for n = 0",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            increasing = False\n        elif A[i] < A[i - 1]:\n            decreasing = False\n\n        if not increasing and not decreasing:\n            return False\n\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5, 4]) == False",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Convert the sublist to a set for faster lookup\n    s_set = set(s)\n    \n    # Iterate over the list and check if the current sublist matches the given sublist\n    for i in range(len(l)):\n        sublist = l[i:i+len(s)]\n        if set(sublist) == s_set:\n            return True\n    \n    # If we reach here, the sublist was not found\n    return False\n",
        "test": "assert is_sublist([1,2,3,4,5], [1,2,3]) == True",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i]) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple(()) == True # empty tuple",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        swaps = 0\n        sorted = True\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                sorted = False\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swaps += 1\n        n = int(n/shrink)\n        if n > 1 and swaps == 0:\n            n = int(n/shrink)\n    return nums\n",
        "test": "assert comb_sort([3, 2, 1]) == [1, 2, 3]  # test for a list of numbers in ascending order",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(int(n**0.5)+1):\n        j = n - i**2\n        if j >= 0 and int(j**0.5)**2 == j:\n            return True\n    return False\n",
        "test": "assert dif_Square(2) == True",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\"], [\"a\", \"b\", \"c\"]) == True # example 1",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 3) == []",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(44) == True, \"Error: is_Diff(44) should return True\"",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"world\") == True  # Test case for even length of word",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    V = (4/3) * math.pi * r**3\n    return V",
        "test": "assert volume_sphere(2) == 33.510321638291123 or volume_sphere(2) == 33.510321638291125 or volume_sphere(2) == 33.510321638291126 or volume_sphere(2) == 33.510321638291127 or volume_sphere(2) == 33.510321638291128 # check if the function returns a correct value for radius 2 ",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    # initialize the result character as 'A'\n    result = 'A'\n    \n    # initialize the sum of ASCII values of characters as 0\n    sum_ascii = 0\n    \n    # iterate through each character of the string\n    for char in strr:\n        # add the ASCII value of the current character to the sum_ascii variable\n        sum_ascii += ord(char)\n        \n    # get the modulo of sum_ascii by 26 and subtract it from 26 to get the result\n    result = chr((26 - (sum_ascii % 26)) % 26 + ord('A'))\n    \n    return result\n",
        "test": "assert get_Char(\"PQRSTUVWXYZ\") == \"B\", \"Incorrect output for 'PQRSTUVWXYZ'.\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = [0, 1]\n        for i in range(2, n+1):\n            prev.append(prev[prev[i-1]]+prev[i-prev[i-1]])\n        return prev[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    \n    # Return the surface area\n    return surface_area\n",
        "test": "assert surfacearea_sphere(1) == 4*math.pi ",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2*n - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"First centered hexagonal number is 1\"",
        "num_ids": 316,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.Counter(dict1) + ct.Counter(dict2) + ct.Counter(dict3)\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a':1}, {'b':2}, {'c':3}) == {'a':1, 'b':2, 'c':3}",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1} ",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_num(N):\n    closest = None\n    for num in range(1, N):\n        if closest is None or abs(N - num) < abs(N - closest):\n            closest = num\n    return closest\n",
        "test": "assert closest_num(15) == 14",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"world\", \"hi\") == False # substring \"hi\" is not present in \"world\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 1:\n        return True\n    \n    num = abs(n)\n    while num > 1:\n        num = num // 10\n        \n        if num % 2 == 0:\n            return False\n        \n    return True\n",
        "test": "assert is_undulating(4) == False  # Examples of inputs and expected outputs for testing purposes.",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(5, 3), (3, 1), (8, 2), (1, 6), (6, 4)]) == 3  # expected output: 1 ",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize minimum length to positive infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2],[3,4,5],[6,7]]) == 2 ",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1 # Test Case 1: n=1, divisor(1) = 1",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for elem in flatten(list1):\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n\n\ndef flatten(lst):\n    flat_lst = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat_lst.extend(flatten(elem))\n        else:\n            flat_lst.append(elem)\n    return flat_lst",
        "test": "assert frequency_lists([1,2,2,3,4,5,5,6,7,7,7]) == {1: 1, 2: 2, 3: 1, 4: 1, 5: 2, 6: 1, 7: 3}  # test case 1 ",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)",
        "test": "assert multiply_num([1, 2, 3]) == 6.0 ",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(0) == \"0\"",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 10 == 0:\n        return num + 1\n    else:\n        num += 1\n        while str(num) != str(num)[::-1]:\n            num += 1\n        return num\n\nif __name__ == '__main__':\n    try:\n        num = int(input(\"Enter a number: \"))\n        result = next_smallest_palindrome(num)\n        print(f\"The next smallest palindrome of {num} is {result}.\")\n    except ValueError:\n        print(\"Invalid input. Please enter a valid integer.\")\n",
        "test": "assert next_smallest_palindrome(123) == 123, \"Function returned incorrect value for input 123\"",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr) + 1:\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = word[0].lower() + word.title().replace(\"_\", \"\")[1:]\n    return camel\n",
        "test": "assert snake_to_camel('snake_case') == 'snakeCase' ",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    if n < m:\n        return 0\n    elif m == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "test": "assert eulerian_num(1, 1) == 1  # test for a(1, 1)",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert sort_sublists([['cat', 'dog', 'fish'], ['apple', 'banana', 'cherry'], ['hello', 'world', 'python']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish'], ['hello', 'python', 'world']]",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5)) == ([1, 2, 3, 4, 5],)",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    for num in num1:\n        heapq.heappush(heap, num)\n    \n    for num in num2:\n        heapq.heappush(heap, num)\n    \n    for num in num3:\n        heapq.heappush(heap, num)\n    \n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9] # merge two sorted lists of length 3",
        "num_ids": 826,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to list of integers\n    s_list = [int(x) for x in s]\n    \n    # Calculate the number of integers with an odd value\n    odd_count = 0\n    for i in range(len(s_list)):\n        # Rotate the list by one position\n        s_list = s_list[-1:] + s_list[:-1]\n        \n        # Check if the first element of the list is odd\n        if s_list[0] % 2 != 0:\n            odd_count += 1\n            \n        # If we've already rotated the list `n` times, break out of the loop\n        if i == n - 1:\n            break\n            \n    return odd_count\n",
        "test": "assert odd_Equivalent(\"10101\", 1) == 1  # Example 1",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Iterate through the first list in the nested list\n    for item in nestedlist[0]:\n        # Check if the item is present in all the other lists\n        if all(item in sublist for sublist in nestedlist):\n            # Add the common item to the common list\n            common.append(item)\n    \n    # Return the common list\n    return common\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 227,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict != {}:\n            return False\n    return True\n",
        "test": "assert empty_dit([{\"key\": \"value\"}, {}, {}]) == False",
        "num_ids": 268,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,2,3,4)) == 1234",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                pass\n            elif isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n            else:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1,2,3],[4.5,6,7],[8,9,10]]) == [[1.0, 2.0, 3.0], [4.5, 6.0, 7.0], [8.0, 9.0, 10.0]] ",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == ['hello', 'world'] # pass",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(arr):\n    # assuming array is sorted\n    n = len(arr)\n    for i in range(0, n-1, 2):\n        # if adjacent elements are same, then the element that appears only once\n        # will be on odd index\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    # if the array has only one element or all elements are the same,\n    # then the function will return the last element\n    return arr[n-1]\n",
        "test": "assert search([1, 2, 3, 4, 5, 6]) == 6",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for tup in list1:\n        product = abs(tup[0]) * abs(tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1, 2), (-3, 4), (0, 5)]) == 20  # expected output 20 ",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisors_sum(n):\n    \"\"\"\n    Returns the sum of all divisors of a given number n.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if divisors_sum(i) == divisors_sum(divisors_sum(i)) and divisors_sum(i) != i:\n            amicable_sum += i\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(100) == 504",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle\n",
        "test": "assert angle_complex(3, 4) == 0.9272952180016122 ",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_length(string):\n    # Initialize variables for counting 0s and 1s\n    count_0 = 0\n    count_1 = 0\n    # Initialize variable for maximum difference\n    max_diff = 0\n    # Iterate through each character in the string\n    for char in string:\n        # If character is 0, increment count_0\n        if char == '0':\n            count_0 += 1\n        # If character is 1, increment count_1\n        elif char == '1':\n            count_1 += 1\n        # If difference between count_0 and count_1 is greater than max_diff, update max_diff\n        if abs(count_0 - count_1) > max_diff:\n            max_diff = abs(count_0 - count_1)\n    # Return max_diff\n    return max_diff\n",
        "test": "assert find_length(\"101010\") == 1  # test case 2",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n",
        "test": "assert sum(4, 6) == 10 # (4 and 6 have 2 as their common divisor) ",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "test": "assert multiply_int(2, 3) == 6 # test if 2 * 3 = 6",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def long_words(n, str_list):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str_list:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(4, \"the quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'jumps', 'over', 'lazy'] ",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix has a magic sum\n    magic_sum = sum(my_matrix[0])\n    if magic_sum != sum(my_matrix[1]) or magic_sum != sum(my_matrix[2]):\n        return False\n\n    # Check if the matrix is a magic square\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum or len(set(row)) != len(row):\n            return False\n\n    # Check if the matrix is a magic square in transposed form\n    magic_sum = sum([my_matrix[i][i] for i in range(3)])\n    for i in range(3):\n        if sum([my_matrix[j][i] for j in range(3)]) != magic_sum:\n            return False\n\n    return True\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    for num in freq_dict:\n        if freq_dict[num] == max_freq:\n            return num\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 7, 8, 9]) == 5 ",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_str = \"\"\n    non_vowel_str = \"\"\n    \n    # separate the vowels and non-vowels\n    for char in str1:\n        if char in vowels:\n            vowel_str += char\n        else:\n            non_vowel_str += char\n    \n    # reverse the vowels\n    vowel_str = vowel_str[::-1]\n    \n    # combine the reversed vowels and non-vowels\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result += vowel_str[0]\n            vowel_str = vowel_str[1:]\n        else:\n            result += non_vowel_str[0]\n            non_vowel_str = non_vowel_str[1:]\n    \n    return result\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string\n    string = str(tup1)\n    # Remove the brackets and quotes\n    string = string[1:-1]\n    # Return the string\n    return string\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    \n    # iterate through the list\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add the number to the sum\n            sum += num\n    \n    # return the sum of negative numbers\n    return sum",
        "test": "assert sum_negativenum([1, 2, -3, -4, 5]) == -7",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "test": "assert hexagonal_num(1) == 1, \"hexagonal_num(1) should be 1\"",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return float('inf')\n    \n    return zero_count / non_zero_count\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as sum of non-zero powers of 2, else False.\n    \"\"\"\n    # Check if n is negative or zero, as negative numbers and zero cannot be represented as sum of non-zero powers of 2.\n    if n <= 0:\n        return False\n    \n    # Initialize the sum of powers of 2 as zero\n    sum_powers_of_two = 0\n    \n    # Initialize the power of 2 as 1\n    power_of_two = 1\n    \n    # Loop until the sum of powers of 2 becomes greater than n\n    while sum_powers_of_two <= n:\n        # Add the current power of 2 to the sum of powers of 2\n        sum_powers_of_two += power_of_two\n        \n        # If the sum of powers of 2 becomes greater than n, then return True as n can be represented as sum of non-zero powers of 2.\n        if sum_powers_of_two > n:\n            return True\n        \n        # Increment the power of 2 by 1\n        power_of_two += 1\n        \n    # If the sum of powers of 2 is less than n, then return False as n cannot be represented as sum of non-zero powers of 2.\n    return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(2) == 12.566370614359172, \"Error in circle_circumference function for radius 2\" ",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = set()\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.add(num)\n    return flat_list\n",
        "test": "assert extract_singly([[1,2,3],[4,5],[6,7,8]]) == {1,2,3,4,5,6,7,8}",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sorting algorithm.\n    '''\n\n    # Convert the list to a list of tuples with (index, value)\n    nums_tuples = list(enumerate(nums))\n\n    # Loop through the list and sort it using pancake sorting algorithm\n    for i in range(len(nums_tuples) - 1, 0, -1):\n        # Find the maximum element in the unsorted portion of the list\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums_tuples[j][1] > nums_tuples[max_index][1]:\n                max_index = j\n\n        # If the maximum element is not in its correct position, flip it to the correct position\n        if max_index != i:\n            # Flip the maximum element to the beginning of the list\n            nums_tuples[max_index], nums_tuples[0] = nums_tuples[0], nums_tuples[max_index]\n            # Flip the maximum element to its correct position in the unsorted portion of the list\n            nums_tuples[i], nums_tuples[max_index] = nums_tuples[max_index], nums_tuples[i]\n\n        # Convert the list of tuples back to a list of values\n    sorted_nums = [num for i, num in nums_tuples]\n\n    return sorted_nums\n",
        "test": "assert pancake_sort([1,2,3,4,5]) == [1,2,3,4,5] # already sorted list",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]) == 5",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(([1,2,3], [4,5,6], [7,8,9])) == 3 ",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n//b)\n    elif b == 0:\n        return (n//a, 0)\n    else:\n        y = n//a\n        x = n - y*a\n        if x % b == 0:\n            return (x//b, y)\n        else:\n            return None\n",
        "test": "assert find_solution(1, 1, 2) == (0, 2)",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    if n % 2 == 0:\n        start = n // 2\n        end = n // 2\n    else:\n        start = n // 2\n        end = n // 2 + 1\n    \n    result = 0\n    for i in range(start, end, -1):\n        result += n - 2 * i\n    \n    return result\n",
        "test": "assert sum_series(0) == 0  # sum should be 0",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * s * l ** 2) / tan(pi / s)\n",
        "test": "assert area_polygon(2, 4) == 2, \"The area of a square with side length 2 is 2\"",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 164,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    def sum_divisors(num):\n        \"\"\"Helper function to sum the divisors of a number.\"\"\"\n        divisor_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisor_sum += i\n        return divisor_sum\n\n    for i in range(1, n+1):\n        if sum_divisors(i) == n and sum_divisors(n) == i:\n            return True\n    return False\n",
        "test": "assert div_sum(2) == False # since 2 has only two divisors, 1 and 2.",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert both the input string and the alphabet to lowercase to make them case-insensitive\n    str1 = str1.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    # Initialize an empty dictionary to store the counts for each character at each position\n    char_counts = {i: 0 for i in range(len(str1))}\n    \n    # Iterate over each character in the input string and count its occurrences at each position\n    for i in range(len(str1)):\n        char = str1[i]\n        if char in alphabet:\n            char_counts[i] += 1\n    \n    # Return the counts as a dictionary\n    return char_counts\n",
        "test": "assert count_char_position(\"world\") == 2",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([]) == 0",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(10) == 16",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1, \"Incorrect frequency count\"",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 2) == 6",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert perimeter_pentagon(3) == 15.0  # Example test case 1",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n",
        "test": "assert count_occurance(\"std\") == 1",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # Extracting the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # Checking the data type of first element\n    first_element_type = type(first_element)\n    \n    # Checking the data type of all elements in the tuple\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i]) != first_element_type:\n            return False\n    \n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 5, 6, 7, 7], 9, 1) == False ",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0b000000) == 0",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(string):\n    result = ''\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\" ",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Using the built-in function bin() to convert decimal to binary form.\n    binary = bin(n)[2:]\n    # Finding the length of the binary string.\n    binary_length = len(binary)\n    # Checking if the range is valid or not.\n    if l < 1 or r > binary_length:\n        return False\n    # Traversing the binary string to check if all the bits are set or not.\n    for i in range(l-1, r):\n        if binary[i] == '0':\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(15, 5, 15) == False  # 0b11110",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n    for num in arr[:n]:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    return neg + pos + arr[n:]\n",
        "test": "assert re_arrange_array([1, 2, -3, 4, 5, -6], 3) == [-3, 1, 2, 4, 5, -6]",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"hello world\",\"*\") == \"hello*world\"",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([5, 4, 3, 2, 1], 2) == [5, 4] ",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)\n",
        "test": "assert lateralsuface_cylinder(2, 4) == 113.09733552923297, \"Error in calculating lateral surface area of a cylinder.\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(2) == 8  # Test with a side length of 2",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    mask = 1\n    result = 0\n    for i in range(32):\n        if (n & mask) != 0:\n            result |= mask\n        if i % 2 == 1:\n            mask <<= 1\n    return result",
        "test": "assert even_bit_set_number(1) == 1, \"Error: even_bit_set_number(1) should return 1\"",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6)]) == {(1, 2): 2, (3, 4): 1, (5, 6): 1}",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str):\n    # Initialize a counter variable\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible substring starting at the current character\n        for j in range(i+1, len(str)+1):\n            # Increment the counter for each valid substring\n            count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif m <= 2:\n        return 0\n    else:\n        total = 0\n        for i in range(2, m+1):\n            total += get_total_number_of_sequences(m, n-1)\n        return total\n",
        "test": "assert get_total_number_of_sequences(4, 2) == 3, \"The number of sequences should be 3 for m=4 and n=2\"",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def replace_list(list1, list2):\n    list1[-1] = list2[0]\n    for i in range(1, len(list2)):\n        list1.append(list2[i])\n    return list1\n",
        "test": "assert replace_list([1,2,3,4], [5,6]) == [1,2,3,5,6]",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('hello world') == 11 ",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # convert N to float to avoid integer division\n    N = float(N)\n    # calculate square root of N\n    sqrt_N = math.sqrt(N)\n    # calculate next perfect square greater than sqrt_N^2\n    next_perfect_square = (sqrt_N + 1) ** 2\n    return int(next_perfect_square)\n",
        "test": "assert next_Perfect_Square(2) == 5 ",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # create a list to store the maximum sum for each element of the array\n    max_sum_list = [0] * n\n    # create a list to store the maximum sum for each decreasing subsequence\n    dp = [0] * n\n    # initialize the maximum sum for the first element to be the element itself\n    max_sum_list[0] = arr[0]\n    # initialize the maximum sum for the first decreasing subsequence to be 0\n    dp[0] = 0\n    # iterate through the array\n    for i in range(1, n):\n        # if the current element is greater than the previous one, the maximum sum for the current element is either the maximum sum for the previous element or the maximum sum for the current element plus the difference between the previous element and the current element\n        if arr[i] > arr[i-1]:\n            max_sum_list[i] = max(max_sum_list[i-1], dp[i-1] + arr[i] - arr[i-1])\n            dp[i] = max_sum_list[i] - arr[i]\n        # if the current element is not greater than the previous one, the maximum sum for the current element is either the maximum sum for the previous decreasing subsequence or the maximum sum for the current element minus the difference between the current element and the previous element\n        else:\n            max_sum_list[i] = max(max_sum_list[i-1], dp[i-1] + arr[i] - arr[i-1])\n            dp[i] = dp[i-1]\n    # return the maximum sum for the last element of the array\n    return max_sum_list[-1]\n",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 5",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the Babylonian method.\n    '''\n    guess = number / 2 # initial guess\n    while True:\n        new_guess = (guess + number/guess) / 2 # new guess\n        if abs(new_guess - guess) < 0.0001: # stopping condition\n            break\n        guess = new_guess # update guess\n    return new_guess # return final guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return n\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"BBABCBCAB\") == 7",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1.0, \"Error: Incorrect value for n=1\"",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3,4,5], [4,5,6]) == [4,5]  # intersection of [1,2,3,4,5] and [4,5,6] is [4,5]",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((), 1) == 0 # test empty tuple",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Returns a new list with elem inserted before each element in lst.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst\n",
        "test": "assert insert_element([1,2,3,4,5], 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5] ",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        complex_num = complex(num)\n        complex_numbers.append(complex_num)\n    \n    polar_coordinates = []\n    for num in complex_numbers:\n        radius = abs(num)\n        angle = cmath.phase(num)\n        polar_coordinates.append((radius, angle))\n    \n    return polar_coordinates\n",
        "test": "assert convert([1+2j]) == (3.605551275463989, 0.9602898564975369) ",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5  # Check for a list with all integer elements",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['R', 'G', 'B'], 2) == [('R', 'R'), ('R', 'G'), ('R', 'B'), ('G', 'G'), ('G', 'B'), ('B', 'B')]",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    # Define a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p * p <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p] == True:\n            # Update all multiples of p\n            for i in range(p * 2, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # Return the count of primes in the given range\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 231,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    \n    # Create a list to store the maximum values of each tuple\n    max_values = []\n    \n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        \n        # Find the maximum value in the tuples and add it to the max_values list\n        max_values.append(max(test_tup1[i], test_tup2[i]))\n    \n    # Convert the max_values list to a tuple and return it\n    return tuple(max_values)\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from sympy import is_prime, binary\n\ndef newman_prime(n):\n    # initialize variables\n    count = 1\n    num = 1\n    \n    # helper function to check if a number is a Newman\u2013Shanks\u2013Williams prime\n    def is_newman_prime(num):\n        # convert number to binary and count the number of 1s\n        binary_num = binary(num)\n        ones_count = binary_num.count('1')\n        \n        # check if the binary representation has a period of at least 2\n        if ones_count >= 2:\n            # check if the number has no prime divisors of the form 4k+3\n            if all(not (num % (4*k+3) == 0) for k in range(ones_count)):\n                return True\n        \n        return False\n    \n    # find the nth Newman\u2013Shanks\u2013Williams prime number\n    while count != n:\n        # check if the current number is a Newman\u2013Shanks\u2013Williams prime\n        if is_newman_prime(num):\n            count += 1\n        \n        # increment the number and reset the count\n        num += 1\n        count = 1\n    \n    return num - 1\n",
        "test": "assert newman_prime(2) == 3 # 3 is the second newman\u2013shanks\u2013williams prime number",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result += (test_tup1[i] / test_tup2[i],)\n        else:\n            result += (float('inf'),)\n    return result\n",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5)",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5]) # correct case",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert dog_age(2) == 28, \"Wrong age for 2 human years\" ",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    '''\n    result = []\n    current_list = []\n    for i in range(len(S)):\n        current_list.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(current_list)\n            current_list = []\n    if len(current_list) > 0:\n        result.append(current_list)\n    return result\n",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 2) == [[1,2],[3,4],[5,6],[7,8],[9]] ",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(2) == 24 ",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(1) == 1, \"Error with square_Sum(1)\"",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        count = 1\n        for i in range(2, n+1):\n            count *= 2\n        return count\n",
        "test": "assert find_star_num(1) == 1, \"The first star number should be 1\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0, \"Test case 2 failed\"",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    num = 2\n    \n    while count < n:\n        sum += num ** 5\n        count += 1\n        num += 2\n        \n    return sum\n",
        "test": "assert even_Power_Sum(3) == 125, \"Error: even_Power_Sum(3) should be 125\"",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6] # test case 1",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1, 2, 3, 4, 5), (3, 1, 1, 3, 2)) == (-2, 1, 2, 1, 3)",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    total_sum = 0\n    for i in range(0, n+1, 2):\n        total_sum += math.comb(n, i)\n    return total_sum",
        "test": "assert even_binomial_Coeff_Sum(3) == 4, \"Error in even_binomial_Coeff_Sum(3)\"",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(10, 20) == 1256.637061435918 # radius = 10, height = 20",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dictionary, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 10, \"b\": 5, \"c\": 7}, 6) == {\"a\": 10, \"c\": 7}",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4)) == 0",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = (n * (2 * n - 1)) // 2\n    return decagonal_num\n",
        "test": "assert is_num_decagonal(2) == 4, \"2nd decagonal number is 4\"",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) != len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3, -3, -3]",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Create a dictionary to keep track of the frequency of each digit\n    digit_freq = {}\n    \n    # Iterate through each digit in the string\n    for digit in num_str:\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        if digit not in digit_freq:\n            digit_freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency by 1\n        else:\n            digit_freq[digit] += 1\n    \n    # Iterate through each digit in the dictionary and check if its frequency is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True\n",
        "test": "assert validate(1111111111) == False # Test case 2",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item != elem:\n            return False\n    return True\n",
        "test": "assert check_element([1,1,1,1],1) == True # testing with a list of all 1s and checking if it returns True",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?:b{2}|b{3})')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abbab\") == True",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the modified array by repeating the original array k times\n    modified_array = [a[i % n] for i in range(n * k)]\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the modified array and update the current sum\n    for i in range(n * k):\n        current_sum += modified_array[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 2, 2) == 7",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    \n    # Return the sum of squares\n    return sum ",
        "test": "assert square_Sum(1) == 1, \"square_Sum(1) should return 1\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length(list1):\n    max_len = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            result = [lst]\n        elif len(lst) == max_len:\n            result.append(lst)\n    return result\n",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [4, 5, 6]",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n+1)\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n+1):\n        dp[i] = (k - 1) * (dp[i-1] + dp[i-2])\n\n    return dp[n]",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(2,4) == 0 # Test case 1",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # finding the third side of the right angled triangle using the Pythagorean theorem\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side",
        "test": "assert otherside_rightangle(3,4) == 5  # assert that the third side of a right angled triangle with sides 3 and 4 is 5 ",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # assume first value is the maximum\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n",
        "test": "assert sum_div(1) == 1, \"sum_div(1) should be 1\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n",
        "test": "assert flatten_list([1, [2, [3], 4], 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregates = defaultdict(int)\n    max_aggregate = 0\n\n    for state, transactions in stdata:\n        aggregate = sum(transactions)\n        aggregates[state] += aggregate\n\n        if aggregate > max_aggregate:\n            max_aggregate = aggregate\n\n    return max_aggregate",
        "test": "assert max_aggregate([(1, 2), (2, 3), (3, 4), (4, 5)]) == 14, \"Incorrect result\"",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):  # Iterate through all possible combinations of n bits\n        binary = bin(i)[2:].zfill(n)  # Convert decimal to binary and pad with leading zeros\n        if sum(int(bit) for bit in binary[:n]) == sum(int(bit) for bit in binary[-n:]):\n            count += 1  # Increment count if sums are equal\n    return count\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d, depth=1):\n    \"\"\"\n    This function takes a dictionary as input and returns its depth (number of nested levels).\n    \"\"\"\n    if type(d) != dict:\n        return depth\n    else:\n        max_depth = depth\n        for value in d.values():\n            if type(value) == dict:\n                max_depth = max(max_depth, dict_depth(value, depth + 1))\n        return max_depth",
        "test": "assert dict_depth({}) == 1 # Test empty dictionary",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    n = len(arr)\n    i = index\n    for j in range(rotations):\n        i = (i - ranges[j]) % n\n    return arr[i]\n",
        "test": "assert find_Element([1,2,3,4,5], [0,1,2,3,4], 3, 4) == 2 # Test case 2",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match(r'^p\\w+', word)]\n    return p_words[:2]\n\nwords = ['python', 'programming', 'pandas', 'pizza', 'programming', 'python']\nprint(start_withp(words)) # Output: ['pizza', 'programming']\n",
        "test": "assert start_withp(['python', 'java', 'javascript', 'perl', 'php', 'pascal', 'python'])[0] == 'python'",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n\n    # Initialize variables\n    max_sum = a[index]\n    temp_sum = a[index]\n\n    # Traverse the array from index+1 to k-1\n    for i in range(index+1, k-1):\n        temp_sum = max(temp_sum + a[i], a[i])\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 3) == 9 ",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a new list to store the colons\n    colons = []\n\n    # Create a deep copy of the given tuple to avoid changing the original tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Iterate over the elements of the tuple and add them to the colons list until m elements have been added\n    for i in range(m):\n        colons.append(new_tuplex[0])\n        new_tuplex = new_tuplex[1:]\n\n    # Add the last n-m elements to the colons list\n    colons.extend(new_tuplex[:n-m])\n\n    # Return the colons list as a tuple\n    return tuple(colons)\n",
        "test": "assert colon_tuplex((),0,0) == ()",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n\n    # create a list to store the products\n    products = []\n\n    # iterate over the first list and multiply each element with the corresponding element in the second list\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n\n    # sort the list in descending order and return the N largest products\n    return sorted(products, reverse=True)[:N]\n",
        "test": "assert large_product([-1,-2,-3], [4,5,6], 1) == [-6] ",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10, 20) == 20, \"Maximum function is not correct\"",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"Hello, World!\") == ('H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!')",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the leftmost 0 bit\n    i = 0\n    while (n & (1 << i)) != 0:\n        i += 1\n    \n    # Set the leftmost 0 bit to 1\n    n |= (1 << i)\n    \n    return n\n",
        "test": "assert set_left_most_unset_bit(5) == 4",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1, 2) == 4.1887902047863905 ",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n",
        "test": "assert highest_Power_of_2(16) == 16  # returns 16 ",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def add_string(lst, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_lst = []\n    for item in lst:\n        new_lst.append(string.format(item))\n    return new_lst",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"Hello {}!\") == [\"Hello apple!\", \"Hello banana!\", \"Hello cherry!\"] ",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, j, k in zip(l1, l2, l3):\n        result.setdefault(i, {})[j] = k\n    return result\n",
        "test": "assert convert_list_dictionary([1,2,3],[4,5,6],[7,8,9]) == {'a': {'b': {'c': 7, 'd': 8, 'e': 9}}, 'f': {'g': {'h': 4, 'i': 5, 'j': 6}}}",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_max_sum(n):\n    memo = {}\n\n    def f(x):\n        if x in memo:\n            return memo[x]\n        if x == 1:\n            return 1\n        if x == 2:\n            return 2\n        if x % 2 == 0:\n            return f(x // 2) + f(x // 3) + f(x // 4) + f(x // 5)\n        else:\n            return f(x - 1) + f(x // 3) + f(x // 4) + f(x // 5)\n\n    return f(n)\n",
        "test": "assert get_max_sum(11) == 50 # (11)",
        "num_ids": 571,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3],[4,5],[6,7,8,9]]) == [6,7,8,9] # input_list has 4 elements, but the list with maximum length has 4 elements",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct(()) == True",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None  # if no non-repeating character is found\n",
        "test": "assert first_non_repeating_character('aabbcd') == 'e'",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"hello\") == False ",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]",
        "test": "assert median_numbers(3, 5, 1) == 3  # correct median is 3",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result",
        "test": "assert sum_of_digits([100, 200, 300]) == [1, 2, 3]",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] ^ test_tup2[i],)\n    return result_tuple\n",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 0)) == (1, 1, 1) ",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1,2), (2,3), (3,4), (1,2), (2,3)]) == 3",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result_tuple = ()\n        for j in range(len(test_tup1[i])):\n            result_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (result_tuple,)\n    return result\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12)) ",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 7) == 5, \"Incorrect output for minimum(5,7)\"",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1, 2, 3), (4, 5, 6)) == False  # Tuple (2, 3) does not exist in the given tuples",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(3) == True ",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Concatenate the digits into a string\n    digits_str = ''.join(str(d) for d in digits)\n    # Convert the string to an integer\n    result = int(digits_str)\n    # If the result is greater than the original number, return it\n    # Otherwise, there is no bigger number that can be formed\n    if result > n:\n        return result\n    else:\n        return None\n",
        "test": "assert rearrange_bigger(123) == 321, \"Incorrect result\"",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    \n    # create a list of pairs (distance, index1, index2) where distance is the distance between the two elements\n    pairs = [(nums1[i] + nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n    \n    # use a min heap to keep track of the k smallest distances\n    heap = []\n    heapq.heapify(heap)\n    \n    # add the first k pairs to the heap\n    for i in range(k):\n        heapq.heappush(heap, pairs[i])\n    \n    # iterate through the rest of the pairs\n    for i in range(k, len(pairs)):\n        # if the current pair has a smaller distance than the smallest element in the heap\n        if pairs[i][0] < heap[0][0]:\n            # remove the smallest element from the heap\n            heapq.heappop(heap)\n            # add the current pair to the heap\n            heapq.heappush(heap, pairs[i])\n    \n    # return the k smallest pairs\n    return [(nums1[heap[i][1]], nums2[heap[i][2]]) for i in range(k)]\n",
        "test": "assert k_smallest_pairs([1, 2], [3], 1) == [(1,3)]",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 135 ",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for item in listval:\n        if type(item) == int:\n            if item < min_val:\n                min_val = item\n        elif type(item) == float:\n            if item < min_val:\n                min_val = item\n    return min_val\n",
        "test": "assert min_val([1, \"two\", 3.0]) == 1",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case string to camel case string\n    word = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n    # remove first letter of the camel case string\n    word = word[0].lower() + word[1:]\n    return word\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Initialize an empty list to store even numbers\n    even_list = []\n    \n    # Loop through the list\n    for num in l:\n        # If the number is even, append it to the even_list\n        if num % 2 == 0:\n            even_list.append(num)\n    \n    # Return the even_list containing no odd numbers\n    return even_list\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4]",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result\n",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == 3 # extracts the third element, which is 3 ",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1, 2, 3, 4], [5, 6, 7, 8]) == False ",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n\n    return max_product\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_list = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_list.append(Input[i])\n                common_list.append(Input[j])\n    return common_list\n",
        "test": "assert group_tuples([(1,2,3), (1,4,5), (2,3,4), (1,6,7), (2,4,6)]) == [(1, [2, 4, 6], [3, 5, 7])] ",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\"]) == \"banana\" ",
        "num_ids": 395,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(\"Total sum after rounding:\", total_sum)\n    print(\"Length of list:\", len(list1))\n    print(\"Final result:\", total_sum * len(list1))\n",
        "test": "assert round_and_sum([1.2, 2.3, 3.4]) == 14 ",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-1]  # remove trailing delimiter\n",
        "test": "assert concatenate_tuple((\"Hello\", \"world\", \"!\")) == \"Hello world !\"",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    \n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n        # cube the current number and add it to the sum\n        sum_of_cubes += i ** 3\n    \n    # divide the sum by the total number of cubes to get the average\n    average = sum_of_cubes / (n * (n + 1) * (2 * n + 1) / 6)\n    \n    # return the average\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Average of cube of 1st natural number is 1\"",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements\n",
        "test": "assert extract_rear((\"apple\", \"banana\", \"cherry\")) == \"cherry\" ",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5], [6, 7, 8]], 3) == 1",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store odd numbers\n    odd_nums = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If it's odd, add it to the odd_nums list\n            odd_nums.append(num)\n\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5]",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Check if input is in yyyy-mm-dd format\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        # Split date into year, month, and day components\n        year, month, day = map(int, dt.split('-'))\n        # Convert date to dd-mm-yyyy format\n        return f\"{day:02d}-{month:02d}-{year:04d}\"\n    else:\n        # Input is not in yyyy-mm-dd format\n        return None\n",
        "test": "assert change_date_format('2021-12-31') == '31-12-2021' ",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 2, 8, 3, 1]) == [1, 2, 3, 5, 8] ",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            and_tup += (test_tup1[i],)\n    return and_tup\n",
        "test": "assert and_tuples((1,2,3), (4,5,6)) == (1,2,3) ",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return directrix\n",
        "test": "assert parabola_directrix(1, 3, -4) == 2, \"The directrix of the parabola y^2=x+3 is 2\"",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 351,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2 + height) / 2\n    return median\n",
        "test": "assert median_trapezium(4,5,3) == 4  # check if the function returns the correct value for base1=4, base2=5, height=3",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == True",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b)+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True ",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Compute the last digit of n using modulus operator\n    return n % 10\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n",
        "test": "assert neg_nos([1, 2, -3, -4, 5]) == [-3, -4]",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert remove_odd(\"\") == \"\" ",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2),(2,1),(3,4),(4,3),(1,3),(2,4),(3,1),(4,2)]) == 4",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1,2,3]) == 123 ",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverb_position(text):\n    adverbs = ['slowly', 'quickly', 'carefully', 'dutifully', 'eagerly', 'patiently', 'reluctantly']\n    pattern = re.compile(r'\\b(' + '|'.join(adverbs) + r')\\b')\n    matches = pattern.finditer(text)\n    if matches:\n        adverb = next(matches)\n        return adverb.group(0), adverb.start(), adverb.end()\n    else:\n        return None\n",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog\") == [(1, 'quick')] # a simple sentence with only one adverb",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculating the surface area of the cube\n    surface_area = 6 * (l**2)\n    \n    # Returning the surface area\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_of_positive = 0\n    num_of_total = 0\n    for num in nums:\n        if num > 0:\n            num_of_positive += 1\n        num_of_total += 1\n    ratio = num_of_positive / num_of_total\n    return ratio\n",
        "test": "assert positive_count([0, -1, -2, -3, -4, -5]) == 0",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([3, -5, 1, -3, 4]) == -3",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tuple(x[:K] for x in tup)\n        new_list.append(new_tup)\n    return new_list\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7), (8, 9, 10, 11)], 1) == [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10)]",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    # Create a Counter object from the tuple\n    counter = Counter(tup)\n    # Iterate through the list and count the occurrence of each element\n    for item in lst:\n        counter[item] = counter.get(item, 0) + 1\n    # Return the Counter object as a dictionary\n    return dict(counter)\n",
        "test": "assert count_Occurrence(('a', 'b', 'c', 'b', 'c'), ['a', 'b', 'c']) == {'a': 1, 'b': 2, 'c': 2} ",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1,2,3]) == [1,8,27] ",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_perrin_number(n):\n    \"\"\"\n    Helper function to check if a number is a Perrin number.\n    \"\"\"\n    return n == sum(int(d) for d in str(n))\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers less than or equal to n.\n    \"\"\"\n    perrin_sum = 0\n    for i in range(1, n+1):\n        if is_perrin_number(i):\n            perrin_sum += i\n    return perrin_sum",
        "test": "assert cal_sum(1) == 1  # perrin number 1 is 1",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) >= l:\n            result.append(s[:l])\n    return result\n",
        "test": "assert extract_string(['hello', 'world', 'python'], 2) == ['he', 'wo', 'py']",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text1)",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\" ",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return abs(actual_cost - sale_amount)\n    else:\n        return 0\n",
        "test": "assert loss_amount(100,100) == 0, \"loss_amount is not correct for actual_cost=100 and sale_amount=100\" ",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                factors.append(i)\n            if n // i != i and n // i % 2 == 0:\n                factors.append(n // i)\n    return sum(factors)\n",
        "test": "assert sumofFactors(12) == 12, \"Error in sumofFactors(12)\" ",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert text_match_wordz(\"hero world\") == False",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    monthnum2 = int(monthnum2)\n    \n    if monthnum2 == 2:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False, \"month number 2 should have 28 or 29 days\"",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"] ",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([]) == []  # test 1",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 10) == 50  # check if the function returns the correct value for 5*10",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase(\"HELLO\") == \"\"",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] ",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2  # upper case characters are 'H' and 'W'",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)+1):\n        for combo in itertools.combinations(list1, i):\n            result.append(combo)\n    return result\n",
        "test": "assert combinations_list([1]) == [[1]]",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n",
        "test": "assert max_subarray_product([-1, -2, -3]) == 6  # all negative case",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({1:1, 2:1, 3:1, 4:1, 5:1}, 1) == True",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value != '':\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({\"a\": 1, \"b\": \"\", \"c\": 3}) == {\"a\": 1, \"c\": 3} ",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i-1]*arr[i], dp[i-2]*arr[i], arr[i])\n    return dp[n-1]",
        "test": "assert max_product([-10, -10, -5, 2]) == 50",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((5, 4, 3, 2, 1)) == (9, 7, 5, 3), \"Test case 2 failed\"",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([4,5,6], 7) == 1            # Test Case 2",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the tuples to sets to perform set operations\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the intersection set back to a tuple\n    return tuple(intersection_set)",
        "test": "assert tuple_intersection((1, 2, 3), (1, 2, 4)) == (1, 2)",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"o\", \"0\") == \"hell0\", \"Function is not working correctly\"",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({\"a\": 3, \"b\": 2, \"c\": 1}) == {'c': 1, 'b': 2, 'a': 3}  # dictionary with values sorted in descending order",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val + min_val\n",
        "test": "assert big_sum([-1, 5, -9, 10, 20]) == 30 # correct output",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 188,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Removing lowercase substrings using regex\n    pattern = re.compile(r'[a-z]+')\n    str1 = re.sub(pattern, '', str1)\n    return str1\n",
        "test": "assert remove_lowercase(\"Hello World\") == \"H W\" # example test case",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit = str(n)[0]\n    return int(digit)\n",
        "test": "assert first_Digit(123) == 1, \"first_Digit(123) should return 1\"",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5] # Test case 1",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))**2\n    return sum_numbers - sum_cubes\n",
        "test": "assert difference(1) == 0",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if bin(A[i]^A[j])[-1] == '1':\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1, 3, 5, 7, 9], 5) == 2 # should return 2 as there are 2 pairs (1, 9) and (3, 7) with odd xor value",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string\n",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"  # string is converted to uppercase and lowercase alternatively",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # Get the length of the longest number\n    max_len = max(len(str_n1), len(str_n2))\n\n    # Pad the shorter number with zeros\n    if len(str_n1) < max_len:\n        str_n1 = '0' * (max_len - len(str_n1)) + str_n1\n    if len(str_n2) < max_len:\n        str_n2 = '0' * (max_len - len(str_n2)) + str_n2\n\n    # Calculate the sum of the per-digit difference\n    sum_diff = sum(abs(int(n1_digit) - int(n2_digit)) for n1_digit, n2_digit in zip(str_n1, str_n2))\n\n    return sum_diff\n",
        "test": "assert digit_distance_nums(1234, 4567) == 28 ",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4, -5], 5) == -1 # example 2",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to remove duplicates and then back to tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    return tuple(sorted(union_set))\n",
        "test": "assert union_elements((1,2,3),(4,5)) == (1,2,3,4,5) # Test case 1",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0  # Test case 1",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "test": "assert extract_values('\"apple\" \"banana\" \"cherry\"') == ['apple', 'banana', 'cherry']",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize a variable to keep track of the count of pairs\n    count = 0\n    \n    # Loop through each element in the array\n    for i in range(n):\n        # Loop through each element after the current one\n        for j in range(i+1, n):\n            # Check if both elements are unequal\n            if arr[i] != arr[j]:\n                count += 1\n    \n    # Return the count of pairs\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"] ",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum",
        "test": "assert sum_digits(123) == 6  # 1 + 2 + 3 = 6",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 245,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_no_dupes = []\n    for num in nums:\n        if num not in nums_no_dupes:\n            nums_no_dupes.append(num)\n    return nums_no_dupes[:2]\n",
        "test": "assert two_unique_nums([1, 2, 2, 3, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    # create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    # return the product\n    return product\n",
        "test": "assert unique_product([1,2,3]) == 6  # [1,2,3] has unique numbers [1,2,3] and their product is 6",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * (r + h)\n    return area\n",
        "test": "assert surfacearea_cylinder(5,4) == 316.0914293316395, \"Incorrect surface area for r=5 and h=4.\"",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i+len(A)]:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4], [2,5]) == False",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Using a loop to calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Finding the last digit of the factorial using modulo operator\n    last_digit = factorial % 10\n    \n    # Returning the last digit of the factorial\n    return last_digit\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists should have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elements.append(elem)\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            dissimilar_elements.append(elem)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1,2,3), (1,4,3)) == (2,4)",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.append(even_fnc(i))\n        else:\n            new_tuple.append(i)\n    return tuple(new_tuple)\n",
        "test": "assert even_ele( (1, 2, (1, 2, 3), 4, 5), lambda x: x % 2 == 0 ) == (2, (2, 4), 4) ",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s\n    return area\n",
        "test": "assert surface_Area(3, 5) == 30, \"Error in surface_Area function\"",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize two variables to store values of 1 and 1\n    c1 = 1\n    c2 = 1\n\n    # Loop through range from 2 to num\n    for i in range(2, num + 1):\n        # Multiply the previous two variables and store in c2\n        c2 = c1 * (2 * i - 1) // i\n\n        # Swap the values of c1 and c2\n        c1, c2 = c2, c1\n\n    # Return the value of c1\n    return c1\n",
        "test": "assert catalan_number(0) == 1, \"The 0th catalan number is 1\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(pattern, text)\n    if not adverbs:\n        return None\n    for adverb in adverbs:\n        if adverb.endswith('ly'):\n            match = re.search(pattern, text)\n            if match:\n                return (adverb, match.start(), match.end())\n    return None\n",
        "test": "assert find_adverbs(\"The dog runs quickly.\") == ([\"quickly\"], [(13, 19)]) # correct result",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n",
        "test": "assert expensive_items([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50)], 3) == [(5, 50), (4, 40), (3, 30)]",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    \n    # create two empty lists\n    new_list = []\n    second_list = []\n    \n    # iterate over the list and append elements to new_list until nth element\n    for i in range(n):\n        new_list.append(l[i])\n    \n    # iterate over the remaining elements and append to second_list\n    for i in range(n, len(l)):\n        second_list.append(l[i])\n    \n    # append new_list to second_list\n    second_list += new_list\n    \n    return second_list\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5], \"The function should do nothing when n is greater than the length of the list\"",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3) ",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list to store the perfect squares\n    squares = []\n    # Loop through all the integers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if int(i**0.5)**2 == i:\n            # If it is, add it to the list of squares\n            squares.append(i)\n    # Return the list of perfect squares\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]  # check for a list of length 3",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive\n    binomial co-efficients.\n    \"\"\"\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result *= (n - i) / (i + 1)\n    return result\n",
        "test": "assert binomial_Coeff(5,2) == 10 ",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regex to match IPv4 addresses\n    ip_pattern = re.compile(r'^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$')\n    \n    if ip_pattern.match(ip):\n        # Split IP address by period and remove leading zeroes from each octet\n        octets = ip.split('.')\n        octets = [str(int(octet)) for octet in octets]\n        \n        # Join octets back together with periods\n        new_ip = '.'.join(octets)\n        \n        return new_ip\n    else:\n        return ip\n",
        "test": "assert removezero_ip('1.2.3.004') == '1.2.3.4'",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_diff = None\n    odd_diff = None\n    for num in list1:\n        if num % 2 == 0:\n            if not even_found:\n                even_found = True\n                even_diff = num\n            else:\n                odd_diff = num - even_diff\n                return odd_diff\n        else:\n            if not odd_found:\n                odd_found = True\n                odd_diff = num\n            else:\n                even_diff = num - odd_diff\n                return even_diff\n    if even_found and odd_found:\n        return even_diff - odd_diff\n    else:\n        return None  # no even or odd number found\n",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 2, \"Error: incorrect output for [1, 2, 3, 4, 5]\"",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n    \n    # Initialize variables to keep track of swaps and current index\n    swaps = 0\n    i = 0\n    \n    # Iterate through the lists, comparing elements\n    while i < len(lst1):\n        # If the elements are not equal, swap them and increment swaps\n        if lst1[i] != lst2[i]:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            swaps += 1\n        # Increment the index\n        i += 1\n    \n    return swaps\n",
        "test": "assert min_Swaps(\"1100\",\"0110\") == 2",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert tuple_size((\"hello\", \"world\", \"!\")) == 32  # tuple with 3 elements",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    \n    # If either array is empty, return the kth element of the non-empty array\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    \n    # If k is 1, return the minimum element of the two arrays\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # Find the index of the kth element in arr1\n    i = min(k/2, len(arr1))\n    while i >= 1 and arr1[i] > arr1[i-1]:\n        i -= 1\n    \n    # If the kth element is in arr1, check if it's less than or equal to the kth element of arr2\n    if k-i <= len(arr2) and arr1[i] <= arr2[k-i-1]:\n        return arr1[i]\n    \n    # If the kth element is in arr2, check if it's less than or equal to the kth element of arr1\n    if k-i <= len(arr1) and arr2[k-i-1] <= arr1[i]:\n        return arr2[k-i-1]\n    \n    # If the kth element is in both arr1 and arr2, recursively call the function with the remaining elements of both arrays\n    if k-i <= len(arr1) and k-i <= len(arr2):\n        return find_kth(arr1[i:], arr2[k-i-1:], k-i)\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 4) == 6 ",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string to calculate its length\n    number_str = str(number)\n    length = len(number_str)\n\n    # initialize the sum of the cubes to zero\n    sum = 0\n\n    # iterate through each digit in the number and add the cube of each digit to the sum\n    for digit in number_str:\n        sum += int(digit) ** 3\n\n    # check if the sum is equal to the number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1.0)",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True",
        "num_ids": 254,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"hello world\") == 'l' # correct answer",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    i = 1\n    while i <= n:\n        is_ludic = True\n        for j in range(2, i // 2 + 1):\n            if i % j == 0 and i - j in ludics:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludics.append(i)\n        i += 1\n    return ludics\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n",
        "test": "assert reverse_words(\"\") == \"\" # test case 1",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is divisible by any number less than it\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2), \"2 is a prime number\"",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(180) == 3.141592653589793 ",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    # Find all matches in the text\n    matches = regex.finditer(text)\n    # Loop through the matches and return the first match\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    # If no match was found, return None\n    return None",
        "test": "assert find_literals(\"Python is an amazing language\", \"Python\") == (\"Python\", 0, 6)",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # create an empty list to store the Bell triangle\n    bell_triangle = [[1]]\n    \n    # create a loop to fill in the Bell triangle until it reaches the nth row\n    for i in range(1, n+1):\n        row = [1]\n        for j in range(1, i):\n            # add the sum of the two previous numbers in the row\n            row.append(bell_triangle[i-1][j-1] + bell_triangle[i-1][j])\n        # append the row to the Bell triangle\n        bell_triangle.append(row)\n    \n    # return the nth Bell number, which is the last number in the last row of the triangle\n    return bell_triangle[-1][-1]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5]  # test case 2",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 6",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    a = []\n    b = []\n    for l in lst:\n        a.append(l[0])\n        b.append(l[1])\n    return [a, b]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cumulative_sum_list = []\n    for num in test_list:\n        total += num\n        cumulative_sum_list.append(total)\n    return cumulative_sum_list\n",
        "test": "assert cummulative_sum([1,2,3,4,5]) == [1, 3, 6, 10, 15]",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2.0, 5.0, 8.0] ",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length!\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)",
        "test": "assert tuple_modulo((10, 20, 30), (3, 5, 7)) == (1, 0, 2)  # Testing with sample input",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    if steps == 0:\n        return 0\n    if steps == 1:\n        return 1\n    if steps >= d:\n        return 1\n    else:\n        return 2 + min_Jumps(steps - 1, d - 1)\n",
        "test": "assert min_Jumps(2, 2) == 1  # steps: 2, d: 2, jumps: 1",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) != len(nums2):\n        return \"The two lists must have the same length.\"\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            return \"Cannot divide by zero.\"\n        result.append(nums1[i] / nums2[i])\n    \n    return result\n",
        "test": "assert div_list([1,2,3], [2,4,6]) == [0.5, 0.5, 0.5]",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    str_list = []\n    \n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    \n    return ''.join(str_list) + ''.join(num_list)\n",
        "test": "assert move_num('') == ''",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # first, check if the array is empty or has only one element\n    if len(a) < 2:\n        return len(a)\n    \n    # sort the array in descending order\n    a.sort(reverse=True)\n    \n    # initialize variables to keep track of the largest subset size and the last index we checked for divisibility\n    subset_size = 1\n    i = 0\n    \n    # loop through the array\n    while i < len(a)-1:\n        # check if the next number is divisible by the current number\n        if a[i+1] % a[i] == 0:\n            # if it is, add it to the subset size\n            subset_size += 1\n            i += 1\n        else:\n            # if it's not, break out of the loop\n            break\n    \n    return subset_size\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 1 # should return 1",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2])/2\n    else:\n        return arr1[n//2]\n",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3  # Example 2",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4],2) == [1,4,9,16] ",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 199,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]  # correct output for [1,2,3,4,5]",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    semi_circle_area = math.pi * r**2\n    triangle_height = 2 * r * (1 - math.sqrt(3) / 2)\n    triangle_base = 3 * r\n    triangle_area = 0.5 * triangle_base * triangle_height\n    return triangle_area",
        "test": "assert triangle_area(2) == 4.459485702458709, \"Incorrect area for r=2\"",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] != i + 1:\n            return i + 1\n    \n    return end + 1\n",
        "test": "assert find_First_Missing([1,2,3,4,6]) == 5",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "test": "assert Split([1,2,3,4,5,6]) == [2,4,6] # split even numbers",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjac_coords = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    for coord in adjac_coords:\n        if coord[0] >= 0 and coord[1] >= 0 and coord not in sub:\n            sub.append(coord)\n    for coord in sub:\n        adjac(coord, sub)\n    return sub\n",
        "test": "assert adjac((1,2)) == [(0,2), (2,1), (1,3), (2,0)]",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if there are any whitespaces in the given string\n    if ' ' in text:\n        # Replace all whitespaces with underscore\n        text = text.replace(' ', '_')\n    else:\n        # Replace all underscores with whitespaces\n        text = text.replace('_', ' ')\n    # Return the updated string\n    return text\n",
        "test": "assert replace_spaces(\"Hello_World\") == \"Hello World\"",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize variables for keeping track of non-zero elements and zero elements\n    non_zero_list = []\n    zero_list = []\n\n    # Loop through the input list and separate non-zero elements from zero elements\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n\n    # Concatenate the non-zero and zero elements to form the final list\n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([5,6,0,7,0,9]) == [5,6,7,9,0,0], \"List with zeroes moved to the end\"",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([5,4,3,2,1],5) == 14",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    return [hq.heappop(heap) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]  # simple test case ",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in the actual cost of an item and the amount it was sold for. \n    It returns True if the sale amount is equal to the actual cost, indicating that there was no profit or no loss. \n    Otherwise, it returns False.\n    \"\"\"\n    \n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False ",
        "test": "assert noprofit_noloss(10,10) == True",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    # calculate wind chill index\n    wc = 13.12 + 0.6215 * t_f - 11.37 * math.pow(v, 0.16) + 0.3965 * t_f * math.pow(v, 0.16)\n    # round wind chill index to the nearest integer\n    wc_rounded = round(wc)\n    return wc_rounded\n",
        "test": "assert wind_chill(10, 10) == 18 ",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length",
        "test": "assert sample_nam([]) == 0",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]+\\)')\n    return pattern.sub('', items)\n",
        "test": "assert remove_parenthesis(\"hello world\") == \"hello world\"  # case 2",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_num = 0\n    count = 1\n    for i in range(1, n+1):\n        nonagonal_num += count\n        count += 2\n    return nonagonal_num\n",
        "test": "assert is_nonagonal(1) == 1 # The first nonagonal number is 1.",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\bz\\b')\n    return bool(pattern.search(text))\n",
        "test": "assert text_match_wordz_middle(\"zebra zebra\") == False",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverse an array up to a given position.\n    \"\"\"\n    for i in range(0, k//2):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n    return input",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]  # test case 2",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 1, \"b\": 2}) == (1, 2, 3, {\"a\": 1, \"b\": 2}) ",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = sum(cost[-1]) / n\n    for i in range(n-1, 0, -1):\n        for j in range(n-1, 0, -1):\n            max_avg = max(max_avg, (dp[i][j] + sum(cost[:i]) + sum(cost[:,:j])) / (i+j))\n    return max_avg\n",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 8.333333333333333 ",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({\"Alice\": (175, 55), \"Bob\": (180, 80), \"Charlie\": (160, 60)}, 170, 70) == {\"Bob\": (180, 80)} ",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3], [1,2,3]) == 3",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    for i in range(power):\n        result += int(base)\n        base = str(base) + str(base)\n        base = ''.join(sorted(set(base), key=base.index))\n        base = int(base)\n    return result\n",
        "test": "assert power_base_sum(2, 3) == 6, \"Error: power_base_sum(2, 3) should be 6\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('\"Quote 1\" is a quotation.') == ['Quote 1'] ",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Create an empty list to store the products\n    products = []\n\n    # Loop through the tuple and compute the products\n    for i in range(len(test_tup) - 1):\n        product = test_tup[i] * test_tup[i + 1]\n        products.append(product)\n\n    # Convert the list to a tuple and return it\n    return tuple(products)\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12), \"Multiplication is incorrect\" ",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    \n    # initialize an empty list for the sum of the two lists\n    sum_lst = []\n    \n    # iterate over the two lists simultaneously\n    for i in range(len(lst1)):\n        # add the corresponding elements of the two lists and append the result to the sum list\n        sum_lst.append(lst1[i] + lst2[i])\n    \n    # return the sum list\n    return sum_lst\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9] # Addition of 1st elements of both lists",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(list(group))\n    \n    final_result = []\n    for i in range(len(result)):\n        if i == 0 or len(result[i]) == 1 or result[i][0] != result[i-1][-1]:\n            final_result.extend(result[i])\n        \n    return final_result\n",
        "test": "assert consecutive_duplicates([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h",
        "test": "assert lateralsurface_cone(5, 10) == 68.90787274555541 ",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace spaces with colon\n    text = re.sub(r'\\s', ':', text)\n    # Replace commas with colon\n    text = re.sub(r',', ':', text)\n    # Replace dots with colon\n    text = re.sub(r'\\.', ':', text)\n    return text\n",
        "test": "assert replace_specialchar(\"My name is John.\") == \"My name is John:\"",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6], 4) == 3",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_of_subarray_products(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    \n    # base case\n    for i in range(n):\n        dp[i][i] = arr[i]\n    \n    # sublist length 2\n    for i in range(n-1):\n        dp[i][i+1] = arr[i]*arr[i+1]\n    \n    # sublist length >= 3\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            dp[i][j] = dp[i+1][j-1]*arr[i]\n            for k in range(i+1, j):\n                dp[i][j] += dp[i][k-1]*dp[k+1][j]\n    \n    # sum of products\n    return sum(dp[0])\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1, 2, 3]) == 26  # Test case 2",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Converting the number to binary string\n    binary = bin(n)[2:]\n    \n    # Toggling all the bits except the first and the last\n    for i in range(1, len(binary)-1):\n        binary = binary[:i] + '1' + binary[i+1:]\n    \n    # Converting the binary string back to decimal and returning it\n    decimal = int(binary, 2)\n    return decimal\n",
        "test": "assert set_middle_bits(7) == 7 ",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1,3,4,7,9], 5) == 3 # Example from w3resource",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('Hello_world') == False  # the string does not start with a vowel",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) + geometric_sum(n - 1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    count = 0\n    i = 1\n    while True:\n        count += i\n        if len(str(count)) == n:\n            return i\n        i += 1\n",
        "test": "assert find_Index(1) == 1 # smallest triangular number is 1, which has 1 digit",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result",
        "test": "assert tuple_to_dict(('apple', 'banana', 'cherry', 'date') == {'apple': 'banana', 'cherry': 'date'}",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "test": "assert all_Characters_Same(\"abcdef\") == False",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    \n    # Calculate the volume of the tetrahedron using the formula:\n    # Volume = (1/3) * (base * height) * side\n    volume = (1/3) * (base * height * side)\n    \n    # Calculate the area of the tetrahedron using the formula:\n    # Area = 4 * (base * height)\n    area = 4 * (base * height)\n    \n    return area\n",
        "test": "assert area_tetrahedron(6) == 91.01594329717079, \"Incorrect area calculation for side length of 6.\" ",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. \n    '''\n    n = len(list)\n    list = list[n-m:] + list[:n-m]\n    return list\n",
        "test": "assert rotate_right([1,2,3,4,5], 2) == [4,5,1,2,3] # rotate list by 2 to the right direction",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num%int(digit)==0 for digit in str(num)):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(20, 30) == False",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r ** 2 * a / 360\n",
        "test": "assert sector_area(4, 180) == 50.26548245743669  # check if the function returns the correct area for 4 units radius and 180 degree angle",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    def lcs(X, Y):\n        m = len(X)\n        n = len(Y)\n        L = [[0] * (n + 1) for i in range(m + 1)]\n\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n        return L[m][n]\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0] * (o + 1) for j in range(n + 1)] for k in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    return L[m][n][o]",
        "test": "assert lcs_of_three('AGGTAB', 'GXTXAYB', 'GAGTBA') == 'GTAB'",
        "num_ids": 1598,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall('[A-Z][a-z]*', str1)\n    result = ' '.join(words)\n    return result\n",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\" ",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings(['3', '1', '4', '1']) == ['1', '1', '3', '4']  # basic test",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([(1, 2)], (3, 4)) == [(1, 2), (3, 4)] ",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Find the smallest value in the heap\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    # If the smallest value is not the root, then it is not a min heap\n    if smallest != i:\n        return False\n\n    # If the smallest value is the root, then recursively check the left and right subtrees\n    if left < len(arr):\n        if not check_min_heap_helper(arr, left):\n            return False\n\n    if right < len(arr):\n        if not check_min_heap_helper(arr, right):\n            return False\n\n    # If the left and right subtrees are min heaps, then the whole heap is a min heap\n    return True\n",
        "test": "assert check_min_heap_helper([5, 4, 3, 2, 1], 0) == False ",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + 2*jacobsthal_num(n-2))",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Create an empty list to store the minimum k records\n    min_k_records = []\n    \n    # Loop through the sorted list and add the minimum k records to the list\n    for i in range(K):\n        min_k_records.append(sorted_list[i])\n    \n    return min_k_records\n",
        "test": "assert min_k([(2, 3, 4), (1, 2, 3), (3, 4, 5), (4, 5, 6), (5, 6, 7)], 3) == [(1, 2, 3), (2, 3, 4), (3, 4, 5)]",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists.\n    The function should return a list.\n    \"\"\"\n\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l2[i] == l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements\n",
        "test": "assert extract_index_list([1,2,3],[4,5,6],[7,8,9]) == []",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n",
        "test": "assert second_smallest([1, 1, 2, 2, 3]) == 2",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('abb') == True",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([\"abcd\", \"dcba\", \"ab\", \"ba\", \"cd\", \"da\"]) == 2",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through every sublist in list1\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the dictionary as a key\n        sublist_tuple = tuple(sublist)\n        sublist_count[sublist_tuple] = sublist_count.get(sublist_tuple, 0) + 1\n        \n    return sublist_count\n",
        "test": "assert unique_sublists([[1,2,3],[1,2,3],[1,2,3]]) == {(1,2,3): 3}",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal = round(float(num), 2)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal(12.34) == True",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not.\n    \"\"\"\n    # Define a dictionary of months and their number of days\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the given month number is within the range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    \n    # Check if the given month number is a leap year\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)):\n        return True\n    \n    # Check if the given month number is not a leap year\n    else:\n        return month_days[monthnum3] == 30\n",
        "test": "assert check_monthnumber_number(2) == True",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize minimum difference to be the difference between the first and second elements\n    min_diff = arr[1] - arr[0]\n    # Iterate over the array and compare the difference between consecutive elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([4, 2, 1, 3], 4) == 1",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 204,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find the nth polite number.\n    \"\"\"\n    def is_polite_helper(num):\n        \"\"\"\n        Helper function to check if a number is polite or not.\n        \"\"\"\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    i = 1\n    while count < n:\n        if is_polite_helper(i):\n            count += 1\n        i += 1\n\n    return i-1\n",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1,2,3,4,5], 5) == 2",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3],[2,3,4]) == [1], \"Diff should return [1]\"",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # add the square of i to the sum variable\n        sum += i**4\n        \n    # return the sum variable\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"Error in function: odd_num_sum(1)\"",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack\n",
        "test": "assert check_expression(\"(a+b)+c\") == True  # correct expression",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the test string into a list of words\n    words = test_str.split()\n    # Initialize an empty list to store the modified words\n    new_words = []\n    # Loop through each word\n    for word in words:\n        # If the length of the word is not equal to k, add it to the new list\n        if len(word) != K:\n            new_words.append(word)\n    # Join the new list of words into a string and return it\n    return \" \".join(new_words)\n",
        "test": "assert remove_length(\"This is a test string\", 2) == \"is a string\" ",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n\n    return result\n",
        "test": "assert occurance_substring(\"hello world\", \"hello\") == (0, 5) # check the correct position and occurrence of the substring \"hello\" in the string \"hello world\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1,2,3,4,5,6]) == False # should return False",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"Python is awesome\") == 8  # \"o\" and \"o\" are neighbors in \"Python\", \"o\" and \"o\" are neighbors in \"is\", and \"e\" and \"e\" are neighbors in \"awesome\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the sum of non-repeated elements by iterating through the dictionary and summing up the keys with count 1\n    non_repeated_sum = 0\n    for num, count in count_dict.items():\n        if count == 1:\n            non_repeated_sum += num\n    \n    return non_repeated_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 5]) == [[1], [2, 2], [3, 3, 3], [4, 4], [5]] ",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            sublist = tuple(item)\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists\n",
        "test": "assert unique_sublists([[1,2,3], [4,5,6], [1,2,3]]) == {(1,2,3): 2, (4,5,6): 1}",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import itertools\n\ndef find_combinations(test_list):\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combination in itertools.combinations(test_list, i):\n            result.append(sum(combination))\n    return result",
        "test": "assert find_combinations([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8), (1, 2, 3, 4), (1, 2, 5, 6), (1, 2, 7, 8), (3, 4, 5, 6), (3, 4, 7, 8), (5, 6, 7, 8), (1, 3, 5, 7), (2, 4, 6, 8), (1, 4, 5, 7), (2, 3, 6, 8)]",
        "num_ids": 2652,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count\n\ndef is_even_divisor_count(n):\n    divisor_count = count_divisors(n)\n    return divisor_count % 2 == 0",
        "test": "assert count_divisors(2) == 2 ",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum_odd_length_subarrays = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                sum_odd_length_subarrays += sum(arr[i:j+1])\n    \n    return sum_odd_length_subarrays\n",
        "test": "assert odd_length_sum([1, 2, 3]) == 6",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n\n    # Convert RGB to HSL color\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n    l = (max_c + min_c) / 2\n    s = 0 if max_c == min_c else delta / (1 - abs(2*l - 1))\n    h = 0\n    \n    # Calculate H component of HSV color\n    if delta == 0:\n        h = 0\n    elif max_c == r:\n        h = ((g - b) / delta) % 6\n    elif max_c == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h /= 6.0\n    \n    # Convert HSL to HSV color\n    hsv = (h, s, l)\n    return hsv\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)  # black color",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    count_even = 0\n    count_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_prod *= num\n            count_even += 1\n            if count_even == 2:\n                break\n        else:\n            odd_prod *= num\n            count_odd += 1\n            if count_odd == 2:\n                break\n    \n    return even_prod * odd_prod\n",
        "test": "assert mul_even_odd([0,1,2,3,4,5,6,7,8]) == 0    # Test case 2",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert string to tuple of integers\n        result = tuple(map(int, test_str.strip('()').split(',')))\n        return result\n    except ValueError:\n        return None\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) ",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 4, 5], 6) == 4",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*?b.*?b.*?b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbbb\") == True",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(test_str)\n    # Concatenate the two lists\n    new_list = test_list + str_list\n    # Convert the list to a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple([1, 2, 3, 4, 5], \"abcde\") == (1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e') # should return a tuple with the original list elements and the characters from the string",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2,4,6,8,10]) == True, \"Even position contains even number\"",
        "num_ids": 427,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) != tuple:\n            new_tup += (i,)\n    return new_tup\n",
        "test": "assert remove_nested((1, 2, (3, 4), 5)) == (1, 2, 5), \"Error: The nested tuple is not removed\"",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5], [6]]) == 3",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    last_pos = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return last_pos\n",
        "test": "assert last([1,2,3,3,3,4,5],3) == 4, \"Incorrect value\"",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b$\"\n    return bool(re.search(pattern, text))",
        "test": "assert text_starta_endb(\"ab\") == True # Correct",
        "num_ids": 266,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dictionary.values():\n        total += item\n    return total\n",
        "test": "assert return_sum({1: 2, 3: 4, 5: 6}) == 12 ",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            odd_sum += i\n    return odd_sum\n",
        "test": "assert sum_odd(5) == 9  # sum of odd numbers from 1 to 5 (1 + 3 + 5)",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1,2,3]) == 6 ",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_num = bin(n)[2:].zfill(32)\n    # Rotate the bits left by d\n    rotated_binary = binary_num[-d:] + binary_num[:-d]\n    # Convert the rotated binary back to decimal\n    rotated_num = int(rotated_binary, 2)\n    return rotated_num\n",
        "test": "assert left_rotate(0b1111, 2) == 0b1110  # Test for the number 0b1111 and 2 rotations. Should return 0b1110. ",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Python is awesome\") == \"Pythonisawesome\", \"Function is not working correctly\"",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3 # All three numbers are equal",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low, high = 0, n-1\n\n    # binary search to find the index of minimum element\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n\n    # calculate the number of rotations\n    k = high\n    if k == n:\n        k = 0\n    return k\n",
        "test": "assert count_rotation([1,2,3,4,5]) == 0  # Sorted array",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    # Check if the number is a positive integer\n    if n < 1 or not isinstance(n, int):\n        return False\n    \n    # Check if the number is a perfect square\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    \n    # If the number is not a perfect square, return False\n    return False\n",
        "test": "assert is_perfect_square(1) == True # Test case 2",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([1, 2, 4]) == True",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [7,8,9] ",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run_length = 0\n    for char in test_str:\n        if char.isupper():\n            run_length += 1\n        else:\n            max_run = max(max_run, run_length)\n            run_length = 0\n    max_run = max(max_run, run_length)\n    return max_run\n",
        "test": "assert max_run_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26, \"Incorrect answer\"",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:  # check if number is odd\n            return num  # return the first odd number\n    return None  # if there are no odd numbers, return None\n",
        "test": "assert first_odd([2, 4, 6, 8, 1]) == 1",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False\n",
        "test": "assert check_K(test_tup2, 10) == False ",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((), ())",
        "num_ids": 418,
        "indeed": true
    }
]