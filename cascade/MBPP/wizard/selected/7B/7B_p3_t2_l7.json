[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples into lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    # create an empty list to store the shared elements\n    shared_elements = []\n    # iterate through the first list and check if each element is in the second list\n    for element in test_list1:\n        if element in test_list2:\n            # if the element is found, add it to the shared elements list\n            shared_elements.append(element)\n    # return the shared elements list\n    return shared_elements\n",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return True\n    # check if n is divisible by any number between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(2) == False # 2 is a prime number",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = hq.nlargest(n, nums)\n    largest.sort(reverse=True)\n    return largest\n",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 3) == [5, 4, 3]  # test case 1",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the number to binary format\n    binary = bin(x)[2:]\n    # Count the number of 1's in the binary format\n    count = binary.count('1')\n    # Check whether the count is 1 or not\n    if count == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regex to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Returning the list of words that are at least 4 characters long\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'over', 'lazy'] ",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1,2,3]) == [1,4,9]",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Step 1: Find the length of the string\n    n = len(str)\n\n    # Step 2: Find the number of possible rotations\n    rotations = 2\n    for i in range(n):\n        if str[i] != str[(i + n - 1) % n]:\n            rotations += 1\n\n    # Step 3: Find the minimum number of rotations required to get the same string\n    if rotations == 2:\n        return 0\n    else:\n        return rotations // 2\n",
        "test": "assert find_Rotations(\"a\") == 0 ",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # Find the first occurrence of the character\n    i = s.find(ch)\n    \n    # If the character is not found, return the original string\n    if i == -1:\n        return s\n    \n    # Find the last occurrence of the character\n    j = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if j == -1:\n        return s\n    \n    # Remove the character from the string and return the result\n    return s[:i] + s[i+1:j] + s[j+1:]\n",
        "test": "assert remove_Occ(\"hello\", \"o\") == \"hell\" # last occurrence of \"o\" is removed",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def sort_matrix(M):\n    # create a list of (row, sum) tuples\n    rows = [(row, sum(row)) for row in M]\n\n    # sort the rows by their sum in ascending order\n    rows = sorted(rows, key=lambda x: x[1])\n\n    # create a new matrix by copying the rows in their sorted order\n    M = [row for row, sum in rows]\n\n    return M\n",
        "test": "assert sort_matrix([[4, 2], [1, 3]]) == [[1, 3], [4, 2]] # test case 1",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = 1/2 * l * b * h\n    return volume\n``` \n\nTo use this function, you can call it with the desired values for `l`, `b`, and `h`. For example:\n\n```python\nprint(find_Volume(6, 7, 8)) # Output: 144.0\n``` ",
        "test": "assert find_Volume(1,1,1) == 0  # triangle prism with base dimensions 0x0 and height 1",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    return bool(pattern.match(text))\n",
        "test": "assert text_lowercase_underscore(\"a_b_c\") == True",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(3) == 12 # for a square with side length 3",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = [False] * NO_OF_CHARS\n    for char in string:\n        str_list[ord(char)] = True\n    return str_list\n\ndef remove_chars(str1, str2):\n    '''\n    Remove characters from str1 which are present in str2.\n    '''\n    str1_list = str_to_list(str1)\n    str2_list = str_to_list(str2)\n    result = \"\"\n    for i in range(NO_OF_CHARS):\n        if not str1_list[i] and not str2_list[i]:\n            result += chr(i)\n    return result\n\nstr1 = \"hello\"\nstr2 = \"olle\"\nprint(remove_chars(str1, str2)) # Output: \"h\" ",
        "test": "assert str_to_list(\"world\") == \"world\"",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through the array of numbers\n    for num in arraynums:\n        # If the number is already in the set, there is a duplicate\n        if num in unique_elements:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_elements.add(num)\n    \n    # If there are no duplicates, the function returns False\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Convert the number to a string\n    x_str = str(x)\n    \n    # Check if the length of the string is equal to the number of digits in the number\n    if len(x_str) != len(set(x_str)):\n        return False\n    \n    # Check if the number is a palindrome\n    if x_str != x_str[::-1]:\n        return False\n    \n    # Check if the sum of the digits is equal to the number\n    if sum(int(d) for d in x_str) != x:\n        return False\n    \n    # If all checks passed, the number is a woodball\n    return True\n",
        "test": "assert is_woodall(42) == False, \"42 is not a Woodall number\"",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    original_num = num\n    \n    # Calculate the reverse of the given number\n    while num > 0:\n        remainder = num % 10\n        reverse_num = (reverse_num * 10) + remainder\n        num //= 10\n    \n    # Check if the given number is one less than twice its reverse\n    if original_num == reverse_num * 2 - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(12345) == False",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_num = 0\n    \n    for i in range(len(arr)):\n        num = arr[i]\n        \n        # Excluding the current digit\n        remaining_digits = arr[:i] + arr[i+1:]\n        \n        # Recursive call for remaining digits\n        max_remaining_num = find_Max_Num(remaining_digits)\n        \n        # Combining the current digit with the max number we got from remaining digits\n        current_num = int(str(num) + str(max_remaining_num))\n        \n        if current_num > max_num:\n            max_num = current_num\n            \n    return max_num\n",
        "test": "assert find_Max_Num([0, 1, 2]) == 210, \"210 is the largest number that can be formed with the given list of digits [0, 1, 2]\"",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(3, -5) == True ",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((2*n)**2 - 3*(n-1)) // 6\n",
        "test": "assert is_octagonal(2) == 8",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    sum_dict = defaultdict(int)\n\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += int(s[j])\n            if sum == j - i + 1:\n                count += 1\n            if sum_dict[sum] == 0 and j - i + 1 == sum:\n                count += sum_dict[sum]\n            sum_dict[sum] += 1\n\n    return count",
        "test": "assert count_Substrings(\"123\") == 1, \"Should return 1 as there is only one substring with sum of digits equal to length\"",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "test": "assert smallest_num([2, 1, 3, 4, 5]) == 1",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(1, 90), (2, 80), (3, 70)]) == [(3, 70), (2, 80), (1, 90)]  # should return [(3, 70), (2, 80), (1, 90)] ",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, [3, 4], [5, [6]], 7]) == 28 ",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, -2, 3, -4, 5]) == 3, \"The function is not working correctly for positive numbers.\"",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_list = [1]\n    for i in range(1, n+1):\n        bell_list.append(0)\n        for j in range(1, i+1):\n            bell_list[i] += bell_list[i-j] * (n-j)\n    return bell_list[n]\n",
        "test": "assert bell_number(0) == 1 # Test case for n=0",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if array is empty\n    if len(A) <= 1:\n        return True\n\n    # check if array is decreasing or increasing\n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n\n    # check if array is monotonic\n    if decreasing or increasing:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # check if s is an empty list\n    if not s:\n        return True\n    \n    # check if l is empty\n    if not l:\n        return False\n    \n    # check if first element of s is in l\n    if l[0] == s[0]:\n        # if yes, check if remaining sublist is in rest of list\n        return is_sublist(l[1:], s[1:])\n    else:\n        # if not, check if sublist is in rest of list\n        return is_sublist(l[1:], s)\n",
        "test": "assert is_sublist([1,2,3,4,5], [2,3]) == True ",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using comb sort algorithm.\n    '''\n\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        swaps = 0\n        sorted = True\n\n        for i in range(1, n):\n            if nums[i - 1] > nums[i]:\n                swap(i - 1, i)\n                swaps += 1\n                sorted = False\n\n        if sorted:\n            break\n\n        n = int(n / shrink)\n        if n == 0:\n            n = 1\n\n    return nums\n",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] # test with a sorted list",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # iterate through all pairs of squares\n    for i in range(1, int(n**0.5)+1):\n        j = n - i**2\n        if j > 0 and j <= int(j**0.5):\n            return True\n    return False\n",
        "test": "assert dif_Square(2) == True # Since 2 can be represented as the difference of two squares, i.e. 1^2 - (-1)^2",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\"], [\"red\", \"blue\", \"yellow\", \"green\"]) == False",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [] ",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0\n",
        "test": "assert is_Diff(21) == False",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert word_len(\"apple\") == True, \"The word 'apple' has odd length\"  # Test case 1",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 272,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi  # Test if the volume of a sphere with radius 1 is equal to pi * r^3 / 6 (approx. 4.18879020478639)",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # convert string to lowercase\n    strr = strr.lower()\n    \n    # initialize the sum of ASCII values of the characters in the string\n    sum_ascii = 0\n    \n    # loop through the characters in the string\n    for char in strr:\n        # add the ASCII value of the character to the sum_ascii\n        sum_ascii += ord(char)\n    \n    # find the character made by adding the sum of ASCII values modulo 26\n    char_sum = chr((sum_ascii % 26) + 97)\n    \n    return char_sum\n",
        "test": "assert get_Char('abc') == 'b' ",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [1, 1, 1]\n        for i in range(3, n+1):\n            sequence.append(sequence[sequence[i-1]]+sequence[i-sequence[i-1]])\n        return sequence[-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793, \"Error: surfacearea_sphere is not correct.\"",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        return 1 + 6*(n-1)\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"Test case 1 failed\"",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # combine all dictionaries into one dictionary\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    combined_dict.update(dict3)\n    \n    # merge the values using the Counter module\n    merged_dict = ct.Counter()\n    for key, value in combined_dict.items():\n        merged_dict[key] += value\n    \n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6}, {'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} ",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    prev = N - 1\n    while True:\n        if prev < 0:\n            return None\n        if prev not in [i for i in range(1, N+1)]:\n            return prev\n        prev -= 1\n",
        "test": "assert closest_num(1) == 0",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6 ",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for s in sub_str:\n        if s in str1:\n            return True\n    return False\n",
        "test": "assert find_substring(\"hello world\", \"world\") == True",
        "num_ids": 304,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string and store it in a variable\n    num_str = str(n)\n    # Check if the number has odd number of digits\n    if len(num_str) % 2 == 1:\n        # Initialize two variables to store the maximum and minimum digits\n        max_digit = -1\n        min_digit = 10\n        # Loop through each digit of the number\n        for digit in num_str:\n            # Convert the digit back to an integer\n            digit = int(digit)\n            # If the digit is greater than the current maximum digit, update the maximum digit\n            if digit > max_digit:\n                max_digit = digit\n            # If the digit is smaller than the current minimum digit, update the minimum digit\n            elif digit < min_digit:\n                min_digit = digit\n        # Check if the maximum digit is greater than the minimum digit\n        if max_digit > min_digit:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert is_undulating(987654321) == True  # negative pattern",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8, \"power(2,3) should be 8\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = min(enumerate(test_list), key=lambda x: x[1][1])[0]\n    return test_list[min_index][0]\n",
        "test": "assert index_minimum([(3, 1), (1, 5), (3, 2), (5, 1)]) == 1 ",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize the count variable\n    count = 0\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If i is a factor of n, increment the count\n        if n % i == 0:\n            count += 1\n    # Return the count\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency = {}\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n",
        "test": "assert frequency_lists([[1,2,3],[4,5,6],[7,8,9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "test": "assert multiply_num([0, 0, 0]) == 0",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using the divide-by-2 method\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    # Reverse the binary string and remove any leading zeros\n    binary = ''.join(reversed(binary)).lstrip('0')\n    # Return the binary string\n    return binary if binary else '0'\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # convert the input integer to a string\n    num_str = str(num)\n\n    # check if the input is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n\n    # find the first non-digit character from the right\n    for i in range(len(num_str)-1, -1, -1):\n        if not num_str[i].isdigit():\n            break\n\n    # if there are no non-digit characters, add a trailing digit and return the result\n    if i == -1:\n        return int(num_str + '9')\n\n    # otherwise, increment the last non-digit character and return the result\n    num_str = num_str[:i] + chr(ord(num_str[i])+1) + num_str[i+1:]\n    return int(num_str + '0'*(len(num)-len(num_str)))",
        "test": "assert next_smallest_palindrome(124) == 125",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 # test for the first element in the array",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))",
        "test": "assert snake_to_camel(\"this_is_snake_case\") == \"thisIsSnakeCase\"",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    if m > n:\n        return 0\n    else:\n        return 1",
        "test": "assert eulerian_num(0,0) == 1 # for n=0 and m=0",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([['cat', 'dog', 'bat'], ['fish', 'lion', 'tiger'], ['pig', 'cow', 'chicken']]) == [['bat', 'cat', 'dog'], ['fish', 'lion', 'tiger'], ['chicken', 'cow', 'pig']]",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False]) == 2 # example list with 2 true booleans",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + (test_list,)\n    return new_tup",
        "test": "assert add_lists([1,2,3], (4,5,6)) == ([1, 2, 3, 4, 5, 6], (4,5,6)) ",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a heap for each list\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    \n    # Add elements from each list to the heap\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n    \n    # Merge the heaps into a single sorted list\n    merged_list = []\n    while heap1 or heap2 or heap3:\n        if heap1 and (not heap2 or heap1[0] < heap2[0]) and (not heap3 or heap1[0] < heap3[0]):\n            merged_list.append(heapq.heappop(heap1))\n        elif heap2 and (not heap1 or heap2[0] < heap1[0]) and (not heap3 or heap2[0] < heap3[0]):\n            merged_list.append(heapq.heappop(heap2))\n        else:\n            merged_list.append(heapq.heappop(heap3))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4],[6,7,8]) != [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of 0's and 1's\n    nums = list(s)\n    # Calculate the number of rotations to make\n    rotations = n % len(nums)\n    # Rotate the list of 0's and 1's by the calculated number of rotations\n    nums = nums[-rotations:] + nums[:-rotations]\n    # Count the number of odd numbers in the rotated list\n    odd_count = sum(1 for num in nums if num == '1')\n    return odd_count\n",
        "test": "assert odd_Equivalent(\"1011\", 2) == 3 ",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements.intersection_update(set(lst))\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == []",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123'), \"Function check_integer does not work for positive integers\"",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dict(lst):\n    \"\"\"\n    This function takes a list of dictionaries as input and returns True if all the dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    for d in lst:\n        if d:\n            return False\n    return True\n",
        "test": "assert empty_dit([{'a':1}, {'b':2}]) == False",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,2,3,4,5)) == 12345 # example input 1",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            new_item = list_to_float(item)\n        elif isinstance(item, str):\n            try:\n                new_item = float(item)\n            except ValueError:\n                new_item = item\n        else:\n            new_item = item\n        new_list.append(new_item)\n    return new_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4.5, 6, 7.8]]) == [[1.0, 2.0, 3.0], [4.5, 6.0, 7.8]]",
        "num_ids": 901,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"] ",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    mid = len(arr) // 2\n\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[:mid] + arr[mid+1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n",
        "test": "assert search([1, 2, 3, 4, 5]) == 3",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(2, 3, -1, 4, -6)]) == 36 ",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of all numbers from 1 to the limit.\n    numbers = list(range(1, limit+1))\n    \n    # Initialize a dictionary to store the sum of proper divisors for each number.\n    divisor_sums = {}\n    \n    # Calculate the sum of proper divisors for each number.\n    for num in numbers:\n        divisor_sum = sum(d for d in range(1, num) if num % d == 0)\n        divisor_sums[num] = divisor_sum\n    \n    # Initialize a list to store the amicable pairs.\n    amicable_pairs = []\n    \n    # Find the amicable pairs and sum them up.\n    for num in numbers:\n        if num in divisor_sums:\n            other_num = divisor_sums[num]\n            if other_num in divisor_sums and other_num != num:\n                amicable_pairs.append((num, other_num))\n    \n    # Sum up the amicable pairs and return the result.\n    return sum(sum(pair) for pair in amicable_pairs)\n",
        "test": "assert amicable_numbers_sum(20) == 600",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        if b >= 0:\n            return 90\n        else:\n            return -90\n    elif b == 0:\n        if a >= 0:\n            return 0\n        else:\n            return 180\n    else:\n        angle = cmath.phase(complex(a, b))\n        if angle < 0:\n            angle += 2*cmath.pi\n        return round(cmath.degrees(angle), 2)\n",
        "test": "assert angle_complex(1, 0) == 0",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = ones = max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if zeros > 0 and ones > 0:\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "test": "assert find_length(\"001100110\") == 2",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the smaller number\n    if a < b:\n        a, b = b, a\n\n    # initialize sum variable\n    sum_divisors = 0\n\n    # loop through numbers from 1 to a\n    for i in range(1, a+1):\n        # check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # add i to sum\n            sum_divisors += i\n\n    return sum_divisors\n",
        "test": "assert sum(8,12) == 20, \"sum(8,12) should return 20\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2,3) == 6, \"Multiply function not working correctly for 2 and 3\"",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(3, \"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = sum(range(1, len(my_matrix) + 1))\n    current_sum = sum(my_matrix[0])\n    if current_sum != magic_sum:\n        return False\n    for i in range(len(my_matrix)):\n        current_sum -= my_matrix[i][i]\n        current_sum -= my_matrix[len(my_matrix) - i - 1][i]\n    return current_sum == magic_sum ",
        "test": "assert magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False ",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 1, 1, 1, 1]) == 1 ",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_rev = []\n    for char in str1:\n        if char in vowels:\n            vowels_rev.append(char)\n    vowels_rev = vowels_rev[::-1]\n    vowels_rev_str = ''.join(vowels_rev)\n    return str1.replace(vowels_rev_str, vowels_rev_str[::-1])\n",
        "test": "assert reverse_vowels(\"Python\") == \"nohtyP\"  # test case 2",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1",
        "test": "assert tup_string((1, 2, 3)) == \"123\"",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n    # Return the sum\n    return sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n * 2 - 1))\n",
        "test": "assert hexagonal_num(1) == 1, \"Hexagonal number 1 is incorrect\"",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0  # [1, 2, 3, 4, 5]",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Convert the number to binary and remove the leading zeros\n    binary_representation = bin(n)[2:]\n    \n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Loop through the binary representation of the number\n    for digit in binary_representation:\n        \n        # If the current digit is 1, add the corresponding power of 2 to the sum\n        if digit == '1':\n            power_sum += 2**(len(binary_representation) - binary_representation.index(digit) - 1)\n            \n    # Check if the sum of powers of 2 is equal to the given number\n    if power_sum == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert circle_circumference(1) == 2 * 3.141592653589793",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    # Initialize an empty set to store the flattened numbers\n    flattened_set = set()\n\n    # Loop through each element in the test_list\n    for element in test_list:\n        # If the element is a list, loop through its elements and add them to the set\n        if isinstance(element, list):\n            for sub_element in element:\n                flattened_set.add(sub_element)\n        # If the element is a number, add it to the set\n        else:\n            flattened_set.add(element)\n\n    # Return the flattened set\n    return flattened_set\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9} ",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    while n > 1:\n        # Find the maximum element in the unsorted portion of the list\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        # Flip the sublist from the start of the list to the maximum element to put it at the beginning\n        if max_idx != 0:\n            nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        # Flip the sublist from the end of the list to the maximum element to put it at the end\n        if max_idx != n-1:\n            nums[n-1:] = reversed(nums[n-1:])\n        n -= 1\n    return nums",
        "test": "assert pancake_sort([4, 2, 1, 3]) == [1, 2, 3, 4]",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[4,5,6],[7,8,9]) == 0",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0 ",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    # Handle special cases where a or b are zero or one\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    if a == 1:\n        return (n // b, 0)\n    if b == 1:\n        return (0, n // a)\n    \n    # Calculate the B\u00e9zout's coefficients x and y\n    s, t, sn, tn = 0, 1, 1, 0\n    r, rn = a, b\n    while rn != 0:\n        q = r // rn\n        r, rn = rn, r - q * rn\n        s, t = t, s - q * t\n        sn, tn = tn, sn - q * tn\n    \n    # Check if there is a solution\n    if r != 1 or abs(s) > 1:\n        return None\n    \n    # Calculate the solution\n    x = s * n // a\n    y = t * n // b\n    \n    return (x, y)\n",
        "test": "assert find_solution(1, -1, 0) == (0, 0)",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "test": "assert remove_elements([1,2,3,4,5],[4,5,6,7,8]) == [1,2,3] ",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_series(n):\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(4) == 7 ",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the interior angle of the polygon\n    interior_angle = (s - 2) * (180 / pi)\n\n    # calculate the apothem of the polygon\n    apothem = l / (2 * tan(pi / s))\n\n    # calculate the area of the polygon\n    area = (0.5 * l * apothem) * (1 / tan(pi / s))\n\n    return area\n",
        "test": "assert area_polygon(20, 4) == 20 * tan(pi/4) # A square with side length 20 has an area of 20 * tan(pi/4).",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n//i)\n    divisors = list(set(divisors))\n    divisors.sort()\n    div_sum = sum(divisors)\n    for i in range(1, n):\n        divisors2 = []\n        for j in range(1, math.floor(math.sqrt(i))+1):\n            if i % j == 0:\n                if i // j == j:\n                    divisors2.append(j)\n                else:\n                    divisors2.append(j)\n                    divisors2.append(i//j)\n        divisors2 = list(set(divisors2))\n        divisors2.sort()\n        if sum(divisors2) == div_sum:\n            return True\n    return False\n",
        "test": "assert div_sum(20) == False",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[i].lower() == chr(ord('a')+j).lower() and i != j:\n                count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcd\") == 0",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2  # (1 ^ 4) = 5, which is an even number",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 4, 5], 2) == 1 ",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9  # Example test case",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(1) == 5, \"Incorrect perimeter\"",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"\") == 0 # Test case 1",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) <= 1:\n        return True\n    else:\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[0]) != type(test_tuple[i]):\n                return False\n        return True\n",
        "test": "assert check_type((\"apple\", \"banana\", \"cherry\")) == True",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6], 6, 5) == False",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0 # 0 has 0 set bits",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "test": "assert odd_values_string(\"world\") == \"wrd\"",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(4, 5, 6) == 4",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # get the binary representation of n\n    binary_n = bin(n)[2:]\n    \n    # get the binary representation of the range l to r\n    binary_range = [bin(i)[2:] for i in range(l, r+1)]\n    \n    # check if all bits in the range are unset\n    for bit in binary_range:\n        if any(b == '1' for b in bit):\n            return False\n    \n    # all bits in the range are unset\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(6, 10, 18) == False # if n is 6 and the bits in range 10 to 18 are set to 0, function should return False",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative_elements = []\n    positive_elements = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative_elements.append(arr[i])\n        else:\n            positive_elements.append(arr[i])\n    return negative_elements + positive_elements\n",
        "test": "assert re_arrange_array([1, -2, 3, -4, 5], 3) == [-2, -4, 1, 3, 5]",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character.\n    \"\"\"\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"Hello, World!\", \" \") == \"Hello, World!\" # no spaces in the string",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert larg_nnum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 4) == [10, 9, 8, 7]",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula: 2 * pi * r * h\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(1, 2) == 12.566370614359172",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(2) == 8, \"Error in volume_cube function.\" ",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the given number to binary\n    binary_n = bin(n)[2:]\n    \n    # Create an empty string to store the binary number with even bits set\n    binary_n_with_even_bits_set = \"\"\n    \n    # Loop through each bit in the binary number and set the even bits to 1\n    for bit in binary_n:\n        if bit == \"1\" and len(binary_n_with_even_bits_set) % 2 == 1:\n            binary_n_with_even_bits_set += \"1\"\n        elif bit == \"0\" and len(binary_n_with_even_bits_set) % 2 == 0:\n            binary_n_with_even_bits_set += \"0\"\n        elif bit == \"0\" and len(binary_n_with_even_bits_set) % 2 == 1:\n            binary_n_with_even_bits_set += \"0\"\n        elif bit == \"1\" and len(binary_n_with_even_bits_set) % 2 == 0:\n            binary_n_with_even_bits_set += \"1\"\n    \n    # Convert the binary number with even bits set back to decimal and return the result\n    return int(binary_n_with_even_bits_set, 2)\n",
        "test": "assert even_bit_set_number(0b10101010) == 0b10101010 ",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for tup in test_list:\n        count_dict[tup] += 1\n    return count_dict\n",
        "test": "assert check_occurences([(1, 2), (2, 3), (1, 2), (3, 4), (1, 2), (2, 3)]) == {(1, 2): 3, (2, 3): 2, (3, 4): 1}",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(string):\n    n = len(string)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n    else:\n        return sum(min(m, i * 2) - max(2, i - 1) + 1 for i in range(2, m+1))\n",
        "test": "assert get_total_number_of_sequences(10, 3) == 45  # There are 45 possible sequences of length 3, where each element is between 2 and 10.",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, [4, 5]] # test case 1",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Hello World\") == 11  # Test case 1",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    square_root = math.sqrt(N)\n    return int(math.pow(square_root+1,2))\n",
        "test": "assert next_Perfect_Square(4) == 9, \"Function is not correct\"",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        return 0\n    \n    # Calculate the difference between adjacent elements\n    diff = [arr[i+1] - arr[i] for i in range(n-1)]\n    \n    # Initialize the max_sum and up_sum arrays\n    max_sum = [0]*n\n    up_sum = [0]*n\n    up_sum[0] = arr[0]\n    \n    # Calculate the maximum sum of bitonic subsequence up to index i\n    for i in range(1, n):\n        up_sum[i] = max(up_sum[i-1] + diff[i-1], 0)\n        max_sum[i] = max(max_sum[i-1], up_sum[i])\n    \n    # Calculate the maximum sum of bitonic subsequence that ends at index i\n    down_sum = [0]*n\n    down_sum[n-1] = arr[n-1]\n    max_end_sum = 0\n    \n    for i in range(n-2, -1, -1):\n        down_sum[i] = max(down_sum[i+1] + diff[i], 0)\n        if down_sum[i] == 0:\n            break\n    \n    # Find the maximum sum of bitonic subsequence\n    for i in range(n-1):\n        max_end_sum = max(max_end_sum, max_sum[i] + down_sum[i+1])\n    \n    return max_end_sum\n",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 5  # example input 2",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindrome\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n\n    # Check for substrings of length greater than 2\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if str[i] == str[j] and dp[i + 1][j - 1] > 0:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n",
        "test": "assert lps(\"BBABCBCAB\") == 7",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum\n",
        "test": "assert harmonic_sum(2) == 1.25",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_list:\n            intersection_list.append(num)\n    return intersection_list",
        "test": "assert intersection_array([1,2,3,4,5],[3,4,5,6,7]) == [3,4,5]",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 3) == 1, \"count_X is not working for tuples\"",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as input and inserts the element before each element in the list.\n    It returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            new_lst.append(element)\n            new_lst.append(lst[i])\n        else:\n            new_lst.append(lst[i-1])\n            new_lst.append(element)\n            new_lst.append(lst[i])\n    return new_lst\n",
        "test": "assert insert_element([1, 2, 3, 4], 0) == [0, 1, 0, 2, 0, 3, 0, 4] ",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    for num in numbers:\n        magnitude = cmath.polar(num)[0]\n        phase = cmath.polar(num)[1]\n        print(\"The magnitude of\", num, \"is\", magnitude)\n        print(\"The phase of\", num, \"is\", phase, \"radians.\")\n",
        "test": "assert convert((1+2j)) == (2.23606797749979, 1.10714871779409) ",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1,2,3], 2) == [(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)]",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            prime += 1\n    return prime\n",
        "test": "assert count_Primes_nums(10) == 4 # The first four primes are 2, 3, 5, 7.",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert swap_numbers(1,2) == (2,1) ",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    def newman_williams(p):\n        q, r = 1, 0\n        while r != p:\n            q, r = q + p // q, p % (q + r)\n        return q\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def newman_shanks_prime(k):\n        primes = []\n        i = 1\n        while len(primes) < k:\n            if is_prime(i):\n                primes.append(i)\n            i += 1\n        return primes[-1]\n\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return newman_shanks_prime(n)",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5) ",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # check if L is within the range of the list1\n    if L < 0 or L > len(list1):\n        raise ValueError(\"L must be within the range of the list1\")\n    # split the list into two parts and return a tuple\n    return list1[:L], list1[L:]\n",
        "test": "assert split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5]) # test case 1",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years\n",
        "test": "assert dog_age(2) == 24   # a dog of age 2 should be approximately 24 human years old",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    temp = []\n    for i in range(len(S)):\n        temp.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(temp)\n            temp = []\n    if temp:\n        result.append(temp)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(5) == 150  # check for side length 5",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum\n",
        "test": "assert square_Sum(1) == 1, \"The sum of squares of the first 1 odd natural numbers is 1\"",
        "num_ids": 332,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n-1) + 1",
        "test": "assert find_star_num(1) == 1, \"Error: find_star_num(1) should return 1\"",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97 # Check if 'a' has an ascii value of 97",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0, \"Error: The output for [1, 3, 5, 7] should be 0\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**5\n    return sum\n",
        "test": "assert even_Power_Sum(2) == 9, \"Incorrect result for even_Power_Sum(2)\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list\n",
        "test": "assert rear_extract([(1, 'a'), (2, 'b'), (3, 'c')]) == ['a', 'b', 'c'] ",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = () # create an empty tuple to hold the result\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], ) # subtract each element and add it to the tuple\n    return result_tup # return the result tuple\n",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3,-3,-3) ",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1, \"The sum of even index binomial coefficients should be 1 for n = 1\"",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(2,3) == 125.13303411712, \"Error: volume_cylinder(2,3) should return 125.13303411712 but returned \" + str(volume_cylinder(2,3))",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filter the dictionary d to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}\n",
        "test": "assert dict_filter({'a': 3, 'b': 5, 'c': 2, 'd': 4, 'e': 6}, 4) == {'b': 5, 'd': 4, 'e': 6}",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == test_tup[i]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = (n * (2 * n - 1)) // 2\n    return decagonal\n",
        "test": "assert is_num_decagonal(2) == 4 ",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return (found, index) if found else (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) != len(set(test_list)):\n        return False\n    return True\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3] ",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    # convert the integer to a string\n    num_str = str(n)\n    # create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # loop through each digit in the string\n    for digit in num_str:\n        # if the digit is already in the dictionary, increment its count\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # if the digit is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[digit] = 1\n    # loop through each digit in the dictionary and check if the frequency is less than or equal to the digit\n    for digit in freq_dict:\n        # if the frequency is greater than the digit, return False\n        if freq_dict[digit] > int(digit):\n            return False\n    # if all the frequencies are less than or equal to their corresponding digits, return True\n    return True\n",
        "test": "assert validate(11111) is False # The frequency of each digit is greater than the digit itself in 11111.",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Function to check if all elements in a list are equal to a given element.\n    \"\"\"\n    return all(x == elem for x in lst)\n",
        "test": "assert check_element([1, 2, 3, 4, 5], 1) == False",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    match = re.search('a(bb|bbb)', text)\n    return bool(match)",
        "test": "assert text_match_two_three(\"abbb\") == True # Example 1",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    \n    # Copy the original array a to create the modified array\n    mod_arr = a.copy()\n    \n    # Repeat the modified array k times\n    for i in range(k-1):\n        mod_arr += a\n        \n    # Find the largest sum of a contiguous subarray using Kadane's algorithm\n    max_sum = mod_arr[0]\n    current_sum = mod_arr[0]\n    for i in range(1, len(mod_arr)):\n        current_sum = max(mod_arr[i], current_sum + mod_arr[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 2, 3) == 7 ",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2*n):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_list = [list1[i]]\n        elif len(list1[i]) == max_len:\n            max_list.append(list1[i])\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == 2 # expected output: 3 ",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the list of lists with all False values\n    dp = [[False for j in range(k+1)] for i in range(n+1)]\n    \n    # Fill the first row with True values as there's only one way to paint the first post\n    for j in range(1, k+1):\n        dp[1][j] = True\n    \n    # Fill the first column with False values as there's no way to paint the fence without using any color\n    for i in range(2, n+1):\n        dp[i][0] = False\n        \n    # Fill the remaining cells of the list of lists\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # If the color is the same as the previous post, we can't paint it\n            if j == dp[i-1][j-1]:\n                dp[i][j] = False\n            # If the color is different from the previous post, we can paint it\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    # Return the value in the last cell of the list of lists\n    return dp[n][k]\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(2,3) == 0 # test case 1",
        "num_ids": 211,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Check if the input values are valid\n    if w <= 0 or h <= 0:\n        return None\n\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] # assume first value is maximum\n    \n    for val in listval:\n        if isinstance(val, (int, float)):\n            if val > max_val:\n                max_val = val # update maximum if current value is greater\n        \n    return max_val\n",
        "test": "assert max_val([1,2,3]) == 3, \"Error in max_val\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(1) == 1",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0 # Should return 0",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, [3, 4, [5, 6], 7], 8, [9, [10, 11], 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each state\n    state_freq = defaultdict(int)\n    # Iterate through the list of tuples and update the frequency of each state\n    for item in stdata:\n        state_freq[item[0]] += item[1]\n    # Create a list to store the maximum aggregate for each state\n    max_agg = []\n    # Iterate through the frequency dictionary and calculate the maximum aggregate for each state\n    for state in state_freq:\n        max_agg.append((state, state_freq[state]))\n    # Sort the list by the second element (i.e., the aggregate) in descending order\n    max_agg.sort(key=lambda x: x[1], reverse=True)\n    # Return the maximum aggregate for the first state\n    return max_agg[0][1]\n",
        "test": "assert max_aggregate([(0, 10), (1, 20), (2, 30), (3, 40), (4, 50)]) == 50",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n\n    total = 0\n    for i in range(2**n):\n        # Convert the integer to a binary string with leading zeros\n        binary = format(i, f'0{2*n}b')\n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(int(binary[i]) for i in range(n)) == sum(int(binary[i]) for i in range(-1, -1-n, -1)):\n            # Count the number of sequences with the same sum of the first n bits and the last n bits\n            total += count_binary_seq(n-1)\n\n    return total\n",
        "test": "assert count_binary_seq(1) == 2",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(dict_depth(v), depth)\n        elif isinstance(v, list):\n            for i in v:\n                if isinstance(i, dict):\n                    depth = max(dict_depth(i), depth)\n    return depth + 1\n",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2}}) == 2",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \n    # Find the range of the array after rotation\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            low = ranges[i-1] if i > 0 else 0\n            high = ranges[i]\n            break\n    \n    # Find the rotations that happen before the index\n    rotation_count = sum(rotations[:i])\n    \n    # Find the index of the element after rotation\n    new_index = (index - rotation_count) % len(arr)\n    \n    return arr[new_index]\n",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9], [2,5], [0,0], 3) == 4  # Test Case 1",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return p_words\n",
        "test": "assert start_withp(['python', 'javascript', 'ruby', 'perl', 'java']) == ['python', 'perl'] ",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0] * n\n    dp[index] = a[index]\n    max_sum = a[index]\n\n    for i in range(index+1, n):\n        dp[i] = max(dp[i-1], dp[index] + a[i])\n        max_sum = max(max_sum, dp[i])\n\n    if k > index:\n        for i in range(index+1, k):\n            dp[k] = max(dp[k-1], dp[index] + a[k])\n            max_sum = max(max_sum, dp[k])\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([5, 1, 1, 5], 4, 0, 1) == 10 # Test case 2",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copying the original tuple to avoid modifying the original tuple\n    copy_tuplex = deepcopy(tuplex)\n    \n    # Slicing the copied tuple to get the colon\n    colon_tuplex = copy_tuplex[m-1:n]\n    \n    return colon_tuplex\n",
        "test": "assert colon_tuplex((), 0, 0) == ()  # test for empty tuple",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([-10, -5, 0, 5, 10], [10, 5, 0, -5, -10], 3) == [-50, 50, 0] ",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10, 20) == 20 # check if the function returns the correct value for two numbers",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o') ",
        "num_ids": 283,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    mask = 1\n    while (n & mask) != 0:\n        mask <<= 1\n    return n | mask\n",
        "test": "assert set_left_most_unset_bit(0b
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(1, 3) == 4.1887902047863905 ",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    while 2**highest_power <= n:\n        highest_power += 1\n    return 2**(highest_power-1)\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n",
        "test": "assert add_string(['a', 'b', 'c'], '{} is cool') == ['a is cool', 'b is cool', 'c is cool']",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n",
        "test": "assert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['apple', 'banana', 'cherry']) == {1: {'a': 'apple'}, 2: {'b': 'banana'}, 3: {'c': 'cherry'}}",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        return max(n + get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    \n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12]]) == [6, 7, 8, 9]  # test case 2",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup) != len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True         # test case 1",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character('hello') == 'h' # check with a string that has a non-repeated character",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string.lower())\n    return match is not None\n",
        "test": "assert check_char('a'), \"The function should return True for string 'a'\" ",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "test": "assert median_numbers(5, 3, 1) == 3",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result",
        "test": "assert sum_of_digits(456) == 15, \"Function is not correct for 456\"",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup\n",
        "test": "assert bitwise_xor((1, 1, 0, 1), (1, 0, 1, 0)) == (0, 1, 1, 1)",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        nested_result = []\n        for j in range(len(test_tup1[i])):\n            nested_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(nested_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1,2),(3,4)), ((1,2),(3,4))) == ((2, 4), (6, 8)) ",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a,b):\n    if a <= b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5,7) == 5",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element == tuplex:\n            return True\n    return False\n",
        "test": "assert check_tuplex((1,2,3,4), (2,3,4,5)) == False",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(2) == False, \"Error: Parity of 2 should be even\" ",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the input number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # sort the list of digits in descending order\n    digits.sort(reverse=True)\n    \n    # find the next biggest number by swapping adjacent digits\n    # and adding the swapped digits to the end of the list of digits\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n    \n    # join the digits back into a number and return it\n    return int(''.join(str(d) for d in digits))\n",
        "test": "assert rearrange_bigger(12345) == 54321, \"Incorrect output for 12345\"",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    i = 0\n    j = 0\n    \n    while i < len(nums1) and j < len(nums2) and len(heap) < k:\n        if nums1[i] + nums2[j] < nums1[i] + nums2[0]:\n            heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            j += 1\n        else:\n            i += 1\n            \n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1, 5, 11], [2, 3, 15], 5) == [(1, 2), (1, 3), (1, 15), (5, 2), (5, 3)] ",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    n = len(list1)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,3), (2,4), (5,6), (7,8), (9,10)]) == 24, \"Incorrect output for the given input\"",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            min_val = min(min_val, val)\n    return min_val\n",
        "test": "assert min_val([-1, 2, -3, 4, -5]) == -5, \"Error: The minimum value is incorrect\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), word)",
        "test": "assert snake_to_camel('snake_to_camel') == 'snakeToCamel'",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for tup in list1:\n        if len(tup) >= n:\n            return tup[n-1]\n    return None",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 5  # correct case",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(elem in list1 for elem in list2)\n",
        "test": "assert overlapping([1,2,3], [4,5,6]) == False",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    max_product = arr[0]*arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 ",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Create an empty dictionary to store the first element and its corresponding list of tuples.\n    result = {}\n    \n    # Loop through the list of tuples.\n    for tup in Input:\n        # If the first element of the tuple is not in the dictionary, add it as a key with an empty list as its value.\n        if tup[0] not in result:\n            result[tup[0]] = [tup]\n        # If the first element of the tuple is already in the dictionary, append the tuple to its list of tuples.\n        else:\n            result[tup[0]].append(tup)\n    \n    # Loop through the dictionary and print the common first element and its corresponding list of tuples.\n    for key, value in result.items():\n        print(key, value)\n",
        "test": "assert group_tuples([(\"apple\", 2), (\"banana\", 3), (\"apple\", 5), (\"orange\", 4)]) == {\"apple\": [(\"apple\", 2), (\"apple\", 5)], \"banana\": [(\"banana\", 3)], \"orange\": [(\"orange\", 4)]}  # correct output ",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([]) == None # test if the function returns None when an empty list is passed as argument",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))\n",
        "test": "assert round_and_sum([10.5, 20.25, 30.125]) == 63 # rounding to the nearest integer, 10.5 -> 10, 20.25 -> 20, 30.125 -> 30",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum",
        "test": "assert cube_Sum(2) == 8, \"incorrect result for n=2\"  # 1^3 + 2^3 = 8",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    delimiter = \"_\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]",
        "test": "assert concatenate_tuple(('Hello', 'World', 'Python')) == 'Hello_World_Python'",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n**3\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 442,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # initialize an empty list to store the extracted elements\n    result = []\n    # iterate over the elements in the tuple\n    for element in test_tuple:\n        # extract the rear index element of each string\n        result.append(element[-1])\n    # return the list of extracted elements\n    return result\n",
        "test": "assert extract_rear(('A', 'B', 'C', 'D', 'E')) == ('E', 'E', 'E', 'E', 'E')",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2,3],[4,5],[6,7,8]], 3) == 1 ",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n        if match:\n            year = match.group(1)\n            month = match.group(2)\n            day = match.group(3)\n            new_dt = day + '-' + month + '-' + year\n            return new_dt\n        else:\n            return None\n    except Exception as e:\n        return None\n",
        "test": "assert change_date_format('2022-05-12') == '12-05-2022' # simple test case",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5] ",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i], )\n    return result_tup",
        "test": "assert and_tuples((True, False, True), (False, True, True)) == (False, False, True)",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the vertex of the parabola\n    vertex_x = -b / (2 * a)\n    vertex_y = c / (4 * a)\n    \n    # Calculate the slope of the line that passes through the vertex and the directrix\n    directrix_slope = -1 / (vertex_y - vertex_x)\n    \n    # Calculate the y-intercept of the line that passes through the vertex and the directrix\n    directrix_y_intercept = vertex_x * directrix_slope + vertex_y\n    \n    # Calculate the x-intercept of the directrix\n    directrix_x_intercept = (-directrix_y_intercept / directrix_slope) if directrix_slope != 0 else None\n    \n    # Return the directrix as a tuple of the form (slope, y-intercept)\n    return (directrix_slope, directrix_y_intercept)\n",
        "test": "assert parabola_directrix(-1, -2, -3) == -3/2 # a=-1, b=-2, c=-3, directrix = -b/2a = 2/4 = 1/2 ",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2) / 2) * height",
        "test": "assert median_trapezium(3,7,2) == 4  # base1=3, base2=7, height=2",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3], 4) == True # test case 1",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_one(\"ab\") == \"ab\"",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert n to a string so we can get the last character\n    n_str = str(n)\n\n    # Get the last character of the string\n    last_char = n_str[-1]\n\n    # Convert the last character back to an integer\n    last_digit = int(last_char)\n\n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for num in list1:\n        if num < 0:\n            neg_nos_list.append(num)\n    return neg_nos_list\n",
        "test": "assert neg_nos([1, 2, 3, -4, -5, 6, -7, -8]) == [-4, -5, -7, -8]",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert remove_odd(\"hello\") == \"hlo\" # odd characters 'e' and 'l' should be removed ",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) == (test_list[j], test_list[i]):\n                count += 1\n    return count",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (2, 3), (1, 3), (2, 4)]) == 2  # there are two bidirectional pairs: (1, 3) and (2, 3)",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))\n",
        "test": "assert multiple_to_single([1,2,3,4]) == 1234",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['quickly', 'slowly', 'quick', 'slow']\n    for adverb in adverbs:\n        if adverb in text:\n            match = re.search(r'\\b' + adverb + r'\\b', text)\n            if match:\n                return (adverb, match.start())\n    return None\n",
        "test": "assert find_adverb_position(\"The dog is barking loudly\") == [(4, 'loudly')]",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert surfacearea_cube(3) == 54, \"Error: surfacearea_cube(3) should return 54\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "test": "assert positive_count([1,2,3,4,5]) == 5/5 #all positive",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    if largest_neg == float('-inf'):\n        return None\n    return largest_neg\n",
        "test": "assert largest_neg([1, -2, 3, -1, -5]) == -1 # returns largest negative number in the list ",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Create an empty tuple to store the trimmed tuple\n        trimmed_tup = ()\n        \n        # Loop through each element in the tuple\n        for elem in tup:\n            # If the element is a string, trim it by K characters\n            if isinstance(elem, str):\n                trimmed_elem = elem[:-K]\n            else:\n                # Otherwise, keep the element as is\n                trimmed_elem = elem\n            # Append the trimmed element to the trimmed tuple\n            trimmed_tup += (trimmed_elem,)\n        # Append the trimmed tuple to the trimmed_list\n        trimmed_list.append(trimmed_tup)\n    \n    # Return the trimmed_list\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (11, 12, 13, 14, 15)], 3) == [(1, 2, 4, 5), (6, 7, 9, 10), (11, 12, 14, 15)]",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] * test_tup2[i],)\n    return result_tuple\n",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18) ",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return {k: count[k] for k in lst}",
        "test": "assert count_Occurrence(('a','a','b','b','c','c'), ['a', 'b', 'c']) == {'a': 2, 'b': 2, 'c': 2} ",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
        "test": "assert cube_nums([1,2,3]) == [1,8,27]  # check for single element list",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if isinstance(str, list) and isinstance(l, int):\n        result = []\n        for s in str:\n            if len(s) >= l:\n                result.append(s[:l])\n        return result\n    else:\n        return \"Invalid input. Input should be a list of strings and integer.\"\n",
        "test": "assert extract_string(['cat', 'dog', 'bird'], 2) == ['ca', 'do', 'bi']",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text1)\n",
        "test": "assert remove_whitespaces(\"  Hello, World!  \") == \"Hello,World!\"  # test case 1",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 110) == 0 ",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n / i != i and n / i % 2 == 0:\n                sum += n / i\n    return sum\n",
        "test": "assert sumofFactors(1) == 0 # If the input number is 1, the sum of factors should be 0",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b' # matches a word containing 'z'\n    return re.findall(pattern, text)\n",
        "test": "assert text_match_wordz(\"I have a lot of zuul\") == \"zuul\", \"Should match 'zuul'\"",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True # Check if January has 31 days",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['Hello', 'World', 'Python']) == ['olleH', 'dlroW', 'nohtyP'], \"Incorrect output\" ",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    min_len = len(lst)\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i < min_len:\n                min_len = j-i\n                min_sublist = lst[i:j]\n    return min_sublist\n",
        "test": "assert Find_Min([1, 2, 3, 4, 5, 6]) == 2 # sublist [1, 2]",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5,10) == 50  # Test for a rectangle with length 5 and breadth 10",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_uppercase('HELLO') == ''",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] ",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        combinations += list(itertools.combinations(list1, i))\n    return combinations",
        "test": "assert combinations_list([]) == [] # check if the function returns an empty list when the input list is empty",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    max_sum = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        max_sum = max(max_sum * arr[i], arr[i])\n        \n        if max_product > max_sum:\n            max_sum = max_product\n            \n    return max_sum\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0 # All elements are negative",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    return len(set(d.values())) == 1\n",
        "test": "assert check_value({1: 2, 2: 2, 3: 2}, 2) == True",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for i in range(1, n):\n        dp[i] = max(dp[i-1] * arr[i], arr[i])\n        \n    return max(dp)\n",
        "test": "assert max_product([-10, -10, -5, -2]) == 100",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Convert the tuple to a list so that we can modify it\n    test_list = list(test_tup)\n    # Iterate over the list, adding adjacent elements and storing the result in the same position\n    for i in range(1, len(test_list)):\n        test_list[i] = test_list[i] + test_list[i-1]\n    # Convert the list back to a tuple and return it\n    return tuple(test_list)\n",
        "test": "assert add_pairwise((5, 3, 8, 9, 2)) == (8, 10, 17, 11)",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 10) == 10 ",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    return tuple(intersection_set)\n",
        "test": "assert tuple_intersection( (1, 2, 3), (3, 4, 5) ) == (3,) ",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char(\"hello\", \"l\", \"L\") == \"heLLo\", \"Incorrect output\"",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({\"a\": 3, \"b\": 1, \"c\": 2}) == {\"c\": 2, \"a\": 3, \"b\": 1}  # sorted by value in ascending order",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    min_num = float('inf')\n    max_num = float('-inf')\n    \n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    \n    return max_num + min_num\n",
        "test": "assert big_sum([-5, 0, 2, 3, 4]) == 4, \"Incorrect sum\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 205,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase(\"\") == \"\" # Test case 2",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    \n    while n >= 10:\n        n = n // 10\n    \n    return n\n",
        "test": "assert first_Digit(12345) == 1  # Test case for the first digit of the number 12345",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_lst.append(num)\n    return odd_lst\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]  # Test 1",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 1 - 1 # for n=1",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j])%2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 5) == 0 ",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()\n",
        "test": "assert toggle_string(\"Hello\") == \"hELLO\"  # check if the function toggles the case correctly for uppercase letters",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    if n1 == n2:\n        return 0\n\n    # Get the length of the largest number\n    max_len = max(len(str(n1)), len(str(n2)))\n\n    # Convert the numbers to strings with leading zeros to match length\n    s1 = str(n1).zfill(max_len)\n    s2 = str(n2).zfill(max_len)\n\n    # Calculate the digit difference\n    diff = sum([abs(int(s1[i]) - int(s2[i])) for i in range(max_len)])\n\n    return diff\n",
        "test": "assert digit_distance_nums(100, 100) == 0 # Expected output: 0",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 8) == 18 ",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() function to find the union of two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Sorting the union set in ascending order and returning it\n    return tuple(sorted(union_set))\n",
        "test": "assert union_elements((1,2,3),(4,5,6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3], [4,5,6], [7,8,9]]) == 3  # longest sublist is [1,2,3] ",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"(.+?)\\\"', text) # Find all strings between quotes\n    return values\n",
        "test": "assert extract_values('This is a \"test\" string') == ['test']",
        "num_ids": 338,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4], 4) == 6",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o'] ",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total_sum = 0\n    \n    while n > 0:\n        total_sum += n % 10\n        n //= 10\n    \n    return total_sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "test": "assert empty_list(0) == []",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['cat', 'dog', 'bird'], ['apple', 'banana', 'orange'], ['hello', 'world', 'python']]) == [['apple', 'bird', 'cat'], ['banana', 'dog', 'orange'], ['hello', 'python', 'world']]",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return sorted(list(unique_nums))[:2]\n",
        "test": "assert two_unique_nums([1,2,3,4,4]) == [1,2,3,4]",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set to store the unique numbers\n    unique_set = set(list_data)\n    # create a list to store the unique numbers\n    unique_list = list(unique_set)\n    # initialize the product variable to 1\n    product = 1\n    # iterate over the unique numbers and multiply them to the product variable\n    for num in unique_list:\n        product *= num\n    # return the product\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    This function takes in the radius and height of a cylinder and returns its surface area.\n    '''\n    import math\n\n    # Calculate the surface area using the formula 2\u03c0rh + 2\u03c0r^2\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(4, 7) == 826.199504572463  # radius: 4, height: 7",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if B is a sublist of A, else False.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            if A[i:i+len(B)] == B:\n                return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [2,3,4]) == True",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(str(factorial)[-1])\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3) or len(list3) != len(list1):\n        raise ValueError('All input lists must be of the same length.')\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n",
        "test": "assert interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar.append(j)\n    return dissimilar\n",
        "test": "assert find_dissimilar((1,2,3), (4,5,6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a new empty tuple to hold the even elements\n    new_tuple = ()\n    \n    # Iterate over each element in the test_tuple\n    for item in test_tuple:\n        \n        # If the item is an integer, check if it is even using the even_fnc function\n        if isinstance(item, int):\n            if even_fnc(item):\n                new_tuple += (item,)\n        \n        # If the item is a tuple, recursively call even_ele() on that tuple and add the result to the new_tuple\n        elif isinstance(item, tuple):\n            new_tuple += (even_ele(item, even_fnc),)\n    \n    return new_tuple\n",
        "test": "assert even_ele(((1,2,3), (4,5,6)), lambda x: x % 2 == 0) == ((2,), (4, 6)) ",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area using the formula: surface area = 2 * (base edge * height) + (2 * base edge * 2 * slant height)\n    surface_area = 2 * (b * s) + (2 * b * 2 * (b / 2))\n    \n    # Return the calculated surface area\n    return surface_area\n",
        "test": "assert surface_Area(b=3, s=6) == 54, \"surface_Area not working properly with b=3, s=6\"",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True  # Test if an empty dictionary is empty",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (2*(2*num-1)*catalan_number(num-1))//(num+1)\n\nprint(catalan_number(5)) # Output: 42\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b(\\w+ly)\\b'\n    adverbs = re.findall(adverb_pattern, text)\n    if not adverbs:\n        print(\"No adverbs found.\")\n        return None\n    first_adverb = adverbs[0]\n    positions = [m.start() for m in re.finditer(r'\\b' + re.escape(first_adverb) + r'\\b', text)]\n    return first_adverb, positions",
        "test": "assert find_adverbs(\"The cat chased the mouse.\") == None",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Using a heap to store the n most expensive items\n    heap = []\n    \n    # Adding all the items to the heap and maintaining the heap property\n    for item in items:\n        heapq.heappush(heap, item)\n        \n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n            \n    # Reversing the heap and returning the n most expensive items\n    return heap[::-1]\n",
        "test": "assert expensive_items([(1, 'A'), (2, 'B'), (3, 'C'), (4, 'D'), (5, 'E')], 2) == [(5, 'E'), (4, 'D')]",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        new_list = first_part + second_part\n        return new_list\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) # test with a list",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num - min_num\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17 ",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            squares.append(num)\n    return squares",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)",
        "test": "assert polar_rect(1, 0) == (1, 0), \"Error in converting (1, 0) to rectangular coordinates\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]  # swapping first and last elements",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\ndef sum_product_consecutive_binomial_coefficients(n):\n    sum = 0\n    for k in range(1, n+1):\n        sum += binomial_Coeff(n, k) * binomial_Coeff(n, k+1)\n    return sum",
        "test": "assert binomial_Coeff(5, 2) == 10",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Using regular expression to match the ip address pattern\n    ip_pattern = re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$')\n    \n    # Checking if the input ip address matches the pattern\n    if ip_pattern.match(ip):\n        # Removing leading zeroes from each octet\n        ip_octets = ip.split('.')\n        for i in range(len(ip_octets)):\n            ip_octets[i] = str(int(ip_octets[i]))\n        # Joining the octets with '.' to form the new ip address\n        new_ip = '.'.join(ip_octets)\n        return new_ip\n    else:\n        return None\n",
        "test": "assert removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num == None:\n                even_num = num\n            else:\n                return abs(even_num - num)\n        else:\n            if odd_num == None:\n                odd_num = num\n            else:\n                return abs(odd_num - num)\n    return None\n",
        "test": "assert diff_even_odd([1,2,3,4,5,6]) == 2",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one string to the other.\n    \"\"\"\n    # Convert the strings to lists of integers\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n    \n    # Initialize variables to keep track of the number of swaps and the index of the last swap\n    swaps = 0\n    last_swap = -1\n    \n    # Loop through the two lists, comparing elements\n    for i in range(len(lst1)):\n        # If the elements are different, count a swap\n        if lst1[i] != lst2[i]:\n            # If we haven't already swapped this digit, we can swap it with the next element in the list\n            if i != last_swap:\n                lst1[i], lst1[i+1] = lst1[i+1], lst1[i]\n                last_swap = i\n                swaps += 1\n            # If we have already swapped this digit, we cannot swap it with the next element\n            else:\n                return None  # Infeasible swap\n    \n    return swaps  # Return the number of swaps needed to convert str1 to str2\n",
        "test": "assert min_Swaps(\"1010\",\"1010\") == 0",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, 2, 3)) == 24 ",
        "num_ids": 247,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # If either arr1 or arr2 is empty, return None\n    if not arr1 or not arr2:\n        return None\n\n    # If k is greater than the sum of the lengths of both arrays, return None\n    if k > len(arr1) + len(arr2):\n        return None\n\n    # If k is less than or equal to the length of arr1, return the kth element of arr1\n    if k <= len(arr1):\n        return arr1[k-1]\n\n    # If k is greater than the length of arr1, find the kth element from arr2\n    # and return the difference between the total length of both arrays and k\n    return arr2[k - len(arr1) - 1]",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 1) == 1 # check if find_kth([1, 3, 5, 7], [2, 4, 6, 8], 1) returns 1",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Get the number of digits of the number\n    num_digits = len(str(number))\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum(int(digit)**num_digits for digit in str(number))\n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True, \"153 is an Armstrong number\"",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return (sum, avg)\n",
        "test": "assert sum_average(5) == (15, 3), \"The sum of first 5 numbers and their average are incorrect.\"",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True, \"Function is_Even should return True for even numbers\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        char_dict[char] = True\n    return None\n",
        "test": "assert first_repeated_char(\"hello world\") == \"l\"",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    # Initialize an empty list to store the lucid numbers\n    ludic = []\n    \n    # Loop through all numbers less than or equal to the given integer\n    for i in range(1, n+1):\n        \n        # Check if the sum of the digits of the number is equal to the number\n        if sum(int(digit) for digit in str(i)) == i:\n            \n            # Add the lucid number to the list\n            ludic.append(i)\n    \n    # Return the list of lucid numbers\n    return ludic\n",
        "test": "assert get_ludic(20) == [1, 2, 3, 4, 5, 7, 8, 9, 11, 13, 14, 15, 17, 19]",
        "num_ids": 1891,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the list\n    words.reverse()\n    # Join the list of words back into a string\n    return ' '.join(words)\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\" ",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2), \"2 is a prime number\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(180) == math.pi, \"Error in radian_degree function\"",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', r'fox.*dog') == ('fox jumps over the lazy dog.', 19, 46) ",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    # Create a list to store the bell numbers\n    bell = [1]\n    # Compute the first n bell numbers\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[i-j-1] * (j+1)\n    # Return the nth bell number\n    return bell[n]\n",
        "test": "assert bell_Number(0) == 1, \"bell_Number(0) should be 1\"",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Remove the k'th element from the list\n    del list1[L - 1]\n    # Return the modified list\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5] ",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Get the length of the list\n    length = len(test_list)\n    # Initialize a variable to store the max value\n    max_val = test_list[0][N]\n    # Loop through the list and compare each value with the max value\n    for i in range(length):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    # Return the max value\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6]], 1) == 5 ",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]] ",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total\n",
        "test": "assert cummulative_sum([10, 20, 30, 40, 50]) == [10, 30, 60, 100, 150]",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        averages.append(avg)\n    return averages\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0] # example input and output",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n",
        "test": "assert tuple_modulo((-1, 0, 1), (2, 4, -3)) == (1, 0, -2) ",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0:\n        return 0\n    elif d == 0:\n        return steps\n    else:\n        return min_Jumps(steps - 1, max(0, d - steps)) + 1\n",
        "test": "assert min_Jumps(2, 2) == 2 #steps = 2, d = 2, jump = 0",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3], [2,4,6]) == [0.5, 0.5, 0.5]",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    num_str = \"\"\n    other_str = \"\"\n    \n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            other_str += i\n    \n    return other_str + num_str\n",
        "test": "assert move_num(\"\") == \"\"  # test case 2",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def largest_subset(a):\n    a.sort(reverse=True)\n    max_size = 0\n    subset = set()\n    for i in range(len(a)):\n        if i == 0 or a[i] % a[i-1] == 0:\n            subset.add(a[i])\n        else:\n            subset = set()\n        max_size = max(max_size, len(subset))\n    return max_size\n",
        "test": "assert largest_subset([15, 20, 12, 8, 30]) == 5 ",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    i, j, k = 0, 0, 0\n    while k < n:\n        i = max(0, k - (n + 1) // 2)\n        j = min(n - 1, k)\n        if arr1[i] > arr2[j]:\n            k = k - 1\n        elif arr1[j] < arr2[i]:\n            k = k + 1\n        else:\n            return arr1[k]\n    \n    if k == 0:\n        return (arr1[i] + arr2[j]) / 2\n    else:\n        return arr1[k-1]\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [6, 7, 8, 9], 4) == 4.5  # Check if the function returns the correct median when the two lists have different sizes and are sorted. ",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1, 4, 9, 16, 25]",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == False",
        "num_ids": 183,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]  # example list with 5 elements",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Compute the length of the chord of the semicircle\n    c = 2 * r * math.sin(math.pi / 3)\n    # Compute the length of the altitude from the center of the circle\n    h = math.sqrt(3) * r / 2\n    # Compute the area of the largest triangle\n    area = 0.5 * c * h\n    return area\n",
        "test": "assert triangle_area(2) == 1.3201112622533782  # correct value ",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] != i + 1:\n            if array[i] < 1 or array[i] > end:\n                return i + 1\n            else:\n                return find_First_Missing(array, i + 1, end)\n    \n    return end + 1\n",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,10]) == 9 # correct function call",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 259,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6] ",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row = ele[0]\n    col = ele[1]\n    sub = [(row-1,col), (row,col-1), (row,col+1), (row+1,col)]\n    return sub\n",
        "test": "assert adjac((1,1)) == [(2,1),(1,2),(2,2)]",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_', ' ')\n    else:\n        return text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create an empty list to hold non-zero values\n    non_zero = []\n    # loop through the input list and append non-zero values to the new list\n    for num in num_list:\n        if num != 0:\n            non_zero.append(num)\n    # append the zeroes to the end of the new list\n    non_zero += [0] * (len(num_list) - len(non_zero))\n    # return the new list\n    return non_zero\n",
        "test": "assert move_zero([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum += arr[i]^arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([1,3,5,7,9], 5) == 20 ",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list\n",
        "test": "assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] # ascending order",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) # True",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert velocity to mph\n    v_mph = v * 0.621371\n\n    # calculate wind chill\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * math.pow(v_mph, 0.16) + 0.3965 * t * math.pow(v_mph, 0.16)\n\n    # round wind chill to nearest integer\n    wind_chill_rounded = round(wind_chill)\n\n    return wind_chill_rounded\n",
        "test": "assert wind_chill(20, -25) == 19  # example usage for wind_chill function",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['John', 'Mary', 'john']) == 8, \"The function should return the sum of the lengths of the names in the list after removing the names that start with a lowercase letter.\"",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n",
        "test": "assert remove_parenthesis(\"()\") == \"\"",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = (4*n**2 - 1)/3\n    return int(nonagonal_number)\n",
        "test": "assert is_nonagonal(1) == 1  # The 1st nonagonal number is 1.",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\bz\\b')\n    return bool(pattern.search(text))\n",
        "test": "assert text_match_wordz_middle(\"hello\") == False",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        k = len(input)\n    \n    for i in range(k//2):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n        \n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 3) == [3,2,1,4,5]",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple.\n    The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 4}) == (1, 2, 3, {\"a\": 4}) ",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n    return dp[-1][-1] / (n**2-n)\n",
        "test": "assert maxAverageOfPath([[5, 2, 3], [4, 1, 2], [3, 2, 1]]) == 2.3333333333333333",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students\n",
        "test": "assert filter_data({'Alice':(1.8, 60), 'Bob':(1.7, 55), 'Charlie':(1.8, 65)}, 1.75, 55) == {'Alice':(1.8, 60), 'Charlie':(1.8, 65)}, \"The function should filter students with height above 1.75 and weight above 55.\" ",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Initialize a counter for the number of matching pairs\n    count = 0\n    \n    # Loop over the indices of nums1\n    for i in range(len(nums1)):\n        # Check if the values at the current indices match\n        if eq(nums1[i], nums2[i]):\n            # Increment the counter if they do\n            count += 1\n    \n    return count\n",
        "test": "assert count_same_pair([1,2,3,4], [1,2,3,4]) == 4",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base) # Convert base to string\n    result = 0 # Initialize the result variable to 0\n    \n    # Loop through each digit of the base to the specified power\n    for i in range(power):\n        for digit in base:\n            result += int(digit) # Add the value of each digit to the result variable\n            \n    return result # Return the final result\n",
        "test": "assert power_base_sum(2, 3) == 6, \"Incorrect sum of digits for base=2, power=3\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    match = pattern.findall(text1)\n    return match",
        "test": "assert extract_quotation('\"Hello World\"') == 'Hello World' ",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = tuple(test_tup[i]*test_tup[i+1] for i in range(N))\n    return result\n",
        "test": "assert multiply_elements((-2,5,0)) == (-10,0)  # test case 2",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(k)\n    return result\n",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the slant height of the cone\n    slant_height = h * (2/3)\n    # Calculate the lateral surface area using the formula\n    lateral_surface_area = math.pi * r * math.sqrt(slant_height**2 + r**2)\n    # Return the lateral surface area\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(4,7) == 82.9136227864091",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[ ,.]')\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar(\"This is a test. I hope it works.\") == \"This is a test: I hope it works:\"",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return first_occurrence\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2, \"The index of the first occurrence of 3 in [1, 2, 3, 4, 5] should be 2\"",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            prod = 1\n            for num in sub_arr:\n                prod *= num\n            total_sum += prod\n    return total_sum\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Convert the given number to binary and remove the leading and trailing zeros.\n    binary_n = bin(n)[2:]\n    \n    # Check if the number of bits is odd or even.\n    if len(binary_n) % 2 == 0:\n        # If the number of bits is even, toggle the middle two bits.\n        middle_bits = int(binary_n[1:3], 2)\n        middle_bits = ~middle_bits & 3\n        binary_n = binary_n[:1] + bin(middle_bits)[2:] + binary_n[3:]\n    else:\n        # If the number of bits is odd, toggle the middle bit.\n        middle_bits = int(binary_n[1:2], 2)\n        middle_bits = ~middle_bits & 1\n        binary_n = binary_n[:1] + bin(middle_bits)[2:] + binary_n[2:]\n    \n    # Convert the modified binary number back to decimal and return it.\n    return int(binary_n, 2)\n",
        "test": "assert set_middle_bits(7) == 5",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 6) == 5",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('Apple') == True # because 'Apple' starts with 'A' which is a vowel",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1 # test case for n = 1",
        "num_ids": 233,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    i = 1\n    count = 0\n    \n    # Loop until we find a triangular number with n digits\n    while count < n:\n        i += 1\n        triangular_number = i * (i + 1) // 2\n        count = len(str(triangular_number))\n    \n    # Return the index of the smallest triangular number with n digits\n    return i - 1\n",
        "test": "assert find_Index(1) == 1  # smallest triangular number with 1 digit is 1",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result",
        "test": "assert tuple_to_dict((1,2,3,4,5)) == {1:2, 3:4, 5:None}  # example input and expected output",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"aaa\") == True, \"Error in all_Characters_Same() for string 'aaa'\"",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    s = (side * 2) / math.sqrt(3)\n    \n    # Calculate the area\n    area = math.sqrt(s * (s - side) * (s - side) * (s - side))\n    \n    return area\n",
        "test": "assert area_tetrahedron(3) == 24.0  # test case 2",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates a given list by m elements to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst = lst[-m:] + lst[:-m]\n    return lst\n",
        "test": "assert rotate_right([1,2,3,4,5], 2) == [4,5,1,2,3] ",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "test": "assert check_none(()) == False # empty tuple",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. \n    '''\n\n    divisible_numbers = []\n\n    for num in range(startnum, endnum+1):\n        digit_set = set([int(digit) for digit in str(num)])\n        if all(num % digit == 0 for digit in digit_set):\n            divisible_numbers.append(num)\n\n    return divisible_numbers ",
        "test": "assert divisible_by_digits(123, 456) == False # 123 and 456 are not divisible by 6",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return round(r**2 * (a/360), 2)",
        "test": "assert sector_area(10,180) == 157.4822",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    \n    # Initialize the three-dimensional array to store the lengths of the LCS\n    lcs = [[[0 for k in range(len(Z)+1)] for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    \n    # Fill in the array using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    \n    # Extract the LCS from the array\n    result = \"\"\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            result = X[i-1] + result\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k] and lcs[i-1][j][k] > lcs[i][j][k-1]:\n            i -= 1\n        elif lcs[i][j-1][k] > lcs[i-1][j][k] and lcs[i][j-1][k] > lcs[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return result[::-1]\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GTXAYB\") == \"GTAB\" ",
        "num_ids": 2311,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # use regular expression to find all words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # join words with spaces and return the result\n    return ' '.join(words)\n",
        "test": "assert capital_words_spaces(\"thisIsAnotherString\") == \"this Is Another String\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2)], (3, 4)) == [(1, 2), (3, 4)], \"The function should add the given tuple to the given list.\"",
        "num_ids": 358,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest != i:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True",
        "test": "assert check_min_heap_helper([], 0) == True",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1) - jacobsthal_num(n-2))\n",
        "test": "assert jacobsthal_num(0) == 0 # jacobsthal_num(0) should be 0",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1,2,3], [2,3,4], [2,3,5]) != [2,4] # common elements are not [2,4]",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n",
        "test": "assert second_smallest([5, 4, 3, 2, 1]) == 3",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"abbb\") == True",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Initialize a variable to count the number of pairs of reverse strings\n    count = 0\n\n    # Loop through the list of strings\n    for i in range(len(test_list)):\n        # Loop through the list of strings starting from the current index + 1\n        for j in range(i + 1, len(test_list)):\n            # Check if the current string and the next string are reverse of each other\n            if test_list[i][::-1] == test_list[j]:\n                # Increment the count\n                count += 1\n\n    # Return the count of reverse pairs\n    return count\n",
        "test": "assert count_reverse_pairs([\"abc\", \"cba\", \"def\", \"fed\"]) == 2",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function counts the number of times each list appears in the given list.\n    \"\"\"\n    count_dict = {}\n    for sublist in lst:\n        # Converting list to tuple to make it hashable\n        tup_sublist = tuple(sublist)\n        # Checking if tuple already exists in count_dict\n        if tup_sublist in count_dict:\n            count_dict[tup_sublist] += 1\n        else:\n            count_dict[tup_sublist] = 1\n    return count_dict\n",
        "test": "assert unique_sublists([[1,2,3],[4,5,6],[1,2,3]]) == {(1, 2, 3): 2, (4, 5, 6): 1} ",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into integer and fractional parts\n    parts = num.split('.')\n    \n    # Check if there is exactly one dot\n    if len(parts) != 2:\n        return False\n    \n    # Check if the integer part is a valid integer\n    if not parts[0].isdigit():\n        return False\n    \n    # Check if the fractional part is a valid decimal with a precision of 2\n    if not (parts[1].isdigit() and len(parts[1]) <= 2):\n        return False\n    \n    # If all checks pass, return True\n    return True\n",
        "test": "assert is_decimal('3.14159') == False, 'Error in is_decimal'",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    if len(arr) == 1:\n        return True\n    elif len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumber_number(1) == True # January has 31 days",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 3, 15, 11, 6, 45, 2], 7) == 1 ",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"abc123def\") == 3  # the function should return 3 because there are 3 digits in the string \"abc123def\"",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_polite(n):\n    def factors(num):\n        flist = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if i != num // i:\n                    flist.append(i)\n                    flist.append(num // i)\n                else:\n                    flist.append(i)\n        return flist\n\n    polite_num = 1\n    count = 0\n    while count < n:\n        polite_num += 1\n        flist = factors(polite_num)\n        if len(set(flist)) == len(flist):\n            count += 1\n    return polite_num\n",
        "test": "assert is_polite(1) == 2  # 2 is the first polite number. ",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1,2,3]) == [(1,2), (2,3)]",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def get_pairs_count(arr, target_sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1,2,3,4,5], 6) == 2, \"Error: Incorrect count of pairs with sum 6\"",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "test": "assert Diff([1,2,3],[1,2]) == [3] ",
        "num_ids": 343,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of each odd number to the sum\n        sum += i**4\n    \n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"Test case 1 failed\"",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if char != ')':\n                    return False\n            if current_char == '[':\n                if char != ']':\n                    return False\n            if current_char == '{':\n                if char != '}':\n                    return False\n    if stack:\n        return False\n    return True\n",
        "test": "assert check_expression('(a+b)*(c+d)') == True",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"The quick brown fox jumps over the lazy dog\", 3) == \"quick jumps lazy\" ",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result or None\n",
        "test": "assert occurance_substring(\"This is a test string\", \"a\") == [(10, \"a\")]",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([2, 4, 6, 8]) == False # Example input 2",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"python\") == 2, \"Testing the function with string 'python'\" ",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if arr.count(element) == 1:\n            unique_elements.append(element)\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n    \n    # loop through every element in the original list\n    for element in list1:\n        # if the element is a list, add it to the dictionary as a tuple\n        if isinstance(element, list):\n            sublist_tuple = tuple(element)\n            if sublist_tuple in sublist_count:\n                sublist_count[sublist_tuple] += 1\n            else:\n                sublist_count[sublist_tuple] = 1\n    \n    # return the dictionary of unique sublists and their counts\n    return sublist_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    total_sum = sum(test_list)\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == total_sum:\n                result.append(comb)\n    return result",
        "test": "assert find_combinations([(1,2,3), (4,5,6)]) == [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count",
        "test": "assert count_divisors(1) == 1, \"count_divisors(1) should be 1\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            odd_sum += sum(arr[i:j+1:2])\n    return odd_sum\n",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5]) == 12",
        "num_ids": 415,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    # Convert RGB to HSL first\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    hue = 0\n\n    if delta != 0:\n        if cmax == r:\n            hue = ((g - b) / delta) % 6\n        elif cmax == g:\n            hue = (b - r) / delta + 2\n        else:\n            hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n\n    lightness = (cmax + cmin) / 2\n    saturation = 0 if delta == 0 else delta / (1 - abs(2 * lightness - 1))\n\n    # Convert HSL to HSV\n    h, s, l = hue, saturation * 100, lightness * 100\n\n    return h, s, l\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    # Initialize the variables to hold the product of even and odd numbers\n    even_product = 1\n    odd_product = 1\n    \n    # Traverse through the list and multiply even and odd numbers\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_product *= list1[i]\n        else:\n            odd_product *= list1[i]\n            \n    return even_product * odd_product\n",
        "test": "assert mul_even_odd([-1, 2, 3, 4, 5, 6]) == 0  # 1 and -1 are both odd numbers, no even numbers",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \" \").split()\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b.*b.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") == True",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    # Convert the string to a list of characters\n    chars = list(test_str)\n    # Create a new list by concatenating the input list and the list of characters\n    new_list = test_list + chars\n    # Create a tuple from the new list\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, 'h', 'e', 'l', 'l', 'o')",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert even_position([2,4,6,8,10]) == True, \"Testing even_position([2,4,6,8,10])\"",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                new_list.append(subitem)\n        else:\n            new_list.append(item)\n    return tuple(new_list)\n",
        "test": "assert remove_nested(()) == ()  # empty tuple",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    last_index = -1\n    \n    for i in range(n):\n        if arr[i] == x:\n            last_index = i\n            \n    return last_index\n",
        "test": "assert last([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 5 # check if it returns 5 for a sorted array, 4 as the element and the last position",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"\n",
        "test": "assert text_starta_endb(\"ab\") == \"ab\" ",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n",
        "test": "assert return_sum({1:10, 2:20, 3:30}) == 60",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n",
        "test": "assert sum_odd(5) == 9, \"sum_odd(5) should return 9\"",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert _sum([1,2,3,4,5]) == 15  # test for a list of numbers",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to a binary string\n    binary = bin(n)[2:].zfill(32)\n    # Left rotate the binary string by d bits\n    rotated_binary = binary[d:] + binary[:d]\n    # Convert the rotated binary string back to an integer\n    rotated_number = int(rotated_binary, 2)\n    return rotated_number\n",
        "test": "assert left_rotate(0b1010,3) == 0b0101 # test for left rotation of 1 bit",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regex to find all whitespaces and replace them with empty string\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\" ",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    \n    if n == 1 or arr[0] < arr[n-1]:\n        return 0\n    \n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            return i\n    \n    return 0\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        i = 1\n        while i * i <= n:\n            if i * i == n:\n                return True\n            i += 1\n        return False\n",
        "test": "assert is_perfect_square(1) == True  # check for 1, which is a perfect square",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 8]) == True   # even * even * even = even",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    result = []\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = i\n    return result\n",
        "test": "assert max_sum_list([[1,2,3],[2,3,4],[3,4,5]]) == [3, 4, 5] # the list with the highest sum is [3, 4, 5] ",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase(\"ABCD\") == 4  # Test case 2",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((1, 2, 3), 3) == True, \"Error: check_K() function not working for tuples with k\"",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == False",
        "num_ids": 479,
        "indeed": true
    }
]