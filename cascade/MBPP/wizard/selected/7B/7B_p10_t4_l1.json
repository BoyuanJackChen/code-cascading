[
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert similar_elements((\"apple\", \"banana\", \"cherry\"), (\"banana\", \"cherry\", \"grape\")) == [\"banana\", \"cherry\"]",
        "num_ids": 2060,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False\n",
        "test": "assert is_not_prime(3) == False ",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 1) == [5]",
        "num_ids": 3000,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 == 1:\n            return False\n        x //= 2\n    return True\n",
        "test": "assert is_Power_Of_Two(5) == False",
        "num_ids": 1653,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long('The quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert square_nums([1,2,3,4]) == [1, 4, 9, 16]",
        "num_ids": 1510,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        s = str[n-1] + str\n        for i in range(n-1, 0, -1):\n            if s[i] != str[i]:\n                return i+1\n        return 0",
        "test": "assert find_Rotations(\"a\") == 0",
        "num_ids": 1872,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '', 1)\n    s = s.replace(ch, '', -1)\n    return s\n",
        "test": "assert remove_Occ(\"abc\", \"d\") == \"abc\"",
        "num_ids": 2300,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # sort the rows by their sums in ascending order\n    sorted_rows = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    # reorder the rows of the matrix according to the sorted row indices\n    sorted_matrix = [M[i] for i in sorted_rows]\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3770,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    return 0.5 * l * b * h\n",
        "test": "assert find_Volume(2,4,5) == 20, \"Incorrect Volume\"",
        "num_ids": 1531,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"HELLO_WORLD\") == False",
        "num_ids": 1678,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "test": "assert square_perimeter(5) == 20 # the perimeter of a square with side length 5 is 20",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Remove characters from string1 which are present in string2.\n    '''\n    freq = [0] * NO_OF_CHARS\n    for char in string2:\n        freq[ord(char)] = 1\n    result = ''\n    for char in string1:\n        if freq[ord(char)] == 0:\n            result += char\n    return result\n\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\nresult = str_to_list(string1, string2)\nprint(\"The resultant string is: \", result)\n",
        "test": "assert str_to_list(\"abracadabra\") == [\"a\", \"b\", \"r\", \"c\", \"d\", \"a\", \"b\", \"r\", \"a\"]",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False, \"Error in test_duplicate with non-duplicate input\"",
        "num_ids": 2071,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Convert the number into a string and reverse it\n    x_str = str(x)[::-1]\n    \n    # Check if all digits are same\n    return all(x_str[i] == x_str[0] for i in range(len(x_str)))\n",
        "test": "assert is_woodall(12345) == False",
        "num_ids": 2065,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if (num + 1) * 2 == rev_num:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False",
        "num_ids": 1957,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 25,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # initialize variables to keep track of the number and the digit index\n    num = 0\n    i = 0\n    \n    # iterate through the array\n    while i < len(arr):\n        # get the maximum number that can be formed with the remaining digits\n        max_num = int(str(num) + str(arr[i]))\n        \n        # if the maximum number is greater than the current number, update the number\n        if max_num > num:\n            num = max_num\n            \n        # increment the digit index\n        i += 1\n    \n    # return the largest number\n    return num\n",
        "test": "assert find_Max_Num([0,0,0]) == 0  # check if it can handle a list of 3 zeros",
        "num_ids": 2959,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(-5, 3) == True",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i < n:\n        i += 1\n        i += 2\n    return i\n",
        "test": "assert is_octagonal(1) == True #first octagonal number is 1",
        "num_ids": 1440,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            count[sum(int(d) for d in s[i:j+1])] += 1\n    return sum(count[i] * (count[i] - 1) // 2 for i in range(1, n+1))",
        "test": "assert count_Substrings(\"12345\") == 2, \"Function should return 2 for input '12345'\"",
        "num_ids": 3548,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None # empty list\n    \n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1637,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1]) == 0",
        "num_ids": 2788,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list based on the second value of each tuple\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n",
        "test": "assert subject_marks([(1, 80), (2, 75), (3, 90)]) == [(1, 80), (2, 75), (3, 90)]  # Test if the function sorts the list of tuples in ascending order based on the second value of each tuple. ",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n",
        "test": "assert recursive_list_sum([]) == 0  # empty list returns 0",
        "num_ids": 2048,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1,2,3,4,5]) == 5",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def bell(n):\n        \"\"\"\n        Helper function to calculate the Bell number.\n        \"\"\"\n        bell_num = 1\n        for i in range(1, n + 1):\n            bell_num *= i\n            bell_num //= math.factorial(i)\n        return bell_num\n\n    bell_num = bell(n)\n    ways = 1\n    for i in range(n):\n        ways *= bell(n - i) * bell_num\n        ways //= bell(i)\n        bell_num *= n - i\n        bell_num //= i + 1\n    return ways\n",
        "test": "assert bell_number(0) == 1 # Test case for n = 0",
        "num_ids": 2276,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            increasing = False\n        elif A[i] < A[i - 1]:\n            decreasing = False\n\n        if not increasing and not decreasing:\n            return False\n\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5, 4]) == False",
        "num_ids": 2318,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Convert the sublist to a set for faster lookup\n    s_set = set(s)\n    \n    # Iterate over the list and check if the current sublist matches the given sublist\n    for i in range(len(l)):\n        sublist = l[i:i+len(s)]\n        if set(sublist) == s_set:\n            return True\n    \n    # If we reach here, the sublist was not found\n    return False\n",
        "test": "assert is_sublist([1,2,3,4,5], [6,7,8]) == False",
        "num_ids": 2100,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i]) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple(()) == True # empty tuple",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums\n",
        "test": "assert comb_sort([1]) == [1]  # check if the function sorts a list with only one element",
        "num_ids": 3264,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    \n    # Check if n is a perfect square\n    if int(n**0.5)**2 == n:\n        return True\n    \n    # Check if (n-x) is a perfect square, where x is any integer\n    for i in range(int(n**0.5)+1):\n        if int((n-i)**0.5)**2 == n-i:\n            return True\n    \n    # If none of the above conditions are satisfied, then n cannot be represented as the difference of two squares\n    return False\n",
        "test": "assert dif_Square(3) == False",
        "num_ids": 2380,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"yellow\"], [\"circle\", \"square\", \"triangle\", \"rectangle\"]) == False",
        "num_ids": 2869,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 3) == []",
        "num_ids": 3096,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(44) == True, \"Error: is_Diff(44) should return True\"",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"apple\") # should return False",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    V = (4/3) * math.pi * r**3\n    return V",
        "test": "assert volume_sphere(2) == 33.510321638291123 or volume_sphere(2) == 33.510321638291125 or volume_sphere(2) == 33.510321638291126 or volume_sphere(2) == 33.510321638291127 or volume_sphere(2) == 33.510321638291128 # check if the function returns a correct value for radius 2 ",
        "num_ids": 1923,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum(ord(c) for c in strr) % 26\n    return chr(ascii_sum + ord('a'))\n",
        "test": "assert get_Char(\"jkl\") == \"j\", \"Incorrect output for get_Char('jkl')\"",
        "num_ids": 1960,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(2, n+1):\n            a, b, c = b, c, a+b\n        return c\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1619,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    \n    # Return the surface area\n    return surface_area\n",
        "test": "assert surfacearea_sphere(1) == 4*math.pi ",
        "num_ids": 1849,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2*n - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"First centered hexagonal number is 1\"",
        "num_ids": 1807,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 230,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 2499,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1} ",
        "num_ids": 2377,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 35,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def closest_num(N):\n    closest = None\n    for num in range(1, N):\n        if closest is None or abs(N - num) < abs(N - closest):\n            closest = num\n    return closest\n",
        "test": "assert closest_num(10) == 9",
        "num_ids": 1749,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6",
        "num_ids": 1764,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"world\", \"hi\") == False # substring \"hi\" is not present in \"world\"",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    \n    digits = [int(d) for d in str(n)]\n    prev_diff = abs(digits[0] - digits[-1])\n    \n    for i in range(1, len(digits)-1):\n        diff = abs(digits[i] - digits[i+1])\n        if diff < prev_diff:\n            return False\n        prev_diff = diff\n    \n    return True\n",
        "test": "assert is_undulating(12345678901234567890) == False # example input for long integer",
        "num_ids": 2178,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(5, 3), (3, 1), (8, 2), (1, 6), (6, 4)]) == 3  # expected output: 1 ",
        "num_ids": 2039,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def Find_Min_Length(lst):\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2],[3,4,5],[6,7]]) == 2 ",
        "num_ids": 2551,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1 # Test Case 1: n=1, divisor(1) = 1",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for elem in flatten(list1):\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n\n\ndef flatten(lst):\n    flat_lst = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat_lst.extend(flatten(elem))\n        else:\n            flat_lst.append(elem)\n    return flat_lst",
        "test": "assert frequency_lists([]) == {}  # test case 3",
        "num_ids": 3519,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n",
        "test": "assert multiply_num([10]) == 10 ",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # Convert the input integer to a string\n    num_str = str(num)\n    \n    # Check if the input number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, increment it by 1\n        return int(num_str) + 1\n    \n    # If the input number is not a palindrome, add one to the last digit\n    last_digit = int(num_str[-1])\n    if last_digit == 9:\n        # If the last digit is 9, we need to carry over to the next digit\n        carry = 1\n    else:\n        # If the last digit is not 9, we don't need to carry over\n        carry = 0\n    \n    # Convert the last digit to a string and append the carry if necessary\n    last_digit_str = str(last_digit + carry)\n    \n    # Pad the remaining digits with zeros\n    remaining_digits = int(num_str[:-1]) + 1\n    remaining_digits_str = str(remaining_digits).zfill(len(num_str) - 1)\n    \n    # Combine the last digit and the remaining digits and convert back to an integer\n    next_palindrome = int(last_digit_str + remaining_digits_str[::-1])\n    \n    return next_palindrome",
        "test": "assert next_smallest_palindrome(12) == 22, \"Function should return 22 for input 12\"",
        "num_ids": 3585,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1  # check if it returns the correct result for the given example",
        "num_ids": 2117,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    word_list = word.split('_')\n    for i in word_list:\n        if i == word_list[0]:\n            camel_case += i\n        else:\n            camel_case += i.capitalize()\n    return camel_case\n",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 1806,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def eulerian_num(n, m):\n    if n < m:\n        return 0\n    elif m == 0:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "test": "assert eulerian_num(1, 1) == 1  # test for a(1, 1)",
        "num_ids": 1864,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'orange'], ['cat', 'dog', 'fish']]) == [['apple', 'orange'], ['cat', 'dog', 'fish']]  # test case 3",
        "num_ids": 2812,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 1260,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuple to a list\n    test_list_new = list(test_list)\n    # append the list to the tuple\n    test_list_new.extend(test_tup)\n    # convert the list back to a tuple\n    test_list_new = tuple(test_list_new)\n    # return the new tuple\n    return test_list_new\n",
        "test": "assert add_lists([1, 2, 3], ()) == (1, 2, 3) # tuple is empty, list is returned unchanged",
        "num_ids": 2313,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    for num in num1:\n        heapq.heappush(heap, num)\n    \n    for num in num2:\n        heapq.heappush(heap, num)\n    \n    for num in num3:\n        heapq.heappush(heap, num)\n    \n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9] # merge two sorted lists of length 3",
        "num_ids": 3410,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to list of integers\n    s_list = [int(x) for x in s]\n    \n    # Calculate the number of integers with an odd value\n    odd_count = 0\n    for i in range(len(s_list)):\n        # Rotate the list by one position\n        s_list = s_list[-1:] + s_list[:-1]\n        \n        # Check if the first element of the list is odd\n        if s_list[0] % 2 != 0:\n            odd_count += 1\n            \n        # If we've already rotated the list `n` times, break out of the loop\n        if i == n - 1:\n            break\n            \n    return odd_count\n",
        "test": "assert odd_Equivalent(\"10101\", 1) == 1  # Example 1",
        "num_ids": 2695,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def common_in_nested_lists(nestedlist):\n    common = []\n    for lst in nestedlist:\n        if not common:\n            common = set(lst)\n        else:\n            common = common.intersection(set(lst))\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1,2,3],[1,2,3]]) == [1,2,3] ",
        "num_ids": 2905,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 36,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Check if all the dictionaries in the list are empty or not\n    if all(not d for d in list1):\n        return True\n    else:\n        return False\n",
        "test": "assert empty_dit([{1:2}, {}, {3:4}]) == False",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,)) == 1, \"Error in tuple_to_int function\"",
        "num_ids": 1750,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                pass\n            elif isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n            else:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1,2,3],[4.5,6,7],[8,9,10]]) == [[1.0, 2.0, 3.0], [4.5, 6.0, 7.0], [8.0, 9.0, 10.0]] ",
        "num_ids": 3402,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == ['hello', 'world'] # pass",
        "num_ids": 1421,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    for i in range(1, n-1):\n        if arr[i] != arr[i+1] and arr[i] != arr[i-1]:\n            return arr[i]\n",
        "test": "assert search([1,2,3,4,4,4,5,6,7,8,9]) == 1, \"Incorrect output for search([1,2,3,4,4,4,5,6,7,8,9])\" ",
        "num_ids": 4927,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][0]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][0])\n            if abs(list1[i][1]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][1]*list1[j][1])\n    return max_product\n",
        "test": "assert max_product_tuple([(1,1), (1,1), (1,1)]) == 1  # the maximum absolute product is between (1, 1) and (1, 1)",
        "num_ids": 2776,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the divisors sums for each number\n    divisor_sums = {}\n\n    # Iterate over the numbers from 1 to the limit\n    for i in range(1, limit+1):\n        # Calculate the divisor sum of i\n        divisor_sum = sum(j for j in range(1, i//2+1) if i % j == 0)\n        # Check if i is an amicable number\n        if divisor_sum in divisor_sums:\n            # Add the sum of the divisors of i to the sum of the divisors of its divisor sum\n            divisor_sums[divisor_sum] += i\n        else:\n            # If the divisor sum is not yet in the dictionary, store it and its value\n            divisor_sums[divisor_sum] = i\n\n    # Sum all amicable numbers from the dictionary\n    amicable_sum = sum(divisor_sums[key] for key in divisor_sums if key != divisor_sums[key])\n\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(10) == 11  # test for limit = 10 ",
        "num_ids": 3019,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle\n",
        "test": "assert angle_complex(3, 4) == 0.9272952180016122 ",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of 0s and 1s in the current sub-string\n    zeros = 0\n    ones = 0\n    # Initialize variables to keep track of the maximum difference and the current sub-string\n    max_diff = 0\n    curr_diff = 0\n    # Initialize a variable to keep track of the index in the sub-string\n    index = 0\n    # Iterate through the string\n    while index < len(string):\n        # If the current character is a 0, increment the number of 0s\n        if string[index] == '0':\n            zeros += 1\n        # If the current character is a 1, increment the number of 1s\n        elif string[index] == '1':\n            ones += 1\n        # Update the current difference by subtracting the number of 1s from the number of 0s\n        curr_diff = abs(ones - zeros)\n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n        # If the current character is a 0, increment the index\n        if string[index] == '0':\n            index += 1\n        # If the current character is a 1, reset the number of 0s and 1s in the current sub-string\n        elif string[index] == '1':\n            zeros = 0\n            ones = 0\n            index += 1\n    # Return the maximum difference\n    return max_diff\n",
        "test": "assert find_length(\"101010\") == 1  # test case 2",
        "num_ids": 4524,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the prime factors of both numbers\n    prime_factors_a = set(find_prime_factors(a))\n    prime_factors_b = set(find_prime_factors(b))\n\n    # Find the common divisors\n    common_divisors = prime_factors_a.intersection(prime_factors_b)\n\n    # Calculate the sum of common divisors\n    sum_of_divisors = sum(common_divisors)\n\n    return sum_of_divisors\n\n\ndef find_prime_factors(n):\n    '''\n    Helper function to find prime factors of a given number\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n\n    if n > 2:\n        factors.append(n)\n\n    return factors\n",
        "test": "assert sum(30,35) == 65, \"sum(30,35) should be 65\" ",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "test": "assert multiply_int(2, 3) == 6 # test if 2 * 3 = 6",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def long_words(n, str_list):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str_list:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(5, \"hello world this is a test\") == [] ",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix has a magic sum\n    magic_sum = sum(my_matrix[0])\n    if magic_sum != sum(my_matrix[1]) or magic_sum != sum(my_matrix[2]):\n        return False\n\n    # Check if the matrix is a magic square\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum or len(set(row)) != len(row):\n            return False\n\n    # Check if the matrix is a magic square in transposed form\n    magic_sum = sum([my_matrix[i][i] for i in range(3)])\n    for i in range(3):\n        if sum([my_matrix[j][i] for j in range(3)]) != magic_sum:\n            return False\n\n    return True\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 4288,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 1, 2, 2, 3, 3, 3]) == 3 ",
        "num_ids": 2286,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_str = \"\"\n    non_vowel_str = \"\"\n    \n    # separate the vowels and non-vowels\n    for char in str1:\n        if char in vowels:\n            vowel_str += char\n        else:\n            non_vowel_str += char\n    \n    # reverse the vowels\n    vowel_str = vowel_str[::-1]\n    \n    # combine the reversed vowels and non-vowels\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result += vowel_str[0]\n            vowel_str = vowel_str[1:]\n        else:\n            result += non_vowel_str[0]\n            non_vowel_str = non_vowel_str[1:]\n    \n    return result\n",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 2544,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    \n    # iterate through the list\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add the number to the sum\n            sum += num\n    \n    # return the sum of negative numbers\n    return sum",
        "test": "assert sum_negativenum([1, 2, -3, -4, 5]) == -7",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 31,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "test": "assert hexagonal_num(1) == 1, \"hexagonal_num(1) should be 1\"",
        "num_ids": 1378,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    \n    for i in nums:\n        if i == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n            \n    if count_non_zero == 0:\n        return 0\n    else:\n        return count_zero/count_non_zero\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 2311,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initializing a variable to store the powers of 2\n    powers_of_two = [2**i for i in range(31)]\n    # Initializing a variable to store the remaining number\n    rem_num = n\n    # Iterating through all powers of 2\n    for power in powers_of_two:\n        # Checking whether the current power is less than the remaining number\n        if power <= rem_num:\n            # If the current power is less than the remaining number, subtract it from the remaining number\n            rem_num -= power\n        else:\n            # If the current power is greater than the remaining number, return True as the remaining number can be represented as sum of non-zero powers of 2\n            return True\n    # If the loop completes without returning True, it means the remaining number cannot be represented as sum of non-zero powers of 2, so return False\n    return False",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 3154,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 2202,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = set()\n    for sublist in test_list:\n        for num in sublist:\n            flat_list.add(num)\n    return flat_list\n",
        "test": "assert extract_singly([[1,2,3],[4,5],[6,7,8]]) == {1,2,3,4,5,6,7,8}",
        "num_ids": 2902,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        \n        if max_index == n-1:\n            n -= 1\n        else:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            nums[:n] = reversed(nums[:n])\n            n -= 1\n            \n    return nums\n",
        "test": "assert pancake_sort([]) == [] # empty list",
        "num_ids": 3679,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3,4], [2,1,4,3], [2,3,4,1]) == 0",
        "num_ids": 2281,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 1426,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([0, 0, 0]) == 0",
        "num_ids": 2166,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple,\n    or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif a == 0:\n        y = n // b\n        if n % b == 0:\n            return (0, y)\n        else:\n            return None\n    elif b == 0:\n        x = n // a\n        if n % a == 0:\n            return (x, 0)\n        else:\n            return None\n    else:\n        x = n // a\n        y = n // b\n        if x < y:\n            return (x, y - x)\n        else:\n            return (x - y, y)\n",
        "test": "assert find_solution(1, 0, 1) == (1, 0) # Test case 3",
        "num_ids": 3100,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 2017,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_series(n):\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(0) == 0  # sum should be 0",
        "num_ids": 1596,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculating the angle in radians\n    angle = (pi / l) * s\n    # Calculating the length of each side\n    side_length = 2 * (s * tan(angle / 2))\n    # Calculating the area of the polygon\n    area = (1 / 2) * side_length ** 2\n    return area\n",
        "test": "assert area_polygon(10, 8) == 78.5679, \"Incorrect area calculation for a regular octagon with sides of length 10\"",
        "num_ids": 2890,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Initialize sum_divisors as an empty list\n    sum_divisors = []\n\n    # Loop through all numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        # If n is divisible by i, add i and n/i to the sum_divisors list\n        if n % i == 0:\n            sum_divisors.append(i)\n            sum_divisors.append(n // i)\n\n    # Calculate the sum of the sum_divisors list\n    total_sum = sum(sum_divisors)\n\n    # Loop through all numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        # If n is divisible by i, add i and n/i to the sum_divisors list\n        if n % i == 0:\n            # Calculate the sum of the current divisor\n            current_sum = i + (n // i)\n\n            # If the current_sum is equal to the total_sum, return True\n            if current_sum == total_sum:\n                return True\n\n    # If the sum of divisors is not equal to the sum of divisors, return False\n    return False\n",
        "test": "assert div_sum(4) == False ",
        "num_ids": 3196,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # create a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i] in char_count:\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    \n    # count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for key in char_count:\n        if ord(key) % 32 == 0:\n            count += char_count[key]\n    \n    return count\n",
        "test": "assert count_char_position(\"\") == 0  # no character occurs at the same position as any other character in the English alphabet",
        "num_ids": 3055,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([]) == 0",
        "num_ids": 2226,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def frequency(a, x):\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1, \"Incorrect frequency count\"",
        "num_ids": 1792,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 2) == 6",
        "num_ids": 2432,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert perimeter_pentagon(3) == 15.0  # Example test case 1",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_occurance(s):\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n",
        "test": "assert count_occurance(\"std\") == 1",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n\n    type_of_first_element = type(test_tuple[0])\n\n    for element in test_tuple:\n        if type(element) != type_of_first_element:\n            return False\n\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 2027,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n        elif i == n-1 and count > 0:\n            return True\n    return False\n",
        "test": "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "num_ids": 2919,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 37,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0b000000) == 0",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_values_string(string):\n    result = ''\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\" ",
        "num_ids": 1661,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Using the built-in function bin() to convert decimal to binary form.\n    binary = bin(n)[2:]\n    # Finding the length of the binary string.\n    binary_length = len(binary)\n    # Checking if the range is valid or not.\n    if l < 1 or r > binary_length:\n        return False\n    # Traversing the binary string to check if all the bits are set or not.\n    for i in range(l-1, r):\n        if binary[i] == '0':\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(2,0,1) == False",
        "num_ids": 2632,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n    for num in arr[:n]:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    return neg + pos + arr[n:]\n",
        "test": "assert re_arrange_array([-1, -2, -3], 3) == [-1, -2, -3]",
        "num_ids": 3843,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"hello world\",\"*\") == \"hello*world\"",
        "num_ids": 1493,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([1, 1, 1, 1, 1], 5) == [1, 1, 1, 1, 1]  # test case 2",
        "num_ids": 2814,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsuface = 2 * math.pi * r * h\n    return lateralsuface\n",
        "test": "assert lateralsuface_cylinder(0, 5) == 0  # check for r = 0",
        "num_ids": 1958,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(2) == 8  # Test with a side length of 2",
        "num_ids": 1208,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    mask = 1\n    result = 0\n    for i in range(32):\n        if (n & mask) != 0:\n            result |= mask\n        if i % 2 == 1:\n            mask <<= 1\n    return result",
        "test": "assert even_bit_set_number(1) == 1, \"Error: even_bit_set_number(1) should return 1\"",
        "num_ids": 2349,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n",
        "test": "assert check_occurences([]) == {} ",
        "num_ids": 3606,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(str):\n    # Initialize a counter variable\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible substring starting at the current character\n        for j in range(i+1, len(str)+1):\n            # Increment the counter for each valid substring\n            count += 1\n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    \n    # Initialize the count variable\n    count = 0\n    \n    # Initialize the first element of the sequence\n    prev_element = 2\n    \n    while prev_element <= m:\n        count += 1\n        prev_element *= 2\n    \n    # Subtract 1 from the count, as we have counted the sequence with the first element as 2, which is not valid.\n    count -= 1\n    \n    # Multiply the count with the number of sequences of length n-1, which is equal to the number of sequences of length n-2 with the first element as 2.\n    count *= (m - 2) * (m - 1) // 2\n    \n    # Return the count\n    return count",
        "test": "assert get_total_number_of_sequences(4, 2) == 3, \"The number of sequences should be 3 for m=4 and n=2\"",
        "num_ids": 2495,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1,2,3,4], [5,6]) == [1,2,3,5,6]",
        "num_ids": 1716,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('hello world') == 11 ",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if math.sqrt(N).is_integer():\n            return N\n",
        "test": "assert next_Perfect_Square(0) == 1, \"Error\"",
        "num_ids": 1964,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the dp array with the first element of the array.\n    dp = [arr[0]]\n\n    # Iterate through the array starting from the second element.\n    for i in range(1, n):\n        # If the current element is greater than the previous element, add it to the dp array.\n        if arr[i] > dp[-1]:\n            dp.append(arr[i])\n        else:\n            # If the current element is less than the previous element, replace the last element of the dp array with the current element.\n            dp[-1] = arr[i]\n\n    # Initialize the max_sum variable to the first element of the dp array.\n    max_sum = dp[0]\n\n    # Iterate through the dp array starting from the second element.\n    for i in range(1, len(dp)):\n        # If the current element is greater than the previous element, add it to the max_sum variable.\n        if dp[i] > dp[i-1]:\n            max_sum += dp[i]\n        else:\n            # If the current element is less than the previous element, break out of the loop.\n            break\n\n    # Return the maximum sum.\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 3388,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10  # Tolerance for convergence\n    x = number / 2  # Initial guess\n    while abs(x**2 - number) > epsilon:\n        x = (x + number/x) / 2\n    return x\n",
        "test": "assert babylonian_squareroot(0) == 0  # test for zero input",
        "num_ids": 2202,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if str[0] == str[1]:\n            return 2\n        else:\n            return 1\n    \n    # Initialize the dp array\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n            \n    # Fill the dp array using dynamic programming\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]\n",
        "test": "assert lps(\"BBABCBCAB\") == 7",
        "num_ids": 3317,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 2:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 0, \"harmonic_sum(1) should return 0\"",
        "num_ids": 2179,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3,4,5], [4,5,6]) == [4,5]  # intersection of [1,2,3,4,5] and [4,5,6] is [4,5]",
        "num_ids": 2281,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((), 1) == 0 # test empty tuple",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Returns a new list with elem inserted before each element in lst.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst\n",
        "test": "assert insert_element([1], 2) == [2,1] # insert 2 before the only element in the list [1]",
        "num_ids": 2276,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        mag = cmath.polar(number)[0]\n        ang = cmath.polar(number)[1]\n        print(f\"{number} is equal to {mag} * ({cos(ang)} + {sin(ang)}j)\")\n",
        "test": "assert convert(1-1j) == (1.414213562373095, 0.7853981633974483, -0.7071067811865475)",
        "num_ids": 2162,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5  # Check for a list with all integer elements",
        "num_ids": 1510,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['R', 'G', 'B'], 1) == [('R',), ('G',), ('B',)]",
        "num_ids": 3991,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_Primes_nums(n):\n    # Define a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while p * p <= n:\n        # If prime[p] is not changed, then it is a prime\n        if prime[p] == True:\n            # Update all multiples of p\n            for i in range(p * 2, n+1, p):\n                prime[i] = False\n        p += 1\n    \n    # Return the count of primes in the given range\n    count = 0\n    for i in range(2, n+1):\n        if prime[i]:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 2647,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def swap_numbers(a, b):\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a new tuple containing the maximum element from each tuple\n    max_tuple = tuple(max(t) for t in zip(test_tup1, test_tup2))\n    # Return the new tuple\n    return max_tuple\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 2950,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    primes = []\n    i = 2\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    \n    return primes[-1]\n",
        "test": "assert newman_prime(1) == 2, \"Incorrect result for n=1\"",
        "num_ids": 3762,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result += (test_tup1[i] / test_tup2[i],)\n        else:\n            result += (float('inf'),)\n    return result\n",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5)",
        "num_ids": 2797,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 5) == ([1,2,3,4,5], []) # correct case",
        "num_ids": 3021,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert dog_age(0) == 0         # test for h_age = 0",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    '''\n    result = []\n    current_list = []\n    for i in range(len(S)):\n        current_list.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(current_list)\n            current_list = []\n    if len(current_list) > 0:\n        result.append(current_list)\n    return result\n",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 2) == [[1,2],[3,4],[5,6],[7,8],[9]] ",
        "num_ids": 2848,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(2) == 24 ",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(1) == 1, \"Error with square_Sum(1)\"",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)",
        "test": "assert find_star_num(1) == 1, \"The first star number should be 1\"",
        "num_ids": 1932,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0, \"Test case 2 failed\"",
        "num_ids": 2481,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum\n",
        "test": "assert even_Power_Sum(1) == 1   # sum of the first 1 even natural number raised to the fifth power",
        "num_ids": 3083,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6] # test case 1",
        "num_ids": 2373,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1, 2, 3, 4, 5), (3, 1, 1, 3, 2)) == (-2, 1, 2, 1, 3)",
        "num_ids": 2753,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 390,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    total_sum = 0\n    for i in range(0, n+1, 2):\n        total_sum += math.comb(n, i)\n    return total_sum",
        "test": "assert even_binomial_Coeff_Sum(3) == 4, \"Error in even_binomial_Coeff_Sum(3)\"",
        "num_ids": 2333,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(0, 5) == 0  # correct radius and height",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def dict_filter(dictionary, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 10, \"b\": 5, \"c\": 7}, 6) == {\"a\": 10, \"c\": 7}",
        "num_ids": 2607,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(()) == 0  # If the tuple is () then the number of elements that occur before any element is 0.",
        "num_ids": 1972,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n * 10 - 1)) // 9\n",
        "test": "assert is_num_decagonal(1) == 1, \"Error in is_num_decagonal function for n=1\"",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 2225,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) != len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Initialize the result list\n    result = []\n    # Iterate over the elements of the two lists simultaneously\n    for i in range(min(len(nums1), len(nums2))):\n        # Subtract the corresponding elements and append the result to the result list\n        result.append(nums1[i] - nums2[i])\n    # If one of the lists is longer than the other, append the remaining elements of the longer list as is\n    if len(nums1) > len(nums2):\n        result.extend(nums1[len(nums2):])\n    elif len(nums1) < len(nums2):\n        result.extend(nums2[len(nums1):])\n    # Return the result list\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3, -3, -3]",
        "num_ids": 2320,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Create a dictionary to keep track of the frequency of each digit\n    digit_freq = {}\n    \n    # Iterate through each digit in the string\n    for digit in num_str:\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        if digit not in digit_freq:\n            digit_freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency by 1\n        else:\n            digit_freq[digit] += 1\n    \n    # Iterate through each digit in the dictionary and check if its frequency is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > int(digit):\n            return False\n    \n    return True\n",
        "test": "assert validate(1111111111) == False # Test case 2",
        "num_ids": 1962,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item != elem:\n            return False\n    return True\n",
        "test": "assert check_element([1,1,1,1],1) == True # testing with a list of all 1s and checking if it returns True",
        "num_ids": 1825,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?:b{2}|b{3})')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abbab\") == True",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Repeating the array k times\n    b = a * k\n    # Finding the sum of the repeated array\n    sum_b = sum(b)\n    # Initializing the maximum sum to be the first element of the array\n    max_sum = a[0]\n    # Initializing the current sum as the first element of the array\n    current_sum = a[0]\n    # Iterating through the repeated array\n    for i in range(1, len(b)):\n        # Adding the current element to the current sum\n        current_sum += b[i]\n        # Checking if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # Updating the maximum sum to the current sum\n            max_sum = current_sum\n        # Checking if the current element is negative\n        if b[i] < 0:\n            # Resetting the current sum to 0\n            current_sum = 0\n    # Returning the maximum sum\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 1, 5) == -1 ",
        "num_ids": 4193,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the sum\n        sum += i**2\n    \n    # Return the sum of squares\n    return sum ",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 23,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def max_length(list1):\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return max_length\n",
        "test": "assert max_length([[1, 2], [3, 4, 5], [6, 7]]) == 3 ",
        "num_ids": 2468,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = k\n    for i in range(3, n + 1):\n        for j in range(1, k + 1):\n            for l in range(1, i - j + 2):\n                dp[i] += dp[i - l]\n    return dp[n]\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 3509,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(2,4) == 0 # Test case 1",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # finding the third side of the right angled triangle using the Pythagorean theorem\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side",
        "test": "assert otherside_rightangle(3,4) == 5  # assert that the third side of a right angled triangle with sides 3 and 4 is 5 ",
        "num_ids": 1601,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if type(i) == int or type(i) == float:\n            if i > max_num:\n                max_num = i\n    return max_num\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1860,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n",
        "test": "assert sum_div(1) == 1, \"sum_div(1) should be 1\"",
        "num_ids": 1725,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 2185,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n",
        "test": "assert flatten_list([1, [2, [3], 4], 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2685,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize an empty dictionary to store the aggregate values for each state\n    aggregate_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for tup in stdata:\n        # Update the aggregate_dict by adding the value of the current tuple to the existing aggregate for the corresponding state\n        aggregate_dict[tup[0]] += tup[1]\n    \n    # Find the maximum aggregate value from the dictionary\n    max_val = max(aggregate_dict.values())\n    \n    # Return the maximum aggregate value\n    return max_val",
        "test": "assert max_aggregate([(1,2),(3,4),(5,6),(1,2),(5,6)]) == 12, \"Incorrect result for the given example\" ",
        "num_ids": 3022,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        bin_i = bin(i)[2:].zfill(n)  # convert to binary and pad with zeros to n bits\n        bin_rev = bin_i[::-1]  # reverse the binary sequence\n        if bin_i == bin_rev:  # check if both binary sequences are same\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 2372,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def dict_depth(d, depth=1):\n    \"\"\"\n    This function takes a dictionary as input and returns its depth (number of nested levels).\n    \"\"\"\n    if type(d) != dict:\n        return depth\n    else:\n        max_depth = depth\n        for value in d.values():\n            if type(value) == dict:\n                max_depth = max(max_depth, dict_depth(value, depth + 1))\n        return max_depth",
        "test": "assert dict_depth({}) == 1 # Test empty dictionary",
        "num_ids": 1924,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    n = len(arr)\n    \n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            index = (index + rotations[i]) % n\n    \n    return arr[index]\n",
        "test": "assert find_Element([1, 2, 3, 4, 5], [1, 3], [0, 1], 2) == 3 # Test case 1",
        "num_ids": 3371,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match(r'^p\\w+', word)]\n    return p_words[:2]\n\nwords = ['python', 'programming', 'pandas', 'pizza', 'programming', 'python']\nprint(start_withp(words)) # Output: ['pizza', 'programming']\n",
        "test": "assert start_withp(['python', 'java', 'javascript', 'perl', 'php', 'pascal', 'python'])[0] == 'python'",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Create a dp array of size n+1 and initialize all elements to -1\n    dp = [-1]*(n+1)\n    \n    # Initialize dp[0] and dp[1] as 0 and -inf respectively\n    dp[0], dp[1] = 0, -float('inf')\n    \n    # Iterate through the array a from index 2 to n\n    for i in range(2, n+1):\n        # If the current element is greater than the previous element and the sum of previous element and current element is greater than previous maximum sum, update dp[i]\n        if a[i-1] > a[i-2] and a[i-1] + dp[i-2] > dp[i-1]:\n            dp[i] = a[i-1] + dp[i-2]\n        # Else, update dp[i] as the maximum of previous maximum sum or the current element\n        else:\n            dp[i] = max(dp[i-1], a[i-1])\n    \n    # Find the maximum sum up to ith index\n    max_sum = dp[index]\n    \n    # If k is greater than ith index, update max_sum as the sum of elements from ith index to kth index\n    if k > index:\n        max_sum += sum(a[index:k+1])\n    \n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 10, 2, 12, 3], 5, 3, 4) == 25",
        "num_ids": 4512,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Creating a deep copy of the input tuplex so that the original tuplex is not modified\n    copied_tuplex = deepcopy(tuplex)\n    # Slicing the copied tuplex to get the required colon\n    colon = copied_tuplex[m:n]\n    return colon",
        "test": "assert colon_tuplex((),0,0) == ()",
        "num_ids": 2460,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n\n    return products",
        "test": "assert large_product([-1,-2,-3], [4,5,6], 1) == [-6] ",
        "num_ids": 3157,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10, 20) == 20, \"Maximum function is not correct\"",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"Hello, World!\") == ('H', 'e', 'l', 'l', 'o', ',', ' ', 'W', 'o', 'r', 'l', 'd', '!')",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n & (n-1) == 0:\n        return n | (1 << (len(bin(n))-3))\n    else:\n        return n & (~(n & -n))",
        "test": "assert set_left_most_unset_bit(0b00000000) == 0b00000001",
        "num_ids": 2647,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume\n",
        "test": "assert volume_cone(2,3) == 12.566370614359172 ",
        "num_ids": 1847,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)",
        "test": "assert highest_Power_of_2(16) == 16  # returns 16 ",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def add_string(lst, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_lst = []\n    for item in lst:\n        new_lst.append(string.format(item))\n    return new_lst",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"Hello {}!\") == [\"Hello apple!\", \"Hello banana!\", \"Hello cherry!\"] ",
        "num_ids": 2014,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        nested_dict[l1[i]][l2[i]] = l3[i]\n    return nested_dict\n",
        "test": "assert convert_list_dictionary([1,2,3], ['a','b','c'], [10,20,30]) != {1: {'a': 10}, 2: {'b': 20}, 3: {'c': 30, 'd': 40}}",
        "num_ids": 3336,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n % 10 in [2, 3, 4, 5]:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 2264,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3],[4,5],[6,7,8,9]]) == [6,7,8,9] # input_list has 4 elements, but the list with maximum length has 4 elements",
        "num_ids": 2288,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))",
        "test": "assert check_distinct(()) == True",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through each character in the string again\n    for char in str1:\n        # If the count of the character is 1, return it as the first non-repeating character\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating characters are found, return None\n    return None\n",
        "test": "assert first_non_repeating_character('abcdef') == 'a', \"Error in first_non_repeating_character function\"",
        "num_ids": 2260,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"hello\") == False ",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]",
        "test": "assert median_numbers(8, 8, 8) == 8  # correct median is 8",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result",
        "test": "assert sum_of_digits([100, 200, 300]) == [1, 2, 3]",
        "num_ids": 2034,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] ^ test_tup2[i],)\n    return result_tuple\n",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 0)) == (1, 1, 1) ",
        "num_ids": 2620,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def extract_freq(test_list):\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1,2,3), (1,2,3), (4,5,6), (1,2,3)]) == 2 ",
        "num_ids": 2772,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result_tuple = ()\n        for j in range(len(test_tup1[i])):\n            result_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (result_tuple,)\n    return result\n",
        "test": "assert add_nested_tuples((), ()) == () ",
        "num_ids": 3213,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 7) == 5, \"Incorrect output for minimum(5,7)\"",
        "num_ids": 1295,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1, 2, 3), (4, 5, 6)) == False  # Tuple (2, 3) does not exist in the given tuples",
        "num_ids": 1749,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(3) == True ",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a list of digits\n    digits = list(str(n))\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the sorted digits back to a string and return the result\n    return int(\"\".join(digits))\n",
        "test": "assert rearrange_bigger(999999) == 999999, \"Incorrect result\"",
        "num_ids": 2881,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    seen = set()\n    \n    def add_pairs(i, j):\n        if (i, j) in seen:\n            return\n        seen.add((i, j))\n        heapq.heappush(heap, (nums1[i] + nums2[j], i, j))\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            add_pairs(i, j)\n            if len(heap) == k:\n                break\n        if len(heap) == k:\n            break\n    \n    result = []\n    for _ in range(k):\n        result.append((nums1[heap[0][1]], nums2[heap[0][2]]))\n        heapq.heappop(heap)\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1,2,3], [1,2,3], 0) == []",
        "num_ids": 5056,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, -2), (4, -5), (8, -9)]) == 4  # test case 3",
        "num_ids": 3324,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = None\n    for val in listval:\n        if isinstance(val, (int, float)) and (min_num is None or val < min_num):\n            min_num = val\n    return min_num\n",
        "test": "assert min_val([3, 4, 5, 6]) == 3, \"Incorrect minimum value\"",
        "num_ids": 2071,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r\"(_|-)+\", \" \", word).title().replace(\" \", \"\")\n    return word[0].lower() + word[1:]\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Initialize an empty list to store even numbers\n    even_list = []\n    \n    # Loop through the list\n    for num in l:\n        # If the number is even, append it to the even_list\n        if num % 2 == 0:\n            even_list.append(num)\n    \n    # Return the even_list containing no odd numbers\n    return even_list\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4]",
        "num_ids": 1661,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return [x[n-1] for x in list1]\n",
        "test": "assert extract_nth_element([(1,2,3),(4,5,6)], 3) == 6",
        "num_ids": 2308,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1, 2, 3, 4], [5, 6, 7, 8]) == False ",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max_product = arr[-1]*arr[-2]\n    return max_product\n",
        "test": "assert max_Product([-1, 0, 1]) == 0",
        "num_ids": 2511,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = set()\n    common_elements = []\n    \n    for t in Input:\n        first_elements.add(t[0])\n    \n    for e in first_elements:\n        for t in Input:\n            if t[0] == e and t not in common_elements:\n                common_elements.append(t)\n    \n    return common_elements\n",
        "test": "assert group_tuples([(1,2,3),(1,4,5),(3,2,4),(3,5,6)]) == [(1,2,3), (1,4,5), (3,2,4), (3,5,6)]",
        "num_ids": 3218,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\"]) == \"banana\" ",
        "num_ids": 1833,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total += list1[i]\n    return total * len(list1)\n",
        "test": "assert round_and_sum([4.56, 7.89, 1.23]) == 16.0",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-1]  # remove trailing delimiter\n",
        "test": "assert concatenate_tuple(()) == \"\" ",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n    \n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n        # cube the current number and add it to the sum\n        sum_of_cubes += i ** 3\n    \n    # divide the sum by the total number of cubes to get the average\n    average = sum_of_cubes / (n * (n + 1) * (2 * n + 1) / 6)\n    \n    # return the average\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Average of cube of 1st natural number is 1\"",
        "num_ids": 1983,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    result = ()  # empty tuple to store the results\n    for s in test_tuple:\n        result += (s[-1],)  # add the last character of each string to the result tuple\n    return result\n",
        "test": "assert extract_rear(('one', 'two', 'three')) == ('e', 'o', 'e')",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if type(i) == list:\n            if x in i:\n                count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5], [6, 7, 8]], 3) == 1",
        "num_ids": 2259,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store odd numbers\n    odd_nums = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If it's odd, add it to the odd_nums list\n            odd_nums.append(num)\n\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5]",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Check if input is in yyyy-mm-dd format\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        # Split date into year, month, and day components\n        year, month, day = map(int, dt.split('-'))\n        # Convert date to dd-mm-yyyy format\n        return f\"{day:02d}-{month:02d}-{year:04d}\"\n    else:\n        # Input is not in yyyy-mm-dd format\n        return None\n",
        "test": "assert change_date_format('2021-12-31') == '31-12-2021' ",
        "num_ids": 2476,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 2, 8, 3, 1]) == [1, 2, 3, 5, 8] ",
        "num_ids": 2582,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result += (True,)\n        else:\n            result += (False,)\n    return result\n",
        "test": "assert and_tuples((True, True, True), (True, True, True)) == (True, True, True), \"Test 3: Error in and_tuples\"",
        "num_ids": 2258,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the vertex\n    vertex_x = -b / (2 * a)\n    vertex_y = c / (a * vertex_x)\n    \n    # Calculate the equation of the directrix\n    directrix_y = vertex_y + math.sqrt(vertex_y**2 - c / a)\n    \n    return directrix_y\n",
        "test": "assert parabola_directrix(-2, 4, 0) == 0 # y = (-2/4)(x)^2 - 0",
        "num_ids": 3037,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(1,1,1) == 1  # check if the function returns the correct value for base1=1, base2=1, height=1",
        "num_ids": 1680,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == True",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b)+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True ",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Compute the last digit of n using modulus operator\n    return n % 10\n",
        "test": "assert last_Digit(7) == 7",
        "num_ids": 1424,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n",
        "test": "assert neg_nos([1, 2, -3, -4, 5]) == [-3, -4]",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (5, 6)]) == 0 ",
        "num_ids": 2826,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([0,0,0,0]) == 0",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import re\n\ndef find_adverb_position(text):\n    adverbs = ['quickly', 'slowly', 'quick', 'slow', 'fast', 'slowly']\n    matches = re.findall(r'\\b(' + '|'.join(adverbs) + r')\\b', text.lower())\n    if matches:\n        index = text.lower().index(matches[0].capitalize())\n        return matches[0], index\n    else:\n        return None\n",
        "test": "assert find_adverb_position(\"The cat sat on the mat.\") == {\"sat\": 6}, \"Testing for the correct position of the first adverb\" ",
        "num_ids": 2897,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculating the surface area of the cube\n    surface_area = 6 * (l**2)\n    \n    # Returning the surface area\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_of_positive = 0\n    num_of_total = 0\n    for num in nums:\n        if num > 0:\n            num_of_positive += 1\n        num_of_total += 1\n    ratio = num_of_positive / num_of_total\n    return ratio\n",
        "test": "assert positive_count([0, -1, -2, -3, -4, -5]) == 0",
        "num_ids": 2036,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([3, -5, 1, -3, 4]) == -3",
        "num_ids": 1975,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(x for x in tup[:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8)], 2) == [(1, 2), (5, 6)]",
        "num_ids": 3058,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 2229,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for i in lst:\n        if i in tup:\n            count[i] += 1\n    return count\n",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2663,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1,2,3]) == [1,8,27] ",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perrin_number(n):\n    \"\"\"\n    Helper function to check if a number is a Perrin number.\n    \"\"\"\n    return n == sum(int(d) for d in str(n))\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers less than or equal to n.\n    \"\"\"\n    perrin_sum = 0\n    for i in range(1, n+1):\n        if is_perrin_number(i):\n            perrin_sum += i\n    return perrin_sum",
        "test": "assert cal_sum(0) == 0, \"Error: cal_sum(0) should be 0.\"",
        "num_ids": 2000,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 33,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_str = \"\"\n    for i in range(l):\n        if i < len(str):\n            extracted_str += str[i]\n    return extracted_str\n",
        "test": "assert extract_string(\"hello world\", 5) == \"hello\"",
        "num_ids": 1586,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text1)",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\" ",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return abs(actual_cost - sale_amount)\n    else:\n        return 0\n",
        "test": "assert loss_amount(100,100) == 0, \"loss_amount is not correct for actual_cost=100 and sale_amount=100\" ",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # find all factors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            # if factor is even, add to sum\n            if n//i == i and i % 2 == 0:\n                sum += i\n            elif n//i != i and i % 2 == 0:\n                sum += i\n                sum += n//i\n                \n    return sum",
        "test": "assert sumofFactors(1) == 0  # sum of factors of 1 is 1, but 1 is not even, so it is excluded",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b\\w*z\\w*\\b', text, re.IGNORECASE)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_wordz(\"Java is not the best\") == None",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return True\n    elif monthnum2 in [2]:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumb_number(2) == False, \"month number 2 should have 28 or 29 days\"",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"] ",
        "num_ids": 1481,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    min_lst = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_len:\n                min_len = len(lst[i:j])\n                min_lst = lst[i:j]\n    return min_lst\n",
        "test": "assert Find_Min([]) == []  # test 1",
        "num_ids": 2092,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 10) == 50  # check if the function returns the correct value for 5*10",
        "num_ids": 1290,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # split the string into words\n    words = re.split('(\\W+)', str1)\n\n    # iterate over words and remove uppercase ones\n    for i in range(len(words)):\n        if words[i].isupper():\n            words[i] = ''\n\n    # join the words back into a string\n    result = ''.join(words)\n\n    return result\n",
        "test": "assert remove_uppercase(\"HELLO\") == \"\"",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] ",
        "num_ids": 1528,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2  # upper case characters are 'H' and 'W'",
        "num_ids": 1660,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Base case: if the list is empty, return an empty list\n    if len(list1) == 0:\n        return []\n\n    # Base case: if the list has only one element, return a list with that element\n    if len(list1) == 1:\n        return [list1]\n\n    # Recursive case: find all combinations for the rest of the list\n    result = []\n    for i in range(len(list1)):\n        rest_list = list1[:i] + list1[i+1:]\n        rest_combinations = combinations_list(rest_list)\n        for comb in rest_combinations:\n            result.append([list1[i]] + comb)\n\n    return result\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 2651,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        # Update max_ending_here based on current element\n        if arr[i] >= 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n        else:\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        # Update max_so_far based on max_ending_here\n        max_so_far = max(max_so_far, max_ending_here)\n        \n        # If current element is negative, update max_ending_here and min_ending_here\n        if arr[i] < 0:\n            if max_ending_here == 0:\n                max_ending_here = arr[i]\n            else:\n                max_ending_here = max_ending_here * arr[i]\n            min_ending_here = max_ending_here\n    \n    return max_so_far\n",
        "test": "assert max_subarray_product([0, 0, 0]) == 0  # all zero case",
        "num_ids": 3357,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    for value in values:\n        if value != n:\n            return False\n    return True\n",
        "test": "assert check_value({1:1, 2:1, 3:1, 4:1, 5:1}, 1) == True",
        "num_ids": 1754,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k: v for k, v in dict1.items() if v}\n    return new_dict\n",
        "test": "assert drop_empty({\"a\": 1, \"b\": \"\", \"c\": 3}) == {\"a\": 1, \"c\": 3} ",
        "num_ids": 2173,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        current = arr[i]\n\n        max_ending_here = max(current, max_ending_here * current)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 3068,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1,2,3,4,5)) == (3, 5, 7, 9)",
        "num_ids": 2020,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([4,5,6], 7) == 1            # Test Case 2",
        "num_ids": 1656,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            continue\n        elif l[i+1] == l[i]-1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert the tuples to sets to perform set operations\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the intersection set back to a tuple\n    return tuple(intersection_set)",
        "test": "assert tuple_intersection((1, 2, 3), (1, 2, 4)) == (1, 2)",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello\", \"o\", \"0\") == \"hell0\", \"Function is not working correctly\"",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({\"a\": 3, \"b\": 2, \"c\": 1}) == {'c': 1, 'b': 2, 'a': 3}  # dictionary with values sorted in descending order",
        "num_ids": 2741,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to keep track of the smallest and largest values\n    min_num = nums[0]\n    max_num = nums[0]\n    \n    # Loop through the array and update the minimum and maximum values\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    \n    # Return the sum of the minimum and maximum values\n    return min_num + max_num\n",
        "test": "assert big_sum([0, 0, 0, 0, 0]) == 0 ",
        "num_ids": 2347,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression to match any lowercase substring\n    pattern = r'\\b[a-z]+\\b'\n    # Replace all matches with an empty string\n    result = re.sub(pattern, '', str1)\n    # Return the resulting string\n    return result\n",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 1833,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    digit = str(n)[0]\n    return int(digit)\n",
        "test": "assert first_Digit(7) == 7",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5] # Test case 1",
        "num_ids": 1693,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))**2\n    return sum_numbers - sum_cubes\n",
        "test": "assert difference(1) == 0",
        "num_ids": 2046,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2,4,6,8],4) == 0, \"Error in find_Odd_Pair\"  # test for the fourth example ",
        "num_ids": 2298,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string\n",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"  # string is converted to uppercase and lowercase alternatively",
        "num_ids": 1496,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to strings to iterate through the digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # Initialize variables to store the sum of the per-digit difference\n    per_digit_diff_sum = 0\n\n    # Iterate through the digits of the two numbers and calculate the per-digit difference\n    for i in range(max(len(num1_str), len(num2_str))):\n        # If one of the numbers is shorter than the other, fill in the missing digits with zeros\n        if i >= len(num1_str):\n            num1_str += '0'\n        if i >= len(num2_str):\n            num2_str += '0'\n\n        # Calculate the per-digit difference and add it to the sum\n        diff = int(num1_str[i]) - int(num2_str[i])\n        per_digit_diff_sum += abs(diff)\n\n    # Return the sum of the per-digit difference\n    return per_digit_diff_sum\n",
        "test": "assert digit_distance_nums(123, 123) == 0  # Test with n1 = 123 and n2 = 123, the output should be 0.",
        "num_ids": 3487,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, -1, 2, -2, 3, -3], 6) == 3 # example 4",
        "num_ids": 2625,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets to remove duplicates and then back to tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    return tuple(sorted(union_set))\n",
        "test": "assert union_elements((1,2,3),(4,5)) == (1,2,3,4,5) # Test case 1",
        "num_ids": 2618,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n\n    for element in lst:\n        if isinstance(element, list):\n            current_length = Find_Max_Length(element)\n        else:\n            current_length += 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length",
        "test": "assert Find_Max_Length([]) == 0  # Test case 1",
        "num_ids": 2052,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "test": "assert extract_values('\"apple\" \"banana\" \"cherry\"') == ['apple', 'banana', 'cherry']",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initialize a variable to keep track of the count of pairs\n    count = 0\n    \n    # Loop through each element in the array\n    for i in range(n):\n        # Loop through each element after the current one\n        for j in range(i+1, n):\n            # Check if both elements are unequal\n            if arr[i] != arr[j]:\n                count += 1\n    \n    # Return the count of pairs\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10",
        "num_ids": 2200,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"] ",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum",
        "test": "assert sum_digits(123) == 6  # 1 + 2 + 3 = 6",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 1600,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([]) == []",
        "num_ids": 2766,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_no_dupes = []\n    for num in nums:\n        if num not in nums_no_dupes:\n            nums_no_dupes.append(num)\n    return nums_no_dupes[:2]\n",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 2871,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_product(list_data):\n    # create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    # return the product\n    return product\n",
        "test": "assert unique_product([1,2,3]) == 6  # [1,2,3] has unique numbers [1,2,3] and their product is 6",
        "num_ids": 1943,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n\n    # calculate the surface area of a cylinder\n    surface_area = 2 * math.pi * r * (r + h)\n\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(2, 3) == 188.3971853001 ",
        "num_ids": 2216,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 35,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) < len(B):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4], [2,5]) == False",
        "num_ids": 2109,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Using a loop to calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Finding the last digit of the factorial using modulo operator\n    last_digit = factorial % 10\n    \n    # Returning the last digit of the factorial\n    return last_digit\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1975,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists should have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 3138,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 21,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = ()\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elements += (elem,)\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            dissimilar_elements += (elem,)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == ()",
        "num_ids": 2638,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Define a list to store even elements\n    even_list = []\n    \n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # If the element is a tuple, recursively call the function\n        if type(element) == tuple:\n            even_list.append(even_ele(element, even_fnc))\n        # If the element is an even number, append it to the list\n        elif even_fnc(element):\n            even_list.append(element)\n    \n    # Return the list of even elements\n    return tuple(even_list)\n",
        "test": "assert even_ele((), lambda x: x%2 == 0) == () ",
        "num_ids": 3497,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s\n    return area\n",
        "test": "assert surface_Area(3, 5) == 30, \"Error in surface_Area function\"",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    # Define the catalan numbers using the formula\n    catalan_numbers = [1]\n    for i in range(1, num+1):\n        catalan_numbers.append((2*i)*catalan_numbers[i-1]/(i+1))\n    \n    # Calculate the factorial of the given number\n    num_factorial = factorial(2*num)\n    \n    # Return the catalan number\n    return num_factorial // (factorial(num) * factorial(num+1))\n",
        "test": "assert catalan_number(0) == 1, \"The 0th catalan number is 1\"",
        "num_ids": 1878,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(pattern, text)\n    if not adverbs:\n        return None\n    for adverb in adverbs:\n        if adverb.endswith('ly'):\n            match = re.search(pattern, text)\n            if match:\n                return (adverb, match.start(), match.end())\n    return None\n",
        "test": "assert find_adverbs(\"I am very tired.\") == None # test case 4",
        "num_ids": 2370,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    \n    # Iterate over the items in the dataset\n    for item in items:\n        # Add the item to the min heap\n        heapq.heappush(min_heap, item)\n        \n        # If the size of the heap is greater than n, remove the smallest element\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n            \n    # Return the n most expensive items\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert expensive_items([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50)], 0) == []",
        "num_ids": 3511,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part\n",
        "test": "assert split_Arr([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 2656,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3) ",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17",
        "num_ids": 1999,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list to store the perfect squares\n    squares = []\n    # Loop through all the integers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if int(i**0.5)**2 == i:\n            # If it is, add it to the list of squares\n            squares.append(i)\n    # Return the list of perfect squares\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 4922,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]  # check for a list of length 3",
        "num_ids": 2004,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive\n    binomial co-efficients.\n    \"\"\"\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result *= (n - i) / (i + 1)\n    return result\n",
        "test": "assert binomial_Coeff(5,2) == 10 ",
        "num_ids": 2329,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an IP address.\n    '''\n    pattern = re.compile(r'\\b0+(\\d+)')\n    return pattern.sub(lambda x: x.group(1), ip)",
        "test": "assert removezero_ip(\"1.2.3.4\") == \"1.2.3.4\"",
        "num_ids": 2312,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_diff = None\n    odd_diff = None\n    for num in list1:\n        if num % 2 == 0:\n            if not even_found:\n                even_found = True\n                even_diff = num\n            else:\n                odd_diff = num - even_diff\n                return odd_diff\n        else:\n            if not odd_found:\n                odd_found = True\n                odd_diff = num\n            else:\n                even_diff = num - odd_diff\n                return even_diff\n    if even_found and odd_found:\n        return even_diff - odd_diff\n    else:\n        return None  # no even or odd number found\n",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 2, \"Error: incorrect output for [1, 2, 3, 4, 5]\"",
        "num_ids": 2903,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n    \n    # Initialize variables to keep track of swaps and current index\n    swaps = 0\n    i = 0\n    \n    # Iterate through the lists, comparing elements\n    while i < len(lst1):\n        # If the elements are not equal, swap them and increment swaps\n        if lst1[i] != lst2[i]:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            swaps += 1\n        # Increment the index\n        i += 1\n    \n    return swaps\n",
        "test": "assert min_Swaps(\"00\",\"00\") == 0  # example input",
        "num_ids": 3211,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n",
        "test": "assert tuple_size((\"hello\",\"world\")) == 36, \"The size of a tuple with two strings should be 36 bytes\"",
        "num_ids": 1368,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    if len(arr1) == 0:\n        return arr2[k-1]\n    \n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    if k > len(arr1) + len(arr2):\n        return None\n    \n    i = len(arr1) - 1\n    j = len(arr2) - 1\n    \n    while i >= 0 and j >= 0:\n        if arr1[i] < arr2[j]:\n            if k - 1 == i:\n                return arr1[i]\n            k -= 1\n            i -= 1\n        else:\n            if k - 1 == j:\n                return arr2[j]\n            k -= 1\n            j -= 1\n            \n    if i >= 0:\n        return arr1[i]\n    else:\n        return arr2[j]\n",
        "test": "assert find_kth([1, 2, 3, 4, 5], [5, 6, 7, 8], 1) == 1 # k=1, first element in both arrays",
        "num_ids": 4130,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string to calculate its length\n    number_str = str(number)\n    length = len(number_str)\n\n    # initialize the sum of the cubes to zero\n    sum = 0\n\n    # iterate through each digit in the number and add the cube of each digit to the sum\n    for digit in number_str:\n        sum += int(digit) ** 3\n\n    # check if the sum is equal to the number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 2437,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1.0)",
        "num_ids": 1582,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"hello world\") == 'l' # correct answer",
        "num_ids": 1856,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(num):\n        '''\n        A helper function to check whether a given number is lucid or not.\n        '''\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        return num == sum_of_digits\n\n    ludic_numbers = []\n    for num in range(1, n + 1):\n        if is_ludic(num):\n            ludic_numbers.append(num)\n    return ludic_numbers\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 5541,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back together into a string\n    result = \" \".join(words)\n    return result",
        "test": "assert reverse_words(\"\") == \"\" ",
        "num_ids": 1805,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is divisible by any number less than it\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2), \"2 is a prime number\"",
        "num_ids": 1566,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(180) == 3.141592653589793 ",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n    # Find all matches in the text\n    matches = regex.finditer(text)\n    # Loop through the matches and return the first match\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    # If no match was found, return None\n    return None",
        "test": "assert find_literals(\"Python is an amazing language\", \"Python\") == (\"Python\", 0, 6)",
        "num_ids": 2162,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from sympy import *\n\ndef bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # initialize variables\n    bell = [1]\n    \n    # calculate bell numbers using loop\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n            \n    # return nth bell number\n    return bell[n]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n",
        "test": "assert remove_kth_element([1,2,3,4,5], 6) == [1,2,3,4,5]",
        "num_ids": 2334,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = None\n    for row in test_list:\n        if N-1 <= len(row):\n            if max_val is None or row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val\n",
        "test": "assert max_of_nth([[5,5,5],[5,5,5],[5,5,5]],1) == 5 # Test case 4",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def merge(lst):\n    a = []\n    b = []\n    for l in lst:\n        a.append(l[0])\n        b.append(l[1])\n    return [a, b]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 2403,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 25,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cumulative_sum_list = []\n    for num in test_list:\n        total += num\n        cumulative_sum_list.append(total)\n    return cumulative_sum_list\n",
        "test": "assert cummulative_sum([1,2,3,4,5]) == [1, 3, 6, 10, 15]",
        "num_ids": 2134,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2.0, 5.0, 8.0] ",
        "num_ids": 2861,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length!\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)",
        "test": "assert tuple_modulo((10, 20, 30), (3, 5, 7)) == (1, 0, 2)  # Testing with sample input",
        "num_ids": 2561,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def min_Jumps(steps, d):\n    if steps == 0:\n        return 0\n    if steps == 1:\n        if d == 0:\n            return 1\n        else:\n            return -1\n    \n    if d > steps:\n        return -1\n    \n    jumps = 0\n    i = 0\n    while i < steps:\n        if i + d <= steps:\n            jumps += 1\n            i += d\n        elif i == steps - 1:\n            jumps += 1\n            i += 1\n        else:\n            return -1\n    \n    return jumps\n",
        "test": "assert min_Jumps(2, 2) == 1  # steps: 2, d: 2, jumps: 1",
        "num_ids": 2698,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] != 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(0)\n    return result\n",
        "test": "assert div_list([1,2,3], [2,4,6]) == [0.5, 0.5, 0.5]",
        "num_ids": 2367,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    str_list = []\n    \n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            str_list.append(i)\n    \n    return ''.join(str_list) + ''.join(num_list)\n",
        "test": "assert move_num('') == ''",
        "num_ids": 2231,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    i = 0\n    max_len = 0\n    while i < len(a):\n        if a[i] == 0:\n            i += 1\n        else:\n            j = i + 1\n            while j < len(a):\n                if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                    j += 1\n                else:\n                    break\n            max_len = max(max_len, j - i)\n            i = j\n    return max_len\n",
        "test": "assert largest_subset([1, 2, 4, 8, 16]) == 5 ",
        "num_ids": 2941,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2])/2\n    else:\n        return arr1[n//2]\n",
        "test": "assert get_median([1, 3, 5], [], 3) == 3.0 # input lists are empty",
        "num_ids": 3324,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4],2) == [1,4,9,16] ",
        "num_ids": 2132,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([8, 9]) == [9, 8]  # test for a list with 2 elements",
        "num_ids": 2069,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the area of the semicircle\n    area_semicircle = math.pi * r**2\n    \n    # Find the area of the largest possible triangle\n    area_triangle = 0.5 * r * r\n    \n    # Return the area of the largest triangle\n    return area_triangle",
        "test": "assert triangle_area(1) == 1.5 # for a radius of 1, the area of the largest triangle that can be inscribed in a semicircle is pi/2 (approximately 1.57) ",
        "num_ids": 2690,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 32,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] != i + 1:\n            return i + 1\n    \n    return end + 1\n",
        "test": "assert find_First_Missing([1,2,3,4,6]) == 5",
        "num_ids": 2751,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "test": "assert Split([1,2,3,4,5,6]) == [2,4,6] # split even numbers",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Check if the input is a valid tuple\n    if not isinstance(ele, tuple) or len(ele) != 2:\n        raise ValueError(\"Input must be a tuple of length 2.\")\n\n    # Define the adjacent coordinates\n    adjac_coords = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]),\n                      (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n\n    # Remove the coordinates that are not in the given sublist\n    if sub:\n        adjac_coords = [coord for coord in adjac_coords if coord in sub]\n\n    return adjac_coords",
        "test": "assert adjac((3,3)) == [(2,2), (2,4), (4,2), (4,4)]",
        "num_ids": 2817,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Check if there are any whitespaces in the given string\n    if ' ' in text:\n        # Replace all whitespaces with underscore\n        text = text.replace(' ', '_')\n    else:\n        # Replace all underscores with whitespaces\n        text = text.replace('_', ' ')\n    # Return the updated string\n    return text\n",
        "test": "assert replace_spaces(\"Hello_World\") == \"Hello World\"",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize variables for keeping track of non-zero elements and zero elements\n    non_zero_list = []\n    zero_list = []\n\n    # Loop through the input list and separate non-zero elements from zero elements\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n\n    # Concatenate the non-zero and zero elements to form the final list\n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0] ",
        "num_ids": 2841,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through all pairs of elements in the list\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # XOR the two numbers and add to the sum\n            sum += arr[i] ^ arr[j]\n    \n    # Return the final sum\n    return sum\n",
        "test": "assert pair_xor_Sum([1, 1, 1, 1], 4) == 0 # Correct input values and expected output",
        "num_ids": 2352,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    return [hq.heappop(heap) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 2297,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 36,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes in the actual cost of an item and the amount it was sold for. \n    It returns True if the sale amount is equal to the actual cost, indicating that there was no profit or no loss. \n    Otherwise, it returns False.\n    \"\"\"\n    \n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False ",
        "test": "assert noprofit_noloss(10,10) == True",
        "num_ids": 1746,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Convert wind velocity from km/h to m/s\n    v = v / 3.6\n    \n    # Calculate the wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index\n",
        "test": "assert wind_chill(20, 10) == 10, \"Error: Wrong output for wind speed 20 km/h and temperature 10\u00b0C\"",
        "num_ids": 2997,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length",
        "test": "assert sample_nam([]) == 0",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n",
        "test": "assert remove_parenthesis(\"hello world\") == \"hello world\"  # case 2",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the first few nonagonal numbers\n    nonagonal_numbers = [1, 2, 6, 18, 44, 114, 250, 576, 1240, 2524, 5156]\n\n    # Check if n is less than or equal to the length of the list\n    if n <= len(nonagonal_numbers):\n        return nonagonal_numbers[n-1]\n\n    # Calculate the nonagonal number using a formula\n    else:\n        k = 1\n        num = 1\n        while k < n:\n            k += 1\n            num += 12 * (k-1)\n        return num\n",
        "test": "assert is_nonagonal(1) == 1 # The first nonagonal number is 1.",
        "num_ids": 2081,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_wordz_middle(\"hello\") == False",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Reverse an array up to a given position.\n    \"\"\"\n    for i in range(0, k//2):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n    return input",
        "test": "assert reverse_Array_Upto_K([1], 1) == [1]  # test case 3",
        "num_ids": 2560,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 1, \"b\": 2}) == (1, 2, 3, {\"a\": 1, \"b\": 2}) ",
        "num_ids": 2938,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                avg = cost[i][j]\n                max_avg = max(max_avg, avg)\n            elif i == 0:\n                avg = (cost[i][j] + cost[i][j-1])/2.0\n                max_avg = max(max_avg, avg)\n            elif j == 0:\n                avg = (cost[i][j] + cost[i-1][j])/2.0\n                max_avg = max(max_avg, avg)\n            else:\n                avg = (cost[i][j] + cost[i][j-1] + cost[i-1][j] + cost[i-1][j-1])/4.0\n                max_avg = max(max_avg, avg)\n    return max_avg\n",
        "test": "assert maxAverageOfPath([[2,3,1],[4,5,2],[6,7,8]]) == 5.5 # example from the problem statement",
        "num_ids": 4593,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({\"Alice\": (175, 55), \"Bob\": (180, 80), \"Charlie\": (160, 60)}, 170, 70) == {\"Bob\": (180, 80)} ",
        "num_ids": 4441,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i, (a, b) in enumerate(zip(nums1, nums2)):\n        if eq(a, b):\n            count += 1\n    return count",
        "test": "assert count_same_pair([], []) == 0 ",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    for i in range(power):\n        result += int(base)\n        base = str(base) + str(base)\n        base = ''.join(sorted(set(base), key=base.index))\n        base = int(base)\n    return result\n",
        "test": "assert power_base_sum(5, 1) == 5, \"Incorrect result for base=5 and power=1\"",
        "num_ids": 2766,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('\"Quote 1\" is a quotation.') == ['Quote 1'] ",
        "num_ids": 1748,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Create an empty list to store the products\n    products = []\n\n    # Loop through the tuple and compute the products\n    for i in range(len(test_tup) - 1):\n        product = test_tup[i] * test_tup[i + 1]\n        products.append(product)\n\n    # Convert the list to a tuple and return it\n    return tuple(products)\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12), \"Multiplication is incorrect\" ",
        "num_ids": 2569,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    \n    # initialize an empty list for the sum of the two lists\n    sum_lst = []\n    \n    # iterate over the two lists simultaneously\n    for i in range(len(lst1)):\n        # add the corresponding elements of the two lists and append the result to the sum list\n        sum_lst.append(lst1[i] + lst2[i])\n    \n    # return the sum list\n    return sum_lst\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9] # Addition of 1st elements of both lists",
        "num_ids": 2617,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 2258,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsurface_cone(1,2) == 12.566370614359172, \"Function lateralsurface_cone(1,2) should return 12.566370614359172 but got {}\".format(lateralsurface_cone(1,2)) ",
        "num_ids": 2281,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[ .,]+', ':', text)\n",
        "test": "assert replace_specialchar(\"This is a test.\") == \"This:is:a:test:\" ",
        "num_ids": 1472,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6], 4) == 3",
        "num_ids": 2839,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            res += prod\n            \n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([0, 0, 0, 0, 0]) == 0  # Test case 4",
        "num_ids": 2926,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def set_middle_bits(n):\n    # Convert the integer to binary and strip the leading '0b'\n    binary_n = bin(n)[2:]\n\n    # Toggle the middle bits by converting the binary string to a list, reversing the list, toggling each bit, and converting the list back to a binary string\n    binary_n_list = list(binary_n)\n    binary_n_list.reverse()\n    for i in range(1, len(binary_n_list)-1):\n        if binary_n_list[i] == '0':\n            binary_n_list[i] = '1'\n        else:\n            binary_n_list[i] = '0'\n    binary_n_list.reverse()\n    binary_middle_bits_toggled = ''.join(binary_n_list)\n\n    # Convert the toggled binary string back to an integer\n    n_middle_bits_toggled = int(binary_middle_bits_toggled, 2)\n\n    return n_middle_bits_toggled ",
        "test": "assert set_middle_bits(0b000000) == 0b000000  # example input and output",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1,3,4,7,9], 5) == 3 # Example from w3resource",
        "num_ids": 1996,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert not check_str('1apple'), \"The string '1apple' should return False.\" ",
        "num_ids": 1589,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    else:\n        # calculate the previous term in the geometric sum\n        prev_term = geometric_sum(n-1)\n        # calculate the next term in the geometric sum\n        next_term = 2 ** (n-1)\n        # return the sum of the previous and next terms\n        return prev_term + next_term\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1326,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize the variable to store the triangular number\n    tn = 0\n    # Initialize the variable to store the number of digits\n    digits = 0\n    # Initialize the variable to store the index\n    index = 0\n\n    # Calculate the triangular number and count the number of digits\n    while digits < n:\n        tn += 1\n        digits = len(str(tn))\n\n    # Find the index of the smallest triangular number with n digits\n    for i in range(1, 10000):\n        tn += i\n        if len(str(tn)) == n:\n            index = i\n            break\n\n    return index\n",
        "test": "assert find_Index(1) == 1 # smallest triangular number is 1, which has 1 digit",
        "num_ids": 1897,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict\n",
        "test": "assert tuple_to_dict(()) == {} # Test with an empty tuple ",
        "num_ids": 2596,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)):\n        if s[i] != s[0]:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"abcdef\") == False",
        "num_ids": 1394,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculating the volume of the tetrahedron using the formula:\n    # V = (1/3) * sqrt(2) * side^2 * side_length\n    volume = (1/3) * math.sqrt(2) * side**2 * side_length\n    \n    # Calculating the surface area of the tetrahedron using the formula:\n    # Surface_area = 4 * (1/3) * side^2 * side_length\n    surface_area = 4 * (1/3) * side**2 * side_length\n    \n    # Returning the area of the tetrahedron\n    return surface_area\n",
        "test": "assert area_tetrahedron(3) == 0.5*math.sqrt(3) ",
        "num_ids": 2465,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. \n    '''\n    n = len(list)\n    list = list[n-m:] + list[:n-m]\n    return list\n",
        "test": "assert rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5] # rotate list by 0 to the right direction",
        "num_ids": 2449,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        # Check if the number is divisible by all its digits\n        if all(int(digit)%num==0 for digit in str(num)):\n            divisible_numbers.append(num)\n    return divisible_numbers",
        "test": "assert divisible_by_digits(20, 30) == []  # Test case 2",
        "num_ids": 4700,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r ** 2 * (a/360)\n",
        "test": "assert sector_area(4, 1000) == None # angle is invalid ",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a 3D table to store the length of LCS for substrings of X, Y and Z\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Fill in the LCS table\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                    \n    # Initialize an empty LCS string\n    lcs = ''\n    \n    # Reconstruct the LCS from the LCS table\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n            \n    return lcs\n",
        "test": "assert lcs_of_three(\"abc\", \"def\", \"ghi\") == \"\"",
        "num_ids": 5366,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 33,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[A-Z])(?=[A-Z][a-z])|(?<=[a-z])(?=[A-Z])', ' ', str1)",
        "test": "assert capital_words_spaces(\"AIAndMachineLearning\") == \"AI And Machine Learning\"",
        "num_ids": 1863,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: float(x))",
        "test": "assert sort_numeric_strings([]) == []",
        "num_ids": 3050,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([(1, 2)], (3, 4)) == [(1, 2), (3, 4)] ",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Find the smallest value in the heap\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    # If the smallest value is not the root, then it is not a min heap\n    if smallest != i:\n        return False\n\n    # If the smallest value is the root, then recursively check the left and right subtrees\n    if left < len(arr):\n        if not check_min_heap_helper(arr, left):\n            return False\n\n    if right < len(arr):\n        if not check_min_heap_helper(arr, right):\n            return False\n\n    # If the left and right subtrees are min heaps, then the whole heap is a min heap\n    return True\n",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 1) == True",
        "num_ids": 3684,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + 2*jacobsthal_num(n-2))",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1906,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Create an empty list to store the minimum k records\n    min_k_records = []\n    \n    # Loop through the sorted list and add the minimum k records to the list\n    for i in range(K):\n        min_k_records.append(sorted_list[i])\n    \n    return min_k_records\n",
        "test": "assert min_k([(2, 3, 4), (1, 2, 3), (3, 4, 5), (4, 5, 6), (5, 6, 7)], 0) == []",
        "num_ids": 3159,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists.\n    The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(i)\n    return common\n",
        "test": "assert extract_index_list([1,2,3], [4,5,6], [7,8,9]) == []",
        "num_ids": 2575,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None\n",
        "test": "assert second_smallest([1, 2, 2, 4, 5]) == 2",
        "num_ids": 2141,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('abb') == True",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([\"ab\", \"cd\", \"ef\"]) == 0",
        "num_ids": 2168,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through every sublist in list1\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the dictionary as a key\n        sublist_tuple = tuple(sublist)\n        sublist_count[sublist_tuple] = sublist_count.get(sublist_tuple, 0) + 1\n        \n    return sublist_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3516,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 28,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the string to a float and check if it has a precision of 2\n        float_num = float(num)\n        if str(float_num) == num:\n            return True\n        else:\n            return False\n    except ValueError:\n        # If the string cannot be converted to a float, return False\n        return False\n",
        "test": "assert is_decimal(\"3.14\") == True",
        "num_ids": 1919,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 2115,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize minimum difference to be the difference between the first and second elements\n    min_diff = arr[1] - arr[0]\n    # Iterate over the array and compare the difference between consecutive elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([4, 2, 1, 3], 4) == 1",
        "num_ids": 2254,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    polite_nums = []\n    i = 1\n    while len(polite_nums) < n:\n        if all(i % num == 0 for num in polite_nums):\n            polite_nums.append(i)\n        i += 1\n    return polite_nums[-1]",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 2412,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1]) == []",
        "num_ids": 1592,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1,2,3,4,5], 5) == 2",
        "num_ids": 2697,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3],[2,3,4]) == [1], \"Diff should return [1]\"",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def odd_num_sum(n):\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # add the square of i to the sum variable\n        sum += i**4\n        \n    # return the sum variable\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"Error in function: odd_num_sum(1)\"",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack\n",
        "test": "assert check_expression(\"(a+b)+c)\") == False  # incorrect expression",
        "num_ids": 2074,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert remove_length(\"\", 10) == \"\" ",
        "num_ids": 2127,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if not result:\n        return None\n    return result\n",
        "test": "assert occurance_substring(\"hello world\", \"there\") == None # check that the function returns None when there is no match",
        "num_ids": 2121,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 10]) == False",
        "num_ids": 1708,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"\") == 0, \"empty string should return 0\"",
        "num_ids": 2165,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Calculate the sum of non-repeated elements by iterating through the dictionary and summing up the keys with count 1\n    non_repeated_sum = 0\n    for num, count in count_dict.items():\n        if count == 1:\n            non_repeated_sum += num\n    \n    return non_repeated_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2371,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2322,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            sublist = tuple(item)\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists\n",
        "test": "assert unique_sublists([]) == {} # check if the function returns an empty dictionary when the input list is empty",
        "num_ids": 2885,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            result.append(sum(combo))\n    return result",
        "test": "assert find_combinations([(1,2), (2,3), (3,4), (1,5)]) == [(1,2,3), (1,2,4), (1,2,5), (1,3,4), (1,3,5), (1,4,5), (2,3,4), (2,3,5), (2,4,5)] ",
        "num_ids": 6826,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 39,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef count_divisors(n):\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count\n\ndef is_even_divisor_count(n):\n    divisor_count = count_divisors(n)\n    return divisor_count % 2 == 0",
        "test": "assert count_divisors(2) == 2 ",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1%2==1:\n                for k in range(i, j+1):\n                    sum += arr[k]\n    return sum\n",
        "test": "assert odd_length_sum([]) == 0, \"Incorrect output for empty array\"",
        "num_ids": 2319,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if delta == 0 else delta/cmax\n    value = cmax\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)  # black color",
        "num_ids": 4825,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    count_even = 0\n    count_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_prod *= num\n            count_even += 1\n            if count_even == 2:\n                break\n        else:\n            odd_prod *= num\n            count_odd += 1\n            if count_odd == 2:\n                break\n    \n    return even_prod * odd_prod\n",
        "test": "assert mul_even_odd([0,1,2,3,4,5,6,7,8]) == 0    # Test case 2",
        "num_ids": 3021,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert string to tuple of integers\n        result = tuple(map(int, test_str.strip('()').split(',')))\n        return result\n    except ValueError:\n        return None\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) ",
        "num_ids": 2411,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 4, 5], 6) == 4",
        "num_ids": 1751,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(?=b{3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbbb\") == True",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(test_str)\n    # Concatenate the two lists\n    new_list = test_list + str_list\n    # Convert the list to a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple(['d', 'e', 'f', 'g'], '') == ('d', 'e', 'f', 'g')",
        "num_ids": 2188,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # loop through the list\n    for i in range(0, len(nums), 2):\n        # check if the number at the even index is even\n        if nums[i] % 2 != 0:\n            # if not, return False\n            return False\n    # if all even indices contain even numbers, return True\n    return True\n",
        "test": "assert even_position([2,4,6,8,10]) == True, \"Even position contains even number\"",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        if type(i) != tuple:\n            new_tup += (i,)\n    return new_tup\n",
        "test": "assert remove_nested(()) == () # test for empty tuple",
        "num_ids": 2235,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5], [6]]) == 3",
        "num_ids": 1778,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    last_pos = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return last_pos\n",
        "test": "assert last([1,2,3,3,3,4,5],3) == 4, \"Incorrect value\"",
        "num_ids": 2680,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb('ab') == 'ab'",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dictionary.values():\n        total += item\n    return total\n",
        "test": "assert return_sum({1: 2, 3: 4, 5: 6}) == 12 ",
        "num_ids": 1640,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 24,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    return sum(range(1, n+1, 2))\n",
        "test": "assert sum_odd(5) == 9, \"sum_odd(5) should be 9\"",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 38,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1,2,3]) == 6 ",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def left_rotate(n, d):\n    # Convert the number to a binary string\n    binary_str = format(n, '032b')\n\n    # Rotate the bits to the left by d positions\n    rotated_binary_str = binary_str[d:] + binary_str[:d]\n\n    # Convert the rotated binary string back to an integer\n    rotated_num = int(rotated_binary_str, 2)\n\n    return rotated_num",
        "test": "assert left_rotate(0b00000000, 32) == 0b00000000, \"Error in left_rotate\"",
        "num_ids": 3507,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"    \") == \"\"",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3 # All three numbers are equal",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # Finding the minimum element and its index\n    min_element = arr[0]\n    min_index = 0\n\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n            min_index = i\n\n    # Counting the number of rotations\n    for i in range(min_index):\n        if arr[i] > arr[i + 1]:\n            count += 1\n\n    return count",
        "test": "assert count_rotation([1,2,3,4,5]) == 0  # Sorted array",
        "num_ids": 3099,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n):\n    # Check if the number is a positive integer\n    if n < 1 or not isinstance(n, int):\n        return False\n    \n    # Check if the number is a perfect square\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    \n    # If the number is not a perfect square, return False\n    return False\n",
        "test": "assert is_perfect_square(14) == False",
        "num_ids": 1643,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([1, 2, 4]) == True",
        "num_ids": 1530,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [7,8,9] ",
        "num_ids": 2530,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run_length = 0\n    for char in test_str:\n        if char.isupper():\n            run_length += 1\n        else:\n            max_run = max(max_run, run_length)\n            run_length = 0\n    max_run = max(max_run, run_length)\n    return max_run\n",
        "test": "assert max_run_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26, \"Incorrect answer\"",
        "num_ids": 3090,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:  # check if number is odd\n            return num  # return the first odd number\n    return None  # if there are no odd numbers, return None\n",
        "test": "assert first_odd([2, 4, 6, 8, 1]) == 1",
        "num_ids": 1617,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == K:\n            count += 1\n    return count > 0\n",
        "test": "assert check_K(('A', 'B', 'C', 'D'), 3) == False",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding\n    element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((5, 3, 7), (1, 2, 4)) == True",
        "num_ids": 1892,
        "indeed": true
    }
]