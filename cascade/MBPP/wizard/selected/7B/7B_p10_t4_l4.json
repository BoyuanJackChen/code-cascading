[
    {
        "number": 2,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements\n",
        "test": "assert similar_elements(('apple', 'banana', 'cherry'), ('cherry', 'date', 'elderberry')) == ['cherry']",
        "num_ids": 2285,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(4) == True",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n, nums)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 2656,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    # Check if the number is a power of 2 or not\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 == 1:\n            return False\n        x //= 2\n    return True\n\ndef is_Differ_At_One_Bit(x, y):\n    # Check if the two numbers differ at one bit position only\n    if is_Power_Of_Two(x ^ y):\n        return True\n    return False",
        "test": "assert is_Power_Of_Two(0) == False",
        "num_ids": 1980,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long('The quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 1601,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    if len(str) == 0:\n        return 0\n    for i in range(1, len(str)+1):\n        if str == str[i:] + str[:i]:\n            return len(str) // i\n    return -1\n",
        "test": "assert find_Rotations(\"\") == 0 # empty string",
        "num_ids": 2155,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index_first = s.find(ch)\n    index_last = s.rfind(ch)\n    if index_first != -1 and index_last != -1:\n        return s[:index_first] + s[index_first+len(ch):index_last] + s[index_last+len(ch):]\n    elif index_first != -1:\n        return s[:index_first] + s[index_first+len(ch):]\n    elif index_last != -1:\n        return s[:index_last] + s[index_last+len(ch):]\n    else:\n        return s\n",
        "test": "assert remove_Occ(\"\", \"a\") == \"\"  # test case 4",
        "num_ids": 2471,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # create empty list to store sorted matrix\n    sorted_matrix = []\n    \n    # create list of row sums\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append((row, row_sum))\n    \n    # sort row sums by second element (sum of row)\n    row_sums.sort(key=lambda x: x[1])\n    \n    # append rows to sorted matrix in order specified by sorted list\n    for row_sum in row_sums:\n        sorted_matrix.append(row_sum[0])\n    \n    return sorted_matrix\n",
        "test": "assert sort_matrix([[2, 3], [4, 5]]) == [[2, 3], [4, 5]] # test case 2",
        "num_ids": 3617,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(1,1,1) == 0.5 ",
        "num_ids": 1719,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    return bool(pattern.fullmatch(text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1710,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 1290,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 320,
        "answer": "def str_to_list(string):\n    # create an empty list to store the characters of the string\n    char_list = []\n    \n    # convert the string to a list of characters\n    char_list = list(string)\n    \n    # create an empty string to store the result\n    result = \"\"\n    \n    # iterate through each character in the char_list\n    for char in char_list:\n        # check if the character is not present in the second string\n        if char not in second_string:\n            # add the character to the result string\n            result += char\n    \n    return result\n",
        "test": "assert str_to_list(\"\") == \"\"",
        "num_ids": 2615,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the array to remove duplicates\n    set_nums = set(arraynums)\n    \n    # If the length of the array is not equal to the length of the set, there is a duplicate\n    if len(arraynums) != len(set_nums):\n        return True\n    else:\n        return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Convert the number to a string\n    num_str = str(x)\n    \n    # Check if the number contains the digit 0\n    if '0' in num_str:\n        return False\n    \n    # Check if the sum of digits is equal to the number\n    sum_of_digits = sum(int(digit) for digit in num_str)\n    \n    if sum_of_digits != x:\n        return False\n    \n    # Check if the number is palindrome\n    if num_str != num_str[::-1]:\n        return False\n    \n    # If all the checks pass, the number is a woodball\n    return True\n",
        "test": "assert is_woodall(32) == False",
        "num_ids": 2301,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = int(str(num)[::-1])\n    if num + 1 == reverse_num * 2:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(22) == False # The given number 22 is not one less than twice its reverse 22.",
        "num_ids": 1817,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # convert the digits list to a string\n    digits_str = ''.join(str(d) for d in arr)\n    # sort the string in descending order\n    sorted_str = ''.join(sorted(digits_str, reverse=True))\n    # remove any leading zeros from the sorted string\n    no_leading_zeros = sorted_str.lstrip('0')\n    # if there are no digits in the sorted string, return 0\n    if len(no_leading_zeros) == 0:\n        return 0\n    # convert the sorted string back to an integer and return it\n    return int(no_leading_zeros)\n",
        "test": "assert find_Max_Num([0,0,0,0]) == 0, \"Test case 4 failed\"",
        "num_ids": 2864,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -3) == True, \"Error: Opposite Signs function not working as expected for (5, -3)\"",
        "num_ids": 1461,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Calculate the value of the nth octagonal number using the formula: (n * (3 * n - 1)) / 2\n    octagonal_num = (n * (3 * n - 1)) / 2\n    # Return the octagonal number as an integer\n    return int(octagonal_num)\n",
        "test": "assert is_octagonal(1) == 1, \"Error in is_octagonal(1)\"",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Create a dictionary to store the frequency of digits\n    freq = defaultdict(int)\n    # Loop through the characters in the string\n    for char in s:\n        # Convert the character to an integer\n        digit = int(char)\n        # Increment the frequency count for the digit\n        freq[digit] += 1\n    # Initialize a count variable to keep track of the number of substrings with the sum of digits equal to their length\n    count = 0\n    # Loop through the lengths of the substrings\n    for length in range(1, len(s)+1):\n        # Initialize a sum variable to keep track of the sum of the digits in the substring\n        sum = 0\n        # Loop through the substring\n        for i in range(length):\n            # Add the frequency of the digit at the current position to the sum\n            sum += freq[int(s[i])]\n        # If the sum is equal to the length of the substring, increment the count\n        if sum == length:\n            count += 1\n    # Return the count of substrings with the sum of digits equal to their length\n    return count\n",
        "test": "assert count_Substrings('122') == 1",
        "num_ids": 3876,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize smallest_num to None\n    smallest_num = None\n    # Loop through each number in the list\n    for num in xs:\n        # If smallest_num is None or the current number is smaller than smallest_num, set smallest_num to the current number\n        if smallest_num is None or num < smallest_num:\n            smallest_num = num\n    # Return the smallest number\n    return smallest_num\n",
        "test": "assert smallest_num([4, 2, 9, 1, 7, 5]) == 1  # test case 1",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n",
        "test": "assert max_difference([10, 10, 10, 10, 10]) == 0 # test case 3",
        "num_ids": 2519,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(1, 50), (2, 40), (3, 30), (4, 20)]) == [(4, 20), (3, 30), (2, 40), (1, 50)]",
        "num_ids": 2768,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for item in data_list:\n        if type(item) == list:\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6 ",
        "num_ids": 1883,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5 ",
        "num_ids": 1300,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n    return bell[n]\n",
        "test": "assert bell_number(0) == 1, \"bell_number(0) should be 1\"",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 28,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True",
        "test": "assert is_Monotonic([1, 2, 3, 2, 1]) == False",
        "num_ids": 2537,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n",
        "test": "assert is_sublist([1, 2, 3, 4], [5, 6]) == False",
        "num_ids": 1939,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True # test 1: all tuples have equal length",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n",
        "test": "assert len(comb_sort([])) == 0 # check if the function works correctly for empty lists",
        "num_ids": 3326,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is positive\n    if n < 0:\n        return False\n    # Check if the given number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        if (n-i*i) >= 0 and int((n-i*i)**0.5)**2 == (n-i*i):\n            return True\n    # If the given number is not represented as the difference of two squares, return False\n    return False\n",
        "test": "assert dif_Square(6) == False, \"Error: dif_Square(6) should return False\"",
        "num_ids": 1911,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n        \n    return True\n",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['circle', 'square', 'triangle', 'circle']) == False # too many patterns",
        "num_ids": 2343,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for elem in tup:\n            if elem % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 4) == []",
        "num_ids": 3044,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(33) == True",
        "num_ids": 1121,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"hello\") # should return True, as the length of \"hello\" is odd",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(1) == 1, \"Incorrect tetrahedral number for n=1\"",
        "num_ids": 1530,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume",
        "test": "assert volume_sphere(2) == 33.510321638291124, \"Incorrect volume calculation\" ",
        "num_ids": 1586,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def get_Char(strr):\n    # Convert the string to lowercase\n    strr = strr.lower()\n\n    # Initialize the sum of ASCII values to 0\n    ascii_sum = 0\n\n    # Iterate through each character in the string\n    for char in strr:\n        # Convert the character to ASCII value and add it to the sum\n        ascii_sum += ord(char)\n\n    # Find the remainder of the sum when divided by 26\n    remainder = ascii_sum % 26\n\n    # Convert the remainder to a character\n    char = chr(remainder + ord('a'))\n\n    return char\n",
        "test": "assert get_Char(\"xyz\") == \"z\"",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequence(n):\n    # base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    # initialize variables\n    prev_a, prev_b, a = 1, 1, 1\n    for i in range(3, n+1):\n        a, prev_a, prev_b = prev_a + prev_b, a, prev_a\n    \n    return a\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1759,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    A = 4 * math.pi * r**2\n    return A\n",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793, \"Error: surfacearea_sphere() function is not working properly for radius=5.\"",
        "num_ids": 1891,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (n * 2 - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"Test case 1 failed\"",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} ",
        "num_ids": 2449,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert freq_count([1,2,3,2,1,4,5,4]) == {1: 2, 2: 2, 3: 1, 4: 2, 5: 1} ",
        "num_ids": 2356,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 34,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # Find the closest smaller number than n\n    closest_num = N - 1\n    \n    # Check if the closest number is smaller than 0\n    if closest_num < 0:\n        return None\n    \n    # Return the closest number\n    return closest_num\n",
        "test": "assert closest_num(0) == None",
        "num_ids": 1937,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([\"apple\", \"banana\", \"cherry\"]) == 6 ",
        "num_ids": 1531,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"worlds\") == False",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 3:\n        return False\n    else:\n        diff = n - 3\n        for i in range(diff):\n            if n - 2*i - 1 < 0:\n                return False\n        return True ",
        "test": "assert is_undulating(34567) == False ",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2, 3) == 8 # Test Case 1: Check if 2^3 = 8",
        "num_ids": 1229,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]",
        "test": "assert index_minimum([(3, 4), (2, 1), (1, 3)]) == 2  # test case 4",
        "num_ids": 2500,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    min_length = len(lst[0])\n    for l in lst:\n        if len(l) < min_length:\n            min_length = len(l)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2 # expected output: 2",
        "num_ids": 2420,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 1596,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def frequency_lists(list1):\n    # create an empty dictionary to store the frequencies\n    freq_dict = {}\n    # loop through each element in the flattened list of lists\n    for elem in flatten(list1):\n        # if the element is already in the dictionary, increment its count\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq_dict[elem] = 1\n    # return the dictionary of frequencies\n    return freq_dict\n\n\ndef flatten(lst):\n    '''\n    Helper function to flatten a list of lists into a single list.\n    '''\n    flat_lst = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat_lst.extend(flatten(elem))\n        else:\n            flat_lst.append(elem)\n    return flat_lst\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 3487,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([10]) == 10.0",
        "num_ids": 1865,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = []\n    while n > 0:\n        binary.append(n % 2)\n        n //= 2\n    return \"\".join(str(x) for x in binary[::-1])",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 1507,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def next_smallest_palindrome(num):\n    # Convert num to a string and reverse it\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n\n    # If num_str == num_str_rev, return num+1\n    if num_str == num_str_rev:\n        return num + 1\n\n    # Otherwise, find the index where num_str and num_str_rev differ\n    for i in range(len(num_str)):\n        if num_str[i] != num_str_rev[i]:\n            break\n\n    # Add the appropriate number of zeros to the end of num_str\n    num_str += '0'*(len(num_str)-i)\n\n    # Swap num_str[i] and num_str_rev[i]\n    num_str_swap = list(num_str)\n    num_str_swap[i], num_str_swap[len(num_str)-i-1] = num_str_swap[len(num_str)-i-1], num_str_swap[i]\n    num_str_swap = ''.join(num_str_swap)\n\n    # Convert num_str_swap back to an integer\n    return int(num_str_swap)\n",
        "test": "assert next_smallest_palindrome(12321) == 12322",
        "num_ids": 3868,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 # check if kth_element returns the correct value for k=1",
        "num_ids": 2049,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return \"\"\n    \n    words = word.split(\"_\")\n    camel_case_word = words[0].lower() + \"\".join(w.title() for w in words[1:])\n    return camel_case_word\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 1744,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the list of exponents\n    exponents = [0] * (n+1)\n    # Calculate the exponents\n    for i in range(1, n+1):\n        exponents[i] = exponents[i-1] + 1\n    # Calculate the Eulerian number\n    result = 1\n    for i in range(1, m+1):\n        result *= exponents[i]\n    return result\n",
        "test": "assert eulerian_num(1,1) == 1",
        "num_ids": 2076,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish']]",
        "num_ids": 2989,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, False]) == 2  # should return 2 because there are 2 true booleans in the list",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def add_lists(test_list, test_tup):\n    # convert tuple to list\n    test_list = list(test_list)\n    # append tuple to list\n    test_list.extend(test_tup)\n    # convert list back to tuple\n    test_list = tuple(test_list)\n    return test_list\n",
        "test": "assert add_lists([7, 8, 9], ()) == (7, 8, 9) ",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    \n    for num in num1:\n        heapq.heappush(heap, num)\n        \n    for num in num2:\n        heapq.heappush(heap, num)\n        \n    for num in num3:\n        heapq.heappush(heap, num)\n        \n    return [heapq.heappop(heap) for _ in range(len(heap))]\n",
        "test": "assert merge_sorted_list([1,2,3],[4,5],[6,7]) == [1,2,3,4,5,6,7]",
        "num_ids": 3906,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num_odd = 0\n    \n    # Rotating the string n times\n    for i in range(n):\n        s = s[-1] + s[:-1]\n    \n    # Counting the number of odd numbers in the string\n    for i in range(len(s)):\n        if s[i] == '1':\n            num_odd += 1\n    \n    return num_odd\n",
        "test": "assert odd_Equivalent(\"0000\", 4) == 0",
        "num_ids": 2583,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist[0])):\n        for j in range(1, len(nestedlist)):\n            if nestedlist[0][i] == nestedlist[j][i]:\n                common_elements.append(nestedlist[0][i])\n                break\n    return common_elements\n",
        "test": "assert common_in_nested_lists([[1,2],[3,4,5],[6,7],[8,9]]) == []",
        "num_ids": 3047,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True, \"Error: check_integer did not return True for a string representing an integer\"",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 37,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) != 0:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {}]) == True",
        "num_ids": 1305,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # Convert each digit in the tuple to a string and concatenate them\n    result = \"\"\n    for num in nums:\n        result += str(num)\n    \n    # Convert the concatenated string to an integer\n    return int(result)\n",
        "test": "assert tuple_to_int((0, 0, 0)) == 0",
        "num_ids": 2035,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4.5, 6, 7.9]]) == [[1.0, 2.0, 3.0], [4.5, 6.0, 7.9]]",
        "num_ids": 3148,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"Hello World\") == [\"Hello\", \"World\"] ",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 390,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    for i in range(0, n-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    \n    return arr[-1]\n",
        "test": "assert search([1, 1, 2, 2, 3, 4, 4, 5, 5]) == 3",
        "num_ids": 3509,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i != j:\n                prod = abs(list1[i][0] * list1[j][0])\n                if prod > max_prod:\n                    max_prod = prod\n    return max_prod\n",
        "test": "assert max_product_tuple([(0,-1,0),(-1,0,1)]) == 0",
        "num_ids": 2577,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    def get_divisors_sum(num):\n        '''\n        Helper function to find the sum of divisors of a given number.\n        '''\n        divisors_sum = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num == get_divisors_sum(get_divisors_sum(num)):\n            amicable_sum += num\n\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(40) == 210, \"The sum of amicable numbers from 1 to 40 is incorrect.\"",
        "num_ids": 3376,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))\n",
        "test": "assert angle_complex(1,0) == 0 ",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def find_length(string):\n    max_diff = 0\n    ones = 0\n    zeros = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            ones += 1\n            if ones - zeros > max_diff:\n                max_diff = ones - zeros\n        elif string[i] == '0':\n            zeros += 1\n    return max_diff\n",
        "test": "assert find_length(\"11000101010101\") == 2",
        "num_ids": 4771,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the list of common divisors\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n\n    # Return the sum of common divisors\n    return sum(divisors)\n",
        "test": "assert sum(7, 8) == 28, \"Incorrect sum of 7 and 8\"",
        "num_ids": 2437,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "test": "assert multiply_int(2, 3) == 6  # check that it multiplies 2 by 3 correctly",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def long_words(n, str_list):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str_list:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(7, \"please help me\") == []",
        "num_ids": 2129,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check rows\n    for row in my_matrix:\n        if sum(row) != sum(my_matrix[0]) or len(set(row)) != len(my_matrix[0]):\n            return False\n    \n    # Check columns\n    for j in range(len(my_matrix[0])):\n        col_sum = 0\n        for i in range(len(my_matrix)):\n            col_sum += my_matrix[i][j]\n        if sum(my_matrix[0]) != col_sum or len(set([my_matrix[i][j] for i in range(len(my_matrix))])) != len(my_matrix[0]):\n            return False\n    \n    # Check diagonals\n    diag1_sum = diag2_sum = 0\n    for i in range(len(my_matrix)):\n        diag1_sum += my_matrix[i][i]\n        diag2_sum += my_matrix[i][len(my_matrix)-i-1]\n    if sum(my_matrix[0]) != diag1_sum or sum(my_matrix[0]) != diag2_sum:\n        return False\n    \n    # Check if the sum of each row, column, and diagonal is equal to the sum of the first row\n    for i in range(1, len(my_matrix)):\n        if sum(my_matrix[i]) != sum(my_matrix[0]):\n            return False\n    \n    return True\n",
        "test": "assert magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 3]]) == False ",
        "num_ids": 4634,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5]) == 1, \"Incorrect result for [1, 2, 3, 4, 5]\" ",
        "num_ids": 2934,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s = s[:left] + s[right] + s[left+1:right] + s[left] + s[right+1:]\n            left += 1\n            right -= 1\n    \n    return s\n",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 2598,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 1600,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 2107,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 28,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "test": "assert hexagonal_num(1) == 1, \"The first hexagonal number should be 1.\"",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0, \"Error in zero_count function\"",
        "num_ids": 2370,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    \n    while n > 0:\n        power = 0\n        while n & 1 == 0:\n            power += 1\n            n >>= 1\n        if power > 0:\n            if n == 1:\n                return True\n            elif n == 0:\n                return False\n        else:\n            return False\n\nprint(is_Sum_Of_Powers_Of_Two(10)) # Output: True\nprint(is_Sum_Of_Powers_Of_Two(15)) # Output: True\nprint(is_Sum_Of_Powers_Of_Two(16)) # Output: False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(27) == False ",
        "num_ids": 2939,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(0) == 0, \"Incorrect calculation for circle_circumference(0)\"",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def extract_singly(test_list):\n    # Initialize an empty set to store the numbers\n    numbers = set()\n    \n    # Iterate over the elements of the list\n    for item in test_list:\n        # If the item is a list, iterate over its elements and add them to the set\n        if isinstance(item, list):\n            for number in item:\n                numbers.add(number)\n        # If the item is not a list, add it to the set\n        else:\n            numbers.add(item)\n    \n    # Return the set of numbers\n    return numbers\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}  # test 1",
        "num_ids": 2395,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 35,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Pancake Sorting algorithm.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the maximum number in the list\n        max_num = nums[0]\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > max_num:\n                max_num = nums[i]\n                max_index = i\n\n        # If the maximum number is not at the beginning of the list,\n        # reverse the list up to the maximum number and move it to the beginning\n        if max_index != 0:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n\n        # Reverse the entire list to put the maximum number at the beginning\n        nums[:n] = reversed(nums[:n])\n\n        # Reduce the list size by one\n        n -= 1\n\n    return nums",
        "test": "assert pancake_sort([1,2,3]) == [1,2,3]",
        "num_ids": 3986,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[4,5,6],[7,8,9]) == 0",
        "num_ids": 2443,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1,2,3)) == 0 ",
        "num_ids": 1406,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables to store the minimum and maximum values of the array\n    min_val = arr[0]\n    max_val = arr[0]\n    # Iterate through the array and update the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    # Return the maximum absolute difference between the minimum and maximum values\n    return max(abs(max_val - min_val), abs(arr[-1] - min_val), abs(max_val - arr[0]))\n",
        "test": "assert max_Abs_Diff([0, 0, 0]) == 0 # edge case",
        "num_ids": 2310,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if n % b == 0:\n            return (0, n//b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n//a, 0)\n        else:\n            return None\n    else:\n        x = 0\n        y = n//a\n        while y >= 0:\n            if a*x + b*y == n:\n                return (x, y)\n            x += 1\n            y -= 1\n        return None\n",
        "test": "assert find_solution(1, 2, 0) == (0, 0)",
        "num_ids": 3429,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set from list2 for faster membership testing\n    set2 = set(list2)\n    # create a new list with all elements from list1 that are not in list2\n    new_list = [elem for elem in list1 if elem not in set2]\n    return new_list\n",
        "test": "assert remove_elements([1,2,3,4,5,6],[7,8]) == [1,2,3,4,5,6] # test case 2",
        "num_ids": 2433,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_series(n):\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1492,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "",
        "test": "assert area_polygon(6, 7) == 10.39 ",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Get all the divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    # Add the reciprocals of the divisors to get the sum of divisors\n    div_sum = sum([2*i if n % i == 0 else i for i in divisors])\n    # Get all the divisors of div_sum\n    div_sum_divisors = [i for i in range(1, int(math.sqrt(div_sum))+1) if div_sum % i == 0]\n    # Check if the sum of divisors of n and div_sum are the same\n    if sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]) == sum([i for i in range(1, int(math.sqrt(div_sum))+1) if div_sum % i == 0]):\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(9) == False # sum of divisors of 3 and 3 is 9 and 18, respectively, so they should not be the same.",
        "num_ids": 3545,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97).lower():\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"\") == 0, \"Incorrect output for an empty string\"",
        "num_ids": 2152,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([]) == 0",
        "num_ids": 1922,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(0) == 1 ",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count",
        "test": "assert frequency([1,2,3,4,5], 3) == 1, \"Error in frequency function\"",
        "num_ids": 1879,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check that m and n are within range\n    if m < 0 or n >= len(list1) or m > n:\n        return None\n    else:\n        # sum the numbers in the range\n        total = 0\n        for i in range(m, n+1):\n            total += list1[i]\n        return total\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 2661,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a",
        "test": "assert perimeter_pentagon(1) == 5 # since each side of a regular pentagon has length 1 and the perimeter is the sum of its five sides. ",
        "num_ids": 1920,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while True:\n        index = s.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 3\n    return count\n",
        "test": "assert count_occurance(\"\") == 0, \"The count_occurance function is not correct for the input ''\"",
        "num_ids": 1753,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    first_type = type(test_tuple[0])\n    \n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i]) != first_type:\n            return False\n    \n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True ",
        "num_ids": 1825,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5, 5, 5, 5, 6], 9, 6) == False",
        "num_ids": 2573,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 3233,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result",
        "test": "assert odd_values_string(\"hello\") == \"hlo\" ",
        "num_ids": 1549,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 1551,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].count('1') > 0:\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b001110101010001, 8, 27) == False",
        "num_ids": 2554,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def re_arrange_array(arr, n):\n    neg = [num for num in arr[:n] if num < 0]\n    pos = [num for num in arr[:n] if num >= 0]\n\n    arr[:n] = neg + pos\n\n    return arr\n",
        "test": "assert re_arrange_array([1], 1) == [1]",
        "num_ids": 3197,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ', char)\n    return new_string\n",
        "test": "assert replace_blank(\"\", \"*\") == \"\"",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert larg_nnum([1, 1, 1, 1, 1], 3) == [1, 1, 1]",
        "num_ids": 2641,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder using the formula 2\u03c0rh.\n    '''\n    # Calculate the lateral surface area using the formula 2\u03c0rh\n    lateral_surface_area = 2 * math.pi * r * h\n    # Return the lateral surface area\n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(0, 7) == 0, \"Incorrect lateral surface area of a cylinder with radius 0\" ",
        "num_ids": 2304,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "test": "assert volume_cube(2) == 8 ",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty binary number\n    binary_number = ''\n\n    # Convert the decimal number to binary and append each bit to the binary_number\n    while n > 0:\n        binary_number = str(n % 2) + binary_number\n        n //= 2\n\n    # Set all even bits to 1\n    even_bit_set = ''\n    for i in range(len(binary_number)):\n        if i % 2 == 1:\n            even_bit_set += binary_number[i]\n        else:\n            even_bit_set += '1'\n\n    # Convert the binary number to decimal and return the result\n    decimal_number = 0\n    for i in range(len(even_bit_set)):\n        decimal_number += int(even_bit_set[i]) * (2 ** (len(even_bit_set) - i - 1))\n\n    return decimal_number\n",
        "test": "assert even_bit_set_number(10) == 10, \"Function should return 10\" ",
        "num_ids": 2699,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_obj = Counter(test_list)\n    return dict(counter_obj)\n",
        "test": "assert check_occurences([(1, 2), (1, 2), (3, 4), (3, 4)]) == {(1, 2): 2, (3, 4): 2}",
        "num_ids": 3591,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count",
        "test": "assert number_of_substrings(\"aa\") == 3, \"String 'aa' should have 3 substrings\"",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count to 0\n    count = 0\n    \n    # Define a function to generate all possible sequences of length n\n    def generate_sequences(sequence, i):\n        # If we have reached the end of the sequence, increment the count\n        if i == n:\n            nonlocal count\n            count += 1\n            return\n        \n        # Generate all possible next elements for the current sequence\n        next_elements = []\n        for j in range(len(sequence)):\n            next_elements.append(sequence[j] * 2)\n            next_elements.append(sequence[j] * 3)\n        \n        # Filter out elements that are greater than m or less than twice the previous element\n        next_elements = [x for x in next_elements if x <= m and (i == 0 or x >= sequence[-1] * 2)]\n        \n        # Recursively generate all possible sequences for the remaining elements\n        for x in next_elements:\n            generate_sequences(sequence + [x], i + 1)\n    \n    # Generate all possible sequences of length n\n    generate_sequences([1], 1)\n    \n    # Return the count\n    return count\n",
        "test": "assert get_total_number_of_sequences(5, 5) == 0  # There is no sequence of length 5, such that each element is between 2 and 5",
        "num_ids": 3212,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1",
        "test": "assert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, [4, 5, 6]]",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Python\") == 6, \"Incorrect count\" ",
        "num_ids": 1345,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = N\n    while True:\n        square += 1\n        if math.sqrt(square).is_integer():\n            return square\n",
        "test": "assert next_Perfect_Square(20) == 25, \"Function should return 25\"",
        "num_ids": 1983,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    inc = dec = [0] * n\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], dec[i-1])\n        dec[n-i-1] = max(dec[n-i] - arr[n-i-1], inc[n-i-1])\n    return max(inc[n-1], dec[0])\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 3110,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess\n",
        "test": "assert babylonian_squareroot(4) == 2.0, \"Error in babylonian_squareroot\"",
        "num_ids": 2179,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0 or n == 1:\n        return n\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n",
        "test": "assert lps(\"aba\") == 3",
        "num_ids": 2838,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return sum(1.0/i for i in range(1, n+1))",
        "test": "assert harmonic_sum(1) == 1.0, \"harmonic_sum(1) should be 1.0\"",
        "num_ids": 2009,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1, 2, 3], [4, 5, 6]) == []  # Empty array",
        "num_ids": 2434,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((), 1) == 0, \"Test case 1 failed\"",
        "num_ids": 2037,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def insert_element(list, element):\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1], 0) == [0, 1]  # Check if the function works with single-element lists",
        "num_ids": 1884,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    # Check if input is a list or a single number\n    if isinstance(numbers, list):\n        # Loop through the list and convert each number to polar coordinates\n        result = []\n        for num in numbers:\n            r = abs(num)\n            theta = cmath.phase(num)\n            result.append((r, theta))\n        return result\n    else:\n        # Convert single number to polar coordinates\n        r = abs(numbers)\n        theta = cmath.phase(numbers)\n        return r, theta\n",
        "test": "assert convert((0+0j)) == (0, 0)",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([1,2,3],2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 5104,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i % j != 0 for j in range(2, i)):\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4  # 2, 3, 5, 7 are prime numbers less than 10",
        "num_ids": 2287,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1) # test case 1",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += test_tup1[i],\n        else:\n            max_tup += test_tup2[i],\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 3083,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n",
        "test": "assert newman_prime(1) == 2 ",
        "num_ids": 3961,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i], )\n    return result\n",
        "test": "assert division_elements((1, 2, 3, 4), (2, 4, 6, 8)) != (1, 1, 1, 1) ",
        "num_ids": 2596,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    if L > len(list1):\n        raise ValueError(\"L cannot be greater than the length of the list\")\n    \n    return list1[:L], list1[L:]\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5]) # test case 1",
        "num_ids": 2658,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def dog_age(human_age):\n    '''\n    Calculates a dog's age in dog years based on its human age.\n    \n    Args:\n        human_age: an integer representing the dog's age in human years\n    \n    Returns:\n        an integer representing the dog's age in dog years\n    '''\n    \n    # There are 7 dog years for every 1 human year.\n    dog_years = human_age * 7\n    \n    return dog_years\n",
        "test": "assert dog_age(4) == 43, \"Incorrect output for age 4\"",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    temp = []\n    for i in range(len(S)):\n        temp.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(temp)\n            temp = []\n    if temp:\n        result.append(temp)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ",
        "num_ids": 2733,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(3) == 54 ",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    sum = 0\n    i = 1\n    while n > 0:\n        sum += i*i\n        n -= 1\n        i += 2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1788,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + find_star_num(n-1)\n",
        "test": "assert find_star_num(1) == 1, \"Error in function find_star_num\"",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 1132,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 5, 6]) == 12",
        "num_ids": 2322,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**5\n    return total",
        "test": "assert even_Power_Sum(1) == 1 ",
        "num_ids": 2155,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def rear_extract(test_list):\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6)]) == [3, 6]",
        "num_ids": 2131,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)",
        "test": "assert substract_elements((3, 5, 7), (1, 2, 4)) == (2, 3, 3)",
        "num_ids": 2638,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 2001,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(1, 1) == 3.14  # test case for smaller values",
        "num_ids": 1697,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def dict_filter(dictionary, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert dict_filter({1: 2, 3: 4, 5: 6}, 3) == {3: 4, 5: 6}",
        "num_ids": 2400,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # The nth decagonal number is the sum of the first n natural numbers\n    decagonal_num = sum(range(1, n+1))\n    return decagonal_num\n",
        "test": "assert is_num_decagonal(0) == 0",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n    if found:\n        return (True, i)\n    else:\n        return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2) # Test case 1",
        "num_ids": 2123,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True ",
        "num_ids": 1731,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) != [4,5,6] # example 4",
        "num_ids": 2112,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def validate(n):\n    # convert the integer to a string\n    num = str(n)\n    # loop through each digit in the string\n    for digit in num:\n        # check if the frequency of the digit is greater than the digit itself\n        if num.count(digit) > int(digit):\n            return False\n    # return True if all conditions are met\n    return True\n",
        "test": "assert validate(12345) == True, \"Failed on 12345\"",
        "num_ids": 4158,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != elem:\n            return False\n    return True\n",
        "test": "assert check_element([1,2,3], 1) == False # check if 1 is not present in the list ",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*b.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abbb\") == True",
        "num_ids": 1498,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Repeat the array k times\n    a_repeated = a * k\n\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the modified array\n    for num in a_repeated:\n        # Add the current number to the current sum\n        current_sum += num\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 1, 1) == -1  # repeated array [-1, -2, -3, -4, -5] once",
        "num_ids": 4405,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return max_length",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8]]) == 3 # Example 1",
        "num_ids": 2811,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 390,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1 or k == 1:\n        return 1\n    \n    # If we have an even number of posts, we can choose any two adjacent posts to paint the same color\n    if n % 2 == 0:\n        return count_no_of_ways(n-1, k) * k\n    \n    # If we have an odd number of posts, we can paint the first and last posts different colors, then recursively count the number of ways for the remaining posts\n    return count_no_of_ways(n-2, k) * (k - 1) * 2\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 3055,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(2, 4) == 0  # check if the function returns the correct value for (2, 4)",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    # Calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    return hypotenuse\n",
        "test": "assert otherside_rightangle(4,3) == 5 # w = 4, h = 3, a = 5 ",
        "num_ids": 1632,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def max_val(lst):\n    max_val = lst[0]\n    for val in lst:\n        if isinstance(val, (int, float)) and val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5 ",
        "num_ids": 2054,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(1) == 1  # sum of divisors of 1 is 1",
        "num_ids": 2048,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 2707,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1, [2, 3, [4, 5]], 6, [7]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 2657,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create an empty defaultdict to store the aggregate for each student\n    agg = defaultdict(int)\n    # Loop through the list of tuples\n    for student, score in stdata:\n        # Update the aggregate for the student\n        agg[student] += score\n    # Find the maximum aggregate\n    max_agg = max(agg.values())\n    return max_agg\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]) != 10 # correct answer is 20",
        "num_ids": 3922,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # First, check that n is a positive integer\n    if n <= 0:\n        return 0\n    \n    # Initialize variables\n    count = 0\n    first_sum = 0\n    last_sum = 0\n    \n    # Loop over all possible sums for the first n bits\n    for i in range(2**n):\n        # Compute the sum for this binary sequence\n        first_sum = sum(int(x) for x in bin(i)[2:].zfill(n))\n        \n        # Check if the sum is valid\n        if first_sum == last_sum:\n            # If so, count this sequence\n            count += 1\n        \n        # Update the sum for the last n bits\n        last_sum = (last_sum - first_sum) % 2\n    \n    # Return the count of valid binary sequences\n    return count\n",
        "test": "assert count_binary_seq(1) == 1, \"Error in count_binary_seq(1)\"",
        "num_ids": 2804,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def dict_depth(d):\n    if not d:\n        return 0\n    elif isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n",
        "test": "assert dict_depth({}) == 0 # Test an empty dictionary",
        "num_ids": 2047,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the original range\n    original_range = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            original_range = i\n        else:\n            break\n\n    # Calculate the shift due to rotations within the original range\n    shift = sum(rotations[:original_range]) % len(arr)\n\n    # Calculate the index within the original range\n    original_index = (index - shift) % len(arr)\n\n    # Find the element at the original index\n    return arr[original_index]\n",
        "test": "assert find_Element([1,2,3,4,5], [1,3], [2,1], 0) == 1  # correct rotation",
        "num_ids": 3298,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "import re\n\ndef start_withp(words):\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return p_words",
        "test": "assert start_withp(['python', 'java', 'php', 'python', 'perl']) == ['python', 'php']  # Test case 1 ",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n\n    # Initialize variables\n    max_sum = dp[index]\n    temp_sum = dp[index]\n\n    # Iterate through the remaining elements\n    for i in range(index+1, n):\n        if i <= k-1:\n            temp_sum = max(temp_sum + a[i], a[i])\n        else:\n            break\n\n        max_sum = max(max_sum, temp_sum)\n\n    return max_sum",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 1) == 1  # 1",
        "num_ids": 4729,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex) or m < 0 or n < 0:\n        return None\n    else:\n        colon_tuplex = deepcopy(tuplex[m:n])\n        return colon_tuplex",
        "test": "assert colon_tuplex((1,2,3,4,5,6), 2, 0) == () ",
        "num_ids": 2429,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def large_product(nums1, nums2, N):\n    # Ensure that the two input lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must have the same length.\")\n    \n    # Initialize a list to store the products\n    products = []\n    \n    # Iterate over the input lists\n    for i in range(len(nums1)):\n        # Multiply the corresponding elements from the two input lists\n        product = nums1[i] * nums2[i]\n        \n        # Add the product to the list of products\n        products.append(product)\n        \n        # Sort the list of products in descending order\n        products.sort(reverse=True)\n        \n        # If the list has more than N elements, remove the smallest element until it has N elements\n        if len(products) > N:\n            products.pop()\n    \n    # Return the N largest products\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 0) == [] # test case 4",
        "num_ids": 3085,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 10) == 10 # test case 1",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 1431,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 1 == 0:\n        return n | 1\n    else:\n        left_bit = n & (n - 1)\n        return left_bit | (left_bit + 1)\n",
        "test": "assert set_left_most_unset_bit(0) == 1 ",
        "num_ids": 1972,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(0, 0) == 0  # check if volume of a cone with radius 0 and height 0 is 0",
        "num_ids": 1786,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1311,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the nth lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1672,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n",
        "test": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"{0} is a fruit\") == [\"apple is a fruit\", \"banana is a fruit\", \"cherry is a fruit\"]",
        "num_ids": 1843,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n\n    # Loop over the indices of the input lists\n    for i in range(len(l1)):\n        # Create a key-value pair for the current index\n        result[l1[i]] = {l2[i]: l3[i]}\n\n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2425,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    memo = {}\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        if x <= 1:\n            return x\n        memo[x] = max(helper(x//2) + helper(x//3) + helper(x//4) + helper(x//5), x)\n        return memo[x]\n    return helper(n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 2014,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2],[3,4,5],[6,7]]) == [3,4,5] # list of length 3",
        "num_ids": 1971,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1,2,3,4,5)) == True",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to keep track of character frequencies\n    char_freq = {}\n    # iterate through the string, adding each character to the dictionary and incrementing its count if it's already there\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # iterate through the string again, looking for the first character with a frequency of 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    # if there are no non-repeated characters, return None\n    return None\n",
        "test": "assert first_non_repeating_character('hello') == 'h'",
        "num_ids": 2380,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string, re.IGNORECASE)\n    return bool(match)",
        "test": "assert check_char(\"python\") == False",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "test": "assert median_numbers(3, 5, 1) == 3  # Example: median of 3, 5, and 1 is 3",
        "num_ids": 1683,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result\n",
        "test": "assert sum_of_digits([12, 23, 34]) == [3, 5, 7], \"Error in sum_of_digits function\"",
        "num_ids": 2054,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert tuples to lists so they can be modified\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Perform bitwise xor on corresponding elements of the tuples\n    for i in range(len(test_list1)):\n        test_list1[i] ^= test_list2[i]\n    \n    # Convert lists back to tuples and return\n    return tuple(test_list1)\n",
        "test": "assert bitwise_xor((0,0,0,0,1,1,1,1), (1,1,1,1,0,0,0,0)) == (1,1,1,1,1,1,1,1)",
        "num_ids": 2925,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set of tuples\n    set_of_tuples = set(tuple(sorted(i)) for i in test_list)\n    # Return the length of the set of tuples\n    return len(set_of_tuples)\n",
        "test": "assert extract_freq([(1,2), (3,4), (1,2), (5,6), (1,2), (3,4)]) == 3",
        "num_ids": 3905,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))",
        "num_ids": 3814,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(3,4) == 3 # returns True if minimum(3,4) is equal to 3",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex(\"apple\", (\"apple\", \"banana\", \"cherry\")) == True ",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert find_Parity(0) == True  # Test Case 1",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the sorted digits back to a number\n    next_bigger = int(''.join([str(d) for d in digits]))\n\n    # Check if the input number is the largest possible number\n    if next_bigger == 0:\n        return None\n    else:\n        return next_bigger\n",
        "test": "assert rearrange_bigger(999) == 999  # for example, 999 -> 999",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a list of tuples with the first element of nums1 and the second element of nums2 and heapify it.\n    pairs = list(zip(nums1, nums2))\n    heapq.heapify(pairs)\n    \n    # Create a list to store the smallest k pairs.\n    result = []\n    \n    # Iterate over the first k elements of the heap and append them to the result list.\n    for i in range(k):\n        if i < len(pairs):\n            result.append(pairs[i])\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1,1,1,1], [1,1,1,1], 1) == [(1, 1)] # Example case 4",
        "num_ids": 4192,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,1), (1,1), (1,1)]) == 1 # should return 1",
        "num_ids": 2616,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val < min_val:\n                min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1 ",
        "num_ids": 2969,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = re.findall(r\"[a-z]+\", word)\n    return words[0] + ''.join(word.title() for word in words[1:])\n\nprint(snake_to_camel(\"hello_world\"))  # Output: helloWorld\nprint(snake_to_camel(\"hello_world_is_it_me_you_are_looking_for\"))  # Output: helloWorldIsItMeYouAreLookingFor\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\" ",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "test": "assert remove_odd([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in list1:\n        if i[0] == n:\n            return i[1]\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == 2",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False",
        "num_ids": 1662,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables to store the maximum and minimum products\n    max_product = 0\n    min_product = 0\n    # Check for both negative and positive cases\n    if arr[0] > 0 and arr[-1] > 0:\n        # All positive numbers\n        max_product = arr[-1] * arr[-2]\n    elif arr[0] < 0 and arr[-1] < 0:\n        # All negative numbers\n        max_product = arr[0] * arr[1]\n    else:\n        # Mixed positive and negative numbers\n        max_product = max(arr[0] * arr[1], arr[-1] * arr[-2])\n    return max_product\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20, \"Incorrect output for [1, 2, 3, 4, 5]\" ",
        "num_ids": 3044,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elem = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elem.append(Input[i])\n                common_elem.append(Input[j])\n    return list(set(common_elem))\n",
        "test": "assert group_tuples([(1,2), (3,4), (5,6), (7,8)]) == [], \"Error: Common first element not found correctly\"",
        "num_ids": 4103,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n",
        "test": "assert round_and_sum([1.2, 3.5, 6.7]) == 28.2 ",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum\n",
        "test": "assert cube_Sum(1) == 1, \"cube_Sum(1) should be 1\"",
        "num_ids": 1804,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    delimiter = \",\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]\n",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    return total / n\n",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Function should return 1 for n=1\"",
        "num_ids": 2242,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"hello\", \"world\")) == (\"o\", \"d\")",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if isinstance(i, list):\n            if x in i:\n                count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 1, \"Test 1 failed\"",
        "num_ids": 2473,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 != 0, nums))\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]  # test 1",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return dt\n",
        "test": "assert change_date_format(\"2021-06-01\") == \"01-06-2021\" # Test 1",
        "num_ids": 2740,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] ",
        "num_ids": 2723,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result += (True,)\n        else:\n            result += (False,)\n    return result",
        "test": "assert and_tuples((True, True, True), (True, True, True)) == (True, True, True)",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        print(\"Parabola is not defined\")\n        return None\n\n    directrix = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return directrix\n",
        "test": "assert parabola_directrix(1, -4, 4) == 2",
        "num_ids": 2941,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2 + height) / 2\n    return median\n",
        "test": "assert median_trapezium(14,16,5) == 10 # base1 = 14, base2 = 16, height = 5",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1,2,3,4], 3) == True  # True, because 3 is greater than 2",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 29,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a([b]+)')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # convert the number to a string and get the last character as a string\n    last_digit = str(n)[-1]\n    # convert the last character to an integer\n    last_digit = int(last_digit)\n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 1422,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        if i < 0:\n            result.append(i)\n    return result",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4] ",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"\") == \"\" # test for empty string",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (3,4), (5,6)]) == 0 # no bidirectional pairs exist",
        "num_ids": 2884,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return int(\"\".join(map(str, L)))\n",
        "test": "assert multiple_to_single([345]) == 345 ",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "import re\n\ndef find_adverb_position(text):\n    adverbs = ['quickly', 'slowly', 'quick', 'slow']\n    for adverb in adverbs:\n        match = re.search(r'\\b' + adverb + r'\\b', text, re.IGNORECASE)\n        if match:\n            return (adverb, match.start())\n    return None\n",
        "test": "assert find_adverb_position(\"The dog chases its tail.\") == None, \"There should be no adverb in this sentence\"",
        "num_ids": 3394,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    # Calculate the surface area of a cube using the formula 6x^2\n    area = 6 * l ** 2\n    return area",
        "test": "assert surfacearea_cube(1) == 6 ",
        "num_ids": 1535,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert positive_count([1,2,3,4,5]) == 5/5",
        "num_ids": 1979,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num == None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([-2, -3, -4, -5, -6]) == -2",
        "num_ids": 1732,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = []\n        for j in range(len(test_list[i])):\n            if j >= K:\n                temp.append(test_list[i][j])\n        result.append(tuple(temp))\n    return result\n",
        "test": "assert trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 0) == [(1,2,3),(4,5,6),(7,8,9)]",
        "num_ids": 2997,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Get the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # Initialize an empty tuple to store the result\n    result = ()\n    # Iterate over the indices of the tuples\n    for i in range(min(len1, len2)):\n        # Multiply the corresponding elements and append to the result tuple\n        result += (test_tup1[i] * test_tup2[i],)\n    # Return the result tuple\n    return result\n",
        "test": "assert index_multiplication((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (2, 6, 12, 20, 30)",
        "num_ids": 2585,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    count_dict = {}\n    for elem in lst:\n        if elem in c:\n            count_dict[elem] = c[elem]\n    return count_dict\n",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5, 6, 7, 8, 9), []) == {} ",
        "num_ids": 2752,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube = num ** 3\n        cube_list.append(cube)\n    return cube_list\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]  # check if it returns [1, 8, 27] for the input [1, 2, 3]",
        "num_ids": 1936,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        num = str(i)\n        if num.count('1') == 1:\n            sum += i\n    return sum\n",
        "test": "assert cal_sum(0) == 0  # test case for n=0",
        "num_ids": 1684,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 29,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = \"\"\n    for i in range(l):\n        result += str[i]\n    return result",
        "test": "assert extract_string(\"hello world\", 5) == \"hello\"",
        "num_ids": 1614,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"  \") == \"\"",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(300, 300) == 0 ",
        "num_ids": 1692,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum to 0\n    sum = 0\n\n    # Find the square root of the given number\n    sqrt_n = math.sqrt(n)\n\n    # Loop through numbers from 2 to the square root of the given number\n    for i in range(2, int(sqrt_n) + 1):\n        # Check if the number is a factor of n\n        if n % i == 0:\n            # Check if the factor is even\n            if i % 2 == 0:\n                # If the factor is even, add it to the sum\n                sum += i\n            # If the factor is odd, check if its reciprocal is even\n            if n // i % 2 == 0:\n                # If the reciprocal is even, add it to the sum\n                sum += n // i\n\n    # Return the sum\n    return sum\n",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 1942,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return re.findall(pattern, text, re.IGNORECASE)\n",
        "test": "assert text_match_wordz(\"Burgerz\") == \"Burgerz\"",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months_with_31_days = [4, 6, 9, 11]\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False  # February has 28 days",
        "num_ids": 2385,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp'] ",
        "num_ids": 1706,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def Find_Min(lst):\n    min_length = len(lst)\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3],[4,5,6],[7,8]]) == [7,8] ",
        "num_ids": 2379,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5,6) == 30 ",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_uppercase(\"12345\") == \"12345\", \"Error: remove_uppercase() function does not work correctly.\"",
        "num_ids": 1665,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements\n",
        "test": "assert Extract([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]  # correct result ",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2 # expected result should be 2",
        "num_ids": 1429,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    import itertools\n    \n    # create a list of all possible combinations\n    combos = []\n    for i in range(1, len(list1)+1):\n        combos.extend(itertools.combinations(list1, i))\n    \n    # convert each combination to a list and return\n    return [list(combo) for combo in combos]\n",
        "test": "assert combinations_list([]) == [] ",
        "num_ids": 2639,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_subarray = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        if max_product > max_subarray:\n            max_subarray = max_product\n\n    return max_subarray\n",
        "test": "assert max_subarray_product([1, 2, 3, 4, 5]) == 120  # all positive array",
        "num_ids": 3063,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary is empty\n    if len(dict) == 0:\n        return False\n    # Check if all values are same\n    for key, value in dict.items():\n        if value != n:\n            return False\n    return True\n",
        "test": "assert not check_value({1: 2, 2: 3, 3: 4}, 2), \"All values are not the same\"",
        "num_ids": 2161,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # creating a new dictionary to store non-empty items\n    dict2 = {}\n    # iterating over items in the given dictionary\n    for key, value in dict1.items():\n        # checking if value is not empty and adding it to the new dictionary\n        if value:\n            dict2[key] = value\n    # returning the new dictionary with non-empty items\n    return dict2\n",
        "test": "assert drop_empty({\"a\":1, \"b\":2, \"c\":\"\", \"d\":4}) == {\"a\":1, \"b\":2, \"d\":4} ",
        "num_ids": 2134,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_so_far = max(max_so_far * arr[i], arr[i])\n            min_so_far = min(min_so_far * arr[i], arr[i])\n        else:\n            max_so_far = max(max_so_far * arr[i], -arr[i])\n            min_so_far = min(min_so_far * arr[i], -arr[i])\n\n        max_product = max(max_product, max_so_far)\n\n    return max_product ",
        "test": "assert max_product([-1, -1, -1, -1]) == 1  # Example test case 4",
        "num_ids": 3227,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1,2,3,4)) == (3, 5, 7)",
        "num_ids": 1829,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize the product as 1\n    product = 1\n    \n    # iterate through the array and multiply each element with the product\n    for i in arr:\n        product = (product * i) % n\n    \n    # return the product\n    return product\n",
        "test": "assert find_remainder([1, 2, 3], 5) == 1 # [1, 2, 3] modulo 5 = [1, 2, 3] = 1",
        "num_ids": 2143,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 1827,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # Convert the tuples to sets, which allow for faster membership testing\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets and return the tuple of common elements\n    return tuple(set1 & set2)\n",
        "test": "assert tuple_intersection((), []) == ()",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"L\") == \"heLLo\"  # Replaces the first 'l' with 'L'",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n",
        "test": "assert sort_counter({\"a\":5, \"b\":3, \"c\":4}) != {\"c\":4, \"b\":3, \"a\":3} # test case 3",
        "num_ids": 2552,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return min(nums) + max(nums)\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6  # example 2",
        "num_ids": 2040,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # using regex to match lowercase substrings and replace them with empty string\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1\n",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\" ",
        "num_ids": 1639,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    while n >= 10:\n        n = n // 10\n    return n\n",
        "test": "assert first_Digit(1234) == 1, \"Function not working as expected\"",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]  # Test 1",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n\n    return sum_numbers**2 - sum_cubes\n",
        "test": "assert difference(1) == 0, \"The result should be 0 for n=1\"",
        "num_ids": 1922,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])&1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 0, \"Incorrect output for [1,3,5,7,9]\" ",
        "num_ids": 2016,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"",
        "num_ids": 1490,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Find the length of the shorter list and pad the longer list with 0s\n    max_len = max(len(digits1), len(digits2))\n    digits1.extend([0] * (max_len - len(digits1)))\n    digits2.extend([0] * (max_len - len(digits2)))\n\n    # Find the difference between each corresponding digit and sum it up\n    diff_sum = 0\n    for i in range(max_len):\n        diff_sum += abs(digits1[i] - digits2[i])\n\n    return diff_sum\n",
        "test": "assert digit_distance_nums(0, 0) == 0, \"Incorrect sum of per-digit difference\"",
        "num_ids": 3639,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6 # example from the problem statement",
        "num_ids": 2832,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the two tuples to find the union of their elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n\n    # Convert the union set back to a sorted tuple and return it\n    union_tup = tuple(sorted(union_set))\n    return union_tup\n",
        "test": "assert union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6) # test case 1",
        "num_ids": 2566,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    current_length = 0\n    for item in lst:\n        if isinstance(item, list):\n            current_length = Find_Max_Length(item)\n        else:\n            current_length += 1\n        max_length = max(max_length, current_length)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3],[4,5],[6,7,8,9]]) == 4, \"Error: The function is not correct\"",
        "num_ids": 2278,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches\n",
        "test": "assert extract_values('The price is \"100\" dollars.') == ['100']",
        "num_ids": 1832,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3],3) == 3, \"Incorrect output for [1,2,3]\"",
        "num_ids": 2087,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']  # test case 1",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_digits(n):\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total",
        "test": "assert sum_digits(0) == 0, \"sum_digits(0) should return 0\"",
        "num_ids": 1784,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(0) == []  # Test for length 0",
        "num_ids": 2209,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([[\"hello\", \"world\"], [\"apple\", \"banana\", \"cherry\"]]) == [[\"hello\", \"world\"], [\"apple\", \"banana\", \"cherry\"]]",
        "num_ids": 2919,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty list to store unique numbers\n    unique_nums = []\n    # Loop through each number in the list of lists\n    for num in nums:\n        # Check if the number is already in the unique_nums list\n        if num not in unique_nums:\n            # If not, add the number to the unique_nums list\n            unique_nums.append(num)\n    # Return the unique_nums list\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == [] ",
        "num_ids": 2637,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120, \"The product of unique numbers should be 120\"",
        "num_ids": 1870,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Parameters:\n    r (float): Radius of the cylinder.\n    h (float): Height of the cylinder.\n    \n    Returns:\n    float: Surface area of the cylinder.\n    \"\"\"\n    import math\n    \n    # Calculate the circumference of the cylinder\n    circumference = 2 * math.pi * r\n    \n    # Calculate the surface area of the cylinder\n    surface_area = circumference + 2 * math.pi * r * h\n    \n    return surface_area\n",
        "test": "assert surfacearea_cylinder(4,1) == 50.26548245743669",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether list B is sublist of list A or not.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    \n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    \n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4], [5,6]) == False",
        "num_ids": 2326,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1729,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 2391,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 22,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == ()",
        "num_ids": 2828,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    # Define an empty list to store the even elements\n    even_list = []\n    \n    # Iterate through the nested tuple\n    for item in test_tuple:\n        # If the item is a tuple, recursively call the function\n        if isinstance(item, tuple):\n            even_list.append(even_ele(item, even_fnc))\n        # If the item is a number and it is even, append it to the list\n        elif isinstance(item, int) and even_fnc(item):\n            even_list.append(item)\n    \n    return tuple(even_list)\n",
        "test": "assert even_ele((), lambda x: x % 2 == 0) == ()",
        "num_ids": 2923,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 350,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + b*b*2\n",
        "test": "assert surface_Area(1, 2) == 6, \"Error in surface_Area() function\"  # base edge = 1, height = 2",
        "num_ids": 1982,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 1261,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    else:\n        c = 0\n        for i in range(n):\n            c += catalan_number(i) * catalan_number(n-i-1)\n        return c",
        "test": "assert catalan_number(0) == 1  # Catalan number 0 is 1",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b([a-zA-Z]+ly)\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group(1)\n        positions = [m.start() for m in re.finditer(r'\\b'+adverb+r'\\b', text)]\n        return (adverb, positions)\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"He always tries to be on time.\") == (('always', 4, 10),)",
        "num_ids": 2645,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a heap of n elements from the items list\n    heap = heapq.nlargest(n, items)\n    # Sort the heap in descending order\n    heap.sort(reverse=True)\n    return heap\n",
        "test": "assert expensive_items([(1, 2), (3, 4), (5, 6)], 0) == []  # Test with n=0",
        "num_ids": 3233,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    return l[:n] + l[n:]",
        "test": "assert split_Arr([1,2,3,4,5], 0) == [1,2,3,4,5] # returns the original list because the split index is not valid",
        "num_ids": 2250,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)  # check if the function returns a tuple",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    if not nums:\n        return None\n    min_num = max_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num - min_num\n",
        "test": "assert big_diff([10, 100, 50, 20]) == 90, \"Incorrect output for [10, 100, 50, 20]\"",
        "num_ids": 1816,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    perfect_squares_list = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            perfect_squares_list.append(num)\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(1, 10) != [1, 4, 9, 16, 25, 36]",
        "num_ids": 2666,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \n    Args:\n    r: The distance from the origin to the point on the Cartesian plane.\n    theta: The angle between the positive x-axis and the line connecting the origin to the point.\n    \n    Returns:\n    A tuple containing the x and y coordinates of the point in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)",
        "test": "assert polar_rect(2,0) == (2, 0)",
        "num_ids": 1745,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List should have at least two elements.\")\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4]) == [4, 2, 3, 1] # test case 1",
        "num_ids": 2056,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    if n - k < k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\n\ndef sum_of_product_consecutive_binomial_coefficients(n):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_product = 0\n    for k in range(1, n + 1):\n        sum_product += binomial_Coeff(n, k)\n    return sum_product\n",
        "test": "assert binomial_Coeff(0,0) == 1",
        "num_ids": 2601,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Using regular expression to match and remove leading zeros from each octet of the ip address\n    octet_pattern = r'^0*(\\d+)'\n    ip_parts = re.split(r'\\.', ip)\n    clean_ip_parts = [re.sub(octet_pattern, r'\\1', octet) for octet in ip_parts]\n    clean_ip = '.'.join(clean_ip_parts)\n    return clean_ip\n",
        "test": "assert removezero_ip(\"100.200.255.255\") == \"100.200.255.255\"",
        "num_ids": 2580,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even = 0\n    odd = 0\n\n    for i in list1:\n        if i % 2 == 0 and not even_found:\n            even = i\n            even_found = True\n        elif i % 2 != 0 and not odd_found:\n            odd = i\n            odd_found = True\n        if even_found and odd_found:\n            break\n\n    return abs(even - odd)\n",
        "test": "assert diff_even_odd([4, 2, 6, 1]) == 3",
        "num_ids": 2796,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of digits\n    nums1 = [int(digit) for digit in str1]\n    nums2 = [int(digit) for digit in str2]\n\n    # Initialize the count of swaps and the indices\n    swaps = 0\n    i = j = 0\n\n    # Iterate through the lists\n    while i < len(nums1) and j < len(nums2):\n        # If the digits are the same, move to the next pair\n        if nums1[i] == nums2[j]:\n            i += 1\n            j += 1\n        # If the digits are different, swap the digits and increment the count\n        else:\n            nums1[i], nums1[j] = nums1[j], nums1[i]\n            swaps += 1\n            i += 1\n            j += 1\n\n    # If there are still digits left in nums2, add the count to the swaps\n    if j < len(nums2):\n        swaps += len(nums2) - j\n\n    return swaps\n",
        "test": "assert min_Swaps(\"1010\", \"1010\") == 0",
        "num_ids": 3666,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size((1, \"hello\", (2, 3, 4))) == 78  # tuple with a mix of elements",
        "num_ids": 1616,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the lengths of both arrays\n    n1, n2 = len(arr1), len(arr2)\n    \n    # If k is greater than the sum of the lengths of the arrays,\n    # return None\n    if k > n1 + n2:\n        return None\n    \n    # If k is less than or equal to the length of arr1,\n    # we can return the element at index k-1 from arr1\n    if k <= n1:\n        return arr1[k-1]\n    \n    # If k is greater than the length of arr1,\n    # we need to find the element from arr2 that is k-n1-1\n    # away from the beginning of arr2 (since arr2 is sorted)\n    else:\n        return arr2[k-n1-1]\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8, 10], 1) == 1",
        "num_ids": 4385,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    length = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit)**length\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 2680,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_numbers = sum(range(1, number+1))\n    average = sum_numbers / number\n    return sum_numbers, average\n",
        "test": "assert sum_average(1) == (1, 1.0) ",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True ",
        "num_ids": 1189,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    \n    return None\n",
        "test": "assert first_repeated_char('hello') == 'l'",
        "num_ids": 2164,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if sum(int(digit)**len(str(i)) for digit in str(i)) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers\n",
        "test": "assert get_ludic(0) == []  # Test case 4",
        "num_ids": 4782,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words using space as a delimiter\n    words = s.split(' ')\n    # Reverse the order of words in the list\n    words.reverse()\n    # Join the words back into a string using space as a delimiter\n    return ' '.join(words)\n",
        "test": "assert reverse_words(\"\") == \"\" # empty string",
        "num_ids": 1570,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert not prime_num(4), \"4 is not a prime number\"",
        "num_ids": 1700,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian",
        "test": "assert radian_degree(180) == math.pi # Testing if 180 degrees is equal to pi radians",
        "num_ids": 1776,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None",
        "test": "assert find_literals(\"The cat in the hat\", r\"^\\w+\") == (\"The\", 0, 3)",
        "num_ids": 2502,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 38,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n + 1):\n            bell[i] = 0\n            for j in range(i):\n                bell[i] += bell[i - j - 1] * bell[j]\n        return bell[n]\n",
        "test": "assert bell_Number(0) == 1 # Bell number 0 is 1",
        "num_ids": 3502,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]\n",
        "test": "assert remove_kth_element([1,2,3,4,5], 10) == [1,2,3,4,5] ",
        "num_ids": 2377,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val",
        "test": "assert max_of_nth([[10, 20, 30], [40, 50, 60], [70, 80, 90]], 1) == 80 # test case 2",
        "num_ids": 2441,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def merge(lst):\n    return [[sublst[0] for sublst in lst], [sublst[1] for sublst in lst]]\n",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]]",
        "num_ids": 2829,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 22,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        total += test_list[i]\n        cumulative_sum.append(total)\n    return cumulative_sum",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 2006,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum = 0\n        for num in tup:\n            sum += num\n        avg = sum / len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2, 5, 8]",
        "num_ids": 2717,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must have the same length\"\n    else:\n        result = ()\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] % test_tup2[i],)\n        return result\n",
        "test": "assert tuple_modulo((1,2,3),(2,4,6)) == (1,2,3)  # Testing for (2,4,6) % (1,2,3) ",
        "num_ids": 2806,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    current_position = 0\n    jumps_required = 0\n    steps_left = steps\n\n    # loop until we reach the destination\n    while current_position < d:\n        # check if we can reach the destination from the current position\n        if steps_left < d - current_position:\n            return -1\n\n        # update the current position and the number of jumps required\n        current_position += steps_left\n        jumps_required += 1\n\n        # update the number of steps left\n        steps_left = steps - steps_left\n\n    return jumps_required\n",
        "test": "assert min_Jumps(5, 0) == 0 # steps = 5, d = 0, already at (0, 0)",
        "num_ids": 2881,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[1,2,3]) == [1,1,1] ",
        "num_ids": 2600,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def move_num(test_str):\n    nums = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters) + ''.join(nums)\n",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 1999,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # Sort the list in ascending order\n    i = 0\n    n = len(a)\n    max_size = 0\n    while i < n:\n        j = i + 1\n        while j < n and a[j] % a[i] == 0:\n            j += 1\n        max_size = max(max_size, j - i)\n        i += 1\n    return max_size\n",
        "test": "assert largest_subset([]) == 0 # empty list ",
        "num_ids": 3461,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 360,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # if both lists have same number of elements\n        median1 = (arr1[n//2 - 1] + arr1[n//2]) / 2\n        median2 = (arr2[n//2 - 1] + arr2[n//2]) / 2\n        return (median1 + median2) / 2\n    else:\n        # if both lists have different number of elements\n        median1 = arr1[n//2]\n        median2 = arr2[n//2]\n        return (median1 + median2) / 2\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5) == 3",
        "num_ids": 3374,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3],2) == [1,4,9] # test case 1",
        "num_ids": 2133,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"Hello World\") == \"HELLO WORLD\" ",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"List should have at least two elements.\")\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] # Test case 1",
        "num_ids": 1879,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "import math\n\ndef triangle_area(r):\n    # Find the length of the semi-circle chord\n    l = 2 * r * math.sin(math.pi / 3)\n    # Find the semi-perimeter of the triangle\n    s = (l ** 2 + 2 * r ** 2) ** 0.5\n    # Find the area of the triangle using the formula: area = (base * height) / 2\n    return 0.5 * l * s",
        "test": "assert triangle_area(5) == 8.372977406655535 # Example output: 8.372977406655535",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] != i+1:\n            return i+1\n    \n    return end+1\n",
        "test": "assert find_First_Missing([1, 2, 3, 5, 6]) == 4",
        "num_ids": 2683,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"  # simple string with a space",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Split(list):\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6] ",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    result = [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n    return [i for i in result if i not in sub]",
        "test": "assert adjac( (2,3), [ (1,3), (2,2), (2,4), (3,3), (2,3) ] ) == [] ",
        "num_ids": 3013,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    else:\n        return text.replace('_', ' ')\n",
        "test": "assert replace_spaces('Hello_world') == 'Hello world'",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and returns the same list with all zeroes moved to the end.\n    \"\"\"\n    # Create a new list to store non-zero elements\n    non_zero = []\n    # Iterate over the input list and append non-zero elements to the new list\n    for num in num_list:\n        if num != 0:\n            non_zero.append(num)\n    # Append the number of zeroes at the end of the new list\n    non_zero += [0] * (num_list.count(0))\n    # Return the new list\n    return non_zero",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2408,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            res += arr[i]^arr[j]\n    return res\n",
        "test": "assert pair_xor_Sum([1, 1, 1, 1, 1], 5) == 0, \"Error in pair_xor_Sum with [1, 1, 1, 1, 1]\"",
        "num_ids": 2429,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert heap_sort([5, 3, 8, 1, 2]) == [1, 2, 3, 5, 8] ",
        "num_ids": 2103,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss.\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(10,5) == False # Test case 1",
        "num_ids": 1654,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    # round the wind chill index to the next integer\n    wc_rounded = round(wc)\n    return wc_rounded\n",
        "test": "assert wind_chill(10,10) == 9 # cold wind, cold temperature",
        "num_ids": 3148,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length\n",
        "test": "assert sample_nam(['alice', 'bob', 'charlie', 'dave', 'eve']) == 0",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    return re.sub(pattern, '', items)\n",
        "test": "assert remove_parenthesis(\"(abc)def(ghi)jkl\") == \"defjkl\"",
        "num_ids": 1751,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    count = 1\n    while count < n:\n        i += 1\n        count = i * (i-1)\n    return i",
        "test": "assert is_nonagonal(1) == 1  # first nonagonal number is 1",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Check if 'z' is present in between the words\n    for word in words:\n        if 'z' in word and (word[0] != 'z' and word[-1] != 'z'):\n            return True\n    # If 'z' is not found in between the words, return False\n    return False\n",
        "test": "assert text_match_wordz_middle(\"hello world\") == False",
        "num_ids": 2240,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return \"Invalid value of k\"\n    \n    return input[k:][::-1] + input[:k]\n",
        "test": "assert reverse_Array_Upto_K([], 0) == [] # Check if the function returns an empty array when the input array is empty",
        "num_ids": 2766,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple(('apple', 10), {'color': 'red', 'price': 5}) == ('apple', 10, {'color': 'red', 'price': 5}) ",
        "num_ids": 2738,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                avg = cost[i][j]\n            elif i == 0:\n                avg = (cost[i][j] + cost[i][j-1]) / 2\n            elif j == 0:\n                avg = (cost[i][j] + cost[i-1][j]) / 2\n            else:\n                avg = (cost[i][j] + cost[i-1][j] + cost[i][j-1] + cost[i-1][j-1]) / 4\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg\n",
        "test": "assert maxAverageOfPath([[1]]) == 1",
        "num_ids": 3892,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (165, 55), 'Bob': (178, 65), 'Charlie': (180, 75), 'David': (160, 60)}, 165, 60) == {'Bob': (178, 65), 'Charlie': (180, 75)} ",
        "num_ids": 2984,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 4, 3, 2, 5]) == 3 ",
        "num_ids": 2151,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    result = 0\n    for i in range(power):\n        result += sum(int(d) for d in base_str)\n        base_str = str(sum(int(d) for d in base_str))\n    return result\n",
        "test": "assert power_base_sum(10, 1) == 1  # power of 10 to the 1st should be 10",
        "num_ids": 2790,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches\n",
        "test": "assert extract_quotation(\"\") == []",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # Initialize the result tuple\n    result = ()\n\n    # Loop through the input tuple\n    for i in range(len(test_tup) - 1):\n        # Multiply the i-th and i+1-th elements and append the result to the result tuple\n        result += (test_tup[i] * test_tup[i+1], )\n\n    # Return the result tuple\n    return result\n",
        "test": "assert multiply_elements((1,2,3)) == (2,6)",
        "num_ids": 2740,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 2294,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k,v in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 1, 1, 2, 3, 3, 3, 4, 4]) == [1, 2, 3, 4], \"Consecutive duplicates should be removed\"",
        "num_ids": 2305,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n",
        "test": "assert lateralsurface_cone(1, 2) == 12.566370614359172",
        "num_ids": 2064,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,. ]+', ':', text)",
        "test": "assert replace_specialchar(\"Test\") == \"Test\", \"Test 4: Without special characters\"",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Set the initial index to the first element in the array\n    index = 0\n\n    # Loop through the array until the end is reached or the first occurrence of the given number is found\n    while index < len(A) and A[index] != x:\n        index += 1\n\n    # Return the index of the first occurrence of the given number, or -1 if it is not in the array\n    if index < len(A):\n        return index\n    else:\n        return -1\n",
        "test": "assert find_first_occurrence([1, 2, 2, 3, 3, 4], 5) == -1  # [1, 2, 2, 3, 3, 4]",
        "num_ids": 3128,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    \n    # Initialize two variables to store sum of products of all subarrays and sum of products of odd length subarrays\n    total_sum = 0\n    odd_sum = 0\n    \n    # Iterate over all possible subarrays\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of current subarray\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            \n            # If the subarray has even length, add its product to total_sum\n            if (j-i) % 2 == 0:\n                total_sum += prod\n            \n            # If the subarray has odd length, add its product to odd_sum\n            else:\n                odd_sum += prod\n    \n    # Calculate the final result\n    return (total_sum + odd_sum) % (10**9 + 7)\n",
        "test": "assert sum_Of_Subarray_Prod([0,0,0]) == 0, \"Error in sum_Of_Subarray_Prod\" ",
        "num_ids": 3513,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def set_middle_bits(n):\n    # Convert decimal number to binary string\n    binary_str = bin(n)[2:]\n\n    # Toggle bits except the first and the last bit\n    for i in range(1, len(binary_str) - 1):\n        binary_str = binary_str[:i] + '1' + binary_str[i + 1:]\n\n    # Convert binary string to decimal number\n    return int(binary_str, 2)\n",
        "test": "assert set_middle_bits(0b101010) != 0b111101",
        "num_ids": 3027,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Find the index where x can be inserted in a to maintain order.\n    index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert left_insertion([1,3,4,6,7], 4) == 2",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert not check_str(\"123_abc\"), \"Function should return False for string not starting with vowel\" ",
        "num_ids": 1496,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1, \"Incorrect sum for n=1\"",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "import math\n\ndef find_Index(n):\n    count = 0\n    while True:\n        count += 1\n        triangular_number = int(count * (count + 1) / 2)\n        if len(str(triangular_number)) == n:\n            return count\n",
        "test": "assert find_Index(1) == 1  # smallest triangular number with 1 digit is 1",
        "num_ids": 1644,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))",
        "test": "assert tuple_to_dict(('A', 'B', 'C', 'D')), {'A': 'B', 'C': 'D'}",
        "num_ids": 2598,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i] != s[i-1]:\n                return False\n        return True\n",
        "test": "assert all_Characters_Same(\"abcd\") == False  # Should return False if all characters are not same",
        "num_ids": 1385,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * (side - side/2)) ** 0.5\n    \n    # Calculate the volume of the tetrahedron\n    volume = (1/6) * math.sqrt(2) * side ** 3\n    \n    # Calculate the area of the tetrahedron\n    area = (3 * math.sqrt(6)) / (4 * s) * volume\n    \n    return area\n",
        "test": "assert area_tetrahedron(1) == 0.25*math.sqrt(6) ",
        "num_ids": 1909,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    if m == 0 or m == n:\n        return lst\n    elif m < 0:\n        m = m % n\n    else:\n        m = m % n\n    return lst[-m:] + lst[:-m]\n",
        "test": "assert rotate_right([1], 1) == [1]",
        "num_ids": 2602,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item == None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible(num):\n        for digit in str(num):\n            if num % int(digit) != 0:\n                return False\n        return True\n    \n    return [num for num in range(startnum, endnum+1) if is_divisible(num)]",
        "test": "assert divisible_by_digits(1000, 2000) == [1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]",
        "num_ids": 4831,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n\n    # Calculate area of sector\n    area = r ** 2 * (math.sin(math.radians(a)))\n\n    return area\n",
        "test": "assert sector_area(5, 365) == None, \"Error in sector_area function\" # check for a sector with angle larger than 360 degrees",
        "num_ids": 2095,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 250,
        "answer": "def lcs_of_three(X, Y, Z):\n    # define the size of the LCS array\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n    L = [[[0 for k in range(l+1)] for j in range(m+1)] for i in range(n+1)]\n\n    # fill the LCS array\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(l+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # find the length of the LCS\n    length = L[n][m][l]\n\n    # find the LCS\n    lcs = []\n    i = n\n    j = m\n    k = l\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the LCS and return as a string\n    lcs = lcs[::-1]\n    return ''.join(lcs)\n",
        "test": "assert lcs_of_three(\"abc\", \"def\", \"ghi\") == \"\"",
        "num_ids": 4584,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 35,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Replace consecutive uppercase letters with a space\n    str1 = re.sub('([A-Z])', r' \\1', str1)\n    # Replace consecutive spaces with a single space\n    str1 = re.sub('\\s+', ' ', str1)\n    # Return the modified string\n    return str1.strip()\n",
        "test": "assert capital_words_spaces(\"IAmDeveloper\") == \"I Am Developer\"",
        "num_ids": 2006,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: float(x))\n",
        "test": "assert sort_numeric_strings([\"5\", \"4\", \"3\", \"2\", \"1\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"], \"Error in sorting the numeric strings\"",
        "num_ids": 2897,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1,2), (3,4)], (5,6)) == [(1,2), (3,4), (5,6)]",
        "num_ids": 1825,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:\n        return False\n    \n    if right < len(arr) and arr[i] > arr[right]:\n        return False\n\n    return True\n",
        "test": "assert check_min_heap_helper([4, 10, 3, 5, 1, 2], 0) == False ",
        "num_ids": 3341,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 2130,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list)[:K]\n",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == [] ",
        "num_ids": 3400,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == []",
        "num_ids": 2794,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    # create a set from the list to remove duplicates and sort the list\n    unique_numbers = sorted(set(numbers))\n\n    # check if there are at least two numbers in the list\n    if len(unique_numbers) < 2:\n        return None\n\n    # return the second smallest number\n    return unique_numbers[1]\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1884,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True ",
        "num_ids": 1355,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([\"abc\", \"def\", \"ghi\", \"jkl\"]) == 0",
        "num_ids": 2221,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if isinstance(item, list):\n            tup = tuple(item)\n            if tup not in freq:\n                freq[tup] = 1\n            else:\n                freq[tup] += 1\n    return freq\n",
        "test": "assert unique_sublists([[1, 2], [3, 4], [1, 2], [5, 6]]) == {(1, 2): 2, (3, 4): 1, (5, 6): 1}",
        "num_ids": 3117,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return False\n        elif len(str(float_num).split('.')[1]) > 2:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal('3.14') == True",
        "num_ids": 2037,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1]) == True ",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months_30 = [4, 6, 9, 11]\n    if monthnum3 in months_30:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(1) == False # January has 31 days",
        "num_ids": 2273,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 3, 15, 11, 6, 45, 2], 7) == 1",
        "num_ids": 2525,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"hello123\") == 3, \"Incorrect count of digits for string 'hello123'\"",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 == 0 or is_prime(i):\n            count += 1\n        if count == n:\n            break\n        i += 1\n    return i - 1\n\ndef is_prime(num):\n    \"\"\"\n    Function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 2720,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], -2) == 0 # no pairs have a sum of -2",
        "num_ids": 2884,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3],[1,2,4]) == [3]",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 4\n        i += 2\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"Incorrect result for odd_num_sum(1)\"",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            else:\n                opening = stack.pop()\n                if opening == '(':\n                    if i != ')':\n                        return False\n                elif opening == '[':\n                    if i != ']':\n                        return False\n                elif opening == '{':\n                    if i != '}':\n                        return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression('(a+(b*c)-d/e)') == True",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"\", 10) == \"\"",
        "num_ids": 1983,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None\n",
        "test": "assert occurance_substring(\"abcdefg\",\"cd\") != [(2,2)]",
        "num_ids": 2239,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1,2,3,4,5,6,8]) == False",
        "num_ids": 1802,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if (test_str[i-1] in vowels) and (test_str[i+1] in vowels):\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"\") == 0  # empty string has no vowels",
        "num_ids": 1907,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated = set(arr)\n    return sum(non_repeated)\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15 ",
        "num_ids": 2114,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(lst):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1,1,1,2,2,2,3,3,4,4,4,5,5]) == [[1,1,1],[2,2,2],[3,3],[4,4,4],[5,5]]",
        "num_ids": 2636,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_sublists(list1):\n    # Create an empty dictionary to store the frequency of each tuple in the list\n    frequency_dict = {}\n    \n    # Iterate over all possible sublists in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Convert the sublist to a tuple\n            sublist_tuple = tuple(list1[i:j])\n            \n            # If the tuple already exists in the dictionary, increment its count\n            if sublist_tuple in frequency_dict:\n                frequency_dict[sublist_tuple] += 1\n            # Otherwise, add the tuple to the dictionary with count 1\n            else:\n                frequency_dict[sublist_tuple] = 1\n    \n    # Return the dictionary of frequencies\n    return frequency_dict\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2577,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        combinations_list = combinations(test_list, i)\n        for combo in combinations_list:\n            if sum(combo) == 0:\n                result.append(combo)\n    return result",
        "test": "assert find_combinations([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (2, 3), (3, 4), (4, 5), (1, 2, 3), (1, 3, 4), (2, 3, 4), (1, 4, 5), (2, 4, 5), (3, 4, 5), (1, 2, 3, 4), (1, 3, 4, 5), (2, 3, 4, 5), (1, 2, 4, 5)] ",
        "num_ids": 3892,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef count_divisors(n):\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count\n",
        "test": "assert count_divisors(1) == 1, \"Error in count_divisors(1)\"",
        "num_ids": 2141,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            odd_sum += sum(arr[i:j+1])\n    return odd_sum\n",
        "test": "assert odd_length_sum([1]) == 1",
        "num_ids": 2408,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 27,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert rgb color to hsv color\n    '''\n    # Convert r, g, b values to 0 to 1 scale\n    r, g, b = r/255.0, g/255.0, b/255.0\n    # Get max value of r, g, b\n    cmax = max(r, g, b)\n    # Get minimum value of r, g, b\n    cmin = min(r, g, b)\n    # Calculate the hue value\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / (cmax - cmin)) % 6\n    elif cmax == g:\n        h = (b - r) / (cmax - cmin) + 2\n    else:\n        h = (r - g) / (cmax - cmin) + 4\n    h = round(h * 60)\n    # Calculate the saturation value\n    if cmax == 0:\n        s = 0\n    else:\n        s = (cmax - cmin) / cmax\n    # Calculate the value value\n    v = cmax\n    # Return the hsv values\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) ",
        "num_ids": 4794,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n            if even_count == 2:\n                break\n        else:\n            odd_product *= num\n            odd_count += 1\n            if odd_count == 2:\n                break\n\n    return even_product * odd_product\n",
        "test": "assert mul_even_odd([0,2,4,6]) == 0",
        "num_ids": 2737,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        # Converting the tuple string to a list of strings\n        str_list = test_str[1:-1].split(',')\n\n        # Converting the list of strings to a list of integers\n        int_list = [int(i.strip()) for i in str_list]\n\n        # Converting the list of integers to a tuple\n        int_tuple = tuple(int_list)\n\n        return int_tuple\n\n    except ValueError:\n        print(\"Invalid input. Please enter a tuple of integers.\")",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) ",
        "num_ids": 2391,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 4, 6, 7], 5) == 3",
        "num_ids": 1858,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"aabbc\") == False # does not match \"aabbc\"",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list) + tuple(test_str)\n    return new_tup\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, 'h', 'e', 'l', 'l', 'o')",
        "num_ids": 1975,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 1672,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 2045,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3  # test for a list of three lists",
        "num_ids": 1891,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    last = -1\n    \n    for i in range(n):\n        if arr[i] == x:\n            last = i\n            \n    return last\n",
        "test": "assert last([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 5 # last occurrence of 4 is at position 5 in the array",
        "num_ids": 2561,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    return bool(match)\n",
        "test": "assert text_starta_endb(\"ab\"), True",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum\n",
        "test": "assert return_sum({\"a\":1, \"b\":2, \"c\":3}) == 6 # dictionary with three key-value pairs, sum should be 6",
        "num_ids": 1532,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            total += i\n    return total\n",
        "test": "assert sum_odd(3) == 3",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary string\n    binary = bin(n)[2:].zfill(32)\n    \n    # Extract the last d bits\n    last_d_bits = binary[-d:]\n    \n    # Rotate the remaining bits to the left by d bits\n    rotated_bits = binary[:-d]\n    \n    # Concatenate the last d bits and rotated bits to form the final result\n    result = int(rotated_bits + last_d_bits, 2)\n    \n    return result\n",
        "test": "assert left_rotate(0b11111111, 32) == 0b11111111, \"The function should return the same number after rotating 32 bits to the left.\"",
        "num_ids": 2950,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello, World!\") == \"Hello,World!\" ",
        "num_ids": 988,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0 # there are no equal numbers in 1,2,3",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if arr[0] <= arr[n-1]:\n        return 0\n    low, high = 0, n-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] <= arr[n-1]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
        "test": "assert count_rotation([1]) == 0 # expected output: 0",
        "num_ids": 3186,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    elif int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_perfect_square(4) == True",
        "num_ids": 1760,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr):\n    # Initialize a variable to keep track of the product\n    product = 1\n\n    # Loop through the list and multiply each number to the product variable\n    for num in arr:\n        product *= num\n\n    # Check if the product is even by using the modulo operator (%)\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2,4,6]) == True  # Test case 1",
        "num_ids": 1443,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    \n    # loop over each list in the input list\n    for lst in lists:\n        # calculate the sum of the elements in the current list\n        lst_sum = sum(lst)\n        \n        # if the current sum is greater than the current maximum sum, update max_sum and max_list\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 2862,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run = 0\n    for char in test_str:\n        if char.isupper():\n            run += 1\n        else:\n            max_run = max(max_run, run)\n            run = 0\n    return max(max_run, run)\n",
        "test": "assert max_run_uppercase(\"AAA\") == 3 ",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1 ",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i == K:\n            return True\n    return False\n",
        "test": "assert check_K((), 1) == False",
        "num_ids": 1555,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((4, 5, 6), (3, 4, 7)) == False",
        "num_ids": 2081,
        "indeed": true
    }
]