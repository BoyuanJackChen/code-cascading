[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements",
        "test": "assert similar_elements(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ['banana', 'cherry']",
        "num_ids": 464
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 392
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers,\n    returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)",
        "test": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9], 5) == [9, 8, 7, 6, 5] # example input 2",
        "num_ids": 732
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x ^ (x >> 1))[2:].count('1') == 1\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 360
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = text.split() # split the text into words\n    long_words = [] # create an empty list to store long words\n    for word in words:\n        if len(word) >= 4: # check if the length of the word is at least 4\n            long_words.append(word) # add the word to the list if it meets the condition\n    return long_words # return the list of long words",
        "test": "assert find_char_long('abcde') == []",
        "num_ids": 437
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25] # Test case 1",
        "num_ids": 375
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Convert the string to a list to be able to rotate it\n    str_list = list(str)\n\n    # Find the length of the string\n    str_len = len(str_list)\n\n    # Initialize the minimum number of rotations to the length of the string\n    min_rotations = str_len\n\n    # Loop through each possible rotation of the string\n    for i in range(str_len):\n        # Rotate the string by one position\n        str_list = str_list[-1:] + str_list[:-1]\n        # Check if the rotated string is equal to the original string\n        if str_list == list(str):\n            # If it is, update the minimum number of rotations\n            min_rotations = i + 1\n            break\n\n    return min_rotations\n",
        "test": "assert find_Rotations(\"abc\") == 3  # string \"abc\" rotated 3 times to get back to original string",
        "num_ids": 769
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # Find the first occurrence of the character\n    i = s.find(ch)\n    \n    # Find the last occurrence of the character\n    j = s.rfind(ch)\n    \n    # If both first and last occurrence are found, remove them and return the new string\n    if i != -1 and j != -1:\n        return s[:i] + s[i+1:j] + s[j+1:]\n    \n    # If either first or last occurrence is not found, return the original string\n    else:\n        return s\n",
        "test": "assert remove_Occ(\"hello\", \"l\") == \"heo\"  # Test for string without the given character",
        "num_ids": 549
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list to hold the sorted matrix\n    sorted_matrix = []\n    \n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the list of row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n    \n    # Create a mapping of row sums to row indices\n    row_sum_map = {}\n    for i, row_sum in enumerate(row_sums):\n        if row_sum not in row_sum_map:\n            row_sum_map[row_sum] = [i]\n        else:\n            row_sum_map[row_sum].append(i)\n    \n    # Iterate over the sorted list of row sums and append the rows to the sorted matrix\n    for row_sum in sorted_row_sums:\n        for row_index in row_sum_map[row_sum]:\n            sorted_matrix.append(M[row_index])\n    \n    return sorted_matrix\n",
        "test": "assert sort_matrix([[5,3],[1,2]]) == [[1,2],[5,3]]  # Example matrix with sum of rows [3, 5] and [8, 3]",
        "num_ids": 1178
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(2, 6, 4) == 24  # test case 2",
        "num_ids": 337
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+)_([a-z]+)')\n    return bool(pattern.search(text))",
        "test": "assert text_lowercase_underscore(\"a_b_c\") == True",
        "num_ids": 404
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(3) == 12 ",
        "num_ids": 255
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string):\n    char_count = [0] * NO_OF_CHARS\n    for char in string:\n        char_count[ord(char)] += 1\n    return char_count\n\n\ndef remove_chars(str1, str2):\n    '''\n    Remove characters from str1 which are present in str2.\n    '''\n    char_count1 = str_to_list(str1)\n    char_count2 = str_to_list(str2)\n\n    for i in range(NO_OF_CHARS):\n        char_count1[i] -= char_count2[i]\n\n    result = []\n    for i in range(NO_OF_CHARS):\n        for j in range(char_count1[i]):\n            result.append(chr(i))\n\n    return ''.join(result)\n",
        "test": "assert str_to_list(\"hello\", \"h\") == \"ello\"  # Test case 2",
        "num_ids": 787
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    setnums = set(arraynums)\n    # If the length of the set is less than the length of the array, then there is a duplicate\n    if len(setnums) < len(arraynums):\n        return True\n    else:\n        return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 478
    },
    {
        "number": 20,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Create a list of consecutive odd numbers from 1 to n\n    odd_nums = [i for i in range(1, x+1, 2)]\n    # Check if the sum of the list elements is equal to the given number x\n    if sum(odd_nums) == x:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(54321) == False         # not a woodall number",
        "num_ids": 563
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to string and reverse it\n    rev_str = str(num)[::-1]\n    \n    # Convert the reversed string back to integer\n    rev_num = int(rev_str)\n    \n    # Check if the given number is one less than twice its reverse\n    if num * 2 - 1 == rev_num:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(555) == False",
        "num_ids": 407
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the input array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize an empty string to store the number\n    num = \"\"\n\n    # Traverse through the sorted array and add each digit to the number\n    for digit in arr:\n        while digit > 0:\n            num += str(digit % 10)\n            digit //= 10\n\n    # Return the number as an integer\n    return int(num)\n",
        "test": "assert find_Max_Num([9, 9, 9]) == 999 ",
        "num_ids": 666
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(3, -5) == True",
        "num_ids": 309
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * ((3 * n) - 1)) // 2\n",
        "test": "assert is_octagonal(1) == 1  # octagonal number 1 is 1",
        "num_ids": 279
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(d) for d in s[i:j+1]) == j - i + 1:\n                count[j-i+1] += 1\n    return count\n",
        "test": "assert count_Substrings('456') == 0, \"Error: Incorrect count for '456'\"",
        "num_ids": 419
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([5, 2, 8, 3]) == 2",
        "num_ids": 309
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([5, 10, 3]) == 7, \"Incorrect result for [5, 10, 3]\"",
        "num_ids": 596
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([('Maths', 70), ('Science', 90), ('English', 80)]) == [('Maths', 70), ('English', 80), ('Science', 90)]  # tests if the function sorts a list of tuples by the second value of each tuple in descending order",
        "num_ids": 532
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Check if data_list is empty or not\n    if not data_list:\n        return 0\n    # If data_list has only one element, return it\n    elif len(data_list) == 1:\n        return data_list[0]\n    # If data_list has more than one element, return the sum of the flattened list and the first element of data_list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 494
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1,2,3,4,5]) == 5",
        "num_ids": 297
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create a list of Bell numbers\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(bell[-1]*(n-i)//i)\n    \n    # Initialize a list of counts for each partition size\n    count = [1] * (n+1)\n    \n    # Iterate over the partition sizes\n    for i in range(2, n+1):\n        # Sum up the number of ways to partition each set\n        # of Bell numbers up to i-1\n        total = 0\n        for j in range(i):\n            total += count[j] * bell[i-j-1]\n        count[i] = total\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return count[n]\n",
        "test": "assert bell_number(0) == 1, \"Bell number 0 should be 1\"",
        "num_ids": 640
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is increasing or decreasing\n    inc = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    dec = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    # Check if the array is strictly increasing or decreasing\n    st_inc = all(A[i] < A[i+1] for i in range(len(A)-1))\n    st_dec = all(A[i] > A[i+1] for i in range(len(A)-1))\n    \n    # If the array is monotonic, return True\n    if inc or dec or st_inc or st_dec:\n        return True\n    \n    # If the array is not monotonic, return False\n    else:\n        return False\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 685
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    elif s == l:\n        return True\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                if l[i:i+len(s)] == s:\n                    return True\n        return False\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 392
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple(()) == True ",
        "num_ids": 490
    },
    {
        "number": 71,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        # Set sorted to True and traverse the list\n        sorted = True\n        i = 0\n        while i < n-1:\n            if nums[i] > nums[i+1]:\n                # Swap elements\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                sorted = False\n            i += 1\n        # Shrink the gap between elements\n        n = int(n/shrink)\n    return nums\n",
        "test": "assert comb_sort([-5, -3, 0, 2, 4]) == [-5, -3, 0, 2, 4] ",
        "num_ids": 698
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False\n",
        "test": "assert dif_Square(2) == True # since 2 can be represented as the difference of two squares, i.e., 2 = 1^2 - 1^2",
        "num_ids": 456
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to map colors to patterns\n    color_pattern = {}\n    for i in range(len(colors)):\n        if colors[i] not in color_pattern:\n            color_pattern[colors[i]] = []\n        color_pattern[colors[i]].append(patterns[i])\n    \n    # Check if the patterns follow the sequence\n    for key in color_pattern:\n        patterns_list = color_pattern[key]\n        if len(set(patterns_list)) != 1:\n            # If there are different patterns for a color, return False\n            return False\n        \n        # Check if the pattern sequence is correct\n        for i in range(len(patterns_list)-1):\n            if patterns_list[i] == patterns_list[i+1]:\n                # If the current pattern is the same as the next pattern, continue\n                continue\n            elif patterns_list[i] > patterns_list[i+1]:\n                # If the current pattern is greater than the next pattern, return False\n                return False\n            else:\n                # If the current pattern is less than the next pattern, return False\n                return False\n    \n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\"], [\"A\", \"A\", \"B\", \"B\"]) == True",
        "num_ids": 671
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1,2,3),(4,5,6)],3) == [] # test for odd divisibility by 3",
        "num_ids": 635
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(10) == False",
        "num_ids": 228
    },
    {
        "number": 79,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"python\") == False # Should return False, as the length of \"python\" is an even number.",
        "num_ids": 260
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1 # Check if the first tetrahedral number is 1",
        "num_ids": 309
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi # sphere with radius 1",
        "num_ids": 348
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # initialize sum to 0\n    sum = 0\n    \n    # loop through each character of the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum += ord(char)\n    \n    # return the character made by adding the sum modulo 26\n    return chr(sum % 26 + ord('A'))\n",
        "test": "assert get_Char(\"\") == \"A\"  # Test case for empty string",
        "num_ids": 449
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [None, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[i-1]]+seq[i-seq[i-1]])\n        return seq[-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 617
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793, \"The surface area of a sphere with radius 5 is not 314.1592653589793\"",
        "num_ids": 409
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # We need to add 1 to n because the hexagonal numbers are zero-indexed.\n    n += 1\n    \n    # If n is odd, then the nth hexagonal number is the same as the (n//2)th.\n    if n % 2 == 1:\n        return centered_hexagonal_number(n // 2)\n    \n    # If n is even, we need to find the sum of the first n numbers and divide it by 2.\n    sum_of_first_n = (n * (n - 1)) // 2\n    return sum_of_first_n\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"The 1st centered hexagonal number should be 1\"",
        "num_ids": 519
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({1:1, 2:2}, {3:3, 4:4}, {5:5, 6:6}) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6} # check if it correctly merges three dictionaries ",
        "num_ids": 445
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency count\n    freq_dict = {}\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq_dict[element] = 1\n    # return the dictionary of frequency counts\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1]) == {1: 2, 2: 2, 3: 1} ",
        "num_ids": 667
    },
    {
        "number": 89,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = N - 1\n    if closest_num < 0:\n        return None\n    return closest_num",
        "test": "assert closest_num(6) == 5",
        "num_ids": 382
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n",
        "test": "assert len_log(['apple', 'banana', 'pear']) == 6  # longest word is 'banana' with length 6",
        "num_ids": 415
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n",
        "test": "assert find_substring(\"Hello, world!\", \"World\") == False",
        "num_ids": 296
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    prev = 2\n    current = 3\n    while current <= n:\n        if current == n:\n            return True\n        prev, current = current, prev + current\n    return False\n",
        "test": "assert is_undulating(0) == False, \"Error in is_undulating(0)\"",
        "num_ids": 463
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 240
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    \n    # Sort the list of tuples based on the second value of the tuple in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (2, 1), (3, 3), (4, 4)]) == 2",
        "num_ids": 489
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Find_Min_Length(lst):\n    # initialize min_length with the length of the first list in lst\n    min_length = len(lst[0])\n    \n    # iterate over the rest of the lists in lst\n    for sublist in lst[1:]:\n        # if the length of the current sublist is smaller than min_length, update min_length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3, \"Test 1 failed\"",
        "num_ids": 455
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return len(divisors)\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 315
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Flatten the list of lists using list comprehension\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Loop through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 643
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "test": "assert multiply_num([5,10,15,20]) == 75  # Test case 2",
        "num_ids": 331
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or \"0\"\n",
        "test": "assert decimal_to_binary(0) == \"0\"",
        "num_ids": 281
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if num < 10:\n        return 11\n    \n    # Convert integer to string and add one to the end\n    num_str = str(num)\n    num_str += '1'\n\n    # Check if the new number is a palindrome\n    new_num = int(num_str)\n    while new_num <= num + 1:\n        if str(new_num) == str(new_num)[::-1]:\n            return new_num\n        new_num += 1\n\n    # If no palindrome found, return None\n    return None\n",
        "test": "assert next_smallest_palindrome(124) == 1341",
        "num_ids": 1011
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 ",
        "num_ids": 337
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # split the word into words using underscore\n    words = word.split('_')\n    # join the first word with the rest of the words using camel case\n    camel_case_word = words[0].lower() + ''.join(word.title() for word in words[1:])\n    return camel_case_word\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 422
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    if n < m:\n        return None\n    \n    a = [0] * (n+1)\n    \n    for i in range(1, n+1):\n        a[i] = 1\n    \n    for i in range(m, n+1):\n        for j in range(1, i+1):\n            a[i] += a[i-j]*a[j-1]\n    \n    return a[n]\n",
        "test": "assert eulerian_num(1, 0) == 1 #test case 2",
        "num_ids": 453
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert sort_sublists([[\"dog\", \"cat\", \"bird\"], [\"fish\", \"turtle\", \"snake\"], [\"lion\", \"giraffe\", \"elephant\"]]) == [[\"bird\", \"cat\", \"dog\"], [\"fish\", \"snake\", \"turtle\"], [\"elephant\", \"giraffe\", \"lion\"]] ",
        "num_ids": 581
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3  # check if the function works with a list of True booleans",
        "num_ids": 287
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    # Append the list to the tuple\n    test_tup.append(test_list)\n    # Convert the tuple back to a list\n    test_tup = tuple(test_tup)\n    return test_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5)) == (4, 5, [1, 2, 3])",
        "num_ids": 549
    },
    {
        "number": 108,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create a heap from the first list\n    heap1 = list(num1)\n    heapq.heapify(heap1)\n\n    # create a heap from the second list\n    heap2 = list(num2)\n    heapq.heapify(heap2)\n\n    # create a heap from the third list\n    heap3 = list(num3)\n    heapq.heapify(heap3)\n\n    # create a merged heap\n    merged_heap = heap1 + heap2 + heap3\n    heapq.heapify(merged_heap)\n\n    # create a sorted list from the merged heap\n    sorted_list = []\n    while merged_heap:\n        min_val = heapq.heappop(merged_heap)\n        sorted_list.append(min_val)\n\n    return sorted_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4],[6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 1016
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    nums = [int(i) for i in s]\n    \n    # Rotate the list by n positions\n    nums = nums[-n:] + nums[:-n]\n    \n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            count += 1\n    \n    return count\n",
        "test": "assert odd_Equivalent(\"101\", 2) == 2 ",
        "num_ids": 615
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def common_in_nested_lists(nestedlist):\n    # Get the first list in the nested list\n    first_list = nestedlist[0]\n    \n    # Initialize an empty set to store common elements\n    common = set()\n    \n    # Loop through the first list and add its elements to the set\n    for element in first_list:\n        common.add(element)\n    \n    # Loop through the remaining lists in the nested list\n    for inner_list in nestedlist[1:]:\n        # Create a set of elements in the current inner list\n        current_set = set(inner_list)\n        \n        # Intersect the common set with the current set\n        common = common.intersection(current_set)\n        \n        # If there are no common elements left, return an empty set\n        if len(common) == 0:\n            return common\n    \n    # If there are common elements, return them as a list\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1,2,3], [1,2,3,4], [1,2]]) == [1,2]",
        "num_ids": 611
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('12345') == True",
        "num_ids": 245
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dicts(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i != {}:\n            return False\n    return True\n",
        "test": "assert empty_dit([{'a': 1}, {}, {'a': 1}]) == False",
        "num_ids": 331
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 345
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                new_sublist.append(float(item))\n            else:\n                new_sublist.append(item)\n        new_list.append(new_sublist)\n    return new_list\n",
        "test": "assert list_to_float([]) == []",
        "num_ids": 520
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"Hello World\") == [\"Hello\", \"World\"] ",
        "num_ids": 308
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(arr):\n    # If the array is empty or has only one element, return None\n    if len(arr) < 2:\n        return None\n\n    # Initialize two variables to keep track of the previous and current element\n    prev = arr[0]\n    curr = arr[1]\n\n    # Loop through the array, starting from the third element\n    for i in range(2, len(arr)):\n        # If the current element is not equal to the previous element\n        if curr != prev:\n            # If the current element is equal to the next element, swap them\n            if curr == arr[i]:\n                arr[i], arr[i-1] = arr[i-1], arr[i]\n            # If the previous element is equal to the next element, swap them\n            elif prev == arr[i]:\n                arr[i-1], arr[i] = arr[i], arr[i-1]\n        # Update the previous and current elements\n        prev = curr\n        curr = arr[i]\n\n    # If the last two elements are not equal, the last element appears only once\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    # If the last two elements are equal, the first element appears only once\n    else:\n        return arr[0]\n",
        "test": "assert search([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10]) == 10 ",
        "num_ids": 1122
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(2,3),(4,-5),(6,7)]) == 100 # the function should be able to handle negative numbers",
        "num_ids": 502
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_divisors(n):\n    '''\n    Calculate the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit+1):\n        if sum_divisors(i) == sum_divisors(sum_divisors(i)):\n            if i != sum_divisors(i):\n                amicable_numbers_sum += i\n    return amicable_numbers_sum\n",
        "test": "assert amicable_numbers_sum(20) == 340, \"Incorrect result for limit=20\"",
        "num_ids": 613
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        return 0\n    else:\n        return cmath.phase(complex(a, b))\n\nprint(angle_complex(1, 1))",
        "test": "assert angle_complex(1+2j, 3+4j) == 0.7853981633974483, \"The function should return 0.7853981633974483 for (1+2j, 3+4j)\" ",
        "num_ids": 377
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        if count_0 > 0 and count_1 > 0:\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff\n",
        "test": "assert find_length(\"10101\") == 1, \"Function is not working for this test case.\"",
        "num_ids": 657
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n",
        "test": "assert sum(4, 6) == 10",
        "num_ids": 521
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 216
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(7, \"hello world\") == []",
        "num_ids": 496
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for i in range(1, n):\n        row_sum = sum(my_matrix[i])\n        if row_sum != magic_sum:\n            return False\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if col_sum != magic_sum:\n            return False\n    diagonal_sum = sum([my_matrix[i][i] for i in range(n)])\n    diagonal_2_sum = sum([my_matrix[i][n-i-1] for i in range(n)])\n    if diagonal_sum != magic_sum or diagonal_2_sum != magic_sum:\n        return False\n    return True\n",
        "test": "assert magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) == True ",
        "num_ids": 798
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num",
        "test": "assert max_occurrences([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 1",
        "num_ids": 633
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowels_to_reverse = []\n    for char in str1:\n        if char in vowels:\n            vowels_to_reverse.append(char)\n    vowels_to_reverse.reverse()\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_to_reverse.pop(0)\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 549
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1\n\nprint(tup_string((1, 2, 3, 4, 5)))\n",
        "test": "assert tup_string(('apple', 'banana', 'cherry')) == 'applebananacherry', 'Incorrect output for a valid input tuple' ",
        "num_ids": 441
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0  # no negative numbers in the list",
        "num_ids": 390
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 ",
        "num_ids": 263
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if zero_count == 0:\n        return 0.0\n    else:\n        return non_zero_count / zero_count\n",
        "test": "assert zero_count([1, 2, 3, 4]) == 0  # No zeroes in the array.",
        "num_ids": 608
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Create a set to store powers of 2\n    powers_of_two = set()\n    \n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Loop through powers of 2 from 1 to i\n        for j in range(1, i+1):\n            # Check if j^2 is less than or equal to i\n            if j**2 <= i:\n                # If yes, add j^2 to the set of powers of 2\n                powers_of_two.add(j**2)\n            else:\n                # If no, break the loop and move on to the next i\n                break\n    \n    # Check if the given number is equal to the sum of powers of 2\n    if n == sum(powers_of_two):\n        # If yes, return True\n        return True\n    else:\n        # If no, return False\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == True",
        "num_ids": 657
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "test": "assert circle_circumference(1) == 2*3.14, \"Incorrect circle circumference for radius 1\"",
        "num_ids": 362
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)\n",
        "test": "assert extract_singly([[1,2,3],[4,5],[6]]) == {1,2,3,4,5,6}",
        "num_ids": 468
    },
    {
        "number": 141,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in unsorted array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Move the maximum element to the beginning\n        if max_idx != i:\n            nums[:max_idx+1] = reversed(nums[:max_idx+1])\n            \n        # Move the maximum element to its correct position\n        nums[:i+1] = reversed(nums[:i+1])\n    \n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 851
    },
    {
        "number": 142,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7]) == 0 # no same elements in all lists",
        "num_ids": 484
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 259
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # initialize maximum difference variable\n    max_diff = 0\n    # iterate through the array\n    for i in range(len(arr)):\n        # iterate through the array again, starting at the next index\n        for j in range(i+1, len(arr)):\n            # calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            # update the maximum difference variable if necessary\n            if diff > max_diff:\n                max_diff = diff\n    # return the maximum difference\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 527
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        x = 0\n        y = n // b\n    elif b == 0:\n        x = n // a\n        y = 0\n    elif a * b == 0:\n        if n != 0:\n            return None\n        else:\n            x = 0\n            y = 0\n    else:\n        x = (n - b) // a\n        y = (n - a * x) // b\n    return x, y\n",
        "test": "assert find_solution(3, 2, 8) == (2, 1)",
        "num_ids": 904
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [3, 5]) == [1, 2, 4] ",
        "num_ids": 429
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(2) == 2, \"sum_series(2) should be 2\"",
        "num_ids": 277
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (0.25 * l * s ** 2) / tan(pi / s)\n    return area\n",
        "test": "assert area_polygon(4, 1) == 0 # a square with side 1",
        "num_ids": 475
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        divisor_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisor_sum += i\n        return divisor_sum\n\n    a = n\n    b = sum_of_divisors(n)\n    c = sum_of_divisors(b)\n    if a == c:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(8) == False # div_sum should return False for divisors 1 and 4 and 2 and 4",
        "num_ids": 528
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    eng_alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(str1)):\n        if str1[i].lower() in eng_alpha:\n            if str1[i].lower() == eng_alpha[i]:\n                count += 1\n    return count\n",
        "test": "assert count_char_position(\"Hello, World!\") == 7 # 'e' occurs at position 1 in the English alphabet, 'l' occurs at position 12, and 'o' occurs at position 15",
        "num_ids": 632
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i]^A[j])%2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([2, 4, 6, 8, 10]) == 10",
        "num_ids": 399
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(1) == 2",
        "num_ids": 352
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1  # check if frequency(list, number) returns the correct number of occurrences",
        "num_ids": 488
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9  # Test Case 1",
        "num_ids": 457
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(1) == 5, \"Perimeter should be 5 for sides of length 1.\"",
        "num_ids": 296
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"std is good\") == 1 # string contains only one occurrence of 'std'",
        "num_ids": 300
    },
    {
        "number": 222,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # creating a set to store the data types of the elements in the tuple\n    types = set()\n    # iterating through each element of the tuple\n    for element in test_tuple:\n        # adding the data type of the element to the set\n        types.add(type(element))\n    # checking if the length of the set is 1 or not\n    if len(types) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 363
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr.count(x) > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False # 6 is not the majority element",
        "num_ids": 518
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nprint(count_Set_Bits(12)) # Output: 2\nprint(count_Set_Bits(7)) # Output: 3\n",
        "test": "assert count_Set_Bits(1) == 1 # binary 1",
        "num_ids": 303
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list and iterate through it\n    string_list = list(string)\n    new_string = ''\n    for index in range(len(string_list)):\n        if index % 2 == 0:\n            new_string += string_list[index]\n    return new_string\n",
        "test": "assert odd_values_string(\"\") == \"\"  # Test case 2",
        "num_ids": 443
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n",
        "test": "assert min_of_three(2, 3, 1) == 1 ",
        "num_ids": 370
    },
    {
        "number": 228,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # loop through all numbers in the range [l, r]\n    for i in range(l, r+1):\n        # if any of the bits are set, return False\n        if bin(i & n).count(\"1\") > 0:\n            return False\n    # if all bits are unset in the range, return True\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(15,1,3) == False # Example: Should return False",
        "num_ids": 578
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize empty lists for negative and positive elements\n    negative = []\n    positive = []\n\n    # Loop through the first n elements of the array\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n\n    # Concatenate the negative and positive lists to form the new array\n    new_arr = negative + positive\n\n    return new_arr\n",
        "test": "assert re_arrange_array([1, -2, 3, -4, 5], 4) == [-4, -2, 1, 3, 5]",
        "num_ids": 776
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"Hello World\", \"-\") == \"Hello-World\"",
        "num_ids": 261
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([10, 20, 30, 40, 50], 2) == [40, 30]  # test case 2",
        "num_ids": 503
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula 2\u03c0rh\n    s = 2 * 3.14 * r * h\n    \n    # Return the lateral surface area of the cylinder\n    return s\n",
        "test": "assert lateralsuface_cylinder(1, 5) == 196.076",
        "num_ids": 438
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3 # return the cube of the side length",
        "test": "assert volume_cube(2) == 8, \"Error in volume_cube(2)\"",
        "num_ids": 286
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def even_bit_set_number(n):\n    # initialize result variable\n    result = 0\n    \n    # loop through all bits of the given number\n    for i in range(32):\n        # if the bit is even, set the result bit to 1\n        if (n & (1 << i)) != 0 and i % 2 == 0:\n            result |= (1 << i)\n    \n    # return the result\n    return result\n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 523
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return dict(count_dict)",
        "test": "assert check_occurences([(1,2), (3,4), (1,2), (1,2), (5,6)]) == {(1,2): 3, (3,4): 1, (5,6): 1} ",
        "num_ids": 729
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '':\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0 ",
        "num_ids": 372
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables for the answer and the previous element\n    total_sequences = 0\n    prev_element = 2\n\n    # Loop through the sequence length n\n    for i in range(n):\n        # Calculate the number of possible elements in this position\n        possible_elements = m - prev_element + 1\n\n        # Add the number of possible elements to the total\n        total_sequences += possible_elements\n\n        # Update the previous element\n        prev_element = m - i\n\n    # Return the total number of sequences\n    return total_sequences\n",
        "test": "assert get_total_number_of_sequences(10, 3) == 21, \"Incorrect output for m=10, n=3\"",
        "num_ids": 808
    },
    {
        "number": 240,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if second list is empty\n    if not list2:\n        return list1\n    # Remove last element of first list and extend it with second list\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5] # replace_list([1, 2, 3], [4, 5]) should be [1, 2, 4, 5] ",
        "num_ids": 524
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Python\") == 6",
        "num_ids": 277
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # calculate square root of N\n    sqrt_N = int(math.sqrt(N))\n    \n    # calculate next perfect square greater than N\n    next_square = (sqrt_N + 1) ** 2\n    \n    return next_square\n",
        "test": "assert next_Perfect_Square(1) == 4, \"Function is incorrect\" ",
        "num_ids": 394
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Initialize the dp array with the first element of the array\n    dp = [arr[0]]\n    \n    # Find the maximum sum of a bitonic subsequence up to the second element of the array\n    for i in range(1, n):\n        if arr[i] > dp[-1]:\n            dp.append(arr[i])\n        else:\n            # If the current element is less than the previous element, find the maximum sum of a bitonic subsequence up to this element\n            max_sum = arr[i]\n            for j in range(i-1, -1, -1):\n                if arr[j] < dp[-1]:\n                    max_sum = max(max_sum, arr[j]+dp[-1])\n                else:\n                    break\n            dp.append(max_sum)\n    \n    # Return the maximum sum of a bitonic subsequence\n    return dp[-1]\n",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 5",
        "num_ids": 1012
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    i = 0\n    \n    while abs(guess**2 - number) > 0.0001 and i < 100:\n        guess = (guess + number/guess) / 2\n        i += 1\n        \n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 438
    },
    {
        "number": 247,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end]:\n                dp[start][end] = dp[start+1][end-1] + 2\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n    \n    return dp[0][n-1]\n",
        "test": "assert lps(\"bbbab\") == 4  # longest palindromic subsequence in \"bbbab\" is \"bbbb\"",
        "num_ids": 679
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return \"Invalid input, n must be a positive integer\"\n    else:\n        sum = 0\n        for i in range(1, n):\n            sum += 1/i\n        return sum\n",
        "test": "assert harmonic_sum(2) == 1.5 # if n = 2, the harmonic sum should be 1 + 1/2 = 1.5",
        "num_ids": 487
    },
    {
        "number": 249,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))\n",
        "test": "assert intersection_array([1,2,2,1], [2,2]) == [2]",
        "num_ids": 536
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1, \"Count_X function does not work as expected when the element is in the tuple\"",
        "num_ids": 463
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Takes a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1, 2, 3, 4, 5], 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5] ",
        "num_ids": 475
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        rho, phi = cmath.polar(number)\n        print(f\"{number}: rho = {rho:.2f}, phi = {phi:.2f} (radians)\")\n",
        "test": "assert convert((1+2j)) == (3.605551275463989, 0.9659258262890683) ",
        "num_ids": 566
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5 # list has 5 integer elements",
        "num_ids": 369
    },
    {
        "number": 255,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = list(combinations_with_replacement(l, n))\n    return combos\n",
        "test": "assert combinations_colors([1,2,3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)] ",
        "num_ids": 985
    },
    {
        "number": 256,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # loop through all numbers less than n\n    for i in range(2, n):\n        # check if i is prime or not\n        is_prime = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        \n        # if i is prime, increment count\n        if is_prime:\n            count += 1\n            \n    # return count\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4 ",
        "num_ids": 782
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 252
    },
    {
        "number": 259,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (test_tup2[i],)\n    return result_tup",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6) # both tuples have same elements",
        "num_ids": 576
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import random\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        primes = []\n        i = 2\n        while len(primes) < n:\n            if is_prime(i):\n                primes.append(i)\n            i += 1\n        return primes[-1]\n\n    return newman_shanks_williams(n)\n",
        "test": "assert newman_prime(1) == 2 ",
        "num_ids": 1094
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5)",
        "num_ids": 679
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    list1_part1 = list1[:L]\n    list1_part2 = list1[L:]\n    return (list1_part1, list1_part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5]) # test case 1",
        "num_ids": 578
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # average life span of a human in years\n    avg_h_lifespan = 75\n    # average dog lifespan in dog's years\n    avg_dog_lifespan = avg_h_lifespan * 10\n    # calculate the dog's age in dog's years\n    dog_age = h_age * 10\n    # calculate the remaining dog lifespan\n    remaining_lifespan = avg_dog_lifespan - dog_age\n    # calculate the age in years\n    years = remaining_lifespan / 10\n    # print the result\n    print(f\"Your dog is approximately {dog_age} years old in dog's years.\")\n    print(f\"Your dog has approximately {years} years left to live.\")\n",
        "test": "assert dog_age(2) == 16  # an adult dog's age is 16 dog years",
        "num_ids": 475
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    start = 0\n    while start < len(S):\n        result.append(S[start:start+step])\n        start += step\n    return result",
        "test": "assert list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]",
        "num_ids": 550
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(5) == 150, \"Incorrect lateral surface area for a cube of length 5\"",
        "num_ids": 319
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    # initialize the sum to 0\n    sum = 0\n    # loop over the first n odd numbers\n    for i in range(1, 2*n, 2):\n        # square the number and add it to the sum\n        sum += i**2\n    # return the sum\n    return sum\n",
        "test": "assert square_Sum(1) == 1 # The sum of the squares of the first 1 odd natural numbers is 1. ",
        "num_ids": 420
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 437
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 220
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0, \"Error: Test 2 failed\"",
        "num_ids": 528
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Calculate the power of the even number\n        power = i ** 5\n        \n        # Add the power to the sum variable\n        sum += power\n        \n    # Return the sum\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 456
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]  # test for a list of tuples",
        "num_ids": 460
    },
    {
        "number": 273,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] - test_tup2[i],)\n    return result_tuple\n",
        "test": "assert substract_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)",
        "num_ids": 561
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    \n    # initialize sum to 0\n    sum = 0\n    \n    # loop over the even indices\n    for i in range(0, n, 2):\n        # calculate the binomial coefficient and add to sum\n        sum += math.comb(n, i)\n    \n    # return the sum\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 442
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume\n",
        "test": "assert volume_cylinder(3, 6) == 144.3767416363213 ",
        "num_ids": 383
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dictionary, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 10, \"b\": 5, \"c\": 15, \"d\": 10}, 10) == {\"a\": 10, \"c\": 15, \"d\": 10}",
        "num_ids": 574
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1,2,3)) == 0",
        "num_ids": 413
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_number = n * (2 * n - 1)\n    return decagonal_number\n",
        "test": "assert is_num_decagonal(1) == 1 # Test if the first decagonal number is 1",
        "num_ids": 319
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 504
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Check if the length of the list is greater than 128\n    if len(test_list) > 128:\n        return False\n    \n    # Convert the list to a set and check if it has the same length as the original list\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1,2,3,4,5]) == True, \"List should have unique elements\"",
        "num_ids": 418
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [-1, -2, -3, -4, -5] ",
        "num_ids": 545
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    digits = set(str(n)) # get unique digits in n\n    for d in digits:\n        count = str(n).count(d) # count frequency of digit d in n\n        if count > int(d): # if frequency is greater than digit, return False\n            return False\n    return True # if all frequencies are less than or equal to digit, return True\n",
        "test": "assert validate(123) == True",
        "num_ids": 339
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Function to check if all items in a list are equal to a given element.\n    \"\"\"\n    return all(item == elem for item in lst)\n",
        "test": "assert check_element([1, 1, 1, 1, 1], 1) == True",
        "num_ids": 339
    },
    {
        "number": 285,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Regular expression pattern to match 'a' followed by two or three 'b' characters\n    pattern = re.compile(r'a([b]{2,3})')\n    # Check if the pattern matches the text\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abbb\") == True",
        "num_ids": 365
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # repeat the array k times and flatten it\n    a = [i for j in range(k) for i in a]\n\n    # find the maximum sum of a contiguous array in the modified array\n    max_sum = max_sub_array_sum(a)\n\n    return max_sum\n\n\ndef max_sub_array_sum(a):\n    '''\n    Write a function to find the largest sum of a contiguous array in the given array.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a)):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -1, -2, -1, -5, -4], 3, 3) == -1",
        "num_ids": 921
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    # Initialize the sum variable\n    sum = 0\n    # Loop through the first n even numbers and add their squares to the sum\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    # Return the sum\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 344
    },
    {
        "number": 290,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_length(list_of_lists):\n    max_len = 0\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\n",
        "test": "assert max_length([[1, 2, 3], [4, 5]]) == 3  # check if the function returns the correct length of the longest list in the input list of lists",
        "num_ids": 511
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Create a table to store the number of ways to paint n posts\n    dp = [0] * (n + 1)\n    dp[1] = 1  # There is only one way to paint 1 post\n    dp[2] = k  # There are k ways to paint 2 posts\n    for i in range(3, n + 1):\n        # Use the previous two rows to find the number of ways to paint i posts\n        for j in range(1, i - 1):\n            dp[i] += dp[i - j] * dp[j - 1]\n    return dp[n]\n",
        "test": "assert count_no_of_ways(2, 2) == 2",
        "num_ids": 874
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "test": "assert find(10, 3) == 3  # check if the function works for positive integers",
        "num_ids": 245
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w\n    b = h\n    c = math.sqrt(a**2 + b**2)\n    return c\n",
        "test": "assert otherside_rightangle(4,3) == 5 # w=4, h=3, b=5",
        "num_ids": 374
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(lst):\n    \"\"\"\n    Return the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = lst[0]\n    for val in lst:\n        if type(val) == int and val > max_val:\n            max_val = val\n        elif type(val) == float and val > max_val:\n            max_val = val\n        elif type(val) == str and len(val) > len(str(max_val)):\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3]) == 3",
        "num_ids": 408
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum\n",
        "test": "assert sum_div(6) == 12  # example of a test case for sum_div(6) that should return 12 ",
        "num_ids": 391
    },
    {
        "number": 296,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0, \"Should return 0\"",
        "num_ids": 440
    },
    {
        "number": 297,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n",
        "test": "assert flatten_list([1, [2, 3], [[4, 5], 6], 7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 533
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the aggregate for each state\n    state_aggregate = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for state, value in stdata:\n        # Add the value to the state aggregate\n        state_aggregate[state] += value\n\n    # Find the maximum aggregate state\n    max_state = max(state_aggregate, key=state_aggregate.get)\n\n    # Return the maximum aggregate and the state with the maximum aggregate\n    return state_aggregate[max_state], max_state",
        "test": "assert max_aggregate([(1, 2), (3, 4), (-5, 6)]) == 9, \"Should be 9\"",
        "num_ids": 590
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    \n    # initialize variables\n    count = 0\n    prev_sum = 0\n    curr_sum = 0\n    \n    # iterate over all possible sums of first n bits\n    for i in range(2**n):\n        # iterate over all possible sums of last n bits\n        for j in range(2**n):\n            # check if sum of first n bits is same as sum of last n bits\n            if i ^ j == 2**n - 1:\n                # update count and continue\n                count += 1\n                prev_sum = i\n                curr_sum = j\n                break\n            \n    # return count\n    return count\n",
        "test": "assert count_binary_seq(1) == 2  # for n=1, there are 2 sequences 01 and 10 ",
        "num_ids": 763
    },
    {
        "number": 301,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d, depth=1):\n    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return depth\n    max_depth = depth\n    for v in d.values():\n        if isinstance(v, dict):\n            max_depth = max(max_depth, dict_depth(v, depth+1))\n    return max_depth",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 469
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after number of rotations.\n    \"\"\"\n    # Calculate the total number of rotations.\n    total_rotations = sum(ranges) + sum(rotations)\n\n    # Calculate the number of rotations before the given index.\n    prev_rotations = sum(ranges[:index]) + sum(rotations[:index])\n\n    # Calculate the index after the given number of rotations.\n    new_index = (index - prev_rotations) % len(arr)\n\n    # Return the element at the new index.\n    return arr[new_index]\n",
        "test": "assert find_Element([1,2,3,4,5], [1,2,3], [0,1,2], 0) == 1  # check if it correctly finds the element at the given index after number of rotations",
        "num_ids": 745
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = re.findall(r'\\b\\w*p\\w*\\b', ' '.join(words))\n    if len(words) < 2:\n        return None\n    return words[:2]\n",
        "test": "assert start_withp(['python', 'programming', 'pizza', 'python', 'programming']) == ['python', 'programming']",
        "num_ids": 470
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize two variables to keep track of the current increasing subsequence sum and the maximum sum so far\n    curr_sum = a[index]\n    max_sum = a[index]\n\n    # Loop through the remaining elements in the array\n    for i in range(index+1, n):\n        # If the current element is greater than the previous element and is also greater than the kth element\n        if a[i] > a[i-1] and a[i] > a[k-1]:\n            # Add the current element to the current increasing subsequence sum\n            curr_sum += a[i]\n            # Update the maximum sum if the current sum is greater than the previous maximum\n            max_sum = max(max_sum, curr_sum)\n        # If the current element is less than or equal to the previous element, reset the current increasing subsequence sum\n        else:\n            curr_sum = a[i]\n\n    # Return the maximum sum found\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 4) == 9, \"Invalid output for [1, 2, 3, 4, 5], 5, 3, 4\" ",
        "num_ids": 1169
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    colon_tuplex = deepcopy(tuplex)  # make a copy of the original tuple\n    \n    # find the start and end index for the colon\n    start_index = max(m - len(tuplex), 0)  # negative index is not allowed\n    end_index = min(n, len(tuplex))  # the end index should not exceed the length of the tuple\n    \n    # remove elements outside the colon\n    for i in range(start_index):\n        colon_tuplex = colon_tuplex[1:]\n    for i in range(end_index, len(tuplex)):\n        colon_tuplex = colon_tuplex[:-1]\n    \n    return colon_tuplex\n",
        "test": "assert colon_tuplex((1,2,3), 0, 3) == (1,2,3)",
        "num_ids": 639
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Merge the two lists into a single list of tuples\n    nums = [(n1, n2) for n1, n2 in zip(nums1, nums2)]\n    \n    # Sort the list in descending order of product\n    nums.sort(key=lambda x: x[0] * x[1], reverse=True)\n    \n    # Get the specified number of largest products\n    products = [(nums1[i], nums2[j]) for i, j in nums[:N]]\n    \n    return products\n",
        "test": "assert large_product([-10, 2, 5, -7], [1, 3, -2, 6], 3) == [-10, -2, 6] ",
        "num_ids": 740
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(3, 4) == 4",
        "num_ids": 224
    },
    {
        "number": 310,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 242
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    while (n & 1) == 1:\n        n >>= 1\n    return n << 1\n",
        "test": "assert set_left_most_unset_bit(0b10010101) == 0b10010100, \"Failed\" ",
        "num_ids": 568
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume\n",
        "test": "assert volume_cone(3,4) == 25.132741228",
        "num_ids": 312
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    highest_power_of_2 = 0\n    while n > 0:\n        n >>= 1\n        highest_power_of_2 += 1\n    return highest_power_of_2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 368
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2 ",
        "num_ids": 348
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n",
        "test": "assert add_string(['apple', 'banana', 'orange'], \"Hello {0}!\") == ['Hello apple!', 'Hello banana!', 'Hello orange!']",
        "num_ids": 550
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result\n",
        "test": "assert convert_list_dictionary([1, 2, 3], [\"apple\", \"banana\", \"cherry\"], [\"$1.20\", \"$2.30\", \"$3.40\"]) == {1: {\"apple\": \"$1.20\"}, 2: {\"banana\": \"$2.30\"}, 3: {\"cherry\": \"$3.40\"}}",
        "num_ids": 646
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    \n    # Base case\n    if n <= 1:\n        return n\n    \n    # Initialize a dictionary to store intermediate results\n    memo = {}\n    \n    # Recursive function to compute the maximum sum\n    def helper(x):\n        if x in memo:\n            return memo[x]\n        \n        if x <= 1:\n            memo[x] = x\n            return x\n        \n        memo[x] = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        return memo[x]\n    \n    return helper(n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 639
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3],[4,5,6]]) == [1,2,3]",
        "num_ids": 374
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert check_distinct((1,2,3,4,5)) == True",
        "num_ids": 333
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate through the string and find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If all characters are repeated, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"aabccdde\") == \"b\"",
        "num_ids": 653
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('abba') == True",
        "num_ids": 251
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]",
        "test": "assert median_numbers(5, 3, 10) == 5 ",
        "num_ids": 380
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        digit_sum = sum(digits)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]  # correct output for the given input",
        "num_ids": 452
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup\n",
        "test": "assert bitwise_xor((0,0,0,0,0,0,0,0), (0,0,0,0,0,0,0,0)) == (0,0,0,0,0,0,0,0)",
        "num_ids": 640
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1,2), (3,4), (1,2), (5,6)]) == 3 ",
        "num_ids": 468
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        inner_tuple = ()\n        for j in range(len(test_tup1[i])):\n            inner_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (inner_tuple,)\n    return result\n",
        "test": "assert add_nested_tuples(((1,2,3),(4,5,6)), ((7,8,9),(10,11,12))) == ((8, 10, 12), (14, 16, 18))",
        "num_ids": 824
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(3,7) == 3",
        "num_ids": 237
    },
    {
        "number": 405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex(('apple', 'banana', 'cherry'), 'mango') == False",
        "num_ids": 302
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(1) == True",
        "num_ids": 273
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Sort the digits in descending order\n    sorted_digits = sorted(num_str, reverse=True)\n\n    # Join the sorted digits to form a new number\n    new_num_str = ''.join(sorted_digits)\n\n    # Convert the new number string back to an integer\n    new_num = int(new_num_str)\n\n    return new_num\n",
        "test": "assert rearrange_bigger(123) == 321, \"Test case 1 failed\"",
        "num_ids": 554
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for i in range(min(len(nums2), k)):\n            if len(heap) < k:\n                heapq.heappush(heap, (num+nums2[i], i, num))\n            elif num+nums2[i] < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num+nums2[i], i, num))\n    return [(heap[i][2], heap[i][1]) for i in range(min(k, len(heap)))]",
        "test": "assert k_smallest_pairs([1, 5, 11], [2, 6, 13], 3) == [(1, 2), (5, 6), (11, 13)]",
        "num_ids": 1058
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(2, 3, 4), (5, 6, 7), (8, 9, 10)]) == (2, 3, 4)",
        "num_ids": 733
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val < min_val:\n                min_val = val\n    return min_val\n",
        "test": "assert min_val([9,2,5,3,8]) == 2",
        "num_ids": 534
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\" ",
        "num_ids": 398
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5,6,7,8,9]) == [2, 4, 6, 8] ",
        "num_ids": 407
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n",
        "test": "assert extract_nth_element([('a',1),('b',2),('c',3)], 1) == ('b',2)",
        "num_ids": 518
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # check if list1 is empty\n    if not list1:\n        return False\n    # check if any element in list2 is equal to any element in list1\n    for element in list1:\n        if element in list2:\n            return True\n    # if no overlap, return False\n    return False\n",
        "test": "assert overlapping([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 430
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Find the maximum product of a pair from the sorted array\n    max_product = max(arr[-1] * arr[-2], arr[0] * arr[-1])\n    \n    return max_product\n",
        "test": "assert max_Product([2,3,-2,4]) == 12 ",
        "num_ids": 477
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Create a dictionary to store the first elements of each tuple\n    first_elements = {}\n    \n    # Iterate through each tuple in the input list\n    for tup in Input:\n        # If the first element of the tuple is already in the dictionary, increment its count\n        if tup[0] in first_elements:\n            first_elements[tup[0]] += 1\n        # Otherwise, add the first element to the dictionary with a count of 1\n        else:\n            first_elements[tup[0]] = 1\n    \n    # Create a list to store the tuples with common first elements\n    common_tuples = []\n    \n    # Iterate through each key-value pair in the dictionary\n    for key, value in first_elements.items():\n        # If the value is greater than 1 (i.e. more than one tuple has the same first element), add the key-value pair to the list of common tuples\n        if value > 1:\n            common_tuples.append((key, value))\n    \n    return common_tuples\n",
        "test": "assert group_tuples([(1,2),(1,3),(2,4),(3,4),(1,5),(2,6)]) == {(1, 2): [(1, 2), (1, 3), (1, 5)], (2, 4): [(2, 4), (2, 6)], (3, 4): [(3, 4)]} ",
        "num_ids": 838
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['apple', 'banana', 'orange']) == 'banana'  # check if the function returns the correct result for a list of strings",
        "num_ids": 400
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))\n",
        "test": "assert round_and_sum([2.34, 5.67, 8.90]) == 65.0, \"Incorrect output for [2.34, 5.67, 8.90]\"",
        "num_ids": 500
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through first n even numbers and add cube of each number to sum\n    for i in range(2, 2*n, 2):\n        sum += i**3\n    # Return sum\n    return sum\n",
        "test": "assert cube_Sum(2) == 8 # the cube sum of the first two even natural numbers is 2^3 + 4^3 = 8",
        "num_ids": 377
    },
    {
        "number": 421,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(test_tup)\n",
        "test": "assert concatenate_tuple((\"apple\",)) == \"apple\"",
        "num_ids": 306
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Average_Of_Cube(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    return total / (n * (n + 1) * (n + 2) / 6)",
        "test": "assert find_Average_Of_Cube(1) == 1  # the average of cubes of first 1 natural numbers is 1 (1^3)",
        "num_ids": 484
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for item in test_tuple:\n        rear_index.append(item[-1])\n    return rear_index\n",
        "test": "assert extract_rear(('abc', 'defg', 'hijklmno')) == 'n'",
        "num_ids": 389
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == 1",
        "num_ids": 356
    },
    {
        "number": 426,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 != 0, nums))\n",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5] # test case 1",
        "num_ids": 272
    },
    {
        "number": 427,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None\n",
        "test": "assert change_date_format(\"2021-12-31\") == \"31-12-2021\" # test for valid input",
        "num_ids": 581
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([]) == []  # test empty list",
        "num_ids": 665
    },
    {
        "number": 429,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result\n",
        "test": "assert and_tuples((True, False), (True, True)) == (True, False)",
        "num_ids": 455
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # find the vertex of the parabola\n    vertex_x = -b / (2 * a)\n    vertex_y = c / (4 * a)\n    \n    # find the slope of the directrix\n    slope = 1 / math.sqrt((-1 / a) + ((vertex_y - vertex_x**2) / (b + 2 * vertex_x)))\n    \n    # find the y-intercept of the directrix\n    y_intercept = slope * vertex_x - vertex_y\n    \n    # find the equation of the directrix\n    directrix_y = slope * x + y_intercept\n    \n    return directrix_y",
        "test": "assert parabola_directrix(-2, 3, 4) == -2/3 # a = -2, b = 3, c = 4",
        "num_ids": 606
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 337
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2 + height) / 2\n    return median",
        "test": "assert median_trapezium(10,15,20) == 15, \"Error in median_trapezium calculation\"",
        "num_ids": 303
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 3, 5, 7, 9], 8) == True",
        "num_ids": 338
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a[b]+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('abb'), \"The function should match a string that has an a followed by one or more b's.\"",
        "num_ids": 337
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Convert n to a string to isolate the last digit\n    n_str = str(n)\n    \n    # Get the length of the string\n    n_str_len = len(n_str)\n    \n    # Get the last digit of the string as an integer\n    last_digit = int(n_str[n_str_len-1])\n    \n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 376
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1,2,3,-4,5,-6]) == [-4,-6] ",
        "num_ids": 374
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_string += str1[i]\n    return new_string\n",
        "test": "assert remove_odd('hello') == 'hlo'  # odd characters 'e' and 'o' are removed from the string 'hello' and the resulting string is 'hlo'",
        "num_ids": 364
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 1), (5, 6)]) == 0  # there are no bidirectional pairs",
        "num_ids": 649
    },
    {
        "number": 439,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 374
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(adverb|adv|adv\\.)\\b')\n    adverb_match = adverb_pattern.search(text.lower())\n    if adverb_match:\n        adverb = adverb_match.group(0)\n        adverb_position = text.lower().find(adverb)\n        return (adverb, adverb_position)\n    else:\n        return None\n",
        "test": "assert find_adverb_position(\"She writes well.\") == [(3, \"well\")] ",
        "num_ids": 650
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_cube(3) == 54, \"Error in surfacearea_cube function\"",
        "num_ids": 274
    },
    {
        "number": 442,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from array import array\n\ndef positive_count(nums):\n    # Initialize variables to keep track of positive and total counts\n    positive_count = 0\n    total_count = 0\n    \n    # Loop over each element in the array\n    for num in nums:\n        # Increment total count\n        total_count += 1\n        \n        # Increment positive count if the element is positive\n        if num > 0:\n            positive_count += 1\n    \n    # Calculate the ratio of positive to total counts\n    ratio = float(positive_count) / total_count\n    \n    # Return the ratio as a decimal\n    return ratio\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 5/5",
        "num_ids": 435
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    return max_neg",
        "test": "assert largest_neg([5, -1, -3, 7, -5]) == -1",
        "num_ids": 404
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tuple(x for x in tup if abs(x) >= K)\n        result.append(new_tup)\n    return result\n",
        "test": "assert trim_tuple([(1, 2), (3, 4), (5, 6)], 1) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 485
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18) ",
        "num_ids": 591
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    return {i: c[i] for i in lst}\n",
        "test": "assert count_Occurrence((\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"c\"), [\"a\", \"b\", \"c\"]) == {\"a\": 2, \"b\": 2, \"c\": 3}",
        "num_ids": 651
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "test": "assert cube_nums([1,2,3,4]) == [1,8,27,64]  # test for a list of positive integers",
        "num_ids": 371
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i**2\n    return perrin_sum\n",
        "test": "assert cal_sum(1) == 1, \"Testing for n=1\"",
        "num_ids": 302
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for s in str_list:\n        if len(s) >= l:\n            new_list.append(s[:l])\n    return new_list\n",
        "test": "assert extract_string(\"python is awesome\", 7) == \"python i\"",
        "num_ids": 324
    },
    {
        "number": 451,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 305
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 100) == 0  # Test case when sale amount is equal to actual cost",
        "num_ids": 447
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef sumofFactors(n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Calculate square root of n to find maximum even factor\n    max_even_factor = math.floor(math.sqrt(n))\n    \n    # Loop through all even factors from 2 to max_even_factor\n    for i in range(2, max_even_factor + 1, 2):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Add i to sum\n            sum += i\n            \n    # Return sum of even factors\n    return sum",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 507
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    return pattern.findall(text)\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == \"over\"",
        "num_ids": 403
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False",
        "num_ids": 603
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    # return the modified list\n    return stringlist\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 379
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    min_len = len(lst)\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i < min_len:\n                min_len = j-i\n                min_sublist = lst[i:j]\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3,4],[5,6],[7,8,9]]) == [1,2,3,4]",
        "num_ids": 479
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(3,4) == 12",
        "num_ids": 241
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Create a regular expression pattern to match all uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use the pattern to find all uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # Replace each uppercase substring with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1\n",
        "test": "assert remove_uppercase('hello') == 'hello'",
        "num_ids": 416
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1, 4, 7] ",
        "num_ids": 406
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr('Hello, World!') == 2 ",
        "num_ids": 306
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result\n",
        "test": "assert combinations_list([]) == [()]",
        "num_ids": 813
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n\n    for num in arr:\n        if num == 0:\n            max_product = max(max_product, current_max * current_min)\n            current_max = 1\n            current_min = 1\n        else:\n            current_max = max(current_max * num, num)\n            current_min = min(current_min * num, num)\n            max_product = max(max_product, current_max)\n\n    return max_product\n",
        "test": "assert max_subarray_product([-10, -1, 2, 3, -2]) == 60",
        "num_ids": 602
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if dict[key] != dict[list(dict.keys())[0]]:\n            return False\n    return True\n",
        "test": "assert check_value({\"a\": 1, \"b\": 1, \"c\": 1}, 1) == True",
        "num_ids": 406
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k:v for k,v in dict1.items() if v != ''}\n    return new_dict\n",
        "test": "assert drop_empty({}) == {} # test for empty dictionary",
        "num_ids": 388
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n        elif arr[i] == 0:\n            max_product = max(max_product * arr[i], 0)\n            min_product = max(min_product * arr[i], 0)\n        else:\n            max_product, min_product = min_product, max_product\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n    \n    return max_product\n",
        "test": "assert max_product([1,2,3,4,5]) == 120, \"Max product is not correct\"",
        "num_ids": 756
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((4, 5, 6)) == (9, 10, 11) # tuple with pairwise addition of (4, 5, 6) ",
        "num_ids": 445
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of the array elements modulo n\n    product = 1\n    for x in arr:\n        product = (product * x) % n\n\n    return product\n",
        "test": "assert find_remainder([4,5,6], 15) == 120",
        "num_ids": 238
    },
    {
        "number": 472,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] == l[i]+1:\n            return True\n    return False\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 350
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    result = set1.intersection(set2)\n    return tuple(result)\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)",
        "num_ids": 544
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello world\", \"o\", \"\") == \"hell wrld\" # test 2",
        "num_ids": 299
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    c = Counter(dict1)\n    sorted_dict = dict(sorted(c.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 2, 'banana': 3, 'orange': 1}) == {'orange': 1, 'apple': 2, 'banana': 3} ",
        "num_ids": 520
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Return the sum of the first and last elements of the array\n    return nums[0] + nums[-1]\n",
        "test": "assert big_sum([-1,2,-3,4,-5]) == -1, \"big_sum should return -1 for input [-1,2,-3,4,-5]\"",
        "num_ids": 529
    },
    {
        "number": 477,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string\n",
        "test": "assert is_lower(\"Hello World\") == \"hello world\" ",
        "num_ids": 182
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase(\"apple banana orange\") == \"apl bnng orng\" # Test case 2",
        "num_ids": 390
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)\n",
        "test": "assert first_Digit(12345) == 1  # Test case 1",
        "num_ids": 415
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5] ",
        "num_ids": 406
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)\n",
        "test": "assert difference(1) == 0, \"Test Failed\"",
        "num_ids": 460
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 5) == 0  # Example input 2",
        "num_ids": 448
    },
    {
        "number": 557,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n",
        "test": "assert toggle_string(\"Hello\") == \"hELLO\"",
        "num_ids": 270
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # converting the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # initializing the sum variable\n    sum_diff = 0\n\n    # checking if the lengths of the two numbers are the same\n    if len(n1_str) != len(n2_str):\n        # if the lengths are not the same, make the lengths the same\n        if len(n1_str) > len(n2_str):\n            n2_str = '0' * (len(n1_str) - len(n2_str)) + n2_str\n        else:\n            n1_str = '0' * (len(n2_str) - len(n1_str)) + n1_str\n\n    # iterating through the digits of the two numbers\n    for i in range(len(n1_str)):\n        # finding the difference between the digits\n        diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        # adding the difference to the sum variable\n        sum_diff += diff\n\n    # returning the sum of the per-digit difference\n    return sum_diff\n",
        "test": "assert digit_distance_nums(1234, 2234) == 1",
        "num_ids": 940
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6 # Example case 1",
        "num_ids": 591
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # finding the union of the elements of two tuples\n    union_tup = tuple(set(test_tup1).union(set(test_tup2)))\n\n    # sorting the union tuple\n    sorted_union_tup = sorted(union_tup)\n\n    # returning the sorted union tuple\n    return sorted_union_tup\n",
        "test": "assert union_elements((\"apple\", \"banana\", \"cherry\"), (\"banana\", \"cherry\", \"date\")) == sorted((\"apple\", \"banana\", \"cherry\", \"date\")) ",
        "num_ids": 672
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3],[4,5],[6]]) == 3",
        "num_ids": 372
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', text)\n    return values\n",
        "test": "assert extract_values(\"This is a test string with some values like \\\"test1\\\" and \\\"test2\\\"\") == [\"test1\", \"test2\"]",
        "num_ids": 339
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3], 3) == 3 ",
        "num_ids": 506
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 242
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 357
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 364
    },
    {
        "number": 568,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 253
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird']]) == [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog']] ",
        "num_ids": 554
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    if len(unique_nums) < 2:\n        return None\n    else:\n        return sorted(list(unique_nums))[:2]\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 525
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate through each element in the list\n    for element in list_data:\n        # if the element is not in the unique set, add it\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # calculate the product of the unique elements in the set\n    product = 1\n    for element in unique_set:\n        product *= element\n\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 ",
        "num_ids": 439
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(2,5) == 355.78  # Test case 2",
        "num_ids": 450
    },
    {
        "number": 576,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B) - len(A) + 1):\n        if A == B[i:i+len(A)]:\n            return True\n    return False",
        "test": "assert is_Sub_Array([1,2,3,4], [5,6]) == False",
        "num_ids": 416
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n-1) * n % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 359
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError('Lists must have the same length')\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9] ",
        "num_ids": 782
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 552
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = ()\n    for i in test_tuple:\n        if type(i) == tuple:\n            for j in i:\n                if even_fnc(j):\n                    even_tuple += (j,)\n        else:\n            if even_fnc(i):\n                even_tuple += (i,)\n    return even_tuple\n\n\ndef is_even(num):\n    '''\n    Helper function to check if a number is even.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert even_ele( (1, (2, 3), 4, (5, 6), 7), lambda x: x % 2 == 1) == (1, (), 7)",
        "num_ids": 726
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2 * b * s + (b * b) * (1 / 3)\n    return surface_area\n",
        "test": "assert surface_Area(1, 5) == 15.0, \"Error in surface_Area calculation\"",
        "num_ids": 377
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True # test for an empty dictionary",
        "num_ids": 217
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    def catalan_helper(n):\n        if n <= 1:\n            return 1\n        else:\n            catalan = 0\n            for i in range(n):\n                catalan += catalan_helper(i) * catalan_helper(n-i-1)\n            return catalan\n    return catalan_helper(num)\n",
        "test": "assert catalan_number(0) == 1 ",
        "num_ids": 447
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.search(r'\\b\\w+ly\\b', text)\n    if match:\n        return match.group(), match.start(), match.end() - match.start()\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"The dog is slowly running.\") == (\"slowly\", 14, 20)",
        "num_ids": 673
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for item in items if item[1] in heap]\n",
        "test": "assert expensive_items([(1, 20), (2, 10), (3, 30), (4, 25), (5, 40)], 3) == [(3, 30), (4, 25), (5, 40)]",
        "num_ids": 801
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"n is greater than length of list.\")\n        return\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        l.extend(first_part)\n        return l\n",
        "test": "assert split_Arr([1,2,3,4,5], 2) == [1,2,3,4,5,1,2], \"split_Arr function not working as expected\" ",
        "num_ids": 409
    },
    {
        "number": 587,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) ",
        "num_ids": 225
    },
    {
        "number": 588,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17",
        "num_ids": 451
    },
    {
        "number": 589,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        root = int(i ** 0.5)\n        if root*root == i:\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 519
    },
    {
        "number": 590,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 368
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]  # test 1",
        "num_ids": 462
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\n\ndef consecutive_product(n):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += binomial_Coeff(n, i) * binomial_Coeff(n, i+1)\n    return sum\n",
        "test": "assert binomial_Coeff(5,2) == 10 # 5 choose 2 = 10",
        "num_ids": 734
    },
    {
        "number": 593,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\n\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into its octets using regular expressions\n    octets = re.findall(r'\\d+', ip)\n    \n    # Check if the ip address has more than 4 octets and raise an exception if it does\n    if len(octets) > 4:\n        raise ValueError('Invalid IP address')\n    \n    # Remove leading zeroes from each octet and return the cleaned up ip address\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(cleaned_octets)\n",
        "test": "assert removezero_ip(\"127.0.0.1\") == \"127.0.0.1\" ",
        "num_ids": 1478
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    \n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1, 3, 5]) == None ",
        "num_ids": 637
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Swaps(str1,str2):\n    #convert strings to lists of integers\n    str1_list = list(map(int, str1))\n    str2_list = list(map(int, str2))\n    \n    #initialize variables\n    swaps = 0\n    i = 0\n    \n    #loop through str1 and check if corresponding digit in str2 is 1\n    while i < len(str1_list):\n        if str1_list[i] == 1 and str2_list[i] == 0:\n            #swap digits and increment swap counter\n            str1_list[i] = 0\n            str1_list[str2_list.index(1)] = 1\n            str2_list[str1_list.index(1)] = 0\n            str2_list[i] = 1\n            swaps += 1\n        i += 1\n        \n    return swaps\n",
        "test": "assert min_Swaps(\"1100\", \"0110\") == 2 ",
        "num_ids": 1187
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n",
        "test": "assert tuple_size((1, 2, 3)) == 9  # Tuple with 3 elements, each of which is an integer.",
        "num_ids": 367
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if k <= n1 and arr1[k-1] > arr2[k-1]:\n        return arr1[k-1]\n    elif k <= n2 and arr2[k-1] > arr1[k-1]:\n        return arr2[k-1]\n    else:\n        if n1 > n2:\n            return find_kth(arr1[k-n2:], arr2, k-n2)\n        else:\n            return find_kth(arr1, arr2[k-n1:], k-n1)\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8, 10], 4) == 8 ",
        "num_ids": 1264
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Get the length of the number\n    num_len = len(num_str)\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through each digit of the number and add it to the sum\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True, \"Incorrect output for input 153\"",
        "num_ids": 609
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = (number * (number + 1)) / 2\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(5) == (15, 3)",
        "num_ids": 364
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 240
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 451
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    \n    for i in range(1, n+1):\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        if i == sum_of_digits:\n            lucid_numbers.append(i)\n    \n    return lucid_numbers\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 1493
    },
    {
        "number": 604,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into a list of words\n    words = words[::-1] # reverse the order of the words in the list\n    reversed_words = \" \".join(words) # join the words back into a string, seperated by spaces\n    return reversed_words\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\" # test with hello world",
        "num_ids": 383
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n",
        "test": "assert prime_num(2), \"2 is a prime number\"",
        "num_ids": 344
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "test": "assert radian_degree(180) == math.pi ",
        "num_ids": 300
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substrings, a start index and an end index.\n    '''\n    # create a list to store all the matches found\n    matches = []\n\n    # find all matches of the pattern in the text\n    for match in re.finditer(pattern, text):\n        # get the start and end indices of the match\n        start = match.start()\n        end = match.end()\n\n        # add the match to the matches list\n        matches.append((match.group(), start, end))\n\n    # return the matches list\n    return matches\n",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", r\"\\d+\") == (\"1\", 16, 18)",
        "num_ids": 525
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    \n    # define a function to compute the factorial of a number\n    def factorial(num):\n        result = 1\n        for i in range(1, num+1):\n            result *= i\n        return result\n    \n    # compute the bell number using the formula:\n    # bell_number(n) = (n+1) * bell_number(n-1) + bell_number(n-2)\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n+1) * bell_Number(n-1) + bell_Number(n-2)\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 634
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    del list2[k-1]\n    return list2\n",
        "test": "assert remove_kth_element([1,2,3,4,5], 3) == [1,2,3,5]",
        "num_ids": 489
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    \"\"\"\n    max_val = 0\n    for row in test_list:\n        if len(row) > N:  # check if row has n+1 columns\n            if row[N] > max_val:\n                max_val = row[N]\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6]], 2) == 6",
        "num_ids": 468
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    \"\"\"\n    first_lst = []\n    second_lst = []\n    for sublist in lst:\n        first_lst.append(sublist[0])\n        second_lst.append(sublist[1])\n    return [first_lst, second_lst]\n",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]], \"Error in merge\" ",
        "num_ids": 624
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(test_list[i])\n        else:\n            result.append(result[i-1] + test_list[i])\n    return result\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6], \"Incorrect cumulative sum for [1, 2, 3]\"",
        "num_ids": 436
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6))) == [2.0, 5.0] ",
        "num_ids": 485
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n",
        "test": "assert tuple_modulo((1, 2, 3), (2, 4, 6)) == (1, 2, 3)",
        "num_ids": 556
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    if d == 0: # base case\n        return 0\n    if steps == 0: # base case\n        return -1 # no jumps possible\n    if steps == 1: # base case\n        return 1 # 1 jump is required\n    if d > steps: # base case\n        return -1 # no jumps possible\n    \n    # recursive case\n    min_jumps = float('inf') # initialize to infinity\n    for i in range(1, steps+1):\n        # calculate minimum jumps required to reach destination\n        min_jumps = min(min_jumps, min_Jumps(steps-i, abs(d-i))+1)\n    \n    return min_jumps\n",
        "test": "assert min_Jumps(2, 2) == 1 # minimum 1 jump required to reach (2, 0) from (0, 0)",
        "num_ids": 788
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(nums1[i] / nums2[i])\n\n    return result\n",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25,0.4,0.5]",
        "num_ids": 517
    },
    {
        "number": 619,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    non_num_list = []\n\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n\n    return ''.join(non_num_list) + ''.join(num_list)\n",
        "test": "assert move_num(\"abc123\") == \"abc123\" # Test when given string has no numbers",
        "num_ids": 509
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 3  # [1, 2, 4]",
        "num_ids": 637
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        median1 = (arr1[n//2 - 1] + arr1[n//2]) / 2\n        median2 = (arr2[n//2 - 1] + arr2[n//2]) / 2\n        return (median1 + median2) / 2\n    else:\n        return arr1[n//2]\n",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 4) == 4.5",
        "num_ids": 638
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,16,25]",
        "num_ids": 378
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase = string.upper()\n    return uppercase\n",
        "test": "assert is_upper(\"world\") == False",
        "num_ids": 220
    },
    {
        "number": 625,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1] ",
        "num_ids": 532
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circumference of the semicircle\n    c = 2 * math.pi * r\n    \n    # Use the formula for the area of a right triangle\n    # with a given semi-circumference and radius\n    area = 0.5 * c * r\n    \n    return area\n",
        "test": "assert triangle_area(3) == 6.2876127976056345  # radius of 3, area of semicircle = pi*3^2, area of largest triangle = pi*3/4 ",
        "num_ids": 651
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    if start >= end:\n        return None\n\n    for i in range(start, end):\n        if array[i] != i + 1:\n            if array[i] > 0 and array[i] <= end:\n                array[array[i] - 1], array[i] = array[i], array[array[i] - 1]\n            else:\n                return i + 1\n    return None",
        "test": "assert find_First_Missing([1, 2, 3, 4, 6]) == 5",
        "num_ids": 588
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"  # test 1",
        "num_ids": 276
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(lst):\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6] ",
        "num_ids": 331
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # Initialize an empty list to store the adjacent coordinates\n    adjac_coords = []\n    \n    # Loop through the adjacent coordinates and append them to the list\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j) != (0, 0):\n                adjac_coords.append((ele[0]+i, ele[1]+j))\n    \n    # Remove the input coordinate from the list and return it\n    adjac_coords.remove(ele)\n    return adjac_coords\n",
        "test": "assert adjac((1,1)) == [(0,1),(2,1),(1,0),(1,2)]  # Test for (1,1)",
        "num_ids": 655
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        return text.replace(\" \", \"_\")\n    elif \"_\" in text:\n        return text.replace(\"_\", \" \")\n    else:\n        return text",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello_World\"",
        "num_ids": 347
    },
    {
        "number": 632,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n    for i in range(zero_count):\n        num_list.remove(0)\n    num_list.extend([0]*zero_count)\n    return num_list\n",
        "test": "assert move_zero([1,2,0,3,4,0]) == [1,2,3,4,0,0]",
        "num_ids": 737
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def pair_xor_sum(arr, n):\n    '''\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through the list from the first index to the second last index\n    for i in range(n-1):\n        # Loop through the list from the index i+1 to the last index\n        for j in range(i+1, n):\n            # Calculate the xor of the numbers at indices i and j\n            xor = arr[i] ^ arr[j]\n            # Add the result to the sum\n            sum += xor\n    \n    # Return the sum\n    return sum\n",
        "test": "assert pair_xor_Sum([1, 2, 3, 4, 5], 5) == 14  #Example test case 1",
        "num_ids": 597
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert heap_sort([5, 2, 9, 1, 7]) == [1, 2, 5, 7, 9] # test heap_sort on a random list",
        "num_ids": 527
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 332
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Converting temperature to fahrenheit\n    t_f = (t * 9/5) + 32\n    # Calculating wind chill index\n    wc_index = 13.12 + 0.6215*t_f - 11.37*math.pow(v, 0.16) + 0.3965*t_f*math.pow(v, 0.16)\n    # Rounding off the wind chill index to the next integer\n    wc_index = round(wc_index)\n    return wc_index\n",
        "test": "assert wind_chill(20, 15) == 12, \"Wrong value for wind_chill(20, 15)\"",
        "num_ids": 777
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    total_length = 0\n    \n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    \n    return total_length\n",
        "test": "assert sample_nam([\"aardvark\", \"bat\", \"cat\", \"dog\", \"eagle\"]) == 0 ",
        "num_ids": 572
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n",
        "test": "assert remove_parenthesis(\"Hello (world)\") == \"Hello \"",
        "num_ids": 303
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = (2*n) * (2*n - 1)\n    return nonagonal_number\n\nn = int(input(\"Enter the value of n: \"))\nnonagonal_number = is_nonagonal(n)\nprint(\"The {}th nonagonal number is: {}\".format(n, nonagonal_number))\n",
        "test": "assert is_nonagonal(2) == 2",
        "num_ids": 584
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[^z]\\w*z\\w*[^z]\\w*\\b'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_wordz_middle(\"zebra\") == False",
        "num_ids": 474
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the whole array if k is greater than or equal to length of the array\n    if k >= len(input):\n        input.reverse()\n    else:\n        # Reverse the first part of the array upto the kth position\n        for i in range(k // 2):\n            temp = input[i]\n            input[i] = input[k - i - 1]\n            input[k - i - 1] = temp\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5,6,7], 3) == [3,2,1,4,5,6,7] # test case 1",
        "num_ids": 680
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"c\": 3, \"d\": 4}) == (4, 5, 6, {\"c\": 3, \"d\": 4})",
        "num_ids": 573
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    total_cost = 0\n    visited = 0\n    max_avg = 0\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\n            total_cost += dp[i][j]\n            visited += 1\n\n            if i == N - 1 and j == N - 1:\n                max_avg = total_cost / visited\n\n    return max_avg ",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 4.0  # A path with sum of costs 12 and 3 cells visited",
        "num_ids": 973
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'John': (1.8, 70), 'Jane': (1.6, 60), 'Mike': (1.9, 80)}, 1.7, 65) == {'John': (1.8, 70), 'Mike': (1.9, 80)} ",
        "num_ids": 865
    },
    {
        "number": 723,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3],[1,2,3]) == 3",
        "num_ids": 406
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_to_power = base ** power\n    sum_of_digits = sum(int(digit) for digit in str(base_to_power))\n    return sum_of_digits\n",
        "test": "assert power_base_sum(10, 2) == 30, \"Error: power_base_sum(10, 2) should be 30\"",
        "num_ids": 649
    },
    {
        "number": 725,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    match = re.search('\"([^\"]*)\"', text1)\n    if match:\n        return match.group(1)\n    else:\n        return None",
        "test": "assert extract_quotation(\"Alice said, \\\"I am fine.\\\"\") == \"I am fine.\" ",
        "num_ids": 315
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    # create an empty list to store the results\n    result_list = []\n\n    # loop through the input tuple and calculate the products\n    for i in range(len(test_tup) - 1):\n        result = test_tup[i] * test_tup[i+1]\n        result_list.append(result)\n\n    # convert the list to a tuple and return it\n    result_tup = tuple(result_list)\n    return result_tup\n",
        "test": "assert multiply_elements((1, 2, 3)) == (2, 6)",
        "num_ids": 524
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 549
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k,v in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 504
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula 2\u03c0r*h\n    lateral_surface = 2 * math.pi * r * h\n    # Return the result\n    return lateral_surface\n",
        "test": "assert lateralsurface_cone(4, 6) == 25.08351839716697",
        "num_ids": 558
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colons\n    text = re.sub(r\"\\s\", \":\", text)\n    # Replace commas with colons\n    text = re.sub(r\",\", \":\", text)\n    # Replace dots with colons\n    text = re.sub(r\"\\.\", \":\", text)\n    return text",
        "test": "assert replace_specialchar(\"123.456\") == \"123:456\" # Test with dots replaced with colons",
        "num_ids": 371
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            first_occurrence = mid\n            right = mid - 1  # Look for the first occurrence to the left\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return first_occurrence\n",
        "test": "assert find_first_occurrence([1,2,3,4,4,4,5,6,7], 4) == 3 ",
        "num_ids": 629
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    MOD = 1000000007\n    MOD_INV = pow(MOD, MOD - 2, MOD)\n    res = [0] * (n + 1)\n    res[0] = 1\n    for i in range(1, n + 1):\n        res[i] = res[i - 1] * arr[i - 1] % MOD\n    for i in range(2, n + 1):\n        for j in range(i, n + 1):\n            res[j] = (res[j] + res[j - i] * res[i - 1] % MOD * arr[i - 1] % MOD * MOD_INV % MOD) % MOD\n    return res[n]\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0, \"Error: Incorrect result\"",
        "num_ids": 751
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    n = n ^ (n & (n - 1))  # Flip all the bits except the first and the last bit.\n    n = n ^ ((n & 0xAAAAAAAA) >> 1)  # Flip the adjacent bits (except the first and the last bit).\n    return n\n",
        "test": "assert set_middle_bits(0b101010101) == 0b0101010101 # test case 2",
        "num_ids": 504
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert left_insertion([1, 2, 3], 1) == 0",
        "num_ids": 406
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('World') == False",
        "num_ids": 367
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (1 + 2**(n-1)) * geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 254
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    count = 1\n    while True:\n        num = count * (count + 1) / 2\n        num_digits = len(str(int(num)))\n        if num_digits == n:\n            return count\n        count += 1",
        "test": "assert find_Index(1) == 1",
        "num_ids": 364
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}, \"Test case 2 failed\"",
        "num_ids": 466
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same('a') == True  # only one character",
        "num_ids": 294
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side * 2) / math.sqrt(3)\n    # Calculate the area of the tetrahedron\n    area = math.sqrt(2 / 3) * s ** 2\n    # Return the area of the tetrahedron\n    return area\n",
        "test": "assert area_tetrahedron(2) == 0.125  # check if area of tetrahedron with side length 2 is correct",
        "num_ids": 674
    },
    {
        "number": 743,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    # Reversing the whole list\n    list.reverse()\n    \n    # Reversing the first m elements\n    list[:m] = list[:m][::-1]\n    \n    # Reversing the remaining elements\n    list[m:] = list[m:][::-1]\n    \n    return list\n",
        "test": "assert rotate_right([1,2,3,4,5], 2) == [4,5,1,2,3] # rotating by 2 items to the right direction",
        "num_ids": 564
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, None, 4)) == True # tuple with a None value",
        "num_ids": 323
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num%int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(21, 30) == False",
        "num_ids": 481
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r ** 2 * math.sin(math.radians(a))\n",
        "test": "assert sector_area(5, 180) == 50.26548245743669",
        "num_ids": 429
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    lcs = ''\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] > dp[i-1][j][k] and dp[i][j-1][k] > dp[i][j][k-1]:\n            j -= 1\n        elif dp[i][j][k-1] > dp[i-1][j][k] and dp[i][j][k-1] > dp[i][j-1][k]:\n            k -= 1\n    return lcs\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGXAYB\") == \"AGGXAYB\" ",
        "num_ids": 1690
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<=[A-Z])(?=[A-Z][a-z])'\n    return re.sub(pattern, ' ', str1)\n",
        "test": "assert capital_words_spaces(\"Python\") == \"Python\"",
        "num_ids": 412
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert each string to a list of integers and sort it\n    sorted_list = sorted(list(map(int, nums_str)))\n\n    # Convert the sorted list back to strings and return it\n    return list(map(str, sorted_list))\n",
        "test": "assert sort_numeric_strings([]) == []",
        "num_ids": 548
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5] ",
        "num_ids": 376
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function takes an array and an index as input and checks if the given array represents a min heap or not.\n    Returns True if the array represents a min heap, else False.\n    '''\n    # Find the left and right children of the node at index i\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n\n    # If the node at index i has a left child\n    if left_child < len(arr):\n        # If the node at index i has a right child\n        if right_child < len(arr):\n            # If the left child is not greater than the node at index i and the right child is not greater than the node at index i\n            if arr[left_child] <= arr[i] and arr[right_child] <= arr[i]:\n                # Recursively check if the left child and right child represent a min heap\n                return (check_min_heap_helper(arr, left_child) and\n                        check_min_heap_helper(arr, right_child))\n            else:\n                return False\n        else:\n            # If the node at index i has no right child\n            if arr[left_child] <= arr[i]:\n                return check_min_heap_helper(arr, left_child)\n            else:\n                return False\n    else:\n        # If the node at index i has no left child\n        return True\n",
        "test": "assert check_min_heap_helper([4, 6, 10, 3, 8, 5, 1, 9], 1) == False  # invalid min heap",
        "num_ids": 1040
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 500
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of tuple (number)\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Return the minimum k records from the sorted list\n    return sorted_list[:K]\n",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(1, 2, 3), (4, 5, 6)]",
        "num_ids": 498
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_indices.append(i)\n    return common_indices",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [0, 1, 2] ",
        "num_ids": 594
    },
    {
        "number": 755,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Find the smallest number\n    smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    \n    # Find the second smallest number\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest\n",
        "test": "assert second_smallest([4, 2, 9, 1, 5]) == 2",
        "num_ids": 531
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 300
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 510
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_count:\n            sublist_count[sublist_tuple] = 0\n        sublist_count[sublist_tuple] += 1\n    return sublist_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 658
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 416
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False",
        "test": "assert unique_Element([1]) == True # there is only one element in the list",
        "num_ids": 382
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    month_30 = [4, 6, 9, 11]\n    if monthnum3 in month_30:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True # April has 30 days",
        "num_ids": 463
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    minimum = float('inf')\n    for i in range(1,n):\n        diff = arr[i] - arr[i-1]\n        if diff < minimum:\n            minimum = diff\n    return minimum\n",
        "test": "assert find_min_diff([1, 3, 15, 11, 6, 45, 2], 7) == 1",
        "num_ids": 548
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 281
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    count = 0\n    num = 1\n    while count < n:\n        if all(num % i != 0 for i in range(2, int(math.sqrt(num))+1)):\n            count += 1\n        num += 1\n    return num-1",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 715
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)] ",
        "num_ids": 369
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def get_pairs_count(arr, target_sum):\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # initialize a variable to store the count of pairs with target sum\n    count = 0\n\n    # iterate through each element in the list\n    for i in range(len(arr)):\n        # check if the complement (i.e. target_sum - arr[i]) exists in the dictionary\n        if target_sum - arr[i] in freq_dict:\n            # if it does, add the number of times the complement appears in the dictionary to the count\n            count += freq_dict[target_sum - arr[i]]\n            # decrement the count of the current element from the dictionary\n            freq_dict[arr[i]] -= 1\n\n    # return the count of pairs with target sum\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2",
        "num_ids": 654
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff\n",
        "test": "assert Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 375
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i*i*i\n        i += 2\n    return sum\n",
        "test": "assert odd_num_sum(10) == 225, \"The function is not correct for odd_num_sum(10)\"",
        "num_ids": 482
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    mapping = {')': '(', ']': '[', '}': '{'}\n    for char in exp:\n        if char in mapping:\n            if not stack or stack[-1] != mapping[char]:\n                return False\n            stack.pop()\n        elif char in mapping.values():\n            stack.append(char)\n    return not stack\n",
        "test": "assert check_expression(\"(a+b)*c\") == True ",
        "num_ids": 538
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words_without_k = []\n    for word in words:\n        if len(word) != K:\n            words_without_k.append(word)\n    return ' '.join(words_without_k)\n",
        "test": "assert remove_length(\"Hello world\", 5) == \"world\" # test 2",
        "num_ids": 452
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    if pattern in text:\n        match = re.finditer(pattern, text)\n        match_list = [(m.start(), m.group()) for m in match]\n        return match_list\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"This is a test string\", \"is\") != {'is': [(5, 17), (10, 12)]}",
        "num_ids": 558
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 5, 6, 7]) == False  # [1, 2, 3, 4, 5, 6, 7] should return False",
        "num_ids": 407
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if (i == 0 and test_str[i] in vowels) or (i == len(test_str) - 1 and test_str[i] in vowels) or (i > 0 and i < len(test_str) - 1 and (test_str[i - 1] in vowels and test_str[i + 1] in vowels)):\n            count += 1\n    return count\n",
        "test": "assert count_vowels('world') == 0",
        "num_ids": 559
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    seen = {}\n    total = 0\n    for num in arr:\n        if num not in seen:\n            seen[num] = True\n            total += num\n    return total\n",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 445
    },
    {
        "number": 778,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    for key, group in groupby(lst):\n        result.append(list(group))\n    return result",
        "test": "assert pack_consecutive_duplicates([1, 1, 1, 2, 2, 2, 3, 3, 3, 3]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3, 3]] ",
        "num_ids": 378
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 676
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 10:\n                result.append(comb)\n    return result\n",
        "test": "assert find_combinations([(1, 2), (3, 4), (5, 6)]) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (1, 5, 6), (3, 4, 5), (3, 4, 6), (3, 5, 6), (4, 5, 6)] ",
        "num_ids": 1056
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2 if i * i != n else 1\n    return count\n",
        "test": "assert count_divisors(1) == 1  # there is only one divisor for 1",
        "num_ids": 553
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2 != 0:\n                odd_sum += sum(arr[i:j+1])\n    return odd_sum\n",
        "test": "assert odd_length_sum([1, 2, 3, 4]) == 15  # Example from GeeksforGeeks",
        "num_ids": 621
    },
    {
        "number": 783,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if delta == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1298
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n            if even_count == 2:\n                break\n        else:\n            odd_product *= num\n            odd_count += 1\n            if odd_count == 2:\n                break\n    return even_product * odd_product\n",
        "test": "assert mul_even_odd([1, 2, 3, 4]) == 6  # even number is 4 and odd number is 2",
        "num_ids": 588
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert string to list of strings\n        str_list = test_str[1:-1].split(',')\n        \n        # Convert each string to integer and store in a list\n        int_list = []\n        for item in str_list:\n            int_list.append(int(item.strip()))\n        \n        # Convert list to tuple and return it\n        return tuple(int_list)\n    \n    except ValueError:\n        return \"Invalid input\"\n",
        "test": "assert tuple_str_int('(1, 2, 3)') == (1, 2, 3), \"Tuple conversion failed\"",
        "num_ids": 571
    },
    {
        "number": 786,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1, 3, 4, 6, 8], 5) == 3",
        "num_ids": 329
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b.*?b.*?b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbb') == True",
        "num_ids": 347
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n",
        "test": "assert new_tuple(test_list, test_str) == (1, 2, 3, 4, 5, 'hello', 'world', 'python') ",
        "num_ids": 312
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2,4,6,8,10]) == True, \"Should return True\"",
        "num_ids": 347
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested((1,2,3)) == (1,2,3)",
        "num_ids": 378
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 368
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    lo, hi = 0, len(arr) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid+1] != x:\n                return mid\n            else:\n                lo = mid + 1\n        elif arr[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return -1  # element not found\n",
        "test": "assert last([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 667
    },
    {
        "number": 794,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb(\"ab\") == \"ab\"",
        "num_ids": 355
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 341
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            total += i\n    return total",
        "test": "assert sum_odd(1) == 0 # 0 + 2*0 = 0",
        "num_ids": 389
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "test": "assert _sum([1,2,3,4,5]) == 15, \"Error in _sum function\"",
        "num_ids": 265
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the decimal number to binary form\n    binary_num = bin(n)[2:].zfill(32)\n    \n    # Rotate the bits to the left\n    rotated_binary_num = binary_num[-d:] + binary_num[:-d]\n    \n    # Convert the rotated binary number back to decimal form\n    rotated_num = int(rotated_binary_num, 2)\n    \n    return rotated_num\n",
        "test": "assert left_rotate(23,2) == 8 #10111 -> 10110 -> 11011",
        "num_ids": 654
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 251
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(2, 2, 2) == 3",
        "num_ids": 352
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Find the minimum element of the array\n    min_elem = arr[0]\n    min_index = 0\n    for i in range(1, n):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n            min_index = i\n    \n    # Check if the minimum element is at index 0\n    if min_index == 0:\n        return 0\n    \n    # Check if the minimum element is at index n-1\n    if arr[n-1] >= arr[n-2]:\n        return n-1\n    \n    # Binary search to find the rotation count\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= arr[0]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return right\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 638
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n == 1 or n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        i = 1\n        while i * i < n:\n            i += 1\n        return i * i == n\n",
        "test": "assert is_perfect_square(0) == True",
        "num_ids": 388
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 3, 4]) == True",
        "num_ids": 304
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = 0\n\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 535
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for c in test_str:\n        if c.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 443
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1,2,3,4,5,6]) == 1",
        "num_ids": 319
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False\n",
        "test": "assert check_K(((1, 2), (3, 4), (5, 6)), 2) == True, \"Error in check_K\"",
        "num_ids": 308
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n        else:\n            return False\n",
        "test": "assert check_smaller((1,2,3), (4,5,6)) == False",
        "num_ids": 500
    }
]