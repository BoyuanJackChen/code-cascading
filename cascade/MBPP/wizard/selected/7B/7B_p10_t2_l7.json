[
    {
        "number": 2,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.intersection(set2))\n",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return True\n    # check if n is divisible by any number between 2 and the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(2) == False # 2 is a prime number",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = hq.nlargest(n, nums)\n    largest.sort(reverse=True)\n    return largest\n",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 3) == [5, 4, 3]  # test case 1",
        "num_ids": 2301,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the number to binary format\n    binary = bin(x)[2:]\n    # Count the number of 1's in the binary format\n    count = binary.count('1')\n    # Check whether the count is 1 or not\n    if count == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(0) == False  # Check if 0 is a power of 2",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regex to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Returning the list of words that are at least 4 characters long\n    return words\n",
        "test": "assert find_char_long(\"This is a test string for find_char_long\") == ['This', 'test', 'string', 'find_char_long']  # test case 1",
        "num_ids": 1440,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1,2,3]) == [1,4,9]",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_Rotations(str):\n    if len(str) == 0:\n        return 0\n    str_list = list(str)\n    n = len(str_list)\n    min_rotations = n\n    for i in range(n):\n        str_list = str_list[-1:] + str_list[:-1]\n        if str_list == list(str):\n            min_rotations = i+1\n            break\n    return min_rotations\n",
        "test": "assert find_Rotations(\"\") == 0 ",
        "num_ids": 1958,
        "indeed": true
    },
    {
        "number": 11,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # Find the first occurrence of the character\n    i = s.find(ch)\n    \n    # If the character is not found, return the original string\n    if i == -1:\n        return s\n    \n    # Find the last occurrence of the character\n    j = s.rfind(ch)\n    \n    # If the character is not found, return the original string\n    if j == -1:\n        return s\n    \n    # Remove the character from the string and return the result\n    return s[:i] + s[i+1:j] + s[j+1:]\n",
        "test": "assert remove_Occ(\"hello\", \"o\") == \"hell\" # last occurrence of \"o\" is removed",
        "num_ids": 1931,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def sort_matrix(M):\n    # create a list of (row, sum) tuples\n    rows = [(row, sum(row)) for row in M]\n\n    # sort the rows by their sum in ascending order\n    rows = sorted(rows, key=lambda x: x[1])\n\n    # create a new matrix by copying the rows in their sorted order\n    M = [row for row, sum in rows]\n\n    return M\n",
        "test": "assert sort_matrix([[4, 2], [1, 3]]) == [[1, 3], [4, 2]] # test case 1",
        "num_ids": 2663,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2)*l*b*h\n    return volume\n",
        "test": "assert find_Volume(5,4,3) == 30  # Example 1",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+(_[a-z]+)+\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"a_b_c\") == True",
        "num_ids": 1241,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(3) == 12 # for a square with side length 3",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_freq = [0] * NO_OF_CHARS\n\n    # Count frequency of each character in the second string.\n    for char in string:\n        char_freq[ord(char)] += 1\n\n    # Remove characters from the first string which are present in the second string.\n    for char in string:\n        if char_freq[ord(char)] > 0:\n            string = string.replace(char, '', 1)\n\n    return string\n",
        "test": "assert str_to_list(\"hello world\", \"worl\") == \"hel\" ",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_elements = set()\n    \n    # Iterate through the array of numbers\n    for num in arraynums:\n        # If the number is already in the set, there is a duplicate\n        if num in unique_elements:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_elements.add(num)\n    \n    # If there are no duplicates, the function returns False\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 1837,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    sum_of_digits = sum(int(d) for d in str(x))\n    if sum_of_digits == n*(n+1)/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(15) == False, \"15 is not a woodall number\"",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    original_num = num\n    \n    # Calculate the reverse of the given number\n    while num > 0:\n        remainder = num % 10\n        reverse_num = (reverse_num * 10) + remainder\n        num //= 10\n    \n    # Check if the given number is one less than twice its reverse\n    if original_num == reverse_num * 2 - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(12345) == False",
        "num_ids": 1521,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_num = 0\n    \n    for i in range(len(arr)):\n        num = arr[i]\n        \n        # Excluding the current digit\n        remaining_digits = arr[:i] + arr[i+1:]\n        \n        # Recursive call for remaining digits\n        max_remaining_num = find_Max_Num(remaining_digits)\n        \n        # Combining the current digit with the max number we got from remaining digits\n        current_num = int(str(num) + str(max_remaining_num))\n        \n        if current_num > max_num:\n            max_num = current_num\n            \n    return max_num\n",
        "test": "assert find_Max_Num([0, 1, 2]) == 210, \"210 is the largest number that can be formed with the given list of digits [0, 1, 2]\"",
        "num_ids": 2050,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(3, -5) == True ",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    count = 1\n    while count < n:\n        i += 2\n        count += 1\n    return i\n",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    sum_dict = defaultdict(int)\n\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += int(s[j])\n            if sum == j - i + 1:\n                count += 1\n            if sum_dict[sum] == 0 and j - i + 1 == sum:\n                count += sum_dict[sum]\n            sum_dict[sum] += 1\n\n    return count",
        "test": "assert count_Substrings(\"123\") == 1, \"Should return 1 as there is only one substring with sum of digits equal to length\"",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "test": "assert smallest_num([2, 1, 3, 4, 5]) == 1",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    # Initialize variables to store minimum and maximum values\n    min_val = test_list[0]\n    max_val = test_list[0]\n    # Initialize variable to store maximum difference\n    max_diff = 0\n    # Loop over each value in the list\n    for val in test_list:\n        # Update minimum and maximum values\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n        # Calculate difference between minimum and maximum values\n        diff = max_val - min_val\n        # Update maximum difference if necessary\n        if diff > max_diff:\n            max_diff = diff\n    # Return maximum difference\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(1, 90), (2, 80), (3, 70)]) == [(3, 70), (2, 80), (1, 90)]  # should return [(3, 70), (2, 80), (1, 90)] ",
        "num_ids": 1694,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 1562,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, -2, 3, -4, 5]) == 3, \"The function is not working correctly for positive numbers.\"",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # initialize a list to store the Bell numbers\n    bell_numbers = [1]\n    \n    # compute the Bell numbers up to n\n    for i in range(1, n+1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[i-j-1]\n            \n    # initialize a list to store the number of ways to partition each Bell number\n    bell_partition_counts = [1]\n    \n    # compute the number of ways to partition each Bell number up to n\n    for i in range(1, n+1):\n        bell_partition_counts.append(0)\n        for j in range(1, i+1):\n            bell_partition_counts[i] += bell_partition_counts[i-j]\n            \n    # compute the number of ways to partition a set of Bell numbers up to n\n    result = bell_partition_counts[n]\n    \n    return result\n",
        "test": "assert bell_number(0) == 1 # Test case for n=0",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Initialize two variables to keep track of the last two elements of the array\n    prev = A[0]\n    curr = A[1]\n    \n    # Loop through the rest of the array\n    for i in range(2, len(A)):\n        # If the current element is less than the previous element, return False\n        if curr < prev:\n            return False\n        # If the current element is greater than the previous element, update the prev variable with the current element\n        else:\n            prev = curr\n            curr = A[i]\n    \n    # If the loop completes without returning False, the array is monotonic\n    return True\n",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 1855,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # check if s is an empty list\n    if not s:\n        return True\n    \n    # check if l is empty\n    if not l:\n        return False\n    \n    # check if first element of s is in l\n    if l[0] == s[0]:\n        # if yes, check if remaining sublist is in rest of list\n        return is_sublist(l[1:], s[1:])\n    else:\n        # if not, check if sublist is in rest of list\n        return is_sublist(l[1:], s)\n",
        "test": "assert is_sublist([1,2,3,4,5], [2,3]) == True ",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n\n    while gap > 1 or (gap == 1 and nums != sorted(nums)):\n        gap = max(int(gap / shrink), 1)\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] # test with a sorted list",
        "num_ids": 2466,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # find all the factors of n\n    factors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            if i != n//i:\n                factors.append(n//i)\n\n    # check if any factor is a sum of two squares\n    for f in factors:\n        a = int(f**0.5)\n        b = int((f-a**2)**0.5)\n        if a**2 + b**2 == f:\n            return True\n    return False\n",
        "test": "assert dif_Square(2) == True # Since 2 can be represented as the difference of two squares, i.e. 1^2 - (-1)^2",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i] == 'R':\n            if colors[i] != 'red':\n                return False\n        elif patterns[i] == 'G':\n            if colors[i] != 'green':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i] != 'blue':\n                return False\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\"], [\"red\", \"blue\", \"green\", \"yellow\"]) == True",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [] ",
        "num_ids": 1889,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0\n",
        "test": "assert is_Diff(21) == False",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "test": "assert word_len(\"hello\") # True",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(0) == 0, \"The first tetrahedral number is 0\"",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi  # Test if the volume of a sphere with radius 1 is equal to pi * r^3 / 6 (approx. 4.18879020478639)",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def get_Char(strr):\n    # Initialize the sum as 0\n    sum = 0\n    \n    # Loop through the characters of the given string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    \n    # Find the remainder of the sum divided by 26\n    remainder = sum % 26\n    \n    # Find the character whose ASCII value is equal to the remainder\n    char = chr(remainder + ord('A'))\n    \n    # Return the character\n    return char\n",
        "test": "assert get_Char(\"abc\") == \"m\"",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793, \"Error: surfacearea_sphere is not correct.\"",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        return 1 + 6*(n-1)\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"Test case 1 failed\"",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # combine all dictionaries into one dictionary\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n    combined_dict.update(dict3)\n    \n    # merge the values using the Counter module\n    merged_dict = ct.Counter()\n    for key, value in combined_dict.items():\n        merged_dict[key] += value\n    \n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6}, {'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} ",
        "num_ids": 1956,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 1738,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # finding the closest smaller number than N\n    return N - 1\n",
        "test": "assert closest_num(1) == 0",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6 ",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"worlds\") == False",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    \n    # Convert the number to string\n    num_str = str(n)\n    \n    # Check if the number has more than 3 digits\n    if len(num_str) <= 3:\n        return False\n    \n    # Check if the number is undulating\n    prev_digit = None\n    prev_diff = None\n    \n    for digit in num_str:\n        if prev_digit is not None:\n            diff = int(digit) - int(prev_digit)\n            \n            if prev_diff is not None:\n                if abs(diff) != abs(prev_diff):\n                    return False\n            \n            prev_diff = diff\n        \n        prev_digit = digit\n    \n    return True\n",
        "test": "assert is_undulating(100) == False",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8, \"power(2,3) should be 8\"",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (3, 1), (4, 3), (2, 4)]) == 3",
        "num_ids": 1775,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 1670,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize the count variable\n    count = 0\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If i is a factor of n, increment the count\n        if n % i == 0:\n            count += 1\n    # Return the count\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2354,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "test": "assert multiply_num([0, 0, 0]) == 0",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Convert decimal to binary using the divide-by-2 method\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    # Reverse the binary string and remove any leading zeros\n    binary = ''.join(reversed(binary)).lstrip('0')\n    # Return the binary string\n    return binary if binary else '0'\n",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # If the input number is already a palindrome, return the input number\n    if num_str == num_str[::-1]:\n        return num\n    \n    # Otherwise, find the next smallest palindrome\n    num_list = list(map(int, num_str))\n    \n    # Find the first non-9 digit from the right\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] != 9:\n            num_list[i] += 1\n            break\n    else:\n        # If no non-9 digits are found, add a new digit on the left\n        num_list.insert(0, 1)\n    \n    # Convert the list of digits back to a string and return the result\n    return int(''.join(map(str, num_list)))\n",
        "test": "assert next_smallest_palindrome(12321) == 12321",
        "num_ids": 3548,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 # test for the first element in the array",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for i, w in enumerate(words):\n        if i == 0:\n            camel_case_word += w\n        else:\n            camel_case_word += w.capitalize()\n    return camel_case_word\n",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def eulerian_num(n, m):\n    if m > n:\n        return 0\n    else:\n        return 1",
        "test": "assert eulerian_num(1, 1) == 1 # Should return 1",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([['cat', 'dog', 'bat'], ['fish', 'lion', 'tiger'], ['pig', 'cow', 'chicken']]) == [['bat', 'cat', 'dog'], ['fish', 'lion', 'tiger'], ['chicken', 'cow', 'pig']]",
        "num_ids": 1736,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False]) == 2 # example list with 2 true booleans",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_tup)\n    new_list.append(test_list)\n    return tuple(new_list)\n",
        "test": "assert add_lists([1, 2, 3], (4, 5)) == ([1, 2, 3, 4, 5], (4, 5))",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a heap for each list\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    \n    # Add elements from each list to the heap\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n    \n    # Merge the heaps into a single sorted list\n    merged_list = []\n    while heap1 or heap2 or heap3:\n        if heap1 and (not heap2 or heap1[0] < heap2[0]) and (not heap3 or heap1[0] < heap3[0]):\n            merged_list.append(heapq.heappop(heap1))\n        elif heap2 and (not heap1 or heap2[0] < heap1[0]) and (not heap3 or heap2[0] < heap3[0]):\n            merged_list.append(heapq.heappop(heap2))\n        else:\n            merged_list.append(heapq.heappop(heap3))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4],[6,7,8]) != [1,2,3,4,5,6,7,8,9]",
        "num_ids": 3875,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of 0's and 1's\n    nums = list(s)\n    # Calculate the number of rotations to make\n    rotations = n % len(nums)\n    # Rotate the list of 0's and 1's by the calculated number of rotations\n    nums = nums[-rotations:] + nums[:-rotations]\n    # Count the number of odd numbers in the rotated list\n    odd_count = sum(1 for num in nums if num == '1')\n    return odd_count\n",
        "test": "assert odd_Equivalent('0110', 1) == 2 #Example test case 2",
        "num_ids": 2391,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist:\n        common_elements.intersection_update(set(lst))\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == []",
        "num_ids": 1999,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123'), \"Function check_integer does not work for positive integers\"",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary != {}:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {}]) == True",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,2,3,4,5)) == 12345 # example input 1",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            new_item = list_to_float(item)\n        elif isinstance(item, str):\n            try:\n                new_item = float(item)\n            except ValueError:\n                new_item = item\n        else:\n            new_item = item\n        new_list.append(new_item)\n    return new_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4.5, 6, 7.8]]) == [[1.0, 2.0, 3.0], [4.5, 6.0, 7.8]]",
        "num_ids": 2754,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string):\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"] ",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    mid = len(arr) // 2\n\n    if arr[mid] == arr[mid - 1]:\n        return search(arr[:mid] + arr[mid+1:])\n    elif arr[mid] == arr[mid + 1]:\n        return search(arr[:mid])\n    else:\n        return arr[mid]\n",
        "test": "assert search([1, 2, 3, 4, 5]) == 3",
        "num_ids": 2712,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for tup in list1:\n        if len(tup) == 2:\n            product = abs(tup[0] * tup[1])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,-4), (-5,6), (-7,8)]) == 56 ",
        "num_ids": 1966,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for i in range(1, limit+1):\n        # find divisors of i\n        divisors = []\n        for j in range(1, i//2+1):\n            if i % j == 0:\n                divisors.append(j)\n        # find the sum of the divisors\n        divisor_sum = sum(divisors)\n        # check if i is amicable to divisor_sum\n        if i == divisor_sum:\n            sum += divisor_sum\n    return sum",
        "test": "assert amicable_numbers_sum(100) == 55, \"Function should return 55 for limit 100\"",
        "num_ids": 2760,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        if b >= 0:\n            return 90\n        else:\n            return -90\n    elif b == 0:\n        if a >= 0:\n            return 0\n        else:\n            return 180\n    else:\n        angle = cmath.phase(complex(a, b))\n        if angle < 0:\n            angle += 2*cmath.pi\n        return round(cmath.degrees(angle), 2)\n",
        "test": "assert angle_complex(1, 0) == 0",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = ones = max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        if zeros > 0 and ones > 0:\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "test": "assert find_length(\"10101\") == 1  # 10101 has maximum difference of 1 between number of 0s and number of 1s in the sub-string 01010",
        "num_ids": 2576,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def common_divisors(a, b):\n        divisors = []\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors = common_divisors(a, b)\n    sum_divisors = sum(divisors)\n    return sum_divisors\n",
        "test": "assert sum(12, 18) == 24",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2,3) == 6, \"Multiply function not working correctly for 2 and 3\"",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(3, \"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n < 3:\n        return False\n    \n    # Calculate the expected sum for each row, column, and diagonal\n    expected_sum = sum(my_matrix[0])\n    \n    # Check each row and column for the expected sum\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum != expected_sum or col_sum != expected_sum:\n            return False\n    \n    # Check the two diagonals for the expected sum\n    diag1_sum = sum([my_matrix[i][i] for i in range(n)])\n    diag2_sum = sum([my_matrix[i][n-i-1] for i in range(n)])\n    if diag1_sum != expected_sum or diag2_sum != expected_sum:\n        return False\n    \n    return True\n",
        "test": "assert magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False ",
        "num_ids": 2771,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 1, 1, 1, 1]) == 1 ",
        "num_ids": 1924,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\" ",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(i) for i in tup1)\n",
        "test": "assert tup_string(()) == '' # Test 1: Empty tuple",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n    # Return the sum\n    return sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n * 2 - 1))\n",
        "test": "assert hexagonal_num(1) == 1, \"Hexagonal number 1 is incorrect\"",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = {'zero': 0, 'non-zero': 0}\n    for num in nums:\n        if num == 0:\n            count['zero'] += 1\n        else:\n            count['non-zero'] += 1\n    return count['zero'] / (count['zero'] + count['non-zero'])\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0  # [1, 2, 3, 4, 5]",
        "num_ids": 2045,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Convert the number to binary and remove the leading zeros\n    binary_representation = bin(n)[2:]\n    \n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Loop through the binary representation of the number\n    for digit in binary_representation:\n        \n        # If the current digit is 1, add the corresponding power of 2 to the sum\n        if digit == '1':\n            power_sum += 2**(len(binary_representation) - binary_representation.index(digit) - 1)\n            \n    # Check if the sum of powers of 2 is equal to the given number\n    if power_sum == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == False  # 2^3 + 2^2 + 2^1 = 8, 2^0 is missing",
        "num_ids": 2449,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert circle_circumference(1) == 2 * 3.141592653589793",
        "num_ids": 1257,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def extract_singly(test_list):\n    # Initialize an empty set to store the flattened numbers\n    flattened_set = set()\n\n    # Loop through each element in the test_list\n    for element in test_list:\n        # If the element is a list, loop through its elements and add them to the set\n        if isinstance(element, list):\n            for sub_element in element:\n                flattened_set.add(sub_element)\n        # If the element is a number, add it to the set\n        else:\n            flattened_set.add(element)\n\n    # Return the flattened set\n    return flattened_set\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9} ",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the maximum number in the unsorted part of the list.\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # If the maximum number is not in its correct position, flip it to the top.\n        if max_index != n-1:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            print(\"Flipping from {} to {}\".format(n-1, max_index))\n\n        # Then flip the maximum number to the correct position.\n        nums[:n] = reversed(nums[:n])\n        print(\"Flipping from {} to {}\".format(n-1, n-1))\n\n        # Decrease the unsorted part of the list.\n        n -= 1\n\n    return nums\n",
        "test": "assert pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4]",
        "num_ids": 3008,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[4,5,6],[7,8,9]) == 0",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "test": "assert find_lists(()) == 0 ",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 1642,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return None, n // b\n    elif b == 0:\n        return n // a, None\n    else:\n        x, y = n // b, n // a\n        if x * a + y * b == n:\n            return x, y\n        elif a > 0 and b > 0:\n            return None\n        elif a < 0 and b < 0:\n            return None\n        elif a < 0:\n            return x, y - (n - x * b) // a\n        else:\n            return x - (n - y * a) // b, y\n",
        "test": "assert find_solution(1, 2, 6) == None",
        "num_ids": 3622,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the elements that are not present in list2\n    new_list = []\n    \n    # iterate through list1 and check if each element is present in list2\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n    \n    return new_list\n",
        "test": "assert remove_elements([1,2,3,4,5],[4,5,6,7,8]) == [1,2,3] ",
        "num_ids": 1569,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sum_series(n):\n    # initialize sum to zero\n    total = 0\n    \n    # loop through i from 0 to n // 2\n    for i in range(n // 2 + 1):\n        # add the term (n - 2*i) to the sum\n        total += n - 2*i\n        \n    # return the final sum\n    return total\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the angle between the sides of the polygon\n    angle = (2 * pi) / s\n    # Calculate the length of the diagonal of the polygon\n    diagonal = l / tan(angle / 2)\n    # Calculate the area of the polygon using the formula: area = (1/2) * side * diagonal\n    area = (1/2) * diagonal * l\n    return area\n",
        "test": "assert area_polygon(3, 10) == 15.3648607704918 ",
        "num_ids": 1970,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisor_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n%i == 0])\n    return divisor_sum * 2 == n\n",
        "test": "assert div_sum(20) == False",
        "num_ids": 1940,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to keep track of the count of characters at each position\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter and its position is not in the dictionary yet, add it to the dictionary with a count of 1\n        if char.isalpha() and char not in char_count:\n            char_count[char] = 1\n        # If the character is a letter and its position is already in the dictionary, increment its count by 1\n        elif char.isalpha():\n            char_count[char] += 1\n    \n    # Loop through the dictionary and count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char, count_at_pos in char_count.items():\n        # If the count of the character at its position is greater than or equal to 2, increment the count variable\n        if count_at_pos >= 2:\n            count += 1\n    \n    # Return the count of characters that occur at the same position in the string as in the English alphabet\n    return count\n",
        "test": "assert count_char_position(\"abcd\") == 0",
        "num_ids": 2257,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2  # (1 ^ 4) = 5, which is an even number",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 1364,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 4, 5], 2) == 1 ",
        "num_ids": 1246,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9  # Example test case",
        "num_ids": 1590,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(1) == 5, \"Incorrect perimeter\"",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count",
        "test": "assert count_occurance(\"\") == 0 # Test case 1",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) <= 1:\n        return True\n    else:\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[0]) != type(test_tuple[i]):\n                return False\n        return True\n",
        "test": "assert check_type((\"apple\", \"banana\", \"cherry\")) == True",
        "num_ids": 1419,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6], 6, 5) == False",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0 # 0 has 0 set bits",
        "num_ids": 1930,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "test": "assert odd_values_string(\"world\") == \"wrd\"",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(4, 5, 6) == 4",
        "num_ids": 1142,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # check if n is negative\n    if n < 0:\n        return False\n\n    # convert n to binary string\n    binary_n = bin(n)[2:]\n\n    # convert l and r to binary string\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # pad binary_n with leading zeros if necessary\n    binary_n = binary_n.zfill(len(binary_l))\n\n    # iterate through the binary string of n\n    for i in range(len(binary_n)):\n        # check if the current bit in n is 1 and the current bit in the range is unset\n        if binary_n[i] == '1' and (i >= len(binary_l) or binary_l[i] == '0') and (i >= len(binary_r) or binary_r[i] == '0'):\n            return False\n\n    return True",
        "test": "assert all_Bits_Set_In_The_Given_Range(12, 1, 2) == False",
        "num_ids": 1920,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n\n    # Separate negative and positive elements\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n\n    # Re-arrange the elements\n    result = []\n    result.extend(neg)\n    result.extend(pos)\n\n    return result\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]  # all elements are positive",
        "num_ids": 2694,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace blank spaces in a string with a given character.\n    \"\"\"\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"Hello, World!\", \" \") == \"Hello, World!\" # no spaces in the string",
        "num_ids": 1071,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert larg_nnum([1, 1, 1, 1, 1, 1], 2) == [1, 1]",
        "num_ids": 1731,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula: 2 * pi * r * h\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(1, 2) == 12.566370614359172",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(2) == 8, \"Error in volume_cube function.\" ",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the given number to binary\n    binary_n = bin(n)[2:]\n    \n    # Create an empty string to store the binary number with even bits set\n    binary_n_with_even_bits_set = \"\"\n    \n    # Loop through each bit in the binary number and set the even bits to 1\n    for bit in binary_n:\n        if bit == \"1\" and len(binary_n_with_even_bits_set) % 2 == 1:\n            binary_n_with_even_bits_set += \"1\"\n        elif bit == \"0\" and len(binary_n_with_even_bits_set) % 2 == 0:\n            binary_n_with_even_bits_set += \"0\"\n        elif bit == \"0\" and len(binary_n_with_even_bits_set) % 2 == 1:\n            binary_n_with_even_bits_set += \"0\"\n        elif bit == \"1\" and len(binary_n_with_even_bits_set) % 2 == 0:\n            binary_n_with_even_bits_set += \"1\"\n    \n    # Convert the binary number with even bits set back to decimal and return the result\n    return int(binary_n_with_even_bits_set, 2)\n",
        "test": "assert even_bit_set_number(0) == 0, \"Function does not work for 0 input\"",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for tup in test_list:\n        count_dict[tup] += 1\n    return count_dict\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (5, 6)]) == {(1, 2): 1, (3, 4): 1, (5, 6): 1}",
        "num_ids": 2364,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(string):\n    n = len(string)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 1305,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        prev_seq = get_total_number_of_sequences(m, n-1)\n        current_seq = get_total_number_of_sequences(m, n-2)\n        return prev_seq + current_seq\n",
        "test": "assert get_total_number_of_sequences(3,1) == 1",
        "num_ids": 1748,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, [4, 5]] # test case 1",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Hello World\") == 11  # Test case 1",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if math.sqrt(N).is_integer():\n            return N\n",
        "test": "assert next_Perfect_Square(3) == 4 #Testing for 3",
        "num_ids": 1448,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and dp[i] < dp[j] + arr[i]:\n                dp[i] = dp[j] + arr[i]\n    return max(dp)\n",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 5  # example input 2",
        "num_ids": 3179,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 1630,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check all substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    \n    # Check all substrings of length 3 or more\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n",
        "test": "assert lps(\"BBABCBCAB\") == 7",
        "num_ids": 2582,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1.0  # sum of 1/1 = 1.0",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_list:\n            intersection_list.append(num)\n    return intersection_list",
        "test": "assert intersection_array([1,2,3,4,5],[3,4,5,6,7]) == [3,4,5]",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 3) == 1, \"count_X is not working for tuples\"",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(elem)\n        new_lst.append(item)\n    return new_lst\n",
        "test": "assert insert_element([1,2,3,4,5], 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5] # Check if the element is inserted before each element in the list. ",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples containing the corresponding polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result\n",
        "test": "assert convert([1+2j, 2+3j, 3+4j]) == [(3.605551275463989, 0.9659258262890683), (3.605551275463989, 1.9514738384673785), (5.830951894845301, 2.8686704686210913)]",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1,2,3], 2) == [(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)]",
        "num_ids": 2673,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            prime += 1\n    return prime\n",
        "test": "assert count_Primes_nums(10) == 4 # The first four primes are 2, 3, 5, 7.",
        "num_ids": 2054,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert swap_numbers(1,2) == (2,1) ",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if test_tup1 > test_tup2:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    def newman_williams(p):\n        q, r = 1, 0\n        while r != p:\n            q, r = q + p // q, p % (q + r)\n        return q\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def newman_shanks_prime(k):\n        primes = []\n        i = 1\n        while len(primes) < k:\n            if is_prime(i):\n                primes.append(i)\n            i += 1\n        return primes[-1]\n\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        return newman_shanks_prime(n)",
        "test": "assert newman_prime(2) == 3",
        "num_ids": 3052,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5) ",
        "num_ids": 1867,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5]) # test case 1",
        "num_ids": 2253,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def dog_age(human_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = human_age * 7\n    return dog_years\n",
        "test": "assert dog_age(1) == 7  # 1 human year is equivalent to 7 dog years",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    temp = []\n    for i in range(len(S)):\n        temp.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(temp)\n            temp = []\n    if temp:\n        result.append(temp)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(5) == 150  # check for side length 5",
        "num_ids": 1091,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1, \"The sum of squares of the first 1 odd natural numbers is 1\"",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + find_star_num(n-1)\n",
        "test": "assert find_star_num(1) == 1, \"Error: find_star_num(1) should return 1\"",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97 # Check if 'a' has an ascii value of 97",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0, \"Error: The output for [1, 3, 5, 7] should be 0\"",
        "num_ids": 1804,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def even_Power_Sum(n):\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate over the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Compute the power of i to the fifth\n        power = i ** 5\n        \n        # Add the power to the total\n        total += power\n    \n    # Return the total sum\n    return total\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1735,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tup in test_list:\n        result_list.append(tup[-1])\n    return result_list\n",
        "test": "assert rear_extract([(1, 'a'), (2, 'b'), (3, 'c')]) == ['a', 'b', 'c'] ",
        "num_ids": 1332,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = () # create an empty tuple to hold the result\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i], ) # subtract each element and add it to the tuple\n    return result_tup # return the result tuple\n",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3,-3,-3) ",
        "num_ids": 1898,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n):\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1, \"The sum of even index binomial coefficients should be 1 for n = 1\"",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(1, 1) == 3.14 #radius 1, height 1",
        "num_ids": 1377,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filter the dictionary d to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}\n",
        "test": "assert dict_filter({'a': 3, 'b': 5, 'c': 2, 'd': 4, 'e': 6}, 4) == {'b': 5, 'd': 4, 'e': 6}",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(()) == 0, \"Failed with empty tuple\"",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the decagonal number using the formula: n(3n-1)/2\n    decagonal_num = n * (3 * n - 1) // 2\n    return decagonal_num\n",
        "test": "assert is_num_decagonal(1) == 1, \"The 1st decagonal number is 1.\"",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    index = 0\n    found = False\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return (found, index) if found else (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) != len(set(test_list)):\n        return False\n    return True\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3] ",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def validate(n):\n    # convert the integer to a string\n    num_str = str(n)\n    # create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # loop through each digit in the string\n    for digit in num_str:\n        # if the digit is already in the dictionary, increment its count\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # if the digit is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[digit] = 1\n    # loop through each digit in the dictionary and check if the frequency is less than or equal to the digit\n    for digit in freq_dict:\n        # if the frequency is greater than the digit, return False\n        if freq_dict[digit] > int(digit):\n            return False\n    # if all the frequencies are less than or equal to their corresponding digits, return True\n    return True\n",
        "test": "assert validate(11111) is False # The frequency of each digit is greater than the digit itself in 11111.",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Function to check if all elements in a list are equal to a given element.\n    \"\"\"\n    return all(x == elem for x in lst)\n",
        "test": "assert check_element([1, 2, 3, 4, 5], 1) == False",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    if re.search(r'a[^b]*b[^b]*b', text):\n        return True\n    elif re.search(r'a[^b]*b[^b]*b[^b]*b', text):\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abbb\") == True # Example 1",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    \n    # Copy the original array a to create the modified array\n    mod_arr = a.copy()\n    \n    # Repeat the modified array k times\n    for i in range(k-1):\n        mod_arr += a\n        \n    # Find the largest sum of a contiguous subarray using Kadane's algorithm\n    max_sum = mod_arr[0]\n    current_sum = mod_arr[0]\n    for i in range(1, len(mod_arr)):\n        current_sum = max(mod_arr[i], current_sum + mod_arr[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, -1, 0], 2, 3) == 1  # Example from the problem statement",
        "num_ids": 3234,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2*n):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def max_length(lst):\n    max_len = 0\n    max_lst = []\n    for sublst in lst:\n        if len(sublst) > max_len:\n            max_len = len(sublst)\n            max_lst = sublst\n    return max_lst\n",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [7, 8, 9, 10], \"Incorrect maximum length\"",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the list of lists with all False values\n    dp = [[False for j in range(k+1)] for i in range(n+1)]\n    \n    # Fill the first row with True values as there's only one way to paint the first post\n    for j in range(1, k+1):\n        dp[1][j] = True\n    \n    # Fill the first column with False values as there's no way to paint the fence without using any color\n    for i in range(2, n+1):\n        dp[i][0] = False\n        \n    # Fill the remaining cells of the list of lists\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            # If the color is the same as the previous post, we can't paint it\n            if j == dp[i-1][j-1]:\n                dp[i][j] = False\n            # If the color is different from the previous post, we can paint it\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    \n    # Return the value in the last cell of the list of lists\n    return dp[n][k]\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2731,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(2,3) == 0 # test case 1",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Check if the input values are valid\n    if w <= 0 or h <= 0:\n        return None\n\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] # assume first value is maximum\n    \n    for val in listval:\n        if isinstance(val, (int, float)):\n            if val > max_val:\n                max_val = val # update maximum if current value is greater\n        \n    return max_val\n",
        "test": "assert max_val([1,2,3]) == 3, \"Error in max_val\"",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(1) == 1",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0 # Should return 0",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, [3, 4, [5, 6], 7], 8, [9, [10, 11], 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]",
        "num_ids": 1773,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the frequency of each state\n    state_freq = defaultdict(int)\n    # Iterate through the list of tuples and update the frequency of each state\n    for item in stdata:\n        state_freq[item[0]] += item[1]\n    # Create a list to store the maximum aggregate for each state\n    max_agg = []\n    # Iterate through the frequency dictionary and calculate the maximum aggregate for each state\n    for state in state_freq:\n        max_agg.append((state, state_freq[state]))\n    # Sort the list by the second element (i.e., the aggregate) in descending order\n    max_agg.sort(key=lambda x: x[1], reverse=True)\n    # Return the maximum aggregate for the first state\n    return max_agg[0][1]\n",
        "test": "assert max_aggregate([(0, 10), (1, 20), (2, 30), (3, 40), (4, 50)]) == 50",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def count_binary_seq(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n\n    total = 0\n    for i in range(2**n):\n        # Convert the integer to a binary string with leading zeros\n        binary = format(i, f'0{2*n}b')\n\n        # Check if the sum of the first n bits is equal to the sum of the last n bits\n        if sum(int(binary[i]) for i in range(n)) == sum(int(binary[i]) for i in range(-1, -1-n, -1)):\n            # Count the number of sequences with the same sum of the first n bits and the last n bits\n            total += count_binary_seq(n-1)\n\n    return total\n",
        "test": "assert count_binary_seq(1) == 2",
        "num_ids": 1850,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(dict_depth(v), depth)\n        elif isinstance(v, list):\n            for i in v:\n                if isinstance(i, dict):\n                    depth = max(dict_depth(i), depth)\n    return depth + 1\n",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2}}) == 2",
        "num_ids": 1347,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \n    # Find the range of the array after rotation\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            low = ranges[i-1] if i > 0 else 0\n            high = ranges[i]\n            break\n    \n    # Find the rotations that happen before the index\n    rotation_count = sum(rotations[:i])\n    \n    # Find the index of the element after rotation\n    new_index = (index - rotation_count) % len(arr)\n    \n    return arr[new_index]\n",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9], [2,5], [0,0], 3) == 4  # Test Case 1",
        "num_ids": 2095,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 130,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # use re.findall to extract all words starting with 'p'\n    p_words = re.findall(r'\\bp\\w+', ' '.join(words))\n    # if there are less than two words starting with 'p', return an empty list\n    if len(p_words) < 2:\n        return []\n    # return the first two words starting with 'p'\n    return p_words[:2]\n",
        "test": "assert start_withp(['python', 'javascript', 'ruby', 'perl', 'java']) == ['python', 'perl'] ",
        "num_ids": 1819,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and dp[j] + a[i] > dp[i]:\n                dp[i] = dp[j] + a[i]\n    ans = 0\n    for i in range(k):\n        ans = max(ans, dp[i])\n    for i in range(k, n):\n        if dp[i-1] == dp[k-1]:\n            ans = max(ans, dp[i-1]+a[i])\n        else:\n            ans = max(ans, dp[i-1])\n    return ans\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 15 ",
        "num_ids": 2813,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copying the original tuple to avoid modifying the original tuple\n    copy_tuplex = deepcopy(tuplex)\n    \n    # Slicing the copied tuple to get the colon\n    colon_tuplex = copy_tuplex[m-1:n]\n    \n    return colon_tuplex\n",
        "test": "assert colon_tuplex((), 0, 0) == ()  # test for empty tuple",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Create a list of all possible products from nums1 and nums2\n    products = [(nums1[i] * nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n    # Sort the list in descending order\n    products.sort(reverse=True)\n    # Return the specified number of largest products\n    return products[:N]",
        "test": "assert large_product([-10, 10, 5], [1, 2, 3, 4], 3) == 300  # test case 2",
        "num_ids": 2619,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10, 20) == 20 # check if the function returns the correct value for two numbers",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o') ",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    mask = 1\n    while (n & mask) != 0:\n        mask <<= 1\n    return n | mask\n",
        "test": "assert set_left_most_unset_bit(0) == 1",
        "num_ids": 2345,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Function to calculate the volume of a cone.\n    \"\"\"\n    volume = (1.0 / 3) * math.pi * r ** 2 * h\n    return volume\n",
        "test": "assert volume_cone(3, 5) == 38.4126982954251  # r = 3, h = 5",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = i * 2\n    return i // 2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1336,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1172,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n",
        "test": "assert add_string(['a', 'b', 'c'], '{} is cool') == ['a is cool', 'b is cool', 'c is cool']",
        "num_ids": 1413,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 110,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n",
        "test": "assert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['apple', 'banana', 'cherry']) == {1: {'a': 'apple'}, 2: {'b': 'banana'}, 3: {'c': 'cherry'}}",
        "num_ids": 2204,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def get_max_sum(n):\n    def helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n % 3 == 0:\n            return 2 * helper(n // 3)\n        elif n % 4 == 0:\n            return 3 * helper(n // 4)\n        elif n % 5 == 0:\n            return 4 * helper(n // 5)\n        else:\n            return max(helper(n - 1), helper(n - 2), helper(n - 3), helper(n - 4), helper(n - 5)) + n\n\n    return helper(n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    \n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12]]) == [6, 7, 8, 9]  # test case 2",
        "num_ids": 1667,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    if len(test_tup) != len(set(test_tup)):\n        return False\n    else:\n        return True",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True         # test case 1",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character('hello') == 'h' # check with a string that has a non-repeated character",
        "num_ids": 1929,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string.lower())\n    return match is not None\n",
        "test": "assert check_char('a'), \"The function should return True for string 'a'\" ",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "test": "assert median_numbers(5, 3, 1) == 3",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result\n",
        "test": "assert sum_of_digits([12, 23, 34]) == [3, 5, 7]",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup\n",
        "test": "assert bitwise_xor((1, 1, 0, 1), (1, 0, 1, 0)) == (0, 1, 1, 1)",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1606,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 130,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        nested_result = []\n        for j in range(len(test_tup1[i])):\n            nested_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(nested_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1,2),(3,4)), ((1,2),(3,4))) == ((2, 4), (6, 8)) ",
        "num_ids": 2481,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def minimum(a,b):\n    if a <= b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5,7) == 5",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element == tuplex:\n            return True\n    return False\n",
        "test": "assert check_tuplex((1,2,3,4), (2,3,4,5)) == False",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(1) == True  # returns True if the parity of 1 is odd, which it is",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the input number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # sort the list of digits in descending order\n    digits.sort(reverse=True)\n    \n    # find the next biggest number by swapping adjacent digits\n    # and adding the swapped digits to the end of the list of digits\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            break\n    \n    # join the digits back into a number and return it\n    return int(''.join(str(d) for d in digits))\n",
        "test": "assert rearrange_bigger(12345) == 54321, \"Incorrect output for 12345\"",
        "num_ids": 2456,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    seen = set()\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            if (num1, num2) not in seen and len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, num1, num2))\n                seen.add((num1, num2))\n            elif len(heap) == k:\n                break\n    \n    return [(pair[1], pair[2]) for pair in sorted(heap)]\n",
        "test": "assert k_smallest_pairs([1, 1, 2], [1, 2, 3], 1) == [(1, 1)]",
        "num_ids": 3059,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,3), (5,3), (3,5)]) == 3",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            min_val = min(min_val, val)\n    return min_val\n",
        "test": "assert min_val([-1, 2, -3, 4, -5]) == -5, \"Error: The minimum value is incorrect\"",
        "num_ids": 1808,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0].lower()\n    for word in words[1:]:\n        camel += word.capitalize()\n    return camel",
        "test": "assert snake_to_camel('snake_to_camel') == 'snakeToCamel'",
        "num_ids": 1456,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Iterate over the tuples in the list\n    for tup in list1:\n        # Check if the index of the tuple is equal to n\n        if len(tup) > n:\n            # Return the nth element\n            return tup[n]\n    # If no tuple with index n is found, return None\n    return None\n",
        "test": "assert extract_nth_element([(1,2),(3,4)], 3) == None  # Check if the function is returning None when the nth element is not present in the list",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(elem in list1 for elem in list2)\n",
        "test": "assert overlapping([1,2,3], [4,5,6]) == False",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_Product(arr):\n    max_product = arr[0]*arr[1]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_Product([-10, -10]) == 100",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Initialize an empty dictionary to store the common first element\n    common_dict = {}\n    \n    # Iterate through each tuple in the input list\n    for tup in Input:\n        # If the first element of the tuple is not in the dictionary, add it as a new key with a value of a new list containing the tuple\n        if tup[0] not in common_dict:\n            common_dict[tup[0]] = [tup]\n        # If the first element of the tuple is already in the dictionary, append the tuple to the list of tuples associated with that key\n        else:\n            common_dict[tup[0]].append(tup)\n    \n    # Return the dictionary of common first elements and their associated lists of tuples\n    return common_dict\n",
        "test": "assert group_tuples([(\"apple\", 2), (\"banana\", 3), (\"apple\", 5), (\"orange\", 4)]) == {\"apple\": [(\"apple\", 2), (\"apple\", 5)], \"banana\": [(\"banana\", 3)], \"orange\": [(\"orange\", 4)]}  # correct output ",
        "num_ids": 3070,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['a', 'bb', 'ccc']) == 'ccc' ",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    Round every number in a list of numbers and compute the total sum\n    multiplied by the length of the list.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)\n",
        "test": "assert round_and_sum([1.4, 2.6, 3.1]) == 54 ",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum\n",
        "test": "assert cube_Sum(1) == 1, \"The cube sum of the first even number is incorrect\"",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ' '\n    result = []\n    for item in test_tup:\n        result.append(str(item))\n    return delimiter.join(result)\n",
        "test": "assert concatenate_tuple((\"hello\", \"world\", \"!\")) == \"hello world !\"",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n**3\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"apple\", \"banana\", \"orange\", \"kiwi\", \"mango\")) == (\"i\", \"a\", \"e\", \"i\", \"o\")",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2,3],[4,5],[6,7,8]], 3) == 1 ",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n        if match:\n            year = match.group(1)\n            month = match.group(2)\n            day = match.group(3)\n            new_dt = day + '-' + month + '-' + year\n            return new_dt\n        else:\n            return None\n    except Exception as e:\n        return None\n",
        "test": "assert change_date_format('2022-05-12') == '12-05-2022' # simple test case",
        "num_ids": 2101,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5] ",
        "num_ids": 2422,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i], )\n    return result_tup",
        "test": "assert and_tuples((True, False, True), (False, True, True)) == (False, False, True)",
        "num_ids": 1649,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Checking if the equation has a directrix\n    if a == 0:\n        return None\n\n    # Calculating the directrix\n    directrix = (c / (2 * a)) * (-1)\n\n    return directrix\n",
        "test": "assert parabola_directrix(-1, -2, -3) == -3/2 # a=-1, b=-2, c=-3, directrix = -b/2a = 2/4 = 1/2 ",
        "num_ids": 2497,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length using the formula:\n    median = (base1 + base2 + 2 * height) / 2\n    return median",
        "test": "assert median_trapezium(10,20,30) == 25 ",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert n to a string so we can get the last character\n    n_str = str(n)\n\n    # Get the last character of the string\n    last_char = n_str[-1]\n\n    # Convert the last character back to an integer\n    last_digit = int(last_char)\n\n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos_list = []\n    for num in list1:\n        if num < 0:\n            neg_nos_list.append(num)\n    return neg_nos_list\n",
        "test": "assert neg_nos([1, 2, 3, -4, -5, 6, -7, -8]) == [-4, -5, -7, -8]",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert remove_odd('') == '' # empty string",
        "num_ids": 1132,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([]) == 0 # test case 1",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in L))\n",
        "test": "assert multiple_to_single([1,2,3,4]) == 1234",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression to match adverbs\n    pattern = r'\\b(very|really|extremely|absolutely|exceptionally|rather|quite|more|less|least)\\b'\n    \n    # Use re.finditer to find all adverb matches in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    # Initialize an empty list to store the adverb positions\n    positions = []\n    \n    # Loop through the matches and add their positions to the list\n    for match in matches:\n        positions.append(match.start())\n    \n    # Return the list of positions if any were found, otherwise None\n    return positions[0] if positions else None",
        "test": "assert find_adverb_position(\"The dog is running quickly\") == [(20, 'quickly')]  # test for a single adverb in a sentence",
        "num_ids": 2198,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert surfacearea_cube(3) == 54, \"Error: surfacearea_cube(3) should return 54\"",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef positive_count(nums):\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "test": "assert positive_count([1,2,3,4,5]) == 5/5 #all positive",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    if largest_neg == float('-inf'):\n        return None\n    return largest_neg\n",
        "test": "assert largest_neg([-10, -5, 0, -2, -8]) == -2, \"Incorrect output for input [-10, -5, 0, -2, -8]\" ",
        "num_ids": 1437,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        trimmed = tuple(val for val in tup if abs(val) >= K)\n        if trimmed:\n            result.append(trimmed)\n    return result\n",
        "test": "assert trim_tuple(test_list, K) == expected_result",
        "num_ids": 2179,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] * test_tup2[i],)\n    return result_tuple\n",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18) ",
        "num_ids": 1669,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    return {k: count[k] for k in lst}",
        "test": "assert count_Occurrence(('apple', 'banana', 'orange', 'banana', 'apple'), ['orange']) == { 'orange': 1 } ",
        "num_ids": 2240,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
        "test": "assert cube_nums([1,2,3]) == [1,8,27]  # check for single element list",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1347,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if isinstance(str, list) and isinstance(l, int):\n        result = []\n        for s in str:\n            if len(s) >= l:\n                result.append(s[:l])\n        return result\n    else:\n        return \"Invalid input. Input should be a list of strings and integer.\"\n",
        "test": "assert extract_string(['cat', 'dog', 'bird'], 2) == ['ca', 'do', 'bi']",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text1)\n",
        "test": "assert remove_whitespaces(\"  Hello, World!  \") == \"Hello,World!\"  # test case 1",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 110) == 0 ",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Function to find the sum of even factors of a number.\n    \"\"\"\n    factor_sum = 0\n    end = int(math.sqrt(n)) + 1\n    \n    for i in range(2, end):\n        if n % i == 0:\n            if i % 2 == 0:\n                factor_sum += i\n            if n // i != i:\n                if (n // i) % 2 == 0:\n                    factor_sum += n // i\n    return factor_sum",
        "test": "assert sumofFactors(1) == 0 # If the input number is 1, the sum of factors should be 0",
        "num_ids": 1868,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group(0)\n    else:\n        return None\n",
        "test": "assert text_match_wordz('the quick brown fox jumps over the lazy dog'), True  # True",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True # Check if January has 31 days",
        "num_ids": 2303,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['Hello', 'World', 'Python']) == ['olleH', 'dlroW', 'nohtyP'], \"Incorrect output\" ",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def find_min(lst):\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([1,2,3,4,5]) == 1  # sublist [1] has minimum length 1",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5,10) == 50  # Test for a rectangle with length 5 and breadth 10",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # find all uppercase substrings using regular expressions\n    pattern = re.compile(r'\\b([A-Z]+)\\b')\n    matches = pattern.findall(str1)\n\n    # replace each match with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1\n",
        "test": "assert remove_uppercase('HELLO') == ''",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] ",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            combinations.append((list1[i], list1[j]))\n    return combinations\n",
        "test": "assert combinations_list([]) == [] # check if the function returns an empty list when the input list is empty",
        "num_ids": 2524,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def max_subarray_product(arr):\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_subarray_product([1, 2, 3, 4, 5]) == 120 ",
        "num_ids": 2506,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    return len(set(d.values())) == 1\n",
        "test": "assert not check_value({\"a\": 1, \"b\": 2, \"c\": 3}, 1), \"Should return False\"",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1487,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    for i in range(1, n):\n        dp[i] = max(dp[i-1] * arr[i], arr[i])\n        \n    return max(dp)\n",
        "test": "assert max_product([1,2,3,4,5]) == 120  # Example 1",
        "num_ids": 2379,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result",
        "test": "assert add_pairwise((10, 20, 30)) == (30, 40)",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4], 5) == 4",
        "num_ids": 1280,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    n = len(l)\n    for i in range(n - 1):\n        if l[i+1] - l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    return tuple(intersection_set)\n",
        "test": "assert tuple_intersection( (1, 2, 3), (3, 4, 5) ) == (3,) ",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char(\"hello\", \"l\", \"L\") == \"heLLo\", \"Incorrect output\"",
        "num_ids": 1238,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({\"a\": 3, \"b\": 1, \"c\": 2}) == {\"c\": 2, \"a\": 3, \"b\": 1}  # sorted by value in ascending order",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = nums[0]\n    largest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n        elif nums[i] > largest:\n            largest = nums[i]\n    return smallest + largest\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6, \"Should be 6\"",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Replace all lowercase substrings with empty string\n    result = re.sub(pattern, '', str1)\n    return result\n",
        "test": "assert remove_lowercase(\"\") == \"\" # Test case 2",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n = -n\n    \n    while n >= 10:\n        n = n // 10\n    \n    return n\n",
        "test": "assert first_Digit(12345) == 1  # Test case for the first digit of the number 12345",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_lst.append(num)\n    return odd_lst\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]  # Test 1",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers",
        "test": "assert difference(1) == 1 - 1 # for n=1",
        "num_ids": 1755,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_Odd_Pair(A,N) :\n    # Initialize count to 0\n    count = 0\n    \n    # Loop through all pairs of elements in A\n    for i in range(N-1):\n        for j in range(i+1,N):\n            # Check if xor of i and j is odd\n            if (A[i]^A[j])%2 == 1:\n                count += 1\n                \n    return count\n",
        "test": "assert find_Odd_Pair([1, 3, 5, 7, 9], 5) == 0",
        "num_ids": 1495,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()\n",
        "test": "assert toggle_string(\"Hello\") == \"hELLO\"  # check if the function toggles the case correctly for uppercase letters",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    if n1 == n2:\n        return 0\n\n    # Get the length of the largest number\n    max_len = max(len(str(n1)), len(str(n2)))\n\n    # Convert the numbers to strings with leading zeros to match length\n    s1 = str(n1).zfill(max_len)\n    s2 = str(n2).zfill(max_len)\n\n    # Calculate the digit difference\n    diff = sum([abs(int(s1[i]) - int(s2[i])) for i in range(max_len)])\n\n    return diff\n",
        "test": "assert digit_distance_nums(100, 100) == 0 # Expected output: 0",
        "num_ids": 2865,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 8) == 18 ",
        "num_ids": 1979,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() function to find the union of two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Sorting the union set in ascending order and returning it\n    return tuple(sorted(union_set))\n",
        "test": "assert union_elements((1,2,3),(4,5,6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 1899,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for item in lst:\n        if isinstance(item, list):\n            if len(item) > max_length:\n                max_length = len(item)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3], [4,5,6], [7,8,9]]) == 3  # longest sublist is [1,2,3] ",
        "num_ids": 1392,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\\\"(.+?)\\\"', text) # Find all strings between quotes\n    return values\n",
        "test": "assert extract_values(\"\") == []",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4], 4) == 6",
        "num_ids": 1693,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o'] ",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total_sum = 0\n    \n    while n > 0:\n        total_sum += n % 10\n        n //= 10\n    \n    return total_sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 1077,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "test": "assert empty_list(0) == []",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"grape\", \"orange\", \"kiwi\"], [\"mango\", \"peach\", \"papaya\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"grape\", \"kiwi\", \"orange\"], [\"mango\", \"papaya\", \"peach\"]] ",
        "num_ids": 1805,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] ",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set to store the unique numbers\n    unique_set = set(list_data)\n    # create a list to store the unique numbers\n    unique_list = list(unique_set)\n    # initialize the product variable to 1\n    product = 1\n    # iterate over the unique numbers and multiply them to the product variable\n    for num in unique_list:\n        product *= num\n    # return the product\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 1544,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(1, 4) == 50.26548245743669  # r=1, h=4",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if B is a sublist of A, else False.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            if A[i:i+len(B)] == B:\n                return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [7,8,9]) == False",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return int(str(factorial)[-1])\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3) or len(list3) != len(list1):\n        raise ValueError('All input lists must be of the same length.')\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n",
        "test": "assert interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2215,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diss_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            diss_list.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            diss_list.append(j)\n    return diss_list\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == ()",
        "num_ids": 1858,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a new empty tuple to hold the even elements\n    new_tuple = ()\n    \n    # Iterate over each element in the test_tuple\n    for item in test_tuple:\n        \n        # If the item is an integer, check if it is even using the even_fnc function\n        if isinstance(item, int):\n            if even_fnc(item):\n                new_tuple += (item,)\n        \n        # If the item is a tuple, recursively call even_ele() on that tuple and add the result to the new_tuple\n        elif isinstance(item, tuple):\n            new_tuple += (even_ele(item, even_fnc),)\n    \n    return new_tuple\n",
        "test": "assert even_ele((), lambda x: x % 2 == 0) == ()  # Test case 1",
        "num_ids": 2399,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + b**2\n",
        "test": "assert surface_Area(10,20) == 500 ",
        "num_ids": 1314,
        "indeed": true
    },
    {
        "number": 582,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True  # Test if an empty dictionary is empty",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return (2*(2*num-1)*catalan_number(num-1))//(num+1)\n\nprint(catalan_number(5)) # Output: 42\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b(\\w+ly)\\b'\n    adverbs = re.findall(adverb_pattern, text)\n    if not adverbs:\n        print(\"No adverbs found.\")\n        return None\n    first_adverb = adverbs[0]\n    positions = [m.start() for m in re.finditer(r'\\b' + re.escape(first_adverb) + r'\\b', text)]\n    return first_adverb, positions",
        "test": "assert find_adverbs(\"The cat chased the mouse.\") == None",
        "num_ids": 2027,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 110,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Using a heap to store the n most expensive items\n    heap = []\n    \n    # Adding all the items to the heap and maintaining the heap property\n    for item in items:\n        heapq.heappush(heap, item)\n        \n        # If the heap size exceeds n, remove the smallest item from the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n            \n    # Reversing the heap and returning the n most expensive items\n    return heap[::-1]\n",
        "test": "assert expensive_items([(1, 'A'), (2, 'B'), (3, 'C'), (4, 'D'), (5, 'E')], 2) == [(5, 'E'), (4, 'D')]",
        "num_ids": 2541,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    # create a copy of the original list\n    new_l = l.copy()\n    \n    # find the length of the original list\n    length = len(l)\n    \n    # check if n is less than the length of the list\n    if n < length:\n        \n        # split the list at the nth element\n        first_part = l[:n]\n        second_part = l[n:]\n        \n        # add the first part to the end of the new list\n        new_l.extend(first_part)\n        \n        # return the new list\n        return new_l\n    \n    # if n is greater than or equal to the length of the list, return the original list\n    else:\n        return l\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1856,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) # test with a list",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num - min_num\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17 ",
        "num_ids": 1514,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = num ** 0.5\n        if root == int(root):\n            squares.append(num)\n    return squares",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)",
        "test": "assert polar_rect(1, 0) == (1, 0), \"Error in converting (1, 0) to rectangular coordinates\"",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]  # swapping first and last elements",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def binomial_Coeff(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\ndef sum_product_consecutive_binomial_coefficients(n):\n    sum = 0\n    for k in range(1, n+1):\n        sum += binomial_Coeff(n, k) * binomial_Coeff(n, k+1)\n    return sum",
        "test": "assert binomial_Coeff(0,0) == 1         # Test case for n=0 and k=0",
        "num_ids": 1820,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    # Use regular expression to match and remove leading zeroes from each octet\n    octets = re.findall(r'\\d+', ip)\n    octets = [str(int(octet)) for octet in octets]\n    \n    # Join the octets with \".\" and return the result\n    return \".\".join(octets)\n",
        "test": "assert removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 1784,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def diff_even_odd(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num == None:\n                even_num = num\n            else:\n                return abs(even_num - num)\n        else:\n            if odd_num == None:\n                odd_num = num\n            else:\n                return abs(odd_num - num)\n    return None\n",
        "test": "assert diff_even_odd([1,2,3,4,5,6]) == 2",
        "num_ids": 1950,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_Swaps(str1, str2):\n    swaps = 0\n    while str1 != str2:\n        for i in range(len(str1)):\n            if str1[i] != str2[i]:\n                str1 = str1[:i] + str2[i] + str1[i+1:]\n                swaps += 1\n                break\n    return swaps\n",
        "test": "assert min_Swaps(\"1010\",\"1010\") == 0",
        "num_ids": 3571,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert tuple_size((1, 2)) == 16 # tuple with 2 elements",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # If either arr1 or arr2 is empty, return None\n    if not arr1 or not arr2:\n        return None\n\n    # If k is greater than the sum of the lengths of both arrays, return None\n    if k > len(arr1) + len(arr2):\n        return None\n\n    # If k is less than or equal to the length of arr1, return the kth element of arr1\n    if k <= len(arr1):\n        return arr1[k-1]\n\n    # If k is greater than the length of arr1, find the kth element from arr2\n    # and return the difference between the total length of both arrays and k\n    return arr2[k - len(arr1) - 1]",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 1) == 1 # check if find_kth([1, 3, 5, 7], [2, 4, 6, 8], 1) returns 1",
        "num_ids": 3538,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Get the number of digits of the number\n    num_digits = len(str(number))\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum(int(digit)**num_digits for digit in str(number))\n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True, \"153 is an Armstrong number\"",
        "num_ids": 1860,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def sum_average(number):\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return (sum, avg)\n",
        "test": "assert sum_average(5) == (15, 3), \"The sum of first 5 numbers and their average are incorrect.\"",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True, \"Function is_Even should return True for even numbers\"",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"hello world\") == \"l\"",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def is_lucid(num):\n    \"\"\"\n    Check if a given number is lucid.\n    \"\"\"\n    sum_of_digits = sum(int(digit) for digit in str(num))\n    return num == sum_of_digits\n\ndef get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for num in range(1, n + 1):\n        if is_lucid(num):\n            ludic_numbers.append(num)\n    return ludic_numbers",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 3936,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the list\n    words.reverse()\n    # Join the list of words back into a string\n    return ' '.join(words)\n",
        "test": "assert reverse_words(\"\") == \"\" # should return an empty string",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2), \"2 is a prime number\"",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(180) == math.pi, \"Error in radian_degree function\"",
        "num_ids": 1092,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern.\n    The function should return the matching substring, a start index, and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return match.group(0), start_index, end_index\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello, world!\", \"world\") == (\"world\", 7, 12)",
        "num_ids": 1667,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Define a recursive function to calculate the bell number\n    def bell(n, k):\n        if k == 0:\n            return 1\n        elif n == 0:\n            return 0\n        else:\n            return bell(n-1, k-1) + bell(n-1, k)\n\n    # Calculate the bell number using the recursive function\n    bell_num = bell(n, n)\n    return bell_num\n",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) should be 1\"",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Remove the k'th element from the list\n    del list1[L - 1]\n    # Return the modified list\n    return list1",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5] ",
        "num_ids": 1706,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Get the length of the list\n    length = len(test_list)\n    # Initialize a variable to store the max value\n    max_val = test_list[0][N]\n    # Loop through the list and compare each value with the max value\n    for i in range(length):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    # Return the max value\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6]], 1) == 5 ",
        "num_ids": 1850,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]] ",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([4,5,6]) == [4, 9, 18] # check if the cummulative sum of [4,5,6] is [4, 9, 18]",
        "num_ids": 1469,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        avg = total / count\n        averages.append(avg)\n    return averages\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0] # example input and output",
        "num_ids": 1968,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n",
        "test": "assert tuple_modulo((-1, 0, 1), (2, 4, -3)) == (1, 0, -2) ",
        "num_ids": 2000,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def min_Jumps(steps, d):\n    if steps == 0:\n        return 0\n    elif d == 0:\n        return 1\n    else:\n        min_steps = float('inf')\n        for i in range(1, min(steps, d)+1):\n            min_steps = min(min_steps, 1 + min_Jumps(steps - i, d - i))\n        return min_steps\n",
        "test": "assert min_Jumps(2, 2) == 1  # test case for minimum 1 jump to reach (2, 2) from origin",
        "num_ids": 2216,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3], [2,4,6]) == [0.5, 0.5, 0.5]",
        "num_ids": 1630,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    num_str = \"\"\n    other_str = \"\"\n    \n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            other_str += i\n    \n    return other_str + num_str\n",
        "test": "assert move_num(\"\") == \"\"  # test case 2",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    a.sort()  # sort the list in increasing order\n    max_size = 0\n    for i in range(n):\n        if i > 0 and a[i] % a[i - 1] == 0:\n            # a[i] is divisible by a[i - 1], so a[i - 1] cannot be in the subset\n            continue\n        subset_size = 0\n        j = i\n        while j < n and a[j] % a[i] == 0:\n            subset_size += 1\n            j += 1\n        max_size = max(max_size, subset_size)\n    return max_size",
        "test": "assert largest_subset([1,2,4,8]) == 4",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        median1 = (n // 2) - 1\n        median2 = n // 2\n        return (arr1[median1] + arr1[median2]) / 2\n    else:\n        median = n // 2\n        return arr1[median]\n",
        "test": "assert get_median([1, 3, 5], [2, 4], 3) == 3, \"Incorrect median value\"",
        "num_ids": 2786,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1, 4, 9, 16, 25]",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"  # true positive example",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]  # example list with 5 elements",
        "num_ids": 1553,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # First, we need to find the coordinates of the three vertices of the largest possible triangle.\n    # The center of the semicircle is at the origin (0, 0).\n    # One vertex of the largest possible triangle is on the y-axis, which is the x-axis at a distance r from the origin.\n    # The other two vertices are the intersections of the semicircle with the x-axis at distances r and -r from the origin.\n    # To find these intersections, we can use the formula for the circle: x^2 + y^2 = r^2.\n    # Substituting y = 0, we get x^2 = r^2, which is a circle with radius r centered at the origin. \n    # The intersections occur where the derivative of x^2 - r^2 with respect to x equals zero. \n    # This is x = +-r.\n    x1 = r\n    x2 = -r\n    y1 = 0\n    y2 = math.sqrt(r**2 - x1**2)\n    # Now we have the coordinates of the three vertices. \n    # We can use the formula for the area of a triangle given its three vertices to find the area of the largest possible triangle.\n    area = 0.5 * abs(x1 * y2 + x2 * y1 + r**2)\n    return area\n",
        "test": "assert triangle_area(1) == 1.89 ",
        "num_ids": 1988,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] != i + 1:\n            return i + 1\n\n    return end + 2 ",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,10]) == 9 # correct function call",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6] ",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    return [(x + ele[0], y + ele[1]) for x, y in sub]\n",
        "test": "assert adjac((0,0), [(0,1), (1,0)]) == [(0,1), (1,0)], \"adjac function returns incorrect adjacent coordinates\"",
        "num_ids": 1962,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_', ' ')\n    else:\n        return text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create an empty list to hold non-zero values\n    non_zero = []\n    # loop through the input list and append non-zero values to the new list\n    for num in num_list:\n        if num != 0:\n            non_zero.append(num)\n    # append the zeroes to the end of the new list\n    non_zero += [0] * (len(num_list) - len(non_zero))\n    # return the new list\n    return non_zero\n",
        "test": "assert move_zero([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]",
        "num_ids": 2080,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n\n    # iterate over all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # add the xor of the pair to the sum\n            sum += arr[i] ^ arr[j]\n\n    # return the sum of all xor values\n    return sum\n",
        "test": "assert pair_xor_Sum([1,3,5,7],4) == 14, \"Incorrect result\"",
        "num_ids": 1707,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) # True",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the nearest integer\n    wc_rounded = round(wc)\n\n    return wc_rounded\n",
        "test": "assert wind_chill(10, -20) == -27  # Test 1",
        "num_ids": 2539,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['John', 'Mary', 'john']) == 8, \"The function should return the sum of the lengths of the names in the list after removing the names that start with a lowercase letter.\"",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n",
        "test": "assert remove_parenthesis(\"\") == \"\" ",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return ((2*n)-1)**2\n",
        "test": "assert is_nonagonal(0) == 1 ",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\bz\\b')\n    return bool(pattern.search(text))\n",
        "test": "assert text_match_wordz_middle(\"hello\") == False",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        k = len(input)\n    \n    for i in range(k//2):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n        \n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1] # check if it reverses the array upto position 5",
        "num_ids": 1863,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple.\n    The output should be a tuple.\n    \"\"\"\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 4}) == (1, 2, 3, {\"a\": 4}) ",
        "num_ids": 1700,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def maxAverageOfPath(cost):\n    # Initialize variables\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case: if we're at the top-left cell, the average is just the cost of that cell\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n\n    # Recurrence relation: find the maximum average of paths that end at each cell\n    for i in range(1, n):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j] + cost[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i][j] + cost[i][j])\n\n    # Return the maximum average of all paths\n    return dp[n-1][n-1]\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 4.3333333333333337, \"Test 1: Incorrect output for maxAverageOfPath\"",
        "num_ids": 3311,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students\n",
        "test": "assert filter_data({'Alice':(1.8, 60), 'Bob':(1.7, 55), 'Charlie':(1.8, 65)}, 1.75, 55) == {'Alice':(1.8, 60), 'Charlie':(1.8, 65)}, \"The function should filter students with height above 1.75 and weight above 55.\" ",
        "num_ids": 2785,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Initialize a counter for the number of matching pairs\n    count = 0\n    \n    # Loop over the indices of nums1\n    for i in range(len(nums1)):\n        # Check if the values at the current indices match\n        if eq(nums1[i], nums2[i]):\n            # Increment the counter if they do\n            count += 1\n    \n    return count\n",
        "test": "assert count_same_pair([1,2,3,4], [1,2,3,4]) == 4",
        "num_ids": 1532,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base) # Convert base to string\n    result = 0 # Initialize the result variable to 0\n    \n    # Loop through each digit of the base to the specified power\n    for i in range(power):\n        for digit in base:\n            result += int(digit) # Add the value of each digit to the result variable\n            \n    return result # Return the final result\n",
        "test": "assert power_base_sum(4, 1) == 4, \"The function should return 4 for base=4 and power=1\"",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Using regex to find values between quotation marks\n    matches = re.findall('\"([^\"]*)\"', text1)\n\n    # Returning the extracted values as a list\n    return matches\n",
        "test": "assert extract_quotation('The \"quick brown fox\" jumps over the \"lazy dog\".') == ['quick brown fox', 'lazy dog']",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = tuple(test_tup[i]*test_tup[i+1] for i in range(N))\n    return result\n",
        "test": "assert multiply_elements((-2,5,0)) == (-10,0)  # test case 2",
        "num_ids": 1939,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(k)\n    return result\n",
        "test": "assert consecutive_duplicates([1,2,3,4,5,6,7,8,9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1787,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n",
        "test": "assert lateralsurface_cone(1, 2) == 12.566370614359172, \"Incorrect lateral surface area of a cone with radius 1 and height 2.\" ",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace spaces with colons\n    text = re.sub(r'\\s', ':', text)\n    \n    # Replace commas with colons\n    text = re.sub(r',', ':', text)\n    \n    # Replace dots with colons\n    text = re.sub(r'\\.', ':', text)\n    \n    # Return the modified text\n    return text\n",
        "test": "assert replace_specialchar(\"123\") == \"123\" # does not contain spaces or punctuation",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    first_occurrence = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return first_occurrence\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2, \"The index of the first occurrence of 3 in [1, 2, 3, 4, 5] should be 2\"",
        "num_ids": 2329,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            prod = 1\n            for num in sub_arr:\n                prod *= num\n            total_sum += prod\n    return total_sum\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0",
        "num_ids": 2664,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    return (n & (1 << 0)) | (n & (1 << 1)) | (n & (1 << 2)) | (n & (1 << 3)) | (n & (1 << 4)) | (n & (1 << 5)) | (n & (1 << 6)) | (n & (1 << 7)) | (n & (1 << 8)) | (n & (1 << 9)) | (n & (1 << 10)) | (n & (1 << 11)) | (n & (1 << 12)) | (n & (1 << 13)) | (n & (1 << 14)) | (n & (1 << 15)) | (n & (1 << 16)) | (n & (1 << 17)) | (n & (1 << 18)) | (n & (1 << 19)) | (n & (1 << 20)) | (n & (1 << 21)) | (n & (1 << 22)) | (n & (1 << 23)) | (n & (1 << 24)) | (n & (1 << 25)) | (n & (1 << 26)) | (n & (1 << 27)) | (n & (1 << 28)) | (n & (1 << 29)) | (n & (1 << 30)) | (n & (1 << 31)) | (n & (1 << 32)) | (n & (1 << 33)) | (n & (1 << 34)) | (n & (1 << 35)) | (n & (1 << 36)) | (n & (1 << 37)) | (n & (1 << 38)) | (n & (1 << 39)) | (n & (1 << 40)) | (n & (1 << 41)) | (n & (1 << 42)) | (n & (1 << 43)) | (n & (1 << 44)) | (n & (1 << 45)) | (n & (1 << 46)) | (n & (1 << 47)) | (n & (1 << 48)) | (n & (1 << 49)) | (n & (1 << 50)) | (n & (1 << 51)) | (n & (1 << 52)) | (n & (1 << 53)) | (n & (1 << 54)) | (n & (1 << 55)) | (n & (1 << 56)) | (n & (1 << 57)) | (n & (1 << 58)) | (n & (1 << 59)) | (n & (1 << 60)) | (n & (1 << 61)) | (n & (1 << 62)) | (n & (1 << 63)) | (n & (1 << 64)) | (n & (1 << 65)) | (n & (1 << 66)) | (n & (1 << 67)) | (n & (1 << 68)) | (n & (1 << 69)) | (n & (1 << 70)) | (n & (1 << 71)) | (n & (1 << 72)) | (n & (1 << 73)) | (n & (1 << 74)) | (n & (1 << 75)) | (n & (1 << 76)) | (n & (1 << 77)) | (n & (1 << 78)) | (n & (1 << 79)) | (n & (1 << 80)) | (n & (1 << 81)) | (n & (1 << 82)) | (n & (1 << 83)) | (n & (1 << 84)) | (n & (1 << 85)) | (n & (1 << 86))",
        "test": "assert set_middle_bits(0b000) == 0b000  # Binary numbers are represented in Python with a '0b' prefix",
        "num_ids": 3030,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 3, 5], 1) == 0",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert not check_str('banana'), \"The function check_str should return False for input 'banana' as it does not start with a vowel.\"",
        "num_ids": 1177,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1 / (1 - n)) - 1\n",
        "test": "assert geometric_sum(1) == 1 # test case for n = 1",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    i = 1\n    count = 0\n    \n    # Loop until we find a triangular number with n digits\n    while count < n:\n        i += 1\n        triangular_number = i * (i + 1) // 2\n        count = len(str(triangular_number))\n    \n    # Return the index of the smallest triangular number with n digits\n    return i - 1\n",
        "test": "assert find_Index(1) == 1  # smallest triangular number with 1 digit is 1",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    tup_list = list(test_tup)\n    result_dict = {}\n    for i in range(0, len(tup_list), 2):\n        result_dict[tup_list[i]] = tup_list[i+1]\n    return result_dict\n",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 1742,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a flag variable to False\n    flag = False\n    \n    # Check whether the length of the string is greater than 0 or not\n    if len(s) > 0:\n        # Initialize the first character as the reference character\n        ref_char = s[0]\n        \n        # Loop through the string and compare each character with the reference character\n        for char in s:\n            if char != ref_char:\n                # If any character is not equal to the reference character, set the flag to True and break the loop\n                flag = True\n                break\n        \n        # If the flag is still False, it means all the characters are same\n        if flag == False:\n            return True\n    \n    # If the length of the string is 0, return True (since there are no characters to compare)\n    return True\n",
        "test": "assert all_Characters_Same(\"aaa\") == True, \"Error in all_Characters_Same() for string 'aaa'\"",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    volume = (tetrahedron_volume(side))\n    area = math.sqrt(2 * volume / 3)\n    return area\n\ndef tetrahedron_volume(side):\n    '''\n    Calculate the volume of a tetrahedron using the formula: volume = (1/3) * (base * height)^2\n    '''\n    volume = (1/3) * (side**3)\n    return volume",
        "test": "assert area_tetrahedron(2) == 4/3 # side = 2",
        "num_ids": 1842,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates a given list by m elements to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst = lst[-m:] + lst[:-m]\n    return lst\n",
        "test": "assert rotate_right([1,2,3,4,5], 0) == [1,2,3,4,5]",
        "num_ids": 1764,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "test": "assert check_none(()) == False # empty tuple",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(123, 456) == [123, 246, 369, 492, 615, 738, 861, 984]",
        "num_ids": 2255,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r * r * math.sin(math.radians(a))\n",
        "test": "assert sector_area(3, 90) == math.pi * 3**2 * 0.5, \"sector_area(3, 90) should be pi * 3**2 * 0.5\"",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Find the LCS for X and Y using the approach explained in the given link\n    lcs_xy = lcs(X, Y)\n\n    # Step 2: Find the LCS for Z and the LCS of X and Y using the approach explained in the given link\n    lcs_zx = lcs(Z, lcs_xy)\n    lcs_zy = lcs(lcs_xy, Z)\n\n    # Step 3: Take the LCS of LCS_ZX and LCS_ZY\n    return lcs(lcs_zx, lcs_zy)\n",
        "test": "assert lcs_of_three('AGGTAB', 'GXTXAYB', 'AGGTAB') == 'AGGTAB'",
        "num_ids": 5676,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<![A-Z])([A-Z][a-z]+)')\n    return pattern.sub(r' \\1', str1).strip()\n",
        "test": "assert capital_words_spaces(\"thisIsAnotherString\") == \"this Is Another String\"",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2)], (3, 4)) == [(1, 2), (3, 4)], \"The function should add the given tuple to the given list.\"",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def check_min_heap_helper(arr, i):\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest != i:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True",
        "test": "assert check_min_heap_helper([2, 1, 3, 4, 5, 6], 0) == False",
        "num_ids": 2757,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1) - jacobsthal_num(n-2))\n",
        "test": "assert jacobsthal_num(0) == 0 # jacobsthal_num(0) should be 0",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Slice the sorted list to get the minimum K records\n    min_k_records = sorted_list[:K]\n\n    return min_k_records\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(i)\n    return result\n",
        "test": "assert extract_index_list([1,2,3], [2,3,4], [2,3,5]) != [2,4] # common elements are not [2,4]",
        "num_ids": 1950,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element of the sorted list\n    return numbers[1]\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2, \"The second smallest number in [1, 2, 3, 4, 5] should be 2\"",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"abbb\") == True",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Initialize a variable to count the number of pairs of reverse strings\n    count = 0\n\n    # Loop through the list of strings\n    for i in range(len(test_list)):\n        # Loop through the list of strings starting from the current index + 1\n        for j in range(i + 1, len(test_list)):\n            # Check if the current string and the next string are reverse of each other\n            if test_list[i][::-1] == test_list[j]:\n                # Increment the count\n                count += 1\n\n    # Return the count of reverse pairs\n    return count\n",
        "test": "assert count_reverse_pairs([\"abc\", \"cba\", \"def\", \"fed\"]) == 2",
        "num_ids": 1931,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in list1:\n        if type(i) == list:\n            i = tuple(i)\n            if i in sublists:\n                sublists[i] += 1\n            else:\n                sublists[i] = 1\n    return sublists\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2359,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        # convert the string to a float and check if it has the correct precision\n        decimal_num = float(num)\n        if round(decimal_num, 2) == decimal_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the string cannot be converted to a float, it is not a decimal number\n        return False\n",
        "test": "assert is_decimal(\"1.00\") == True",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) != len(set(arr)):\n        return False\n    else:\n        return True\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumber_number(2) == False # February has 28 days",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 3, 15, 11, 6, 45, 2], 7) == 1 ",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"abc123def\") == 3  # the function should return 3 because there are 3 digits in the string \"abc123def\"",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_polite(n):\n    def factors(num):\n        flist = []\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if i != num // i:\n                    flist.append(i)\n                    flist.append(num // i)\n                else:\n                    flist.append(i)\n        return flist\n\n    polite_num = 1\n    count = 0\n    while count < n:\n        polite_num += 1\n        flist = factors(polite_num)\n        if len(set(flist)) == len(flist):\n            count += 1\n    return polite_num\n",
        "test": "assert is_polite(1) == 2  # 2 is the first polite number. ",
        "num_ids": 2278,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1,2,3]) == [(1,2), (2,3)]",
        "num_ids": 1353,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def get_pairs_count(arr, target_sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 5, 3, 3], 10) == 0, \"Error in get_pairs_count\"",
        "num_ids": 2512,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff",
        "test": "assert Diff([1,2,3],[1,2]) == [3] ",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def odd_num_sum(n):\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of each odd number to the sum\n        sum += i**4\n    \n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"Test case 1 failed\"",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if char != ')':\n                    return False\n            if current_char == '[':\n                if char != ']':\n                    return False\n            if current_char == '{':\n                if char != '}':\n                    return False\n    if stack:\n        return False\n    return True\n",
        "test": "assert check_expression(\"({[])})\") == False ",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create a new list to store the words with length greater than k\n    new_words = []\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is greater than k\n        if len(word) > K:\n            # Add the word to the new_words list\n            new_words.append(word)\n    # Join the new_words list into a single string\n    result = \" \".join(new_words)\n    return result",
        "test": "assert remove_length(\"this is a test string\", 3) == \"this test string\"",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Initialize an empty list to store the results\n    results = []\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Loop over the matches and add the position and occurrence to the results list\n    for match in matches:\n        position = match.start()\n        occurrence = text[position:position + len(pattern)]\n        results.append((position, occurrence))\n    # If the results list is empty, return None\n    if not results:\n        return None\n    # Otherwise, return the results list\n    return results\n",
        "test": "assert occurance_substring(\"hello world\",\"world\") != [(6, 6)]",
        "num_ids": 1900,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([2, 4, 6, 8]) == False # Example input 2",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1994,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2095,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n    \n    # loop through every element in the original list\n    for element in list1:\n        # if the element is a list, add it to the dictionary as a tuple\n        if isinstance(element, list):\n            sublist_tuple = tuple(element)\n            if sublist_tuple in sublist_count:\n                sublist_count[sublist_tuple] += 1\n            else:\n                sublist_count[sublist_tuple] = 1\n    \n    # return the dictionary of unique sublists and their counts\n    return sublist_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2069,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 120,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    n = len(test_list)\n    for r in range(1, n+1):\n        for combo in combinations(test_list, r):\n            print(sum(combo))\n",
        "test": "assert find_combinations([(1,2,3)]) == [((1, 2, 3),), ((1, 2), (3,))]",
        "num_ids": 3012,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import math\n\ndef count_divisors(n):\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count",
        "test": "assert count_divisors(1) == 1, \"count_divisors(1) should be 1\"",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum += arr[j]\n    return sum\n",
        "test": "assert odd_length_sum([1,2,3,4]) == 6, \"Error: Incorrect output for odd_length_sum([1,2,3,4])\"",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB to HSV\n    # Formulae from https://www.w3schools.com/colors/colors_converting.asp\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if delta == 0 else delta / cmax\n    value = cmax\n    return (hue, saturation, value)\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 3740,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n    count_even = 0\n    count_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            count_even += 1\n        else:\n            odd_product *= num\n            count_odd += 1\n            \n    if count_even > count_odd:\n        return odd_product\n    else:\n        return even_product\n",
        "test": "assert mul_even_odd([1,2,3,4,5]) == 8 # The product of the first even and odd numbers is 1 x 2 = 2",
        "num_ids": 2413,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \" \").split()\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 1538,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b.*b.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") == True",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def new_tuple(test_list, test_str):\n    # Convert the string to a list of characters\n    chars = list(test_str)\n    # Create a new list by concatenating the input list and the list of characters\n    new_list = test_list + chars\n    # Create a tuple from the new list\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, 'h', 'e', 'l', 'l', 'o')",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert even_position([2,4,6,8,10]) == True, \"Testing even_position([2,4,6,8,10])\"",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def remove_nested(test_tup):\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == ()  # empty tuple",
        "num_ids": 1433,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    last_index = -1\n    \n    for i in range(n):\n        if arr[i] == x:\n            last_index = i\n            \n    return last_index\n",
        "test": "assert last([1, 2, 3, 4, 5], 4) == 3  # returns the last position of 4 in the array",
        "num_ids": 2329,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb('abc'), 'Should return True for strings starting with \"a\" and ending with \"b\"'",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n",
        "test": "assert return_sum({1:10, 2:20, 3:30}) == 60",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return (n * (n+1)) // 2\n",
        "test": "assert sum_odd(1) == 1, \"Error in sum_odd(1)\" ",
        "num_ids": 1478,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert _sum([1,2,3,4,5]) == 15  # test for a list of numbers",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary and add leading zeros to make it 32 bits\n    binary = format(n, '032b')\n    \n    # Rotate the bits by d positions to the left\n    rotated_binary = binary[d:] + binary[:d]\n    \n    # Convert rotated binary back to decimal and return\n    return int(rotated_binary, 2)\n",
        "test": "assert left_rotate(10,2) == 4  # (1010) -> (0101) -> (1010)",
        "num_ids": 2352,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regex to find all whitespaces and replace them with empty string\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\" ",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    \n    # check for sorted array\n    if arr == sorted(arr):\n        return 0\n    \n    # binary search to find the rotation point\n    low, high = 0, n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[n-1]:\n            low = mid + 1\n        else:\n            high = mid\n    \n    # calculate number of rotations\n    return n - low\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1956,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        i = 1\n        while i * i <= n:\n            if i * i == n:\n                return True\n            i += 1\n        return False\n",
        "test": "assert is_perfect_square(1) == True  # check for 1, which is a perfect square",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 8]) == True   # even * even * even = even",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    result = []\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = i\n    return result\n",
        "test": "assert max_sum_list([[1,2,3],[2,3,4],[3,4,5]]) == [3, 4, 5] # the list with the highest sum is [3, 4, 5] ",
        "num_ids": 1889,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase(\"ABCD\") == 4  # Test case 2",
        "num_ids": 1764,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((1, 2, 3), 3) == True, \"Error: check_K() function not working for tuples with k\"",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == False",
        "num_ids": 1503,
        "indeed": true
    }
]