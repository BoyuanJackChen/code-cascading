[
    {
        "number": 2,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements\n",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == [2, 3] ",
        "num_ids": 815
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(2) == False #2 is a prime number",
        "num_ids": 767
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappushpop(heap, num)\n    return [x for x in hq.nlargest(n, heap)]\n",
        "test": "assert heap_queue_largest([5,3,9,8,2,1,4],3) == [9,8,5]",
        "num_ids": 1073
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x < 0:\n        return False\n    while x != 0:\n        if x & 1 != 0:\n            if (x & (x-1)) != 0:\n                return False\n        x >>= 1\n    return True\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 928
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == \"quick brown jumps lazy\" ",
        "num_ids": 621
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1,2,3,4]) == [1,4,9,16]",
        "num_ids": 594
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_Rotations(s):\n    if s == s[::-1]:\n        return 0\n    for i in range(len(s)):\n        if s[i:] == s[:len(s)-i]:\n            return i\n    return -1\n",
        "test": "assert find_Rotations(\"a\") == 0  # Test case 2",
        "num_ids": 681
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == -1 or last == -1:\n        return s\n    elif first == last:\n        return s[:first] + s[first+1:]\n    else:\n        return s[:first] + s[first+1:last] + s[last+1:]",
        "test": "assert remove_Occ(\"hello world\", \"o\") == \"hell wrld\"  # first and last occurrence of \"o\" removed",
        "num_ids": 928
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    for row in M:\n        sorted_matrix.append(sorted(row))\n    sorted_matrix = sorted(sorted_matrix, key=lambda row: sum(row))\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1423
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(2, 3, 4) == 12 # 2 base, 3 slant, 4 height",
        "num_ids": 611
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    # Using regular expression to match lowercase letters joined with underscore\n    pattern = r'[a-z]+(_[a-z]+)*'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\"), \"hello_world should return True\"",
        "num_ids": 765
    },
    {
        "number": 17,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "test": "assert square_perimeter(3) == 12 #perimeter of a square with side length 3",
        "num_ids": 437
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    freq = [0] * NO_OF_CHARS\n    for char in string:\n        freq[ord(char)] += 1\n    result = \"\"\n    for char in second_string:\n        if freq[ord(char)] > 0:\n            freq[ord(char)] -= 1\n        else:\n            result += char\n    return result\n",
        "test": "assert str_to_list('world') == ['w', 'o', 'r', 'l', 'd']",
        "num_ids": 1070
    },
    {
        "number": 19,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) != len(set(arraynums)):\n        return True\n    else:\n        return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 672
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    for i in range(n):\n        if x % 10 != 0:\n            x //= 10\n        else:\n            return False\n    return True\n",
        "test": "assert is_woodall(101) == False     # check if 101 is woodall number",
        "num_ids": 955
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rev(num):\n    # Convert the number to a string to reverse it and then convert it back to an integer\n    reverse = int(str(num)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    if num * 2 - reverse == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False, \"rev(13) should be False\"",
        "num_ids": 606
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize a variable to hold the result\n    result = ''\n\n    # Iterate over the list of digits\n    for digit in arr:\n        # Check if the current digit is greater than 0 and less than 10\n        if 0 < digit < 10:\n            # Add the digit to the result string\n            result += str(digit)\n\n    # Convert the result string to an integer\n    result = int(result)\n\n    # Return the result\n    return result\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321, \"Error: Incorrect output for input [1, 2, 3, 4, 5]\"",
        "num_ids": 1144
    },
    {
        "number": 58,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(10, -10) == True # test case 1",
        "num_ids": 527
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n ** 2) * (2 ** 0.5) // 2 + 1\n",
        "test": "assert is_octagonal(1) == True ",
        "num_ids": 520
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub_str = s[i:j+1]\n            if sum(int(d) for d in sub_str) == len(sub_str):\n                count[len(sub_str)] += 1\n    return count",
        "test": "assert count_Substrings(\"111\") == 1",
        "num_ids": 952
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest\n",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 609
    },
    {
        "number": 63,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4 # Check if the function returns the correct output for a list of integers",
        "num_ids": 1102
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(1, 60), (2, 40), (3, 60)]) == [(2, 40), (1, 60), (3, 60)], \"The sorted list of tuples is not correct\"",
        "num_ids": 1245
    },
    {
        "number": 65,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15 # testing a list with 5 integers",
        "num_ids": 769
    },
    {
        "number": 66,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 457
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    # Define a list to store the Bell numbers\n    bell = [1]\n    \n    # Calculate the Bell numbers and store them in the list\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n            \n    # Return the number of ways to partition the set of Bell numbers\n    return bell[n]\n",
        "test": "assert bell_number(0) == 1, \"bell_number(0) should be 1\"",
        "num_ids": 760
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    \n    if n == 2:\n        return A[0] <= A[1] or A[0] >= A[1]\n    \n    if A[0] < A[1]:\n        for i in range(1, n-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    \n    if A[0] > A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    \n    return True\n",
        "test": "assert is_Monotonic([5, 4, 3, 2, 1]) == True  # decreasing array",
        "num_ids": 1128
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n",
        "test": "assert is_sublist([1,2,3,4], [2,3]) == True",
        "num_ids": 783
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:  # check if Input is empty\n        return True\n    else:\n        for tup in Input:  # iterate through the tuples\n            if len(tup) != len(Input[0]):  # check if length of current tuple is different from first tuple\n                return False\n        return True",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True",
        "num_ids": 839
    },
    {
        "number": 71,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    sorted = False\n    while gap > 1 or not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n    return nums\n",
        "test": "assert comb_sort([1, 2, 3, 4]) == [1, 2, 3, 4]",
        "num_ids": 1167
    },
    {
        "number": 72,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False\n",
        "test": "assert dif_Square(2) == True, \"Error: dif_Square(2) should return True\"",
        "num_ids": 812
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'green', 'yellow'], ['*', '-', '-', '*']) == False",
        "num_ids": 878
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result",
        "test": "assert find_tuples([(1,2,3), (2,4,6), (3,6,9)], 2) == [(2,4,6)]  # test case 1",
        "num_ids": 1029
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(13) == False",
        "num_ids": 473
    },
    {
        "number": 79,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"hello\") == True  # Test case 1",
        "num_ids": 461
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 686
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume of the sphere using the formula V = (4/3)*pi*r^3\n    volume = (4/3) * math.pi * (r**3)\n    \n    return volume\n",
        "test": "assert volume_sphere(2) == 33.510321638291125",
        "num_ids": 655
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_Char(strr):\n    \"\"\"\n    This function takes a string as input and returns the character obtained by adding the ASCII value of all the characters in the string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    sum_ascii %= 26\n    return chr(sum_ascii + 97)  # ASCII value of 'a' is 97",
        "test": "assert get_Char(\"hello\") == \"m\"",
        "num_ids": 809
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 0\n        prev = 1\n        curr = 1\n        for i in range(3, n+1):\n            prev_prev = prev\n            prev = curr\n            curr = prev_prev + prev\n        return curr\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 748
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area\n",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793, \"Error: Surface area of sphere with radius 5 is incorrect.\" ",
        "num_ids": 667
    },
    {
        "number": 86,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((n * (n - 1)) // 2) + 1\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"1st centered hexagonal number is 1\"",
        "num_ids": 733
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) != {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'g': 6}",
        "num_ids": 1032
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 1, 2, 3]) == {1: 3, 2: 3, 3: 2}  # Test case 1 ",
        "num_ids": 1004
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N and i > 0:\n            return i\n",
        "test": "assert closest_num(20) == 19",
        "num_ids": 603
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6 # the length of the longest word is 6",
        "num_ids": 608
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring(\"hello world\", \"worlds\") == False # should return False because \"worlds\" is not present in the string \"hello world\"",
        "num_ids": 576
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 1:\n        return False\n    \n    count = 1\n    prev_digit = int(n/10)\n    curr_digit = n % 10\n    \n    while curr_digit != prev_digit:\n        count += 1\n        prev_digit = curr_digit\n        curr_digit = (n // 10**count) % 10\n    \n    if count > 2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_undulating(12345) == True",
        "num_ids": 870
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 452
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (2, 1), (3, 3), (4, 4), (5, 5)]) == 2",
        "num_ids": 806
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2  # example test case 1",
        "num_ids": 868
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1, \"divisor(1) should return 1\"",
        "num_ids": 463
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([[1,2,3],[1,2],[4]]) == {1:2, 2:2, 3:1, 4:1}  # test for list of lists",
        "num_ids": 1168
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n",
        "test": "assert multiply_num([4, 5]) == 20.0 # Check if the function returns the correct result when given a smaller list of numbers",
        "num_ids": 552
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip('0') or '0'\n",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 532
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    if num <= 10:\n        return 11\n    elif num % 10 == 0:\n        return num + 1\n    else:\n        return num + 2",
        "test": "assert next_smallest_palindrome(12) == 22 ",
        "num_ids": 1406
    },
    {
        "number": 101,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert kth_element([1,2,3,4,5], 3) == 3 # Correct case, return 3",
        "num_ids": 698
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n",
        "test": "assert snake_to_camel(\"snake_to_camel\") == \"snakeToCamel\" # Test case 1",
        "num_ids": 663
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    a = 1\n    for i in range(m):\n        a *= (n - i) / (i + 1)\n    return a",
        "test": "assert eulerian_num(1, 1) == 1 # when n = 1 and m = 1, the function should return 1",
        "num_ids": 739
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"orange\"], [\"grape\", \"kiwi\", \"pear\"], [\"lemon\", \"mango\", \"nectarine\"]]) == [[\"apple\", \"banana\", \"orange\"], [\"grape\", \"kiwi\", \"pear\"], [\"lemon\", \"mango\", \"nectarine\"]], \"Sorted sublists are not correct\" ",
        "num_ids": 853
    },
    {
        "number": 105,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 417
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the tuple to a list\n    test_tup_list = list(test_tup)\n\n    # Append the list to the tuple\n    test_tup_list.append(test_list)\n\n    # Convert the list back to a tuple\n    test_tup_new = tuple(test_tup_list)\n\n    return test_tup_new\n",
        "test": "assert add_lists([1,2,3], (7,8,9)) == ([1,2,3,7,8,9],) # test case 2",
        "num_ids": 696
    },
    {
        "number": 108,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4],[6,7,8]) != [1,3,5,2,4,6,7,8]",
        "num_ids": 1565
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    # Initialize the count of odd numbers\n    odd_count = 0\n    # Loop through the number of rotations\n    for i in range(n):\n        # Rotate the number by shifting the binary digits to the left by one position\n        num = (num << 1) | (num & 1)\n        # Check if the number is odd\n        if num & 1:\n            odd_count += 1\n    # Return the count of odd numbers\n    return odd_count\n",
        "test": "assert odd_Equivalent('101', 2) == 2",
        "num_ids": 1016
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common = set()\n    # Loop over each nested list\n    for lst in nestedlist:\n        # If the current list is empty, skip it\n        if not lst:\n            continue\n        # If it's the first list, store its elements in the common set\n        if common == set():\n            common = set(lst)\n        # Otherwise, find the intersection of the common elements with the current list\n        else:\n            common = common.intersection(set(lst))\n    # Return the common elements as a sorted list\n    return sorted(list(common))\n",
        "test": "assert common_in_nested_lists([[1,2,3],[1,2,4],[1,2,3]]) == [1,2]",
        "num_ids": 1085
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"12345\") == True",
        "num_ids": 416
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict_ in list1:\n        if dict_:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {}]) == True  # test case 1: all dictionaries are empty",
        "num_ids": 463
    },
    {
        "number": 116,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty string to hold the digits of the integer\n    integer_str = ''\n    # iterate over the tuple and append each digit to the string\n    for num in nums:\n        integer_str += str(num)\n    # convert the string to an integer and return it\n    return int(integer_str)\n",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 690
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4.5, \"6\", 7.8]]) == [[1.0, 2.0, 3.0], [4.5, 6.0, 7.8]] ",
        "num_ids": 1000
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 478
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # initialize two pointers to the first and last elements of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # loop while left < right\n    while left < right:\n        # calculate the middle index\n        middle = (left + right) // 2\n        \n        # if the left and middle elements are equal, then the element that appears once is in the right half\n        if arr[left] == arr[middle]:\n            left = middle + 1\n        \n        # if the middle and right elements are equal, then the element that appears once is in the left half\n        elif arr[middle] == arr[right]:\n            right = middle\n            \n        # else, the element that appears once is on the side of the array that contains the middle element\n        else:\n            return arr[middle]\n    \n    # if the while loop ends, then there is no element that appears only once in the array\n    return None\n",
        "test": "assert search([1, 2, 3, 4, 5]) == 3 # sorted array with one element appearing only once",
        "num_ids": 1227
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0]*lst[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,-2), (3,4), (5,6)]) == 24  # tuples with negative numbers",
        "num_ids": 943
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def amicable_numbers_sum(limit):\n    def divisor_sum(n):\n        \"\"\"\n        Returns the sum of proper divisors of n.\n        \"\"\"\n        divisor_sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                divisor_sum += i\n        return divisor_sum\n\n    # Find amicable numbers and sum them\n    total_sum = 0\n    for i in range(1, limit+1):\n        if i == divisor_sum(i) and i != divisor_sum(divisor_sum(i)):\n            total_sum += i\n    return total_sum\n",
        "test": "assert amicable_numbers_sum(10) == 10 # limit is 10, sum of amicable numbers is 10 ",
        "num_ids": 1213
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle\n",
        "test": "assert angle_complex(1, 0) == 0  # angle of 1 + 0i is 0",
        "num_ids": 511
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    for char in string:\n        if char == '0':\n            zeros += 1\n        elif char == '1':\n            ones += 1\n        max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "test": "assert find_length(\"11001010101\") == 2",
        "num_ids": 2072
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n",
        "test": "assert sum(12,8) == 20 # check if sum(12,8) returns 20 ",
        "num_ids": 788
    },
    {
        "number": 127,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n",
        "test": "assert multiply_int(2,3) == 6",
        "num_ids": 352
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(4, \"Hello World\") == [\"Hello\", \"World\"]  # correct output for n=4 and str=\"Hello World\"",
        "num_ids": 670
    },
    {
        "number": 129,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    row_sum = []\n    col_sum = [0]*n\n    diagonal_sum = 0\n    anti_diagonal_sum = 0\n\n    # Calculate row sums\n    for i in range(n):\n        row_sum.append(sum(my_matrix[i]))\n\n    # Calculate column sums\n    for j in range(n):\n        for i in range(n):\n            col_sum[j] += my_matrix[i][j]\n\n    # Calculate diagonal sums\n    for i in range(n):\n        diagonal_sum += my_matrix[i][i]\n        anti_diagonal_sum += my_matrix[i][n-i-1]\n\n    # Check if all row sums, column sums, diagonal sums and anti-diagonal sums are equal\n    if all(row_sum[0] == row_sum[i] for i in range(1, n)) and \\\n       all(col_sum[0] == col_sum[i] for i in range(1, n)) and \\\n       row_sum[0] == diagonal_sum == anti_diagonal_sum:\n           return True\n    else:\n           return False\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 1604
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to store the count of each element in the list\n    count_dict = defaultdict(int)\n\n    # iterate through the list and count the occurrences of each element\n    for num in nums:\n        count_dict[num] += 1\n\n    # find the maximum count\n    max_count = max(count_dict.values())\n\n    # find the items with maximum count\n    max_items = [key for key, value in count_dict.items() if value == max_count]\n\n    # return the maximum item\n    return max_items[0]\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5, 4, 3, 2, 1]) == 1 ",
        "num_ids": 1080
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        while i < j and str1[i] not in vowels:\n            i += 1\n        while i < j and str1[j] not in vowels:\n            j -= 1\n        if i < j:\n            str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n            i += 1\n            j -= 1\n    return str1\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 1188
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1\n",
        "test": "assert tup_string(()) == '', 'Error in tup_string' ",
        "num_ids": 597
    },
    {
        "number": 133,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
        "test": "assert sum_negativenum([-1, 2, -3, 4, -5]) == -9",
        "num_ids": 669
    },
    {
        "number": 135,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)\n",
        "test": "assert hexagonal_num(1) == 1, \"hexagonal_num(1) should be 1\"",
        "num_ids": 488
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    ratio = count/len(nums)\n    return ratio\n",
        "test": "assert zero_count([1, 1, 1, 1]) == 0 # ratio of zeroes is 0",
        "num_ids": 882
    },
    {
        "number": 138,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    if n == 1:\n        return True\n    # Check if n can be represented as sum of powers of 2\n    for i in range(1, int(n**0.5)+1):\n        if i**2 > n:\n            break\n        if (n - i**2) % (2*i) == 0:\n            return True\n    return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1193
    },
    {
        "number": 139,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "test": "assert circle_circumference(10) == 62.83185307179586, \"Error: Incorrect circumference calculation for radius of 10\"",
        "num_ids": 671
    },
    {
        "number": 140,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)\n",
        "test": "assert extract_singly([[1,2,3],[4,5],[6]]) == {1,2,3,4,5,6}",
        "num_ids": 752
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    while n > 1:\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        \n        if max_idx != n-1:\n            nums[:max_idx+1] = reversed(nums[:max_idx+1])\n            nums[:n] = reversed(nums[:n])\n        \n        n -= 1\n    \n    return nums\n",
        "test": "assert pancake_sort([3, 2, 1]) == [1, 2, 3] ",
        "num_ids": 1672
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 0 # there is no common element at the same position in all three lists",
        "num_ids": 665
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 486
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = float('-inf')\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4, \"Error in max_Abs_Diff for input [1, 2, 3, 4, 5]\"",
        "num_ids": 914
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        if n == 0:\n            return (0, 0)\n        else:\n            return None\n    elif b == 0:\n        x = n // abs(a)\n        if n % abs(a) == 0:\n            return (x, 0)\n        else:\n            return None\n    else:\n        y = n * a // b\n        if y < n:\n            return (0, y)\n        else:\n            x = n * b // a\n            if x == 0 and n == 0:\n                return (0, 0)\n            elif x == 0:\n                return None\n            else:\n                return (x, y - a // b * x)\n",
        "test": "assert find_solution(1, 2, 3) == (0, 1)  # ax + by = n, where a = 1, b = 2, n = 3",
        "num_ids": 1327
    },
    {
        "number": 161,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the elements that are not present in the second list\n    new_list = []\n    # loop through the elements of the first list and add them to the new list if they are not present in the second list\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list\n",
        "test": "assert remove_elements([1,2,3,4,5],[3,4]) == [1,2,5] ",
        "num_ids": 826
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    s = 0\n    i = 0\n    while n - 2*i > 0:\n        s += n - 2*i\n        i += 1\n    return s\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 616
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2",
        "test": "assert area_polygon(3, 4) == 6.0",
        "num_ids": 877
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef div_sum(n):\n    # Calculate the sum of divisors for n\n    n_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            n_divisors += i\n            if i != n // i:\n                n_divisors += n // i\n    return n_divisors\n\n    # Calculate the sum of divisors for m\n    m_divisors = div_sum(m)\n\n    # Check if the sum of divisors for n and m are the same\n    if div_sum(n) == div_sum(m):\n        print(\"The sum of divisors for\", n, \"and\", m, \"are the same.\")\n    else:\n        print(\"The sum of divisors for\", n, \"and\", m, \"are different.\")\n",
        "test": "assert div_sum(1) == True",
        "num_ids": 872
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    eng_alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == eng_alpha[i % 26].lower():\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"\") == 0 # empty string",
        "num_ids": 916
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([2, 4, 6, 8]) == 6",
        "num_ids": 658
    },
    {
        "number": 167,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 673
    },
    {
        "number": 168,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1, \"Incorrect frequency\"",
        "num_ids": 626
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to hold the sum\n    sum = 0\n    \n    # Loop through the list and add up the numbers in the specified range\n    for i in range(m, n+1):\n        sum += list1[i]\n    \n    # Return the sum\n    return sum\n",
        "test": "assert sum_range_list([1,2,3,4,5], 1, 3) == 9  # example 1",
        "num_ids": 896
    },
    {
        "number": 171,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a",
        "test": "assert perimeter_pentagon(3) == 15, \"The perimeter of a regular pentagon with side length 3 is not 15.\"",
        "num_ids": 561
    },
    {
        "number": 172,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"The quick brown fox jumps over the lazy dog\") == 0",
        "num_ids": 539
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    for element in test_tuple:\n        if type(element) != type(test_tuple[0]):\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3, 4, 5)) == True ",
        "num_ids": 652
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 10, 5) == False",
        "num_ids": 960
    },
    {
        "number": 224,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0b0000) == 0",
        "num_ids": 479
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"  # test for even length string",
        "num_ids": 495
    },
    {
        "number": 227,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_val = a\n    if b < min_val:\n        min_val = b\n    if c < min_val:\n        min_val = c\n    return min_val\n",
        "test": "assert min_of_three(3, 4, 5) == 3",
        "num_ids": 642
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l > r:\n        l, r = r, l\n    for i in range(l, r + 1):\n        if bin(i)[2:].count('1') > 0:\n            return False\n    return True ",
        "test": "assert all_Bits_Set_In_The_Given_Range(2, 1, 2) == False # bit 0 is unset in range 1 to 2",
        "num_ids": 1016
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def re_arrange_array(arr, n):\n    # create two empty arrays to store negative and positive elements\n    neg_arr = []\n    pos_arr = []\n\n    # loop through the given array\n    for i in range(len(arr)):\n        # if the current element is negative, append it to neg_arr\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        # if the current element is positive, append it to pos_arr\n        elif arr[i] > 0:\n            pos_arr.append(arr[i])\n\n    # concatenate the two arrays\n    result_arr = neg_arr + pos_arr\n\n    # return the result array\n    return result_arr\n",
        "test": "assert re_arrange_array([1,2,3,4,-5], 3) == [-5, 1, 2, 3, 4] # test case 1",
        "num_ids": 1237
    },
    {
        "number": 230,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1\n",
        "test": "assert replace_blank(\"Hello World\", \"#\") == \"Hello#World\"",
        "num_ids": 524
    },
    {
        "number": 232,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([1, 2, 3, 4, 5], 2) == [5, 4]",
        "num_ids": 963
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula A = 2\u03c0rh\n    area = 2 * math.pi * r * h\n    return area\n",
        "test": "assert lateralsuface_cylinder(5, 10) == 314.1592653589793, \"Incorrect lateral surface area of a cylinder with radius 5 and height 10\"",
        "num_ids": 801
    },
    {
        "number": 234,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(2) == 8 # test for side length 2",
        "num_ids": 448
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    binary = bin(n)[2:]  # convert decimal to binary and remove '0b' prefix\n    \n    # iterate over binary string and set even bits to 1\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            binary = binary[:i] + '1' + binary[i+1:]\n    \n    # convert binary string back to decimal and return\n    return int(binary, 2)\n",
        "test": "assert even_bit_set_number(10) == 10  # Set all even bits of 10 to 10",
        "num_ids": 841
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict\n",
        "test": "assert check_occurences([(1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (1, 2, 3)]) == {(1, 2, 3): 3, (4, 5, 6): 1, (7, 8, 9): 1} ",
        "num_ids": 1250
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1] != '':\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 702
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Base case: if n is 1, there is only one possible sequence\n    if n == 1:\n        return 1\n    \n    # Initialize the total count to 0\n    total_count = 0\n    \n    # Iterate over all possible values of the first element\n    for first_element in range(2, m+1):\n        # Check if the sequence is valid (first_element must be greater than or equal to twice the previous element)\n        if first_element >= 2*previous_element:\n            # Recursively calculate the number of valid sequences for the remaining elements (length n-1)\n            num_valid_sequences = get_total_number_of_sequences(m, n-1)\n            \n            # Add the number of valid sequences for this first element to the total count\n            total_count += num_valid_sequences\n    \n    # Return the total count\n    return total_count\n",
        "test": "assert get_total_number_of_sequences(10, 1) == 1  # only one sequence possible (10)",
        "num_ids": 1329
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Combine the two lists\n    combined_list = list1[:-1] + list2\n    return combined_list\n",
        "test": "assert replace_list([1,2,3], [4,5,6]) == [1,2,4,5,6]",
        "num_ids": 659
    },
    {
        "number": 242,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 468
    },
    {
        "number": 244,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Get the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # If the square root is an integer, return the next perfect square\n    if sqrt_N.is_integer():\n        return (sqrt_N + 1) ** 2\n    \n    # Otherwise, return the next integer perfect square\n    else:\n        return math.ceil(sqrt_N + 1) ** 2",
        "test": "assert next_Perfect_Square(4) == 9 # Check if the function returns the correct output for an input of 4",
        "num_ids": 1005
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_sum = arr[0]\n    inc_sum = arr[0]\n    dec_sum = 0\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            inc_sum += arr[i]\n            dec_sum = max(dec_sum, inc_sum - arr[i-1])\n        else:\n            inc_sum = max(inc_sum, dec_sum + arr[i])\n            dec_sum = 0\n        \n        max_sum = max(max_sum, inc_sum, dec_sum)\n    \n    return max_sum\n",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 5 ",
        "num_ids": 1723
    },
    {
        "number": 246,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Compute the square root of a number using the Babylonian method.\n    '''\n    guess = number / 2  # Initial guess\n    epsilon = 1e-10  # Tolerance for convergence\n    while abs(guess**2 - number) > epsilon:\n        # Update guess based on previous guess\n        guess = (guess + number/guess) / 2\n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2.0  # check if babylonian_squareroot(4) returns 2.0",
        "num_ids": 965
    },
    {
        "number": 247,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # create a table to store the lengths of palindromic subsequences\n    n = len(str)\n    table = [[0] * n for _ in range(n)]\n\n    # all characters in the string are palindrome of length 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = 2\n\n    # check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and k == 2:\n                table[i][j] = 2\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n\n    return table[0][n-1]\n",
        "test": "assert lps(\"bbbab\") == 4  # example case 2",
        "num_ids": 1340
    },
    {
        "number": 248,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    if n < 1:\n        return 0\n    else:\n        hsum = 0\n        for i in range(1, n+1):\n            hsum += 1/i\n        return hsum\n",
        "test": "assert harmonic_sum(0) == 0",
        "num_ids": 612
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_list:\n            intersection_list.append(num)\n    return intersection_list\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 820
    },
    {
        "number": 250,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((\"apple\", \"banana\", \"cherry\"), \"apple\") == 1, \"Incorrect count for tuple ('apple', 'banana', 'cherry') and element 'apple'\"",
        "num_ids": 624
    },
    {
        "number": 251,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result",
        "test": "assert insert_element([1, 2, 3, 4, 5], 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5] ",
        "num_ids": 702
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert a list of complex numbers to their polar coordinates.\n    \"\"\"\n    polar = []\n    for num in numbers:\n        rho, phi = cmath.polar(num)\n        polar.append((rho, phi))\n    return polar",
        "test": "assert convert(2-1j) == (2.2832, 0.7854) ",
        "num_ids": 725
    },
    {
        "number": 253,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1,2,3,4,5]) == 5 ",
        "num_ids": 547
    },
    {
        "number": 255,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    \"\"\"\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    \"\"\"\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]  # Test 1",
        "num_ids": 2080
    },
    {
        "number": 256,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create a list to store all the prime numbers less than n\n    primes = []\n    \n    # Create a variable to store the number of prime numbers less than n\n    count = 0\n    \n    # Loop through all numbers from 2 to n-1\n    for num in range(2, n):\n        # Assume num is prime\n        is_prime = True\n        \n        # Check if num is divisible by any number from 2 to sqrt(num)\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # If num is prime, add it to the list of primes\n        if is_prime:\n            primes.append(num)\n            count += 1\n    \n    # Return the number of prime numbers less than n\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4  # check if it correctly identifies prime numbers up to 10",
        "num_ids": 1233
    },
    {
        "number": 257,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 414
    },
    {
        "number": 259,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3),(4,5,6)) == (4,5,6)",
        "num_ids": 1084
    },
    {
        "number": 260,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Create a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check if n is within the range of prime numbers\n    if n > len(primes):\n        raise ValueError(\"n is out of range for the prime numbers list\")\n    \n    # Return the nth prime number\n    return primes[n-1]\n",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1724
    },
    {
        "number": 261,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]/test_tup2[i],)\n    return result\n",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5)",
        "num_ids": 907
    },
    {
        "number": 262,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return (list1[:L], list1[L:])\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5]) ",
        "num_ids": 970
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "test": "assert dog_age(2) == 14, \"Error in dog_age\"",
        "num_ids": 467
    },
    {
        "number": 265,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 966
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(3) == 54  # for a cube with side length 3",
        "num_ids": 511
    },
    {
        "number": 267,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 724
    },
    {
        "number": 268,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    # Initialize the first three star numbers\n    star_nums = [1, 2, 3]\n    \n    # Compute the next star numbers by adding the previous ones\n    for i in range(3, n):\n        star_nums.append(sum(star_nums[-3:]))\n    \n    # Return the n'th star number\n    return star_nums[n-1]\n",
        "test": "assert find_star_num(1) == 1, \"Error in find_star_num(1)\"",
        "num_ids": 844
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('A') == 65, \"Incorrect ascii value\"",
        "num_ids": 424
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0  # []",
        "num_ids": 877
    },
    {
        "number": 271,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 728
    },
    {
        "number": 272,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1,2),(3,4),(5,6)]) == [2,4,6]",
        "num_ids": 747
    },
    {
        "number": 273,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1,2,3),(2,3,4)) == (-1, -1, -1)",
        "num_ids": 926
    },
    {
        "number": 274,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # initialize sum to 0\n    sum = 0\n    \n    # iterate over even index binomial coefficients up to n\n    for i in range(0, n+1, 2):\n        # calculate binomial coefficient\n        binomial = math.comb(n, i)\n        \n        # add binomial coefficient to sum\n        sum += binomial\n    \n    # return sum of even index binomial coefficients\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 856
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume\n",
        "test": "assert volume_cylinder(5, 4) == 251.33  # Testing for a cylinder with radius 5 and height 4",
        "num_ids": 715
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def dict_filter(dictionary, n):\n    # Create a new dictionary to hold the filtered results\n    result = {}\n    # Loop through the items in the original dictionary\n    for key, value in dictionary.items():\n        # If the value is greater than or equal to n, add it to the new dictionary\n        if value >= n:\n            result[key] = value\n    # Return the new dictionary\n    return result\n",
        "test": "assert dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == {\"b\": 2, \"c\": 3}  # test with a dictionary and value 2",
        "num_ids": 886
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count",
        "test": "assert count_first_elements((2, 1, 3, 4, 5)) == 1",
        "num_ids": 686
    },
    {
        "number": 279,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return (n * (n * 10 - 1)) // 9\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 485
    },
    {
        "number": 280,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 770
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]), \"Elements of the list are not unique\"",
        "num_ids": 575
    },
    {
        "number": 282,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3,4],[2,3,4,5]) == [-1,-1,-1,-1] # test case 1",
        "num_ids": 725
    },
    {
        "number": 283,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def validate(n):\n    # Convert the integer to a string to split it into digits\n    digits = [int(d) for d in str(n)]\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in set(digits):\n        if digits.count(digit) > digit:\n            return False\n    \n    return True\n",
        "test": "assert validate(123456789) == True, \"Error: Incorrect output for validate(123456789)\"",
        "num_ids": 600
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and checks if all items in the list are equal to the given element.\n    \"\"\"\n    return all(item == element for item in lst)\n",
        "test": "assert check_element([], 1) == True",
        "num_ids": 583
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbab') == True # Correct output: True",
        "num_ids": 571
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Repeating the array k times\n    b = a * k\n    # Finding the sum of the repeated array\n    b_sum = sum(b)\n    # Finding the maximum subarray sum in the repeated array\n    max_sum = max_subarray_sum(b)\n    # Returning the maximum subarray sum in the original array\n    return max_sum // k\n\n\ndef max_subarray_sum(a):\n    # Initializing the maximum subarray sum and current subarray sum\n    max_sum = a[0]\n    current_sum = a[0]\n    # Iterating through the array\n    for i in range(1, len(a)):\n        # If the current subarray sum is positive, add it to the current sum\n        if current_sum > 0:\n            current_sum += a[i]\n        # If the current subarray sum is negative or zero, start a new subarray\n        else:\n            current_sum = a[i]\n        # Updating the maximum subarray sum if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Returning the maximum subarray sum\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 2, 3) == -1, \"Incorrect output\" ",
        "num_ids": 1603
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(1) == 1  # the sum of squares of first 1 even natural numbers is 1",
        "num_ids": 624
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    \n    return max_list\n",
        "test": "assert max_length([[1,2,3],[4,5],[6,7,8,9], [10]]) == 4",
        "num_ids": 920
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_no_of_ways(n, k):\n    # Edge case: fence has no posts\n    if n == 0:\n        return 0\n\n    # Edge case: fence has only one post\n    if n == 1:\n        return k\n\n    # Initialize a list to store the number of ways of painting each post\n    ways = [0] * (n + 1)\n\n    # Base case: first post can be painted any of k colors\n    ways[1] = k\n\n    # Loop through each post, starting from the second post\n    for i in range(2, n + 1):\n        # Loop through each color\n        for j in range(1, k + 1):\n            # If the current color is the same as the color of the previous post, skip it\n            if j == ways[i - 1]:\n                continue\n\n            # If the current color is different from the color of the previous post, count it as a valid way to paint the fence\n            ways[i] += 1\n\n    # Return the total number of ways to paint the fence\n    return ways[-1]\n",
        "test": "assert count_no_of_ways(1, 1) == 1  # 1 post can have only 1 color",
        "num_ids": 1454
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10, 3) == 3  # should return 3",
        "num_ids": 391
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side\n",
        "test": "assert otherside_rightangle(3,4) == 5 #test with two sides of a right angled triangle",
        "num_ids": 619
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val > max_val:\n                max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 701
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(12) == 1+2+3+4+6+12",
        "num_ids": 746
    },
    {
        "number": 296,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0, \"Incorrect count for [1,2,3,4,5]\" ",
        "num_ids": 871
    },
    {
        "number": 297,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n",
        "test": "assert flatten_list([1, [2, 3, [4, [5]], 6], 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 898
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    aggregates = defaultdict(int)\n    for (time, state) in stdata:\n        aggregates[state] += 1\n        \n    max_state = max(aggregates, key=aggregates.get)\n    return max_state, aggregates[max_state]",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]) == 16 ",
        "num_ids": 1155
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = format(i, f'0{2*n}b')\n        first_n_bits = binary[:n]\n        last_n_bits = binary[n:]\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(1) == 1",
        "num_ids": 1295
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 1\n    max_depth = 0\n    for value in d.values():\n        depth = dict_depth(value)\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1\n",
        "test": "assert dict_depth({}) == 1 # empty dictionary has depth 1",
        "num_ids": 617
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Element(arr,ranges,rotations,index) : \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Convert ranges and rotations into a list of tuples\n    rotations_list = []\n    for i in range(len(ranges)):\n        rotations_list.append((ranges[i], rotations[i]))\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Apply rotations to the element\n    for range_, rotation in rotations_list:\n        if index >= range_:\n            index -= range_\n            index += rotation\n\n    return element\n",
        "test": "assert find_Element([1, 2, 3, 4, 5], [2, 3], [0, 1], 1) == 2",
        "num_ids": 1151
    },
    {
        "number": 305,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\n\ndef start_withp(words):\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return p_words\n",
        "test": "assert start_withp(['python', 'java', 'php']) == ['python', 'php'] ",
        "num_ids": 722
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Create a dictionary to store the maximum sum of increasing subsequences from prefix until index j, for each index j.\n    max_sum = {0: 0}\n    # Iterate through the array from index 1 to n, and update the maximum sum for each index.\n    for i in range(1, n):\n        max_sum[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i] and max_sum[j] + a[i] > max_sum[i]:\n                max_sum[i] = max_sum[j] + a[i]\n    # Return the maximum sum of increasing subsequence that includes the kth element, if k > i.\n    if k > i:\n        return max_sum[i]\n    else:\n        return max_sum[k]\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 3) == 9  # example given in the problem statement",
        "num_ids": 1701
    },
    {
        "number": 307,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # create a deepcopy of the original tuplex\n    tuplex_copy = deepcopy(tuplex)\n    \n    # get the start and end indices of the slice\n    start_index = max(0, m)\n    end_index = min(len(tuplex_copy), n)\n    \n    # slice the tuplex and return the result\n    return tuplex_copy[start_index:end_index]\n",
        "test": "assert colon_tuplex((), 0, 0) == ()",
        "num_ids": 632
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize a list to store the products\n    products = []\n    \n    # loop through the lists and find the N largest products\n    for i in range(N):\n        # multiply the ith largest element from each list\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    \n    return products\n",
        "test": "assert large_product([-1, 2, 3], [4, -5, 6], 2) == [6, 9]  # check for negative numbers",
        "num_ids": 1187
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 10) == 10",
        "num_ids": 402
    },
    {
        "number": 310,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 543
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & 1 == 0: # if least significant bit is 0\n        return n | 1 # set it to 1\n    else:\n        return n << 1 # move all bits to the left by 1\n",
        "test": "assert set_left_most_unset_bit(0) == 1",
        "num_ids": 851
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(2,3) == 12.566370614359172, \"Error: The volume_cone function is incorrect.\" ",
        "num_ids": 700
    },
    {
        "number": 388,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = 0\n    i = 1\n    while i <= n:\n        highest_power = i\n        i *= 2\n    return highest_power\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 503
    },
    {
        "number": 389,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Recursive case\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2  # test for n=0",
        "num_ids": 597
    },
    {
        "number": 390,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n",
        "test": "assert add_string([1, 2, 3], \"{:.2f}\") == [\"1.00\", \"2.00\", \"3.00\"] # check if the format string is applied correctly to each element in the list",
        "num_ids": 826
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "test": "assert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], []) == {'a': {'': 1}, 'b': {'': 2}, 'c': {'': 3}}",
        "num_ids": 1259
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 895
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    \n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]  # test case 1",
        "num_ids": 740
    },
    {
        "number": 394,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 500
    },
    {
        "number": 395,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 952
    },
    {
        "number": 396,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"abba\") == True, \"Incorrect output for 'abba'\"",
        "num_ids": 534
    },
    {
        "number": 397,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = sorted([a, b, c])\n    median = numbers[1]\n    return median\n",
        "test": "assert median_numbers(5, 6, 7) == 6",
        "num_ids": 567
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_of_num = 0\n        for digit in str(num):\n            sum_of_num += int(digit)\n        result.append(sum_of_num)\n    return result\n",
        "test": "assert sum_of_digits([123, 456]) == [6, 15]",
        "num_ids": 719
    },
    {
        "number": 399,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n",
        "test": "assert bitwise_xor((0, 0, 0, 0), (0, 0, 0, 0)) == (0, 0, 0, 0)",
        "num_ids": 969
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Convert the list into a set of tuples\n    tuple_set = set(tuple(x) for x in test_list)\n    # Return the length of the set as the frequency of unique tuples\n    return len(tuple_set)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2)]) == 4",
        "num_ids": 813
    },
    {
        "number": 401,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        sub_result = ()\n        for j in range(len(test_tup1[i])):\n            sub_result += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (sub_result,)\n    return result\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) != ((6, 8), (10, 13)) ",
        "num_ids": 1069
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 10) == 5",
        "num_ids": 388
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuple1:\n        if elem == tuplex:\n            return True\n    return False\n",
        "test": "assert check_tuplex(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'orange')) == False",
        "num_ids": 552
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(10) == False",
        "num_ids": 514
    },
    {
        "number": 407,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # sort the list in descending order\n    digits.sort(reverse=True)\n\n    # convert the list back to a number\n    next_bigger = int(''.join([str(d) for d in digits]))\n\n    # if the original number is the largest number with the same set of digits,\n    # return None\n    if next_bigger == 0:\n        return None\n\n    return next_bigger ",
        "test": "assert rearrange_bigger(10000) == 10000",
        "num_ids": 1196
    },
    {
        "number": 408,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, num1, num2))\n            else:\n                if (num1 + num2, num1, num2) < heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (num1 + num2, num1, num2))\n    return [(pair[1], pair[2]) for pair in heapq.nsmallest(k, heap)]\n",
        "test": "assert k_smallest_pairs([1, 2], [3, 4], 1) == [(1, 3)]",
        "num_ids": 1647
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,2),(3,4),(-1,-2)]) == -2",
        "num_ids": 944
    },
    {
        "number": 410,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None # empty list\n    \n    min_val = listval[0]\n    \n    for val in listval:\n        if isinstance(val, int):\n            if val < min_val:\n                min_val = val\n        elif isinstance(val, float):\n            if val < min_val:\n                min_val = val\n        elif isinstance(val, str):\n            if len(val) < len(str(min_val)) or (len(val) == len(str(min_val)) and val < str(min_val)):\n                min_val = val\n        elif isinstance(val, list):\n            if min_val is None or len(val) < len(min_val):\n                min_val = val\n        else:\n            if min_val is None or val < min_val:\n                min_val = val\n    \n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 931
    },
    {
        "number": 411,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 616
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 574
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in list1:\n        if n == 0:\n            return i[n]\n        else:\n            n -= 1",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == 3  # test if the function correctly returns the 1st element from the 1st tuple in the list",
        "num_ids": 751
    },
    {
        "number": 414,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1, 2, 3], [4, 5, 6]) == False ",
        "num_ids": 604
    },
    {
        "number": 415,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_Product(arr):\n    # Initialize variables to store the maximum and second maximum values\n    max_val = arr[0]\n    sec_max_val = arr[0]\n    \n    # Loop through the array and update the maximum and second maximum values\n    for num in arr[1:]:\n        if num > max_val:\n            sec_max_val = max_val\n            max_val = num\n        elif num > sec_max_val:\n            sec_max_val = num\n    \n    # Calculate the product of the maximum and second maximum values\n    max_product = max_val * sec_max_val\n    \n    # Return the maximum product\n    return max_product\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20",
        "num_ids": 1097
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty list to store the common first elements\n    common_elements = []\n    \n    # Loop through the input list of tuples\n    for i in range(len(Input)):\n        # Check if the current tuple's first element is in the common_elements list\n        if Input[i][0] in common_elements:\n            # If the first element is already in the list, append the rest of the tuple to it\n            common_elements[common_elements.index(Input[i][0])] = tuple(common_elements[common_elements.index(Input[i][0])] + Input[i][1:])\n        else:\n            # If the first element is not in the list, append the tuple as is\n            common_elements.append(Input[i])\n    \n    return common_elements\n",
        "test": "assert group_tuples([(1,2), (1,3), (2,4), (3,4), (1,5), (2,6)]) == [(1, 2, 3, 5), (2, 4, 6), (3, 4)] ",
        "num_ids": 1361
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['apple', 'banana', 'cherry', 'date', 'elderberry']) == 'elderberry'",
        "num_ids": 652
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))\n",
        "test": "assert round_and_sum([1.2345, 2.3456, 3.4567, 4.5678, 5.6789]) == 35.0 ",
        "num_ids": 689
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(1) == 1 ",
        "num_ids": 593
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]\n",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 649
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n**3\n",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Error in function for n=1\"",
        "num_ids": 593
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = ()\n    for string in test_tuple:\n        new_tuple += (string[-1],)\n    return new_tuple",
        "test": "assert extract_rear((\"123\", \"456\", \"789\")) == (\"3\", \"6\", \"9\")",
        "num_ids": 707
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublst in lst:\n        if x in sublst:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2],[3,4],[2,3]], 2) == 2 ",
        "num_ids": 596
    },
    {
        "number": 426,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 622
    },
    {
        "number": 427,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Using regular expression to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    match = re.match(pattern, dt)\n    \n    # If the date format matches, then convert it to dd-mm-yyyy format\n    if match:\n        year, month, day = dt.split('-')\n        return f\"{day}-{month}-{year}\"\n    \n    # If the date format does not match, return the original date\n    return dt\n",
        "test": "assert change_date_format('2021-12-01') == '01-12-2021'",
        "num_ids": 1021
    },
    {
        "number": 428,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5] ",
        "num_ids": 1201
    },
    {
        "number": 429,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n",
        "test": "assert and_tuples((True, False), (False, True)) == (False, False) ",
        "num_ids": 888
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b ** 2 - 4 * a * c > 0:\n        x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n        y1 = a * x1 ** 2 + b * x1 + c\n        y2 = a * x2 ** 2 + b * x2 + c\n        return (x1, x2), (y1, y2)\n    elif b ** 2 - 4 * a * c == 0:\n        x = -b / (2 * a)\n        y = a * x ** 2 + b * x + c\n        return (x,), (y,)\n    else:\n        return None",
        "test": "assert parabola_directrix(1, 2, 3) == None  # Parabola has no directrix",
        "num_ids": 989
    },
    {
        "number": 431,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3,4], [5,6,7,8]) == False  # Expected False, different lists with no common element",
        "num_ids": 711
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n    \"\"\"\n    return (abs(base1 - base2) / 2) * height\n",
        "test": "assert median_trapezium(2,4,3) == 3 ",
        "num_ids": 551
    },
    {
        "number": 433,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n",
        "test": "assert check_greater([5, 4, 3, 2, 1], 6) == True",
        "num_ids": 553
    },
    {
        "number": 434,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'ab+')\n    return bool(pattern.search(text))\n",
        "test": "assert text_match_one(\"abbc\"), True",
        "num_ids": 527
    },
    {
        "number": 435,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # convert n to a string so we can get the last character\n    n_str = str(n)\n    # get the last character of the string (which is the last digit)\n    last_char = n_str[-1]\n    # convert the last character back to an integer\n    last_digit = int(last_char)\n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 593
    },
    {
        "number": 436,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, 2, 3, -4, 5, -6, 7, -8, 9]) == [-4, -6, -8]  # Test case 1",
        "num_ids": 654
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"a1b2c3d4e5f6g7h8i9j0\") == \"abcdefghij\"",
        "num_ids": 595
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([]) == 0, \"Empty list should return 0\"",
        "num_ids": 928
    },
    {
        "number": 439,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))\n",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345  # Check if the function works for a list of integers",
        "num_ids": 660
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = ['quickly', 'slowly', 'quick', 'slow', 'quicker', 'slower']\n    for adverb in adverbs:\n        pattern = re.compile(r'\\b' + adverb + r'\\b')\n        match = pattern.search(text)\n        if match:\n            return f\"The first adverb {adverb} occurs at position {match.start()}\"\n    return \"No adverb found in the given sentence.\"\n",
        "test": "assert find_adverb_position(\"The dog chases the cat relentlessly.\") == [{'adverb': 'relentlessly', 'position': 10}], \"Incorrect output for a sentence with one adverb and an adverbial phrase\"",
        "num_ids": 1211
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the side length of the cube\n    side = l / 2.0\n    # calculate the surface area of the cube\n    surface_area = 6 * l ** 2\n    # return the result\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24  # test for the cube with length 2 ",
        "num_ids": 538
    },
    {
        "number": 442,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\n\ndef positive_count(nums):\n    # Create an array with integer data type\n    arr = array('i', nums)\n    # Count the number of positive elements\n    count = sum(1 for num in arr if num > 0)\n    # Compute the ratio as a float\n    ratio = count / len(nums)\n    return ratio\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 5/5",
        "num_ids": 889
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg == None or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([-10, -5, 2, -8]) == -5",
        "num_ids": 610
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for t in test_list:\n        trimmed_tuple = ()\n        for i in range(len(t)):\n            if i < K or i >= len(t) - K:\n                trimmed_tuple += (t[i],)\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1,2), (3,4), (5,6)], 2) == [(1,2), (3,4), (5,6)]",
        "num_ids": 880
    },
    {
        "number": 445,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 947
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Creating an empty dictionary to store the count of each element\n    count_dict = {}\n\n    # Looping through the tuple\n    for elem in tup:\n        # If the element is in the list, count it\n        if elem in lst:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n\n    # Converting the count dictionary into a Counter object and returning it\n    return Counter(count_dict)\n",
        "test": "assert count_Occurrence(('apple', 'banana', 'orange', 'apple', 'banana', 'apple'), ['apple', 'banana']) == {'apple': 3, 'banana': 2}",
        "num_ids": 1092
    },
    {
        "number": 447,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27] # Test case 1",
        "num_ids": 625
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    i = 1\n    while i <= n:\n        perrin_sum += i\n        i += 1\n    return perrin_sum\n",
        "test": "assert cal_sum(0) == 0  # test for n = 0",
        "num_ids": 732
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str:\n        if len(s) == l:\n            result.append(s)\n    return result\n",
        "test": "assert extract_string(['123', '456', '789'], 3) == ['123', '456', '789'] ",
        "num_ids": 650
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' ', '', text1)\n",
        "test": "assert remove_whitespaces(\"   I love  coding!    \") == \"Ilovecoding!\"",
        "num_ids": 496
    },
    {
        "number": 452,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(10000,10000) == 0",
        "num_ids": 535
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i and n // i % 2 == 0:\n                sum += n // i\n    return sum\n",
        "test": "assert sumofFactors(1) == 0 # Check if the function returns 0 for n=1",
        "num_ids": 869
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches",
        "test": "assert text_match_wordz(\"computer\") == True, \"The word 'computer' should match the pattern 'z'.\"",
        "num_ids": 639
    },
    {
        "number": 455,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n    else:\n        return month_days[monthnum2-1] == 31\n",
        "test": "assert check_monthnumb_number(2) == False",
        "num_ids": 953
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_strings = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_strings.append(reversed_string)\n    return reversed_strings\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp'], \"Incorrect output\" ",
        "num_ids": 703
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n    return lst[0:min_length]\n",
        "test": "assert Find_Min([1, 2, 3, 4]) == 1",
        "num_ids": 683
    },
    {
        "number": 458,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(3, 4) == 12 ",
        "num_ids": 448
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    regex = re.compile(r'\\b[A-Z]+\\b')\n    return regex.sub('', str1)",
        "test": "assert remove_uppercase(\"Hello, World!\") == \"Hello, World!\"",
        "num_ids": 567
    },
    {
        "number": 460,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7] ",
        "num_ids": 565
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2         # there are two upper case characters in \"Hello World\" ",
        "num_ids": 536
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "from itertools import combinations\n\ndef combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of elements in a list.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        result.extend([list(x) for x in combinations(lst, i)])\n    return result\n",
        "test": "assert combinations_list([1,2,3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]",
        "num_ids": 1221
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_subarray = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] >= 0:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        else:\n            temp = max_product\n            max_product = max(min_product * arr[i], max_product * arr[i])\n            min_product = min(temp * arr[i], min_product * arr[i])\n        \n        if max_product > max_subarray:\n            max_subarray = max_product\n    \n    return max_subarray\n",
        "test": "assert max_subarray_product([-2,0,-1]) == 0",
        "num_ids": 1388
    },
    {
        "number": 464,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({\"apple\": 2, \"banana\": 2, \"orange\": 2}, 2) == True",
        "num_ids": 688
    },
    {
        "number": 465,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v != \"\" and v != {}}\n",
        "test": "assert drop_empty({\"a\":1, \"b\":2, \"c\":3}) == {\"a\":1, \"b\":2, \"c\":3}",
        "num_ids": 840
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        max_so_far = max(arr[i], max_so_far * arr[i])\n        max_product = max(max_product, max_so_far)\n\n    return max_product",
        "test": "assert max_product([-10,-10,-10,10]) == 100",
        "num_ids": 1095
    },
    {
        "number": 470,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] + test_tup[i+1],)\n    return result\n",
        "test": "assert add_pairwise((1,2,3,4,5)) == (3, 5, 7, 9), \"Incorrect output for add_pairwise((1,2,3,4,5))\"",
        "num_ids": 830
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([2, 3, 4], 5) == 4  # Test case 2",
        "num_ids": 623
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    \n    # check if the list contains more than one element\n    if len(l) <= 1:\n        return True\n    \n    # loop through the list\n    for i in range(len(l)-1):\n        # check if the difference between consecutive numbers is 1\n        if l[i+1] - l[i] != 1:\n            return False\n    \n    return True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 718
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # convert the tuples to sets to find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the set back to a tuple and return it\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3) ",
        "num_ids": 738
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)",
        "test": "assert replace_char(\"hello\", \"l\", \"L\") == \"heLLo\", \"Character replacement failed\" ",
        "num_ids": 632
    },
    {
        "number": 475,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))",
        "test": "assert sort_counter({'a': 3, 'b': 2, 'c': 1}) == {'c': 1, 'b': 2, 'a': 3} # Test for a dictionary with one key-value pair",
        "num_ids": 795
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    if not nums:\n        return 0\n\n    min_val = max_val = nums[0]\n\n    for num in nums[1:]:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return min_val + max_val",
        "test": "assert big_sum([-5, 0, 5]) == 0, \"Error: Incorrect sum of largest and smallest values\"",
        "num_ids": 921
    },
    {
        "number": 477,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello World\") == \"hello world\"",
        "num_ids": 333
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    matches = re.finditer(pattern, str1)\n    for match in matches:\n        str1 = str1.replace(match.group(), '')\n    return str1",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 677
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    num = abs(n)\n    while num >= 10:\n        num //= 10\n    return num\n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 552
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 640
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_numbers**2 - sum_cubes\n",
        "test": "assert difference(1) == 1 - 1 ",
        "num_ids": 835
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,2,4,8,16],5) == 4, \"Incorrect result\"",
        "num_ids": 751
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = ''\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        elif char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char\n    return toggled_string\n",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD' ",
        "num_ids": 610
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Initialize the sum of the differences to zero\n    diff_sum = 0\n\n    # Loop through the digits in the first number\n    for i in range(len(s1)):\n        # If the digit is not in the second number, add the difference to the sum\n        if s1[i] not in s2:\n            diff_sum += abs(int(s1[i]) - int(s2[i-1]))\n\n    # Loop through the digits in the second number\n    for i in range(len(s2)):\n        # If the digit is not in the first number, add the difference to the sum\n        if s2[i] not in s1:\n            diff_sum += abs(int(s2[i]) - int(s1[i-1]))\n\n    # Return the sum of the differences\n    return diff_sum\n",
        "test": "assert digit_distance_nums(123456, 123456) == 0",
        "num_ids": 1622
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "test": "assert max_sub_array_sum([-2, 3, -4, 5, -1], 5) != 10",
        "num_ids": 963
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    sorted_list = sorted(list(union_set))\n    return tuple(sorted_list)\n",
        "test": "assert union_elements(('apple', 'banana', 'cherry'), ('banana', 'cherry', 'date')) == ('apple', 'banana', 'cherry', 'date')",
        "num_ids": 976
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0 # empty list has length 0",
        "num_ids": 814
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "test": "assert extract_values('the \"value\" is here') == ['value']",
        "num_ids": 539
    },
    {
        "number": 564,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4],4) == 6 # there are 6 possible unordered pairs where both elements are unequal. ",
        "num_ids": 696
    },
    {
        "number": 565,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o'] ",
        "num_ids": 439
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 509
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 552
    },
    {
        "number": 568,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 421
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([[\"hello\", \"world\", \"python\"], [\"programming\", \"is\", \"fun\"], [\"let\", \"me\", \"show\", \"you\"]]) == [[\"hello\", \"python\", \"world\"], [\"fun\", \"is\", \"programming\"], [\"let\", \"me\", \"show\", \"you\"]]",
        "num_ids": 871
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    # Remove duplicates from each list in nums\n    nums = [list(set(num)) for num in nums]\n\n    # Find the intersection of all the lists\n    intersection = set.intersection(*[set(num) for num in nums])\n\n    # Remove the intersection from each list and return the results\n    return [list(set(num).difference(intersection)) for num in nums]\n",
        "test": "assert two_unique_nums([1, 1, 2, 2, 3, 3]) == [1, 2, 3]",
        "num_ids": 927
    },
    {
        "number": 573,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3]) == 6, \"Error: Product of unique numbers is incorrect\"",
        "num_ids": 649
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using the formula: 2*pi*r*h + 2*pi*r^2\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n\n    # Return the surface area of the cylinder\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(1, 2) == 12.566370614359172",
        "num_ids": 846
    },
    {
        "number": 576,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [6,7]) == False",
        "num_ids": 781
    },
    {
        "number": 577,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    \n    for i in range(1, n+1):\n        factorial *= i\n        \n    return int(str(factorial)[-1])\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 679
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # First, check if all lists are of the same length\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        # Create an empty flat list to store the interleaved lists\n        flat_list = []\n        # Loop through the lists and interleave them\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list\n    else:\n        # If the lists are not of the same length, raise an error\n        raise ValueError(\"Lists are not of the same length\")\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]  # Test 1: basic interleaving with 3 lists of same length",
        "num_ids": 1307
    },
    {
        "number": 579,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elements.append(elem)\n    for elem in test_tup2:\n        if elem not in test_tup1:\n            dissimilar_elements.append(elem)\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((), ()) == ()  # test case 1",
        "num_ids": 938
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            # if element is a tuple, call the even_fnc on it recursively\n            result.append(even_ele(element, even_fnc))\n        else:\n            # if element is not a tuple, check if it is even using even_fnc\n            if even_fnc(element):\n                result.append(element)\n    return tuple(result)\n",
        "test": "assert even_ele(((1, 2, 3), (4, 5, 6, 7, 8)), lambda x: x%2 == 0) == ((2,), (4, 6, 8)) ",
        "num_ids": 1004
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def surface_Area(b, h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the slant height\n    slant_height = (b * h) / 2\n    \n    # Calculate the surface area using the formula: 2 * (base * height) + (base * slant_height)\n    surface_area = 2 * (b * h) + (b * slant_height)\n    \n    return surface_area",
        "test": "assert surface_Area(5, 6) == 108 ",
        "num_ids": 723
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 388
    },
    {
        "number": 583,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    \n    catalan_num = 1\n    \n    for i in range(2, num+1):\n        catalan_num = (4*i - 1) * catalan_num // i\n    \n    return catalan_num\n",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 663
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n    \n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # find the first match and its position in the text\n    if matches:\n        first_match = matches[0]\n        first_match_pos = text.find(first_match)\n        \n        # return the match and its position as a tuple\n        return (first_match, first_match_pos)\n    else:\n        return None",
        "test": "assert find_adverbs(\"I feel tired.\") == None # \"tired\" is not an adverb ending with ly",
        "num_ids": 995
    },
    {
        "number": 585,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n, items)\n",
        "test": "assert expensive_items([(1, 5), (2, 8), (3, 3), (4, 9), (5, 12)], 2) == [(5, 12), (4, 9)]",
        "num_ids": 1343
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part\n",
        "test": "assert split_Arr([1,2,3,4,5], 3) == [1,2,3,4,5], \"Incorrect output\"",
        "num_ids": 685
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) # check if it returns a tuple ",
        "num_ids": 371
    },
    {
        "number": 588,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums[1:]:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    \n    return max_num - min_num\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17",
        "num_ids": 853
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i ** 0.5 == int(i ** 0.5):\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(16, 25) == [16, 25]",
        "num_ids": 2230
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
        "test": "assert polar_rect(1,0) == (1,0)",
        "num_ids": 692
    },
    {
        "number": 591,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_List(newList):\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1] ",
        "num_ids": 742
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Calculate the binomial coefficient using the formula:\n        C(n, k) = n! / (k! * (n - k)!)\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    res = 1\n    for i in range(1, k + 1):\n        res *= n\n        n -= 1\n        if res // i != 0:\n            res //= i\n    return res\n\ndef consecutive_binomial_Coeff(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    res = 0\n    for i in range(1, n + 1):\n        res += binomial_Coeff(n, i) * binomial_Coeff(n, n - i)\n    return res\n",
        "test": "assert binomial_Coeff(4, 1) == 4  # 4C1 = 4",
        "num_ids": 1039
    },
    {
        "number": 593,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expressions to find and remove leading zeroes\n    pattern = r'(?<=\\.)0+(?=\\d)'\n    ip = re.sub(pattern, '', ip)\n    return ip\n",
        "test": "assert removezero_ip(\"10.11.12.01\") == \"10.11.12.1\"",
        "num_ids": 819
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def diff_even_odd(lst):\n    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if len(even) == 0:\n        return None\n    elif len(odd) == 0:\n        return None\n    else:\n        return even[0] - odd[0]\n",
        "test": "assert diff_even_odd([1, 2, 3, 4]) == 1",
        "num_ids": 944
    },
    {
        "number": 595,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert the strings to lists of integers\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # find the length of the shorter list\n    n = min(len(list1), len(list2))\n\n    # initialize a list to keep track of the swaps\n    swaps = [False] * n\n\n    # iterate over the lists and check if the corresponding elements are equal\n    for i in range(n):\n        if list1[i] != list2[i]:\n            # if not equal, check if the swap has already been made\n            if not swaps[i]:\n                # if not, make the swap and mark the swap as made\n                list1[i], list2[i] = list2[i], list1[i]\n                swaps[i] = True\n\n            else:\n                # if the swap has already been made, move on to the next element\n                continue\n\n        # if the corresponding elements are equal, move on to the next element\n        else:\n            continue\n\n    # count the number of swaps made\n    count = swaps.count(True)\n\n    # return the minimum number of swaps required\n    return count\n",
        "test": "assert min_Swaps(\"1010\",\"1010\") == 0",
        "num_ids": 1840
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size(('hello', 'world') == 19)",
        "num_ids": 512
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = count = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            count += 1\n            if count == k:\n                return max(arr1[i], arr2[j])\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return max(arr1[i], arr2[j])\n            j += 1\n    while i < len(arr1):\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n    while j < len(arr2):\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n",
        "test": "assert find_kth([1, 2, 3], [2, 3, 4], 2) == 2",
        "num_ids": 1439
    },
    {
        "number": 598,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    # convert number to string to count its digits\n    num_str = str(number)\n    num_len = len(num_str)\n\n    # calculate the sum of the cubes of each digit\n    sum_of_cubes = 0\n    for digit in num_str:\n        sum_of_cubes += int(digit)**num_len\n\n    # check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True, \"Should return True for a 3 digit Armstrong number\"",
        "num_ids": 861
    },
    {
        "number": 599,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "test": "assert sum_average(5) == (15, 3) # check if sum_average(5) returns (15, 3) ",
        "num_ids": 541
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 430
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\" # string with repeating char \"l\"",
        "num_ids": 835
    },
    {
        "number": 603,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = set()\n    for i in range(1, n+1):\n        s = sum(map(int, str(i)))\n        if s == i:\n            lucid_numbers.add(i)\n    return list(lucid_numbers)\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 1149
    },
    {
        "number": 604,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back together with spaces\n    return ' '.join(words)\n",
        "test": "assert reverse_words(\"\") == \"\"  # Testing for empty string ",
        "num_ids": 651
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True, \"2 is a prime number\"",
        "num_ids": 570
    },
    {
        "number": 606,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math\n\ndef radian_degree(degree):\n    radians = degree * math.pi / 180\n    return radians\n",
        "test": "assert radian_degree(180) == math.pi",
        "num_ids": 456
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Search for pattern in the text\n    match = re.search(pattern, text)\n    if match:\n        # Get the matching substring and its start and end indices\n        match_str = match.group()\n        start_idx = match.start()\n        end_idx = match.end()\n        return match_str, start_idx, end_idx\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", r'\\b\\w+\\b') == ('hello', 0, 5)",
        "num_ids": 860
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Create a list to store the Bell numbers\n    bell_numbers = [1]\n\n    # Iterate through the range of n\n    for i in range(1, n+1):\n        # Calculate the nth Bell number using the formula\n        bell_number = bell_numbers[i-1] * (n-i+1) // i\n\n        # Append the bell number to the list\n        bell_numbers.append(bell_number)\n\n    # Return the nth Bell number\n    return bell_numbers[n]\n",
        "test": "assert bell_Number(1) == 1, \"bell_Number(1) should be 1\"",
        "num_ids": 1089
    },
    {
        "number": 610,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5] # remove the 2nd element (0-indexed)",
        "num_ids": 831
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 8",
        "num_ids": 842
    },
    {
        "number": 612,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def merge(lst):\n    first_lst = []\n    second_lst = []\n    for sublist in lst:\n        first_lst.append(sublist[0])\n        second_lst.append(sublist[1])\n    return [first_lst, second_lst]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 901
    },
    {
        "number": 614,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cum_sum = []\n    for num in test_list:\n        total += num\n        cum_sum.append(total)\n    return cum_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4]) == [1, 3, 6, 10]",
        "num_ids": 776
    },
    {
        "number": 615,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum_num = sum(num)\n        avg = sum_num/len(num)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2, 5, 8]  # example input and expected output",
        "num_ids": 834
    },
    {
        "number": 616,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n",
        "test": "assert tuple_modulo((1,2,3),(4,5,6)) == (1,2,3)",
        "num_ids": 926
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    current_position = 0\n    while current_position < d:\n        if current_position + steps <= d:\n            current_position += steps\n            jumps += 1\n        else:\n            steps -= 1\n            if steps > 0:\n                current_position += steps\n                jumps += 1\n            else:\n                return -1  # not possible to reach (d, 0)\n    return jumps",
        "test": "assert min_Jumps(2, 2) == 1 # Example case 1",
        "num_ids": 1191
    },
    {
        "number": 618,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3], [2,4,6]) == [0.5, 0.5, 0.5], \"Incorrect division\"",
        "num_ids": 799
    },
    {
        "number": 619,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    num_list = []\n    non_num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            non_num_list.append(i)\n    return ''.join(non_num_list) + ''.join(num_list)\n",
        "test": "assert move_num(\"a1b2c3d4e5\") == \"abcde12345\"",
        "num_ids": 871
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    dp = [0] * n\n    max_len = 0\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n    return max_len",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 2 # [1, 2, 3, 4]",
        "num_ids": 1118
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def get_median(arr1, arr2, n):\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]\n",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3  # test case 2",
        "num_ids": 1395
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4],2) == [1, 4, 9, 16]",
        "num_ids": 785
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_string = string.upper()\n    return uppercase_string",
        "test": "assert is_upper('World') == True",
        "num_ids": 324
    },
    {
        "number": 625,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"Error: List must have at least two elements.\")\n        return\n\n    # Store the first and last element of the list\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    # Replace the first element with the last element\n    newList[0] = last_element\n\n    # Replace the last element with the first element\n    newList[-1] = first_element\n\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] ",
        "num_ids": 808
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the length of the diameter\n    d = 2 * r\n    # calculate the area of the semicircle\n    semicircle_area = math.pi * r ** 2\n    # calculate the area of the largest triangle\n    largest_triangle_area = 0.5 * d * r\n    # calculate the area of the other two triangles\n    other_triangle_area = semicircle_area - largest_triangle_area\n    # calculate the angle between the radius and the diameter\n    alpha = math.acos(r / d)\n    # calculate the area of the other two triangles using Heron's formula\n    other_triangle_area1 = 0.5 * math.sqrt(d ** 2 * r ** 2 - 2 * d * r ** 2 * math.cos(alpha))\n    other_triangle_area2 = 0.5 * math.sqrt(r ** 2 * d ** 2 - 2 * r ** 3 * math.cos(alpha))\n    # calculate the final result\n    result = largest_triangle_area + other_triangle_area1 + other_triangle_area2\n    return result\n",
        "test": "assert triangle_area(2) == 5.656854249492381  # a semicircle with radius 2 has an area of 16 (4 * pi / 2)",
        "num_ids": 1287
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i] != i+1 and array[i] < len(array) and array[array[i]-1] != array[i]:\n            return array[i]\n    \n    return len(array)\n",
        "test": "assert find_First_Missing([1,2,3,4]) == 5",
        "num_ids": 976
    },
    {
        "number": 628,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello%20World\" ",
        "num_ids": 468
    },
    {
        "number": 629,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Split(list):\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n",
        "test": "assert Split([1,2,3,4,5]) == [2, 4] ",
        "num_ids": 624
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define a set of adjacent coordinates\n    adj = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    # Get the current coordinate and its adjacent coordinates\n    x, y = ele\n    # Iterate through the adjacent coordinates and check if they are within the given coordinates\n    for dx, dy in adj:\n        nx, ny = x+dx, y+dy\n        # Check if the adjacent coordinate is within the bounds of the grid\n        if 0 <= nx < len(sub) and 0 <= ny < len(sub[nx]):\n            yield sub[nx][ny]\n",
        "test": "assert adjac((1,2)) == [(2,), (1, 3), (1, 2)]",
        "num_ids": 1180
    },
    {
        "number": 631,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_', ' ')\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 678
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    non_zero_list = [num for num in num_list if num != 0]\n    non_zero_list += [0] * zero_count\n    return non_zero_list\n",
        "test": "assert move_zero([1,2,3,4,5]) == [1,2,3,4,5] # Test case 2",
        "num_ids": 971
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def pair_xor_sum(arr, n):\n    # Initialize sum to 0\n    total = 0\n    \n    # Iterate over all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Add xor of i and j to total\n            total += (arr[i] ^ arr[j])\n    \n    # Return total\n    return total\n",
        "test": "assert pair_xor_Sum([0, 1, 0, 1], 4) == 2, \"Incorrect output\" ",
        "num_ids": 937
    },
    {
        "number": 635,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    \n    return sorted_list\n",
        "test": "assert heap_sort([5, 2, 7, 1, 3, 8, 6, 4]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 805
    },
    {
        "number": 637,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 577
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wind_chill_index)",
        "test": "assert wind_chill(10, -10) == 20 # wind velocity of 10 km/h and temperature of -10 degrees Celsius, expected wind chill of -16 degrees Celsius",
        "num_ids": 1222
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # initialize sum to 0\n    total_length = 0\n    \n    # loop through the names and add their length to total_length if they do not start with a lowercase letter\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    \n    # return the sum of the lengths\n    return total_length\n",
        "test": "assert sample_nam([\"Alice\", \"bob\", \"Charlie\", \"Dave\"]) == 7 # [\"Alice\", \"Charlie\"]",
        "num_ids": 916
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items\n",
        "test": "assert remove_parenthesis(\"(Hello) World\") == \" World\"",
        "num_ids": 615
    },
    {
        "number": 641,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_count = 1\n    count = 1\n    \n    while nonagonal_count < n:\n        count += 1\n        nonagonal_count = (6 * count * count - 1) // 2\n    \n    return count\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 698
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[^z]*z[^z]*\\b')\n    return pattern.search(text) is not None\n",
        "test": "assert text_match_wordz_middle(\"hello world\") == False",
        "num_ids": 693
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Reverse the entire array if k is greater than its length\n    if k >= len(input):\n        input.reverse()\n        return input\n\n    # Reverse the first k elements of the array\n    for i in range(k // 2):\n        temp = input[i]\n        input[i] = input[k - i - 1]\n        input[k - i - 1] = temp\n\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 6) == [5,4,3,2,1] # check if it reverses the whole array when k is greater than the length of the array",
        "num_ids": 976
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty list to store the modified tuple\n    new_tup = []\n    \n    # Loop through the tuple and append each element to the new list\n    for item in test_tup:\n        new_tup.append(item)\n    \n    # Add the dictionary to the new list\n    new_tup.append(test_dict)\n    \n    # Convert the new list to a tuple and return it\n    return tuple(new_tup)\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5}) != (1, 2, 3, {'a': 4, 'b': 6})",
        "num_ids": 1167
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n\n    max_sum = dp[n-1][n-1]\n    avg = max_sum / (n*n)\n    return avg\n",
        "test": "assert maxAverageOfPath([[10,2,3],[4,5,6],[7,8,9]]) == 5.8, \"Incorrect average of path\" ",
        "num_ids": 2465
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty dictionary to store the filtered students\n    filtered_students = {}\n    # Iterate over the students dictionary\n    for student, measurements in students.items():\n        # Check if the student meets the minimum height and weight\n        if measurements[0] > h and measurements[1] > w:\n            # If the student meets the minimum height and weight, add them to the filtered_students dictionary\n            filtered_students[student] = measurements\n    # Return the filtered_students dictionary\n    return filtered_students\n",
        "test": "assert filter_data({\"Alice\": (1.8, 60), \"Bob\": (1.7, 50), \"Charlie\": (1.8, 65), \"David\": (1.75, 55)}, 1.75, 50) == {\"Bob\": (1.7, 50), \"Charlie\": (1.8, 65)} ",
        "num_ids": 1442
    },
    {
        "number": 723,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1,2,3,4,5],[1,2,3,4,5]) == 5",
        "num_ids": 767
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = base ** power\n    num_str = str(num)\n    return sum(int(digit) for digit in num_str)\n",
        "test": "assert power_base_sum(2, 3) == 8, \"power_base_sum(2, 3) should return 8\"",
        "num_ids": 909
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n\ntext1 = \"I am a \\\"student\\\" and I like to \\\"code\\\" and \\\"travel\\\".\"\nprint(extract_quotation(text1))\n",
        "test": "assert extract_quotation('\"This is a test.\"') == 'This is a test.'",
        "num_ids": 576
    },
    {
        "number": 726,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    \n    # initialize an empty list to store the results\n    results = []\n    \n    # loop through the tuple\n    for i in range(len(test_tup) - 1):\n        # multiply the i-th and i+1-th elements and append to the results list\n        results.append(test_tup[i] * test_tup[i+1])\n    \n    # convert the results list to a tuple and return it\n    return tuple(results)\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 1005
    },
    {
        "number": 728,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) != len(lst2):\n        return None\n    else:\n        result = []\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5, 7, 9]",
        "num_ids": 994
    },
    {
        "number": 730,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(k)\n    return result\n",
        "test": "assert consecutive_duplicates([1,1,1,1,2,2,2,3,3,3,3]) == [1,2,3]",
        "num_ids": 1083
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsurface_cone(3, 7) == 88.2304574014326  # radius 3, height 7",
        "num_ids": 780
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace spaces with colons\n    text = re.sub(r'\\s+', ':', text)\n\n    # Replace commas with colons\n    text = re.sub(r'[,]', ':', text)\n\n    # Replace dots with colons\n    text = re.sub(r'[.]', ':', text)\n\n    return text\n",
        "test": "assert replace_specialchar(\"How are you?\") == \"How are you:\"",
        "num_ids": 500
    },
    {
        "number": 733,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2  # test the correctness of find_first_occurrence with sorted array",
        "num_ids": 1385
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize a variable to store the sum of products of all subarrays\n    total_sum = 0\n    # Iterate through all possible subarrays\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of the current subarray\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            # Add the product to the total sum\n            total_sum += prod\n    return total_sum\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0",
        "num_ids": 1117
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Taking the binary representation of the given number\n    binary_num = bin(n)[2:]\n    \n    # Finding the length of the binary representation\n    length = len(binary_num)\n    \n    # Toggling the bits in the middle\n    for i in range(1, length-1):\n        if binary_num[i] == '0':\n            binary_num = binary_num[:i] + '1' + binary_num[i+1:]\n        else:\n            binary_num = binary_num[:i] + '0' + binary_num[i+1:]\n            \n    # Converting the binary number back to decimal format\n    decimal_num = int(binary_num, 2)\n    \n    # Returning the decimal number\n    return decimal_num\n",
        "test": "assert set_middle_bits(0b0000) == 0b0000  # binary 0000 ",
        "num_ids": 1327
    },
    {
        "number": 736,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 4, 6, 7], 5) == 3",
        "num_ids": 587
    },
    {
        "number": 737,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"Apple\") == True, \"check_str('Apple') should return True\"",
        "num_ids": 596
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1.0",
        "num_ids": 539
    },
    {
        "number": 739,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef find_Index(n):\n    count = 0\n    i = 1\n    triangular_number = 1\n    while count < n:\n        triangular_number += i\n        count = len(str(triangular_number))\n        i += 1\n    return i - 1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 667
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d",
        "test": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4}",
        "num_ids": 994
    },
    {
        "number": 741,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a set to get only unique characters\n    unique_chars = set(s)\n    \n    # If there is only one unique character in the set, all characters are same.\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"abc\") == False ",
        "num_ids": 490
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    s = (side * 2) / math.sqrt(3)\n    # calculate the area of the tetrahedron using the formula: (1/2) * (s * (s - a) * (s - b) * (s - c))\n    area = 0.5 * (s * (s - side) * (s - side) * (s - side))\n    return area\n",
        "test": "assert area_tetrahedron(2) == 1/6 * 2**2 # should return 2/6 * 4 if side is 2",
        "num_ids": 1179
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    if m >= n:\n        m = m % n\n    # Reverse the whole list\n    lst = lst[::-1]\n    # Reverse the first m elements\n    lst[:m] = lst[:m][::-1]\n    # Reverse the remaining list elements\n    lst[m:] = lst[m:][::-1]\n    return lst\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 1009
    },
    {
        "number": 744,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False, \"check_none with tuple having all values\"",
        "num_ids": 484
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        digit_list = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digit_list):\n            divisible_numbers.append(num)\n    return divisible_numbers\n",
        "test": "assert divisible_by_digits(1000, 2000) == [1000, 1111, 1234, 1357, 1470, 1583, 1696, 1809, 1922, 2035]  # Example with the given range",
        "num_ids": 1156
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r ** 2 * (a / 360)\n",
        "test": "assert sector_area(3, 180) == None, \"Incorrect sector area calculation\"",
        "num_ids": 658
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Initialize a 3D array to store the lengths of LCS for substrings\n    L = [[[0] * (len(Z) + 1) for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n\n    # Fill the LCS table\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of LCS\n    lcs_length = L[len(X)][len(Y)][len(Z)]\n\n    # Create a list to store the LCS\n    lcs = []\n\n    # Fill the LCS list\n    i = len(X)\n    j = len(Y)\n    k = len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Return the LCS as a string\n    return \"\".join(reversed(lcs))\n",
        "test": "assert lcs_of_three(\"ABCD\", \"EFGH\", \"IJKL\") == \"\"",
        "num_ids": 2569
    },
    {
        "number": 748,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'((?<=[a-z])[A-Z]|(?<=[A-Z])[A-Z][a-z])')\n    return pattern.sub(r' \\1', str1)\n",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\"",
        "num_ids": 527
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "test": "assert sort_numeric_strings([\"10\", \"2\", \"30\", \"4\", \"50\"]) == [\"2\", \"4\", \"10\", \"30\", \"50\"]",
        "num_ids": 907
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1,2)], (3,4)) == [(1,2), (3,4)]",
        "num_ids": 629
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not.\n    '''\n\n    # If this node has no children, return True\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child >= len(arr):\n        return True\n\n    # If either of the children is smaller than the parent, return False\n    if arr[left_child] < arr[i] or arr[right_child] < arr[i]:\n        return False\n\n    # Recursively check the children nodes\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n",
        "test": "assert check_min_heap_helper([], 0) == True",
        "num_ids": 1165
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    if n <= 1:\n        return n\n    else:\n        return (2*jacobsthal_num(n-1) - jacobsthal_num(n-2))\n",
        "test": "assert jacobsthal_num(0) == 0  # The 0th jacobsthal number is 0",
        "num_ids": 1067
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \"\"\"\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Return the first k tuples from the sorted list\n    return sorted_list[:K]\n",
        "test": "assert min_k([(2, 4), (3, 6), (1, 2), (4, 8), (5, 10)], 3) == [(1, 2), (2, 4), (3, 6)] # Test case 1",
        "num_ids": 989
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(i)\n    return common\n",
        "test": "assert extract_index_list([1,2,3], [2,3,4], [3,4,5,6]) == []  # No common element between [1,2,3], [2,3,4], and [3,4,5,6]",
        "num_ids": 933
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    min1 = min2 = float('inf')\n    \n    for num in numbers:\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2 and num != min1:\n            min2 = num\n            \n    return min2\n",
        "test": "assert second_smallest([10, 3, 6, 2, 8]) == 3 ",
        "num_ids": 1116
    },
    {
        "number": 756,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a.*b\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 554
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs(['abc', 'def', 'ghi']) == 0",
        "num_ids": 834
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    sublist_count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            sublists.append(sublist)\n    for sublist in set(sublists):\n        count = sublists.count(sublist)\n        sublist_count[sublist] = count\n    return sublist_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1303
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the string into two parts: integer and fractional\n    parts = num.split('.')\n    if len(parts) != 2:\n        return False\n    \n    # Check the integer part\n    if not parts[0].isdigit():\n        return False\n    \n    # Check the fractional part\n    if not parts[1].isdigit():\n        return False\n    \n    # Check the precision\n    if len(parts[1]) > 2:\n        return False\n    \n    # If all checks passed, the number is considered a decimal with a precision of 2\n    return True\n",
        "test": "assert not is_decimal('10.001')         # test case 2",
        "num_ids": 749
    },
    {
        "number": 760,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 537
    },
    {
        "number": 762,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    \"\"\"\n    months_30 = [4, 6, 9, 11]\n    if monthnum3 in months_30:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(2) == False  # February has 28 or 29 days",
        "num_ids": 757
    },
    {
        "number": 763,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 867
    },
    {
        "number": 764,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"\") == 0, \"number_ctr('') should return 0\"",
        "num_ids": 417
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # Initialize a list to store polite numbers\n    polite_numbers = []\n    \n    # Initialize a variable to keep track of the current number\n    current_number = 1\n    \n    # Keep generating polite numbers until we reach the nth one\n    while len(polite_numbers) < n:\n        \n        # Check if the current number is polite or not\n        is_polite_number = True\n        for i in range(2, int(math.sqrt(current_number)) + 1):\n            if current_number % i == 0:\n                if current_number // i != i:\n                    is_polite_number = False\n                    break\n        \n        # If the current number is polite, add it to the list\n        if is_polite_number:\n            polite_numbers.append(current_number)\n        \n        # Increment the current number\n        current_number += 1\n    \n    # Return the nth polite number\n    return polite_numbers[-1]",
        "test": "assert is_polite(1) == 1",
        "num_ids": 1189
    },
    {
        "number": 766,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 704
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def get_pairs_count(arr, sum):\n    # create a dictionary to store the counts of numbers in the array\n    counts = {}\n    for num in arr:\n        counts[num] = counts.get(num, 0) + 1\n    \n    # count the number of pairs with sum equal to the given sum\n    count = 0\n    for num in arr:\n        complement = sum - num\n        if complement in counts:\n            count += counts[complement]\n            if complement == num: # don't count pairs with the same number\n                count -= 1\n    \n    return count // 2 # divide by 2 because we counted each pair twice\n",
        "test": "assert get_pairs_count([1,2,3,4,5], 5) == 2",
        "num_ids": 917
    },
    {
        "number": 769,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    for item in li1:\n        if item not in li2:\n            li_diff.append(item)\n    return li_diff\n",
        "test": "assert Diff([1,2,3],[4,5,6]) == [1,2,3] # case 1: both lists are empty",
        "num_ids": 764
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # add the fourth power of the number to the sum\n        sum += i**4\n        \n    # return the sum of fourth powers of first n odd natural numbers\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1  # 1^4 = 1",
        "num_ids": 874
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    mapping = {')': '(', ']': '[', '}': '{'}\n\n    for char in exp:\n        if char in mapping:\n            if not stack or stack[-1] != mapping[char]:\n                return False\n            stack.pop()\n        elif char in mapping.values():\n            stack.append(char)\n\n    return len(stack) == 0\n",
        "test": "assert check_expression(\"({[]})\") == True",
        "num_ids": 818
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()  # split the string into words\n    result = []\n    for word in words:\n        if len(word) != K:  # if the word has length K, keep it\n            result.append(word)\n    return ' '.join(result)  # join the words back into a string with spaces between them\n",
        "test": "assert remove_length(\"Python is awesome!\", 6) == \"Python awesome!\"",
        "num_ids": 861
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"hello world\",\"hello\") == [{\"hello\": [0]}]",
        "num_ids": 736
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1,2,3,4,5,6,7]) == False",
        "num_ids": 692
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0 # no characters have vowels as their neighbors in \"world\"",
        "num_ids": 986
    },
    {
        "number": 777,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            non_repeated_sum += num\n    return non_repeated_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15, \"Incorrect sum\"",
        "num_ids": 766
    },
    {
        "number": 778,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 914
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    result = {}\n    # Iterate through the list\n    for item in list1:\n        # Convert each list to a tuple\n        t = tuple(item)\n        # Check if the tuple already exists in the dictionary\n        if t in result:\n            # If the tuple exists, increment its value by 1\n            result[t] += 1\n        else:\n            # If the tuple does not exist, add it to the dictionary with a value of 1\n            result[t] = 1\n    # Return the dictionary\n    return result\n",
        "test": "assert unique_sublists([[1,2],[3,4],[1,2]]) == {(1,2): 2, (3,4): 1} ",
        "num_ids": 1119
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(len(test_list[i])):\n                for l in range(len(test_list[j])):\n                    if sum(test_list[i][k])+sum(test_list[j][l]) == 0:\n                        result.append((test_list[i][k], test_list[j][l]))\n    return result",
        "test": "assert find_combinations([(1,2,3),(4,5),(6,7,8)]) == [(1,4),(2,5),(1,6),(2,6),(3,5),(3,6),(2,7),(1,8),(1,5,6),(2,4,7),(1,6,7),(1,5,8),(2,6,7),(1,7,8),(1,5,6,7),(1,6,5,8),(1,5,7,8),(2,4,6,7),(1,8,5,6),(1,5,7,6),(1,4,7,8)], \"Invalid output\" ",
        "num_ids": 1585
    },
    {
        "number": 781,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef count_divisors(n):\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                divisors += 1\n            else:\n                divisors += 2\n    return divisors\n\n\ndef is_even_count_divisors(n):\n    divisors_count = count_divisors(n)\n    if divisors_count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert count_divisors(1) == 1 ",
        "num_ids": 834
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if j-i+1 % 2 == 1:\n                sum += sum(arr[i:j+1])\n    return sum\n",
        "test": "assert odd_length_sum([1, 2, 3]) == 3, \"Incorrect output for [1, 2, 3]\"",
        "num_ids": 1036
    },
    {
        "number": 783,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if delta == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 1904
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    # initialize variables\n    even_product = 1\n    odd_product = 1\n    count = 0\n    \n    # iterate over the list\n    for i in list1:\n        # check if the number is even\n        if i % 2 == 0:\n            # multiply the even product with the number\n            even_product *= i\n        else:\n            # multiply the odd product with the number\n            odd_product *= i\n        \n        # count the number of even and odd numbers\n        if i % 2 == 0:\n            count += 1\n        else:\n            count += 1\n    \n    # check if the list has an even and odd number\n    if count == len(list1) and count > 1:\n        # return the product of the first even and odd numbers\n        return even_product, odd_product\n    else:\n        # return None if the list doesn't have an even and odd number\n        return None\n",
        "test": "assert mul_even_odd([1, 3, 4, 6]) == 20, \"Error in mul_even_odd for even and odd numbers\"",
        "num_ids": 1071
    },
    {
        "number": 785,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Remove the parentheses and split the string into a list of strings\n    test_list = test_str.strip('()').split(',')\n    \n    # Convert each string in the list to an integer and create a tuple\n    result_tuple = tuple(int(i.strip()) for i in test_list)\n    \n    return result_tuple\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) # should return (1, 2, 3)",
        "num_ids": 794
    },
    {
        "number": 786,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 6) == 3 # should return 3",
        "num_ids": 637
    },
    {
        "number": 787,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") == True",
        "num_ids": 519
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple and append the string to it\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n",
        "test": "assert new_tuple([1, 2, 3], \"a\") == (1, 2, 3, 'a')",
        "num_ids": 748
    },
    {
        "number": 790,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 634
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == ()  # empty tuple should return empty tuple",
        "num_ids": 712
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count\n",
        "test": "assert count_list([[1,2,3], [4,5], [6,7,8,9]]) == 3 ",
        "num_ids": 586
    },
    {
        "number": 793,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1] != x:\n                return mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1  # element not found\n",
        "test": "assert last([1, 2, 3, 4, 5], 5) == 4 # check if it returns the correct last position of 5",
        "num_ids": 1217
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    if pattern.match(text):\n        return True\n    else:\n        return False",
        "test": "assert text_starta_endb(\"ab\") == True",
        "num_ids": 593
    },
    {
        "number": 796,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({\"apple\": 5, \"banana\": 3, \"orange\": 8}) == 16 ",
        "num_ids": 489
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            total += i\n    return total\n",
        "test": "assert sum_odd(5) == 9",
        "num_ids": 586
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "test": "assert _sum([1,2,3]) == 6",
        "num_ids": 522
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def left_rotate(n,d):\n    # assuming number is 32 bit\n    n = bin(n)[2:].zfill(32)\n    d = d % 32\n    rotated_bits = n[d:] + n[:d]\n    rotated_number = int(rotated_bits, 2)\n    return rotated_number\n",
        "test": "assert left_rotate(0, 5) == 0",
        "num_ids": 1021
    },
    {
        "number": 800,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # replace all spaces with empty string\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"  I have a lot of    spaces here.  \") == \"Ihavealotofspaceshere.\" ",
        "num_ids": 438
    },
    {
        "number": 801,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 2, 3) == 0, \"Should be 0\"",
        "num_ids": 556
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    cnt = 0\n    \n    for i in range(n):\n        if arr[i] < arr[i-1]:\n            cnt = cnt + (i-1) + 1\n            break\n            \n    return cnt\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0 # Already sorted array",
        "num_ids": 932
    },
    {
        "number": 803,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n):\n    '''\n    Function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    else:\n        return n == int(n**0.5)**2\n",
        "test": "assert is_perfect_square(1) == True  # 1 is a perfect square",
        "num_ids": 749
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 3, 4]) == True",
        "num_ids": 577
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 875
    },
    {
        "number": 806,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    \n    for c in test_str:\n        if c.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run\n",
        "test": "assert max_run_uppercase(\"ABBCcA\") == 1  # expected output: 1",
        "num_ids": 800
    },
    {
        "number": 807,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3]) == 1, \"First odd number should be 1\"",
        "num_ids": 506
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "test": "assert check_K((), 1) == False",
        "num_ids": 544
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1,2,3),(3,2,4)) == False",
        "num_ids": 780
    }
]