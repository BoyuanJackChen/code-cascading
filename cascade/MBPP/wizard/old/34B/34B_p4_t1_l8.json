[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n    dp[0][0] = cost[0][0] \n    for i in range(1, m+1): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n    for j in range(1, n+1): \n        dp[0][j] = dp[0][j-1] + cost[0][j] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    return dp[m][n] ",
        "generated_testcode": "assert min_cost(\n    [\n        [1, 2, 3],\n        [4, 8, 2],\n        [1, 5, 3]\n    ], 2, 2) == 6\n\n# The output should be 6. ",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return tuple(result)\n\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(similar_elements(test_tup1, test_tup2)) # Output: (2, 4, 6) ",
        "generated_testcode": "assert similar_elements(('apple', 'banana', 'orange', 'pear', 'grape'), ('banana', 'orange', 'grape', 'kiwi')) == ('banana', 'orange', 'grape')\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer n as input and returns True if it is not a prime number, else it returns False.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n#test the function\nprint(is_not_prime(15)) # True\nprint(is_not_prime(17)) # False ",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # building max heap\n    for i in range(n//2,-1,-1,-1):\n        heapify(nums,n,i)\n    # extracting largest element\n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,i,0)\n    # printing largest integers\n    for i in range(n):\n        print(nums[0],end=\" \")\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,i,0)\n    print()\n# heapify function to maintain heap property\ndef heapify(nums,n,i):\n    largest = i\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and nums[l] > nums[largest]:\n        largest = l\n    if r < n and nums[r] > nums[largest]:\n        largest = r\n    if largest != i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        heapify(nums,n,largest)\n# testing the function\nnums = [12,23,11,17,15,10,20,30,18,16,19]\nn = len(nums)\n",
        "generated_testcode": "assert heap_queue_largest(nums=[4, 10, 8, 2, 5, 1, 6, 3, 9], n=3) == [10, 9, 8]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 3: \n        return 0\n    if n == 3: \n        return 1\n    dp = [0] * (n+1)\n    dp[3] = 1\n    for i in range(4, n+1): \n        dp[i] = dp[i-1] + sum(dp[:i-3]) + 1\n    return dp[n] ",
        "generated_testcode": "assert count_ways(0) == 0\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if (x == 0): \n        return False\n    return (x & (x - 1)) == 0\ndef differ_By_One_Bit(n, m):\n    diff = n ^ m\n    return is_Power_Of_Two(diff)\n# testing the function with example cases\nprint(differ_By_One_Bit(10, 12)) # True\nprint(differ_By_One_Bit(14, 11)) # True\nprint(differ_By_One_Bit(12, 23)) # False\nprint(differ_By_One_Bit(56, 58)) # True\nprint(differ_By_One_Bit(23, 25)) # True\nprint(differ_By_One_Bit(34, 35)) # False ",
        "generated_testcode": "assert is_Power_Of_Two (8) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r\"\\b\\w{4,}\\b\")\n    result = re.findall(pattern, text)\n    return result\n\n# Test the function with a sample string\ntext = \"This is a sample string to test the function find_char_long().\"\nprint(find_char_long(text) ",
        "generated_testcode": "assert find_char_long(text) == ['Python', 'Programming', 'Pandas', 'DataFrame', 'Series', 'Numpy', 'Scikit-learn', 'Algorithms']\n\n\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    squares = map(lambda x: x ** 2, nums)\n    return squares\n\n# Test the function with sample input\nprint(list(square_nums([1, 2, 3, 4, 5])) #[1, 4, 9, 16, 25]\nprint(list(square_nums([-2, 0, 3, -4])) #[4, 0, 16] ",
        "generated_testcode": "assert square_nums(list(range(1, 6)) == [1, 4, 9, 16, 25, 36, 49]\n\n\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(str) \n    str += str \n    for i in range(n): \n        if (str[i:i+n] == str[n:2*n]): \n            return i \n    return -1\n# Test the function\nif __name__ == \"__main__\":\n    str = \"geeks\"\n    print(\"Index of minimum rotation is:\", find_Rotations(str)) ",
        "generated_testcode": "assert find_Rotations(str) == 0 # Test case 1\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.sort()\n    return list1[:n]\n\n# test the function with an example\nnums = [10, 2, 3, 5, 1, 7, 9, 4, 4]\nn = 3\nprint(small_nnum(nums, n)) ",
        "generated_testcode": "assert small_nnum(list1,n) == expected_output\n\n# Write a function to get the n largest items from a dataset.\ndef large_nnum(list1,n):\n    pass\n\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if s.startswith(ch): \n        s = s[1:]\n    if s.endswith(ch): \n        s = s[:-1]\n    return s \n    \ns = input(\"Enter a string: \")\nch = input(\"Enter character to be removed from first and last: \")\n\nprint(remove_Occ(s,ch))\n\n\n#Output\n#Enter a string: hellohello world!\n#Enter character to be removed from first and last: e\n#hllo world!\n#Output: \n#Enter a string: !hello world!\n#Enter character to be removed from first and last: !\n#hello world\n#Output: \n#Enter a string: hello world!!!\n#Enter character to be removed from first and last: !\n#hello world\n#Output: \n#Enter a string: !hello world!\n#Enter character to be removed from first and last: !\n#hello world! ",
        "generated_testcode": "assert remove_Occ(s,ch) == \"hello world\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given a matrix, sort it by the sum of its rows.\n    \"\"\"\n    if not M or not M[0]:\n        return M\n    n = len(M)\n    m = len(M[0])\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if sum(M[i]) > sum(M[j]):\n                    M[i], M[j] = M[j], M[i]\n    return M\n\n# Test cases\nprint(sort_matrix([[3, 2, 1], [5, 8, 7], [2, 3, 9], [1, 4, 6]]))\n# Output: [[2, 3, 9], [1, 4, 6], [3, 2, 1], [5, 8, 7]] ",
        "generated_testcode": "assert sort_matrix(\n    [\n        [3, 2, 1],\n        [6, 5, 4],\n        [9, 8, 7]\n    ]) == [\n        [9, 8, 7],\n        [6, 5, 4],\n        [3, 2, 1]\n    ], \"Example 1\"\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return sorted(word_dict.items(), key=lambda x: x[1], reverse=True)[:10]\n\n\n# test the function\nwords = ['apple', 'banana', 'orange', 'apple', 'apple', 'orange', 'banana', 'apple', 'grape', 'orange', 'orange', 'apple', 'apple', 'grape', 'grape', 'grape', 'grape', 'apple', 'banana', 'orange', 'orange']\nprint(count_common(words)) # should print [('apple', 4), ('orange', 4), ('grape', 3), ('banana', 2)] ",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 2}\n\n\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    volume = (1/2) * l * b * h\n    return volume\n\nl = 5\nb = 4\nh = 3\nprint(\"The volume of the triangular prism is:\", find_Volume(l,b,h)) \n\n\n# Output: The volume of the triangular prism is: 6.0\n\n\n# Explanation:\n# The formula for finding the volume of a triangular prism is 1/2 * base * height * length. So, passing the values of length, base and height to the function, we can find the volume of the triangular prism. ",
        "generated_testcode": "assert find_Volume(2,3,4) == 12\n\n# Test case 1:\n# Input: \n#   l = 2, b = 3, h = 4\n# Output:\n#   12.0\n\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    temp = \"\"\n    for i in text:\n        if i.islower() and temp:\n            res.append(temp)\n            temp = \"\"\n        temp += i\n    res.append(temp)\n    return res\n\nprint(split_lowerstring(\"helloWorld\")) # [\"hello\", \"World\"]\nprint(split_lowerstring(\"helloWorldgoodbye\")) # [\"hello\", \"World\", \"goodbye\"]\nprint(split_lowerstring(\"hello\")) # [\"hello\"]\nprint(split_lowerstring(\"World\")) # [\"World\"]\nprint(split_lowerstring(\"heLLoWorLD\")) # [\"heLLoWorLD\"]\nprint(split_lowerstring(\"\")) # [] ",
        "generated_testcode": "assert split_lowerstring(text) == expected_output\n\n# Example:\n# text = \"HelloWorld\"\n# expected_output = [\"Hello\", \"World\"]\n# ",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # use regular expressions to match lowercase letters joined with underscore\n    import re\n    pattern = re.compile(r'\\b[a-z]+_[a-z]+\\b')\n    result = pattern.findall(text)\n    return result\n\n# test the function\nprint(text_lowercase_underscore(\"The quick_brown_fox jumps over the lazy_dog.\")) # ['quick_brown_fox', 'lazy_dog']\nprint(text_lowercase_underscore(\"The quick_brown fox_jumps over the lazy_dog.\")) # ['quick_brown', 'fox_jumps']\nprint(text_lowercase_underscore(\"The quick brown_fox jumps over the lazy dog.\")) # []\nprint(text_lowercase_underscore(\"The quick_brown fox jumps over the_lazy dog.\")) # ['lazy_dog'] ",
        "generated_testcode": "assert text_lowercase_underscore([\"a_b_c\", \"d_E_f\", \"g_H_i\", \"J_k_l\", \"m_n_o\"] == [\"a_b_c\", \"J_k_l\"]\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return a*4\n\n#Write a function to find the area of a square\ndef square_area(a):\n    return a**2\n\n#Write a function to find the side of a square from its perimeter\ndef square_side(p):\n    return p/4\n\n#Write a function to find the side of a square from its area\ndef square_side_area(a):\n    return a**0.5\n\n#Write a function to find the diagonal of a square\ndef square_diagonal(a):\n    return (a**0.5)*2\n\n#Write a function to find the area of a rectangle\ndef rectangle_area(l,b):\n    return l*b\n\n#Write a function to find the perimeter of a rectangle\ndef rectangle_perimeter(l,b):\n    return 2*(l+b)\n\n#Write a function to find the length of a rectangle from its perimeter and one side\ndef rectangle_length(p,s):\n    return (p-s)/2\n\n#Write a function to find the width of a rectangle from its perimeter and one side\ndef rectangle_width(p,s):\n    return p/2-s\n\n#Write a function to find the perimeter of a rectangle from its length and width\ndef rectangle_perimeter_lw(l,b):\n    return 2*(l+b)\n\n#Write a function to find the area of a trapezium\ndef trapezium_area(a,b,h):\n    return 0.",
        "generated_testcode": "assert square_perimeter(5) == 20\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    pass\n\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(string)\n\ndef remove_chars(string1, string2):\n    list1 = str_to_list(string1)\n    list2 = str_to_list(string2)\n    for char in list2:\n        if char in list1:\n            list1.remove(char)\n    return \"\".join(list1)\n\nstring1 = \"hello\"\nstring2 = \"le\"\nprint(remove_chars(string1, string2)) # \"ho\"\n\n\n# alternate solution:\ndef remove_chars(string1, string2):\n    for char in string2:\n        string1 = string1.replace(char, \"\")\n    return string1\nstring1 = \"hello\"\nstring2 = \"le\"\nprint(remove_chars(string1, string2)) # \"ho\" ",
        "generated_testcode": "assert str_to_list(string1, string2) == expected_output\n\n# Test case 1\nstring1 = \"hello\"\nstring2 = \"le\"\nexpected_output = \"ho\"\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # convert array to set and compare lengths\n    if len(arraynums) != len(set(arraynums)):\n        return True\n    else:\n        return False\n\n# Test cases\narraynums1 = [1,2,3,4,5,6,7]\narraynums2 = [1,2,3,4,5,6,6]\narraynums3 = [1,2,2,3,4,5]\n\nprint(test_duplicate(arraynums1)) # False\nprint(test_duplicate(arraynums2)) # True\nprint(test_duplicate(arraynums3)) # True ",
        "generated_testcode": "assert test_duplicate(arraynums=[1,2,3,4,5,6,7]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0:\n        return True\n    if x < 0:\n        return False\n    while x > 10:\n        y = sum(int(i)**2 for i in str(x))\n        x = y\n    return x == 1 or x == 4\n\n# testing \nprint(is_woodall(7)) # True\nprint(is_woodall(8)) # True\nprint(is_woodall(14)) # True\nprint(is_woodall(15)) # True\nprint(is_woodall(20)) # True\nprint(is_woodall(21)) # True\nprint(is_woodall(22)) # False\nprint(is_woodall(30)) # True\nprint(is_woodall(31)) # True\nprint(is_woodall(45)) # True\nprint(is_woodall(46)) # False\nprint(is_woodall(50)) # False\nprint(is_woodall(65)) # False\nprint(is_woodall(77)) # False\nprint(is_woodall(89)) # True\nprint(is_woodall(92)) # False\nprint(is_woodall(100)) # True ",
        "generated_testcode": "assert is_woodall(1) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    lst = []   # initialize an empty list to store the multiples\n    for i in range(1, m+1): \n        lst.append(n*i)   # append each multiple of n to the list\n    return lst   # return the list\n\n# test the function\nprint(multiples_of_num(10, 3))  # Output: [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45] ",
        "generated_testcode": "assert multiples_of_num(5, 10) == [10, 20, 30, 40, 50, 60]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not nums:\n        return -1\n\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return num\n        else:\n            num_dict[num] = True\n    return -1\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 5, 2, 6, 7, 3]))  # Output: 2\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7]))   # Output: -1\nprint(find_first_duplicate([1, 1, 2, 3, 4, 5, 6, 7]))   # Output: 1 ",
        "generated_testcode": "assert find_first_duplicate(nums=[1, 2, 3, 4, 5, 6, 2, 1, 7]) == 2\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(len(list1)): \n        sum = 0\n        for j in range(len(list1[i]): \n            sum += list1[i][j] \n        if sum > max_sum: \n            max_sum = sum\n    return max_sum ",
        "generated_testcode": "assert maximum_Sum(list1) == 100\n\n# The list1 is defined as follows:\nlist1 = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]]\n# The maximum sum of elements in the list of lists is 100, which is the sum of the last sublist [14, 15, 16, 17]. ",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    decimal = 0 \n    for digit in binary: \n        decimal = decimal*2 + int(digit)\n    return decimal \n\n#Test the function with an example \nbinary = \"10101010\"\nprint(binary_to_decimal(binary)) # Output: 42 ",
        "generated_testcode": "assert binary_to_decimal(10101010) == 42\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort() \n    product = 1\n    for i in range(0, n, 2): \n        if i == 0: \n            product *= arr[i] \n        elif i == n-1: \n            product *= arr[i] \n        elif arr[i] == arr[i-1]: \n            continue\n        elif arr[i] == arr[i+1]: \n            continue\n        else: \n            product *= arr[i] \n    return product\n\n#example \n# Testing the code\narr = [1, 2, 3, 4, 4, 5, 5, 6]\nn = len(arr) \nprint(find_Product(arr, n)) ",
        "generated_testcode": "assert find_Product(arr=[1,2,3,4,5,6,7,8],n=5) == 280\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function will take in two arguments:\n    1. test_list: a list of tuples\n    2. K: an integer\n    It will return True if all tuples in the list have K elements, and False otherwise.\n    \"\"\"\n    for tup in test_list:\n        if len(tup) != K:\n            return False\n    return True\n\n# Test cases\nprint(check_k_elements([(1, 2, 3), (4, 5, 6, 7), (8, 9, 10), (11, 12, 13)], 3)) # Should return True\nprint(check_k_elements([(1, 2, 3), (4, 5, 6, 7), (8, 9, 10), (11, 12)], 3)) # Should return False\nprint(check_k_elements([(1, 2), (3, 4, 5), (6, 7, 8, 9), (10, 11, 12), (13, 14, 15)], 3)) # Should return False\nprint(check_k_elements([(1, 2), (3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)], 2)) # Should return False ",
        "generated_testcode": "assert check_k_elements(('abc', 2) == False)\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = [] \n    for string in list: \n        if string.isdigit(): \n            new_list.append(string) \n    return new_list ",
        "generated_testcode": "assert remove([\"hello\", \"world\", \"123\", \"python\", \"12345\", \"123abc\", \"abc456\"]) == [\"hello\", \"world\", \"\", \"python\", \"\", \"abc\"]\n\n\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if k<0 or k>n: \n        return 0\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\nn = 4\nk = 2\nprint(\"Binomial Coefficient is \",binomial_Coeff(n,k)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(0,arr_size):  \n        count = 1\n        for j in range(0, arr_size):  \n            if(i != j and arr[i] == arr[j]): \n                count += 1\n        if (count % 2 != 0): \n            return arr[i]  \n    return -1\n   \n# Driver code to test the above function \narr = [1, 2, 3, 4, 2, 5, 3, 6, 4, 7, 5, 8, 6, 9, 7, 9]  \narr_size = len(arr)  \nresult = get_Odd_Occurrence(arr, arr_size) \nif result != -1: \n    print(\"The element with odd occurrence is:\", result) \nelse: \n    print(\"There is no element with odd occurrence\") ",
        "generated_testcode": "assert get_Odd_Occurrence(arr=[1,2,3,2,3,4,5,4,5,4],arr_size=6) == 1 # Test case 1\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    n = len(s) \n    for i in range(n): \n        for j in range(i + 1, n): \n            if s[i] == s[j]: \n                count += 1\n    return count\ns = input(\"Enter a string: \")\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(s) == 5 # Testing for the string \"abba\"\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not nums or k == 0:\n        return []\n    from collections import Counter\n    from heapq import heappush, heappop\n    count = Counter(nums)\n    heap = []\n    for key, value in count.items():\n        heappush(heap, (-value, key))\n    res = []\n    for i in range(k):\n        if not heap:\n            break\n        res.append(heappop(heap)[1])\n    return res\n\n# Time: O(nlogk) and space O(n)\n\n# Test\nnums = [1,1,1,2,2,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5,6,6,6,6,6,6,7,7,7,7,8,8,8]\nk = 3\nprint(func(nums, k)) # [4, 5, 6] ",
        "generated_testcode": "assert func(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    maxPrime = -1\n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1\n  \n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n              \n    if n > 2: \n        maxPrime = n \n    return int(maxPrime) ",
        "generated_testcode": "assert max_Prime_Factors (100) == 5\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while (N > 0): \n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary\n  \n# decimal number to be converted \ndec = 23\n# calling the function\nbinary = decimal_To_Binary(dec)\nprint(\"Binary representation of\", dec, \"is\", binary) ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while i < N-1:\n        if ar[i] != i:\n            return i\n        i += 1\n    return N\n\n#test the function\nar = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,15]\nN = 14\nprint(find_missing(ar,N)) ",
        "generated_testcode": "assert find_missing(ar,N) == 4\n# Test case 1:\nar = [1,2,3,5,6,7,8,9,10]\nN = 6\nprint(find_missing(ar,N)) # Output: 4\n\n\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    i = 1\n    while True:\n        for j in range(1, n + 1):\n            count += i * n\n            if count >= n:\n                return count\n            i += 1\n\n\n# Test the function with some examples\nprint(find_rect_num(1))  # Output: 1\nprint(find_rect_num(2))  # Output: 4\nprint(find_rect_num(3))  # Output: 9\nprint(find_rect_num(10)) # Output: 81\nprint(find_rect_num(16)) # Output: 204\nprint(find_rect_num(20)) # Output: 289\nprint(find_rect_num(50)) # Output: 11875\nprint(find_rect_num(100)) # Output: 64000 ",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if q == 0:\n        return -1\n    else :\n        quotient = p//q\n        remainder = p%q\n        if N <= len(str(quotient)):\n            return int(str(quotient)[N-1])\n        else:\n            N = N - len(str(quotient))\n            while N > 0:\n                N -= 1\n                p,q = q,remainder\n                remainder = p%q\n                q = p//q\n            return int(str(remainder)[-1])\n\n# example\nprint(find_Nth_Digit(43,76,3)) # output: 3 ",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ints = []\n    strings = []\n    for i in mixed_list:\n        if isinstance(i, int):\n            ints.append(i)\n        else:\n            strings.append(i)\n    ints.sort()\n    strings.sort()\n    return ints + strings\n\n# Test the function with a mixed list\nmixed_list = [3, \"apple\", 1, \"banana\", \"1\", \"2\", \"car\", 4, \"orange\", 2, 5]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list) ",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 3, \"banana\", 1, \"orange\", 5, \"grape\", 2, \"kiwi\", 4]) == [1, 2, 3, 4, 5, \"apple\", \"banana\", \"grape\", \"kiwi\"]\n\n# Test case 1: Test the function with a mixed list of integers and strings.\n# Expected output: [1, 2, 3, 4, 5, \"apple\", \"banana\", \"grape\", \"kiwi\"]\n\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_list=[]\n    odd_list=[]\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list,odd_list\n#test the function\nlist1=[1,2,3,4,5,6,7,8,9,10]\neven,odd=div_even_odd(list1)\nprint(\"Even numbers in the list are: \",even)\nprint(\"Odd numbers in the list are: \",odd) ",
        "generated_testcode": "assert div_even_odd(list1) == (2, 3)\n\n# The output should be (2, 3) because 2 is the first even number and 3 is the first odd number in the list. ",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for char in S:\n        freq[char] = freq.get(char, 0) + 1\n    odd_count = 0\n    for f in freq.values():\n        if f % 2 != 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    return True\n\n# Test Cases\nprint(rearange_string(\"aabbc\")) # True\nprint(rearange_string(\"aabbcc\")) # True\nprint(rearange_string(\"aabbccc\")) # False ",
        "generated_testcode": "assert rearange_string(S=\"aabbc\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    from collections import Counter\n    c = Counter(nums)\n    return [k for k, v in c.items() if v > 1]\n\n\n\n# Test the function with sample inputs\nnums1 = [1, 2, 3, 3, 4, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8]\nprint(freq_element(nums1) # Output: [6, 7, 8]\n\n\nnums2 = [1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10]\nprint(freq_element(nums2) # Output: [9, 10] ",
        "generated_testcode": "assert freq_element(nums=[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [2, 3, 4, 5]]) == {1: 1, 5: 2, 6: 1}\n\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n#test the function with a sample input\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_evennumbers(nums)\nprint(result) # Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert filter_evennumbers(list(range(10)) == [0, 2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n): \n        sum += arr.count(arr[i]) * arr[i] \n    return sum \nn = int(input(\"Enter the size of the array: \"))\narr = []\nprint(\"Enter the elements of the array: \")\nfor i in range(n):\n    element = int(input())\n    arr.append(element)\nprint(\"Sum of the repeated elements in the array: \", find_Sum(arr,n)) ",
        "generated_testcode": "assert find_Sum(arr,n) == 10 # if arr = [1,2,3,4,2,5,6,3] and n = 6\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n    return pattern.match(text)\n\n# Example usage:\nprint(text_match(\"a_b_c_d\")) # True\nprint(text_match(\"_a_b_c\")) # False\nprint(text_match(\"a_B_c\")) # False\nprint(text_match(\"A_b_c\")) # False\nprint(text_match(\"a_b_c_\")) # False\nprint(text_match(\"a__c\")) # False ",
        "generated_testcode": "assert text_match([\"_a_b_c_d_\", \"a_bc_d\", \"ABC_def\", \"hello_world\", \"a_b_c_d_e\"]), [\"_a_b_c_d_\"]\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"^\\b[A-Z][a-z]{2,}\"\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0)\n    else:\n        return None\n    \n# Test cases\nprint(text_match_string(\"The quick brown fox jumps over the lazy dog.\")) # should return \"The\"\nprint(text_match_string(\"The quick brown fox jumps over the lazy dog.\")) # should return \"The\"\nprint(text_match_string(\" She is a smart girl.\")) # should return None\nprint(text_match_string(\" Hello world!\")) # should return None\nprint(text_match_string(\"The quick brown fox jumps over the lazy dog.\")) # should return \"The\"\nprint(text_match_string(\"The quick brown fox jumps over the lazy dog.\")) # should return \"The\"\nprint(text_match_string(\"The quick brown fox jumps over the lazy dog.\")) # should return \"The\" ",
        "generated_testcode": "assert text_match_string(\u201cHello world\u201d) == \u201cHello\u201d\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0: \n        return x \n    else: \n        return find_gcd(y, x % y) \n  \ndef gcd_of_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n  \n# example usage: \narr = [2, 4, 6, 8, 16] \nprint(gcd_of_array(arr)) # Output: 2 ",
        "generated_testcode": "assert find_gcd(12, 8) == 4\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n\n#test the function with sample data\nprint(test_distinct([1, 2, 3, 4, 5, 6]))  # True\nprint(test_distinct([1, 2, 3, 4, 4]))  # False\nprint(test_distinct([1, 2, 3, 4, 5, 1]))  # False ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5, 6, 7]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    def find_last_digit(n):\n        if n % 10 == 0:\n            return 0\n        elif n % 4 == 0:\n            return 4\n        elif n % 2 == 0:\n            return 2\n        else:\n            return n % 10\n    def find_lcm(a, b):\n        if a == 0 or b == 0:\n            return 0\n        else:\n            return abs(a*b) // gcd(a,b)\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n    def compute(n):\n        if n <= 0:\n            return 1\n        else:\n            return n * compute(n-1)\n    if A == 0 or B == 0:\n        return 0\n    return find_last_digit(compute(B) % (find_lcm(find_last_digit(A),10)) % 10)\n# Test the function\nprint(compute_Last_Digit(2, 3)) # Output: 6\nprint(compute_Last_Digit(5, 12)) # Output: 2\nprint(compute_Last_Digit(1, 10)) # Output: 1\nprint(compute_Last_Digit(1, 15)) # Output: 5\nprint(compute_Last_Digit(10, 20)) #",
        "generated_testcode": "assert compute_Last_Digit(5, 10) == 2\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1:\n        return n | 1\n    else:\n        return n\n\n#testing the function with an example\nn = 5\nprint(odd_bit_set_number(n)) \n#output: 5 \n\nn = 6\nprint(odd_bit_set_number(n))\n#output: 7 \nn = 8\nprint(odd_bit_set_number(n))\n#output: 9 \nn = 10\nprint(odd_bit_set_number(n)) \n#output: 11 ",
        "generated_testcode": "assert odd_bit_set_number(0) == 0\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    extracted = []\n    for i in range(len(nums)):\n        extracted.append(nums[i][N])\n    return extracted\n\n\n# Test case\nnums = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]]\nprint(specified_element(nums, 1)) # Output: [2, 7, 11, 15] ",
        "generated_testcode": "assert specified_element(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 0) == [1, 6, 10, 14]\n\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return min(input_list,key=lambda x: len(x))\n\n#example usage\ninput_list = ['apple','banana','orange','grapes','kiwi']\nprint(min_length_list(input_list)) #output: 'kiwi' ",
        "generated_testcode": "assert min_length_list([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"grape\"]) == \"apple\"\n\n\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x==y and y==z:\n        print(\"This is an equilateral triangle\")\n    else:\n        print(\"This is not an equilateral triangle\")\n        \n#Example:\n#Input:\n#check_equilateral(4,5,4)\n#Output:\n#This is not an equilateral triangle\n\n#Input:\n#check_equilateral(6,6,6)\n#Output:\n#This is an equilateral triangle ",
        "generated_testcode": "assert check_equilateral(3, 3, 3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return b*h\n\n# Test the function with some sample test cases\nprint(parallelogram_area(10,20) == 200) # Should print True\nprint(parallelogram_area(5,15) == 75) # Should print True\nprint(parallelogram_area(3,4) == 12) # Should print True ",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n\n# Write a function to calculate the area of a triangle given its base and height.\ndef triangle_area(b,h):\n    pass\n\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check_Equality('abba')) # True\nprint(check_Equality('hello')) # False\nprint(check_Equality('abcd')) # False\nprint(check_Equality('xyyz')) # True ",
        "generated_testcode": "assert check_Equality(\u201cabc\u201d) == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in my_list:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Create a result list and iterate through the count_dict, adding each element to the result list as many times as it appears in the count_dict\n    result = []\n    for key in sorted(count_dict.keys()):\n        for i in range(count_dict[key]):\n            result.append(key)\n    return result\n\n# Test the function with an example list\nmy_list = [4, 2, 1, 6, 5, 3, 2, 4, 1, 6, 8, 9, 3, 5, 10, 2, 6, 1]\nprint(counting_sort(my_list)) ",
        "generated_testcode": "assert counting_sort([\"apple\", \"banana\", \"orange\", \"pear\", \"grape\", \"apple\"]) == [\"apple\", \"apple\", \"banana\", \"grape\", \"orange\", \"pear\"]\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return a * r**(n-1)\na=float(input(\"Enter the first term: \"))\nr=float(input(\"Enter the common ratio: \"))\nn=int(input(\"Enter the value of n: \"))\nprint(\"The term at position\",n,\"is: \",tn_gp(a,n,r))\n\n\n#or\n\na=float(input(\"Enter the first term: \"))\nr=float(input(\"Enter the common ratio: \"))\nn=int(input(\"Enter the value of n: \"))\nprint(\"The term at position\",n,\"is: \",a*(r**(n-1))\n\n\n#example:\n#if a=2, r=2, n=5 then output will be 32.0\n#since a=2, r=2, n=5 then t5= 2 * (2)^4 = 32.0 ",
        "generated_testcode": "assert tn_gp(1, 5, 2) == 32\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    reverse = 0\n    while num > 0:\n        rem = num % 10\n        reverse = reverse * 10 + rem\n        num = num // 10\n    return reverse\n\ndef is_one_less_than_twice_reverse(num):\n    if num-rev(num)==1:\n        return True\n    else:\n        return False\n\n#Test the function\nprint(is_one_less_than_twice_reverse(123)) #True\nprint(is_one_less_than_twice_reverse(765)) #False\nprint(is_one_less_than_twice_reverse(888)) #True\nprint(is_one_less_than_twice_reverse(1234)) #False\nprint(is_one_less_than_twice_reverse(1221)) #True ",
        "generated_testcode": "assert rev(123) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initializing an array to store the all possible permutations of the digits \n    permutations = [] \n    \n    # Generating all possible permutations of the digits \n    for i in range(n): \n        for j in range(n): \n            for k in range(n): \n                for l in range(n): \n                    for m in range(n): \n                        permutations.append(arr[i]+arr[j]+arr[k]+arr[l]) \n    \n    # Sorting the array in descending order \n    permutations.sort(reverse = True) \n    \n    # Returning the first element of the sorted array \n    return permutations[0] \n\n# Testing the function with an example \narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(find_Max_Num(arr, n)) # Output: 54321 \n\narr = [5, 2, 8, 4, 3, 1] \nn = len(arr) \nprint(find_Max_Num(arr, n)) # Output: 85431 ",
        "generated_testcode": "assert find_Max_Num(arr,n) == expected_output\n\n# Example:\narr = [1, 4, 3, 5, 8, 7]\nn = len(arr)\nprint(find_Max_Num(arr, n)) # Output: 87541 ",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if (x < 0 and y > 0) or (x > 0 and y < 0): \n        return True\n    else: \n        return False\n# Test the function with examples \nprint(opposite_Signs(-5,6)) # True \nprint(opposite_Signs(3,-6)) # True \nprint(opposite_Signs(2,-2)) # False \nprint(opposite_Signs(-4,-4)) # False \nprint(opposite_Signs(0,-2)) # False ",
        "generated_testcode": "assert opposite_Signs(5, -6) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    '''\n    Returns True if n is an octagonal number, else False. \n    Octagonal numbers are of the form 1, 7, 14, 26, 36, 50, 71, 91, ... \n    (1, 7, 14, 21, 30, 37, 45, 56, 667, ...)\n    '''\n    if (((3 + np.sqrt(1 + 12 * (n * 2))**2) / 2) % 6 == 0): \n        return True\n    else: \n        return False\n\ndef find_nth_octagonal(n): \n    '''\n    Returns the nth octagonal number. \n    An octagonal number is a number of the form 1, 7, 14, 26, 36, 50, 71, 91, ... \n    (1, 7, 14, 21, 30, 37, 45, 56, 67, ...)\n    '''\n    octagonal_nums = [1]\n    i = 1\n    while len(octagonal_nums) < n: \n        octagonal_nums.append(i * (2 + (i * 4)) + 1) \n        i += 1\n    return octagonal_nums[-1] ",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 1\n    mod = 10**9 + 7\n    dp = [1] * n\n    for i in range(1, n): \n        for j in range(i): \n            if abs(arr[i] - arr[j]) <= 1: \n                dp[i] = max(dp[i], dp[j] + 1) \n                max_len = max(max_len, dp[i]) \n    return max_len ",
        "generated_testcode": "assert max_len_sub([1, 5, 3, 10, 2, 16, 2, 7, 14, 5, 3, 12] ) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            if sum(int(k) for k in sub) == len(sub):\n                count += 1\n    return count\n\n# Driver Code ",
        "generated_testcode": "assert count_Substrings(123, 3) == 2 # Explanation: 1+2+3 = 6 and 12+3 = 15 are the only substrings with this property. ",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not xs:\n        return None\n    else:\n        min_num = xs[0]\n        for i in range(1, len(xs)):\n            if xs[i] < min_num:\n                min_num = xs[i]\n        return min_num\n\n# Test cases\nprint(smallest_num([3, 4, 5, 1, 2, 9, 7]))\nprint(smallest_num([1, 2, 3, 4, 5]))\nprint(smallest_num([5, 4, 3, 2, 1]))\nprint(smallest_num([])) # Empty list\nprint(smallest_num([7])) # Only one element in the list ",
        "generated_testcode": "assert smallest_num([3, 5, 2, 1, 8, 6, 4]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given a list of tuples, find the maximum difference between any two elements in the tuple.\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n\n    max_diff = test_list[1][1] - test_list[0][0]\n    min_val = test_list[0][0]\n\n\n    for tup in test_list[1:]:\n        diff = tup[1] - min_val\n        if diff > max_diff:\n            max_diff = diff\n        if tup[0] < min_val:\n            min_val = tup[0]\n\n    return max_diff\n\n# Example usage:\n# test_list = [(2, 7), (1, 8), (5, 10), (12, 15), (3, 4), (6, 12)]\n# print(max_difference(test_list))  # Output: 10\n\n# test_list = [(2, 7), (1, 8), (5, 3), (12, 15), (3, 4), (6, 12)]\n# print(max_difference(test_list))  # Output: 13\n# test_list = [(2, 7), (1, 8), (5, 3), (12, 15), (3, 4), (6, 12), (8, 1)]\n# print(max",
        "generated_testcode": "assert max_difference(()) == None\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1])\n\nsubjectmarks = [('Maths', 90), ('Science', 80), ('English', 85), ('Social', 95)]\nprint(subject_marks(subjectmarks))\n\n\n# Output: [('Maths', 90), ('Science', 80), ('English', 85), ('Social', 95)]\n\n\n# Sorting the list of tuples in descending order based on the second item of each tuple\ndef subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [('Maths', 90), ('Science', 80), ('English', 85), ('Social', 95)]\nprint(subject_marks(subjectmarks))\n\n# Output: [('Social', 95), ('English', 85), ('Maths', 90), ('Science', 80)] ",
        "generated_testcode": "assert subject_marks([('Maths', 90), ('Science', 80), ('English', 85), ('Social', 95)] ) == [('Social', 95), ('Maths', 90), ('English', 85), ('Science', 80)]\n\n\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n#Test case\nprint(recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])) # should return 25\nprint(recursive_list_sum([])) # should return 0\nprint(recursive_list_sum([100, 200, 300, 400, 500, 600, 700])) # should return 1800 ",
        "generated_testcode": "assert recursive_list_sum([] ) == 0\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n#test the function\nprint(pos_count([-1, 2, 3, 4, -5, 6, -7, 8, -9, 10, 0, -11]))  # Output: 4 ",
        "generated_testcode": "assert pos_count([]), 0\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    bell = [[0 for i in range(n+1)] for j in range(n+1)]   \n    bell[0][0] = 1\n    for i in range(n+1): \n        bell[i][0] = bell[i][i] = 1\n    for i in range(1, n+1): \n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i] * bell[i-1][j]\n        bell[i][i] = bell[i-1][i-1] + bell[i] * bell[i-1][i]\n    return bell[n][0] ",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not A:\n        return False\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)) )\n\n# Example usage:\n# is_Monotonic([1,2,3,4,4,5]) #True\n# is_Monotonic([6,5,4,4,5]) #True\n# is_Monotonic([1,3,2,4,5]) #False\n# is_Monotonic([1,1,2,3,7,8]) #True\n# is_Monotonic([1,2,3,2,4]) #False\n# is_Monotonic([1,2,2,2,3]) #True ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sub_len = len(s)\n    main_len = len(l)\n    for i in range(main_len - sub_len + 1):\n        if l[i:i+sub_len] == s:\n            return True\n    return False\n\n#Example usage:\nl = [1,2,3,4,5,6,7,8,9]\ns = [4,5,6]\nprint(is_sublist(l, s)) # True\n\n\ns = [10,11]\nprint(is_sublist(l, s)) # False ",
        "generated_testcode": "assert is_sublist([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], [\"banana\", \"cherry\"]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a list of tuples and returns True if all the tuples have the same length as the given integer k, otherwise returns False.\n    \"\"\"\n    for i in Input:\n        if len(i) != k:\n            return False\n    return True\n# Example usage:\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(find_equal_tuple(Input, k)) # True\n\n\nInput = [(1, 2, 3), (4, 5, 6, 7), (7, 8, 9)]\nk = 3\nprint(find_equal_tuple(Input, k)) # False\n\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9, 10)]\nk = 2\nprint(find_equal_tuple(Input, k)) # False\n\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nprint(find_equal_tuple(Input, k)) # False ",
        "generated_testcode": "assert find_equal_tuple(({(1, 2, 3), (4, 5, 6), (7, 8, 9)}, 3) == True)\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Sort a list of numbers using comb sort.\n    \"\"\"\n    shrink_factor = 1.3\n    gap = len(nums)\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums\n\n# Example usage:\n# nums = [3, 2, 1, 5, 4, 6, 7, 2, 8, 5, 9, 1, 0, 10]\n# sorted_nums = comb_sort(nums)\n# print(sorted_nums) # Output: [0, 1, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert comb_sort(nums=[4, 2, 6, 1, 9, 7, 3, 8, 5, 0, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0: \n        return False\n    for i in range(1, n): \n        for j in range(1, n): \n            if (n == (i * i) - (j * j)): \n                return True\n    return False\n\n# Test the function with some examples \nprint(dif_Square(10)) # True\nprint(dif_Square(24)) # True\nprint(dif_Square(25)) # False ",
        "generated_testcode": "assert dif_Square(121) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r'\\s|,|\\.|;'\n    result = re.split(pattern, text)\n    return result\n    \n# Test the function\ntext = 'The quick brown fox, jumps over the lazy dog. The dog slept; the cat slept too.'\nprint(multiple_split(text)) ",
        "generated_testcode": "assert multiple_split(text=\"Hello, world! This is a test string.\") == [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\", \"string\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        else:\n            if pattern_dict[patterns[i]] != colors[i]:\n                return False\n    return True\n\n# Test cases\nprint(is_samepatterns(['red', 'green', 'blue'], ['a', 'a', 'a'])) # True\nprint(is_samepatterns(['red', 'green', 'blue'], ['a', 'b', 'b'])) # False\nprint(is_samepatterns(['red', 'green', 'blue', 'red'], ['a', 'b', 'a'])) # False\nprint(is_samepatterns(['red', 'green', 'blue', 'red'], ['a', 'b', 'a', 'a'])) # True ",
        "generated_testcode": "assert is_samepatterns([\"red\", \"green\", \"blue\", \"yellow\"], [\"a\", \"b\", \"c\"]) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(i%K == 0 for i in tup):\n            result.append(tup)\n    return result\n\ntest_list = [(2, 6, 8), (3, 9, 12), (12, 18, 24), (15, 30), (14, 21, 28), (16, 24, 32)]\nK = 6\nprint(find_tuples(test_list, K) # Output: [(6, 12), (12, 18, 24), (18, 30)] ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (12, 15, 18), (21, 24, 27), (10, 20, 30)], 6) == [(12, 15, 18), (24, 30, 36)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two arguments m and n and returns the count of squares that can be formed inside the given rectangle.\n    \"\"\"\n    count=0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            count += 1\n            if i!=m and j!=n:\n                print(i,j)\n            elif i==m and j!=n:\n                print(i,n)\n            elif i!=m and j==n:\n                print(m,j)\n            else:\n                print(m,n)\n    return count\n\n#Test the function\nprint(count_Squares(5,5)) #Output: 25 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initializing sum of even and odd digits as 0\n    even_sum = 0\n    odd_sum = 0\n      \n    # iterating through each digit of the number\n    for d in str(n): \n        if int(d) % 2 == 0: \n            even_sum += int(d)\n        else: \n            odd_sum += int(d)\n      \n    # returning the absolute difference between even and odd sums\n    return abs(even_sum - odd_sum) ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(n+1): \n        # Count the number of set bits in binary representation of i \n        c = bin(i).count('1') \n        # If count of set bits is odd, increment the count variable \n        if c % 2 != 0: \n            count += 1\n    return count \n\n# Taking input from user\nn = int(input(\"Enter a number: \")) \n# Calling the function\nprint(\"Number of integers with odd set bits from 0 to\", n, \"are\", count_With_Odd_SetBits(n)) ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 4\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s)%2==0: \n        return \"Even\" \n    else: \n        return \"Odd\" \n\n#Example:\n#>>> word_len(\"hello\")\n#\"Odd\" \n#>>> word_len(\"world\") \n#\"Even\" ",
        "generated_testcode": "assert word_len(\u201chello\u201d) == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (n + 1) * (n + 2) // 6 \n\ndef is_tetrahedral_number(num): \n    i = 1 \n    while True: \n        t = tetrahedral_number(i) \n        if t == num: \n            return True \n        elif t > num: \n            return False \n        i += 1 \n        ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = tuple(zip(test_tup1, test_tup2))\n    return res\n\n# Test the function with two sample tuples\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = ('a', 'b', 'c')\nprint(zip_tuples(test_tup1, test_tup2)) # Output: ((1, 'a'), (2, 'b'), (3, 'c')) ",
        "generated_testcode": "assert zip_tuples((\"abc\", (1, 2, 3)) == ((\"a\", 1), (\"b\", 2), (\"c\", 3))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14\n    vol = (4 / 3) * pi * r ** 3\n    return vol\n\n# Test the function with a radius of 5\nprint(volume_sphere(5)\n\n# Test the function with a radius of 3.5\nprint(volume_sphere(3.5) ",
        "generated_testcode": "assert volume_sphere(5) == 523.6\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    pass\n\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    add = 0\n    for i in strr:\n        add += ord(i)\n    return chr(add)\n    \n#testing the function with an example string\nstrr = \"abc\"\nprint(\"The character made by adding the characters of the string is:\", get_Char(strr)) ",
        "generated_testcode": "assert get_Char(\u201cabc\u201d) == \u201cabcd\u201d\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1]\n        for i in range(2, n):\n            sequence_list.append(sequence_list[sequence_list[-1]] + sequence_list[i - sequence_list[-1]])\n        return sequence_list[n - 1]\n\n# Test the function with some examples\nprint(sequence(0)) # Output: 0\nprint(sequence(1)) # Output: 1\nprint(sequence(2)) # Output: 1\nprint(sequence(3)) # Output: 1\nprint(sequence(4)) # Output: 2\nprint(sequence(5)) # Output: 2\nprint(sequence(6)) # Output: 3\nprint(sequence(7)) # Output: 3\nprint(sequence(8)) # Output: 6\nprint(sequence(9)) # Output: 7\nprint(sequence(10)) # Output: 13\nprint(sequence(11)) # Output: 19\nprint(sequence(12)) # Output: 32\nprint(sequence(13)) # Output: 23\nprint(sequence(14)) # Output: 38\nprint(sequence(15)) # Output: 51\nprint(sequence(16)) # Output: 66\nprint(sequence(17)) # Output: 91\nprint(sequence(18)) # Output: 12",
        "generated_testcode": "assert sequence(1) == 1\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    surface_area = 4 * pi * r ** 2\n    return surface_area\n\n#Test the function with a radius of 5\nprint(surfacearea_sphere(5)\n#Output: 254.197\n\n#Test the function with a radius of 3.5\nprint(surfacearea_sphere(3.5)\n#Output: 153.96\n#Test the function with a radius of 0\nprint(surfacearea_sphere(0)\n#Output: 0.0 ",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1592653589793\n\n# The testing code should include at least 2 different test cases. ",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (2 * n - 1) if n > 0 else 0\n\n# Test the function\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(3))  # Output: 9\nprint(centered_hexagonal_number(5))  # Output: 25\nprint(centered_hexagonal_number(10)) # Output: 91\n\n\n# Write a function to find the side length of a centered hexagon given its area\ndef side_length_of_centered_hexagon(area):\n    return int((area * 6) ** 0.5) // 3 + 1\n\n# Test the function\nprint(side_length_of_centered_hexagon(1))    # Output: 1\nprint(side_length_of_centered_hexagon(9))   # Output: 3\nprint(side_length_of_centered_hexagon(91))  # Output: 9\nprint(side_length_of_centered_hexagon(10))  # Output: 4 ",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes three dictionaries and returns a merged dictionary. It first merges the first two dictionaries and then merges the result with the third one.\n    \"\"\"\n    # Merge the first two dictionaries\n    merged_dict1_2 = {**dict1, **dict2}\n    # Merge the result with the third dictionary\n    merged_dict = {**merged_dict1_2, **dict3}\n    return merged_dict\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5, 'f': 6}\ndict3 = {'g': 7, 'h': 8, 'i': 9}\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)\nprint(merged_dict) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} ",
        "generated_testcode": "assert merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'c': 4, 'd': 5, 'e': 6},\n    {'b': 3, 'f': 6}\n) == {'a': 1, 'b': 3, 'c': 4, 'd': 5, 'e': 6, 'f': 6}\n\n# Test case 1: Three dictionaries with common keys\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dict1 = {}\n    for element in list1:\n        if element in dict1:\n            dict1[element] += 1\n        else:\n            dict1[element] = 1\n    return dict1\n\n#Example:\nlist1 = [1,2,3,4,2,5,6,2,3,1,7,8,2,9,3,4,4,4,5,6,7,5,5,6,8,7,9,1]\nprint(freq_count(list1))  #{1: 2, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 2, 8: 2, 9: 2}\n\n\n#Here, the function creates an empty dictionary called dict1. Then, for each element in the given list1, it checks if the element is already in the dictionary. If it is, it increments the value by 1, otherwise, it adds the element as a key to the dictionary with a value of 1. Finally, it returns the dictionary with the frequency of each element. ",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"orange\", \"banana\", \"apple\", \"cherry\", \"date\", \"date\"]) == {\"apple\": 3, \"banana\": 3, \"cherry\": 2, \"orange\": 1, \"date\": 2}\n\n\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 1\n    while i < N:\n        if (N - i) % 2 == 0:\n            return N - i\n        i += 2\n    return N - 1\n\n#Example:\n#Input:\n#N = 11\n#Output:\n#10\n#Explanation:\n#10 is the closest smaller number less than 11 which can be evenly divided by 2.\n\n\n#Input:\n#N = 12\n#Output:\n#10\n#Explanation:\n#10 is the closest number which is less than 12 and can be evenly divided by 2. \n\n\n#Time Complexity: O(N) ",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\nlist1 = [\"apple\", \"banana\", \"orange\", \"grape\", \"strawberry\", \"kiwi\"]\nprint(len_log(list1)) # Output: 8\n\nlist2 = [\"cat\", \"dog\", \"elephant\", \"tiger\", \"lion\"]\nprint(len_log(list2) # Output: 6 ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"watermelon\"]) == 9\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n\n# Test the function with sample inputs\nstr1 = ['apple', 'banana', 'orange', 'grape']\nsub_str = 'an'\nprint(find_substring(str1, sub_str)) # Output: True\n\nstr2 = ['apple', 'banana', 'orange', 'grape']\nsub_str = 'xy'\nprint(find_substring(str2, sub_str)) # Output: False ",
        "generated_testcode": "assert find_substring([\"hello\", \"world\", \"hi\", \"python\"], \"py\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    str_n = str(n)\n    i = 0\n    while i < len(str_n) - 1: \n        if str_n[i] == str_n[i+1]: \n            return False\n        i += 1\n    return True ",
        "generated_testcode": "assert is_undulating(123235321) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n\n#Test the function with a=2 and b=3\nprint(power(2,3)) #output 8\n\n\n#Test the function with a=5 and b=4\nprint(power(5,4)) #output 625 ",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return min(test_list, key=lambda x: x[1])\n\n# Test the function\ntest_list = [(1, 30), (2, 20), (3, 15), (4, 25), (5, 10)]\nprint(index_minimum(test_list)) # Output: (5, 10) ",
        "generated_testcode": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8)] ) == (1, 4)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\" This function returns the minimum length of sublist in a list. \"\"\"\n    min_length = len(lst[0])   # Assigning the length of first sublist to min_length variable\n    for sublist in lst:\n        if len(sublist) < min_length:   # Checking if the length of sublist is less than min_length\n            min_length = len(sublist)   # If true then assigning the new length to min_length variable\n    return min_length\n\n# Test the function with an example\nlst = [[1,2,3,4], [5,6,7,8,9], [10], [11,12,13,14,15,16], [20,21]]\nprint(Find_Min_Length(lst))   # Output: 1 ",
        "generated_testcode": "assert Find_Min_Length([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"grape\"]) == 5\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n#example\nprint(divisor(12))\nprint(divisor(14)) ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 2, 3, 4, 5, 6, 2, 7, 8, 9, 1, 1, 1, 3, 2, 5, 6, 7, 4, 2, 8, 9]\nprint(frequency_lists(list1))  # Output: {1: 3, 2: 4, 3: 3, 4: 3, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2} ",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"cherry\", \"date\", \"cherry\"]) == {\"apple\": 2, \"banana\": 2, \"cherry\": 3, \"date\": 1}\n\n\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for num in numbers:  \n        result *= num\n    return result / len(numbers)  \n\n# Test the function with a sample list \nlist = [2, 3, 4, 5, 6, 8]  \nprint(\"The average is:\", multiply_num(list)) ",
        "generated_testcode": "assert multiply_num(list(range(1, 6)) == 120\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while n > 0: \n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n  \n# Test the function with an example \ndecimal_number = 23\nprint(decimal_to_binary(decimal_number)) ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n# Test\nprint(next_smallest_palindrome(123))  # Output: 131\nprint(next_smallest_palindrome(12421))  # Output: 13431\nprint(next_smallest_palindrome(877))  # Output: 898\nprint(next_smallest_palindrome(199))  # Output: 2011",
        "generated_testcode": "assert next_smallest_palindrome(123) == 131\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes in an array and a number k and returns the kth element of the array.\n    If k is greater than the number of elements in the array, it returns None.\n\n    \"\"\"\n    if k > n:\n        return None\n    else:\n        return arr[k-1]\n\n# Test the function with sample inputs\nprint(kth_element([1, 2, 3, 4, 5, 6, 7], 4, 2))  # Output: 3\nprint(kth_element([1, 2, 3, 4, 5, 6, 7], 7, 2))  # Output: None\nprint(kth_element([1, 2, 3, 4, 5, 6, 7], 1, 1))  # Output: 1 ",
        "generated_testcode": "assert kth_element(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=9, k=3) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = word.split(\"_\")\n    return words[0] + \"\".join(x.capitalize() or \"_\" for x in words[1:])\n\n# Test cases\nprint(snake_to_camel(\"hello_world\")) # \"helloWorld\"\nprint(snake_to_camel(\"this_is_a_long_string_to_convert\")) # \"thisIsALongStringToConvert\"\nprint(snake_to_camel(\"this\")) # \"this\"\nprint(snake_to_camel(\"\")) # \"\"\nprint(snake_to_camel(\"_this_is_a_string\")) # \"ThisIsAString\"\nprint(snake_to_camel(\"_this_is__a__string_\")) # \"ThisIsAString\"\nprint(snake_to_camel(\"__this__is___a__string___\")) # \"ThisIsAString\"\nprint(snake_to_camel(\"this_is_a_string_\")) # \"ThisIsAString\" ",
        "generated_testcode": "assert snake_to_camel(snake_to_camel) == \"snakeToCamel\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if m == 0 and n != 0:\n        return 1\n    elif m > n or n < 0 or m < 0:\n        return 0\n    elif m == 2:\n        return 1\n    elif m == 1:\n        return 2*n - 2\n    else:\n        return (2*n - 2) * eulerian_num(n-1, m-1) - (n-1) * eulerian_num(n-2, m-2)\n\n# Test the function\nprint(eulerian_num(1, 0)) # Output: 1\nprint(eulerian_num(2, 0)) # Output: 2\nprint(eulerian_num(3, 0)) # Output: 5\nprint(eulerian_num(3, 1)) # Output: 5\nprint(eulerian_num(3, 2)) # Output: 1\nprint(eulerian_num(4, 0)) # Output: 14\nprint(eulerian_num(4, 1)) # Output: 26\nprint(eulerian_num(4, 2)) # Output: 22\nprint(eulerian_num(4, 3)) # Output: 5\nprint(eulerian_num(4, 4)) # Output: 1\nprint(eulerian_num(5, 0)) # Output: 71\nprint(eulerian_num(5",
        "generated_testcode": "assert eulerian_num(2, 2) == 6\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda sublist: sorted(sublist), input_list) if isinstance(sublist, list) else sublist for sublist in input_list)\n\n# Test the function with the given example\ninput_list = ['cat', 'dog', ['banana', 'apple', 'cherry'], 'zebra', ['kiwi', 'orange', 'mango', 'pear'], 'elephant']\nprint(sort_sublists(input_list)) ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"aebdg\", \"aeppl\", \"aeerr\", \"aepph\", \"aeppt\"]\n# Test case 1: Test the function with a list of strings.\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n#Test the function with an example\nlst = [True, False, True, False, True, False, True]\nprint(count(lst)) # Output: 3 ",
        "generated_testcode": "assert count([]), 0\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(list(test_tup) + test_list)\n\n# Test the function with the following values:\n# test_list = [1, 2, 3, 4]\n# test_tup = (4, 5, 6)\n# print(add_lists(test_list, test_tup)) ",
        "generated_testcode": "assert add_lists([\"apple\", \"banana\", \"cherry\"], (\"kiwi\", \"mango\", \"grapes\")) == (\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\", \"grapes\")\n\n# Test case 1: Testing with a list of strings and a tuple of strings\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1):\n        s = hex(i)\n        s = s[2:].upper()\n        if all(c in '0123456789ABCDEF' for c in s):\n            count += 1\n    return count\n\n#example\nL = 1\nR = 10000\nprint(count_Hexadecimal(L,R)) # output 226 ",
        "generated_testcode": "assert count_Hexadecimal(1, 10) == 2\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    lst = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            lst.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            lst.append(num2[j])\n            j += 1\n        else:\n            lst.append(num3[k])\n            k += 1\n    \n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            lst.append(num1[i])\n            i += 1\n        else:\n            lst.append(num2[j])\n            j += 1\n    \n    while j < len(num2) and k < len(num3):\n        if num2[j] <= num3[k]:\n            lst.append(num2[j])\n            j += 1\n        else:\n            lst.append(num3[k])\n            k += 1\n    \n    while i < len(num1) and k < len(num3):\n        if num1[i] <= num3[k]:\n            lst.append(num1[i])\n            i += 1\n        else:\n            lst.",
        "generated_testcode": "assert merge_sorted_list(num1=[1,3,5,7],num2=[2,4,6],num3=[0,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n\n# Test case 1: Test the function with 3 sorted lists of integers.\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        if s[i] == '1': \n            count += 1\n    return count % 2 == 1\ndef count_rotations(s):\n    n = len(s)\n    count = 0\n    for i in range(n): \n        if s[i] == '1' and odd_Equivalent(s, n): \n            count += 1\n            s = s[1:] + s[0]\n    return count\n# Example usage:\ns = '10101'\nprint(count_rotations(s)) # Output: 1\n\ns = '1001'\nprint(count_rotations(s)) # Output: 0 ",
        "generated_testcode": "assert odd_Equivalent(1010101,5) == 3 # Testing for even length string\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a set of all the numbers between start and end range\n    all_nums = set(range(strt_val, stop_val+1))\n    # remove the numbers that are already in the test list\n    missing_nums = all_nums - set(test_list)\n    # return the sorted list of missing numbers\n    return sorted(missing_nums)\n\n\n# Test cases\nprint(extract_missing([1, 2, 3, 5, 4], 1, 10))  # [6, 7, 8, 9, 10]\nprint(extract_missing([1, 2, 3, 5, 4], 1, 8))  # [6, 7, 8]\nprint(extract_missing([1, 2, 3, 4, 5], 1, 8))  # []\nprint(extract_missing([1, 2, 3, 5, 4], 2, 7))  # [6, 7]\nprint(extract_missing([1, 3, 4, 5, 7], 1, 10))  # [2, 6, 8, 9, 10]\nprint(extract_missing([], 1, 5))            # [1, 2, 3, 4, 5]\nprint(extract_missing([1, 2, 3, 4, 5], 3, 3)) # [] ",
        "generated_testcode": "assert extract_missing([\"1-3\", \"5-8\", \"10-11\"], 1, 11) == [\"4\", \"9\"]\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    common_elements = set(nestedlist[0])\n    for l in nestedlist[1:]:\n        common_elements = common_elements & set(l)\n    return list(common_elements) ",
        "generated_testcode": "assert common_in_nested_lists(\n    [\n        [1, 2, 3, 4, 5],\n        [2, 3, 4, 5, 6],\n        [3, 4, 5, 6, 7],\n        [4, 5, 6, 7, 8]\n    ]) == [4, 5]\n\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (2 * 3.14 * diameter) + (2 * diameter * height)\n\nprint(perimeter(10,20))\n\n#output : 157.07\n\n#Explanation:\n#Diameter of the cylinder is 10 and height is 20. \n#Perimeter of the cylinder is the sum of circumference of its base and its curved surface. \n#Circumference of the base = 2 * 3.14 * diameter = 2 * 3.14 * 10 = 62.8 \n#Curved surface = 2 * diameter * height = 2 * 10 * 20 = 40 \n#So, total perimeter = 62.8 + 40 = 157.07 (approx.) ",
        "generated_testcode": "assert perimeter(5,10) == 78.139797567248060692\n\n# The perimeter of a cylinder with diameter 5 and height 10 is approximately 78.1398 (rounded to 8 decimal places). ",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n\n# Write a function to check if a string represents a float or not\ndef check_float(text):\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n\n# Write a function to check if a string represents a boolean or not.\ndef check_boolean(text):\n    return text.lower() in ['true', 'false', 'yes', 'no', 'on', 'off', '1', '0']\n\n\n# Write a function to check if a string represents a date or not.\ndef check_date(text):\n    try:\n        from datetime import datetime\n        datetime.strptime(text, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False\n\n# Write a function to check if a string represents a datetime or not.\ndef check_datetime(text):\n    try:\n        from datetime import datetime\n        datetime.strptime(text, '%Y-%m-%d %H:%M:%S')\n        return True\n    except ValueError:\n        return False\n\n# Write a function to check if a string represents a time or not.\ndef check_time(text):\n    try:\n        from datetime import datetime\n        datetime.strptime(text, '%H:%M:%S')\n        return True\n    except ValueError:\n        return False\n\n# Write a function to check if a string represents a number (e",
        "generated_testcode": "assert check_integer(123) == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for tuple_elem in test_list:\n        if tuple_elem in freq_dict:\n            freq_dict[tuple_elem] += 1\n        else:\n            freq_dict[tuple_elem] = 1\n    return freq_dict\n\n# Test the function with sample data\ntest_list = [('a', 'b'), ('c', 'd'), ('a', 'b'), ('a', 'c'), ('a', 'b')]\nprint(assign_freq(test_list)) ",
        "generated_testcode": "assert assign_freq(()) == {}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list of dictionaries as input and checks if all dictionaries are empty or not.\n    If all dictionaries are empty, it returns True, otherwise False.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True\n\n# Example usage:\nlist1 = [{}, {}, {}]\nprint(empty_dit(list1)) # True\nlist2 = [{}, {}, {\"name\": \"John\"}]\nprint(empty_dit(list2)) # False ",
        "generated_testcode": "assert empty_dit([]), \"Empty list should return True\"\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * 10 ** (len(nums) - 1 - i)\n    return result\n\n# Test the function with some sample inputs\nprint(tuple_to_int((1, 2, 3, 4, 5)) == 12345)\nprint(tuple_to_int((5, 4, 3, 2, 1) == 54321)\nprint(tuple_to_int((9, 9, 9, 9) == 9999)\nprint(tuple_to_int((1, 0, 0, 0) == 1000) ",
        "generated_testcode": "assert tuple_to_int(()) == 0\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    float_list = []\n    for i in test_list:\n        try:\n            float_list.append(float(i))\n        except ValueError:\n            float_list.append(i)\n    return float_list\n\n# Test the function with a sample list\nsample_list = [1, \"2.5\", \"3.8\", \"Hello\", \"5\"]\nprint(list_to_float(sample_list)) ",
        "generated_testcode": "assert list_to_float([\"1\", \"2.5\", \"3\", \"hello\", \"4.2\", \"world\"]) == [1.0, 2.5, \"hello\", 4.2, \"world\"]\n\n\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    list_str = string.split() \n    return list_str ",
        "generated_testcode": "assert string_to_list(\u201chello\u201d) == [\u201ch\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    res = -1\n    while(low < high) :\n        mid = (low + high) // 2\n        if mid > 0 and arr[mid] == arr[mid-1] :\n            if mid % 2 == 0 :\n                low = mid + 1\n            else :\n                high = mid - 1\n        elif mid < n-1 and arr[mid] == arr[mid+1] :\n            if mid % 2 == 0 :\n                high = mid - 1\n            else :\n                low = mid + 1\n        else :\n            return arr[mid]\n    return -1\n\n# Driver code\narr = [1,1,2,2,3,3,4,5,5,6,6,7,7,8,8,9,9]\nn = len(arr)\nprint(\"Element that appears only once is :\",search(arr, n)) ",
        "generated_testcode": "assert search(arr,n) == 4\n# Testcase 1:\narr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9]\nn = len(arr)\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\n#test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_product_tuple(list1))\n\n\n#Output: 72\n\n\n#The output is 72 because the maximum product can be obtained by multiplying 8 and 9, which are the largest two numbers in the list. ",
        "generated_testcode": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8)] ) == 56\n\n\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    triplets = []\n    for i in range(n-2):\n        if sum-A[i] in A[i+1:]:\n            for j in range(i+1, n-1):\n                if (sum-A[i]-A[j]) in A[j+1:]:\n                    triplets.append((A[i], A[j], sum-A[i]-A[j]))\n    return triplets\n\n# Test the function with an example array and sum\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nsum = 27\ncount = 0\nn = len(A)\ntriplets = check_triplet(A, n, sum, count)\nprint(triplets) ",
        "generated_testcode": "assert check_triplet(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=20, count=0) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 1\n    count = 0\n    while True:\n        temp = i\n        sum = 0\n        while i > 0:\n            sum += factorial(i % 10)\n            i //= 10\n        if temp == sum:\n            count += 1\n            if count == n:\n                return temp\n        i += 1\n        \ndef factorial(n):\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact\n\n# example\nprint(smartNumber(5)) # output: 145",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_of_amicable_numbers = 0\n    for i in range(1, limit+1):\n        divisor_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                divisor_sum += j\n        proper_divisor_sum = 0\n        for k in range(1, divisor_sum):\n            if divisor_sum % k == 0:\n                proper_divisor_sum += k\n        if i != proper_divisor_sum and i == divisor_sum and i < proper_divisor_sum:\n            sum_of_amicable_numbers += i\n    return sum_of_amicable_numbers\n\n# Test the function with limit = 1000000\nprint(amicable_numbers_sum(1000000)\n# Output: 316230",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 392282\n\n# The sum of all amicable numbers from 1 to 100000 is 39282. ",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    import math\n    angle = math.atan2(b,a)\n    return round(math.degrees(angle),2)\n\n# Example usage:\n# print(angle_complex(3, 4))  # Output: 53.13 (degrees) ",
        "generated_testcode": "assert angle_complex(1,1) == 45.0\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_diff = 0 \n    zero_count = 0 \n    one_count = 0 \n    start = 0 \n    for i in range(n): \n        if string[i] == '0': \n            zero_count += 1\n        elif string[i] == '1': \n            one_count += 1\n        if zero_count == one_count: \n            max_diff = max(max_diff, i - start + 1)\n        elif zero_count > one_count: \n            start = i - zero_count + 1\n            zero_count = one_count = (i - start + 1) \n        else: \n            start = i - one_count + 1\n            one_count = zero_count \n    return max_diff\n\n# Test the function with sample inputs\nstring = '1001010101'\nn = len(string)\nprint(find_length(string, n)\n# Output: 4 ",
        "generated_testcode": "assert find_length(10101100111) == 2\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            result += i\n    return result\n\na = 12\nb = 15\nprint(sum(a,b))\n",
        "generated_testcode": "assert sum(12,15) == 30 # True\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0:\n        return 0\n    elif y < 0:\n        return multiply_int(x, -y)\n    elif y > 0:\n        return x + multiply_int(x, y-1)\n\n\n# test the function\nprint(multiply_int(2, 3)) # output: 6\nprint(multiply_int(5, -4)) # output: -20\nprint(multiply_int(0, 10)) # output: 0\nprint(multiply_int(-5, 5)) # output: -25 ",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n\nprint(long_words(3, \"I am a boy and I am a girl and I love python and cats\")) # ['amboy', 'love', 'python', 'cats'] ",
        "generated_testcode": "assert long_words(5, ['apple', 'banana', 'orange', 'pear', 'pineapple', 'watermelon', 'kiwi', 'grape', 'strawberry']) == ['banana', 'orange', 'pear', 'pineapple', 'watermelon']\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(my_matrix) == 0:\n        return False\n\n    n = len(my_matrix)\n    if n == 0:\n        return False\n\n    sum_list = []\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n\n        if i == 0:\n            diag1_sum = my_matrix[i][i]\n            diag2_sum = my_matrix[i][n-1-i]\n        if row_sum != diag1_sum or col_sum != diag1_sum:\n            return False\n        sum_list.append(row_sum)\n    return len(set(sum_list) == 1\n\n# Test the function with an example\nmy_matrix = [\n    [2, 7, 6],\n    [9, 5, 1],\n    [4, 3, 8]\n]\nprint(magic_square_test(my_matrix))  # Output: True ",
        "generated_testcode": "assert magic_square_test(\n    [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]) == True, \"Should return True\"\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = {}\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item\n\n# Example usage:\nnums = [1, 2, 3, 2, 1, 3, 4, 1, 2, 5, 1, 2, 3, 6, 4, 1, 2, 3]\nprint(max_occurrences(nums)) # Output: 1\n\n\n# The function first initializes an empty dictionary `freq` to store the frequency of each item in the list. It then iterates through the list, updating the frequency count for each item in the dictionary. If the frequency of an item is greater than the current `max_freq`, it becomes the new `max_freq` and the item becomes the `max_item`. Finally, it returns the `max_item`. ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\", \"cherry\", \"banana\"]) == \"banana\"\n\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    rev_vowels = ''.join(reversed(vowels_list))\n    result = \"\"\n    i = 0\n    for char in str1:\n        if char in vowels:\n            result += rev_vowels[i]\n            i += 1\n        else:\n            result += char\n    return result\n\n# test the function\nprint(reverse_vowels(\"hello world\"))\nprint(reverse_vowels(\"AEIouSLV\"))\nprint(reverse_vowels(\"python\")) ",
        "generated_testcode": "assert reverse_vowels(\"hello world\" ) == \"holle wrold\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    str1 = \" \".join(str(x) for x in tup1)\n    return str1\n\n#test the function\ntup1 = (1,2,3,4,5,6)\nprint(tup_string(tup1))\n\n\n#output: \"1 2 3 4 5 6\"\n\n\n#Another way to convert tuple to string using the map() method\ndef tup_string(tup1):\n    return \" \".join(map(str, tup1))\n\n#test the function\ntup1 = (1,2,3,4,5,6)\nprint(tup_string(tup1))\n\n#output: \"1 2 3 4 5 6\" ",
        "generated_testcode": "assert tup_string(()) == \"\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers and returns the sum of negative numbers using lambda function.\n    \"\"\"\n    return sum(filter(lambda x: x < 0, nums))\n\n\n# Test the function with an example\nprint(sum_negativenum([1, -2, 3, 4, -5, -6, 7, -8, 9, -10]))  # Output: -15\nprint(sum_negativenum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 0\nprint(sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))  # Output: -30\nprint(sum_negativenum([0, 0, 0, 0, 0, 0]))  # Output: 0\nprint(sum_negativenum([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]))  # Output: -11 ",
        "generated_testcode": "assert sum_negativenum(nums=[1, 2, 3, -4, 5, -6, 7, -8, 9]) == -13\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(p): \n        if arr[n-1] % 2 == 0: \n            arr[n-1] //= 2\n        else: \n            arr[n-1] *= 2\n            \n    if arr[n-1] % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n    \n    # Driver code \narr = [1, 2, 3, 4, 5, 6]\nn = len(arr) \np = 2\nprint(check_last(arr, n, p)) # Output: Odd ",
        "generated_testcode": "assert check_last ([1,2,3,4,5,6],4,2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * ((2 * n) - 1)) if n > 0 else 0\n\n# Test cases\nprint(hexagonal_num(1)) # 1\nprint(hexagonal_num(2)) # 6\nprint(hexagonal_num(3)) # 15\nprint(hexagonal_num(5)) # 65\nprint(hexagonal_num(10)) # 190\nprint(hexagonal_num(0)) # 0\nprint(hexagonal_num(-5)) # 0\n\n\n# Solution:\n# A hexagonal number is a figurate number that represents a hexagon with n sides, where each side has a length of n. \n# The nth hexagonal number can be calculated using the formula: n * (2n - 1). \n# If n is less than or equal to 0, return 0. ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if units <= 100:\n        return 0\n    else:\n        return 50 + (units - 100) * 2.0\n\n# or\n# def cal_electbill(units):\n#     return max(0, units - 100) * 2 + 50\n\n# test the function\nprint(cal_electbill(50))\nprint(cal_electbill(120))\nprint(cal_electbill(150)) ",
        "generated_testcode": "assert cal_electbill(100) == 5.5\n\n# Write 2 lines of testing code for the function.\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n\n# Test the function with an example array\narr = [0, 2, 0, 3, 0, 4, 5, 0, 6, 0, 7]\nprint(zero_count(arr)) # Output: 0.5\n\n\n# Example with an empty array\narr = []\nprint(zero_count(arr)) # Output: 0.0 ",
        "generated_testcode": "assert zero_count(nums=[1, 0, 3, 2, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9]) == 3/9\n\n\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return False\n    while n != 0: \n        if n & 1: \n            n -= 1\n        n >>= 1\n    return n == 0\n\n# example usage:\nn = 10\nif is_Sum_Of_Powers_Of_Two(n): \n    print(n,\" can be represented as sum of non-zero powers of 2\")\nelse: \n    print(n,\" cannot be represented as sum of non-zero powers of 2\") ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference\n\n# Test the function with a radius of 5\nprint(circle_circumference(5)\n\n# Output: 31.4159\n\n\n# Write a function to calculate the area of a circle\ndef circle_area(r):\n    pi = 3.14159\n    area = pi * (r ** 2)\n    return area\n\n# Test the function with a radius of 5\nprint(circle_area(5)\n# Output: 78.53975\n\n# Create a function to calculate the volume of a sphere\ndef sphere_volume(r):\n    pi = 3.14159\n    volume = (4 / 3) * pi * (r ** 3)\n    return volume\n\n# Test the function with a radius of 5\nprint(sphere_volume(5)\n# Output: 523.60179\n\n# Create a function to calculate the surface area of a sphere\ndef sphere_surface_area(r):\n    pi = 3.14159\n    surface_area = 4 * pi * (r ** 2)\n    return surface_area\n\n# Test the function with a radius of 5\nprint(sphere_surface_area(5)\n# Output: 314.159",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple list as input and returns a tuple of elements that occur only once in the list.\n    \"\"\"\n    singly_elements = []\n    for element in test_list:\n        if test_list.count(element) == 1:\n            singly_elements.append(element)\n    return tuple(singly_elements)\n\n\n\n# Test the function with sample inputs:\ntest_list = (1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9, 10, 10, 10, 11, 12, 12, 13, 13)\nprint(extract_singly(test_list))  # Expected output: (1, 5, 6, 9, 11) ",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'c', 'd', 'h', 'i', 'e') == ('f', 'g', 'h', 'i')\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    def flip(arr, i):\n        start = 0\n        while start < i:\n            temp = arr[start]\n            arr[start] = arr[i]\n            arr[i] = temp\n            start += 1\n            i -= 1\n\n    n = len(nums)\n    while n > 1:\n        max_index = 0\n        for i in range(n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        flip(nums, max_index)\n        flip(nums, n-1)\n        n -= 1\n    return nums\n\n\n# Example usage:\nnums = [12, 3, 23, 34, 5, 6, 7, 8, 43, 2, 9, 5, 12, 3, 10, 1]\nprint(pancake_sort(nums)) ",
        "generated_testcode": "assert pancake_sort(nums=[4, 2, 5, 1, 3, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[i]:\n                count+=1\n    return count\nlist1 = [1,2,3,4,5,6,7,8]\nlist2 = [2,3,5,7,9,1,6,8]\nlist3 = [2,3,5,7,9,1,10]\nprint(count_samepair(list1,list2,list3)) # output 3 ",
        "generated_testcode": "assert count_samepair([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"cherry\", \"date\"], [\"cherry\", \"date\", \"elderberry\"]) == 2\n# Test case 1: The output should be 2 because \"banana\" and \"cherry\" appear in all three lists. ",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count ",
        "generated_testcode": "assert find_lists(()) == 0\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum=0\n    for i in range(n): \n        for j in range(i+1,n): \n            sum += abs(arr[i]-arr[j]) \n    return sum\n# Driver code \narr = [1,2,3,4,5,6] \nn = len(arr) \nprint(sum_Pairs(arr,n)) ",
        "generated_testcode": "assert sum_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1,2,3,4,5]\nn = len(arr)\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_diff = arr[1] - arr[0] \n    min_element = arr[0] \n    max_element = arr[0] \n    for i in range(1, n): \n        if arr[i] < min_element: \n            min_element = arr[i] \n        else: \n            if arr[i] - min_element > max_diff: \n                max_diff = arr[i] - min_element \n        if arr[i] > max_element: \n            max_element = arr[i] \n        elif arr[i] - max_element > max_diff: \n            max_diff = arr[i] - max_element \n    return max_diff \n# Driver code \narr = [1, 2, 3, 10, 23, 1, 7, 8, 4] \nn = len(arr) \nprint(\"Maximum difference is\", max_Abs_Diff(arr, n)) ",
        "generated_testcode": "assert max_Abs_Diff(arr,n) == 4\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in str1:\n        sum += ord(i)\n    return sum\n\n# example\nstring = input(\"Enter a string: \")\nprint(\"The ascii value of the string is:\", ascii_value_string(string)) ",
        "generated_testcode": "assert ascii_value_string(\u201chello\u201d) == 532\n# Test case 1: Testing with a small string\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(m-2, -1, -1, -1): \n        for j in range(i+1): \n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n    return tri[0][0] \n  \n# Driver program to test the above function  \ntri = [[1, 3, 5, 2], \n       [2, 4, 1, 9], \n       [1, 8, 1, 1]] \nm = len(tri) \nn = len(tri[0]) \nprint(\"Maximum Path Sum : \", max_path_sum(tri, m, n)) ",
        "generated_testcode": "assert max_path_sum(\n    [\n        [1],\n        [2, 3],\n        [4, 5, 6],\n        [7, 8, 9, 10],\n        [11, 12, 13, 14]\n    ]) == 30\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    s = 0 \n    while x!=0 : \n        s = s + x % 10 \n        x = x // 10 \n    return s \ndef max_sum(n):\n    if n == 1:\n        return 1\n    mx = 0\n    for i in range(1, n):\n        if n%i == 0:\n            mx = max(mx, sum_digits_single(i))\n            mx = max(mx, sum_digits_single(n//i))\n    return mx ",
        "generated_testcode": "assert sum_digits_single(123) == (1, 23)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 0 \n    max_ending_here = 1\n    for i in range(1, n): \n        if abs(arr[i] - arr[i-1]) == 1: \n            max_ending_here += 1\n        else: \n            max_len = max(max_len, max_ending_here) \n            max_ending_here = 1\n    return max(max_len, max_ending_here) \n\n\n# Driver code \narr = [1, 2, 3, 5, 7, 9, 10, 11, 13] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) # Output: 3\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(arr)\nprint(longest_subseq_with_diff_one(arr, n)) # Output: 1\n\n\narr = [1, 5, 3, 1, 7, 9, 2, 5, 11]\nn = len(arr)\nprint(longest_subseq_with_diff_one(arr, n)) # Output: 3 ",
        "generated_testcode": "assert longest_subseq_with_diff_one(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def find_term(n):\n        return a+(b*n)\n    n=0\n    while True:\n        if find_term(n)==c:\n            return True\n        elif find_term(n)>c:\n            return False\n        n=n+1\n#Example usage:\n#print(does_Contain_B(1,2,10)) # True\n#print(does_Contain_B(2,2,5)) # False ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if p%q==0:\n        return q\n    else:\n        return gcd(q,p%q)\ndef coprime(p,q):\n    if gcd(p,q)==1:\n        return True\n    else:\n        return False\n#testing\nprint(coprime(21,35))\nprint(coprime(12,15))\nprint(coprime(17,23)) ",
        "generated_testcode": "assert gcd(12,8) == 4\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    i = j = 0\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    result += a[i:]\n    result += b[j:]\n    return result\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left = merge_sort(left)\n    right = merge_sort(right)\n    return merge(left,right)\n\narr = [3,6,2,1,8,5,9,4,7]\narr = merge_sort(arr)\nprint(arr)\n\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert merge([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\"], [\"peach\", \"pear\", \"plum\", \"kiwi\", \"orange\"]) == [\"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"pear\", \"pear\", \"plum\"]\n\n\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    x = -b / (2 * a)\n    y = c - b**2 / (4 * a)\n    return (x, y)\n\n#Test the function with some sample inputs:\nprint(parabola_vertex(1, 2, 3)) # Expected output: (-1.0, 1.0)\nprint(parabola_vertex(2, -1, 5)) # Expected output: (1.5, 0.5)\nprint(parabola_vertex(3, 4, 2)) # Expected output: (-0.6666666666666666666666, 0.5) ",
        "generated_testcode": "assert parabola_vertex(1, -14, 10) == (-3, 0)\n\n\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [nums[i][N] for i in range(len(nums)]\n\n# example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(nums, 1)) # Output: [2, 5, 8]\n\n\n# Write a function to find the sum of the diagonal elements of a two dimensional list.\ndef sum_diagonal(nums):\n    return sum(nums[i][i] for i in range(len(nums)) if len(nums) == len(nums[i]))\n# example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_diagonal(nums)) # Output: 15\n# 1 + 5 + 9 = 15\n\n# Write a function to find the mean of the elements in a two dimensional list.\ndef mean(nums):\n    return sum(num for sublist in nums for num in sublist) / (len(nums) * len(nums[0]))\n# example usage:\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(mean(nums)) # Output: 5.0\n# (1 + 2 + 3 + 4 + 5 + 6 + ",
        "generated_testcode": "assert specified_element(nums, 1) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_mask = 0xAAAAAAAA\n    return n ^ even_mask ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 is 10 in binary, and after toggling the even bits, it becomes 1010, which is 10 in decimal.\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not isinstance(tuple_str, tuple):\n        return \"Input is not a tuple\"\n    \n    if len(tuple_str) == 0:\n        return ()\n    \n    int_tuple = []\n    \n    for item in tuple_str:\n        try:\n            int_tuple.append(int(item))\n        except ValueError:\n            return \"Not all elements are integer convertible\"\n    \n    return tuple(int_tuple)\n\n\n# test the function with some inputs\nprint(tuple_int_str((\"1\", \"2\", \"3\")) # Expected output: (1, 2, 3)\nprint(tuple_int_str(\"1\", \"2\", \"three\")) # Expected output: \"Not all elements are integer convertible\"\nprint(tuple_int_str(())) # Expected output: ()\nprint(tuple_int_str(\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")) # Expected output: (1, 2, 3, 4, 5, 6)\nprint(tuple_int_str(\"1\", \"2\", \"3\", \"4\", \"five\", \"6\")) # Expected output: \"Not all elements are integer convertible\" ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Encode a list in run-length encoding\n\n    :param list1: a list of values\n    :return: a list of tuples, where each tuple contains the value and the number of consecutive occurrences of that value in the original list\n    \"\"\"\n    encoded_list = []\n    i = 0\n    while i < len(list1):\n        count = 1\n        j = i + 1\n        while j < len(list1) and list1[i] == list1[j]:\n            count += 1\n            j += 1\n        encoded_list.append((list1[i], count))\n        i = j\n    return encoded_list\n\n\n# Test the function\nprint(encode_list([1, 1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5]))  # [(1, 2), (2, 1), (3, 2), (4, 1), (5, 3)]\nprint(encode_list([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6]))  # [(1, 1), (2, 1), (3, 1), (4, 4), (5, 1), (6, 2)]\nprint(encode_list([]))  # []\nprint(encode_list([1, 1,",
        "generated_testcode": "assert encode_list([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"d\",\"d\",\"d\",\"d\",\"d\"]) == [(\"a\",1),(\"b\",2),(\"c\",3),(\"d\",3)]\n\n\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ans=0\n    arr.sort()\n    for i in range(n):\n        diff = k - arr[i]\n        if diff<=0:\n            break\n        ans += diff\n    return ans\nn=int(input())\narr=[int(x) for x in input().split()]\nk=int(input())\nprint(min_Ops(arr,n,k))\n",
        "generated_testcode": "assert min_Ops(arr=[1, 5, 7, 2, 4, 8, 3], n=5, k=3) == 5\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if month in ['march','april','may','june']:\n        if days>31:\n            return \"spring\"\n    elif month in ['june','july','august']:\n        return \"summer\"\n    elif month in ['september','october','november']:\n        return \"autumn\"\n    elif month in ['december','january','february']:\n        return \"winter\"\n    else:\n        return \"fall\"\n    \n#test the function with the given test cases\nprint(month_season('march',31)) #spring\nprint(month_season('may',15)) #spring\nprint(month_season('june',31)) #summer\nprint(month_season('september',20)) #autumn\nprint(month_season('january',1)) #winter \nprint(month_season('december',31)) #winter\nprint(month_season('february',28)) #winter\nprint(month_season('august',15)) #summer\nprint(month_season('october',10)) #autumn\nprint(month_season('april',20)) #spring \nprint(month_season('july',30)) #summer ",
        "generated_testcode": "assert month_season(1,1) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    x = (n % b) * modinverse(a, b) % b\n    y = (n - x * a) / b\n    return x, y\n  \n# Modular inverse function to find the modular multiplicative inverse of a mod b. \ndef modinverse(a, b): \n    gcd, x, y = extended_euclid(a, b) \n    if gcd != 1: \n        return None\n    else: \n        return x % b \n  \n# Extended Euclid's Algorithm to find the modular multiplicative inverse. \ndef extended_euclid(a, b): \n    if b == 0: \n        return a, 1, 0\n    else: \n        gcd, x, y = extended_euclid(b, a % b) \n        return gcd, y - (a // b) * x, x \n\n# Test the function with sample inputs. \na = 10\nb = 3\nn = 23\nprint(solution(a, b, n)) # Output: (2, 3) ",
        "generated_testcode": "assert solution (2, 3, 5) == (1, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 4, 6, 8]\nprint(remove_elements(list1, list2)) # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert remove_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"orange\"], [\"apple\", \"orange\"]) == [\"banana\", \"cherry\"]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n\n# Test cases\nprint(sum_series(4)) # Should print 10\nprint(sum_series(10)) # Should print 30\nprint(sum_series(11)) # Should print 55 ",
        "generated_testcode": "assert sum_series(4) == 4\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area=((s**2)*l)/(4*tan(pi/l))\n    return area\n\nimport math\ns=float(input(\"Enter the length of side of the polygon: \")\nl=int(input(\"Enter the number of sides of the polygon: \")\nprint(\"The area of the polygon is: \",area_polygon(s,l))\n\n\n\n#The function takes two arguments s and l. s is the length of the side of the polygon and l is the number of sides it has. \n#We use the formula for the area of a regular polygon which is ((s**2)*l)/(4*tan(pi/l)) where s is the length of the side and l is the number of sides. \n#We first calculate the tangent of pi/l using the math.tan() function and then substitute it in the formula and return the value. ",
        "generated_testcode": "assert area_polygon(5, 3) == 7.0740778276386, \"The area of a regular pentagon with side length 3 should be approximately 7.07\"\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef checkSum(n):\n    sum1 = divSum(n)\n    sum2 = divSum(sum1)\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n\nn = int(input(\"Enter a number: \"))\nif checkSum(n):\n    print(f\"{n} is a perfect number\")\nelse:\n    print(f\"{n} is not a perfect number\") ",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and ord(str1[i]) == (i+97) or (i+65):\n            count += 1\n    return count\n\n# example usage\nstr1 = \"Hello World\"\nprint(count_char_position(str1) # Output: 2 ",
        "generated_testcode": "assert count_char_position(\u201cHello\u201d) == 2 # Testcase 1\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2==0:\n                count += 1\n    return count\n#Example:\n#Input: A = [1,2,3,4,5,6], N = 4\n#Output: 6 ",
        "generated_testcode": "assert find_even_Pair(A=[1,2,3,4,5,6,7,8],N=4) == 2 # Returns 2 because (1^3) and (5^7) are the only pairs with xor as an even number. ",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 1\n    while (power < n): \n        power <<= 1\n    return power \n\n# Test the function with some examples\nn1 = 100\nprint(next_Power_Of_2(n1))\n\nn2 = 16\nprint(next_Power_Of_2(n2)) ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq=0\n    for i in a:\n        if i==x:\n            freq+=1\n    return freq\narr=[1,2,3,4,5,2,6,7,8,2,9,2,0,2,2,3,4,2]\nprint(frequency(arr,2))  #input array and number to be searched for its frequency ",
        "generated_testcode": "assert frequency(a,x) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pell = [0, 1]\n    for i in range(2, n+1):\n        pell.append(2*pell[i-1] + pell[i-2])\n    return pell[n]\n\n# Test the function\nprint(get_pell(10)) # Should print 58\nprint(get_pell(20)) # Should print 610\n\n\n# Write a function to calculate the nth fibonacci number.\ndef get_fibonacci(n):\n    fibonacci = [0, 1]\n    for i in range(2, n+1):\n        fibonacci.append(fibonacci[i-1] + fibonacci[i-2])\n    return fibonacci[n]\n\n# Test the function\nprint(get_fibonacci(10)) # Should print 55\nprint(get_fibonacci(20)) # Should print 6765\n\n# Write a function to calculate the nth lucas number.\ndef get_lucas(n):\n    lucas = [2, 1]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]\n\n# Test the function\nprint(get_lucas(10)) # Should print 123\nprint(get_lucas(20)) # Should print",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_list = 0                                                                                                                                                                                                          \n    for i in range(m, n+1):                                                                                                                                                                                             \n        sum_list += list1[i]                                                                                                                                                                                         \n    return sum_list                                                                                                                                                                                               \n                                                                                                                                                                                                             \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                           \nprint(sum_range_list(list1, 1, 3))                                                                                                                                                                               \nprint(sum_range_list(list1, 2, 5))                                                                                                                                                                              \nprint(sum_range_list(list1, 0, 4))                                                                                                                                                                               \nprint(sum_range_list(list1, 4, 7)) ",
        "generated_testcode": "assert sum_range_list(list1, 1, 3) == 10\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return 5 * a\n\n# Test the function with an example\nprint(perimeter_pentagon(3)) # Output: 15\n\n\n# Define a function to find the area of a pentagon\ndef area_pentagon(a):\n    return (5 * (a ** 2) / 4) * (3 ** (0.5))\n\n\n# Test the function with an example\nprint(area_pentagon(3)) # Output: 7.0710678111864579227\n\n\n# Define a function to find the perimeter of a hexagon\ndef perimeter_hexagon(a):\n    return 6 * a\n\n# Test the function with an example\nprint(perimeter_hexagon(4)) # Output: 24\n\n\n# Define a function to find the area of a hexagon\ndef area_hexagon(a):\n    return (3 * (3 ** 0.5) / 2) * (a ** 2)\n\n\n# Test the function with an example\nprint(area_hexagon(4)) # Output: 25.980796200455853993\n\n\n# Define a function to find the perimeter of an octagon\ndef perimeter_octagon(a):\n    return 8 * a\n\n# Test the function with an example\nprint(perimeter_octagon(3)) # Output: 24\n\n\n# Define a function to find the area of",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n\n# Write a function to find the area of a triangle given the base and height.\ndef area_triangle(base, height):\n    pass\n\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    n = len(s)\n    for i in range(n-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n\n# Test the function\ns = 'standardize'\nprint(count_occurance(s)) \ns = 'this student'\nprint(count_occurance(s)) \ns = 'hstd'\nprint(count_occurance(s)) \ns = 'std'\nprint(count_occurance(s)) \ns = 'stdstd'*3\nprint(count_occurance(s)) \ns = ''\nprint(count_occurance(s)) ",
        "generated_testcode": "assert count_occurance(s) == 2 # Test case 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ''.join(e for e in text if e.isalnum()) \n    return result \n\n#Example:\ntext = \"Hello! World. I am a string with special characters, #$%^&, to be removed.\"\nprint(remove_splchar(text)) # Output: \"HelloWorldIamastringwithspecialcharacterstoberemoved\" ",
        "generated_testcode": "assert remove_splchar(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello, World! 123\"\nexpected_output_string = \"HelloWorld123\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    d = {}\n    for key, value in l:\n        d.setdefault(key, []).append(value)\n    return d\n\n# Example usage:\n>>> group_keyvalue([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6)])\n{'a': [1, 3, 6], 'b': [2, 4], 'c': [5]}\n\n\n\nWrite a function to merge two dictionaries.\ndef merge_dicts(d1, d2):\n    return {**d1, **d2}\n\n\n# Example usage:\n>>> d1 = {'a': 1, 'b': 2, 'c': 3}\n>>> d2 = {'c': 4, 'd': 5, 'e': 6}\n>>> merge_dicts(d1, d2)\n{'a': 1, 'b': 2, 'c': 4, 'd': 5, 'e': 6}\n\n\n\nWrite a function to check if a dictionary contains a certain key.\ndef has_key(d, key):\n    return key in d\n\n# Example usage:\n>>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> has_key(d, 'a')\nTrue\n>>> has_key(d, 'd')\nFalse\n\n\nWrite a function to reverse a dictionary.",
        "generated_testcode": "assert group_keyvalue([\"apple:3\", \"banana:2\", \"orange:4\", \"apple:1\", \"orange:3\"]) == {\"apple\": [\"3\", \"1\"], \"banana\": [\"2\"], \"orange\": [\"4\", \"3\"]}\n\n\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for i in str1:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(' or i == '}' and stack[-1] == '{' or i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\nprint(is_valid_parenthese('()'))\nprint(is_valid_parenthese('()[]{}]'))\nprint(is_valid_parenthese('(}'))\nprint(is_valid_parenthese('({[]})')) \nprint(is_valid_parenthese('([]()[]')) \nprint(is_valid_parenthese('([{}])')) \nprint(is_valid_parenthese('([][][][]()')) \nprint(is_valid_parenthese('([{})]') )",
        "generated_testcode": "assert is_valid_parenthese(\"()\" ) == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    p = a+b+c\n    return p\n\n#Test the function with examples\nprint(perimeter_triangle(3,4,5) == 12) #True\nprint(perimeter_triangle(5,12,13) == 30) #True\nprint(perimeter_triangle(2,2,7) == 11) #True ",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n\n# Write a function to find the area of a triangle given the base and height.\ndef area_triangle(base, height):\n    pass\n\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_num = R\n    for i in range(L,max_num):\n        for j in range(i+1,max_num+1):\n            lcm = i*j\n            if lcm > R:\n                break\n            if L <= lcm <= R:\n                return [i,j]\n                \n    return None\n\n# example usage\nprint(answer(1,20)) #[2,4]\nprint(answer(1,10)) #[5,6]\nprint(answer(1,12)) #[4,6]\nprint(answer(1,17)) #[8,12]\nprint(answer(1,18)) #[9,12]\nprint(answer(1,20)) #[10,20] ",
        "generated_testcode": "assert answer(1, 10) == (1, 10)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for pattern in patterns:\n        if pattern in text:\n            result.append(pattern)\n    return result\n# Example usage:\ntext = \"Python is a high-level, general-purpose programming language.\"\npatterns = [\"Python\",\"high-level\",\"purpose\"]\nprint(string_literals(patterns,text)) # Output: ['Python', 'high-level', 'purpose'] ",
        "generated_testcode": "assert string_literals([\"apple\", \"banana\", \"orange\"], \"I love apples and bananas but not oranges\") == [\"apple\", \"banana\"]\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num=x\n    keith_list=[1,2,3,4,5,7,11,13,19,23,34,43,55,89,106]\n    if x in keith_list:\n        return True\n    else:\n        for i in range(6,x):\n            keith_list.append(keith_list[i-6]+keith_list[i-5]+keith_list[i-4]+keith_list[i-3]+keith_list[i-2]+keith_list[i-1])\n        if keith_list[-1]==num:\n            return True\n        else:\n            return False\n\n# test the function with some examples\nprint(is_num_keith(1)) # should return True\nprint(is_num_keith(7)) # should return True\nprint(is_num_keith(100)) # should return False\nprint(is_num_keith(28)) # should return False\nprint(is_num_keith(106)) # should return True\nprint(is_num_keith(130)) # should return True\nprint(is_num_keith(200)) # should return False\nprint(is_num_keith(300)) # should return False\nprint(is_num_keith(301)) # should return True\nprint(is_num_keith(4058)) #",
        "generated_testcode": "assert is_num_keith(19) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    from math import sin, cos, sqrt, atan2, radians\n    R = 6371  # Radius of the earth in km\n    lat1, lon1, lat2, lon2 = radians(slat), radians(slon), radians(elat), radians(elon)\n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a)) \n    return R * c * 10000  # Distance in meter\n\n# Example usage:\ndistance_lat_long(45,10,46,10) # Should return 785390.86788778840514 km\n\n\n# The formula used is the great circle distance formula, derived from the haversine formula. \n# It's based on the fact that you can approximate the Earth as a sphere, and use \n# trigonometry to calculate the shortest distance between two points on the surface of \n# that sphere. The function takes in the latitudes and longitudes of the two points in \n# degrees, converts them to radians, and uses the haversine function to calculate the \n# distance in kilometers. It then multiplies by 10000 to get the",
        "generated_testcode": "assert distance_lat_long(40, -80, 50, -120) == 47.34\n\n# Write a function to calculate the area of a triangle given the base and height.\ndef triangle_area(base, height):\n    pass\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n1 = len(str1) \n    n2 = len(str2) \n    j = 0\n    for i in range(min(n1, n2): \n        if str1[i] != str2[i]: \n            break\n        else: \n            j += 1\n    return str1[:j]\n  \ndef common_prefix(strs): \n    if not strs: \n        return \"\"\n    prefix = strs[0] \n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i]) \n        if not prefix: \n            return \"\"\n    return prefix ",
        "generated_testcode": "assert common_prefix_util([\"abcdef\", \"abcef\", \"abxyz\"]), \"abc\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    uppercase_regex = re.compile(r'[A-Z]')\n    lowercase_regex = re.compile(r'[a-z]')\n    special_regex = re.compile(r'[!@#$%^&*(),.?\":{}|<>]')\n    numeric_regex = re.compile(r'\\d')\n    uppercase_list = re.findall(uppercase_regex, string)\n    lowercase_list = re.findall(lowercase_regex, string)\n    special_list = re.findall(special_regex, string)\n    numeric_list = re.findall(numeric_regex, string)\n    print(\"Uppercase Characters:\", uppercase_list)\n    print(\"Lowercase Characters:\", lowercase_list)\n    print(\"Special Characters:\", special_list)\n    print(\"Numeric Characters:\", numeric_list)\n\nfind_character(\"Abc@1234\") ",
        "generated_testcode": "assert find_character(string) == (2, 3, 1, 4) # Test case 1\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == k:\n                count += 1\n                break\n    return count\n\n# Test the function with sample inputs:\narr = [1, 5, 3, 6, 2, 7, 9, 8, 4, 5]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))  # Output: 2\n\n\narr = [1, 5, 3, 6, 2, 7, 9, 8, 4]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))  # Output: 1\n\narr = [1, 5, 3, 6, 2, 7, 9, 8, 4, 5, 10]\nn = len(arr)\nk = 4\nprint(count_pairs(arr, n, k))  # Output: 2 ",
        "generated_testcode": "assert count_pairs(arr=[1, 5, 9, 3, 6, 8, 12, 4, 10], n=6, k=3) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for i in list:\n        if i > num:\n            new_list.append(i)\n    return new_list\n\n# Test the function with an example\nmy_list = [2, 5, 8, 3, 11, 26, 4, 9, 7, 13]\nprint(greater_specificnum(my_list,5)) #[8, 11, 26, 9, 13] ",
        "generated_testcode": "assert greater_specificnum(list(range(10), 5) == [6, 7, 8, 9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    a: the coefficient of x^2\n    b: the coefficient of x\n    c: the constant term\n    returns the x and y coordinates of the focus\n    \"\"\"\n    xf = -b / (2 * a)\n    yf = a * xf ** 2 + b * xf + c\n    return (xf, yf)\n\n#test case\nprint(parabola_focus(1, 2, 3)) #(-1, 2) ",
        "generated_testcode": "assert parabola_focus(1, -14, 10) == (3, 0)\n\n\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    # create an empty list to store the results\n    results = []\n    # loop through each pattern\n    for pattern in patterns:\n        # search the pattern in the text and return the matches\n        matches = re.findall(pattern, text)\n        # append the matches to the results list\n        results.extend(matches)\n    # return the results\n    return results\n\n# example usage:\ntext = \"hello world, this is a test string\"\npatterns = [\"hello\", \"test\"]\nprint(check_literals(text, patterns))  # output: ['hello', 'test'] ",
        "generated_testcode": "assert check_literals(\n    \"The quick brown fox jumps over the lazy dog.\",\n    [\"the\", \"fox\", \"dog\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    L = [[0] * (n + 1) for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    index = L[m][n] \n    lcs = [\"\"] * (index + 1) \n    lcs[index] = \"\" \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs[index-1] = X[i-1] \n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    return ''.join(lcs)\n\n# Test\nX = \"ABCDGH\"\nY = \"AEDFHR\"\nm = len(X) \nn = len(Y) \nprint(\"",
        "generated_testcode": "assert longest_common_subsequence([\"ABCDGH\", \"AEDFHR\"], 4, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        j = int((n - i**2)**0.5)\n        if i**2 + j**2 == n:\n            return True\n    return False\n\n# example usage\nprint(prod_Square(10))\nprint(prod_Square(11))\nprint(prod_Square(121)) ",
        "generated_testcode": "assert prod_Square(16) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Traverse the array to make arr[i] as arr[arr[i]-1] \n    for i in range(n): \n        while 1 <= arr[i] <= n and arr[i] != arr[arr[i]-1]: \n            j = arr[i]-1\n            arr[i], arr[j] = arr[j], arr[i] \n    # Find the first positive missing positive number \n    for i in range(n): \n        if arr[i] != i+1: \n            return i+1\n    return n+1\n# driver code \narr = [1,2,0,3]\nn = len(arr) \nprint(first_Missing_Positive(arr,n)) # Output: 4 ",
        "generated_testcode": "assert first_Missing_Positive(arr=[1,2,0],n=3) == 3\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(x1,x2+1): \n        for j in range(y1,y2+1): \n            if (i == x1 or i == x2 or j == y1 or j == y2): \n                count += 1\n    return count \nx1 = 1\ny1 = 1\nx2 = 4\ny2 = 4\nprint(count_Intgral_Points(x1,y1,x2,y2) )# Output: 12 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,4,4) == 16\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return \"30 days\"\n    elif monthname3 == \"February\":\n        return \"28 or 29 days\"\n    elif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return \"31 days\"\n    else:\n        return \"31 days\"\n\n#test the function\nprint(check_monthnumber(\"February\")) # output: 28 or 29 days\nprint(check_monthnumber(\"June\")) # output: 30 days ",
        "generated_testcode": "assert check_monthnumber(monthname3) == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    flag1=False \n    flag2=False \n    for i in str: \n        if i.isalpha(): \n            flag1=True \n        elif i.isdigit(): \n            flag2=True \n        if flag1 and flag2: \n            return True\n    return False \n    \n#Example \nprint(check_String('Hello123')) #True \nprint(check_String('Hello world!')) #False ",
        "generated_testcode": "assert check_String(\u201cHello123\u201d) == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Converting tuple to set \n    set_tup = set(test_tup)\n    # Converting set to tuple\n    new_tup = tuple(set_tup)\n    # Returning the new tuple\n    return new_tup \n# Test the function\ntest_tup = (5, 3, 1, 6, 2, 3, 6, 4, 5)\nprint(remove_tuple(test_tup)) ",
        "generated_testcode": "assert remove_tuple(('apple', 'banana', 'apple', 'orange', 'apple', 'grapes', 'orange') == ('apple', 'banana', 'orange', 'grapes')\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal_number = 0  \n    base = 1\n    while (n > 0):  \n        decimal_number += (n % 10) * base\n        n = n // 10\n        base = base * 8\n    return decimal_number\n\n#Test the function with an example\noctal_number = 123\nprint(octal_To_Decimal(octal_number)) # Output: 83 ",
        "generated_testcode": "assert octal_To_Decimal(123) == 83\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    l = 0 \n    h = n-1\n    res = -1 \n    while l<=h: \n        mid = (l+h)//2 \n        if arr[mid] == x: \n            res = mid \n            h = mid-1 \n        elif arr[mid]>x: \n            h = mid-1\n        else: \n            l = mid+1\n    return res \n\n# Driver code to test the above function \narr = [1,2,3,4,5,5,5,5,5,6,7,8,9] \nx = 5\nn = len(arr) \nprint(first(arr,x,n)) # Output: 3 ",
        "generated_testcode": "assert first(arr,x,n) == 4\n# Test case 1: arr = [1,2,3,4,4,4,4,5,6,7], x = 4, n = 7\n# Output: 2\n\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [x for x in test_list if len(x) != K]\n\n\n# test the function with sample data\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13), (14, 15, 16), (17, 18, 19, 20)]\nK = 3\nprint(remove_tuples(test_list, K)) # output: [(8, 9), (10, 11, 12, 13)]\n\n\n# the function removes all the tuples with length K and returns a new list with the remaining tuples\n# it uses a list comprehension to iterate through the original list and checks the length of each tuple, if it's not equal to K, it's added to the new list\n# this is a more concise version of the following code:\nnew_list = []\nfor x in test_list:\n    if len(x) != K:\n        new_list.append(x)\nprint(new_list) # output: [(8, 9), (10, 11, 12, 13)] ",
        "generated_testcode": "assert remove_tuples([(1, 2, 3), (4, 5, 6, 7), (9, 10), (11, 12, 13, 14), (15, 16, 17, 18)], 2) == [(4, 5, 6, 7), (11, 12, 13, 14)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1):\n            result.append(test_tup1[i] ** test_tup2[i])\n        return tuple(result)\n    else:\n        return \"Invalid input\"\n\n# example:\nt1 = (2, 3, 4)\nt2 = (3, 2, 2)\nprint(find_exponentio(t1, t2)) # Output: (8, 9, 16) ",
        "generated_testcode": "assert find_exponentio((2, 3) == 8\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a < b: \n        a, b = b, a \n    d = 2*(a**2) \n    area = (b**2)*(a-b)**2/(a**2+b**2)\n    return area ",
        "generated_testcode": "assert largest_triangle(2,3) == 3.6, \"Test 1 failed\"\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 1 \n    while (power <= n): \n        power = power * 2\n    return power // 2\n\n# Example usage: \nn = 16\nprint(highest_Power_of_2(n)) # Output: 8\n\n\nn = 13\nprint(highest_Power_of_2(n)) # Output: 8\n\n\nn = 25\nprint(highest_Power_of_2(n)) # Output: 16 ",
        "generated_testcode": "assert highest_Power_of_2(16) == 16\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pos_list = []\n    max_val = max(list1)\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            pos_list.append(i)\n    return pos_list\n\n# test the function\nprint(position_max([1, 2, 3, 4, 5, 5, 6, 7, 5, 4, 2, 9, 5, 5]))  # Output: [3, 4, 6, 7] ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [3, 4]\n\n\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(set(lst)) == 1: \n        return True \n    else: \n        return False \n#Sample Input:\nlst = [1, 1, 1, 1, 1, 1, 1] \n#Sample Output:\nTrue ",
        "generated_testcode": "assert chkList([\"apple\", \"apple\", \"apple\", \"apple\"]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\ndef remove_odd(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 != 0:\n            result += str1[i]\n    return result\n\nstr1 = input(\"Enter a string: \")\nprint(\"Original string: \", str1)\nprint(\"String with even characters removed: \", remove_even(str1))\nprint(\"String with odd characters removed: \", remove_odd(str1)) ",
        "generated_testcode": "assert remove_even(None) == None\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    xor_value = n1 ^ n2 \n    distance = 0 \n    while xor_value > 0 : \n        distance += xor_value & 1 \n        xor_value >>= 1 \n    return distance\n\n#Test the function with example values of n1 and n2\nn1 = 25\nn2 = 30\nprint(\"The Hamming distance between\",n1,\"and\",n2,\"is:\",hamming_Distance(n1,n2)) ",
        "generated_testcode": "assert hamming_Distance(12, 23) == 3\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in s : \n        if i == c : \n            count += 1\n    return count ",
        "generated_testcode": "assert count(s,c) == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_list = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inv_list.append((test_tup[i], test_tup[j]))\n    return inv_list\n\n# Test the function with a sample tuple\ntest_tup = (3, 8, 1, 5, 2, 6, 7)\nprint(inversion_elements(test_tup))  # Output: [(3, 1), (3, 2), (3, 5), (8, 1), (8, 2), (8, 5), (8, 7), (1, 2), (5, 2), (5, 7), (6, 2)] ",
        "generated_testcode": "assert inversion_elements(()) == []\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        else:\n            result += (test_tup[i]+test_tup[i+1],)\n    return result\n\n# Test the function with sample tuple\ntest_tup = ('Hello', 'Python', 'World', '!', 'Hey', 'There')\nprint(concatenate_elements(test_tup)) ",
        "generated_testcode": "assert concatenate_elements(('abc') == 'abcabc'\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str) \n  \n    # Create and initialize DP table \n    dp = [[0 for i in range(n+1)] for j in range(n+1)] \n  \n    # Fill the dp table (similar to LCS table) \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if (str[i-1] == str[j-1] and i != j): \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n  \n    return dp[n][n] ",
        "generated_testcode": "assert find_longest_repeating_subseq(\u201cabcabc\u201d) == 2\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = r\"^\\d+\\.\\d{1,2}$\"\n    return bool(re.match(pattern, num)) ",
        "generated_testcode": "assert is_decimal(12.34) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Removes the smallest element from the heap and inserts a new element in its place.\n    Args:\n    heap: The heap on which operations are to be performed.\n    a: The new element to be inserted.\n    Returns:\n    The updated heap after removing the smallest element and inserting the new element.\n    \"\"\"\n    smallest = heap[0]\n    del heap[0]\n    heapq.heappush(heap,a)\n    return smallest\n\n#Example usage:\nimport heapq\nheap = [5,4,3,6,2,7,1,8]\nheapq.heapify(heap)\nprint(heap_replace(heap,0)) # Output: 1\nprint(heap) # Output: [2, 4, 6, 3, 7, 0, 8] ",
        "generated_testcode": "assert heap_replace(heap,a) == expected_output\n# Test case 1\nheap = [5, 3, 8, 1, 6, 2, 7]\na = 4\nexpected_output = [5, 4, 8, 1, 6, 2, 7, 3]\nheap_replace(heap,a)\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    regex = re.compile(r'^[a-zA-Z0-9]*$')\n    if regex.match(string):\n        return True\n    else:\n        return False\n\n#Example usage:\nprint(is_allowed_specific_char(\"Hello123\")) # True\nprint(is_allowed_specific_char(\"Hello_World\")) # False\nprint(is_allowed_specific_char(\"Hello world\")) # False ",
        "generated_testcode": "assert is_allowed_specific_char(string) == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if (i & (i<<1) and i & (i<<2)):\n            count += 1\n    return count\nprint(count_Num(10)) #Test. Should return 2 as only 5 and 9 have both 1st and 2nd bits set. ",
        "generated_testcode": "assert count_Num(10) == 2 # 1010 in binary is 5, so there are two numbers whose 1st and 3rd bits are set. ",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initializing sum variable\n    sum = 0\n    # loop to iterate through n natural numbers\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n\n# testing the function\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of fourth power of first\", n, \"natural numbers is:\", fourth_Power_Sum(n)) ",
        "generated_testcode": "assert fourth_Power_Sum(4) == 100\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples of strings as input and returns a new tuple consisting of all the elements of the first tuple followed by all the elements of the second tuple.\n\n    \"\"\"\n    return test_tup1 + test_tup2\n\n\n# testing the function\nprint(concatenate_strings((\"Hello\", \"World\")) #(\"Hello\", \"World\"))\nprint(concatenate_strings((\"John\", \"Doe\")) #(\"John\", \"Doe\")\nprint(concatenate_strings((\"Chicago\", \"Bangles\")) #(\"Chicago\", \"Bangles\")\nprint(concatenate_strings((\"Python\", \"Programming\")) #(\"Python\", \"Programming\") ",
        "generated_testcode": "assert concatenate_strings((\"Hello\", \"World\") == \"HelloWorld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    degree = radian * 180 / pi\n    return degree\n\n#Test the function with radian value 1.57\nprint(degree_radian(1.57)\n#The output should be approximately 90.01322\n\n\n#Write a function to convert degrees to radians.\ndef radian_degree(degree):\n    pi = 22/7\n    radian = degree * pi / 180\n    return radian\n\n#Test the function with degree value 90\nprint(radian_degree(90)\n#The output should be approximately 157.08",
        "generated_testcode": "assert degree_radian(3.14159) == 176.72\n\n\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"Decode a run-length encoded list\"\"\"\n    decoded_list = []\n    i = 0\n    while i < len(alist):\n        decoded_list.extend([alist[i+1]] * alist[i])\n        i += 2\n    return decoded_list\n\n\n# Example usage:\nencoded_list = [2, 1, 4, 3, 2, 5, 1, 6, 3]\nprint(decode_list(encoded_list))  # Output: [1, 1, 4, 4, 4, 5, 6, 6, 6] ",
        "generated_testcode": "assert decode_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(list1) > len(list2):\n        return False\n    \n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n# Example usage:\nlist1 = [[1,2,3],[4,5,6]]\nlist2 = [[4,5,6],[1,2,3], [7,8,9]]\nprint(check_subset_list(list1, list2)) # Output: True\n\n\nlist1 = [[1,2,3],[4,5,6]]\nlist2 = [[1,2,3], [7,8,9]]\nprint(check_subset_list(list1, list2)) # Output: False ",
        "generated_testcode": "assert check_subset_list([\"apple\", \"banana\", \"cherry\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n\n#test the function with some examples\nprint(first_Repeated_Char(\"hello\")) #should return 'l'\nprint(first_Repeated_Char(\"abcd\")) #should return None\nprint(first_Repeated_Char(\"abca\")) #should return 'a' ",
        "generated_testcode": "assert first_Repeated_Char(\"abcabc\") == \"a\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return abs(A-B) \n    \n#Example:\n#Input: A=10,B=20\n#Output: 10\n#Explanation: The minimum operations required to make 10 and 20 equal is 10.\n#We can add 10 to 10 or subtract 10 from 20 to make them equal. ",
        "generated_testcode": "assert min_Operations(10, 15) == 5\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Step 1: Convert the tuple to a list\n    test_list = list(test_tup)\n\n    # Step 2: Sort the list in descending order\n    test_list.sort(reverse=True)\n    # Step 3: Slice the first K elements\n    max_K = test_list[:K]\n    # Step 4: Sort the list in ascending order\n    test_list.sort()\n    # Step 5: Slice the first K elements\n    min_K = test_list[:K]\n    # Step 6: Return a tuple of (max_K, min_K)\n    return (tuple(max_K), tuple(min_K))\n\n# Example usage:\n# test_tup = (2, 5, 1, 7, 3, 9, 8, 4, 6)\n# K = 3\n# print(extract_min_max(test_tup, K))  # Output: ((9, 8, 7), (1, 2, 3)) ",
        "generated_testcode": "assert extract_min_max(('apple', 2) == None\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 0:\n        return text\n    count = 0\n    for i in range(len(text)-1, -1, -1):\n        if text[i] in [\".\", \",\", \" \"]:\n            text = text[:i] + \":\" + text[i+1:]\n            count += 1\n            if count == n:\n                break\n    return text\n\n# Example usage:\ntext = \"Hello, world, this is a test. Another test, another test.\"\nn = 2\nresult = replace_max_specialchar(text, n)\nprint(result) # Output: \"Hello: world, this is a test. Another: test, another test.\" ",
        "generated_testcode": "assert replace_max_specialchar(text=\"Hello, world!\", n=1) == \"Hello: world!\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the first even number from a list of numbers.\n    If there are no even numbers, return None.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test cases\nprint(first_even([3, 6, 1, 1, 7, 4, 8, 5, 9, 2, 10])) # Output: 6\nprint(first_even([1, 3, 5, 7, 9])) # Output: None ",
        "generated_testcode": "assert first_even(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple as input and returns True if all the elements in the tuple have same data type, otherwise returns False.\n    \"\"\"\n    data_type = type(test_tuple[0]\n    for element in test_tuple:\n        if not isinstance(element, data_type):\n            return False\n    return True\n\n# Test the function with example tuples\nprint(check_type((1, 2, 3, 4, 5)) # True\nprint(check_type((\"hello\", \"world\", \"python\")) # True\nprint(check_type(1, \"2\", 3, \"four\")) # False\nprint(check_type((\"hello\", \"world\", 3)) # False ",
        "generated_testcode": "assert check_type(()) == True\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an array arr and an integer x as input and returns True if x is present in the array arr more than n/2 times, else returns False.\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n\n# Testing the function\narr = [1, 2, 3, 4, 5, 5, 5, 5, 5, 6, 7, 8, 9]\nx = 5\nn = len(arr)\nprint(is_majority(arr, n, x))  # Output: True\n\n\n# Testing for the case when x is not present more than n/2 times\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 5\nn = len(arr)\nprint(is_majority(arr, n, x))  # Output: False ",
        "generated_testcode": "assert is_majority(arr=[1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6], n=7, x=4) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count \n#Example:\n# Input: n = 9\n# Output: 2\n# Explanation: Binary representation of 9 is 1001, which has 2 set bits (1 and 0).\n\n# Example 2:\n# Input: n = 12\n# Output: 2\n# Explanation: Binary representation of 12 is 11000, which has 2 set bits (1 and 0). ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if low<=high: \n        mid = (low + high) // 2\n        if arr[mid] < arr[mid+1]: \n            return arr[mid]\n        if arr[mid] < arr[0]: \n            return find_Min(arr,mid+1,high) \n        else: \n            return find_Min(arr,low,mid-1) \n    return arr[high] ",
        "generated_testcode": "assert find_Min(arr=[4,5,6,7,0,1,2,3],low=0,high=4) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n#test the function\nprint(odd_values_string(\"Hello, world!\"))  # Expected output: \"Hlowrd\" ",
        "generated_testcode": "assert odd_values_string(input_string) == expected_output_string\n\n# For example, if input_string is \"Hello World\", the expected output is \"HloWrd\"\n# The first character \"H\" has index 0, the second character \"e\" has index 1, the third character \"l\" has index 2, and so on. \n# Since 1 and 3 are odd indices, they are removed from the string. ",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if a<b and a<c: \n        return a \n    elif b<c: \n        return b \n    else: \n        return c \n\nprint(min_of_three(2,4,6)) # Output: 2 \nprint(min_of_three(4,2,6)) # Output: 2 \nprint(min_of_three(2,6,4)) # Output: 2 \nprint(min_of_three(6,2,4)) # Output: 2 \nprint(min_of_three(6,20,12)) # Output: 6 ",
        "generated_testcode": "assert min_of_three(5, 10, 15) == 5\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(l, r+1): \n        if n & i: \n            return False\n    return True \n      \n# Taking input from user  \nn = int(input(\"Enter the number: \")) \nl = int(input(\"Enter the starting bit position: \")) \nr = int(input(\"Enter the ending bit position: \")) \n  \n# Calling the function to check whether all the bits are unset or not  \nif all_Bits_Set_In_The_Given_Range(n, l, r): \n    print(\"All bits are unset\") \nelse: \n    print(\"Bits are not unset\") ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    return arr\n\n\n# Test the function with an example\narr = [-1, 2, -3, 4, 5, -6, 7, 8, -9, 10]\nn = len(arr)\nprint(re_arrange_array(arr, n))  # Output: [-1, -3, -6, -9, 2, 4, 5, 7, 8, 10] ",
        "generated_testcode": "assert re_arrange_array(arr=[-1, 2, -3, 4, 5, 6, -2, 8, -7, 0, 9], n=7) == [-1, -3, -2, -7, 0, 2, 4, 5, 6, 8, 9]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(\" \",char)\n#Test the function with sample inputs\nprint(replace_blank(\"Python is fun\",\"*\"))\nprint(replace_blank(\"Hello World\",\"%\"))\nprint(replace_blank(\"Learning Python is easy\",\"-\"))\n\n\n#Output:\n#Python*is*fun\n#Hello%World\n#Learning-Python-is-easy ",
        "generated_testcode": "assert replace_blank(\"I am a    string with    blank spaces\",'*') == \"I*am*a****string*with****blank*spaces\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(n-2, -1, -1, -1): \n        for j in range(i+1): \n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n    return tri[0][0] \n\nn = int(input(\"Enter the number of rows: \"))\ntri = [] \nfor i in range(n): \n    row = list(map(int, input().split()) ) \n    tri.append(row) \nprint(max_sum(tri, n)) ",
        "generated_testcode": "assert max_sum(\n    [\n        [1, 2, 3],\n        [4, 5, 6, 7],\n        [8, 9, 10, 11, 12],\n        [13, 14, 15, 16, 17]\n    ], 3) == 30\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n > len(list1):\n        return \"Error: n is larger than the list size\"\n    else:\n        list1.sort(reverse=True)\n        return list1[:n]\n\n\n# Test the function\nlist1 = [1,3,4,5,6,8,2,9,10,13,12,14]\nn = 4\nprint(larg_nnum(list1,n)) # Output: [14, 13, 12, 10, 9] ",
        "generated_testcode": "assert larg_nnum(list1,n) == expected_output\n\n# Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n    pass\n\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return 2*3.14*r*h\n#testing the function\nprint(lateralsuface_cylinder(5,10))\nprint(lateralsuface_cylinder(2.5,20))\nprint(lateralsuface_cylinder(7.8,12))\nprint(lateralsuface_cylinder(10,15.5)\n\n#output\n#62.80\n#157.06\n#325.17\n\n#I hope this helps ",
        "generated_testcode": "assert lateralsuface_cylinder(5, 10) == 78.53981634\n\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a parameter l which represents the length of a cube's edge\n    and calculates its volume.\n    \"\"\"\n    volume = l ** 3\n    return volume\n\n# Test the function with a few examples\nprint(volume_cube(3)) # Output: 27\nprint(volume_cube(5)) # Output: 125\nprint(volume_cube(10)) # Output: 10000\n\n\n# The formula to calculate the volume of a cube is the length of any edge to the power of 3\n# The function first calculates the cube of the length and then returns the result. ",
        "generated_testcode": "assert volume_cube(3) == 27\n\n# Write a function to find the volume of a rectangular prism.\ndef volume_rectangular_prism(l, w, h):\n    pass\n\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return n | 0x55555555555\n\n# Example:\n# Input: n = 20 (binary representation: 101000)\n# Output: 30 (binary representation: 1111110)\n# Explanation: In the binary representation of 20, the even bits are 10100, and after setting the even bits, the number becomes 111110. ",
        "generated_testcode": "assert even_bit_set_number(10) == 10 # 1010 is 1010 in binary, so all even bits are set\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return N*(N-1)*(N-2)//6 - (K-1)*(K-2)//2\n\n#explanation:\n#For an equilateral triangle, we know that the number of triangles that can be formed within it is (n*(n-1)*(n-2)/6.\n#Now, we need to exclude the triangles that are not possible to form due to the obstacles. \n#The number of triangles that are excluded can be calculated by selecting 3 vertices from the K obstacles and joining them. \n#The number of ways to select 3 vertices from K obstacles is C(K,3) = (K*(K-1)*(K-2)//6. \n#Therefore, the number of possible triangles is (n*(n-1)*(n-2)/6 - (K-1)*(K-2)//2.\n#The // operator is used to perform integer division. ",
        "generated_testcode": "assert No_of_Triangle(5,3) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = {}\n    for record in test_list:\n        if record[0] not in result:\n            result[record[0]] = {}\n        if record[1] not in result[record[0]]:\n            result[record[0]][record[1]] = 1\n        else:\n            result[record[0]][record[1]] += 1\n    return result\n\n# Test cases\ntest_list1 = [(1, 'apple'), (1, 'banana'), (2, 'mango'), (3, 'apple'), (4, 'banana'), (4, 'orange'), (5, 'apple')]\ntest_list2 = [(1, 'apple'), (1, 'banana'), (1, 'mango'), (2, 'apple'), (3, 'banana'), (4, 'orange'), (4, 'orange')]\nprint(check_occurences(test_list1)) # Should print {1: {'apple': 1, 'banana': 1, 2: {'mango': 1}, 3: {'apple': 1}, 4: {'banana': 1, 'orange': 1}, 5: {'apple': 1}}\nprint(check_occurences(test_list2)) # Should print {1: {'apple': 1, 'banana': 1, 'mango': 1, 2: {'apple': 1}, 3: {'banana': 1}, 4: {'orange': 2}} ",
        "generated_testcode": "assert check_occurences(test_list) == True\n\n# Test case 1: All records are unique\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n=len(str)\n    count=0\n    for i in range(n):\n        for j in range(i,n):\n            if str[i:j+1]!='':\n                count+=1\n    return count\nprint(number_of_substrings('abc')) #1+2+3=6\nprint(number_of_substrings('xyz')) #1+2+3=6\nprint(number_of_substrings('abcd')) #1+2+3+4=10\nprint(number_of_substrings('xyz')) #1+2+3=6\nprint(number_of_substrings('abcdxyz')) #1+2+3+4+5+6+7+8=28 ",
        "generated_testcode": "assert number_of_substrings(\u201cabc\u201d) == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def helper(m,n,memo):\n        if n == 1:\n            return m+1\n        if n in memo:\n            return memo[n]\n        total = 0\n        for i in range(1,m+1):\n            total += helper(i,n-1,memo)\n        memo[n] = total\n        return total\n    memo = {}\n    return helper(m,n,memo)\n\n# Testing the function with example inputs\nprint(get_total_number_of_sequences(3,3)) # Output: 8\nprint(get_total_number_of_sequences(5,3)) # Output: 31\nprint(get_total_number_of_sequences(5,5)) # Output: 65\nprint(get_total_number_of_sequences(10,5)) # Output: 143098\nprint(get_total_number_of_sequences(10,10)) # Output: 48623333400",
        "generated_testcode": "assert get_total_number_of_sequences(5, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1\n\n#Test the function with sample inputs\nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [10,11,12]\nprint(replace_list(list1,list2)) #[1, 2, 3, 4, 5, 6, 7, 10, 11, 12] ",
        "generated_testcode": "assert replace_list([\"a\",\"b\",\"c\"],[\"d\",\"e\"]) == [\"a\",\"b\",\"d\",\"e\"]\n\n# Test case 1: Test if the function replaces the last element of the list with another list\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr = [['*' for j in range(o)] for i in range(n)]\n    return [arr for k in range(m)]\n\n#example: array_3d(3,2,4) will return a 3d array of dimensions 3x2x4 with each element as '*'\n#[['****', '****'], ['****', '****'], ['****', '****']]\n\n\n#write a function to print the given 3d array\ndef print_3darray(arr):\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            for k in range(len(arr[i][j])):\n                print(arr[i][j][k], end='')\n            print()\n        print()\n\n#example: print_3darray([['****', '****'], ['****', '****'], ['****', '****']]) will print:\n#****\n#****\n#\n#****\n#****\n#\n#****\n#**** \n\n\n#write a function to count the number of '*' in the given 3d array\ndef count_stars(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i]):\n            for k in range(len(arr[i][j]):\n                if arr[i][j][k] == '*':\n                    count += 1\n    return count ",
        "generated_testcode": "assert array_3d(2,3,4) == [\n                        [\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ],\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ]\n                        ]\n                    ]\n\n# Write a function to print the above 3d array in a matrix form.\ndef print_3d_array(arr):\n    pass\n\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# test the function\nprint(count_charac(\"hello\")) # output: 5 ",
        "generated_testcode": "assert count_charac(\u201chello\u201d) == 5\n\n# Write a function to count the number of vowels in a string.\ndef count_vowels(str1):\n    pass\n\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    lst.sort(key=lambda x:x[0])\n    return lst\n\n#Test the function with an example\nlst = [(3, 'apple'), (1, 'banana'), (2, 'pear'), (2, 'orange'), (3, 'grapes'), (1, 'kiwi')]\nprint(sort_on_occurence(lst)) # Output: [(1, 'banana'), (1, 'kiwi'), (2, 'pear'), (2, 'orange'), (3, 'apple'), (3, 'grapes')] ",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (2, 1), (2, 3), (1, 1), (3, 2)] == [(1, 2), (1, 1), (2, 3), (3, 4), (2, 1)]\n\n# Test case 1: Test the function with a list of tuples with positive integers\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while (i * i <= N): \n        i += 1\n    return i * i \n\n# Test the function with some example inputs\nprint(next_Perfect_Square(121)) \nprint(next_Perfect_Square(150)) \nprint(next_Perfect_Square(250)) ",
        "generated_testcode": "assert next_Perfect_Square(121) == 144\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    if n == 1: \n        return max(0, arr[0])\n    if n == 2: \n        return max(arr[0], arr[1])\n    # Initialize two variables to store maximum sum with and without  \n    # including the first element of the array \n    incl = arr[0]\n    excl = 0\n    excl_new = 0\n    for i in range(1, n): \n        # Update incl with the maximum of including the previous first \n        # element or excluding the previous first element \n        new_incl = excl + arr[i] \n        new_excl = max(incl, excl_new) \n        # Update excl to store the previous sum of excluding the element \n        excl = excl_new\n        # Update excl_new to store the current sum of including the element \n        excl_new = new_incl \n    return max(incl, excl_new) \n\narr = [-2, 1, -3, 4, -1, -2, 1, 5, -3] \nn = len(arr) \nprint(max_sum(arr, n)) ",
        "generated_testcode": "assert max_sum(arr=[1, 2, 3, 4, -10, 5, 7, 6, 8, -3, 4]) == 15\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the square root of a number using the babylonian method\n    \"\"\"\n    if number == 0 or number == 1:\n        return number\n    else:\n        guess = number / 2\n        accuracy = 0.00000001\n        while abs(number - (guess * guess)) > accuracy:\n            guess = (guess + number / guess) / 2\n        return guess\n\n\nprint(babylonian_squareroot(10)) # output: 3.16222777666016837953\nprint(babylonian_squareroot(9)) # output: 3.00000000000000000004\nprint(babylonian_squareroot(2)) # output: 1.414213562373095049\nprint(babylonian_squareroot(0)) # output: 0\nprint(babylonian_squareroot(1)) # output: 1 ",
        "generated_testcode": "assert babylonian_squareroot(4) == 2\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    n = len(str) \n  \n    # Create a table to store lengths of longest palindromic subsequence of substring \n    L = [[0 for x in range(n)] for x in range(n)] \n  \n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Check for substrings of length 2. \n    for i in range(n-1): \n        if str[i] == str[i+1]: \n            L[i][i+1] = 2\n        else: \n            L[i][i+1] = 1\n  \n    # Check for substrings of length more than 2. \n    for length in range(3,n+1): \n        for i in range(n-length+1): \n            j = i+length-1\n            if str[i] == str[j] and L[i+1][j-1] > 0: \n                L[i][j] = 2 + L[i+1][j-1] \n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][n-1] ",
        "generated_testcode": "assert lps(\"BBABCBCAB\" ) == 7\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\n# Test the function\nprint(harmonic_sum(4)) # Output: 2.083333333333333333333 ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection_set = set1.intersection(set2)\n    intersection_array = list(intersection_set)\n    return intersection_array\n\n\ndef intersection_array_lambda(array_nums1,array_nums2):\n    return list(filter(lambda x: x in array_nums1, array_nums2))\n\n\n#test function\narray_nums1 = [1,2,3,4,5,6,7]\narray_nums2 = [4,5,6,7,8,9]\nprint(intersection_array(array_nums1, array_nums2)) #[4, 5, 6, 7]\nprint(intersection_array_lambda(array_nums1, array_nums2)) #[4, 5, 6, 7] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5], [4,5,6,7]) == [4,5]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for ele in tup: \n        if ele == x: \n            count += 1\n    return count ",
        "generated_testcode": "assert count_X((\"abracadabra\", \"a\") == 5)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n\n#test the function\nprint(insert_element([1,2,3,4,5],0)) #[0, 1, 0, 2, 0, 3, 0, 4, 0, 5] ",
        "generated_testcode": "assert insert_element([\"apple\", \"banana\", \"cherry\"], \"orange\") == [\"orange\", \"apple\", \"orange\", \"banana\", \"orange\", \"cherry\"]\n\n\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    real = numbers.real\n    imaginary = numbers.imag\n    r = (real**2 + imaginary**2)**0.5\n    if real == 0:\n        if imaginary >= 0:\n            theta = 180\n        else:\n            theta = -180\n    elif imaginary >= 0:\n        theta = math.degrees(math.atan(imaginary/real))\n    else:\n        theta = 180 + math.degrees(math.atan(imaginary/real))\n    return (r, theta)\n\n\n#Example\nprint(convert(3+2j))\n#Output: (3.6055555127546396263, 56.30999324748120893) ",
        "generated_testcode": "assert convert(2+3j) == (2.236, 1.107)\n\n# The output should be (2.236, 1.107)\n\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\nlist1 = [1, \"hello\", True, 3.5, 5, \"world\", False, 7, 8, \"python\", 3, 2.5, \"language\"]\nprint(count_integer(list1) # Output: 4 ",
        "generated_testcode": "assert count_integer([]), 0\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word[0] in \"aeAE\":\n            result.append(word)\n    return result\n\n# Test the function with some sample data\ntext = \"Education is the most powerful weapon which you can use to change the world.\"\nprint(words_ae(text) # Output: ['Education', 'which', 'you', 'can', 'use', 'to', 'change', 'the']\n\n\n# Use a list comprehension to find all words starting with 'a' or 'e'\ndef words_ae(text):\n    words = text.split()\n    return [word for word in words if word[0] in \"aeAE\"]\n\n\n# Test the function with some sample data\ntext = \"Education is the most powerful weapon which you can use to change the world.\"\nprint(words_ae(text) # Output: ['Education', 'which', 'you', 'can', 'use', 'to', 'change', 'the'] ",
        "generated_testcode": "assert words_ae([\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"pear\", \"orange\"]) == [\"apple\", \"banana\", \"elephant\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    colors = ['Red', 'Green', 'Blue']\n    result = []\n    for i in range(1, n+1):\n        result.extend([subset for subset in combinations(colors, i)])\n    return result\n\ndef combinations(colors, n):\n    if n == 0:\n        return [[]]\n    if len(colors) == 0:\n        return []\n    subset = combinations(colors[1:], n-1)\n    return [[colors[0]] + s for s in subset] + combinations(colors[1:], n)\n\n\n# Test\nprint(combinations_colors(3, 2))\n# Output: [['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Blue'], ['Red', 'Green', 'Blue']] ",
        "generated_testcode": "assert combinations_colors([\"red\", \"green\", \"blue\"], 2) == [(\"red\", \"red\"), (\"red\", \"green\"), (\"red\", \"blue\"), (\"green\", \"green\"), (\"green\", \"blue\"), (\"blue\", \"blue\")]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    primes = [True] * n\n    p = 2\n    while p * p < n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    count = 0\n    for i in range(2, n):\n        if primes[i]:\n            count += 1\n    return count\n\n# Example usage:\nprint(count_Primes_nums(20)) # Output: 8 ",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return a,b\n\n#Example:\na = 5\nb = 10\na,b = swap_numbers(a,b)\nprint(\"a =\",a,\"b =\",b)\n#Output: a = 10 b = 5\n\n\n#Explanation: \n#We have defined a function called swap_numbers that takes two parameters a and b. Inside the function, we have used a temporary variable called temp to store the value of a and then assigned the value of b to a and temp to b. Finally, we have returned the swapped values of a and b. \n#Then we have called the function by passing a and b as arguments and have assigned the swapped values to a and b using the multiple assignment statement. \n#Finally, we printed the new values of a and b. ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n\n# The function should return a tuple with the two numbers in reverse order. ",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns the count of odd numbers in the list using lambda function\n    \"\"\"\n    odd_count = len(list(filter(lambda x: x%2!=0, array_nums))\n    return odd_count\n\n# Test the function with sample inputs\narray_nums = [1,2,3,4,5,6,7,8,9,10]\nprint(count_odd(array_nums)) # Output: 5\n\narray_nums = [2,4,6,8]\nprint(count_odd(array_nums)) # Output: 0\narray_nums = [1,3,5,7]\nprint(count_odd(array_nums)) # Output: 3 ",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n\n\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return max(test_tup1, test_tup2)\n\n# Define two tuples\ntup1 = (1, 3, 5, 7, 9, 3, 5)\ntup2 = (2, 4, 6, 8, 10, 4, 6)\nprint(maximize_elements(tup1, tup2)) # Output: (10, 6, 8, 10, 4, 6) ",
        "generated_testcode": "assert maximize_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9) ) == (5, 6, 7, 8, 9)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Function to find the nth newman-shanks prime number\n    \"\"\"\n    import math\n    primes = []\n    count = 0\n    i = 2\n    while count < n:\n        is_prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n        i += 1\n    newman_shanks_primes = []\n    for prime in primes:\n        if prime not in newman_shanks_primes:\n            newman_shanks_primes.append(prime)\n        else:\n            continue\n        newman_shanks_primes.append(prime * newman_shanks_primes[-1] + 1)\n    return newman_shanks_primes[-1]\n\n# Test\nprint(newman_prime(10)) # Output: 193\nprint(newman_prime(20)) # Output: 4051\nprint(newman_prime(50)) # Output: 5486361",
        "generated_testcode": "assert newman_prime(1) == 3\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        try:\n            res = num1 / num2\n            result = result + (res,)\n        except ZeroDivisionError:\n            result = result + (0,)\n        except TypeError:\n            result = result + (None,)\n        except:\n            result = result + (None,)\n    return result\n\n# Test the function with the following tuples:\n\nprint(division_elements((2, 4, 3, 6, 8), (2, 0, 'a', 4)) # Output: (1, 0, None, 2)\nprint(division_elements((4, 9, 16), (2, 3, 4)) # Output: (2, 3, 4) ",
        "generated_testcode": "assert division_elements((10, 2, 5, 6, 4) , (2, 4, 3, 2) ) == (5.0, 1.25, 3.0)\n\n# The output should be (5.0, 1.25, 3.0) ",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nL = 3\nprint(split_two_parts(list1, L)) ",
        "generated_testcode": "assert split_two_parts([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], 2) == ([\"apple\", \"banana\"], [\"cherry\", \"date\", \"elderberry\", \"fig\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    res = d1.copy()\n    res.update(d2)\n    return res\n\n\n#Example:\n# d1 = {'a': 10, 'b': 8}\n# d2 = {'b': 1, 'c': 12}\n# print(merge_dict(d1,d2)) Output: {'a': 10, 'b': 1, 'c': 12} ",
        "generated_testcode": "assert merge_dict(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'c': 4, 'd': 5, 'e': 6}\n) == {'a': 1, 'b': 2, 'c': 4, 'd': 5, 'e': 6}\n\n\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if h_age <= 0:\n        return \"Invalid age\"\n    else:\n        return h_age * 7\n\n# Test the function with some sample inputs\nprint(dog_age(0) == \"Invalid age\")\nprint(dog_age(1) == 7)\nprint(dog_age(2) == 14)\nprint(dog_age(3) == 21)\nprint(dog_age(4) == 28)\nprint(dog_age(5) == 35)\nprint(dog_age(6) == 42)\nprint(dog_age(7) == 49) ",
        "generated_testcode": "assert dog_age(1) == 15\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n\n# Test case\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstep = 3\nprint(list_split(S, step)) #[ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10] ] ",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 2) == [[\"a\", \"c\", \"e\", \"g\"], [\"b\", \"d\", \"f\", \"h\"], [\"i\", \"j\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return 4 * l ** 2\n\n# Test the function\nprint(lateralsurface_cube(4)) # Output: 96\nprint(lateralsurface_cube(10)) # Output: 400\n\n\n# Write a function to find the lateral surface area of a cuboid\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * (l * h + w * h + l * w)\n\n\n# Test the function\nprint(lateralsurface_cuboid(3, 4, 5)) # Output: 52\nprint(lateralsurface_cuboid(2, 2, 2)) # Output: 20\nprint(lateralsurface_cuboid(10, 5, 10)) # Output: 140\n\n\n# Write a function to find the total surface area of a cube\ndef total_surface_cube(l):\n    return lateralsurface_cube(l) + 4 * l ** 2\n\n\n# Test the function\nprint(total_surface_cube(3)) # Output: 90\nprint(total_surface_cube(4)) # Output: 144\n\n\n# Write a function to find the total surface area of a cuboid\ndef total_surface_cuboid(l, w, h):\n    return lateralsurface_cuboid(l, w, h) +",
        "generated_testcode": "assert lateralsurface_cube(3) == 54\n\n# The testing code should include at least 2 different test cases. ",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    sum = 0\n    count = 0\n    while count < n:\n        if i % 2 != 0:\n            sum += i * i\n            count += 1\n        i += 1\n    return sum\n\n#test the function\nprint(square_Sum(5)) # 45\nprint(square_Sum(10)) # 2220\nprint(square_Sum(15)) # 11800\nprint(square_Sum(6)) # 65\nprint(square_Sum(3)) # 13 ",
        "generated_testcode": "assert square_Sum(3) == 35\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) * 3 + find_star_num(n-2)\n\n\n# Test the function with n = 1 to 10\nfor i in range(1, 11):\n    print(find_star_num(i)) ",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(k) == 1:\n        return ord(k)\n    else:\n        return \"Invalid input. Only one character is allowed.\"\n\n# example usage:\n# print(ascii_value('a'))\n# output: 97\n\n# print(ascii_value('abc'))\n# output: Invalid input. Only one character is allowed. ",
        "generated_testcode": "assert ascii_value(a) == 97\n\n# Write a function to find the length of a string.\ndef string_length(s):\n    pass\n\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    for i in range(n):\n        if i%2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n\ndef main():\n    n = int(input(\"Enter the number of elements in the array: \" )\n    arr = []\n    for i in range(n):\n        element = int(input(\"Enter element: \")\n        arr.append(element)\n    print(\"Sum of even numbers at even positions: \", sum_even_and_even_index(arr,n))\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert sum_even_and_even_index(arr=[1,2,3,4,5,6,7,8,9,10],n=6) == 20 # Testing with a sample input\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while (count < n):\n        sum += i**5\n        i += 2\n        count += 1\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fifth power of first\", n, \"even natural numbers is\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(3) == 220\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return [test_list[i][-1] for i in range(len(test_list))]\n\n\n# Test the function with an example list of tuples\ntest_list = [(1,2,3,4), (4,5,6,7), (7,8,9,10), (10,11,12)]\nprint(rear_extract(test_list)) # Output: [4, 7, 10, 12] ",
        "generated_testcode": "assert rear_extract([(1,2), (3,4), (5,6)] ) == [2, 4, 6]\n\n\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert the two tuples into lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Use list comprehension to subtract the elements of the two lists\n    result = [(list1[i] - list2[i]) for i in range(len(test_tup1))]\n    # Convert the resulting list back into a tuple\n    return tuple(result)\n\n# Example usage:\na = (1, 2, 3, 4, 5)\nb = (5, 4, 3, 2, 1)\nprint(substract_elements(a, b)) # Output: (-4, -2, 1, 4) ",
        "generated_testcode": "assert substract_elements(('abc', (1, 2, 3, 4)) == ('a', 1, 1, 1)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    from math import factorial as f\n    ans = 0\n    for k in range(0, n+1, 2): \n        ans += (f(n)//(f(k)*f(n-k))*(n-k))\n    return ans \n  \n# Driver function to test the above function \nn = 10\nprint(even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(4) == 10 # Testing for n = 4\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    b=[] \n    for i in range(n): \n        b.append(i) \n    for i in range(n): \n        b[a[i]]=i \n    for i in range(n): \n        b[a[i]]=i \n    for i in range(n-1,m-1,-1): \n        b[a[i]]=i \n    for i in range(m-1,-1,-1): \n        if a[i]!=b[i]: \n            return i ",
        "generated_testcode": "assert get_Position(a,n,m) == 2 # Testing for the example given in the question.\n# Testing for edge cases\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    vol = pi * r**2 * h\n    return vol\n\n# test the function\nprint(volume_cylinder(5,10))\nprint(volume_cylinder(3,7.5)\nprint(volume_cylinder(1,10)\nprint(volume_cylinder(0,10)\n\nprint(volume_cylinder(10,0) ",
        "generated_testcode": "assert volume_cylinder(5, 10) == 785.398163397444830002\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    filtered_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n\n#example\nmy_dict = {'apple':2, 'banana':5, 'orange':6, 'kiwi':3, 'grape':4}\nn = 4\nfiltered_dict = dict_filter(my_dict,n)\nprint(filtered_dict) #{'banana': 5, 'orange': 6} ",
        "generated_testcode": "assert dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 4) == {3: 4, 9: 10}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ele_count = {}\n    for i in range(len(test_tup)):\n        if test_tup[i] not in ele_count:\n            ele_count[test_tup[i]] = i\n        else:\n            return test_tup[i]\n    return None\n\n# Test the function with an example\ntest_tup = (1, 2, 3, 4, 5, 1, 6, 7, 2, 8, 3, 9, 10, 4)\nprint(count_first_elements(test_tup)) # Output: 1 ",
        "generated_testcode": "assert count_first_elements(('a', ('a', 'b', 'c', 'd', 'a', 'e', 'a', 'f')) == 2\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    x = 1\n    while True:\n        if ((9 * x * (x + 1) * (x + 2)) // 6) >= n:\n            return ((9 * x * (x + 1) * (x + 2)) // 6) == n\n        x += 1\n    return False\n\ndef decagonal(n):\n    x = 1\n    while not is_num_decagonal(n):\n        x += 1\n    return (x * (x + 1) // 2) - 1 + n - 1\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    print(\"The nth decagonal number is:\", decagonal(n))\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert is_num_decagonal(5) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function searches an item in a given list using sequential search.\n    :param dlist: The list in which the item is to be searched.\n    :param item: The item to be searched in the list.\n    :return: The index of the item in the list if found, else -1.\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n# Test the function with an example\narr = [3, 5, 1, 2, 7, 6, 8, 4, 9]\nprint(sequential_search(arr, 6))  # Output: 3\nprint(sequential_search(arr, 10))  # Output: -1 ",
        "generated_testcode": "assert sequential_search([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"pear\"], \"kiwi\") == 3\n\n\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function returns True if all elements in the list are unique, False otherwise\n    \"\"\"\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False\n\n# testing the function with some examples\nprint(all_unique([1,2,3,4,5,6])) # True\nprint(all_unique([1,2,3,4,5,5])) # False\nprint(all_unique([\"apple\", \"banana\", \"orange\", \"kiwi\"])) # True\nprint(all_unique([1,2,2,3,4,5])) # False ",
        "generated_testcode": "assert all_unique([\"apple\", \"banana\", \"cherry\", \"orange\"]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    subtract = lambda x,y: x-y\n    return list(map(subtract,nums1,nums2))\nnums1 = [1,2,3,4,5]\nnums2 = [4,5,6,7,8]\nprint(sub_list(nums1,nums2))\n\n\n#Output: [-3,-3,-3,-3]\n\n#Explanation: The function subtracts each element of the first list(nums1) with the corresponding element of the second list(nums2) using map and lambda function. ",
        "generated_testcode": "assert sub_list(list(range(1,5), list(range(2,4)) == [1, 5]\n\n\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = [0]*10\n    for i in n:\n        freq[int(i)] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\nprint(validate('111022334455')) #True\nprint(validate('1123123')) #False\nprint(validate('1234567899')) #False\nprint(validate('1234566789')) #True\nprint(validate('1111222345')) #True ",
        "generated_testcode": "assert validate(123456) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list:\n        if i != element:\n            return False\n    return True\n\n#Test the function\nlist = [\"apple\",\"apple\",\"apple\",\"apple\"]\nelement = \"apple\"\nif check_element(list,element):\n    print(\"All elements in the list are equal to\",element)\nelse:\n    print(\"All elements in the list are not equal to\",element) \n\n\nlist = [\"apple\",\"banana\",\"apple\"]\nelement = \"apple\"\nif check_element(list,element):\n    print(\"All elements in the list are equal to\",element)\nelse:\n    print(\"All elements in the list are not equal to\",element) ",
        "generated_testcode": "assert check_element([\"apple\",\"apple\",\"apple\",\"apple\"],\"apple\") == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = 'ab{2,3}'\n    result = re.search(pattern, text)\n    return result != None\n\n# Test the function\nprint(text_match_two_three(\"ab\")) # True\nprint(text_match_two_three(\"abb\")) # True\nprint(text_match_two_three(\"abbb\")) # True\nprint(text_match_two_three(\"abbbb\")) # True\nprint(text_match_two_three(\"a\")) # False\nprint(text_match_two_three(\"abc\")) # False\nprint(text_match_two_three(\"abbcd\")) # True\nprint(text_match_two_three(\"abcd\")) # False ",
        "generated_testcode": "assert text_match_two_three([\"ab\", \"abb\", \"aabb\", \"abbb\", \"abbbb\", \"abcd\", \"abbbcd\"] == [\"abbb\", \"aabb\", \"abbb\"]\n\n\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = float('-inf') \n    for i in range(k): \n        curr_sum = 0\n        max_sum_i = float('-inf') \n        for j in range(n): \n            curr_sum += a[j] \n            max_sum_i = max(max_sum_i, curr_sum) \n            if curr_sum < 0: \n                curr_sum = 0\n        max_sum = max(max_sum, max_sum_i) \n        a = a[::-1] \n    return max_sum \n  \n# Driver code to test the above function \na = [1, -2, 3, 4, -1, 5] \nn = len(a) \nk = 2\nprint(max_sub_array_sum_repeated(a, n, k)) # Output: 9 \n  ",
        "generated_testcode": "assert max_sub_array_sum_repeated(a, n, k) == 100\n# Test case 1: a = [1, -2, 3, 4, -1, 5, 2, -3], n = 6, k = 3\n# Repeating the array 3 times will give [1, -2, 3, 4, -1, 5, 2, -3, 1, -2, 3, 4, -1, 5, 2, -3, 1, -2, 3, 4, -1, 5, 2, -3]\n# The largest sum of contiguous subarray is 10 (starting from index 2, ending at index 6)\n\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n+1):  \n        if i % 2 == 0: \n            sum += i**2\n    return sum \n\n# test the function \nprint(square_Sum(4)) # Output: 20 \nprint(square_Sum(6)) # Output: 54 \nprint(square_Sum(10)) # Output: 240 ",
        "generated_testcode": "assert square_Sum(4) == 20 # Testing for n = 4\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N):\n        for j in range(N):\n            if (arr[i] * arr[j]) % P == 1:\n                count += 1\n                break\n    return count\n\nN = int(input(\"Enter the number of elements in the array: \"))\narr = []\nprint(\"Enter the elements of the array: \")\nfor i in range(N):\n    arr.append(int(input()))\nP = int(input(\"Enter the prime number: \")\nprint(\"The count of elements having modular inverse equal to itself: \", modular_inverse(arr, N, P))\n\n\n# Test cases:\n# Input:\n# Enter the number of elements in the array: 5\n# Enter the elements of the array:\n# 2\n# 4\n# 5\n# 7\n# 1\n# 8\n# 3\n# Enter the prime number: 7\n# Output:The count of elements having modular inverse equal to itself:  2 ",
        "generated_testcode": "assert modular_inverse(arr=[2, 3, 4, 5, 6, 7, 8, 9], N=10, P=5) == 2\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Check if the given year is a leap year or not \n    if N % 4 == 0: \n        if N % 100 == 0: \n            if N % 400 == 0: \n                return 3666\n            else: \n                return 365 \n    else: \n        return 365\n    # Calculating the number of odd days in a year \n    odd_days = 365 - 7 \n    return odd_days ",
        "generated_testcode": "assert odd_Days(2021) == 243\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 0\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            length = len(i)\n            if length > max_len:\n                max_len = length\n                result = [i]\n            elif length == max_len:\n                result.append(i)\n    return result\n\n# Test the function\nlist1 = [[1, 2, 3], [5, 6, 7, 8], [3, 4], [9, 8, 7, 6, 5, 3], [2, 4, 5], [9, 0, 8, 6, 3]]\nprint(max_length(list1) # Output: [[9, 8, 7, 6, 5, 3]] ",
        "generated_testcode": "assert max_length([\"cat\", \"dog\", \"bird\", \"lion\", \"tiger\"] == \"tiger\"\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 2:\n        return k\n    if k < 2:\n        return 1\n    same, diff = 1, k\n    for i in range(3, n+1):\n        total = (same + diff) * (k-1)\n        same = diff\n        diff = total - same\n    return total\n\nn = 3\nk = 2\nprint(count_no_of_ways(n, k)) # 6\n\nn = 2\nk = 3\nprint(count_no_of_ways(n, k)) # 6 \nn = 4\nk = 2\nprint(count_no_of_ways(n, k)) # 8\nn = 6\nk = 3\nprint(count_no_of_ways(n, k)) # 18 ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 18\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    quotient = n/m\n    return quotient\nn = 10\nm = 2\nprint(\"The quotient of\", n,\"and\", m,\"is:\", find(n,m)) ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # importing math module\n    import math\n    # calculating c^2 = a^2 + b^2 \n    side = math.sqrt(w**2 + h**2)\n    return side\n\n# Example usage:\n# If width = 3 and height = 4, then the third side of the right angled triangle is 5.\nprint(otherside_rightangle(3, 4)) ",
        "generated_testcode": "assert otherside_rightangle(3, 4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# Test the function\nlist1 = [1, 3, 5, 8, 4, 2, 'hello', 'world', 9, 'python', 20, 12.5]\nprint(max_val(list1))  # Output: 20\n\nlist2 = [10, 'hello', 'world', 5.2, 8, 'python', 20.1, 2.5]\nprint(max_val(list2))  # Output: 'world'\nlist3 = [1, 'hello', 'python', 5, 9, 20.1, 8]\nprint(max_val(list3))  # Output: 'python' ",
        "generated_testcode": "assert max_val([\"apple\", 5, 3.14, 7, 2.71, \"banana\", 8, \"cherry\", 3.14159, 10, \"2.71828\"] == 10\n\n\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum += i\n    return sum\n\n# Test the function\nprint(sum_div(12)) # Output: 28\nprint(sum_div(15)) # Output: 16 ",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n\ndef main():\n    arr = [1, 20, 6, 4, 5] \n    n = len(arr) \n    print(\"Number of inversions are\", get_Inv_Count(arr, n)) \n\nif __name__ == '__main__':\n    main() ",
        "generated_testcode": "assert get_Inv_Count(arr=[1,2,3,4,5,6,7,8],n=5) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element)\n        else:\n            flattened_list.append(element)\n    return flattened_list\n\n\n#Test the function with sample input\nlist1 = [1, [2, 3, [4, 5, [6, 7]], 8, [9, [10, [11, 12, [13, 14, [15]]]]]]]\nprint(flatten_list(list1) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] ",
        "generated_testcode": "assert flatten_list([\"apple\", \"banana\", [\"orange\", \"grape\", [\"lemon\", \"pineapple\", \"pear\"]]) == [\"apple\", \"banana\", \"orange\", \"grape\", \"lemon\", \"pineapple\", \"pear\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Returns a new list containing common elements of the two nested lists.\n    \"\"\"\n    flat_l1 = [elem for sublist in l1 for elem in sublist]\n    flat_l2 = [elem for sublist in l2 for elem in sublist]\n    return list(set(flat_l1) & set(flat_l2))\n\n\n\n# Test the function with an example\nl1 = [[1, 2, 3], [2, 3, 4], [4, 5, 6]]\nl2 = [[2, 3, 5], [3, 5, 7], [4, 6, 8]]\nprint(intersection_nested_lists(l1, l2))  # Output: [2, 3, 4, 5] ",
        "generated_testcode": "assert intersection_nested_lists(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 10]], [[2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]\n) == [[2, 3], [5, 6], [8, 9], [1]]\n\n# The output should be [[2, 3], [5, 6], [8, 9], [1]]\n\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = 0\n    for item in stdata:\n        total = 0\n        for num in item:\n            total += num\n        if total > max_val:\n            max_val = total\n    return max_val\n    \n# Test the function with sample data\nstudent_data = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (4, 7, 10)]\nprint(max_aggregate(student_data))  # Output: 22 ",
        "generated_testcode": "assert max_aggregate([(1,2), (3,4), (5,6)] ) == 11\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n<=0: \n        return 0\n    elif n==1: \n        return 1\n    elif n%2!=0: \n        return 0\n    else:\n        return 2*count_binary_seq(n-1)\n        \n# Testing the function\nprint(count_binary_seq(2)) # 2\nprint(count_binary_seq(4)) # 6\nprint(count_binary_seq(6)) # 16\nprint(count_binary_seq(8)) # 140 ",
        "generated_testcode": "assert count_binary_seq(1) == 1\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for k, v in d.items()) if d else 0)\n    return 0\n\n# Example usage:\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': {\n                'e': 2\n            }\n        },\n        'f': 3\n    },\n    'g': [1, 2, 3]\n}\nprint(dict_depth(d))  # Output: 3\n\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': {\n                'e': {\n                    'f': {\n                        'g': {\n                            'h': 2\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nprint(dict_depth(d))  # Output: 4 ",
        "generated_testcode": "assert dict_depth(d) == 3\n\n# The dictionary d is defined as follows:\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': 2,\n            'e': 3\n        },\n        'f': 4\n    },\n    'g': [1, 2, 3]\n}\n\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1\n        n >>= 1\n    return count \n\n# example usage\nn = 20\nprint(\"The most significant set bit is\",set_Bit_Number(n)) # Output: 5 ",
        "generated_testcode": "assert set_Bit_Number(15) == 4\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    b = sorted(a)\n    c = sorted(a)\n    c.reverse()\n    count1 = 0\n    count2 = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            count1 += 1\n        if a[i] != c[i]:\n            count2 += 1\n    if count1 == count2:\n        return 'YES'\n    else:\n        return 'NO'\n\nn = int(input())\na = list(map(int,input().split())\nprint(solve(a,n)) ",
        "generated_testcode": "assert solve([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],5) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #if no rotation is there\n    if rotations == 0:\n        return arr[index]\n    else:\n        #calculate the index of the first element\n        index = (index + rotations) % len(arr)\n        return arr[index]\n#test the function with an example ",
        "generated_testcode": "assert find_Element(arr,ranges,rotations,index) == expected_output\n\n# Example:\narr = [1,2,3,4,5,6,7,8,9]\nranges = [0,6]\nrotations = 2\nindex = 6\nexpected_output = 7\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return [word for word in words if word[0] == 'p']\n\nwords = ['python', 'java', 'c++', 'php', 'perl', 'pascal', 'objective-c', 'ruby', 'python']\nresult = start_withp(words)\nprint(result)\n\n# output: ['python', 'php', 'pascal', 'python']\n\n\n# Write a function to return a list of words that have even length\ndef even_length(words):\n    return [word for word in words if len(word)%2==0]\n\nwords = ['hello', 'world', 'python', 'java', 'apple', 'orange', 'c++', 'pear', 'banana']\nresult = even_length(words)\nprint(result)\n# output: ['hello', 'python', 'apple', 'pear']\n\n\n# Write a function to return a list of words that have vowels in them\ndef has_vowels(words):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return [word for word in words if any(vowel in word.lower() for vowel in vowels)]\nwords = ['hello', 'world', 'python', 'java', 'apple', 'orange', 'c++', 'pear', 'banana']\nresult = has_vowels(words)\nprint(result)\n# output: ['hello', 'world', 'python', 'java', 'apple', 'orange', 'pear",
        "generated_testcode": "assert start_withp([\"python\", \"java\", \"c++\", \"kotlin\", \"sql\", \"pascal\"]) == [\"python\", \"pascal\"]\n\n\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [0] * n\n    dp[index] = a[index]\n    for i in range(index + 1, n):\n        dp[i] = max(dp[i - 1], dp[i])\n        if i - k - 1 >= 0:\n            dp[i] = max(dp[i], dp[i - k] + a[i])\n    max_sum = float('-inf')\n    for i in range(k, n):\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n\n\n# Example usage:\nn = 7\na = [2, 5, 3, 1, 6, 7, 1, 9, 9, 2]\nindex = 2\nk = 3\nprint(max_sum_increasing_subseq(a, n, index, k)) # Output: 17\n# Increasing subsequence from index 2 (3rd element) including 6th element (k=3) is [3, 6, 7, 9] with sum 21\n\nn = 6\na = [10, 22, 4, 3, 8, 1, 2, 5]\nindex = 1\nk = 3\nprint(max_sum_increasing_subseq(a, n, index, k)) # Output: 15\n# Increasing subsequence from index",
        "generated_testcode": "assert max_sum_increasing_subseq(a, n, index, k) == expected_output\n\n# where a is a list of integers, n is the length of the list, index is the index till which we need to find the maximum sum of increasing subsequence and k is the index of the element to be included in the subsequence. ",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n >= len(tuplex):\n        return None\n    else:\n        return tuplex[m:n]\n#Example usage:\n#my_tuplex = (1,2,3,4,5,6)\n#print(colon_tuplex(my_tuplex,2,4)) # Output: (2, 3)\n\n\n# Write a function to get a slice of a tuple.\ndef slice_tuplex(tuplex,m,n,l):\n    if n >= len(tuplex) or l >= len(tuplex) or m >= len(tuplex) or n > l:\n        return None\n    else:\n        return tuplex[m:l]\n#Example usage:\n#my_tuplex = (1,2,3,4,5,6,7,8)\n#print(slice_tuplex(my_tuplex,1,3,5)) # Output: (2, 3, 4) ",
        "generated_testcode": "assert colon_tuplex((\"apple\",1,2) == \"apple:apple:apple\"\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n\n# Test the function with examples\nprint(large_product([1, 2, 3, 4], [3, 6, 7, 5], 2)) #[18, 16]\nprint(large_product([-10, -10, 5, 2], [1, 2, 3, 3], 3)) # [50, 20, 30]\nprint(large_product([-5, -2], [1, 3, 4], 1)) # [-10] ",
        "generated_testcode": "assert large_product(nums1=[1, 2, 3, 4, 5], nums2=[10, 20, 30, 40, 50], N=2) == [50, 40]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if a>b:\n        return a\n    else:\n        return b\n\n# test the function\nprint(maximum(5,6)) # 6\nprint(maximum(9,4)) # 9\nprint(maximum(10,10)) # 10\nprint(maximum(-5,-7)) # -5\n\nprint(maximum(0,1)) # 1 ",
        "generated_testcode": "assert maximum(5,10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    str1=str1.replace(\" \",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    a=tuple(str1.split(\",\"))\n    return a\n\n#testing\nprint(string_to_tuple(\"(1,2,3,4,5,6\")) #expected output: ('1', '2', '3', '4', '5', '6') ",
        "generated_testcode": "assert string_to_tuple(str1) == ('a', 'b', 'c', 'd', 'e')\n\n\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:\n        return 1\n    count = 0\n    while n & 1:\n        n >>= 1\n        count += 1\n    return 1 << (count + 1) ",
        "generated_testcode": "assert set_left_most_unset_bit(0b10101010) == 0b11101111 # 0b1101111 is the binary representation of the expected output\n\n# Explanation:\n# The left most unset bit in 0b10101010 is the 2^4 bit, which is 1000000 in binary. Adding it to the number will give 0b1101010 + 0b100000 = 0b1101010 + 0b100000 = 0b1101010 + 16 = 0b1101010 + 0b100000 = 0b1110110 = 0b1101111. ",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=222/7\n    volume=1/3*pi*r**2*h\n    return volume\n\n#Test the function with sample values\nprint(volume_cone(5,10)) #Output: 282.7431\nprint(volume_cone(3,6)) #Output: 163.6927\nprint(volume_cone(7,9)) #Output: 452.4896\n\n\n#Or you can take input from user:\n#radius=float(input(\"Enter the radius of the cone: \")\n#height=float(input(\"Enter the height of the cone: \")\n#print(\"The volume of the cone is:\", volume_cone(radius,height)) ",
        "generated_testcode": "assert volume_cone(3, 5) == 141.371666941729868158\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in list1:\n        if i>0:\n            print(i)\n\nlist1 = [1,-2,4,-6,8,-10,12,-14,16]\npos_nos(list1)\n\n#Output: \n#1\n#4\n#8\n#12\n#16 ",
        "generated_testcode": "assert pos_nos(list1) == [1, 3, 5, 7, 9]\n\n\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 1: \n        return grid[0][0] \n    elif n == 2: \n        return max(grid[0][0] + grid[0][1], grid[1][0] + grid[1][1]) \n    else: \n        dp = [0] * n \n        dp[0], dp[1] = grid[0][0], max(grid[0][0], grid[1][0]) \n        for i in range(2, n): \n            dp[i] = max(grid[0][i], grid[1][i] + dp[i-1]) \n        for i in range(2, n): \n            for j in range(1, n): \n                if j < n-1: \n                    dp[j] = max(dp[j], dp[j-1] + grid[1][i] + grid[0][i] - grid[0][j-1]) \n                else: \n                    dp[j] = max(dp[j], dp[j-1]) \n        return dp[n-1] \n\n# Test the function with a sample grid \ngrid = [[1, 2, 3, 4, 5], [6, 7, 8, 9]] \nn = len(grid[0]) \nprint(max_sum_rectangular_grid(grid, n)) # Output: 13 ",
        "generated_testcode": "assert max_sum_rectangular_grid(\n    [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 10, 11],\n        [12, 13, 14, 15, 16],\n        [17, 18, 19, 20, 21],\n        [22, 23, 24, 25, 26]\n    ], 4) == 65\n\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = 0\n    for word in str.split():\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n# Test the function with some sample test cases\nprint(find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\"))   # Output: 6\nprint(find_Max_Len_Even(\"The quick brown fox jumps over the lazy cat\"))   # Output: 6\nprint(find_Max_Len_Even(\"Hello world is a beautiful world\"))          # Output: 6\nprint(find_Max_Len_Even(\"Python is an interpreted high-level programming language\")) # Output: 7 ",
        "generated_testcode": "assert find_Max_Len_Even([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\", \"peach\", \"grapes\"] == 6\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    A: array of integers\n    x: integer to find the last index of\n    returns: integer - index of the last occurrence of x in A\n    \"\"\"\n    left, right = 0, len(A) - 1\n    index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            index = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index\n\n# Test cases\nprint(find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6], 4)) # Output: 4\nprint(find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6], 1)) # Output: 0\nprint(find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6], 7)) # Output: -1\nprint(find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6], -1)) # Output: -1\nprint(find_last_occurrence([1, 2, 3, 4, 4, 4, 4, 5,",
        "generated_testcode": "assert find_last_occurrence(A=[1, 2, 3, 4, 4, 5, 5, 5, 6, 7, 8, 9], x=5) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    encoded = []\n    count = 1\n    prev = alist[0]\n    for i in range(1, len(alist)):\n        if alist[i] == prev:\n            count += 1\n        else:\n            if count == 1:\n                encoded.append(prev)\n            else:\n                encoded.append((count, prev))\n            prev = alist[i]\n            count = 1\n    if count == 1:\n        encoded.append(prev)\n    else:\n        encoded.append((count, prev))\n    return encoded\n\ndef modified_decode(alist):\n    decoded = []\n    for item in alist:\n        if isinstance(item, tuple):\n            decoded.extend([item[1]] * item[0])\n        else:\n            decoded.append(item)\n    return decoded\n\n# test:\ntest = [1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 9]\nprint(modified_encode(test))\nprint(modified_decode(modified_encode(test)) == test)\n",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\"]) == [(\"a\", 1), (\"b\", 1), (\"c\", 3), (\"d\", 1), (\"e\", 4)]\n\n# Test case 1: Test with a list of characters with no repetition\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a = 1\n    b = 1\n    c = 1\n    max_vol = 0\n    while a < s:\n        while b < s-a:\n            c = s - a - b\n            vol = a * b * c\n            if vol > max_vol:\n                max_vol = vol\n                max_a = a\n                max_b = b\n                max_c = c\n            b += 1\n        a += 1\n        b = a\n    return max_vol, max_a, max_b, max_c ",
        "generated_testcode": "assert max_volume (12) == (2, 2, 2)\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b\\w{5}\\b\"\n    result = re.findall(pattern, text)\n    return result\n\n# Test the function with example\ntext = \"Hello world, how are you today? I am fine. Thanks for asking.\"\nprint(find_long_word(text) # ['Hello', 'world', 'fine.'] ",
        "generated_testcode": "assert find_long_word(text=\"The quick brown fox jumps over the lazy dog.\") == \"quick\"\n\n# Test case 1: Test with a normal sentence\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    sum_of_squares = 0\n    square_of_sum = 0\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n        square_of_sum += i\n    square_of_sum = square_of_sum**2\n    return square_of_sum - sum_of_squares\n\n\n# Test the function with n=3\nprint(sum_difference(3)) # Output: 2\n\n\n# Test the function with n=10\nprint(sum_difference(10)) # Output: 2640",
        "generated_testcode": "assert sum_difference(10) == 2640\n\n# The function should return 2640 for n = 10, as the sum of squares of first 10 natural numbers is 385 and the square of the sum is 3025. The difference is 2640. ",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    demlo_num = \"\" \n    num = s \n    while num > 0: \n        if num % 2 == 0: \n            demlo_num += \"0\" \n        else: \n            demlo_num += \"1\" \n        num //= 2\n    return demlo_num[::-1] \n      \n# Driver code \ns = int(input(\"Enter a number: \"))\nprint(\"The demlo number for\", s, \"is\", find_demlo(s)) ",
        "generated_testcode": "assert find_demlo(1) == 1\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        if list1[i] == min(list1):\n            result.append(i)\n    return result\n\n# Test the function with some sample inputs\nprint(position_min([2, 4, 1, 3, 5, 1, 6, 1, 8, 1, 9, 0, 5]))  # Output: [1, 3, 5] ",
        "generated_testcode": "assert position_min([3, 5, 2, 9, 1, 5, 7, 6, 2, 5] ) == [2, 5]\n\n\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if cur >= n:\n        return arr\n    if arr[cur] >= 0:\n        i = out_of_place\n        while i < cur:\n            if arr[i] < 0:\n                arr[i], arr[cur] = arr[cur], arr[i]\n                out_of_place += 1\n            i += 1\n    else:\n        out_of_place += 1\n    return right_rotate(arr, n, out_of_place, cur + 1)\n\n\ndef rearrange_alternatively(arr):\n    return right_rotate(arr, len(arr), 0, 0)\n\n\narr = [-5, -2, 5, 10, -3, 2, 8, -1, -3]\nprint(rearrange_alternatively(arr))\n# Output: [-5, 10, -3, 5, -2, 8, -1, -3]\n\n",
        "generated_testcode": "assert right_rotate(arr=[1, 2, 3, -4, -1, 5, -6, 7, 8], n=6, out_of_place=3, cur=0) == [3, -4, 1, 5, -6, 2, -1, 7, 8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a tuple of tuples as an argument and returns the sum of alternate tuples in it.\n    \"\"\"\n    sum_alt = 0\n    for i in range(1, len(test_tuple), 2):\n        sum_alt += test_tuple[i][1]\n    return sum_alt\n\n# Example usage:\n# test_tuple = ((1, 2), (3, 4), (5, 6), (7, 8), (9, 10))\n# print(sum_of_alternates(test_tuple))  # Output: 12\n# test_tuple = ((1, 5), (2, 4), (3, 8), (7, 10))\n# print(sum_of_alternates(test_tuple))  # Output: 10\n# test_tuple = ((10, 20), (30, 40), (50, 60), (70, 80), (90, 100))\n# print(sum_of_alternates(test_tuple))  # Output: 140\n# test_tuple = ((1, 10), (2, 20), (3, 30), (4, 40))\n# print(sum_of_alternates(test_tuple))  # Output: 54 ",
        "generated_testcode": "assert sum_of_alternates(()) == 0\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n    squares.reverse()\n    ans = []\n    while n > 0:\n        if squares and squares[-1] <= n:\n            n -= squares.pop()\n            ans.append(squares[-1])\n        else:\n            ans = None\n            break\n    return len(ans)\n\nprint(get_Min_Squares(13)) # 2 (3+4)\nprint(get_Min_Squares(17)) # 3 (4+4+9)\nprint(get_Min_Squares(15)) # 3 (4+4+7) ",
        "generated_testcode": "assert get_Min_Squares(17) == 4\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty dictionary to store the counts\n    word_counts = {}\n\n    # loop through each word in the list\n    for word in test_list:\n        # if the word is already in the dictionary, add 1 to its count\n        if word in word_counts:\n            word_counts[word] += 1\n        # if the word is not in the dictionary, add it with a count of 1\n        else:\n            word_counts[word] = 1\n\n    # find the word with the highest count\n    max_word = \"\"\n    max_count = 0\n    for word in word_counts:\n        if word_counts[word] > max_count:\n            max_word = word\n            max_count = word_counts[word]\n\n    return max_word\n\n# test the function with some sample inputs\nprint(most_occurrences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"orange\", \"apple\"])) # should print \"apple\"\nprint(most_occurrences([\"cat\", \"dog\", \"bird\", \"cat\", \"dog\", \"bird\", \"bird\"])) # should print \"bird\" ",
        "generated_testcode": "assert most_occurrences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"grape\", \"orange\", \"orange\"]) == \"apple\"\n\n\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x==y or y==z or x==z:\n        return True\n    else:\n        return False\n\n#Testing the function\nprint(check_isosceles(5,6,7)) #False\nprint(check_isosceles(6,6,8)) #False\nprint(check_isosceles(6,6,6)) #True\nprint(check_isosceles(5,5,5)) #True ",
        "generated_testcode": "assert check_isosceles(5, 6, 7) == False\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(list1)==0:\n        return []\n    else:\n        m = m%len(list1)\n        return list1[m:]+list1[:m]\n#test case\nprint(rotate_left([1,2,3,4,5,6,7,8],2,3)) #[5,6,7,8,1,2,3] ",
        "generated_testcode": "assert rotate_left([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],2,2) == [\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\"]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n#test the function\nprint(neg_count([-1,-2,-3,0,4,5,-6,-7,8]))\nprint(neg_count([1,2,3,4,5,6,7,8]))\nprint(neg_count([-1,2,-3,0,4,-5,-6,-7,8])) ",
        "generated_testcode": "assert neg_count(list()) == 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = re.compile(r\"\\b\\w{3,5}\\b\")\n    result = pattern.findall(text)\n    return result\n\nimport re\ntext = \"This is a sample string with three, four and five word length words.\"\nprint(find_char(text) # Output: ['three', 'four', 'five']\n\n\n# Explanation:\n# \\b - Word boundary\n# \\w - Matches any alphanumeric character (letters, digits, or underscore)\n# {3,5} - Matches between 3 and 5 occurrences of the previous element (in this case \\w)\n# \\b - Word boundary ",
        "generated_testcode": "assert find_char(text=\"Hello world! This is a test string.\") == [\"Hello\", \"test\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    while n: \n        count += 1 if n & 1 == 0 else 0 \n        n >>= 1 \n    return count \n\n#Test the function with example \nn = 10 \nprint(count_unset_bits(n)) ",
        "generated_testcode": "assert count_unset_bits(0b1111) == 0\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n\n# test the function\nstring = \"hello world\"\nprint(char_frequency(string)) ",
        "generated_testcode": "assert char_frequency(str1) == {'a': 2, 'b': 3, 'c': 1, 'd': 2, 'e': 1, 'f': 1}\n\n\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sub_li.sort(key = lambda x: x[1]) \n    return sub_li \n# Example \nsub_li = [[1, 4], [2, 3], [3, 1], [4, 2], [5, 6], [6, 5]] \nprint(Sort(sub_li)) ",
        "generated_testcode": "assert Sort(sub_li) == sorted(sub_li, key=lambda x: x[1])\n\n# Test case 1:\nsub_li = [[1, 3], [2, 2], [3, 1]]\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:  \n        return True\n    else:  \n        return False \n\n#test the function with different values of a,b,c  \nprint(check_Validity(3,4,5)) #True  \nprint(check_Validity(3,10,5)) #False ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    while i<n:\n        sum += a + i*d\n        i += 1\n    return sum\n\n# test the function\nprint(ap_sum(1,5,1)) # should print 15\nprint(ap_sum(1,10,2)) # should print 55\nprint(ap_sum(1,10,3)) # should print 45\nprint(ap_sum(5,3,2)) # should print 225\nprint(ap_sum(4,7,3)) # should print 63 ",
        "generated_testcode": "assert ap_sum(1, 5, 2) == 15\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthname1 in ['April', 'June', 'September', 'November']:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(check_monthnum('February')) # Output: False\nprint(check_monthnum('April')) # Output: True ",
        "generated_testcode": "assert check_monthnum(February) == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b\\w+\\b[.,;:?!]?\"\n    return re.search(pattern, text).group(0)\n\n# Example usage:\ntext = \"Hello, how are you doing today?\"\nresult = text_match_word(text)\nprint(result)  # Output: \"doing.\" ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\" ) == \"world\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)): \n        for j in range(i + 1, len(s) + 1): \n            if s[i] == s[j - 1]: \n                count += 1\n    return count \n\n# example \ns = \"ababa\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(s) == 1\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res=[]  \n    for i in range(x,y+1):  \n        for j in range(1,i+1):  \n            if(i%j==0):  \n                res.append(j)  \n    return max(res)  \n\n#test the function  \nx=int(input(\"Enter the first number: \"))  \ny=int(input(\"Enter the second number: \"))  \nprint(\"The maximum divisor in the given interval is: \",find_Divisor(x,y)) ",
        "generated_testcode": "assert find_Divisor(10, 20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the sum of the three smallest numbers from the given list of numbers.\n    If the list has less than three numbers, return 0.\n    \"\"\"\n    # Remove duplicates and sort the list in ascending order\n    unique_lst = sorted(set(lst))\n    # If the list has less than three unique numbers, return 0\n    if len(unique_lst) < 3:\n        return 0\n    # Return the sum of the first three numbers in the sorted list\n    return unique_lst[0] + unique_lst[1] + unique_lst[2]\n\n\n# Test cases\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8])) # Should print 6\nprint(sum_three_smallest_nums([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])) # Should print 6\nprint(sum_three_smallest_nums([1])) # Should print 0\nprint(sum_three_smallest_nums([1, 2, 3])) # Should print 0 ",
        "generated_testcode": "assert sum_three_smallest_nums(lst=[10, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == 6 # True\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if s is None:\n        return None\n    if isinstance(s, set):\n        return tuple(sorted(s) if s is not None else None)\n    else:\n        return s\n\nprint(set_to_tuple({1, 2, 3, 4, 5, 6, 7, 8}) == (1, 2, 3, 4, 5, 6, 7, 8)) #True\nprint(set_to_tuple({\"apple\", \"banana\", \"cherry\", \"date\"}) == (\"apple\", \"banana\", \"cherry\", \"date\")) #True\nprint(set_to_tuple(None) == None) #True ",
        "generated_testcode": "assert set_to_tuple(set()) == ()\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\ndef smallest_range(arr):\n    min_range = float('inf')\n    max_range = float('-inf')\n    pq = []\n    for i in range(len(arr)):\n        heappush(pq, Element(arr[i][0], i, 0))\n        max_range = max(max_range, arr[i][0])\n\n    result = []\n    while pq:\n        element = heappop(pq)\n        result.append(element.value)\n        if max_range - element.value < min_range:\n            min_range = max_range - element.value\n        if element.index + 1 < len(arr[element.list_num]):\n            heappush(pq, Element(arr[element.list_num][element.index + 1], element.list_num, element.index + 1))\n            max_range = max(max_range, arr[element.list_num][element.index + 1])\n    return (min_range, result)\n\n# Example usage:\narr = [[1, 5, 8], [4, 10], [6, 15, 18]]\nprint(smallest_range(arr)) # Output: (4, [1, 5, 6",
        "generated_testcode": "assert __init__(1, [1, 2, 3, 4, 5], 0) == (1, 1)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (digits, letters)\n\n# test the function\nprint(dig_let(\"hello world 123\")) # (3, 10)\nprint(dig_let(\"12345abc7890\")) # (7, 3)\nprint(dig_let(\"1a2b3c4d5e6f\")) # (6, 6) ",
        "generated_testcode": "assert dig_let(s=\"Hello World! 123\") == (3, 7)\n\n\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n,m+1): \n        # If i is a perfect square and it's odd factor count it\n        root = int(i**0.5) \n        if (root*root == i and root%2 != 0): \n            count += 1\n    return count \nn = 1 \nm = 100\nprint(count_Odd_Squares(n,m)) \n",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 2 # Testing for range 1 to 10\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not nums or len(nums) < 2:\n        return None\n    diff = []\n    for i in range(len(nums)-1):\n        diff.append(nums[i+1]-nums[i])\n    return diff\n\n# Example usage:\nprint(diff_consecutivenums([1,2,3,4,5,7,9])) # [1, 1, 2, 2, 2]\nprint(diff_consecutivenums([5,9,10,15,20,21])) # [4, 6, 5]\nprint(diff_consecutivenums([10,2,4,8,12,16])) # [-8, 2, 4, 4]\n\n\n# If the input list is empty or has less than 2 elements, the function should return None. ",
        "generated_testcode": "assert diff_consecutivenums(nums=[1, 2, 3, 5, 8, 9, 10]) == [1, 3, 3, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 1: \n        return [[1]] \n    elif n == 2: \n        return [[1, 2], [3, 4]] \n    else: \n        x = 1 \n        y = 2 \n        a = [[1, 2], [3, 4]] \n        for i in range(2, n-1): \n            row = [] \n            for j in range(k): \n                if x <= k and y <= k: \n                    if x <= i: \n                        row.append(x) \n                        x += 1 \n                    if y <= k: \n                        row.append(y) \n                        y += 1 \n            a.append(row) \n        for i in range(n-1, 0, -1): \n            row = [] \n            for j in range(k): \n                if x <= k and y <= k: \n                    if y <= i: \n                        row.append(y) \n                        y += 1 \n                    if x <= i: \n                        row.append(x) \n                        x += 1 \n            a.append(row) \n        return a \n\ndef zigzag_helper(n, k):\n    a = zigzag(n, k)\n    res = []\n    for row in a:\n        for i in range(len(row)):\n            if row[",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if m < 1 or n < 1: \n        return 0\n    else: \n        return (m * n) * (m * n - 1) // 2\n\n# test the function with some examples\nprint(count_Squares(5, 5)) # 22\nprint(count_Squares(3, 3)) # 5\nprint(count_Squares(2, 5)) # 6\nprint(count_Squares(7, 2)) # 11\nprint(count_Squares(1, 2)) # 0 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if r == 0 or r == n: \n        return 1\n    if r > n: \n        return 0\n    return bin_coff(n-1, r-1) + bin_coff(n-1, r) \n\ndef count_sequences(values, length, prefix_sum):\n    if length == 1:\n        return 1\n    count = 0\n    for i in range(len(values)):\n        if values[i] <= prefix_sum:\n            count += bin_coff(len(values) - i - 1, length - 1)\n            if values[i] == prefix_sum:\n                count -= 1\n    return count\n# Example usage:\nvalues = [1, 2, 3, 5, 7, 10]\nlength = 4\nprefix_sum = 14\nprint(count_sequences(values, length, prefix_sum)) # Output: 3\n# The sequences are [1, 3, 5, 5, 5], [1, 3, 6, 4], [2, 5, 5, 3] ",
        "generated_testcode": "assert bin_coff(5, 2) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(string) % 8 == 0:\n        for i in range(len(string)):\n            if string[i] not in ['0', '1']:\n                return False\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check(\"1010101010\")) # True\nprint(check(\"12345\")) # False\nprint(check(\"1010101\")) # False\nprint(check(\"1111000110\")) # True ",
        "generated_testcode": "assert check(None) == False\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = [0] * 256 \n    for i in range(len(s)) : \n        freq[ord(s[i])] += 1\n    res = float('inf')\n    for i in range(256) : \n        if freq[i] > 0 : \n            res = min(res, freq[i])\n    return len(s) - res + 1\n\n# Test the function with sample test cases\ns = \"aabcbcddeefgh\"\nprint(minimum_Length(s)) ",
        "generated_testcode": "assert minimum_Length(s=\"aaabbbccddeeff\") == 4\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = {} \n    for i in arr: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    for i in arr: \n        if freq[i] == k: \n            return i \n    return None\n\n#Example:\narr = [1,2,3,4,5,6,6,6,6,7,8,9,9,9]\nk = 3\nn = len(arr)\nprint(first_Element(arr,n,k)) # Output: 6 ",
        "generated_testcode": "assert first_Element(arr=[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5], n=11, k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(str) > 128:  # There are 128 unique characters in ASCII\n        return False\n    char_set = [False for _ in range(128)]\n    for char in str:\n        val = ord(char)\n        if char_set[val]:\n            return False\n        char_set[val] = True\n    return True\n\n# Test the function with some examples\nprint(unique_Characters('Hello'))\nprint(unique_Characters('Python'))\nprint(unique_Characters('World')) ",
        "generated_testcode": "assert unique_Characters(\u201cabcde\u201d) == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Remove the nth column from the given nested list.\n    \"\"\"\n    # Initialize an empty list to store the modified nested list\n    result = []\n    # Iterate through each sublist in the original list\n    for sublist in list1:\n        # Remove the nth element from the sublist and append the modified sublist to the result list\n        new_sublist = sublist[:n] + sublist[n+1:]\n        result.append(new_sublist)\n    return result\n\n# Test the function with an example\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nn = 1\nprint(remove_column(my_list, n))  # Output: [[1, 3], [4, 6], [7, 9]] ",
        "generated_testcode": "assert remove_column(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 2) == [\n        [1, 3, 5],\n        [6, 8, 9],\n        [10, 12, 13],\n        [14, 16, 17]\n    ], \"Test 1 failed\"\n\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return a + (n-1)*d\n\n#test the function\nprint(tn_ap(1,5,2))#3\nprint(tn_ap(5,7,2))#17\nprint(tn_ap(2,8,3))#26\n\n\n#Write a function to find nth term of geometric progression.\ndef tn_gp(a,r,n):\n    return a * r ** (n-1)\n#test the function\nprint(tn_gp(2,2,5))#32\nprint(tn_gp(1,2,10))#1024\nprint(tn_gp(3,3,3))#243\n\n#Write a function to find sum of first n terms of an arithmetic progression.\ndef sum_ap(a,n,d):\n    return n * (2 * a + (n-1) * d) / 2\n#test the function\nprint(sum_ap(1,5,2))#15\nprint(sum_ap(5,7,2))#77\nprint(sum_ap(2,8,3))#42\n\n#Write a function to find sum of first n terms of a geometric progression.\ndef sum_gp(a,r,n):\n    return a * (r**n - 1) / (r - 1)\n#test the function\nprint(sum_gp(2,2,5))#63\nprint(sum_",
        "generated_testcode": "assert tn_ap(1, 5, 2) == 7\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0  \n    for i in range(1, radius+1):  \n        for j in range(1, radius+1):  \n            if (i*i + j*j <= radius*radius):  \n                count += 1  \n    return count  \nr = 5  \nprint(\"Number of rectangles in a circle of radius\", r, \"are:\", count_Rectangles(r)) ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b > 180:\n        return None\n    return 180 - (a + b)\n\n# Example usage:\nprint(find_angle(45, 30)) # Output: 115\nprint(find_angle(70, 60)) # Output: 50\nprint(find_angle(120, 25)) # Output: 155\nprint(find_angle(180, 60)) # Output: None ",
        "generated_testcode": "assert find_angle(30, 45) == 105\n\n# Write a function to calculate the perimeter of a rectangle.\ndef calculate_perimeter(length, width):\n    pass\n\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_element = test_list[0]\n    for element in test_list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n# Test the function with a list of tuples\ntuples_list = [(2, 3, 5, 1, 7, 9), (9, 11, 4, 6), (4, 8, 3, 2, 10, 5), (1, 3, 9, 7, 5, 2, 6)]\nfor tuple in tuples_list:\n    print(find_max(tuple))\n\n\n# Output: \n# 9\n# 11\n# 10\n# 9 ",
        "generated_testcode": "assert find_max(()) == None\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums1)!=len(nums2):\n        return \"Invalid Input\"\n    else:\n        result = list(map(lambda x,y: x%y,nums1,nums2))\n        return result\n\nnums1 = [int(x) for x in input(\"Enter the elements of list 1 separated by space: \").split())\nnums2 = [int(x) for x in input(\"Enter the elements of list 2 separated by space: \").split()]\nprint(moddiv_list(nums1,nums2)) ",
        "generated_testcode": "assert moddiv_list(nums1=[10, 20, 30], nums2=[3, 4, 5]) == [1, 2, 0]\n\n\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if a == 0: \n        return False \n    else: \n        d = b**2 - 4*a*c \n        if d == 0: \n            return True \n        else: \n            return False \n\n# Example usage:\na = 2\nb = 6\nc = 12\n\nif Check_Solution(a,b,c): \n    print(\"Both roots are equal.\") \nelse: \n    print(\"Both roots are not equal.\") ",
        "generated_testcode": "assert Check_Solution(1, -6, 9) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return get_carol(n-1) + n\n    \n# testing the function\nprint(get_carol(0)) # output: 0\nprint(get_carol(1)) # output: 1\nprint(get_carol(2)) # output: 3\nprint(get_carol(3)) # output: 6\nprint(get_carol(4)) # output: 10\nprint(get_carol(5)) # output: 15\nprint(get_carol(6)) # output: 21 ",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of lists as input and removes any empty lists from it.\n    \"\"\"\n    return [l for l in list1 if len(l) > 0]\n\n\n# Test the function with sample input\nsample_list = [[], [1, 2, 3], [4, 5], [], [6, 7, 8], [9], []]\nprint(remove_empty(sample_list)) # Output: [[1, 2, 3], [4, 5], [6, 7, 8], [9]]\n\n\n# The function works by using a list comprehension to iterate through each list in the input list and checking if it has a length greater than 0. If it does, it is included in the returned list. If it doesn't, it is ignored. ",
        "generated_testcode": "assert remove_empty([]), []\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the item with maximum occurrences in a given list.\n\n    If there are multiple items with same maximum occurrences, returns the one which is first in the list.\n    \"\"\"\n    count_dict = {}\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n        \n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n            \n    return max_item\n\n# Example usage:\nnums = [1, 2, 3, 2, 3, 3, 4, 5, 6, 1, 1, 1]\nprint(max_occurrences(nums)) # Output: 1 ",
        "generated_testcode": "assert max_occurrences(nums=[1, 2, 3, 2, 3, 4, 5, 2, 6, 1, 1, 1]) == 1\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(x + K for x in test_list)\n\n\n# Test the function with an example\nmy_list = (2, 4, 5, 8, 10, 12)\nk = 3\nprint(add_K_element(my_list, k)) # Output: (5, 7, 11, 13, 15, 12) ",
        "generated_testcode": "assert add_K_element(( (1, 2, 3, 4, 5), 5) == (6, 7, 8, 9)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if ch == \"0\": \n        return \"1\"\n    else: \n        return \"0\"\n\ndef flip_required(str): \n    flip_count = 0\n    flip_needed = False\n    for i in range(len(str)-1): \n        if str[i] == str[i+1]: \n            flip_needed = True\n            flip_count += 1\n        elif flip_needed: \n            flip_count += 1\n            flip_needed = False\n            \n    return flip_count \n\n# Driver Code \nbinary_str = \"101010001\"\nprint(\"Minimum flip required to make alternate character sequence: \", end=\"\") \nprint(flip_required(binary_str)) ",
        "generated_testcode": "assert make_flip(1010101010101) == 2\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\n# Test the function with a sample number\nnum = 12345\nprint(\"Number of digits in\", num, \"is\", count_Digit(num)) ",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test cases\nprint(adjacent_num_product([2, 5, -3, 1, 8, -1, 4])) # Output: 20\nprint(adjacent_num_product([1, 2, -3, 3, 4, -5, -1, 6, 7])) # Output: 21\nprint(adjacent_num_product([-2, -3, 4, -5, 1, 6, 7, 0, 8, -1, -10])) # Output: 35 ",
        "generated_testcode": "assert adjacent_num_product(list_nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\n\tdef set_left(self, node): \n\t\tself.left = node\n\n\tdef set_right(self, node): \n\t\tself.right = node\n\n\tdef get_left(self): \n\t\treturn self.left\n\tdef get_right(self): \n\t\treturn self.right\n\tdef get_data(self): \n\t\treturn self.data\n\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\telse: \n\t\treturn max(get_height(root.get_left()), get_height(root.get_right())) + 1\n\ndef is_balanced(root): \n\tif root is None: \n\t\treturn True\n\telif abs(get_height(root.get_left()) - get_height(root.get_right())) <= 1 and is_balanced(root.get_left()) and is_balanced(root.get_right()): \n\t\treturn True\n\telse: \n\t\treturn False\n# Example usage:\n# Construct a balanced binary tree\n#        1 \n#    \t   /   \\\n#    \t  2     3\n#     /  \\   /  \\\n#   4    5 6    7\n# / \\\n# 8  9 \n# is_balanced(root) will return True\n#",
        "generated_testcode": "assert __init__(1) == True\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return test_tup * N\n\n# Test the function with sample input\ntup = (1, 2, 3)\nN = 3\nprint(repeat_tuples(tup, N)) # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n\n#Using * operator to repeat a tuple N times\n#The * operator can be used to repeat any sequence type in Python. When we multiply a sequence by a positive integer, we get a new sequence with the original sequence repeated the number of times equal to the integer. \n#For example, 'abc' * 3 returns 'abcabcabc' and [1, 2, 3] * 2 returns [1, 2, 3, 1, 2, 3]. Similarly, (1, 2, 3) * 3 returns (1, 2, 3, 1, 2, 3, 1, 2, 3). ",
        "generated_testcode": "assert repeat_tuples((\"abc\", 3) == (\"abc\", \"abc\", \"abc\")\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return 2*(l*w+w*h+h*l)\n\n#test the function\nprint(lateralsurface_cuboid(2,3,4)) #18\nprint(lateralsurface_cuboid(5,2,10)) #70\n\n\n#Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n#test the function\nprint(volume_cuboid(2,3,4)) #24\nprint(volume_cuboid(5,2,10)) #100\n\n#Write a function to find the volume of a sphere\nfrom math import pi\ndef volume_sphere(r):\n    return (4/3)*pi*(r**3)\n\n#test the function\nprint(volume_sphere(2)) #33.541666666666666714931\nprint(volume_sphere(3)) #1135.288125\n\n#Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    return 4*pi*(r**2)\n#test the function\nprint(surface_area_sphere(2)) #50.265482454249015985\nprint(surface_area_sphere(3)) #154.15",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 52\n\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    lst = list(price)\n    lst.sort(key=lambda x: x[1])\n    return tuple(lst)\n\n# test the function with the following tuple\nprices = ((\"apple\", 1.20), (\"banana\", 0.60), (\"orange\", 2.40), (\"watermelon\", 3.60))\nprint(float_sort(prices)) ",
        "generated_testcode": "assert float_sort(('apple', 1.5, 'banana', 2.5, 'orange', 3.5) == ('apple', 1.5, 'banana', 2.5, 'orange', 3.5)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Base case\n    if left_element > right_element:\n        return left_element\n\n    # Calculate the middle element\n    middle_element = (left_element + right_element) // 2\n    # If the middle element is missing, return it\n    if A[middle_element] - A[left_element] != middle_element - left_element:\n        return middle_element\n    # If the middle element is not missing, search in the left or right half\n    if A[middle_element] == A[left_element]:\n        return smallest_missing(A, middle_element + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, middle_element)\n\n\n\n# Test the function with a sorted array\nA = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17, 18, 19]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 13\n\n\n# Test the function with an unsorted array\nA = [4, 5, 0, 1, 2, 6, 3, 7, 8, 9, 10, 11, 12, 15, 13, 16, 17, 18]\nA",
        "generated_testcode": "assert smallest_missing(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], left_element=0, right_element=9) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    build_max_heap(nums)\n    n = len(nums)\n    for i in range(n-1, 0, -1, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, 0, i)\n\n\ndef build_max_heap(nums):\n    n = len(nums)\n    for i in range(n//2-1, -1, -1, -1):\n        heapify(nums, i, n)\n\n\ndef heapify(nums, i, n):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and nums[left] > nums[largest]:\n        largest = left\n    if right < n and nums[right] > nums[largest]:\n        largest = right\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i]\n        heapify(nums, largest, n)\n\n\n# Test the function with an example\nnums = [4, 1, 3, 2, 10, 12, 5, 6]\nheap_assending(nums)\nprint(nums)\n\n# Output: [1, 2, 3, 4, 6, 10, 12]",
        "generated_testcode": "assert heap_assending(nums=[4, 2, 5, 1, 3, 0, 9, 7]) == [0, 1, 2, 3, 4, 5, 7, 9]\n\n# Test case 1: Test the function with a list of integers.\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return l * w * h\n\n#Test the function with some test cases\nprint(volume_cuboid(3,4,5) == 60) #True\nprint(volume_cuboid(10,20,10) == 20000) #True\nprint(volume_cuboid(1,1,1) == 1) #True\nprint(volume_cuboid(0,2,3) == 0) #True\nprint(volume_cuboid(1.5,2.5,3.5) == 3.75) #True\nprint(volume_cuboid(-1,-2,1) == -2) #True ",
        "generated_testcode": "assert volume_cuboid(2, 3, 4) == 24\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    pass\n\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    # Convert the string to a list to modify it and then convert it back to a string\n    str = list(str)\n    # Sort the list to handle duplicates\n    str.sort()\n    # Call the recursive helper function\n    permute_helper(str, [], result)\n    # Convert the list of tuples to list of strings\n    result = [''.join(t) for t in result]\n    return result\n\n\ndef permute_helper(str, current, result):\n    # Base case: if there are no more characters to add, add the current permutation to the result\n    if not str:\n        result.append(tuple(current))\n    else:\n        # Iterate through the sorted string\n        for i in range(len(str)):\n            # Choose the next character\n            char = str[i]\n            # If it's not already in the current permutation, create a new one and add it\n            if i == 0 or str[i - 1] != char:\n                new_str = str[:i] + str[i+1:]\n                new_current = current + [char]\n                permute_helper(new_str, new_current, result)\n\n# Test the function\nprint(permute_string('aab')) # ['aab', 'aba', 'baa', 'abb', 'bab', 'aba', 'baa'] ",
        "generated_testcode": "assert permute_string(None) == []\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return round(n/m)*m\n\n#example:\n#round_num(15, 10) returns 10\n#round_num(27, 5) returns 25\n#round_num(32, 10) returns 30\n#round_num(46, 10) returns 40 ",
        "generated_testcode": "assert round_num(15, 10) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup += (i,)\n        else:\n            new_tup += (\"duplicate\",)\n    return new_tup\n\n#Test the function with an example tuple\ntest_tup = (1, 2, 3, 1, 4, 3, 5, 6, 2, 4, 7)\nresult = remove_replica(test_tup)\nprint(result) # Output: (1, 2, 'duplicate', 3, 'duplicate', 4, 'duplicate', 5, 6, 7) ",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'd', 'b', 'e', 'a') == ('a', 'b', 'c', 'd', 'e', None)\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return s.replace(c,'') \n  \n# Driver code to test the function \ns = \"geeksforgeeks\"\nc = \"e\"\nprint(remove_Char(s,c)) # Output: \"gksforgks\" ",
        "generated_testcode": "assert remove_Char(s='hello world', c='l') == 'heo word'\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_list) == 0:\n        return []\n    else:\n        last_element = test_list[-1]\n        test_list.pop()\n        test_list.insert(0, last_element)\n        return test_list\n\n#Test the function with an example\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(move_first(test_list)) ",
        "generated_testcode": "assert move_first([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]) == [\"elderberry\", \"apple\", \"banana\", \"cherry\", \"date\"]\n\n\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return 2*((l*w)+(w*h)+(h*l))\n\n#Test function\nprint(surfacearea_cuboid(2,3,4)==52)\nprint(surfacearea_cuboid(5,2,4)==60)\nprint(surfacearea_cuboid(10,10,10)==600)\nprint(surfacearea_cuboid(5,5,5)==100)\nprint(surfacearea_cuboid(1,1,1)==6)\n\n#Output:\n#True\n#True\n#True\n#True\n#True ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n\n# Test 1: Test with valid input\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    multi_list = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(0)\n        multi_list.append(row)\n    return multi_list\n\n# example usage:\n# a 4x4 array filled with zeros\nprint(multi_list(4,4))\n\n# output: [[0, 0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]] ",
        "generated_testcode": "assert multi_list(3,4) == [[None, None, None, None], [None, None, None], [None, None, None]]\n\n\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(list_data, key=lambda x: x[index_no])\n\n\n\n# test the function with an example\nlist_data = [[2, 'python'], [3, 'java'], [1, 'kotlin'], [4, 'javascript']]\nprint(index_on_inner_list(list_data, 1))  # sort by index 1 (i.e. the second element of each inner list)\n# output: [[1, 'kotlin'], [2, 'python'], [4, 'javascript']]\n\n\n\n# sort a list of lists based on the sum of their elements\ndef sum_of_elements(list_data):\n    return sorted(list_data, key=sum)\n\n\n\n# test the function with an example\nlist_data = [[2, 3, 4], [1, 2, 5], [3, 2], [4, 5, 1]]\nprint(sum_of_elements(list_data))  # sort by sum of elements in each list\n# output: [[3, 2], [1, 2, 5], [2, 3, 4], [4, 5, 1]]\n\n",
        "generated_testcode": "assert index_on_inner_list(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ],\n    1\n) == [\n    [4, 5, 6],\n    [1, 2, 3],\n    [7, 8, 9]\n]\n\n# Test case 1: Test if the function can sort a list of lists by the second element of each inner list.\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(A) == 0:\n        return 0\n    left, right = 0, len(A) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] < A[right]:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n\n# testing the function\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A)) # output 3\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_rotation_count(A)) # output 0\nA = [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(find_rotation_count(A)) # output 2\nA = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\nprint(find_rotation_count(A)) # output 4 ",
        "generated_testcode": "assert find_rotation_count(A=[1, 2, 3, 4, 5, 6, 7]) == 0\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # convert integer to binary\n    binary = bin(n)[2:] \n    # toggle all odd bits \n    binary = ''.join(['0' if i == '1' else '1' for i in binary[::2]) \n    # convert binary to integer \n    return int(binary, 2) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 -> 1001\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    freq = 0\n    smallest = min(arr) \n    for i in arr: \n        if i == smallest: \n            freq += 1\n    return freq\n\n#Example\narr = [1,2,3,4,5,2,3,5,6,7,2]\nn = len(arr)\nprint(frequency_Of_Smallest(n,arr))  # Output: 2 ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,2,1]) == 2\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2)\n\n\n# Test the function\nfor i in range(10):\n    print(get_perrin(i))\n\n\n# Output: 3, 0, 2, 3, 2, 5, 5, 7, 10, 12, 16, 19, 28, 37, 46, 60",
        "generated_testcode": "assert get_perrin(0) == 3\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack=[]\n    count=0\n    for i in s:\n        if i=='{':\n            stack.append(i)\n        elif i=='}':\n            if stack and stack[-1]=='{':\n                stack.pop()\n            else:\n                count+=1\n                while stack and stack[-1]==')':\n                    stack.pop()\n                    count+=1\n    return count+len(stack)\n\nprint(swap_count('{{{{{{{{{{{{{}}}}}}}}}}}}')) #5\nprint(swap_count('{{{{{{{{(())}}}}}}')) #1\nprint(swap_count('{{{{{{(())}}}}}}')) #0\nprint(swap_count('{{{{{{(())}')) #2 ",
        "generated_testcode": "assert swap_count(s=\"([])()[]\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if int(N,16)%2 == 0: \n        return \"even\" \n    else: \n        return \"odd\"\n\n#example usage:\nN = \"123ef\"\nprint(even_or_odd(N)) # output: odd ",
        "generated_testcode": "assert even_or_odd(0x10) == \"Even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    power = 1 \n    while (power <= n): \n        power = power * 2\n    return power // 2\nn = int(input(\"Enter a number: \" )\nprint(\"The highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n))\n\n\n#Example\n#Input: 15\n#Output: The highest power of 2 less than or equal to 15 is 8 ",
        "generated_testcode": "assert highest_Power_of_2(16) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test the function\nprint(find_lucas(0)) # Output: 2\nprint(find_lucas(1)) # Output: 1\nprint(find_lucas(2)) # Output: 3\nprint(find_lucas(3)) # Output: 3\nprint(find_lucas(4)) # Output: 4\nprint(find_lucas(5)) # Output: 7\nprint(find_lucas(6)) # Output: 11\nprint(find_lucas(7)) # Output: 18\nprint(find_lucas(8)) # Output: 29\nprint(find_lucas(9)) # Output: 47\nprint(find_lucas(10)) # Output: 76 ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for item in list:\n        new_list.append(string + item)\n    return new_list\n\n# test the function\nprint(add_string(['apple', 'banana', 'cherry'], 'fruit: ')) # ['fruit: apple', 'fruit: banana', 'fruit: cherry'] ",
        "generated_testcode": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"fruit: \") == [\"fruit: apple\", \"fruit: banana\", \"fruit: cherry\"]\n\n\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Convert the given lists into a nested dictionary.\n    l1: list of keys\n    l2: list of values\n    l3: list of values\n    \"\"\"\n    dict = {}\n    for i in range(len(l1)):\n        dict[l1[i]] = {}\n        dict[l1[i]][l2[i]] = l3[i]\n    return dict\n\n# Test the function\nl1 = [\"a\", \"b\", \"c\"]\nl2 = [\"one\", \"two\", \"three\"]\nl3 = [1, 2, 3]\nprint(convert_list_dictionary(l1, l2, l3)) # Output: {'a': {'one': 1}, 'b': {'two': 2}, 'c': {'three': 3}} ",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"b\": 1, \"c\": True}, \"b\": {\"a\": 2, \"c\": False}, \"c\": {\"a\": 3, \"b\": True}}\n\n# Test case 1: Test if the function can handle empty lists\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    memo = {}\n    def find_max_sum(n, memo):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            memo[n] = max(n, find_max_sum(n/2, memo) + find_max_sum(n/3, memo) + find_max_sum(n/4, memo) + find_max_sum(n/5, memo))\n            return memo[n]\n    return find_max_sum(n, memo)\n\n\nprint(get_max_sum(10)) # 22\nprint(get_max_sum(15)) # 24\nprint(get_max_sum(20)) # 29 ",
        "generated_testcode": "assert get_max_sum (10) == 27\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(input_list, key=lambda x: len(x))\n\n# Test the function with sample data\nsample_data = [[1, 2, 3, 4, 5], [7, 8], [9, 6, 4], [10, 11, 12, 13, 14, 15]]\nprint(max_length_list(sample_data))  # Output: [10, 11, 12, 13, 14, 15]\n\n\n\n#Example 2:\n# Write a lambda function to calculate the square of a number\nsquare = lambda x: x**2\n# Test the function with sample data\nprint(square(5))  # Output: 25\nprint(square(10)) # Output: 100 ",
        "generated_testcode": "assert max_length_list([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"]) == \"banana\"\n\n\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n\n# Test the function with some sample inputs:\ntup1 = (1, 2, 3, 4, 5, 6, 7, 8)\ntup2 = (1, 2, 3, 4, 5, 6, 7, 7)\ntup3 = (1, 2, 3, 4, 5, 6, 6, 7)\n\nprint(check_distinct(tup1)) # True\nprint(check_distinct(tup2)) # False\nprint(check_distinct(tup3)) # False ",
        "generated_testcode": "assert check_distinct(()) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    char_frequency = {}\n    \n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n            \n    for char in str1:\n        if char_frequency[char] == 1:\n            return char\n            \n    return None ",
        "generated_testcode": "assert first_non_repeating_character(None) == None\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re \n    pattern = re.compile(r'^([a-zA-Z])\\1$') \n    if re.search(pattern, string): \n        return True\n    else: \n        return False\n# Testing the function with examples \nprint(check_char(\"apple\")) # True \nprint(check_char(\"banana\")) # False \nprint(check_char(\"gg\")) # True \nprint(check_char(\"racecar\")) # True \nprint(check_char(\"hello\")) # False \nprint(check_char(\"abba\")) # True \nprint(check_char(\"abcd\")) # False ",
        "generated_testcode": "assert check_char(string) == True \n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if a > b:\n        if b > c:\n            return b\n        elif b < c:\n            return c\n        else:\n            return a\n    elif a > c:\n        return a\n    else:\n        return c\n\n#test the function with different values\nprint(median_numbers(3,5,7)) #should return 5\nprint(median_numbers(2,7,4)) #should return 4\nprint(median_numbers(1,9,6)) #should return 6\nprint(median_numbers(1,2,3)) #should return 2 ",
        "generated_testcode": "assert median_numbers(2, 4, 3) == 3\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param nums: list of integers\n    :return: list of integers, each representing the sum of digits of the corresponding number in the input list\n    \"\"\"\n    result = []\n    for num in nums:\n        if num < 0:\n            num = -num\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result\n\n# Test cases\nprint(sum_of_digits([123, 456, 789, 1000]))  # Output: [6, 15, 17, 1]\nprint(sum_of_digits([-12, -345, 0, 789]))  # Output: [3, 12, 0, 25] ",
        "generated_testcode": "assert sum_of_digits(list(range(10)) == [0, 1, 3, 3, 6, 6, 10, 10, 15, 15, 21, 28, 28, 36, 45",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n\n# Test the function with some test cases\nprint(bitwise_xor((1, 2, 3, 4), (5, 6, 7)) # Output: (4, 4, 3)\nprint(bitwise_xor((10, 11, 12), (7, 8, 9)) # Output: (15, 13, 11)\nprint(bitwise_xor((2, 3, 4, 5), (3, 2, 1)) # Output: (1, 1, 5) ",
        "generated_testcode": "assert bitwise_xor(('10101010', '00111011') == '10011111')\n\n\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return freq_dict\n\ntest_list = [(1,2),(3,4),(5,6),(1,2),(7,8),(3,4)]\nfreq_dict = extract_freq(test_list)\nprint(freq_dict)  # Output: {(1, 2): 2, (3, 4): 2, (5, 6): 1, (7, 8): 1}\n\n\n# Write a function to extract frequency of each element in the list\ndef extract_freq_each(test_list):\n    freq_dict = {}\n    for i in test_list:\n        for j in i:\n            if j not in freq_dict:\n                freq_dict[j] = 1\n            else:\n                freq_dict[j] += 1\n    return freq_dict\n\ntest_list = [(1,2),(3,4),(5,6),(1,2),(7,8),(3,4)]\nfreq_dict = extract_freq_each(test_list)\nprint(freq_dict) # Output: {1: 2, 2: 2, 3: 2, 4: 2, 5: 1, 6: 1",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"orange\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 2}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(tuple(map(lambda x: x[0] + x[1], zip(test_tup1[i], test_tup2[i])))\n    return result\n\n#Example:\n# Input:\n# test_tup1 = ((1,2,3), (4,5,6), (7,8,9))\n# test_tup2 = ((10,20,30), (40,50,60), (70,80,90))\n# Output:\n# ((11,21,31), (41,51,61), (71,81,91)) ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18)) ) == ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n# Test case 1:\n# Input:\n# ((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18))\n# Output:\n# ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if r > n-r: \n        r = n-r \n    C = [1] * (r+1)\n    for i in range(1, n+1): \n        j = min(r, i-r) \n        while j <= r: \n            C[j] = (C[j]*(i%p+1)%p)%p \n            C[j] = (C[j]*(n-i+1)%p)//p \n            j += 1\n    return C[r] ",
        "generated_testcode": "assert ncr_modp(10, 2, 13) == 45\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain name\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n# Test cases\nprint(is_valid_URL(\"http://www.google.com\"))  # True\nprint(is_valid_URL(\"https://www.google.com\"))  # True\nprint(is_valid_URL(\"www.google.com\"))  # False\nprint(is_valid_URL(\"http://google.com\"))  # True\nprint(is_valid_URL(\"google.com\"))  # False\nprint(is_valid_URL(\"http://google.com/hello/world\"))  # True\nprint(is_valid_URL(\"https://www.google.com:443\"))  # True\nprint(is_",
        "generated_testcode": "assert is_valid_URL(r\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n\n#testing the function with some inputs\nprint(minimum(2,3))\nprint(minimum(5,6))\nprint(minimum(10,8))\nprint(minimum(20,15)) \n\n\n#output:\n#2\n#5\n#8\n#10 ",
        "generated_testcode": "assert minimum(5,6) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in tuple1: \n        if i == tuplex: \n            return True \n    return False\n#Example \ntuple1 = (1,2,3,4,5,6,7,8) \nprint(check_tuplex(4,tuple1)) # True ",
        "generated_testcode": "assert check_tuplex((\"apple\", (\"apple\", \"banana\", \"cherry\")) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x%2==0:\n        return 'Even'\n    else:\n        return 'Odd'\nprint(find_Parity(4)) #output: Even\nprint(find_Parity(7)) #output: Odd\nprint(find_Parity(0)) #output: Even\nprint(find_Parity(100)) #output: Even\nprint(find_Parity(19)) #output: Odd ",
        "generated_testcode": "assert find_Parity(10) == 0 # even\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert number to string and sort the digits\n    digits = sorted(str(n), reverse=True)\n    # Create a set of unique digits and sort them in descending order\n    sorted_unique_digits = sorted(set(digits), reverse=True)\n    # Create a dictionary to store the count of each unique digit\n    digit_count = {d: digits.count(d) for d in sorted_unique_digits}\n    # Create a list of the digits in the result\n    result = []\n    # Iterate through the unique digits in descending order\n    for d in sorted_unique_digits:\n        # Add the digit to the result list as many times as it appears in the original number\n        result.extend([d] * digit_count[d])\n        # Remove the digit from the count dictionary if it appears in the result\n        if d in digit_count:\n            del digit_count[d]\n        # Find the next largest digit that can be added to the result\n        for larger_d in sorted_unique_digits:\n            if larger_d > d and digit_count.get(larger_d, 0) > 0:\n                # Add the next largest digit to the result\n                result.append(larger_d)\n                # Decrement the count of the larger digit\n                digit_count[larger_d] -= 1\n                # If the count is zero, remove the digit from the count dictionary\n                if digit_count[larger_d] == 0:\n                    del",
        "generated_testcode": "assert rearrange_bigger(12345) == 5342\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :type k: int\n    :rtype: List[List[int]\n    \"\"\"\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    j = 0\n    pairs = []\n    while i < len(nums1) and j < len(nums2) and k > 0:\n        pairs.append([nums1[i], nums2[j]])\n        i += 1\n        j += 1\n        k -= 1\n    return pairs\n\n\n\nprint(k_smallest_pairs([1, 7, 11], [2, 4, 6], 3)) ",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 7, 11], nums2=[2, 4, 6], k=3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0]\n            if product < min_product:\n                min_product = product\n    return abs(min_product)\n\n\n# Test\nprint(min_product_tuple([(2,3), (4,5), (8,6), (9,3), (7,4)]) # Output: 15 ",
        "generated_testcode": "assert min_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)] ) == 12\n\n\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    minval = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == type(minval):\n            if listval[i] < minval:\n                minval = listval[i]\n        elif type(listval[i]) == int and type(minval) == float:\n            if float(listval[i]) < minval:\n                minval = float(listval[i])\n        elif type(listval[i]) == float and type(minval) == int:\n            if listval[i] < float(minval):\n                minval = listval[i]\n    return minval\n\n# test the function with a sample input\nlistval = [3, 4.5, 'apple', 2, 8, 'orange', 1.5, 'banana']\nprint(min_val(listval)) # output: 1.5 ",
        "generated_testcode": "assert min_val([\"apple\", 5, 3.14, \"banana\", 7, 2.71, \"cherry\", 10, \"orange\"]) == \"apple\"\n\n\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not word:\n        return \"\"\n    words = word.split('_')\n    camel_case = words[0]\n    for word in words[1:]:\n        camel_case += word.capitalize()\n    return camel_case\n\n# Test the function with some examples\nprint(snake_to_camel(\"hello_world\"))\nprint(snake_to_camel(\"this_is_a_long_sentence\"))\nprint(snake_to_camel(\"this_is_another_example\"))\nprint(snake_to_camel(\"\")) ",
        "generated_testcode": "assert snake_to_camel(snake_to_camel) == \"snakeToCamel\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [i for i in l if i%2==0]\n\n# Test the function with the sample list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(remove_odd(l) # Output: [2, 4, 6, 8, 10, 12]\n\n\n# Another way to solve this problem is to use filter function\ndef remove_odd(l):\n    return list(filter(lambda x: x%2==0, l))\n\n# Test the function with the sample list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(list(remove_odd(l)) # Output: [2, 4, 6, 8, 10, 12] ",
        "generated_testcode": "assert remove_odd(l) == [2, 4, 6, 8]\n\n\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of tuples and an integer n and returns a list of the nth element of each tuple\n    \"\"\"\n    result = []\n    for tuple in list1:\n        result.append(tuple[n-1])\n    return result\n\n# Test the function with an example\nlist1 = [(1,2,3), (4,5,6), (7,8,9)]\nprint(extract_nth_element(list1, 2)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_nth_element([(1,2), (3,4), (5,6), (7,8)], 2) == 4\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    set1=set(list1)  \n    set2=set(list2)  \n    if set1.intersection(set2):  \n        return True  \n    else:  \n        return False  \nlist1=[1,2,3,4,5,6]  \nlist2=[4,5,6,7,8]  \nif overlapping(list1,list2):  \n    print(\"Overlapping exists\")  \nelse:  \n    print(\"Overlapping doesn't exist\") ",
        "generated_testcode": "assert overlapping(list1=[1,2,3,4,5],list2=[4,5,6,7,8]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(arr) < 2: \n        return None\n    if len(arr) == 2: \n        return (arr[0], arr[1], arr[0]*arr[1])\n    \n    max_product = max(arr[0]*arr[1], arr[0]*arr[2], arr[1]*arr[2])\n    max_pair = (arr[0], arr[1]) if max_product == arr[0]*arr[1] else (arr[0], arr[2]) if max_product == arr[0]*arr[2] else (arr[1], arr[2])\n    min_product = min(arr[0]*arr[1], arr[0]*arr[2], arr[1]*arr[2])\n    min_pair = (arr[0], arr[1]) if min_product == arr[0]*arr[1] else (arr[0], arr[2]) if min_product == arr[0]*arr[2] else (arr[1], arr[2])\n    \n    for i in range(3, len(arr)): \n        curr_max_product = max(max_product, arr[i]*max_pair[0], arr[i]*min_pair[0], arr[i]*max_pair[1], arr[i]*min_pair[1])\n        curr_min_product = min(min_product, arr[i]*max_pair[0], arr[i]*min_pair[0], arr[i]*max_pair[1], arr",
        "generated_testcode": "assert max_Product(arr) == (3, 4) # if arr = [1, 2, 3, 4, 5, 6, 7, 2, 1, 5, 3]\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n<=3: \n        return n \n    res=0\n    for i in range(1,n-1): \n        res=max(res,i*(n-i)) \n    return res+n \n\n# Driver code \nn=int(input(\"Enter the number: \") \nprint(breakSum(n)) ",
        "generated_testcode": "assert breakSum(10) == 18\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = set(Input[0]) \n    for i in range(1, len(Input)): \n        res = res.intersection(set(Input[i])) \n    return list(res) \n\n# Driver code \nInput = [(1, 2, 3, 4, 5), (2, 3, 5, 6), (3, 4, 5, 7), (4, 5, 6, 8)] \nprint(group_tuples(Input)) # Output: [5] ",
        "generated_testcode": "assert group_tuples([(1,2,3), (2,3,4), (3,4,5)] ) == 3\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_len = 0\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)+1): \n            sub_lst = lst[i:j]\n            if len(sub_lst) > max_len and all(sub_lst[0] <= x for x in sub_lst):\n                max_len = len(sub_lst)\n                result = sub_lst\n    return result ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for num in list1:\n        sum += round(num)\n    return sum * len(list1)\n\n#Test the function with a list of numbers\nnumbers = [1.5, 2.3, 3.7, 4.2, 5.8, 6.4]\nprint(round_and_sum(numbers)) # Output: 24 ",
        "generated_testcode": "assert round_and_sum(list1) == 100\n\n# The function should round each number in the list to the nearest integer and then sum them up. \n# The length of the list should be multiplied with the sum of the rounded numbers. \n# For example, if the list is [1.5, 2.3, 3.7, 4.8, 5.2], the rounded numbers would be [2, 2, 4, 5, 5] and their sum is 13. \n# The length of the list is 4, so the final result should be 13 * 4 = 52. ",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum=0\n    i=1\n    count=0\n    while count<n:\n        if i%2==0:\n            sum+=i**3\n            count+=1\n        i+=1\n    return sum\n\n#example:\n#print(cube_Sum(5)) #output: 2205\n#print(cube_Sum(3)) #output: 56\n",
        "generated_testcode": "assert cube_Sum(3) == 216\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    delimiter = \",\"\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]\n\n# Test the function with a sample input\ntest_tup = (\"apple\", \"banana\", \"cherry\")\nprint(concatenate_tuple(test_tup)) ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"!\") == \"HelloWorld!\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Average of cubes of first\",n,\"numbers is:\",find_Average_Of_Cube(n))\n\n\n#Output\n#Enter the value of n: 5\n#Average of cubes of first 5 numbers is: 221.0\n#Enter the value of n: 10\n#Average of cubes of first 10 numbers is: 312.5 ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 14.16666666666666666667\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    dp = [[0 for i in range(n)] for j in range(m)] \n    for col in range(n-1, -1, -1): \n        for row in range(m-1, -1, -1): \n            if (col == n-1): \n                dp[row][col] = gold[row][col] \n            elif (row == m-1): \n                dp[row][col] = gold[row][col] \n            elif (col == n-1): \n                dp[row][col] = gold[row][col] + dp[row+1][col] \n            elif (row == m-1): \n                dp[row][col] = gold[row][col] + dp[row][col+1] \n            else: \n                dp[row][col] = gold[row][col] + max(dp[row+1][col], dp[row][col+1]) \n    return dp[0][0] \n\ngold_mine = [[1, 3, 3, 3, 2], \n           [2, 1, 4, 0], \n           [0, 6, 4, 5], \n           [5, 0, 2, 3]] \nm = 4\nn = 3\nprint(get_maxgold(gold_mine, m, n)) ",
        "generated_testcode": "assert get_maxgold(\n    [\n        [1, 3, 1, 5, 2],\n        [2, 2, 4, 0],\n        [5, 0, 2, 3],\n        [0, 6, 1, 2]\n    ], 3, 4) == 12\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in test_tuple:\n        result += (i[-1],)\n    return result\n\n# Test the function with an example\nmy_tuple = ('apple', 'banana', 'orange', 'pear', 'grape')\nprint(extract_rear(my_tuple)) # Expected output: ('e', 'a', 'e', 'e') ",
        "generated_testcode": "assert extract_rear((\"hello\") == \"o\"\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == list:\n            count += count_element_in_list(i, x)\n        else:\n            if i == x:\n                count += 1\n    return count ",
        "generated_testcode": "assert count_element_in_list([\"apple\", \"banana\", \"cherry\", \"banana\", \"date\", \"banana\"], \"banana\") == 2\n\n\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x%2!=0,nums))\n\n#test the function\nnumbers = [1,2,3,4,5,6,7,8,9]\nprint(filter_oddnumbers(numbers)) # output [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert filter_oddnumbers(range(10)) == [1, 3, 5, 7, 9]\n\n\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    match = re.match(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\"\n\n# Test the function with different dates\nprint(change_date_format(\"2021-05-10\"))\nprint(change_date_format(\"20022-12-01\"))\nprint(change_date_format(\"2005-08-31\"))\nprint(change_date_format(\"20000-13-01\"))  # Invalid date format\nprint(change_date_format(\"20000-02-30\"))  # Invalid date format (Feb 30 does not exist) ",
        "generated_testcode": "assert change_date_format(2021-01-01) == \"01-01-2021\"\n\n\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n\nmy_list = [5, 3, 8, 2, 1, 7, 6, 4]\nprint(shell_sort(my_list)) #[1, 2, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert shell_sort([\"apple\", \"pear\", \"orange\", \"banana\", \"grape\", \"strawberry\"]) == [\"apple\", \"banana\", \"grape\", \"orange\", \"pear\", \"strawberry\"]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    element_wise_list = [i for i in range(len(test_tup1)) if test_tup1[i] == test_tup2[i]]\n    tuple_wise_list = [(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)] if i in element_wise_list]\n    return element_wise_list, tuple_wise_list\n\n# Test the function with sample tuples\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (2, 3, 5, 4, 6, 7)\nprint(and_tuples(test_tup1, test_tup2))  # Output: ([1, 4], [(2, 2), (3, 3), (4, 4), (5, 5)]) ",
        "generated_testcode": "assert and_tuples(('apple', 'banana', 'cherry', 'date', 'elderberry'), (1, 2, 3, 4)) == ('apple', 1, 'banana', 2, 'cherry', 3, 'date', 4, 'elderberry')\n\n# The output should be ('apple', 1, 'banana', 2, 'cherry', 3, 'date', 4, 'elderberry') ",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    a, b, c are the coefficients of the quadratic equation in the form ax^2 + bx + c = 0\n    The function returns the directrix of the parabola\n    \"\"\"\n    if a == 0:\n        return \"The equation is not quadratic\"\n    else:\n        d = abs(b**2 - 4*a*c)**0.5\n        x_1 = (-b - d)/(2*a)\n        x_2 = (-b + d)/(2*a)\n        return x_1, x_2\n\n#Test\nprint(parabola_directrix(1, 2, 3))  # Output: (1.6666666666666666666667, -0.66666666666666666666) ",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Convert lists to sets\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check for intersection between the sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(common_element([1, 2, 3, 4], [4, 5, 6])) # True\nprint(common_element([1, 2, 3], [4, 5, 6])) # False\nprint(common_element([1, 2, 3], [2, 5, 6])) # True ",
        "generated_testcode": "assert common_element([\"apple\", \"banana\", \"cherry\"], [\"orange\", \"kiwi\", \"banana\"]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (base1+base2)/2*height\n\n#testing the function with some sample values\na=median_trapezium(5,6,3)\nprint(a)\nb=median_trapezium(4,7,5)\nprint(b)\n\n#output:\n#5.0\n#11.0\n\n#The function takes base1, base2 and height as inputs and calculates the median of the trapezium using the formula (base1+base2)/2*height. ",
        "generated_testcode": "assert median_trapezium(4, 6, 3) == 5.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in arr:\n        if i > number:\n            return False\n    return True\n\n# Test the function with an example\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnumber = 4\nprint(check_greater(arr, number))  # Output: False\n\nnumber = 10\nprint(check_greater(arr, number))  # Output: True ",
        "generated_testcode": "assert check_greater(arr=[1, 2, 3, 4, 5], number=4) == False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = \"ab+\"\n    import re\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abc\")) # False\nprint(text_match_one(\"ac\")) # False\nprint(text_match_one(\"abbbbc\")) # True\n\nprint(text_match_one(\"abbabc\")) # True\n\nprint(text_match_one(\"aabb\")) # False\n\n\n# Write a function that matches a string that has a followed by zero or more b's.\ndef text_match_zero(text):\n    pattern = \"ab*\"\n    import re\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\nprint(text_match_zero(\"ab\")) # True\nprint(text_match_zero(\"abb\")) # True\nprint(text_match_zero(\"abbc\")) # True\nprint(text_match_zero(\"a\")) # True\nprint(text_match_zero(\"abc\")) # False\nprint(text_match_zero(\"ac\")) # False\nprint(text_match_zero(\"abbbbc\")) # True\nprint(text_match_zero(\"abbabc\")) # True\nprint(text_match_zero(\"aabb\")) # True ",
        "generated_testcode": "assert text_match_one([\"ab\", \"abb\", \"a\", \"abbb\", \"abcd\", \"acb\", \"abbbb\"] == [\"ab\", \"abb\", \"abbb\"]\n\n\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n % 10\n\n#example\n#Test the function with some examples\nprint(last_Digit(12345))   # Output: 5\nprint(last_Digit(10000))   # Output: 0\nprint(last_Digit(12456789)) # Output: 9 ",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in list1:\n        if i<0:\n            print(i)\nlist1 = [1, 2, -3, 4, -5, 6, -7, 8, -9]\nneg_nos(list1)\n# Output: -3 -5 -7 -9 ",
        "generated_testcode": "assert neg_nos(list1) == [-3, -5, -1, -8]\n\n# Test case 1:\nlist1 = [3, 5, 1, 8, -3, -5, -1, -8]\nprint(neg_nos(list1)) # Output: [-3, -5, -1, -8]\n\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\n# Test the function with a sample string\nprint(remove_odd(\"Hello World\"))\nprint(remove_odd(\"Python\"))\nprint(remove_odd(\"Algorithm\")) ",
        "generated_testcode": "assert remove_odd(None) == None\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    bidirectional_count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i] > test_list[j] and test_list.index(test_list[i] - 1) == j) or (test_list[i] < test_list[j] and test_list.index(test_list[i] + 1) == j):\n                bidirectional_count += 1\n    return bidirectional_count\n\n# Test the function with sample data\ntest_list = [1, 2, 3, 4, 5, 4, 3, 2, 1]\nprint(count_bidirectional(test_list)) # Output: 3\n\n\n# Example:\n# In the list [1, 2, 3, 4, 5, 4, 3, 2, 1], there are three bidirectional pairs: (1, 2), (2, 1), and (3, 4) and (4, 3). ",
        "generated_testcode": "assert count_bidirectional([\"cat\", \"dog\", \"bird\", \"dog\", \"cat\", \"cat\", \"fish\", \"dog\", \"fish\"]) == 2\n\n\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n\n# test the function with an example:\nprint(multiple_to_single([5, 4, 3, 2, 1])) # output: 54321 ",
        "generated_testcode": "assert multiple_to_single(1, 2, 3) == 123\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = text.split()\n    positions = []\n    for i in range(len(words):\n        if words[i].endswith(\"ly\") or words[i].endswith(\"ment\"):\n            if words[i] in [\"more\", \"most\", \"less\", \"many\", \"much\"]:\n                continue\n            positions.append((i, words[i]))\n    return positions\n\n# Example usage:\ntext = \"I walked slowly to the park.\"\nprint(find_adverb_position(text))  # Output: [(2, \"slowly\")]. ",
        "generated_testcode": "assert find_adverb_position(text) == [(3, \"quickly\"), (9, \"happily\"), (15, \"well\"), (21, \"quickly\"), (26, \"happily\"), (30, \"quickly\")]\n\n# The function should return a list of tuples, where each tuple contains the position of the adverb in the sentence and the adverb itself. ",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return 6*(l**2)\n\n# test the function with some sample inputs\nprint(surfacearea_cube(3)) # output: 54\nprint(surfacearea_cube(4)) # output: 96\nprint(surfacearea_cube(10)) # output: 600\n\n\n\n# Write a function to find the surface area of a sphere.\nimport math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r**2)\n\n\n# test the function with some sample inputs\nprint(surfacearea_sphere(3)) # output: 1138.198250949904533094\nprint(surfacearea_sphere(5)) # output: 341.461961980002948465\nprint(surfacearea_sphere(7)) # output: 254.7939270356134413\n\n\n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l**3\n\n# test the function with some sample inputs\nprint(volume_cube(3)) # output: 27\nprint(volume_cube(4)) # output: 64\nprint(volume_cube(10)) # output: 10000\n\n\n# Write a function to find the volume of a sphere",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n\n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    pass\n\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n\n# Test cases\nprint(positive_count([1, 2, 3, 4, 5, -1, -3, 6, 7, 8, 0, 9, 10, -5, 11, 12, -13]))  # Should print 0.6\nprint(positive_count([-1, -3, -5, -6, -8, -9, -1, -4]))  # Should print 0.0\nprint(positive_count([0, 0, 0, 0, 0, 0, 0, 0, 0]))  # Should print 0.0\nprint(positive_count([1, 1, 1, 1, 1, 1, 1, 1, 1]))  # Should print 1.0\n",
        "generated_testcode": "assert positive_count(nums=[3, -5, 1, 0, 6, -2, 8, -1]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize a variable to store the largest negative number \n    largest = None \n    # loop through each number in the list \n    for num in list1: \n        # check if the number is negative \n        if num < 0: \n            # if it is negative, check if it is larger than the current largest negative number \n            if largest is None or num > largest: \n                largest = num \n    # return the largest negative number \n    return largest ",
        "generated_testcode": "assert largest_neg(list1) == -10\n\n# Test case 1:\nlist1 = [-5, -10, 0, 1, 2, -100, 5, -7, 3]\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [tuple(x[K:len(x)-K] for x in test_list) if len(x) > 2*K else x for x in test_list]\n\n# Example usage:\n# test_list = [(1, 2, 3, 4, 5, 6, 7), (1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9), (1, 2), (1, 2, 3, 4)]\n# K = 1\n# print(trim_tuple(test_list, K))\n\n\n# Output: [(2, 3, 4), (1, 2, 3, 4), (2,), (1, 2, 3)] ",
        "generated_testcode": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10, 11), (12, 13, 14, 15, 16, 17, 18), (19, 20, 21)] , 2) == [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n# Test case 1: Test with a list of tuples with different lengths and k=2\n# Expected output: [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup1)):\n        res += (test_tup1[i] * test_tup2[i],)\n    return res\n\n# Test the function with sample tuples\ntup1 = (1, 2, 3, 4, 5)\ntup2 = (2, 4, 6, 8, 10)\nprint(index_multiplication(tup1, tup2)) # Output: (2, 8, 18, 32, 50) ",
        "generated_testcode": "assert index_multiplication(( (1, 2, 3, 4), (5, 6, 7) ) ) == (5, 12, 28)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count_dict = {} \n    for i in range(len(tup)): \n        for j in range(len(lst): \n            if tup[i] == lst[j]: \n                if tup[i] in count_dict: \n                    count_dict[tup[i]] += 1\n                else: \n                    count_dict[tup[i]] = 1\n    return count_dict\n    \n# Test the function with sample inputs:\ntup = (1, 2, 3, 4, 5, 2, 6, 1, 3, 1, 7, 8, 2, 5) \nlst = (1, 2, 3, 4, 2, 1, 5, 8, 6, 7, 3, 2, 8, 1) \nprint(count_Occurrence(tup, lst)) ",
        "generated_testcode": "assert count_Occurrence((\"hello\", [\"h\", \"e\", \"l\", \"o\"]) == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x ** 3, nums)\n# Test the function\n# Example usage:\n# Test with a list of numbers\nnum_list = [1, 2, 3, 4, 5]\nresult = cube_nums(num_list)\nprint(result) # Output: [1, 8, 27, 64, 125] ",
        "generated_testcode": "assert cube_nums(range(1, 5)) == [1, 8, 27, 64, 125]\n\n\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        return cal_sum(n-1) + cal_sum(n-2) + 2*(cal_sum(n-1) - cal_sum(n-3))\n\n\ndef print_perrin(n):\n    for i in range(n):\n        print(cal_sum(i))\n\nprint_perrin(8) #Prints the first n terms of the perrin sequence\n",
        "generated_testcode": "assert cal_sum(1) == 3\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    a = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    b = ((x3-x2)**2 + (y3-y2)**2)**0.5\n    c = ((x3-x1)**2 + (y3-y1)**2)**0.5\n    if a+b>c and b+c>a and c+a>b:\n        return True\n    else:\n        return False\n#Example:\n#check_Triangle(0,0,0,3,4,0,4) -> True \n#check_Triangle(0,0,4,0,3,4) -> False ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,0,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of strings and an integer as input and returns a list of strings of the specified length\n    \"\"\"\n    return [string[:l] for string in str]\n\n#Example usage:\nstring_list = [\"apple\", \"banana\", \"orange\", \"grape\"]\nprint(extract_string(string_list, 2)) # Output: ['ap', 'ba', 'or']\n\n\n\n#Write a function to extract the last element of each tuple in a list of tuples\ndef extract_last(tuples):\n    \"\"\"\n    This function takes a list of tuples as input and returns a list of the last element of each tuple\n    \"\"\"\n    return [t[-1] for t in tuples]\n#Example usage:\ntuples_list = [(1, 'apple'), (2, 'banana'), (3, 'orange'), (4, 'grape')]\nprint(extract_last(tuples_list)) # Output: ['apple', 'banana', 'orange', 'grape'] ",
        "generated_testcode": "assert extract_string([\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"fruit\", \"grape\"], 2) == [\"apple\", \"banana\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n\n# Example usage:\ntext = \"My name is John Doe\"\nprint(remove_whitespaces(text)) # Output: \"My name is JohnDoe\" ",
        "generated_testcode": "assert remove_whitespaces(text1) == \"Thisisatoestwithmanywords\"\n\n\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return None ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(2, n+1) : \n        if n % i == 0 and i % 2 == 0:\n            sum += i \n    return sum\n  \nn = int(input(\"Enter the number : \") \nprint(sumofFactors(n)) ",
        "generated_testcode": "assert sumofFactors(20) == 32 \n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return '\\w*z\\w*' in text\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_wordz(text)) # Output: True\n\n\n# The function looks for the pattern of any word that contains the letter 'z' using regular expressions. ",
        "generated_testcode": "assert text_match_wordz([\"hello\", \"world\", \"bazaar\", \"zoo\", \"zebra\", \"car\", \"zucchini\"] == [\"zoo\", \"zebra\", \"zucchini\"]\n\n\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n\n#test the function with some examples\nprint(check_monthnumb_number(2)) # False\nprint(check_monthnumb_number(3)) # True\nprint(check_monthnumb_number(11)) # True\nprint(check_monthnumb_number(12)) # True\nprint(check_monthnumb_number(13)) # False\nprint(check_monthnumb_number(8)) # True\nprint(check_monthnumb_number(0)) # False\nprint(check_monthnumb_number(13)) # False ",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Test the function with an example string list\nstringlist = ['apple', 'banana', 'cherry', 'grape']\nprint(reverse_string_list(stringlist))  # Output: ['elppa', 'anana', 'yrreh', 'eperg'] ",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]\n\n\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    min_len = float('inf') \n    sub_list = [] \n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)+1): \n            sub_lst = lst[i:j] \n            if len(sub_lst) < min_len: \n                min_len = len(sub_lst) \n                sub_list = sub_lst \n    return sub_list \n# testing the function \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nprint(Find_Min(lst)) # Output: [13] \n\nlst = [5, 8, 3, 16, 12, 1, 7, 6] \nprint(Find_Min(lst)) # Output: [12, 1, 7, 6] ",
        "generated_testcode": "assert Find_Min([[1,2,3], [4,5,6], [7,8,9,10,11], [12], [13,14,15,16,17,18,19]] ) == [12]\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    area = l * b\n    return area\n\n# Test the function with examples\nprint(rectangle_area(5,4) == 20) # True\nprint(rectangle_area(10,10) == 100) # True\nprint(rectangle_area(2.5,3) == 7.5) # True\nprint(rectangle_area(1,2) == 2) # True ",
        "generated_testcode": "assert rectangle_area(5, 4) == 20\n\n# Write a function to find the volume of a cube.\ndef cube_volume(side):\n    pass\n\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'[A-Z]+', '', str1)\n\n# Test the function with a sample string\nstr1 = \"Hello WoRLd HeLLo\"\nprint(remove_uppercase(str1)) ",
        "generated_testcode": "assert remove_uppercase(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello World\"\nexpected_output_string = \"hello world\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return [sub[0] for sub in lst]\n\n# example \n# Sample Input: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n# Output: [1, 4, 7]\n\n# Sample Input: [[10, 20, 30], [40, 50, 60], [70, 80, 90, 100], [1100, 120]]\n# Output: [10, 40, 70, 1100] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]] ) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n#Test the function\nstring = input(\"Enter a string: \")\nprint(\"Number of upper case characters in the string: \", upper_ctr(string)) ",
        "generated_testcode": "assert upper_ctr(\u201cHello World\u201d) == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    n = len(list1)\n    for i in range(2**n):\n        comb = []\n        for j in range(n):\n            if i & (1 << j):\n                comb.append(list1[j])\n        result.append(comb)\n    return result\n\n# example usage\nlist1 = [1, 2, 3]\nprint(combinations_list(list1)) # [[], [3], [2], [1], [2, 3], [1, 3], [1, 2], [1, 2, 3]] ",
        "generated_testcode": "assert combinations_list([\"apple\", \"banana\", \"orange\"]) == [[\"apple\", \"banana\", \"orange\"], [\"banana\", \"apple\", \"orange\"], [\"orange\", \"apple\", \"banana\"], [\"apple\", \"orange\", \"banana\"], [\"banana\", \"orange\", \"apple\"], [\"orange\", \"banana\", \"apple\"]]\n\n\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n\n# Example usage:\narr = [-2, -3, 2, 4, -2]\nprint(max_subarray_product(arr)) # Output: 48 ",
        "generated_testcode": "assert max_subarray_product([2, 3, -2, 4, -2, 4, 4, -1, 2]) == 16\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(set(dict.values()) - {n}) == 0\n\n# Example usage:\n# my_dict = {'a': 1, 'b': 1, 'c': 1}\n# print(check_value(my_dict, 1))  # True\n# my_dict = {'a': 1, 'b': 2, 'c': 1}\n# print(check_value(my_dict, 1))  # False\n\n\n# Write a function to check if a given number is prime or not.\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n# Example usage:\n# print(is_prime(7))  # True\n# print(is_prime(12))  # False\n\n# Write a function to print all the prime numbers in a given range.\ndef print_primes(start, end):\n    for i in range(start, end+1):\n        if is_prime(i):\n            print(i)\n# Example usage:\n# print_primes(1, 20)  # Output: 2 3 5 7 11 13 17 19\n\n# Write a function to print the sum of all prime numbers in a given range.\ndef sum_of_primes(start, end):\n    sum = 0",
        "generated_testcode": "assert check_value(dict(a=1, b=1, c=1), 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a dictionary as input and returns a dictionary with all the empty items dropped.\n    \"\"\"\n    # Create an empty dictionary to store non-empty items\n    new_dict = {}\n    # Iterate through the keys and values of the input dictionary\n    for key, value in dict1.items():\n        # If the value is not empty, add the key-value pair to the new dictionary\n        if value:\n            new_dict[key] = value\n    # Return the new dictionary with empty items dropped\n    return new_dict\n\n# Example usage:\ndict1 = {'a': 1, 'b': '', 'c': None, 'd': [], 'e': 'hello', 'f': {}, 'g': 0, 'h': 'world', 'i': '', 'j': 23}\nprint(drop_empty(dict1))  # Output: {'a': 1, 'e': 'hello', 'f': {}, 'g': 0, 'h': 'world', 'j': 23} ",
        "generated_testcode": "assert drop_empty(dict1) == {'a': 1, 'b': 2, 'c': 3}\n\n\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    mid = low + (high - low) // 2\n    mid = (low + high) // 2\n    if (mid == 0 or arr[mid-1] <= arr[mid]) and (mid == n-1 or arr[mid] >= arr[mid+1]):\n        return mid\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n\n\ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n-1, n)\n\n\n# Test the code\narr = [1, 3, 20, 17, 4, 5, 25, 11, 9, 15, 10, 13, 16, 12, 6, 18, 14]\nn = len(arr)\nprint(\"Index of Peak Element is:\", find_peak(arr, n)) ",
        "generated_testcode": "assert find_peak_util(arr=[1,2,3,4,5,6,7,8,9], low=0, high=5, n=6) == 9\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    octalNum = \"\"\n    while deciNum > 0:\n        octalNum = str(deciNum % 8) + octalNum\n        deciNum = deciNum // 8\n    return octalNum\n\n#Test the function with example\nprint(decimal_to_Octal(10))  # Output: 12\nprint(decimal_to_Octal(20))  # Output: 24\nprint(decimal_to_Octal(31))  # Output: 37\nprint(decimal_to_Octal(45))  # Output: 55\nprint(decimal_to_Octal(62))  # Output: 76\nprint(decimal_to_Octal(1024)) # Output: 2000\nprint(decimal_to_Octal(256)) # Output: 100",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 2: \n        return 0\n    incl = arr[0] \n    excl = 1\n    excl_max = 0\n    incl_new = 0\n    for i in range(1, n): \n        excl_new = max(arr[i], excl + incl, excl) \n        incl = excl * arr[i] \n        excl = excl_new \n        excl_max = max(excl_max, incl) \n    return excl_max ",
        "generated_testcode": "assert max_product([1, 10, -5, 2, 4, -2, 7, 3, -6, 5, 10] ) == 350\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if k == 0 or len(price) == 0:\n        return 0\n\n    if k >= len(price) // 2:\n        max_profit = 0\n        for i in range(1, len(price)):\n            max_profit += max(price[i] - price[i - 1], 0)\n        return max_profit\n\n\n    local_profit = [[0] * len(price) for _ in range(k + 1)]\n    global_profit = [[0] * len(price) for _ in range(k + 1)]\n\n\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, len(price)):\n            local_profit[i][j] = max(global_profit[i - 1][j - 1], price[j] + max_diff)\n            max_diff = max(max_diff, local_profit[i][j] - price[j])\n            global_profit[i][j] = max(global_profit[i][j - 1], local_profit[i][j])\n\n    return global_profit[k][len(price) - 1]\n\n\n\n# Test the function\nprice = [10, 222, 5, 75, 65, 80, 100, 90, 105, 110",
        "generated_testcode": "assert max_profit([2, 5, 7, 1, 2, 6, 3, 4, 9, 1, 4], 2) == 10\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup)):\n        tup = test_tup[i]\n        sum = 0\n        for j in range(len(tup)):\n            sum += tup[j]\n        result += (sum,)\n    return result\n\n#test the function with the following tuples\nt1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(add_pairwise(t1))  # Output: (6, 15, 24)\nt2 = ((-1, 2, 3), (4, -5, 6), (7, 8, -9))\nprint(add_pairwise(t2))  # Output: (2, -2, 18)\nt3 = ((1, 2, -3), (4, 5, 6, 7, 8), (9, 10, -11))\nprint(add_pairwise(t3))  # Output: (2, 15, 14) ",
        "generated_testcode": "assert add_pairwise(()) == ()\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize a variable to store the remainder \n    remainder = 0\n    # Traverse the given array \n    for i in range(lens): \n        remainder += arr[i]\n        remainder %= n \n    # Return the remainder \n    return remainder ",
        "generated_testcode": "assert find_remainder(arr=[1, 2, 3, 4, 5], lens=4, n=3) == 1\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!=1:\n            return False\n    return True\n\n#testing the function\nl = [1,2,3,4,5,6,7]\nprint(check_Consecutive(l))\n\nl = [1,2,3,4,6,7,8]\nprint(check_Consecutive(l)) ",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in two tuples as parameters and returns the tuple intersection of the given tuples\n    \"\"\"\n    # create an empty list to store the intersection elements\n    intersection_list = []\n    # iterate through each element of the first tuple\n    for element in test_list1:\n        # if the element is present in the second tuple and not already in the intersection_list, add it to the list\n        if element in test_list2 and element not in intersection_list:\n            intersection_list.append(element)\n    # convert the intersection_list to a tuple and return it\n    return tuple(intersection_list)\n\n\n# Test the function with some examples\nprint(tuple_intersection((1, 2, 3, 4, 5), (3, 4, 5, 6)))\nprint(tuple_intersection((1, 2, 3), (4, 5, 6)))\nprint(tuple_intersection((1, 2, 3, 3, 4), (3, 3, 5, 6, 2, 4)) ) ",
        "generated_testcode": "assert tuple_intersection((\"abc\", \"bcd\") == (\"b\", \"c\")\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n\n#Test the function\nstr1 = \"hello world\"\nch = 'l'\nnewch = 'z'\nprint(replace_char(str1,ch,newch))\n#Output: \"hezzo worzd\"\n\n\n#The function iterates through each character of the string and if it matches the given character, it replaces it with the new character, otherwise, it keeps the original character. ",
        "generated_testcode": "assert replace_char(\"hello world\", \"l\", \"p\") == \"heppo wporpd\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sorted_dict1 = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict1)\n\n\ndef sort_counter_items(dict1):\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\n# Example usage:\ndict1 = {\"a\": 1, \"b\": 3, \"c\": 2, \"d\": 4, \"e\": 1}\nprint(sort_counter(dict1)) # {'d': 4, 'b': 3, 'c': 2, 'a': 1, 'e': 1}\nprint(sort_counter_items(dict1)) # [('d', 4), ('b', 3), ('c', 2), ('a', 1), ('e', 1)] ",
        "generated_testcode": "assert sort_counter(Counter({'apple': 10, 'banana': 2, 'orange': 5}) == {'banana': 2, 'orange': 5, 'apple': 10}\n\n\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return None\n    else:\n        nums.sort()\n        return nums[0] + nums[-1]\n\n# Test the function with an example array\narr = [4, 5, 1, 2, 9, 7, 3]\nprint(big_sum(arr)) ",
        "generated_testcode": "assert big_sum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == (36, 10)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return string.lower()\n\n# Test the function with an example string\nstring = \"Python\"\nprint(is_lower(string) == \"python\") # True ",
        "generated_testcode": "assert is_lower(string) == \"hello world\"\n\n# Test case 1: Testing with a string containing upper and lower case characters\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = ''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            res += str1[i]\n    return res\n\n# test the function\nprint(remove_lowercase('Hello World'))  # Output: 'HW'\nprint(remove_lowercase('The quick brown Fox'))  # Output: 'ThqbrnFx'\nprint(remove_lowercase('Python is Awesome'))  # Output: 'PythAwsm' ",
        "generated_testcode": "assert remove_lowercase(None) == None\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    while n >= 10:\n        n = n // 10\n    return n\n\n#Example:\n#Input: first_Digit(12345)\n#Output: 1\n#Input: first_Digit(98765)\n#Output: 9 ",
        "generated_testcode": "assert first_Digit(1234) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    max_char = ''\n    max_count = 0\n    for key, value in char_freq.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n    return max_char\n\n#Example\nprint(get_max_occuring_char(\"hello world\")) # Output: l\nprint(get_max_occuring_char(\"aaabbbcc\")) # Output: a\nprint(get_max_occuring_char(\"python\")) # Output: y ",
        "generated_testcode": "assert get_max_occuring_char(str1) == \"o\"\n\n# Test case 1:\nstr1 = \"hello world\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a 2D table to store solutions of subproblems\n    dp = [[False for i in range(sum + 1)] for j in range(n + 1)]\n\n\n    # Initialize the subset dp[0][i] as False, except dp[0][0] which is True\n    for i in range(n + 1):\n        dp[0][i] = False\n\n\n    # Initialize the sum dp[i][0] as True\n    for i in range(sum + 1):\n        dp[i][0] = True\n\n\n    # Fill the dp table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            # If the current element is greater than the sum, we can't use it\n            if set[i - 1] > j:\n                dp[i][j] = dp[i - 1][j]\n            # If the current element is less than the sum, we have two options\n            # 1. Use the current element\n            # 2. Don't use the current element\n            else:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - set[i - 1]]\n\n\n    return dp[n][sum]\n\n\n\n# Test the function\nset = [3, 34, 4, 5, 1",
        "generated_testcode": "assert is_subset_sum(set(), 5) == False\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r'[A-Z][a-z]+'\n    result = re.findall(pattern, text)\n    return result\n\n# Example usage:\ntext = 'This is a sample text Tester, with sequences of upper case letters followed by lower case ones.'\nprint(match(text) ) # Output: ['Tester'] ",
        "generated_testcode": "assert match(text) == ['Aaa', 'Bbb', 'Ccc']\n\n# Test case 1: Testing for the input 'Aaa Bbb Ccc'\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while(True):\n        factorial = 1\n        for j in range(1,i+1):\n            factorial = factorial*j\n            if(factorial%x == 0):\n                return i\n        i += 1 ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for item in test_list1:\n        if item in test_list2:\n            test_list1.remove(item)\n    return test_list1\n\n# Example usage:\ntest_list1 = [(1,2), (3,4), (5,6), (7,8)]\ntest_list2 = [(3,4), (5,6)]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(1, 2), (7, 8)]\n\n\n# Solution:\ndef remove_matching_tuple(test_list1, test_list2):\n    return [item for item in test_list1 if item not in test_list2]\n\n\n# Example usage:\ntest_list1 = [(1,2), (3,4), (5,6), (7,8)]\ntest_list2 = [(3,4), (5,6)]\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: [(1, 2), (7, 8)] ",
        "generated_testcode": "assert remove_matching_tuple((\"abc\", \"def\") == (\"abc\", \"def\")\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return str(n) == str(n)[::-1] \n\ndef largest_palindrome(arr): \n    arr.sort(reverse=True) \n    for i in arr: \n        if is_palindrome(i): \n            return i \n    return None\n\n# Example usage: \narr = [123, 456, 987, 1221, 432, 5555, 4444, 12321] \nprint(largest_palindrome(arr) # Output: 12321 ",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    r = min(r, n-r) \n    c = 1\n    for i in range(r): \n        c = c * (n-i) // (i+1) \n    return c \n\ndef binomial_probability(n, r, p): \n    return nCr(n, r) * (p**r) * ((1-p)**(n-r)) \n\nn = 10\nr = 2\np = 0.3\nq = 1 - p\nprob = binomial_probability(n, r, p)\nprint(\"Probability of getting exactly r successes:\", round(prob, 4))\nprint(\"Probability of getting at least r successes:\", round(1 - binomial_probability(n, r-1, p), 4))\nprint(\"Probability of getting at most r successes:\", round(binomial_probability(n, r, p) + binomial_probability(n, r-1, p), 4)) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    tup.sort(key=lambda x:x[1]) \n    return tup \n# Example usage: \nmarksheet = [(1, 78), (2, 90), (3, 95), (4, 65), (5, 80)] \nprint(sort_tuple(marksheet)) # Output: [(4, 65), (1, 78), (5, 80), (2, 90), (3, 95)] ",
        "generated_testcode": "assert sort_tuple(()) == []\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (5*pow(a,2))/(4*tan(pi/5))\n    return area\n\n#You can use the math module to access the value of pi. \n#Use the formula:\n# area = (5 * r^2)/(4 * tan(pi/5) )\n# where r is the length of a side of the pentagon. ",
        "generated_testcode": "assert area_pentagon(5) == 50.265487666928112089\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_num = max(arr)\n    count = 0\n    for i in arr:\n        if i == max_num:\n            count += 1\n    return count \n# example usage:\narr = [1,2,3,4,5,5,5,6,5,7,8,5,9,5]\nn = len(arr)\nprint(\"Frequency of largest element in array: \",frequency_Of_Largest(n,arr)) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,6]) == 1\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    symmetric_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                symmetric_list.append((test_list[i], test_list[j]))\n    return symmetric_list\n\n# Test the function with an example\ntest_list = (1, 2, 3, 4, 5, 2, 6, 1, 3, 7, 5)\nprint(extract_symmetric(test_list)) # Output: [(1, 1), (2, 2), (3, 3), (5, 5)] ",
        "generated_testcode": "assert extract_symmetric(()) == set()\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    i = 1\n    while i <= n:\n        sum += a * (r ** (i-1) )\n        i += 1\n    return sum\n\n#Example:\n#Input a=2,n=5,r=3\n#Output: 36\n#Explanation: 2+6+18+54+162+... = 232\n#sum_gp(2,5,3) -> 36 ",
        "generated_testcode": "assert sum_gp(1,10,2) == 1023\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    first = 0\n    last = len(item_list) - 1\n    found = False\n    while( first<=last and not found):\n        mid = (first + last)//2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\n#Test the function with sample input\nitem_list = [2,4,6,8,12,14,16,20,29,35]\nprint(binary_search(item_list,14)) # True ",
        "generated_testcode": "assert binary_search(sorted([1,2,3,4,5,6,7,8,9,10], 4) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function calculates the coordinates of hexagons in a grid given the start and end points and radius of the grid\n    :param startx: Starting x-coordinate\n    :param starty: Starting y-coordinate\n    :param endx: Ending x-coordinate\n    :param endy: Ending y-coordinate\n    :param radius: Radius of the hexagons\n    :return: A list of lists containing tuples of x, y coordinates\n    \"\"\"\n    # Initialize variables\n    coordinates = []\n    x_coord = startx\n    y_coord = starty\n    count = 0\n\n    # Loop through the range of x and y coordinates\n    while y_coord < endy:\n        while x_coord < endx:\n            # Calculate the coordinates of the hexagons in a row\n            coordinates.append([(x_coord, y_coord))\n            coordinates.append(x_coord + radius, y_coord)\n            coordinates.append(x_coord + radius * 2, y_coord + radius)\n            coordinates.append(x_coord + radius, y_coord + 2 * radius)\n            coordinates.append(x_coord, y_coord + 2 * radius)\n            coordinates.append(x_coord - radius, y_coord + 2 * radius)\n            coordinates.append(x_coord - radius * 2, y_coord + radius)\n            coordinates.append(x_coord - radius * 2, y_coord)\n\n            # Move to the next x-coordinate for the next set of hexagons in the row\n            x_coord += 2 * radius\n            count += 1\n\n        # Move to the next row\n        y_coord += 2 * radius\n\n        # Reset the x-coordinate for the next row and alternate the offset\n        if count % 2 == 0:\n            x_coord = startx + radius\n        else:\n            x_coord = startx\n\n\n    return coordinates\n\n\n# Test the function\ncoordinates = calculate_polygons(0, 0, 10, 10, 2)\nprint(coordinates)\n\n# Output: [(0, 0), (2, 0), (4, 2), (2, 4), (0, ",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [(5, 0), (10, 8), (10, 10), (0, 10), (-5, 8), (-5, 0), (0, 0)]\n\n# The function should return a list of 6 tuples representing the coordinates of the hexagon with the given start and end points and radius. \n# The first point should be the top center of the hexagon (startx, starty), the second point should be the top right corner, the third point should be the bottom right corner, \n# the fourth point should be the bottom left corner, the fifth point should be the top left corner, the sixth point should be the bottom left corner, and the last point should be the top left corner. \n# The coordinates should be rounded to the nearest integer. ",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    binary = int(\"\".join(str(i) for i in test_tup) , 2)\n    return binary\n\n# Test the function with sample inputs\ntest_tup = (0, 1, 1, 0, 0, 1, 1)\nprint(binary_to_integer(test_tup))  # Output: 23\n\n\ntest_tup = (0, 0, 1, 1, 0, 1, 1, 1)\nprint(binary_to_integer(test_tup))  # Output: 11\n\n\ntest_tup = (1, 1, 1, 0, 1)\nprint(binary_to_integer(test_tup))  # Output: 13 ",
        "generated_testcode": "assert binary_to_integer(()) == ",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n\n\n# Test the function with an example string\nstring = \"Hello world, this Is a sample Text for testing Regular Expression\"\nprint(remove_lowercase(string))\n\n# Output: \"Hello world, Is testing Regular Expression\" ",
        "generated_testcode": "assert remove_lowercase(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello World\"\nexpected_output_string = \"Hello World\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a min-heap of the given numbers\n    for i in range(n//2-1,-1,-1,-1):\n        min_heapify(nums,n,i)\n    \n    # Extract the smallest numbers one by one\n    for i in range(n-1,0,-1):\n        # Swap the last element and the first element\n        nums[0],nums[i] = nums[i],nums[0]\n        # Maintain the min-heap property\n        min_heapify(nums,i,0)\n        # Return the sorted list of smallest numbers\n    return nums\n\ndef min_heapify(nums,n,i):\n    # Initialize the index of smallest number as the root\n    smallest = i\n    # Check if the left child is smaller than the root\n    left = 2*i + 1\n    if left < n and nums[left] < nums[smallest]:\n        smallest = left\n    # Check if the right child is smaller than the root\n    right = 2*i + 2\n    if right < n and nums[right] < nums[smallest]:\n        smallest = right\n    # If either of the children is smaller, swap with the root\n    if smallest != i:\n        nums[i],nums[smallest] = nums[smallest],nums[i]\n        # Recursively maintain the min-heap property\n        min_heapify(nums",
        "generated_testcode": "assert heap_queue_smallest(nums=[4, 2, 1, 7, 5, 3, 6, 8, 9, 10, 4], n=3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    return pi*r*((r+math.sqrt(r*r+h*h))\n\n#Test the function\nprint(surfacearea_cone(5,7))  # Output: 34.6903934421273229755\nprint(surfacearea_cone(3,4))  # Output: 157.929965713246236358\nprint(surfacearea_cone(6,8))  # Output: 282.742712671423818134\n\n\n\n# The formula for the surface area of a cone is \u03c0r(r + \u221a(r^2 + h^2)). We can use the math module to get the value of pi and then use it in the function. ",
        "generated_testcode": "assert surfacearea_cone(4, 7) == 157.07\n# This should return 157.07. ",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    elif x == y:\n        return x\n    elif x > y:\n        return gcd(x - y, y)\n    else:\n        return gcd(x, y - x)\n\n\n#test the function\nprint(gcd(12, 24)) # 12\nprint(gcd(16, 24)) # 8\nprint(gcd(9, 12)) # 3\nprint(gcd(7, 13)) # 1\nprint(gcd(14, 28)) # 14\nprint(gcd(56, 64)) # 8 ",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    diameter = 2 * r\n    return diameter\n\n# Test the function with a radius of 5\nprint(diameter_circle(5)) # Output: 10\n\n\n# Write a function to find the circumference of a circle\nimport math\ndef circumference_circle(r):\n    circumference = 2 * math.pi * r\n    return circumference\n\n# Test the function with a radius of 5\nprint(circumference_circle(5)) # Output: 31.4159265358979313038\n\n\n# Write a function to find the area of a circle\ndef area_circle(r):\n    area = math.pi * (r ** 2)\n    return area\n\n# Test the function with a radius of 5\nprint(area_circle(5)) # Output: 78.539816333974448303\n\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n\n# Test the function with a radius of 5\nprint(volume_sphere(5)) # Output: 523.601901809994047467\n\n# Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    surface_area = 4 * math",
        "generated_testcode": "assert diameter_circle(5) == 10\n\n# Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n    pass\n\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(list)):\n        result += str(list[i])\n    return result\n\n# Test the function with an example\nprint(concatenate_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == \"applebananacherrydatefiggrape\") # Output: True\n\n\n# Solution 2: Use the join() function to concatenate all elements of the list into a string.\ndef concatenate_elements(list):\n    return \"\".join(list)\n\n# Test the function with an example\nprint(concatenate_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == \"applebananacherrydatefiggrape\") # Output: True ",
        "generated_testcode": "assert concatenate_elements([\"apple\", \"banana\", \"cherry\", \"date\"]) == \"applebananacherrydate\"\n\n\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x<y:\n        smaller=x\n    else:\n        smaller=y\n    for i in range(1,smaller+1):\n        if(x%i==0 and y%i==0):\n            gcd=i\n    return gcd\n\nprint(ngcd(12,16))\nprint(ngcd(16,12))\nprint(ngcd(24,16))\nprint(ngcd(15,21)) ",
        "generated_testcode": "assert ngcd(12,8) == 4\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if m == 0:\n        return None\n    else:\n        return n % m\n\n#Test the function with some examples\nprint(find(10,3))  # Output: 1\nprint(find(11,3))  # Output: 2\nprint(find(12,6))  # Output: 0\nprint(find(17,5))  # Output: 2\nprint(find(15,8))  # Output: 7\nprint(find(15,0))  # Output: None ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result\n\n# Test the function with an example\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8])) #[3, 5, 7, 9, 11, 13] ",
        "generated_testcode": "assert add_consecutive_nums(list(range(1, 5)) == 10\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i*i*i \n    return sum \nn = int(input(\"Enter a number: \")) \nprint(\"Sum of the cube of first\", n, \"numbers is:\", sum_Of_Series(n)) \n\n\n#output:\n#Enter a number: 5\n#Sum of the cube of first 5 numbers is: 2225 ",
        "generated_testcode": "assert sum_Of_Series(3) == 36\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    zero_count = A.count(0)\n    i = 0\n    while i < len(A)-zero_count:\n        if A[i] == 0:\n            A.append(A.pop(i))\n            zero_count -= 1\n        else:\n            i += 1\n    return A\n\n# Test\nA = [1, 0, 2, 0, 3, 0, 4, 5, 6, 0, 0, 7]\nprint(re_order(A)) # Output: [1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0] ",
        "generated_testcode": "assert re_order(A=[1, 0, 2, 0, 3, 4, 0, 5] == [1, 2, 3, 4, 5, 0, 0])\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if k == 0 or k == n:\n        return 1\n    if k == 1 or k == n-1:\n        return n\n    if k > n:\n        return 0\n    return n * permutation_coefficient(n-1, k-1) // k\n    \nn = int(input(\"Enter value of n: \"))\nk = int(input(\"Enter value of k: \"))\nprint(\"Permutation coefficient of\", n, \"and\", k, \"is\", permutation_coefficient(n, k)) ",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 20\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [word for word in list1 if word not in removewords]\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\nremovewords = [\"apple\", \"banana\", \"fig\"]\nprint(remove_words(list1, removewords)) \n\n# Output: ['cherry'] ",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"watermelon\"], [\"banana\", \"kiwi\"]) == [\"apple\", \"orange\", \"watermelon\"]\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n\n# Test the function with sample inputs:\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])) # True\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1])) # False\nprint(same_order([1, 2, 3, 4, 5], [1, 3, 2, 4, 5])) # False\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4])) # False ",
        "generated_testcode": "assert same_order([\"apple\", \"banana\", \"cherry\", \"date\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    count = 0\n    num = 1\n    while num <= n:\n        sum += num\n        count += 1\n        num += 2\n    return sum/count\n\n# example\nprint(average_Odd(5)) # Output: 3 \nprint(average_Odd(11)) # Output: 7\nprint(average_Odd(13)) # Output: 9\nprint(average_Odd(21)) # Output: 15\nprint(average_Odd(31)) # Output: 19.666666666666666666668 ",
        "generated_testcode": "assert average_Odd(3) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    mod = 10**9 + 7\n    dp = [0] * (k+1)\n    dp[0] = 1\n    for i in range(n):\n        j = 1\n        while j <= k:\n            if j >= arr[i]:\n                dp[j] += dp[j-arr[i]]\n            dp[j] += dp[j]\n            dp[j] %= mod\n            j += 1\n    return dp[k] - 1\n\n# Test\narr = [1, 2, 3, 4]\nk = 5\nprint(no_of_subsequences(arr, k)) ",
        "generated_testcode": "assert no_of_subsequences(arr=[1, 2, 3, 4, 5], k=10) == 7\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = 0\n    for i in range(2, num):\n        if num % i == 0:\n            res += i\n    return res\n\n# Example usage:\nnum = 15\nprint(find_Min_Sum(num)) ",
        "generated_testcode": "assert find_Min_Sum(12) == 7 # Testing for a number with 6 factors and minimum sum as 7\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = [] \n    for i in test_tuple: \n        if isinstance(i, tuple): \n            result.extend(flatten(i)\n            )  \n        else: \n            result.append(i) \n    return result \n\ndef count_elements(test_tuple): \n    flat_tuple = flatten(test_tuple) \n    freq_dict = {} \n    for element in flat_tuple: \n        if element in freq_dict: \n            freq_dict[element] += 1\n        else: \n            freq_dict[element] = 1\n    return freq_dict \n\n#Testing \ntest_tuple = (1, (2, 3, 4, (5, 6, 7), 2, (8, (9, 2)) ) ,1, 2) \nprint(count_elements(test_tuple)) ",
        "generated_testcode": "assert flatten(()) == {}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res_list=[]\n    for i in range(len(test_tup)):\n        res_list.append(str(test_tup[i])+K)\n    return res_list\n\n#testing the function with sample input\ntest_tup=(\"apple\", \"banana\", \"cherry\")\nK = \" is fruit\"\nprint(add_str(test_tup, K)) #output: ['apple is fruit', 'banana is fruit', 'cherry is fruit'] ",
        "generated_testcode": "assert add_str((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"), \"fruit\") == [\"apple fruit\", \"banana fruit\", \"cherry fruit\", \"date fruit\", \"elderberry fruit\", \"fig fruit\"]\n\n\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in test_tup:\n        sum += i\n    return sum\n# Test the function\ntest_list = [(1,2,3),(4,5,6),(7,8,9)]\nfor tup in test_list:\n    print(\"Sum of elements in tuple\",tup,\"is\",sum_elements(tup)) ",
        "generated_testcode": "assert sum_elements(()) == 0\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    dp = [[0 for i in range(m)] for j in range(n+1)]\n    for i in range(m):\n        dp[0][i] = True\n    for i in range(1, n+1):\n        for j in range(m):\n            dp[i][j] = dp[i-1][j]\n            for k in range(m):\n                if j < arr[i-1]:\n                    dp[i][(j+k)%m] |= dp[i-1][j]\n                else:\n                    dp[i][(j+k)%m] |= dp[i-1][j] or dp[i-1][(j-arr[i-1]+m)%m]\n    return dp[n][0]\n\n# Test the function with sample inputs\nn = 4\nm = 5\narr = [1, 2, 3, 4, 5]\nprint(modular_sum(arr, n, m)) # Output: True ",
        "generated_testcode": "assert modular_sum(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6, m=5) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not nums: return []\n    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    return nums\n\ndef counting_sort(nums, exp):\n    n = len(nums)\n    count = [0] * 10\n    output = [0] * n\n    for num in nums:\n        index = (num // exp) % 10\n        count[index] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for num in reversed(nums):\n        index = (num // exp) % 10\n        output[count[index] - 1] = num\n        count[index] -= 1\n    for i in range(n):\n        nums[i] = output[i]\n\n# Example usage:\nnums = [170, 45, 75, 90, 802, 24, 2, 666, 1000]\nprint(radix_sort(nums))  # Output: [2, 24, 45, 666, 75, 90, 170, 802, 1000] ",
        "generated_testcode": "assert radix_sort(nums=[4, 1, 2, 8, 5, 3, 7]) == [1, 2, 3, 4, 5, 7, 8]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max = 0\n    for i in range(len(list1):\n        if list1[i] > 0:\n            if list1[i] > max:\n                max = list1[i]\n    return max\n\n# Test the function with example\nlist1 = [1, 5, -2, 4, -3, 7, 0, -8, 3]\nprint(largest_pos(list1) # Output: 7 ",
        "generated_testcode": "assert largest_pos(list1) == 10\n\n# Write a python function to find the sum of all the elements in the given list.\ndef sum_list(list1): \n    pass\n\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while i*i <= num:\n        i += 1\n    return i-1\n\n# Example usage:\n# >>> sqrt_root(16)\n# 4\n# >>> sqrt_root(100)\n# 10\n# >>> sqrt_root(144)\n# 12\n# >>> sqrt_root(36)\n# 6\n# >>> sqrt_root(121)\n# 11\n# >>> sqrt_root(144)\n# 12\n# >>> sqrt_root(10000)\n# 32 ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function calculates the volume of a tetrahedron.\n    :param num: A list of 4 points, each point is represented by a tuple (x, y, z)\n    :return: The volume of the tetrahedron formed by the 4 points\n    \"\"\"\n    a = num[0]\n    b = num[1]\n    c = num[2]\n    d = num[3]\n    def det(a, b, c):\n        \"\"\"\n        This function calculates the determinant of 2 vectors.\n        :param a: A vector (x1, y1, z1)\n        :param b: A vector (x2, y2, z2)\n        :return: The determinant of the two vectors\n        \"\"\"\n        return a[0] * (b[1] * c[2] - b[2] * c[1]) - a[1] * (b[0] * c[2] - b[2] * c[0]) + a[2] * (b[0] * c[1] - b[1] * c[0])\n    volume = abs(det(a, b, c)) / 6\n    volume += det(a, b, d) + det(a, c, d) + det(b, c, d)\n    return volume\n\n# Test the function with 4 points\nprint(volume_tetrahedron([(1, 2, 3), (4, 5, 6), (7, ",
        "generated_testcode": "assert volume_tetrahedron(2, 4, 6) == 12\n\n# Write 2 lines of testing code for the function.\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": " \n    # choose the greater number\n    if num1 > num2: \n        greater = num1\n    else: \n        greater = num2 \n  \n    while True: \n        if greater % num1 == 0 and greater % num2 == 0: \n            lcm = greater \n            break\n        greater += 1\n  \n    return lcm \n  \ndef find_lcm_array(arr): \n    n = len(arr) \n    lcm = arr[0] \n    for i in range(1, n): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n  \n# Test the code\narr = [12, 15, 20] \nprint(\"The L.C.M. of\", arr, \"is:\", find_lcm_array(arr)) ",
        "generated_testcode": "assert find_lcm(12, 15) == 60\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x==y or y==z or x==z:\n        return True\n    else:\n        return False\ndef check_right_triangle(x,y,z):\n    if x**2+y**2==z**2 or x**2+z**2==y**2 or y**2+z**2==x**2:\n        return True\n    else:\n        return False\ndef check_equilateral(x,y,z):\n    if x==y==z:\n        return True\n    else:\n        return False\ndef check_triangle(x,y,z):\n    if x+y>z and x+z>y and y+z>x:\n        return True\n    else:\n        return False\ndef main():\n    x=int(input(\"Enter the length of side a of the triangle: \"))\n    y=int(input(\"Enter the length of side b of the triangle: \"))\n    z=int(input(\"Enter the length of side c of the triangle: \"))\n    if check_triangle(x,y,z):\n        if check_isosceles(x,y,z):\n            if check_right_triangle(x,y,z):\n                if check_equilateral(x,y,z):\n                    print(\"This is an equilateral triangle\")\n                else:\n                    print(\"This is a scalene triangle\")\n            else:\n                print(\"This is a right triangle\")\n        else:\n            print(\"This is",
        "generated_testcode": "assert check_isosceles(3, 4, 5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr) \n    i = 0\n    j = n-1\n    maxLength = 1\n    while (i < n-1 and j > 0 and arr[i] < arr[i+1]): \n        i += 1\n    while (j > i and arr[j] < arr[j-1]): \n        j -= 1\n    if (i == n-1 or j == 0): \n        return n \n    while (i < j): \n        k = i \n        while (i < n-1 and arr[i] < arr[i+1]): \n            i += 1\n        while (j > 0 and arr[j] < arr[j-1]): \n            j -= 1\n        if (i < n-1 and j > 0 and arr[i] > arr[j] and arr[i]-arr[j] > maxLength): \n            maxLength = arr[i]-arr[j] \n    return maxLength+1\narr = [1,2,3,4,5,6,7,6,5,4,3,2,1] \nprint(\"Length of Longest Bitonic Subsequence is \",lbs(arr)) ",
        "generated_testcode": "assert lbs(arr=[1, 11, 2, 10, 4, 5, 2, 1, 10]) == [1, 2, 10, 4, 2, 1]\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return any(c.islower() for c in str1) and any(c.isupper() for c in str1) and any(c.isdigit() for c in str1) and len(str1) == 6\n\n\n# Test the function with some examples\nprint(check_string('Abc123456')) # True\nprint(check_string('abc12345')) # False\nprint(check_string('ABC12345')) # False\nprint(check_string('Abcdef1')) # False\nprint(check_string('abcdef1')) # False\nprint(check_string('12345678')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(check_string('Abc1234567')) # False\nprint(",
        "generated_testcode": "assert check_string(lambda x: True if any(char.isupper() for char in x) and any(char.islower() for char in x) and any(char.isdigit() for char in x) and len(x) == 10 else False)(\"Abc1234567890\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [0] * n\n    dp[0] = arr[0] \n    for i in range(1, n):\n        incl_i = arr[i] \n        for j in range(i):\n            if arr[i] > arr[j]:\n                incl_i = max(incl_i, arr[i] + dp[j]) \n        dp[i] = incl_i\n    return max(dp)\n\n#Driver code\narr = [10, 22, 1, 3, 4, 5, 6, 7, 8, 9, 20, 11] \nn = len(arr) \nprint(\"Maximum sum of increasing subsequence is \", max_sum_increasing_subsequence(arr, n)) ",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[1, 101, 2, 3, 100, 4, 5, 6, 10, 7, 8, 1000, 9]) == 174\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a1, b1, c1 = line1\n    a2, b2, c2 = line2\n    if a1 * b2 == a2 * b1 and b1 * c2 == b2 * c1 and a1 != 0 and b1 != 0:\n        return True\n    elif a1 * b2 == a2 * b1 and b1 * c2 == b2 * c1 and a1 == 0 and b1 == 0:\n        return True\n    else:\n        return False\n\nline1 = (1, 2, 3)\nline2 = (2, 4, 6)\nline3 = (1, 2, 4)\nprint(parallel_lines(line1, line2))  # True\nprint(parallel_lines(line1, line3))  # False ",
        "generated_testcode": "assert parallel_lines((\"2x + 3y = 8\", \"2x + 3y = 10\") == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str1.split()\n    new_words = []\n    for word in words:\n        if len(word) > 1:\n            new_word = word[0].upper() + word[1:-1] + word[-1].upper()\n        else:\n            new_word = word.upper()\n        new_words.append(new_word)\n    return \" \".join(new_words)\n\n\n#test the function\nprint(capitalize_first_last_letters(\"this is a test string\")) # ThIs Is A TesT StrIng ",
        "generated_testcode": "assert capitalize_first_last_letters(str1) == \"CapiTalize First LaSt LetTers Of A GiveN String\"\n\n# Test case 1: Testing with a normal string\nstr1 = \"capitalize first last letters of a given string\"\nprint(capitalize_first_letters(str1) == \"CapiTalize First LaSt LetTers Of A GiveN String\") # True\n\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pairs_count = 0\n    arr.sort()\n    left, right = 0, n - 1\n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == sum:\n            pairs_count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return pairs_count\n\n\n\narr = [1, 5, 3, 2, 4, 7, 6, 8, 9]\nn = len(arr)\nsum = 10\nprint(get_pairs_count(arr, n, sum))  # Output: 2 (pairs (3, 7) and (2, 8) have a sum of 10)\n\n",
        "generated_testcode": "assert get_pairs_count(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=9) == 3 # There are 3 pairs (2, 7), (4, 5) and (3, 6) whose sum is 9.\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not list1:\n        return None\n    min_len = len(list1[0])\n    for i in list1:\n        if len(i) < min_len:\n            min_len = len(i)\n    result = []\n    for i in list1:\n        if len(i) == min_len:\n            result.append(i)\n    return result\n\n# Testing the function with example\nlist1 = [[1,2,3], [4,5,6], [7,8], [9], [10,11,12,13,14], [15,16,17,18,19,20], [21,22,23]]\nprint(min_length(list1)) #[7, [9]] ",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5, 6, 7], [8, 9], [10, 11, 12, 13, 14]] ) == [8, 9]\n\n\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b + 1\n    return a\n\n# Test the function with some examples\nprint(jacobsthal_lucas(0)) # 0\nprint(jacobsthal_lucas(1)) # 1\nprint(jacobsthal_lucas(2)) # 2\nprint(jacobsthal_lucas(3)) # 4\nprint(jacobsthal_lucas(4)) # 11\nprint(jacobsthal_lucas(5)) # 25\nprint(jacobsthal_lucas(6)) # 73\nprint(jacobsthal_lucas(7)) # 155\nprint(jacobsthal_lucas(8)) # 441\nprint(jacobsthal_lucas(9)) # 219\nprint(jacobsthal_lucas(10)) # 683\n\n# The output is the nth jacobsthal-lucas number. The function uses a loop to calculate the nth jacobsthal-lucas number by iterating through the sequence and swapping the values of a and b at each step. The final value of a is the nth jacobsthal-lucas number. ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 0\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count / len(nums)\n\n#Example usage:\narr = [1, -2, 3, -4, 5, -6, -7, 8, -9]\nprint(negative_count(arr)) # Output: 0.33333\n\n\n# The function takes an array of integers as input and initializes a count variable to zero. It iterates over each element in the array and checks if it's less than zero. If it is, it increments the count. Then it returns the count divided by the length of the array to get the ratio of negative numbers. ",
        "generated_testcode": "assert negative_count(nums=[1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 0.4\n\n\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dp = [float('inf')] * (V + 1) \n    dp[0] = 0\n    for i in range(1, V + 1): \n        for j in range(m): \n            if coins[j] <= i: \n                sub_res = dp[i - coins[j]] \n                if sub_res != float('inf') and sub_res + 1 < dp[i]: \n                    dp[i] = sub_res + 1\n    return dp[V] \n  \ncoins = [1, 2, 5, 3, 6] \nm = len(coins) \nV = 10\nprint(min_coins(coins, m, V)) # Output: 2 (We need minimum of two coins i.e., 5, 5) ",
        "generated_testcode": "assert min_coins(coins=[1, 2, 5], m=3, V=11) == 3\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n\n    freq = {}\n\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n\n    for char in str2:\n        if char in freq:\n            freq[char] -= 1\n        else:\n            return False\n\n    for value in freq.values():\n        if value != 0:\n            return False\n\n    return True\n\n# Test Cases\nprint(check_permutation(\"listen\", \"silent\")) # True\nprint(check_permutation(\"hello\", \"world\")) # False\nprint(check_permutation(\"aba\", \"baa\")) # False\nprint(check_permutation(\"aaabbb\", \"bbbaaa\")) # True\nprint(check_permutation(\"abc\", \"cba\")) # True ",
        "generated_testcode": "assert check_permutation(None, None) == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if data_type == 'int':\n        return tuple(x for x in test_tuple if not isinstance(x, int))\n    elif data_type == 'float':\n        return tuple(x for x in test_tuple if not isinstance(x, float))\n    elif data_type == 'str':\n        return tuple(x for x in test_tuple if not isinstance(x, str))\n    elif data_type == 'list':\n        return tuple(x for x in test_tuple if not isinstance(x, list))\n    elif data_type == 'dict':\n        return tuple(x for x in test_tuple if not isinstance(x, dict))\n    elif data_type == 'bool':\n        return tuple(x for x in test_tuple if not isinstance(x, bool))\n    elif data_type == 'NoneType':\n        return tuple(x for x in test_tuple if x is not None)\n    else:\n        return test_tuple\n\n# Example usage:\ntest_tuple = (1, 2.0, '3', [4], {'5': 5}, None, True, False)\nprint(remove_datatype(test_tuple, 'int')) # Output: (2.0, '3', [4], {'5': 5}, None, True, False)\nprint(remove_datatype(test_tuple, 'float')) # Output: (1, '3', [4], {'5': 5}, None, True, False)\nprint(remove_datatype(test",
        "generated_testcode": "assert remove_datatype((\"abc\", int) == (\"abc\")\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(pattern)\n    m = len(text)\n    for i in range(m-n+1):\n        j = 0\n        while j < n:\n            if text[i+j] != pattern[j]:\n                break\n            j += 1\n        if j == n:\n            return i\n    return -1\n\n#test the function\ntext = \"Hello, world. This is a test string for searching a literal string.\"\npattern = \"test\"\nprint(search_literal(pattern, text)) # output: 20\n\n\n# Write a function to search a pattern in a string using the Rabin-Karp algorithm.\ndef search_rabin_karp(pattern, text):\n    n = len(pattern)\n    m = len(text)\n    pattern_hash = hash(pattern)\n    text_hash = 0\n    for i in range(n):\n        text_hash += ord(text[i])*(26**(n-1-i))\n    for i in range(n, m):\n        if text_hash == pattern_hash and text[i-n:i] == pattern:\n            return i-n\n        text_hash -= ord(text[i-n])*(26**(n-1))\n        text_hash += ord(text[i])*(26**(n-1))\n    if text_hash == pattern_hash and text[m-n:] == pattern:\n        return m-n\n    return -1\n\n#test",
        "generated_testcode": "assert search_literal(pattern=\"abc\", text=\"abcdabc\") == (True, 0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14\n    return 2 * pi * r * r\n\n# Test the function with a radius of 5\nprint(topbottom_surfacearea(5)\n# Output: 50.2654...\n\n# Test the function with a radius of 3\nprint(topbottom_surfacearea(3)\n# Output: 28.274... ",
        "generated_testcode": "assert topbottom_surfacearea(5) == 78.53981633397444833, \"The top surface area of a cylinder with radius 5 should be 78.53981633397444833\"\n\n# Test the function with a radius of 10\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(list), n):\n        result.append(list[i])\n    return result\n\n#example usage\nprint(nth_items([1,2,3,4,5,6,7,8,9], 2)) # [1, 3, 5, 7] ",
        "generated_testcode": "assert nth_items([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], 2) == [\"banana\", \"cherry\"]\n\n\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str1.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            return word\n        else:\n            word_dict[word] = 1\n    return \"No word is repeated.\"\n\nprint(first_repeated_word(\"hello world world and hello\")) # Output: hello ",
        "generated_testcode": "assert first_repeated_word(\n    \"This is a test string to check for repeated words in Python\") == \"is\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    my_tuple = tuple(str1)\n    return my_tuple\n\n# Test the function\nstring_list = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"orange\"]\nprint(string_list_to_tuple(string_list)) # Output: ('apple', 'banana', 'cherry', 'kiwi', 'orange') ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x**y,bases_num,index))\n\nbases_num = [2,3,4,5]\nindex = [3,4,5]\nprint(basesnum_coresspondingnum(bases_num,index)) #[8, 81, 125]\n\n\n#Using list comprehension\ndef basesnum_coresspondingnum(bases_num,index):\n    return [x**y for x,y in zip(bases_num,index)]\nbases_num = [2,3,4]\nindex = [3,4,5]\nprint(basesnum_coresspondingnum(bases_num,index)) #[8, 81, 1024] ",
        "generated_testcode": "assert basesnum_coresspondingnum(bases_num=[2,3,4],index=[3,4,5]) == [8,81,1024] ",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": " \n    # Create a dictionary to store the frequency of each element in the array \n    freq = {} \n    for i in arr: \n        freq[i] = freq.get(i,0) + 1\n  \n    # Find the maximum and minimum frequency of any element in the dictionary \n    maxFreq = max(freq.values()) \n    minFreq = min(freq.values()) \n  \n    # Calculate the difference between maxFreq and minFreq \n    diff = maxFreq - minFreq \n    return diff \n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12] \nn = len(arr) \nprint(find_Diff(arr, n))  # Output: 3\n\n\n# In this example, the frequency of elements 10 and 11 is 3 and 4, respectively. So, the difference is 3-1 = 2. ",
        "generated_testcode": "assert find_Diff(arr=[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],n=9) == 0\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n): \n        if n % i == 0: \n            sum += i \n    return sum \n\ndef is_abundant(n): \n    if n <= 12: \n        return False\n    return get_sum(n) > 2*n ",
        "generated_testcode": "assert get_sum(12) == 3\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'[.,\\s]+', ':', text)\n\n# Example:\n# >>> fill_spaces('hello world, this is a test. Another one?')\n# 'hello:world:this:is:a:test:Another:one?' ",
        "generated_testcode": "assert fill_spaces(text=\"Hello, world\") == \"Hello:world\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    num = num1+num2\n    count = 0\n    while num != 0:\n        count += 1\n        num //= 10\n    return count\n\nnum1 = 123\nnum2 = 456\nsum = count_digits(num1,num2)\nprint(\"Sum of\",num1,\"and\",num2,\"is\",sum,\"and number of digits are:\",count_digits(num1,num2))\n\n\n#Output: Sum of 123 and 456 is 589 and number of digits are: 3 ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return ', '.join(map(str, sum(test_list, ())) )\n\n\n#Example:\n# test_list = [(1, 'cat', 2), ('dog', 3, 'rabbit'), (4, 'turtle')]\n# print(flatten_tuple(test_list))  # Output: '1, cat, 2, dog, 3, rabbit, 4, turtle' ",
        "generated_testcode": "assert flatten_tuple(()) == \"\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Checking if the least significant bit is set or not \n    if n & 1 : \n        n -= 1\n    else : \n        n += 1\n    # Checking if the most significant bit is set or not \n    if n & (1 << 31) : \n        n ^= (1 << 31) \n    return n \n  \n# Testing our function with some examples \nn = 34\nprint(bin(take_L_and_F_set_bits(n)) # 0b10000111110\n\nn = 42\nprint(bin(take_L_and_F_set_bits(n)) # 0b10101011010\nn = 23\nprint(bin(take_L_and_F_set_bits(n)) # 0b1010111010 ",
        "generated_testcode": "assert take_L_and_F_set_bits(0b10101010101) == 0b1111100000\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    last_index = -1\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    return last_index\n\nstring = input(\"Enter a string: \")\nchar = input(\"Enter a character: \")\nprint(\"Last occurrence of\",char,\"in\",string,\"is at index\",last_occurence_char(string,char)) ",
        "generated_testcode": "assert last_occurence_char(string,char) == expected_output\n\n# Example:\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ans = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            x = bin(i)[2:]\n            y = bin(j)[2:]\n            l = max(len(x), len(y))\n            x = x.zfill(l)\n            y = y.zfill(l)\n            count = 0\n            for k in range(l):\n                if x[k] != y[k]:\n                    count += 1\n            ans += count\n    return ans\n\n# test the function\nprint(Total_Hamming_Distance(10)) # output: 70\nprint(Total_Hamming_Distance(100)) # output: 3885",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 26\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    LIS = [1]*n\n    for i in range(1,n): \n        for j in range(i): \n            if arr[i] > arr[j]:\n                LIS[i] = max(LIS[i], LIS[j]+1)\n    return max(LIS)\n\n# Example usage:\narr = [10, 22, 9, 3, 5, 3, 7, 101, 18, 2, 21, 50, 41, 60, 80] \nprint(longest_increasing_subsequence(arr)) # Output: 5 (because of the subsequence 10, 221, 41, 60, 80, 101) ",
        "generated_testcode": "assert longest_increasing_subsequence(arr=[1, 10, 2, 3, 1, 4, 9, 11, 12, 5, 6, 7, 13, 8, 19, 20]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    num = 1 \n    sum = 0\n    count = 0\n    while count < n : \n        sum += num ** 5 \n        num += 2\n        count += 1\n    return sum\n\nn = int(input(\"Enter the value of n: \" )\nprint(\"The sum of the first\", n, \"odd natural number is:\", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(3) == 341 # Testing for n = 3\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if low > high: \n        return None\n    if high == low: \n        return arr[low] \n    mid = (low + high) // 2\n    if mid<high and arr[mid]>arr[mid+1]: \n        return arr[mid] \n    if mid>low and arr[mid]<arr[mid-1]: \n        return arr[mid-1] \n    if arr[low]>=arr[mid]: \n        return find_Max(arr,low,mid-1) \n    return find_Max(arr,mid+1,high) \n  \n#Test the function with sample inputs\narr = [6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5] \nprint(find_Max(arr, 0, len(arr)-1)) #Output: 12\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(find_Max(arr, 0, len(arr)-1)) #Output: 10\narr = [10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(find_Max(arr, 0, len(arr)-1)) #Output: 12\narr = [10,",
        "generated_testcode": "assert find_Max(arr,low,high) == 10\n# Testcase 1: arr = [10,20,30,40,50,1,2,3,4], low = 0, high = 6\n# Output: 50\n\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    col_list = []\n    for i in range(len(list1)):\n        col_list.append(list1[i][n])\n    return col_list\n\n\n#Test the function with an example:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(my_list, 2))  # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_column(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 2) == [3, 8, 11, 15]\n\n\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(seq_nums) == 1:\n        return True\n    else:\n        diff = seq_nums[1] - seq_nums[0]\n        for i in range(2, len(seq_nums)):\n            if seq_nums[i] - seq_nums[i-1] != diff:\n                return False\n        return True\n        \n#Example Usage:\nseq_nums = [1, 3, 5, 7, 9, 11, 13]\nprint(Seq_Linear(seq_nums)) #True \nseq_nums = [1, 3, 5, 7, 9, 11, 15]\nprint(Seq_Linear(seq_nums)) #False ",
        "generated_testcode": "assert Seq_Linear(1,2,3,4,5,6,7,8) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a tuple of integers to a floating-point number\n    \"\"\"\n    int_lst = [str(i) for i in test_tup]\n    join_str = \"\".join(int_lst)\n    float_num = float(join_str)\n    return float_num\n\n\n# Test the function with a sample tuple\ntest_tup = (1, 2, 3, 4, 5)\nprint(tuple_to_float(test_tup)) # Output: 12345.0 ",
        "generated_testcode": "assert tuple_to_float((\"123.45\") == 123.45\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    oddList = [] \n    evenList = [] \n    for num in list: \n        if num % 2 == 0: \n            evenList.append(num) \n        else: \n            oddList.append(num) \n    return oddList \n\n# sample list \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] \n\n# calling the function and printing odd numbers \noddList = Split(list) \nprint(\"Odd numbers in the list: \", oddList) ",
        "generated_testcode": "assert Split([\"apple\", 2, 3, \"banana\", 4, 5, \"cherry\", 7, 8, \"dog\", 10]) == [3, 5, 7]\n\n\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Calculating the sum of first n natural numbers  \n    sum_of_natural_numbers = (n * (n + 1)) // 2\n    # Calculating the sum of cubes of first n natural numbers  \n    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) // 6\n    # Calculating and returning the difference  \n    return sum_of_cubes - sum_of_natural_numbers ** 3  \n\n# Testing the function with some values  \nprint(difference(5))  \nprint(difference(10))  \nprint(difference(15)) ",
        "generated_testcode": "assert difference(5) == 2202\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j]!=0:\n                count+=1\n    return count\n\n# Driver code \nA = [1, 3, 5, 7, 9] \nN = len(A) \nprint(find_Odd_Pair(A,N)) ",
        "generated_testcode": "assert find_Odd_Pair(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], N=6) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n\n# test the function\nprint(toggle_string(\"Hello World\"))\nprint(toggle_string(\"HELLO WORLD\"))\nprint(toggle_string(\"HeLLo wOrLd\")) ",
        "generated_testcode": "assert toggle_string(string=\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    n1_lst = [int(i) for i in n1_str]\n    n2_lst = [int(i) for i in n2_str]\n    n1_lst.sort()\n    n2_lst.sort()\n    if n1_len != n2_len:\n        min_len = min(n1_len, n2_len)\n        max_len = max(n1_len, n2_len)\n        n1_lst += [0] * (max_len - min_len)\n        n2_lst += [0] * (max_len - min_len)\n    else:\n        pass\n    distance = 0\n    for i in range(max_len):\n        distance += abs(n1_lst[i] - n2_lst[i])\n    return distance\n\n# example usage:\nprint(digit_distance_nums(123, 254))  # Output: 3\nprint(digit_distance_nums(123, 45))  # Output: 3\nprint(digit_distance_nums(123, 6789))  # Output: 6 ",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\n# Example usage:\na = [-2, -3, 4, -1, -2, -1, 5, -3]\nsize = len(a)\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))  # Output: 7\n\n\n# The idea behind this algorithm is to traverse the array from left to right and keep track of the maximum sum found so far and the maximum sum ending at the current position.\n# At each position, we either start a new subarray or continue with the previous subarray. We take the maximum of these two values to get the maximum sum ending at the current position.\n# We also keep track of the overall maximum sum found so far. ",
        "generated_testcode": "assert max_sub_array_sum([-2, 3, 4, -1, -2, 1, 5, -3], 5) == 7\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in test_tup1:\n        if i not in result_tup:\n            result_tup += (i,)\n    for i in test_tup2:\n        if i not in result_tup:\n            result_tup += (i,)\n    return result_tup\n\n# test the function with some examples\nprint(union_elements((\"hello\", \"world\")) # should print (\"h\", \"e\", \"l\", \"o\", \"w\", \"r\", \"d\")\nprint(union_elements((\"python\", \"java\")) # should print (\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"j\", \"a\", \"v\")\nprint(union_elements((\"1234\", \"5678\")) # should print (\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\") ",
        "generated_testcode": "assert union_elements(('apple', 'banana', 'orange') == ('apple', 'banana', 'orange')\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        pair = []\n        for j in range(len(test_list)):\n            if i != j:\n                pair.append(test_list[j])\n        result.append(pair)\n    return result\n\n#test the function with sample data\ntest_list = (1,2,3,4,5,6)\nprint(assign_elements(test_list)) ",
        "generated_testcode": "assert assign_elements(('abc') == {'a': 'b', 'b': 'c', 'c': 'a'}\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = 0\n    current_length = 0\n    for i in lst:\n        if i == 1:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max(max_length, current_length)\n    \n# Test the function with an example:\nlst = [1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0]\nprint(Find_Max_Length(lst)) # Output: 4 ",
        "generated_testcode": "assert Find_Max_Length([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"banana\", \"dog\", \"elephant\", \"dog\", \"cat\", \"dog\", \"mango\", \"pear\", \"pear\", \"pear\", \"orange\", \"cat\"] == 3\n\n# The output should be 3 because \"dog\", \"cat\", \"dog\" and \"pear\", \"pear\", \"pear\" are the longest sublists with length 3. ",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    values = []\n    start_index = text.find('\"')\n    while start_index != -1:\n        end_index = text.find('\"', start_index + 1)\n        values.append(text[start_index + 1:end_index])\n        start_index = text.find('\"', end_index + 1)\n    return values\n\n# Example usage:\ntext = 'The quick brown \"fox\" jumps over the \"lazy\" dog.'\nresult = extract_values(text)\nprint(result)  # Output: ['fox', 'lazy'] ",
        "generated_testcode": "assert extract_values(text='\"Hello, World!\"') == 'Hello, World!'\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count\n#Taking input from user\narr = list(map(int, input().split())\nn = len(arr)\n#calling the function\nprint(count_Pairs(arr,n)) ",
        "generated_testcode": "assert count_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(word) \n\n#Test the function with some examples\nprint(split(\"Hello\")) # ['H', 'e', 'l', 'l', 'o']\nprint(split(\"World\")) # ['W', 'o', 'r', 'l', 'd']\nprint(split(\"Python\")) # ['P', 'y', 't', 'h', 'o', 'n'] ",
        "generated_testcode": "assert split(\u201chello\u201d) == [\u201ch\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Example usage:\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(4567890))  # Output: 28 ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False\n\n#Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 2, 1, 5, 6]\nprint(issort_list(list1)) #True\nprint(issort_list(list2)) #False ",
        "generated_testcode": "assert issort_list([]), \"Empty list is considered sorted\"\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Creates a list of empty dictionaries.\n\n    :param length: The length of the list\n    :return: A list of empty dictionaries of length length length\n    \"\"\"\n    return [{} for _ in range(length)]\n\n\ndef main():\n    print(empty_list(5))\n\n\nif __name__ == \"__main__\":\n    main()\n",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n\n# Test case 1: Test if the function returns a list of length 3 with 3 empty dictionaries\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n\n# test the function with an example\nlist1 = [['apple', 'orange', 'banana'], ['cat', 'dog', 'elephant'], ['car', 'bike', 'truck', 'plane']]\nprint(sort_sublists(list1))  # should print [['apple', 'banana', 'orange'], ['cat', 'dog', 'elephant'], ['bike', 'car', 'truck', 'plane']]\n\n\n# Example usage:\n# sort_sublists([['apple', 'orange', 'banana'], ['cat', 'dog', 'elephant'], ['car', 'bike', 'truck', 'plane']])\n# Output: [['apple', 'banana', 'orange'], ['cat', 'dog', 'elephant'], ['bike', 'car', 'truck', 'plane']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [\" \".join(word for word in sentence.split() if all(char not in charlist for char in word) ) for sentence in list1]\n\n\n# Example usage:\nlist1 = [\"hello world\", \"I am a programmer\", \"this is python\"]\ncharlist = \"aeiou\"\nprint(remove_words(list1, charlist))  # Output: [\"hll wrld\", \"I m prgrmmr\", \"ths s pythn\"]\n\n\n# The function iterates through each sentence in the list and splits it into words. It then checks if any character in the given character list is present in the word. If not, it adds the word to the new sentence.\n# The new sentence is then added to the final list. ",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"], \"a\") == [\"pple\", \"bnn\", \"rge\", \"kiwi\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(N): \n        for j in range(i+1, N): \n            if abs(arr[i] - arr[j]) < K: \n                max_sum += (arr[i] + arr[j]) \n    return max_sum \n# Driver code \narr = [1, 5, 3, 2, 9, 8, 4, 6] \nN = len(arr) \nK = 4\nprint(max_sum_pair_diff_lessthan_K(arr, N, K)) # Output: 17 ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], N=6, K=5) == 13\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    uni_nums = set()\n    for i in nums:\n        if nums.count(i) > 1:\n            uni_nums.add(i)\n            nums.remove(i)\n    return list(uni_nums)\n\n# example usage:\nnums = [1, 2, 3, 4, 5, 6, 1, 2, 7, 8, 9, 1, 10, 10]\nprint(two_unique_nums(nums)) # Output: [1, 10] ",
        "generated_testcode": "assert two_unique_nums(nums=[1, 2, 3, 4, 5, 2, 6, 7, 1]) == [3, 4, 5, 6, 7]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_num = []\n    for i in list_data:\n        if i not in unique_num:\n            unique_num.append(i)\n    product = 1\n    for num in unique_num:\n        product *= num\n    return product\n\n#Test the function with an example list\nprint(unique_product([1,2,2,3,3,4,4,5,6,6,7,7,8,9,9])) # Output: 360\nprint(unique_product([1,2,3,4,5,6,7,8,9])) # Output: 362880 ",
        "generated_testcode": "assert unique_product(list_data=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3628880\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=22/7\n    return 2*pi*r*h+2*pi*r**2\n#taking input of radius and height from user\nr=int(input(\"Enter the radius of the cylinder: \"))\nh=int(input(\"Enter the height of the cylinder: \"))\n#calculating surface area and rounding it to 2 decimal places\nsurface_area=surfacearea_cylinder(r,h)\nprint(\"The surface area of the cylinder is:\",round(surface_area,2))\n#testing the function with example values\n#print(surfacearea_cylinder(5,10))\n#output:The surface area of the cylinder is 157.67",
        "generated_testcode": "assert surfacearea_cylinder(5, 10) == 785.3981634\n# Test case 1: r = 5, h = 10, expected output: 785.3981634\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1): \n        if i % A != 0: \n            count += 1\n            if count == N: \n                return i \n    return -1\n  \n# Driver program to test above function \nA = 2\nN = 3\nL = 0\nR = 10\nprint(count_no(A,N,L,R) # Output: 3 ",
        "generated_testcode": "assert count_no (2,1,100) == 6\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    l = len(A)\n    if n<m:\n        return False\n    j=0\n    for i in range(n):\n        if A[i]==B[j]:\n            j+=1\n            if j==m:\n                return True\n    return False\n\n# Driver code\nA = [1,2,3,4,5,6,7]\nB = [3,4,5]\nn = len(A)\nm = len(B)\nif is_Sub_Array(A,B,n,m):\n    print(\"B is subarray of A\")\nelse:\n    print(\"B is not subarray of A\")\n\n# Output: B is subarray of A ",
        "generated_testcode": "assert is_Sub_Array(A=[1,2,3,4,5,6,7,8],B=[1,2,3],n=5,m=3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 0: \n        return -1\n    elif n == 0: \n        return 1\n    else: \n        f = 1\n        for i in range(1, n+1): \n            f *= i \n        return f % 10\n\n#test the function \nprint(last_Digit_Factorial(12)) # output: 0\nprint(last_Digit_Factorial(15)) # output: 0\nprint(last_Digit_Factorial(17)) # output: 2\nprint(last_Digit_Factorial(20)) # output: 2\nprint(last_Digit_Factorial(25)) # output: 0\nprint(last_Digit_Factorial(30)) # output: 2\nprint(last_Digit_Factorial(35)) # output: 0 ",
        "generated_testcode": "assert last_Digit_Factorial(5) == 2\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n    return list3\n\n# Test the function with example lists\nlist1 = [1,2,3,4,5]\nlist2 = ['a','b','c','d']\nlist3 = []\nprint(interleave_lists(list1, list2, list3)) #[1, 'a', 2, 'b', 3, 'c', 4, 'd', 5] ",
        "generated_testcode": "assert interleave_lists([\"a\",\"b\",\"c\"],[1,2,3],[\"x\",\"y\",\"z\"]) == [\"a\",1,\"x\",\"b\",2,\"y\",\"c\",\"z\"]\n\n# Test case 1: Test if the function works with a list of strings, a list of integers, and a list of strings\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            result.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            result.append(j)\n    return tuple(result)\n\n\n# Test the function with sample tuples\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(find_dissimilar(test_tup1, test_tup2)) ",
        "generated_testcode": "assert find_dissimilar(('abc', 'def') == ('abc', 'def')\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function extracts the even elements in the nested tuple using the given function.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if type(i) == int:\n            if even_fnc(i):\n                result.append(i)\n        else:\n            result.extend(even_ele(i, even_fnc))\n    return tuple(result)\n\ndef is_even(n):\n    \"\"\"\n    This function checks whether the given number is even or not.\n    \"\"\"\n    return n % 2 == 0\n\n# Example usage:\ntest_tuple = (1,2,(3,4,5,6, (7,8,9,(10,11,12), 13), 14) )\nprint(even_ele(test_tuple, is_even)) # Output: (2, 4, 8, 12) ",
        "generated_testcode": "assert even_ele(((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (2, 4, 6, 8, 10)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = 0 \n    area = b*s + b**2 \n    return area \n\n#Test the function \nprint(surface_Area(10,12)) \nprint(surface_Area(5,7)\n) ",
        "generated_testcode": "assert surface_Area(5, 10) == 140\n\n# The base and slant height of the square pyramid are 5 and 10 respectively. The surface area of the square pyramid is calculated as follows:\n# Surface area = 4*base*slant_height + area_of_the_base\n# Area of the base = base*base\n# Therefore, surface area = 4*10 + 5*5 = 40 + 25 = 65\n# Test the function with base = 5 and slant height = 10, the expected output is 65. ",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\ndict1 = {}\nprint(my_dict(dict1)) ",
        "generated_testcode": "assert my_dict(dict()) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result\n\n# Testing the function\nfor i in range(10):\n    print(catalan_number(i)) ",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    \n    # define the regex pattern for adverbs\n    pattern = r'\\b[a-zA-Z]+\\ly\\b'\n    \n    # find all matches of the pattern in the text\n    adverbs = re.findall(pattern, text)\n    \n    # create a list to store the adverbs and their positions\n    adverb_positions = []\n    \n    # iterate through the adverbs and find their positions in the text\n    for adverb in adverbs:\n        position = text.find(adverb)\n        # append the adverb and its position as a tuple to the list\n        adverb_positions.append((adverb, position))\n        \n    return adverb_positions\n\n# test the function\ntext = \"He walked slowly towards the park but quickly looked behind him before crossing the road.\"\nprint(find_adverbs(text)) # Output: [('slowly', 110), ('quickly', 30)] ",
        "generated_testcode": "assert find_adverbs(text) == [(0, \"quickly\"), (10, \"happily\"), (20, \"well\"), (32, \"quickly\"), (42, \"quickly\"), (50, \"well\")]\n\n# The function should return a list of tuples, where each tuple contains the starting index of the adverb and the adverb itself. ",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import heapq\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap,item)\n        if len(min_heap)>n:\n            heapq.heappop(min_heap)\n    return min_heap\n\n#example\nitems = [10, 20, 30, 15, 40, 50, 60, 100, 25, 30, 20, 18, 16]\nn = 3\nprint(expensive_items(items,n)) #Output: [50, 40, 30] ",
        "generated_testcode": "assert expensive_items([\"item1\", \"item2\", \"item3\", \"item4\", \"item5\"], 3) == [\"item4\", \"item5\", \"item3\"]\n\n\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if k >= n//2:  \n        return a  \n    else:  \n        first_part = a[:n-k]  \n        second_part = a[n-k:]  \n        return second_part + first_part ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8], 3, 2) == [3,4,5,1,2,6,7,8]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n#example\n# my_list = [1, 2, 3, 4, 5, 6, 7]\n# print(list_tuple(my_list)) # Output: (1, 2, 3, 4, 5, 6, 7) ",
        "generated_testcode": "assert list_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 0\n    else:\n        max_num = nums[0]\n        min_num = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] > max_num:\n                max_num = nums[i]\n            elif nums[i] < min_num:\n                min_num = nums[i]\n        return max_num - min_num ",
        "generated_testcode": "assert big_diff(nums=[10, 2, 5, 7, 1, 3, 0, 9]) == 9\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Given two integers a and b, return a list of all the perfect squares between a and b (inclusive)\n    \"\"\"\n    # Initialize the list to store the perfect squares\n    squares = []\n\n    # Loop through the range from a to b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if (num**0.5).is_integer():\n            # If it is, add it to the list\n            squares.append(num)\n    # Return the list of perfect squares\n    return squares\n\n# Test the function with sample inputs\nprint(perfect_squares(10, 30)) # Should print [16, 25, 36]\nprint(perfect_squares(1, 20)) # Should print [1, 4, 9, 16]\nprint(perfect_squares(20, 40)) # Should print [25, 36] ",
        "generated_testcode": "assert perfect_squares(1, 20) == [1, 4, 9, 16]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    x: distance in r\n    y: angle in radians\n    returns a tuple of rectangular coordinates (x,y)\n    \"\"\"\n    x_coord = x * math.cos(y)\n    y_coord = x * math.sin(y)\n    return (x_coord, y_coord)\n\n\n#Example:\npolar_rect(2, math.pi/2) #should return (0,2)\npolar_rect(5, 0) #should return (5,0)\n\n\n#Write a function to convert rectangular coordinates to polar coordinates.\ndef rect_polar(x,y):\n    \"\"\"\n    x: x-coordinate\n    y: y-coordinate\n    returns a tuple of polar coordinates (r,theta)\n    \"\"\"\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y,x)\n    return (r, theta)\n\n\n#Example:\nrect_polar(3, 4) #should return (5,0.9272952029613788563)\nrect_polar(0, 5) #should return (5,1.57079632679489666198)\n\n\n#Test your functions with the examples provided:\n#polar_rect(2, math.pi/2) #should return (0,2)\n#polar_rect",
        "generated_testcode": "assert polar_rect(1,0) == (1,0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(newList)>1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    return newList\n\n#test the function with an example list\nmyList = [1, 2, 3, 4, 5, 6, 7]\nprint(swap_List(myList)) # [7, 2, 3, 4, 5, 6, 1] ",
        "generated_testcode": "assert swap_List([\"python\", \"java\", \"kotlin\", \"javascript\", \"c++\"]) == [\"c++\", \"java\", \"kotlin\", \"python\"]\n\n\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(k): \n        res = res * (n-i) \n        res = res // (i+1) \n    return res \n\ndef sum_of_binomial_coeff(n): \n    sum = 0\n    for k in range(n+1): \n        sum += binomial_Coeff(n, k) \n    return sum \n\nn = 5\nprint(sum_of_binomial_coeff(n)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    remove leading zeroes from ip address\n    \"\"\"\n    return '.'.join([str(int(i) for i in ip.split('.')])\n\n\n# Test\nip = \"255.024.01.008\"\nprint(removezero_ip(ip)) # 25.24.1.8\n\n\n\n# 2. Write a function to check if two given strings are anagram of each other or not.\ndef is_anagram(str1, str2):\n    \"\"\"\n    check if two strings are anagram\n    \"\"\"\n    return sorted(str1) == sorted(str2)\n\n\n# Test\nprint(is_anagram('listen', 'silent')) # True\nprint(is_anagram('apple', 'tabble')) # False\n\n\n# 3. Write a function to check if a given string is a pangram or not. A pangram is a sentence containing every letter of the alphabet.\ndef is_pangram(sentence):\n    \"\"\"\n    check if a sentence is a pangram\n    \"\"\"\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return alphabet <= set(sentence.lower())\n\n\n# Test\nprint(is_pangram('the quick brown fox jumps over the lazy dog')) # True\nprint(is_pangram('hello world')) # False ",
        "generated_testcode": "assert removezero_ip(ip='000.0000.00.010.001') == '0.0.0.0.10.1'\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum - odd_sum\n\n\n#test the function with sample input\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) #Expected Output: 15 ",
        "generated_testcode": "assert diff_even_odd(list1) == 10\n\n# The function should return 10 for the given list1. ",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    str1 = list(str1)   #convert string to list\n    str2 = list(str2)   #convert string to list\n    n = len(str1)\n    count = 0\n    for i in range(n) : \n        if str1[i] != str2[i] : \n            count += 1\n            j = i+1\n            while j < n and str1[j] == str2[i] : \n                str1[i],str1[j] = str1[j],str1[i]  #swap the ith element of str1 with jth element of str1\n                j += 1\n    return count\n\n#test the function with sample test cases\nprint(min_Swaps(\"010001\",\"10110\"))   #output: 2\nprint(min_Swaps(\"11110000\",\"0001111\")) #output: 3\nprint(min_Swaps(\"10001101011100000101\",\"0111000011000101110\")) #output: 4\nprint(min_Swaps(\"11110\",\"1110\"))    #output: 0 ",
        "generated_testcode": "assert min_Swaps(10101,00011) == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(tuple_list)\n\n# Example usage:\nmy_tuple = (1,2,3,4,5,6)\nprint(tuple_size(my_tuple)) # Output: 4 ",
        "generated_testcode": "assert tuple_size(()) == 0\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k // 2) - 1\n    j = k - i - 2\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n - j, k - j)\n\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 6, 7, 9]\n    arr2 = [4, 5, 8, 10]\n    m = len(arr1)\n    n = len(arr2)\n    k = 4\n    print(find_kth(arr1, arr2, m, n, k))  # Output: 5\n\n",
        "generated_testcode": "assert find_kth(arr1=[1, 3, 5, 7, 9], arr2=[2, 4, 6, 8, 10], m=4, n=4, k=5) == 6\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    num = number\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n\n# Test the function with an example\nprint(armstrong_number(153)) # Output: True\nprint(armstrong_number(123)) # Output: True\nprint(armstrong_number(370)) # Output: True\nprint(armstrong_number(371)) # Output: True\nprint(armstrong_number(407)) # Output: True\nprint(armstrong_number(408)) # Output: False\nprint(armstrong_number(1634)) # Output: True\nprint(armstrong_number(9474)) # Output: True\nprint(armstrong_number(9475)) # Output: False ",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n\n# testing the function\nprint(sum_average(10)) ",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return n&1==0 #If the last bit is 0 then it's even otherwise it's odd\n\n#Test the function with some examples\nprint(is_Even(10)) #True\nprint(is_Even(7)) #False\nprint(is_Even(100)) #True\nprint(is_Even(27)) #False\nprint(is_Even(1000)) #True ",
        "generated_testcode": "assert is_Even(10) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "       self.a = a \n        self.b = b \n\ndef findLongestChain(pairs):\n    graph = {}\n    for a, b in pairs:\n        if a not in graph:\n            graph[a] = []\n        if b not in graph:\n            graph[b] = []\n        graph[a].append(b)\n        if a not in graph[b]:\n            graph[b].append(a)\n    \n    visited = {}\n    for node in graph:\n        visited[node] = False\n    \n    longest_chain = []\n    for node in graph:\n        if not visited[node]:\n            chain = []\n            dfs(node, graph, visited, chain)\n            if len(chain) > len(longest_chain):\n                longest_chain = chain\n                \n    return longest_chain\n    \ndef dfs(node, graph, visited, chain):\n    visited[node] = True\n    chain.append(node)\n    for neighbor in graph[node]:\n        if not visited[neighbor]:\n            dfs(neighbor, graph, visited, chain)\n    chain.pop()\n    visited[node] = False\n    \n# Example usage:\npairs = [('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e'), ('e', 'f'), ('f', 'g'), ('g', 'h'), ('h', 'i'), ('i', 'j'), ('j', 'k'), ('k',",
        "generated_testcode": "assert __init__(1, 2) == 1\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = {}\n    for ch in str1:\n        if ch in freq:\n            return ch\n        else:\n            freq[ch] = 1\n    return None\n\n#Test the function with some examples\nprint(first_repeated_char(\"hello\")) #o\nprint(first_repeated_char(\"abcdefgh\")) #None\nprint(first_repeated_char(\"abca\")) #a\nprint(first_repeated_char(\"abacdef\")) #a\nprint(first_repeated_char(\"abcabc\")) #a ",
        "generated_testcode": "assert first_repeated_char(None) == None\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ludics = [1]\n    nums = list(range(2, n+1))\n    while nums:\n        ludics.append(nums.pop(0))\n        to_remove = [i for i in nums if i % ludics[-1] == 0]\n        for i in to_remove:\n            nums.remove(i)\n    return ludics\n\n# Test the function with n = 20\nprint(get_ludic(20)) #[1, 2, 3, 5, 7, 11, 13, 17, 29, 41, 61, 89, 107, 1333, 169, 181, 193, 2333, 283, 409, 4497, 613, 617, 837, 1473, 1801, 2629, 3553, 4481, 6733, 907]\n\n# Write a function to get the sum of digits of a number\ndef sum_digits(num):\n    return sum(int(digit) for digit in str(num))\n\n# Test the function with num = 12345\nprint(sum_digits(12345)) # 15 ",
        "generated_testcode": "assert get_ludic(1) == []\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    Reverse the words in a given string\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the words to form a string and return\n    return \" \".join(words)\n\n# Test the function with an example\nprint(reverse_words(\"I love Python\"))  # Output: \"Python love I\" ",
        "generated_testcode": "assert reverse_words(s=\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with some examples\nprint(prime_num(15) == False)\nprint(prime_num(11) == True)\nprint(prime_num(20) == False)\nprint(prime_num(7) == True) ",
        "generated_testcode": "assert prime_num(2) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    radian = degree * (3.14/180)\n    return radian\n\n# test the function\nprint(radian_degree(180))\nprint(radian_degree(360))\nprint(radian_degree(90))\nprint(radian_degree(45))\n\n\n# Define a function to find the area of a circle given the radius as input\ndef area_circle(radius):\n    area = 3.14 * radius * radius\n    return area\n\n# test the function\nprint(area_circle(2) == 12.56)\nprint(area_circle(5) == 78.5)\nprint(area_circle(7) == 153.86)\n\n# Define a function to find the circumference of a circle given the radius as input\ndef circumference_circle(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\n# test the function\nprint(circumference_circle(2) == 12.56)\nprint(circumference_circle(5) == 31.4)\nprint(circumference_circle(7) == 43.98) ",
        "generated_testcode": "assert radian_degree(180) == math.pi\n\n# Write a function to calculate the area of a circle with a given radius.\ndef circle_area(radius):\n    pass\n\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        print(f\"Found {pattern} at {start} to {end - 1}\")\n    return matches\n\n# Example usage:\ntext = \"Hello, how are you doing today? I hope everything is going well.\"\npattern = \"how\"\nmatches = find_literals(text, pattern) ",
        "generated_testcode": "assert find_literals(text=\"The quick brown fox jumps over the lazy dog\", pattern=\"fox\") == (True, 16)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    bell = [[0 for j in range(n+1)] for i in range(n+1)] \n    for i in range(n+1): \n        bell[i][0] = 1 \n        bell[i][i] = 1\n    for i in range(1, n+1): \n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j] \n        bell[i][i] = bell[i-1][i-1] \n    return bell[n][0] \n  \n# Driver program to test above function \nn = 4\nprint(\"Bell Number\", n, \"is\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    min_val = float('inf')\n    for i in range(1,N):\n        val = A + B * (i - 1)\n        if val < min_val:\n            min_val = val\n    return min_val\n\nA = 5\nB = 3\nN = 10\nprint(floor_Min(A,B,N)) # Output: 35 ",
        "generated_testcode": "assert floor_Min(10, 15, 3) == 10\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(list1) == 0 or k > len(list1) or k < 0:\n        return \"Invalid input\"\n    else:\n        list1.pop(k-1)\n        return list1\n\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nk = 3\nprint(remove_kth_element(list1, k)) # Output: [1, 2, 3, 5, 6, 7] ",
        "generated_testcode": "assert remove_kth_element(2, [1, 2, 3, 4, 5, 6, 7]) == [1, 2, 4, 5, 6, 7]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_value = test_list[0][N]\n    for i in range(1, len(test_list)):\n        if test_list[i][N] > max_value:\n            max_value = test_list[i][N]\n    return max_value\n\n# test the function\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))\nprint(max_of_nth(test_list, 2)) # Output: 12\n\n\n\n# Write a function to find the minimum of nth column from the given tuple list.\ndef min_of_nth(test_list, N):\n    min_value = test_list[0][N]\n    for i in range(1, len(test_list)):\n        if test_list[i][N] < min_value:\n            min_value = test_list[i][N]\n    return min_value\n\n# test the function\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))\nprint(min_of_nth(test_list, 2)) # Output: 3 ",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 4\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    first_elem = []  \n    last_elem = []  \n    for i in lst:  \n        first_elem.append(i[0])  \n        last_elem.append(i[-1])  \n    return (first_elem, last_elem) ",
        "generated_testcode": "assert merge([] ) == []\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_value = None\n    for item in test_list:\n        if max_value is None or item[1] > max_value:\n            max_value = item[1]\n    return max_value\n\n# Example usage:\nrecords = [('Alice', 20), ('Bob', 23), ('Charlie', 25), ('David', 22)]\nprint(maximum_value(records))  # Output: 25\n\n\n# Find the minimum value in the record list as tuple attribute in the given tuple list\ndef minimum_value(test_list):\n    min_value = None\n    for item in test_list:\n        if min_value is None or item[1] < min_value:\n            min_value = item[1]\n    return min_value\n# Example usage:\nrecords = [('Alice', 20), ('Bob', 23), ('Charlie', 25), ('David', 22)]\nprint(minimum_value(records))  # Output: 20\n\n# Find the average value in the record list as tuple attribute in the given tuple list\ndef average_value(test_list):\n    total = 0\n    count = 0\n    for item in test_list:\n        total += item[1]\n        count += 1\n    return total/count\n# Example usage:\nrecords = [('Alice', 20), ('Bob', 23), ('Charlie', 25), ('",
        "generated_testcode": "assert maximum_value([(1, 2), (3, 4), (5, 6)] ) == 6\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the cumulative sum of all the values in the given list\n    \"\"\"\n    cumulative_sum = 0\n    result = []\n    for value in test_list:\n        cumulative_sum += value\n        result.append(cumulative_sum)\n    return result\n\n\n# Test the function with a sample input\ntest_list = (1, 2, 3, 4, 5, 6)\nprint(cummulative_sum(test_list)) # Output: [1, 3, 6, 10, 15, 21]\n\n\n# Test the function with another input\ntest_list = (10, 20, 30, 40, 50)\nprint(cummulative_sum(test_list)) # Output: [10, 30, 60, 100, 150] ",
        "generated_testcode": "assert cummulative_sum(()) == 0\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the average of the numbers in a tuple of tuples\n    \"\"\"\n    total_sum = 0\n    count = 0\n    for tuple in nums:\n        for num in tuple:\n            total_sum += num\n            count += 1\n    return total_sum / count\n\n\n# Test the function with the following:\nnumbers = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(average_tuple(numbers)) # Output: 5.0 ",
        "generated_testcode": "assert average_tuple(()) == 0.0\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] % test_tup2[i])\n    return tuple(res)\n\n\n# Test the function with examples\nprint(tuple_modulo((10, 20, 30), (3, 4, 5)) )  # Output: (1, 2, 0)\nprint(tuple_modulo((8, 13, 21), (4, 5, 6))   # Output: (2, 3, 3) ",
        "generated_testcode": "assert tuple_modulo(( (10, 20, 30), (3, 4, 5)) == (1, 2, 0)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if a == 0 and b == 0:\n        return 0\n    if d < a or d < b:\n        return -1\n    if a == 0 or b == 0:\n        return 1\n    else:\n        if a > b:\n            return 1 + min_Jumps(a-b, b, d)\n        else:\n            return 1 + min_Jumps(a, b-a, d)\n\n# Testing the function with sample test cases\nprint(min_Jumps(1, 3, 4))  # Output: 2\nprint(min_Jumps(2, 3, 11)) # Output: 3\nprint(min_Jumps(1, 1, 3))  # Output: 2\nprint(min_Jumps(10, 10, 15)) # Output: 3\nprint(min_Jumps(1, 1, 2))  # Output: -1 ",
        "generated_testcode": "assert min_Jumps(1, 1, 5) == 2\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = map(lambda x,y: x/y, nums1,nums2)\n    return list(result)\n\nnums1 = [10,20,30]\nnums2 = [2,5,10]\nprint(div_list(nums1,nums2)) #[5.0, 4.0, 3.0]\n\n\n#using lambda and filter function to filter out even numbers from a list.\ndef filter_even(nums):\n    result = filter(lambda x: x%2==0, nums)\n    return list(result)\nnums = [1,2,3,4,5,6,7,8,9,10]\nprint(filter_even(nums)) #[2, 4, 6, 8, 10]\n\n#using lambda and reduce function to find the maximum value in a list.\nfrom functools import reduce\ndef find_max(nums):\n    max_num = reduce(lambda x,y: x if x>y else y, nums)\n    return max_num\nnums = [1,2,3,4,5,6,7,8,9]\nprint(find_max(nums)) #9 ",
        "generated_testcode": "assert div_list(nums1, nums2) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Test case 1: nums1 = [1, 2, 3, 4, 5, 6, 7, 8], nums2 = [2, 2, 2, 2, 2, 2, 2]\n# Expected output: [0.5, 1.0, 2.0, 2.5, 3.0, 4.0]\n\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return ''.join(filter(str.isdigit, test_str))\n\ntest_str = \"a1b2c3d4e5f6g7h8i9j0k\"\nprint(move_num(test_str) == \"1234567890\")\n\n\ndef move_num(test_str):\n    return ''.join(char for char in test_str if char.isdigit())\ntest_str = \"a1b2c3d4e5f6g7h8i9j0k\"\nprint(move_num(test_str) == \"1234567890\") ",
        "generated_testcode": "assert move_num(test_str = \"Hello 123 World 456\") == \"123 456\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a.sort()\n    max_len = 0\n    max_subset = []\n    for i in range(n):\n        subset = [a[i]]\n        for j in range(i + 1, n):\n            if a[j] % a[i] != 0:\n                continue\n            elif a[j] % a[i] == 0:\n                subset.append(a[j])\n        if len(subset) > max_len:\n            max_len = len(subset)\n            max_subset = subset\n    return max_subset\n\n\n# Example usage:\n# largest_subset([1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15], 7) returns [1, 2, 4, 6, 8, 12]\n# largest_subset([1, 3, 5, 7, 9], 4) returns [1, 3, 7]\n# largest_subset([2, 3, 4, 8, 10, 12, 14], 5) returns [2, 4, 8, 12]\n# largest_subset([3, 7, 9, 21, 24, 27, 36], 5) returns [1, 3, 9, 27]\n# largest_subset([1, 2, 3, 4, 6, ",
        "generated_testcode": "assert largest_subset(a=[1, 2, 3, 4, 6, 8, 9, 12, 15, 16, 18], n=7) == [1, 2, 4, 6, 8]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for i in test_list:\n        new_str = \"\"\n        for j in i:\n            if j.isnumeric():\n                new_str += str(int(j)+K)\n            else:\n                new_str += j\n        new_list.append(new_str)\n    return new_list\n\n# Test cases\nprint(increment_numerics([\"a1b2c3\",\"x4y5z6\",\"7d8e9\"], 5)) # [\"a6b7c8\", \"x9y10z11\", \"12e14\"] ",
        "generated_testcode": "assert increment_numerics([\"a123b45c\", \"x1y22z\", \"123q456\"], 5) == [\"a128b410c\", \"x6y27z\", \"128q411\"]\n\n# Test case 1:\n# Input: [\"a123b45c\", \"x1y22z\", \"123q456\"], 5\n# Output: [\"a128b410c\", \"x6y27z\", \"128q411\"]\n# Explanation: In the first string, \"a123b45c\", we replace 123 with 128, in the second string \"x1y22z\" we replace 1 with 6 and in the third string \"123q456\" we replace 123 with 128.\n\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = j = k = 0\n    median = [0]\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n\n    while i < n:\n        median.append(arr1[i])\n        i += 1\n        k += 1\n\n    while j < n:\n        median.append(arr2[j])\n        j += 1\n        k += 1\n\n    if n % 2 == 0:\n        return (median[n // 2] + median[n // 2 - 1]) / 2\n    else:\n        return median[n // 2]\n\n\n# Test the function with an example\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n))  # Output: 5.5\n",
        "generated_testcode": "assert get_median(sorted([1, 3, 5, 7, 9], sorted([2, 4, 6, 8, 10], 4) == 5.5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x**n,nums) )\n\n#Example:\n# nums = [1, 2, 3, 4, 5]\n# n = 3\n# print(nth_nums(nums,n))\n# Output: [1, 8, 27, 64, 125] \n#Explanation: 1^3 = 1, 2^3 = 8, 3^3 = 27, 4^3 = 64, 5^3 = 125 ",
        "generated_testcode": "assert nth_nums(nums=[2,3,4,5],n=3) == [8,27,125]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return string.upper()\n# Test the function with example string\nprint(is_upper(\"hello world\"))\nprint(is_upper(\"HELLO WORLD\"))\nprint(is_upper(\"Hello World\")) ",
        "generated_testcode": "assert is_upper(string) == \"THIS IS A TEST STRING\"\n\n# Test case 1: Testing with a normal string\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(newList) <= 1: \n        return newList \n    else: \n        return [newList[-1], *newList[1:-1], newList[0]] \n  \n# Test the function with a sample list \nmyList = [1, 2, 3, 4, 5, 6] \nprint(swap_List(myList)) # Output: [6, 2, 3, 4, 5, 1] ",
        "generated_testcode": "assert swap_List([\"python\", \"java\", \"kotlin\", \"javascript\", \"c++\"]) == [\"c++\", \"java\", \"kotlin\", \"python\"]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    r : radius of the semicircle\n    return value : area of the largest triangle\n    \"\"\"\n    #Calculating the height of the triangle using the formula 2*r*h = r^2 + h^2 (Pythagorean theorem)\n    height = r**2/(2*r)\n    #Calculating the area of the triangle using the formula 1/2 * base * height\n    area = 1/2 * (r**2) * height\n    return area\n\n#Testing the function with radius 5\nprint(triangle_area(5)) \n#Output: 6.25 ",
        "generated_testcode": "assert triangle_area(3) == 6.0\n\n# Write a python function to find the area of a triangle given the base and height.\ndef triangle_area_bh(base, height) :  \n    pass\n\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(array) \n    for i in range(n): \n        if array[i]<=0 or array[i]>n: \n            array[i] = n+1 \n           \n    for i in range(n): \n        num = abs(array[i]) \n        if num<=n: \n            array[num-1] = -abs(array[num-1]) \n            \n    for i in range(n): \n        if array[i]>0: \n            return i+1 \n    return n+1\n\n# Driver code \narray = [4,3,2,1,6,5] \nstart = 1\nend = 6\nprint(find_First_Missing(array,start,end)) ",
        "generated_testcode": "assert find_First_Missing(array=[1,2,3,4,5,6,7,8,9],start=1,end=9) == 10\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if string.isspace():\n        return string.replace(\" \", \"%20\")\n    else:\n        return string\n\n# Test cases\nprint(replace_spaces(\"hello world\"))\nprint(replace_spaces(\"hello  world \"))\nprint(replace_spaces(\"  hello  world  \"))\nprint(replace_spaces(\"  \"))\nprint(replace_spaces(\"\"))\nprint(replace_spaces(\"hello\"))\nprint(replace_spaces(\"hello  world  how  are  you\"))\nprint(replace_spaces(\"   hello  world  how   are  you   \")) ",
        "generated_testcode": "assert replace_spaces(input_string) == expected_output_string\n\n# Example:\n# input_string = \"Hello world\"\n# expected_output_string = \"Hello%20world\"\n# ",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    evens = []\n    odds = []\n    for num in list: \n        if num % 2 == 0: \n            evens.append(num) \n        else: \n            odds.append(num) \n    return evens, odds \n  \n# Example usage: \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nevens, odds = Split(list) \nprint(\"Even numbers: \", evens) \nprint(\"Odd numbers: \", odds) ",
        "generated_testcode": "assert Split([\"apple\", 23, 4, \"banana\", 56, \"orange\", 89, \"grape\", 12, 34, \"kiwi\"]) == [4, 12]\n\n\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    x, y = ele \n    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1), (0, 1), (0, -1)]: \n        if (x+dx, y+dy) in sub: \n            yield (x+dx, y+dy) \n\ndef all_adjacents(sub): \n    for ele in sub: \n        yield from adjac(ele, sub) \n\ndef adjacent(sub): \n    return list(set(all_adjacents(sub)) - set(sub)) \n\nsub = [(1, 1), (1, 2), (1, 3), (2, 3)] \nprint(adjacent(sub)) ",
        "generated_testcode": "assert adjac((1, 1) == [(0, 1), (1, 0), (2, 1), (1, 2)])\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub('\\s', '_', text)\n\n# Test\nprint(replace_spaces('hello world'))  # Should be 'hello_world'\nprint(replace_spaces('hello  world'))  # Should be 'hello__world'\nprint(replace_spaces('hello   world'))  # Should be 'hello___world'\nprint(replace_spaces('  hello  world'))  # Should be '__hello__world'\n\n\n# Solution:\ndef replace_spaces(text):\n    import re\n    return re.sub('\\s', '_', text)\n\n# Test\nprint(replace_spaces('hello world'))  # Should be 'hello_world'\nprint(replace_spaces('hello  world'))  # Should be 'hello__world'\nprint(replace_spaces('hello   world'))  # Should be 'hello___world'\nprint(replace_spaces('  hello  world'))  # Should be '__hello__world' ",
        "generated_testcode": "assert replace_spaces(text=\"I love Python\") == \"I_love_Python\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of integers, writes a function to move all non-zero integers to the beginning of the list and zeroes to the end.\n    \"\"\"\n    # Create an empty list to store the non-zero integers\n    non_zero_list = []\n    # Iterate over the original list and append all non-zero integers to the non-zero list\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n    # Iterate over the original list again and append zeroes to the end of the non-zero list\n    for num in num_list:\n        if num == 0:\n            non_zero_list.append(num)\n    return non_zero_list\n\n# Test the function with sample inputs\nprint(move_zero([0, 2, 3, 0, 4, 5, 0, 6, 7, 0, 8])) # Output: [2, 3, 4, 5, 6, 7, 8, 0, 0, 0]\nprint(move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])) # Output: []\nprint(move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])) # Output: [1, 2, 3, 4, 5, 6, 7",
        "generated_testcode": "assert move_zero(num_list) == [1, 3, 12, 0, 0, 15, 0, 8, 0, 10]\n\n\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n) : \n        for j in range(i+1, n) : \n            sum += (arr[i] ^ arr[j])\n    return sum\n\n#Test the function with example array \narr = [1, 3, 5, 7, 9]\nn = len(arr)\nprint(pair_OR_Sum(arr, n)) # Output: 12\n\n# The output is 12 because, \n# 1 XOR 3 = 2, 1 XOR 5 = 4, 1 XOR 7 = 6, 1 XOR 9 = 10 \n# 3 XOR 5 = 6, 3 XOR 7 = 4 and 3 XOR 9 = 12 \n# 5 XOR 7 = 2 and 5 XOR 9 = 12 \n# 7 XOR 9 = 8 \n# Therefore, sum = 2+4+6+10+6+4+12+2+8 = 30 ",
        "generated_testcode": "assert pair_OR_Sum(arr=[1, 2, 3, 4, 5], n=4) == 18\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n+1): \n        sum += (i*i*i*i*i*i)\n        if i % 2 == 0: \n            continue\n    return sum\n  \nn = int(input(\"Enter n: \") \nprint(\"The sum of the first\", n, \"even powers is\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(4) == 1000000\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"Perform heap sort on an iterable.\"\"\"\n    # Convert the iterable to a heap\n    heapq.heapify(iterable)\n    # Create an empty list to hold the sorted values\n    sorted_values = []\n    # Pop the smallest value from the heap and append it to the sorted list until the heap is empty\n    while iterable:\n        sorted_values.append(heapq.heappop(iterable))\n    # Reverse the sorted values so they are in ascending order\n    sorted_values.reverse()\n    return sorted_values\n\n# Example usage:\nunsorted_list = [4, 2, 9, 1, 7, 5, 6, 8, 3, 10, 11]\nsorted_list = heap_sort(unsorted_list)\nprint(sorted_list)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] ",
        "generated_testcode": "assert heap_sort(iterable=[4, 2, 5, 1, 3, 7, 6, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a == 0: \n        return \"a cannot be 0\"\n    else: \n        d = b**2 - 4*a*c \n        if d < 0: \n            return \"No real solutions\" \n        else: \n            x1 = (-b + d**0.5)/(2*a) \n            x2 = (-b - d**0.5)/(2*a) \n            if x1 == 1/x2: \n                return \"The roots are reciprocal of each other\" \n            else: \n                return \"The roots are not reciprocal of each other\" \na = int(input(\"Enter coefficient of x^2: \")) \nb = int(input(\"Enter coefficient of x: \")) \nc = int(input(\"Enter constant term: \")) \nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n\n# Test the function with an example\nprint(noprofit_noloss(1000,100)) # Output: True\nprint(noprofit_noloss(150,120)) # Output: False ",
        "generated_testcode": "assert noprofit_noloss(1000, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    v_16 = v ** 0.16\n    wci = 13.12 + 0.6215 * t - 11.39 * v_16 + 0.486 * t * v_16\n    return round(wci, 2)\n\n# Test the function\nprint(wind_chill(40, 25)) # -9.97\nprint(wind_chill(50, -10)) # -32.37\nprint(wind_chill(80, -20)) # -61.21\n\nprint(wind_chill(10, 30)) # -10.75\nprint(wind_chill(20, 5)) # -18.13 ",
        "generated_testcode": "assert wind_chill(5, 10) == 10.0\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length += len(name)\n    return length\n\n# test the function with a sample list of names\nsample_list = [\"Alex\", \"Alice\", \"aditya\", \"adam\", \"Aaron\", \"Shaun\", \"tina\"]\nprint(sample_nam(sample_list)) # should return 9, as the sum of lengths of names \"Alex\", \"Alice\" and \"Aaron\" is 9 ",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"dave\", \"eve\", \"Frank\"]) == 10\n# Test case 1: Testing with a list of names where the first and last names start with uppercase letters\n\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Removes parenthesis from a string.\n    \"\"\"\n    return ''.join(char for char in items if char not in '()')\n\n\n# test case\nprint(remove_parenthesis('a(bc)d')) # 'ad'\nprint(remove_parenthesis('hello (world)')) # 'helloworld'\nprint(remove_parenthesis('(hi) (how are you)')) # 'hi how are you'\nprint(remove_parenthesis('a(bc)d(e(fg)h')) # 'adfgh'\nprint(remove_parenthesis('(test(this(function) please)')) # 'testfunction please'\nprint(remove_parenthesis('(test(((this) is a test))')) # 'test is a test' ",
        "generated_testcode": "assert remove_parenthesis([\"a(bc)d\", \"hello(world)\", \"def)ghi\", \"j(k(lm)n)o\"] == [\"ad\", \"helloworld\", \"dgno\", \"jkno\"]\n\n\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    else: \n        return (n * (7 * n - 5) // 2) + 1\n\n# Test the function \nfor i in range(1, 11): \n    print(is_nonagonal(i), end=\" \") ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    res = []\n    for i in test_list:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n# Test\ntest_list = ((1,2,3),(4,5,6),(1,2,3),(7,8,9),(4,5,6),(7,8,9))\nprint(remove_similar_row(test_list)) # Output: ((1,2,3),(4,5,6),(7,8,9)) ",
        "generated_testcode": "assert remove_similar_row(()) == ()\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b[a-zA-Z]*z[a-zA-Z]*\\b\"\n    result = re.findall(pattern, text)\n    return result\n\n# Test the function with some examples\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog and other zebras.\"))  # should return ['quick', 'jumps']\nprint(text_match_wordz_middle(\"Zebra, apple, banana, orange, zebra, orange, apple, zebra.\")) # should return ['apple', 'banana']\nprint(text_match_wordz_middle(\"Zebra, apple, banana, orange, zebra, orange, apple, zebra.\")) ",
        "generated_testcode": "assert text_match_wordz_middle([\"hello\", \"hey\", \"goodbye\", \"seven\", \"zero\", \"az\"]), [\"hey\", \"goodbye\"]\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # reverse first k elements\n    for i in range(0, k): \n        if i < k: \n            input[i], input[k-i-1] = input[k-i-1], input[i] \n  \n    # reverse next n-k elements \n    start = k \n    end = len(input)-1\n    while start < end: \n        input[start], input[end] = input[end], input[start] \n        start += 1\n        end -= 1\n  \n    # reverse the whole array \n    for i in range(0, len(input)): \n        if i < k: \n            input[i], input[len(input)-1-i] = input[len(input)-i-1], input[i] \n  \n    return input\n  \n# Driver code \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 3\nprint(reverse_Array_Upto_K(input, k)) ",
        "generated_testcode": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 2) == [2, 1, 4, 3, 6, 5, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(val) \n    i = 0\n    j = 0\n    k = 0\n    product = 1\n    while (k < n) :\n        product *= val[i][j]\n        i += 1\n        j += 1\n        if i == len(val):\n            i = 0\n            j = 0\n            k += 1\n    return product \n  \n# Driver code \nval = ((1, 2, 3), (4, 5, 6), (7, 8, 9)) \nk = 2\nprint(\"The product of kth index is:\", get_product(val)) ",
        "generated_testcode": "assert get_product(((1,2,3,4,5,6,7,8,9,10)) == 36 # Testing for k = 3\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    '''This function takes two arguments N and K, N is the size of cube and K is the size of cube to be counted.\n    It returns the number of cubes of size K in a cube of size N.'''\n    #if K is greater than N, return 0\n    if K > N:\n        return 0\n    #initialize variables\n    count = 0\n    i = 0\n    #loop through the cube of size N\n    while i < N:\n        #count the number of KxKxK cubes that can fit in the row\n        count += N//K\n        #move to the next row of size N-K\n        i += K\n    #return the total number of cubes\n    return count**3\n\n#test the function with N=5 and K=3\nprint(No_of_cubes(5,3)) #output: 1\n#test the function with N=10 and K=5\nprint(No_of_cubes(10,5)) #output: 2\n#test the function with N=10 and K=2\nprint(No_of_cubes(10,2)) #output: 4\n#test the function with N=15 and K=5\nprint(No_of_cubes(15,5)) #output: 5\n#test the function with N=20 and K=3\nprint(No_of_cubes(20,3)) #output: 3\n\n#test edge cases\nprint",
        "generated_testcode": "assert No_of_cubes(10, 2) == 6\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    temp = \"\"\n    for char in text:\n        if char.isupper() and temp != \"\":\n            result.append(temp)\n            temp = char\n        else:\n            temp += char\n    result.append(temp)\n    return result\n\n# Test the function with some examples\nprint(split_upperstring(\"HelloWorldAndGoodMorning\")) # ['Hello', 'World', 'And', 'Good', 'Morning']\nprint(split_upperstring(\"TheQuickBrownFoxJumpsOverTheLazyDog\")) # ['The', 'Quick', 'Brown', 'Fox', 'Jumps', 'Over', 'The', 'Lazy', 'Dog']\nprint(split_upperstring(\"TheBigCat\")) # ['The', 'Big', 'Cat']\nprint(split_upperstring(\"TheBig\")) # ['The', 'Big'] ",
        "generated_testcode": "assert split_upperstring(text=\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    for i in range(0, len(lst)-1, n):\n        if i+n < len(lst):\n            lst[i], lst[i+n] = lst[i+n], lst[i]\n    return lst\n\n# Test the function with an example\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(\"Original list:\", lst)\nprint(\"Modified list:\", exchange_elements(lst)) ",
        "generated_testcode": "assert exchange_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"b\", \"a\", \"d\", \"c\", \"f\", \"e\"]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0                                                                                                                                                                                                             \n    for i in range(m, n+1):                                                                                                                                                                                              \n        total += nums[i]                                                                                                                                                                                             \n    return total                                                                                                                                                                                                 \n# Example usage:                                                                                                                                                                                             \nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                            \nprint(sum_Range_list(nums, 1, 4)) # Output: 15 (sum of 2 + 3 + 4 + 5 + 6) ",
        "generated_testcode": "assert sum_Range_list(nums=[1,2,3,4,5,6,7,8,9], m=1, n=3) == 9\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n!=m:\n        return False\n    else:\n        for i in range(n):\n            if arr1[i]!=arr2[i]:\n                return False\n        return True\n    \n#take inputs\nn=int(input(\"Enter size of array 1: \" )\narr1=[]\narr2=[]\nprint(\"Enter elements of array 1: \")\nfor i in range(n):\n    arr1.append(int(input())\nprint(\"Enter elements of array 2: \")\nfor i in range(n):\n    arr2.append(int(input())\n\n#function call\nif are_Equal(arr1,arr2,n,m):\n    print(\"Arrays are equal\")\nelse:\n    print(\"Arrays are not equal\") ",
        "generated_testcode": "assert are_Equal(arr1=[1,2,3,4,5],arr2=[1,2,3,4,5],n=4,m=4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # check if set1 is subset of set2\n    if set1.issubset(set2):\n        return True\n    else:\n        return False\n\n# test the function with some sample tuples\ntup1 = (1, 2, 3, 4, 5)\ntup2 = (1, 2, 3, 4, 5, 6)\ntup3 = (1, 2, 3, 4)\nprint(check_subset(tup1, tup2))  # True\nprint(check_subset(tup2, tup1))  # False\nprint(check_subset(tup1, tup3))  # True\nprint(check_subset(tup3, tup1))  # False ",
        "generated_testcode": "assert check_subset(('apple', 'banana') == False\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given a matrix, represented as a tuple of tuples, return a tuple of tuples where each inner tuple represents a column of the matrix.\n    \"\"\"\n    return tuple(zip(*test_list)\n    \n# Example usage:\nmatrix = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nresult = matrix_to_list(matrix)\nprint(result) # Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)) ",
        "generated_testcode": "assert matrix_to_list(()) == ()\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for k, v in l:\n        d[k].append(v)\n    return d\n\n# Example usage:\n# l = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 5), ('b', 6)]\n# result = grouping_dictionary(l)\n# print(result) # Output: {'a': [1, 3, 5], 'b': [2, 6], 'c': [4]} ",
        "generated_testcode": "assert grouping_dictionary([\"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"orange\"]) == {\"apple\": [\"apple\", \"apple\", \"apple\"], \"orange\": [\"orange\", \"orange\"], \"banana\": [\"banana\", \"banana\"]}\n\n\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return 2*(l+b)\n#checking with some test cases\nprint(rectangle_perimeter(5,3) == 14)\nprint(rectangle_perimeter(7,2) == 16)\nprint(rectangle_perimeter(20,10) == 60)\n\n\n#Testing with random values\nimport random\nfor i in range(5):\n    l = random.randint(1,100)\n    b = random.randint(1,100)\n    print(f\"Perimeter of rectangle with length {l} and breadth {b} is {rectangle_perimeter(l,b)}\") ",
        "generated_testcode": "assert rectangle_perimeter(4, 5) == 18\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1,n+1) : \n        sum += i**5\n    return sum\nn = int(input(\"Enter the value of n : \")\nprint(\"The sum of the fifth power of n natural numbers is : \", fifth_Power_Sum(n)) ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 15125\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a.sort() \n    b.sort() \n    i = 0\n    j = 0\n    min_sum = 0\n    while i < n and j < n: \n        min_sum += abs(a[i]-b[j]) \n        if a[i] < b[j]: \n            i += 1\n        else: \n            j += 1\n    return min_sum \n# Example usage:\na = [2, 3, 5, 1, 7, 9] \nb = [1, 2, 4, 9, 8, 10] \nn = len(a) \nprint(\"Minimum sum is\", find_Min_Sum(a, b, n)) ",
        "generated_testcode": "assert find_Min_Sum(a,b,n) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    factorial = 1 \n    for i in range(1, n + 1): \n        factorial *= i \n    while (factorial % 10 == 0): \n        factorial //= 10\n    return (factorial % 10) \n\n# Drivers code \nn = 105\nprint(\"First non-zero digit in the factorial of\", n, \"is\", first_Digit(n)) ",
        "generated_testcode": "assert first_Digit(123) == 7\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_count = 0\n    max_item = None\n    for item in list1:\n        count = list1.count(item)\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 2, 5, 6, 2, 7, 2, 8, 2, 9, 2]\nprint(max_occurrences(list1) )  # Output: 2 ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"banana\"]) == \"banana\"\n\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    dup = [] \n    for i in x: \n        if x.count(i) > 1: \n            if i not in dup: \n                dup.append(i) \n    return dup \n\n# Test the function with an example list\nx = [1, 2, 3, 4, 5, 1, 2, 6, 7, 1, 3, 8, 2, 4, 6, 9, 10, 1] \nprint(Repeat(x)) ",
        "generated_testcode": "assert Repeat([1, 2, 3, 4, 5, 6, 2, 7, 8, 9, 3, 10, 10] ) == [2, 3, 10]\n\n\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if l1>r2: \n        return [(l1,r2),(l2,r1)] \n    elif l2>r1: \n        return [(l2,r1),(l1,r2)] \n    else: \n        return [(r1,l2),(l1,r1),(l2,r2)] ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 3:\n        return 0\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n    max_sum = max(arr[0]+arr[1], arr[1]+arr[2], arr[2])\n    max_sum_excluding_last = max(arr[0], arr[1])\n    max_sum_including_last = max(arr[0], arr[1])\n    for i in range(3, n):\n        new_max_sum_excluding_last = max(max_sum, max_sum_including_last + arr[i])\n        max_sum = max(max_sum_excluding_last, max_sum_including_last + arr[i] - arr[i-2])\n        max_sum_including_last = max(max_sum_including_last + arr[i], max_sum_excluding_last + arr[i])\n    return max_sum\n# Test the code\narr = [1, 2, 3, 4, -10, 5, 8, -100, 200, 100]\nn = len(arr)\nprint(max_sum_of_three_consecutive(arr, n)) # Output: 210\n\n\narr = [1, 2, 3, -10, -5, 6, 100, -70, 50]\nn = len(arr)\n",
        "generated_testcode": "assert max_sum_of_three_consecutive(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=6) == 25\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sorted_dict = {}\n    for key in sorted(dict1.keys()):\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\n#Example usage:\ndict1 = {'a': 10, 'b': 3, 'c': 5, 'd': 15, 'e': 7}\nprint(sorted_dict(dict1)) #{'a': 10, 'b': 3, 'c': 5, 'd': 15, 'e': 7}\n\n\n#Write a function to sort a dictionary by its values.\ndef sort_dict_by_values(dict1):\n    return dict(sorted(dict1.items(), key=lambda x: x[1])\n\n#Example usage:\ndict1 = {'a': 10, 'b': 3, 'c': 5, 'd': 15, 'e': 7}\nprint(sort_dict_by_values(dict1)) #{'b': 3, 'c': 5, 'e': 7, 'a': 10, 'd': 15}\n\n#Write a function to reverse a dictionary.\ndef reverse_dict(dict1):\n    return {v: k for k, v in dict1.items()}\n#Example usage:\ndict1 = {'a': 10, 'b': 3, 'c': 5, 'd': 15, 'e': 7}\nprint(reverse_dict(dict1))",
        "generated_testcode": "assert sorted_dict(dict1) == {'apple': 1, 'banana': 2, 'orange': 3, 'pear': 4}\n\n\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = 0\n    for i in range(1, n+1):\n        if (y % i == 0):\n            if (y//i) % x == 0:\n                max_val = i\n    return max_val ",
        "generated_testcode": "assert find_max_val(10, 3, 4) == 2\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n%2!=0:\n        n=n-1  #if given number is odd then decrementing it by 1 to make it even\n    sum=0\n    count=0\n    for i in range(2,n+1,2) : \n        sum+=i\n        count+=1\n    return sum/count\n    \n#testing the function\nprint(average_Even(10))   #average of even numbers till 10\nprint(average_Even(11))   #average of even numbers till 12\nprint(average_Even(12))   #average of even numbers till 12\nprint(average_Even(13))   #average of even numbers till 14 ",
        "generated_testcode": "assert average_Even(2) == 2.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        return num_list[1:] + [num_list[0]]\n\n# Example usage:\nnum_list = [1, 2, 3, 4, 5]\nprint(move_last(num_list))  # Output: [2, 3, 4, 5, 1] ",
        "generated_testcode": "assert move_last(num_list) == [2, 3, 4, 5, 1]\n\n# Test case 1:\nnum_list = [1, 2, 3, 4, 5]\nmove_last(num_list)\n\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\nstring = input(\"Enter a string: \")\nchar = input(\"Enter a character to be counted: \")\nprint(f\"The character {char} occurs {count_char(string,char)} times in the string {string}\") ",
        "generated_testcode": "assert count_char(string,char) == expected_output\n\n# Example:\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in string:\n        if i in vowels:\n            count += 1\n    return count\n\nstring = input(\"Enter a string: \")\nvowels = \"aeiouAEIOU\"\nprint(\"The number of vowels in the string are:\", Check_Vow(string, vowels) ",
        "generated_testcode": "assert Check_Vow(\u201chello world\u201d, \u201caeiou\u201d) == 3\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(char) != 1: \n        return \"Invalid input\"\n    else: \n        new_string = \"\"\n        for i in string: \n            if i not in new_string: \n                new_string += i\n            elif i == char: \n                continue\n            else: \n                new_string += i\n    return new_string \n  \n# Test the function with an example \nprint(replace(\"aabbbccccdddde\", \"b\")) # Output: \"aabcde\" ",
        "generated_testcode": "assert replace(string=\"hello world\", char=\"l\") == \"helo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    regex = \"^([01]?\\d\\d?\\d|2[0-4]\\d|25[0-5])(\\.([01]?\\d\\d?\\d|2[0-4]\\d|25[0-5]){3}$\"\n    if re.match(regex,Ip): \n        return True\n    else: \n        return False\n\n# Importing the required module \nimport re \n# Taking input from user \nip = input(\"Enter an IP address: \")\n# Calling the function and printing whether the IP is valid or not \nif check_IP(ip): \n    print(\"Valid IP address\") \nelse: \n    print(\"Invalid IP address\") ",
        "generated_testcode": "assert check_IP(192.168.0.1.1) == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 1:\n        return True\n    for i in range(len(nums)-1):\n        if nums[i] <= nums[i+1]:\n            return False\n    return True\n\n# Test cases\nprint(decreasing_trend([5,4,3,2,1])) # True\nprint(decreasing_trend([5,4,3,2,2])) # False\nprint(decreasing_trend([1,2,3,4,5])) # False\nprint(decreasing_trend([1,2,2,3,4])) # False\nprint(decreasing_trend([1])) # True ",
        "generated_testcode": "assert decreasing_trend(1, 2, 3, 4, 5) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    pos = 0\n    while n: \n        pos += 1\n        n >>= 1\n    return pos-1\n\ndef set_Right_most_Unset_Bit(n): \n    return (1 << get_Pos_Of_Right_most_Set_Bit(n)) | n ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(15) == 3\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 >= num2 and num1 >= num3:\n        return num1\n    elif num2 >= num1 and num2 >= num3:\n        return num2\n    else:\n        return num3\n\n#test the function\nprint(max_of_three(2, 4, 5))   # Output: 5\nprint(max_of_three(7, 10, 9)) # Output: 10\nprint(max_of_three(12, 8, 23))# Output: 23 ",
        "generated_testcode": "assert max_of_three(5, 10, 7) == 10\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for digit in list:\n        result = result*10 + digit\n    return result\n#Example:\n#Input: [4,5,6,8,9]\n#Output: 45689\n#Input: [9,8,7,5,2]\n#Output: 9852 ",
        "generated_testcode": "assert convert(list(1,2,3,4,5)) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = string.split()\n    new_string = \" \".join(list(set(words))[::-1])\n    return new_string[::-1]\n\n\n# Test the function with a sample string\nstring = \"hello world world world hello python python python\"\nprint(remove_duplicate(string)) \n\n# Output: \"python world hello\" ",
        "generated_testcode": "assert remove_duplicate(string) == \"this is a sample string\"\n\n# Test case 1:\nstring = \"this is a sample string\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x+y in range(m,n):\n        return 20\n    else:\n        return x+y\n    \n#test the function\nprint(sum_nums(1,3,5,10)) #should return 4\nprint(sum_nums(5,5,10,10)) #should return 20\nprint(sum_nums(7,3,1,10)) #should return 10 ",
        "generated_testcode": "assert sum_nums(5, 6, 10, 15) == 11\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[\\W_]+')\n    return pattern.sub('', text1)\n\n# Testing the function with some examples\ntext = \"Hello! World. How are you doing today?\"\nprint(remove_extra_char(text)) # Output: \"HelloWorldHowareyoudoingtoday\"\ntext = \"Python is amazing. isn't it?\"\nprint(remove_extra_char(text)) # Output: \"Pythonisamazingisntit\"\ntext = \"We should learn more #programming! Don't you think?\"\nprint(remove_extra_char(text)) # Output: \"WeshouldlearnmoreprogrammingDontyouthink\" ",
        "generated_testcode": "assert remove_extra_char(text1) == \"This is a string with only alphanumeric characters\"\n\n\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        print(\"Valid Triangle\")\n    else:\n        print(\"Invalid Triangle\")\n        \na = int(input(\"Enter the length of first side of the triangle : \"))\nb = int(input(\"Enter the length of second side of the triangle : \"))\nc = int(input(\"Enter the length of third side of the triangle : \"))\n\nvalidity_triangle(a,b,c)\n\n",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return str1.replace(\" \", \"\")\n\n# test the function with sample input\nprint(remove_spaces(\"Hello world\"))\nprint(remove_spaces(\"This is a string with spaces\"))\nprint(remove_spaces(\" Spaces at the beginning and end \"))\n\n\n# Output:\n# \"Helloworld\"\n# \"Thisisastringwithspaces\"\n# \"Spacesatthebeginningandend\" ",
        "generated_testcode": "assert remove_spaces(str1) == \"HelloWorld\"\n\n# Test case 1:\nstr1 = \"Hello World\"\nprint(remove_spaces(str1)) # Output: \"HelloWorld\"\n\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if key in ditionary:\n        return ditionary[key]\n    else:\n        return None\n\n#Test the function with a dictionary\nd = {'a': 10, 'b': 20, 'c': 30}\nprint(access_key(d,'a')) # Output: 10\nprint(access_key(d,'f')) # Output: None ",
        "generated_testcode": "assert access_key(ditionary={'a':1,'b':2,'c':3},key='b') == 2\n\n\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]:\n            continue\n        else:\n            return False\n    return True\n\n#test the function\nprint(increasing_trend([1,2,3,4,5,6,7,8])) # True\nprint(increasing_trend([1,2,3,4,5,6,8,7])) # False ",
        "generated_testcode": "assert increasing_trend(1, 2, 3, 4, 5, 6, 7, 8) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n<=1:\n        return None\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return i\n    return n\nprint(smallest_Divisor(15))#Output:3\nprint(smallest_Divisor(12))#Output:2\nprint(smallest_Divisor(11))#Output:11\nprint(smallest_Divisor(17))#Output:17\nprint(smallest_Divisor(100))#Output:2\nprint(smallest_Divisor(37))#Output:37 ",
        "generated_testcode": "assert smallest_Divisor(15) == 3\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x*y, nums1, nums2))\n\n\nnums1 = [1,2,3,4]\nnums2 = [5,6,7]\nprint(mul_list(nums1,nums2)) # Output: [5, 12, 28] ",
        "generated_testcode": "assert mul_list([1,2,3], [4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(int(n**(0.5)+1)//1):\n        j = n - i**2\n        if (j >= 0):\n            if (int(j**0.5)**2 == j):\n                return True\n    return False\n\n#test the function\nn = 14\nif (sum_Square(n)) :\n    print(n, \"can be represented as sum of two squares\")\nelse :\n    print(n, \"cannot be represented as sum of two squares\")\n\n\n#output:14 can be represented as sum of two squares ",
        "generated_testcode": "assert sum_Square(5) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in str: \n        if i == x: \n            count += 1\n    return count \n\nstr = input(\"Enter a string: \")\nx = input(\"Enter a character to count its occurrence: \")\nprint(count_Char(str,x)) ",
        "generated_testcode": "assert count_Char(input(\"Enter a string: \"), input(\"Enter a character: \")) == int(input(\"Enter the expected count: \"))\n\n\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    primes = [] \n    for num in range(2, n+1): \n        for i in range(2, num): \n            if num%i == 0: \n                break\n        else: \n            primes.append(num) \n    return sum(primes) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17 # Sum of primes between 1 to 10 is 17 (2+3+5+7)\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dict1 = {}\n    for element in test_tup:\n        if element not in dict1:\n            dict1[element] = 1\n        else:\n            dict1[element] += 1\n    return dict1\n\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5, 6, 2, 3, 1, 2, 2, 3, 4, 5, 7, 8, 2, 3, 4, 8, 8, 8, 8, 8, 9)\nprint(freq_element(test_tup)) ",
        "generated_testcode": "assert freq_element(('hello world') == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if(b == 0):\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# Example usage:\nprint(recur_gcd(24, 36)) # Output: 12\nprint(recur_gcd(9, 12)) # Output: 3\nprint(recur_gcd(54, 24)) # Output: 6 ",
        "generated_testcode": "assert recur_gcd(12, 8) == 4\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    return math.sqrt(a**2 + b**2)\n\n# Test the function with the following code:\n#print(len_complex(3, 4)) # Should print 5.0\n#print(len_complex(5, 12)) # Should print 13.0\n#print(len_complex(0, 1)) # Should print 1.0 ",
        "generated_testcode": "assert len_complex(3,4) == 5\n\n# Write a function to calculate the distance between two points in the Cartesian plane.\ndef distance(x1,y1,x2,y2):\n    pass\n\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if arr[0] == 0:\n        return -1\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = min(jumps[j] + 1 for j in range(i) if i <= j + arr[j] < n)\n        if jumps[i] == float('inf'):\n            return -1\n    return jumps[n-1]\n\n\narr = [1, 3, 5, 8, 9, 2, 6, 2, 6, 8, 9, 2, 6]\nn = len(arr)\nprint(min_jumps(arr, n)) ",
        "generated_testcode": "assert min_jumps(arr=[2, 3, 1, 1, 1, 4], n=4) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of numbers, return a list where each element is the product of the two adjacent numbers in the original list.\n    For example: [1, 2, 3, 4, 5] -> [2, 6, 12]\n    \"\"\"\n    return [nums[i] * nums[i + 1] for i in range(len(nums) - 1)]\n\n\n# Test cases\nprint(mul_consecutive_nums([1, 2, 3, 4, 5]))  # Output: [2, 6, 12]\nprint(mul_consecutive_nums([8, 6, 3, 4, 2, 5, 20]))  # Output: [48, 24, 20, 100]\nprint(mul_consecutive_nums([-1, -2, 0, 3, 4, -1]))  # Output: [2, 0, -12, -4] ",
        "generated_testcode": "assert mul_consecutive_nums(list(range(1, 6)) == [1*2, 2*3, 3*4, 4*5]\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = {}\n    for a, b in test_list:\n        if b in result:\n            result[b].append(a)\n        else:\n            result[b] = [a]\n    return result\n\ntest_list = [('apple', 'B'), ('banana', 'A'), ('cherry', 'B'), ('dates', 'C'), ('eggplant', 'A'), ('fig', 'C')]\nprint(group_element(test_list)) ",
        "generated_testcode": "assert group_element([(1, 2), (2, 3), (3, 2), (4, 3), (5, 1), (6, 2)] == {1: [5], 2: [1, 6], 3: [2, 3]} ",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if N < 0: \n        return \"Invalid input\"\n    elif N == 0: \n        return 1\n    else: \n        N = N % 10000000000000\n        a = 1\n        b = 1\n        for i in range(2, N + 1): \n            a *= i\n            b *= i\n            a %= 10000000000000\n            b %= 1000000000000\n        return b\n\n# Test the function\nprint(last_Two_Digits(24)) # Output: 56\nprint(last_Two_Digits(5)) # Output: 20 ",
        "generated_testcode": "assert last_Two_Digits(5) == 120\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    return re.sub(' +', ' ', text1)\n\ntext1 = \"This    is     a    string    with extra    spaces.\"\nprint(remove_multiple_spaces(text1))\n\n\n#Output: 'This is a string with extra spaces.' ",
        "generated_testcode": "assert remove_multiple_spaces(text1) == \"This is a string with    multiple spaces.\"\n\n\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_values = set()\n    for values in test_dict.values():\n        if isinstance(values, list):\n            unique_values.update(values)\n        else:\n            unique_values.add(values)\n    return list(unique_values)\n\n\n# Test case\ntest_dict = {\n    \"a\": [1, 2, 3],\n    \"b\": 2,\n    \"c\": [3, 4, 5, 2],\n    \"d\": [1, 2, 6],\n    \"e\": [4, 5, 7]\n}\n\nprint(extract_unique(test_dict)) # Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert extract_unique(\n    {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3, \"e\": 2, \"f\": 4, \"g\": 1, \"h\": 3, \"i\": 5}\n) == {1, 2, 3, 4, 5}\n\n# The output should be {1, 2, 3, 4, 5} ",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n\n# Example usage:\ntup1 = (4, 5, 6, 7, 8, 9)\ntup2 = (1, 2, 3, 2, 1)\nprint(check_greater(tup1, tup2)) # True\ntup3 = (1, 2, 3, 4, 5)\nprint(check_greater(tup2, tup3)) # False ",
        "generated_testcode": "assert check_greater(('abc', (1, 2, 3, 4, 5)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # List to store the zipped tuples\n    zipped_list = []\n    # Find the minimum length of the two lists to avoid IndexError\n    minimum_length = min(len(list1), len(list2))\n    # Loop through the lists and create tuples of elements at the same index\n    for i in range(minimum_length):\n        zipped_list.append((list1[i], list2[i]))\n    # Return the zipped list\n    return zipped_list\n\n# Test the function with sample inputs\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist2 = [\"a\", \"b\", \"c\"]\nprint(zip_list(list1, list2)) # Output: [(1, 'a'), (2, 'b'), (3, 'c')] ",
        "generated_testcode": "assert zip_list([\"a\", \"b\", \"c\"], [1, 2, 3]) == [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n\n\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x%2==0, array_nums))\n\n\n# Test the function\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(count_even(array_nums)) # Output: 5\n\n\n# Using lambda function to find square of each element of the list\nsquares = list(map(lambda x: x**2, [1, 2, 3, 4, 5])\nprint(squares) # Output: [1, 4, 9, 16, 25] ",
        "generated_testcode": "assert count_even([]), 0\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return(sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1]) )\n\n# test the function with a sample dictionary\ntest_dict = {(4, 2): 8, (1, 3): 3, (5, 6): 9, (5, 5): 10, (2, 4): 6, (1, 1): 2}\nprint(sort_dict_item(test_dict)) ",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str1) \n    if str1 == str2: \n        return 0\n    count = 0\n    for i in range(n) : \n        if str1[i] != str2[i] : \n            count += 1\n    return count//2\n\n# Driver code \nif __name__ == \"__main__\" : \n    str1 = input(\"Enter the first binary string: \")\n    str2 = input(\"Enter the second binary string: \")\n    print(\"Minimum number of swaps required: \", min_Swaps(str1,str2)) ",
        "generated_testcode": "assert min_Swaps(10101,00011) == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in li:\n        if min <= num <= max:\n            count += 1\n    return count\n\n# test the function with sample inputs\nprint(count_range_in_list([1, 3, 5, 7, 9, 12, 15, 18, 21], 6, 14)) # should print 3\nprint(count_range_in_list([10, 20, 30, 40, 50, 60, 70], 25, 45)) # should print 2\nprint(count_range_in_list([1, 5, 10, 15, 20, 25, 30], 10, 20)) # should print 3 ",
        "generated_testcode": "assert count_range_in_list(range(10), 3, 7) == 5\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return -1\n    if len(arr) == 1:\n        return 0\n    left_sum = 0\n    right_sum = sum(arr)\n    for i in range(len(arr)):\n        right_sum -= arr[i]\n        if left_sum == right_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n\n# Test\narr = [-7, 1, 5, 2, -4, 3, -9]\nprint(equilibrium_index(arr)) # Output: 3\n\narr = [1, -2, 3, 4, -1, 5]\nprint(equilibrium_index(arr)) # Output: 1\narr = [1, 2, 3, 4, 5]\nprint(equilibrium_index(arr)) # Output: -1 ",
        "generated_testcode": "assert equilibrium_index(arr=[-1, 2, 3, -4, 5, 6, 7, -8, 9]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "           arr, indexes):\n    while i > 0 and arr[i - 1] > key:\n        arr[i] = arr[i - 1]\n        indexes[i] = indexes[i - 1]\n        i -= 1\n    arr[i] = key\n    indexes[i] = n\n \ndef min_elements_to_remove(arr, n, k):\n    arr.sort()\n    indexes = [i for i in range(n)]\n    i = 0\n    for i in range(1, n):\n        find_ind(arr[i], i, arr, indexes)\n \n    count = 0\n    min_count = float('inf')\n    for i in range(n):\n        if arr[i] - arr[0] <= k:\n            count += 1\n        else:\n            min_count = min(min_count, count)\n            count = 0\n \n    return min_count\n \n# Driver code\narr = [4, 10, 12, 7, 15, 18, 21, 23]\nk = 10\nn = len(arr)\nprint(min_elements_to_remove(arr, n, k)) ",
        "generated_testcode": "assert find_ind(5, [1, 3, 7, 9, 11, 15, 21], 6) == 1\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x in d.keys():\n        print(\"Key is present in dictionary.\")\n    else:\n        print(\"Key is not present in dictionary.\")\n\n#Example\nd = {1:'apple', 2:'ball', 'name':'John', 'age':20}\nis_key_present(d,2)\nis_key_present(d,'name')\nis_key_present(d,'color') ",
        "generated_testcode": "assert is_key_present(d, 'apple') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\n# Test the function with n = 5\nprint(harmonic_sum(5)) # Output: 2.283333333333333333334\n\n\n# Write a function to calculate the geometric sum of n-1\ndef geometric_sum(n):\n    total = 1/2\n    for i in range(2, n):\n        total += 1/(2*i)\n    return total\n\n# Test the function with n = 5\nprint(geometric_sum(5)) # Output: 0.9375\n\n# Write a function to calculate the harmonic mean of a list of numbers\ndef harmonic_mean(lst):\n    total = sum(1/num for num in lst)\n    return len(lst)/total\n\n# Test the function with a list of numbers\nlst = [1, 2, 3, 4, 5]\nprint(harmonic_mean(lst)) # Output: 2.1897810218978102201\n\n# Write a function to calculate the geometric mean of a list of numbers\ndef geometric_mean(lst):\n    total = 1\n    for num in lst:\n        total *= num\n    return total ** (1/len(lst))\n\n# Test the function with the same list as before\nprint(geometric_",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: (len(x), x)\n                 )\n    return list1\n\n#Example:\n# Input: [[1, 2, 3], [4, 5], [3, 4, 6, 7], [1, 3, 2], [4], [6, 7, 8, 9]]\n# Output: [[4], [1, 3, 2], [1, 2, 3], [4, 5], [3, 4, 6, 7], [6, 7, 8, 9]] ",
        "generated_testcode": "assert sort_sublists([]), []\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    arr1.sort()\n    arr2.sort()\n    i = j = 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        else: \n            return False\n    if i == m: \n        return True\n    return False\n\n# Driver code \narr1 = [11, 1, 6, 2, 5, 10] \narr2 = [5, 1, 2, 11] \nm = len(arr1) \nn = len(arr2) \nif is_subset(arr1, m, arr2, n): \n    print(\"arr2[] is subset of arr1[]\") \nelse: \n    print(\"arr2[] is not subset of arr1[]\") \n ",
        "generated_testcode": "assert is_subset(arr1=[1, 2, 3, 4], m=3, arr2=[1, 2, 4, 3, 5, 6], n=4) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in range(1, n+1):  \n        count += sum(1 for j in bin(i)[2:] if j=='1') \n    return count \n\n#Example:\n# Input : n = 5\n# Output : 5 ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    li = list(string.split()) \n    return li \n\n# Sample Test case\nstring = \"Python is a programming language\"\nprint(Convert(string) ) # Output: ['Python', 'is', 'a', 'programming', 'language'] ",
        "generated_testcode": "assert Convert(\u201chello\u201d) == [\u2018h\u2019, \u2018e\u2019, \u2018l\u2019, \u2018l\u2019, \u2018o\u2019]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_keys = []\n    counts = {}\n    for item in test_list:\n        if item[1] not in counts:\n            counts[item[1]] = 1\n            unique_keys.append(item[0])\n        else:\n            counts[item[1]] += 1\n    return len(unique_keys)\n\n\n# Test the function with a sample tuple\ntest_list = (('apple', 'fruit'), ('banana', 'fruit'), ('orange', 'fruit'), ('carrot', 'vegetable'), ('beetroot', 'vegetable'), ('carrot', 'vegetable'))\nprint(get_unique(test_list))  # Output: 2 ",
        "generated_testcode": "assert get_unique((\"apple\", \"banana\", \"cherry\", \"apple\", \"date\", \"cherry\") == {\"apple\": 2, \"banana\": 1, \"cherry\": 2, \"date\": 1}\n\n\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (test_tup[0],test_tup[-1])\n\n\n#test the function with a sample tuple\ntest_tup = ('python', 'linux', 'django', 'fun', 'cool')\nprint(front_and_rear(test_tup)) # output: ('python', 'cool') ",
        "generated_testcode": "assert front_and_rear(('apple', 'banana', 'cherry', 'date', 'elderberry') == ('apple', 'elderberry')\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n=str(n)\n    even_product=1\n    odd_product=1\n    for i in range(0,len(n),2):\n        even_product*=int(n[i])\n    for i in range(1,len(n),2):\n        odd_product*=int(n[i])\n    if even_product==odd_product:\n        return True\n    else:\n        return False\nn=int(input(\"Enter a number: \"))\nprint(product_Equal(n)) ",
        "generated_testcode": "assert product_Equal(123456) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of lists as input and removes duplicates from it.\n    \"\"\"\n    list_set = set(tuple(x) for x in list1)\n    return [list(x) for x in list_set]\n\n\n# Testing the function\nlist1 = [[1, 2, 3], [2, 3, 4], [1, 2, 3], [5, 6, 7], [3, 4, 5], [5, 6, 7], [8, 9, 10]]\nprint(remove_duplicate(list1) # Output: [[1, 2, 3], [2, 3, 4], [5, 6, 7], [8, 9, 10]]\n\n\n# Explanation:\n# We first convert each sublist into a tuple using the tuple() function, then create a set of these tuples using set(), and then convert them back into lists using list()",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\", \"kiwi\"] == [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in test_tup:\n        if type(i)!= str and type(i) != int and type(i) != float and type(i) != bool:\n            return False\n    return True\n\n#Test the function\nprint(check_valid((\"This is a string\")) #False\nprint(check_valid((1,2,3,4,5)) #True\nprint(check_valid((\"Hello\", True, 3.5, 4, \"World\")) #True\nprint(check_valid((1,2,3,\"hello\",[],4)) #False ",
        "generated_testcode": "assert check_valid((\"Hello\", 2, 3, 4) == False\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    # Initialize a dictionary to store the count of each prime factor  \n    # in the number. The key is the prime factor and the value is its count. \n    factor_count = {}\n    # Loop through all the prime factors of the number\n    for i in range(2, n + 1):\n        if n % i == 0:\n            # Count the number of times i divides the number\n            cnt = 0\n            while n % i == 0:\n                n //= i\n                cnt += 1\n            factor_count[i] = cnt\n    # Loop through the dictionary to find the total number of distinct prime factors\n    for p in factor_count:\n        count += 1\n    return count\n\n# test the function\nprint(count_Fac(36)) ",
        "generated_testcode": "assert count_Fac(12) == 2 # Testing for n=12, output should be 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = tuple(map(int, test_str.split()))\n    return result\n\n# test the function\nprint(str_to_tuple(\"1 2 3 4 5 6 7 8 9\")) # (1, 2, 3, 4, 5, 6, 7, 8, 9)\n\n\n# Write a function to check if a string is a palindrome\ndef is_palindrome(test_str):\n    if test_str == test_str[::-1]:\n        return True\n    else:\n        return False\n\n# test the function\nprint(is_palindrome(\"racecar\")) # True\nprint(is_palindrome(\"hello\")) # False\n\n\n# Write a function to check if a string is an an anagram of another string\ndef is_anagram(str1, str2):\n    if sorted(str1) == sorted(str2):\n        return True\n    else:\n        return False\n\n# test the function\nprint(is_anagram(\"cinema\", \"iceman\")) # True\nprint(is_anagram(\"hello\", \"world\")) # False\n\n\n# Write a function to find the longest word in a string\ndef longest_word(test_str):\n    words = test_str.split()\n    longest = \"\"\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n\n# test the function\nprint(longest_word(\"The",
        "generated_testcode": "assert str_to_tuple(test_str) == (1, 2, 3, 4, 5)\n\n\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # a is the length of one side of the rombus\n    # the perimeter is the sum of all four sides, and there are four equal sides in a rombus\n    perimeter = 4 * a\n    return perimeter\n\n# Test the function\nprint(rombus_perimeter(5) == 20) # True\nprint(rombus_perimeter(10) == 40) # True ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n\n# Write a function to find the area of a rombus.\ndef rombus_area(d):\n    pass\n\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(data)\n    mean = sum(data) / n\n    deviations = [(x - mean) ** 2 for x in data]\n    variance = sum(deviations) / (n - 1)\n    standard_deviation = variance ** 0.5\n    return standard_deviation\n\n# Test the function with some sample data\nsample_data = [2, 4, 6, 8, 10, 12, 14]\nprint(sd_calc(sample_data))  # Output: 4.0",
        "generated_testcode": "assert sd_calc(data=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2.0, \"Test 1 failed\"\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list1[::2]\n\n# Test the function with an example list\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(alternate_elements(lst))  # Output: [1, 3, 5, 7, 9]\n\n\n\n# Write a function to extract unique elements from a list.\ndef unique_elements(list1):\n    return list(set(list1))\n\n# Test the function with an example list\nlst = [1, 2, 3, 4, 3, 5, 2, 6, 7, 1, 8, 9, 10, 1]\nprint(unique_elements(lst))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n# Write a function to check if a given number is prime or not.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n# Test the function with some examples\nprint(is_prime(7))  # Output: True\nprint(is_prime(15))  # Output: False\n\n\n# Write a function to reverse a list.\ndef reverse_list(list1):\n    return list1[::-1",
        "generated_testcode": "assert alternate_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]) == [\"apple\", \"date\", \"fig\"]\n\n\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = \"ab*\"\n    import re\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abbb\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"ac\")) # False ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function accepts a tuple and a dictionary as input parameters and returns a tuple with the dictionary added to the end of it.\n    \"\"\"\n    return test_tup + (test_dict,)\n\n\n# Test the function with sample inputs\ntest_tup = (\"apple\", \"banana\", \"cherry\")\ntest_dict = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\nprint(add_dict_to_tuple(test_tup, test_dict)) # Output: ('apple', 'banana', 'cherry', {'name': 'John', 'age': 30, 'city': 'New York'}) ",
        "generated_testcode": "assert add_dict_to_tuple((\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"}) == (\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"})\n\n\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    def dfs(cost, N, i, j, dp): \n        if i < 0 or i >= N or j < 0 or j >= N: \n            return 0\n        if dp[i][j] != -1: \n            return dp[i][j]\n        dp[i][j] = cost[i][j] \n        for k in range(N): \n            dp[i][j] = max(dp[i][j], cost[i][j] + dfs(cost, N, i-1, k, dp) + dfs(cost, k, j-1, dp)) \n            dp[i][j] = max(dp[i][j], cost[i][j] + dfs(cost, i+1, k, dp) + dfs(cost, k, j+1, dp)) \n            dp[i][j] = max(dp[i][j], cost[i][j] + dfs(cost, i-1, k, dp) + dfs(cost, k, j+1, dp)) \n            dp[i][j] = max(dp[i][j], cost[i][j] + dfs(cost, i+1, k, dp) + dfs(cost, k, j-1, dp)) \n        return dp[i][j] \n\n    dp = [[-1 for _ in range(N)] for _ in range(",
        "generated_testcode": "assert maxAverageOfPath(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n) == 12.666666666666666666667\n\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    filtered_data = {}\n    for name in students:\n        if students[name]['height'] >= h and students[name]['width'] >= w:\n            filtered_data[name] = students[name]\n    return filtered_data\n\n#Testing the function\nstudents = {\n    'Alice' : {'height': 160, 'weight': 50},\n    'Bob' : {'height': 170, 'weight': 60},\n    'Charlie' : {'height': 180, 'weight': 70},\n    'David' : {'height': 165, 'weight': 45},\n    'Eva' : {'height': 175, 'weight': 55}\n}\n\nfiltered_students = filter_data(students, 170, 50)\nprint(filtered_students) # Output: {'Bob': {'height': 170, 'weight': 60}, 'Charlie': {'height': 180, 'weight': 70}} ",
        "generated_testcode": "assert filter_data(\n    {\n        \"Alice\": {\"height\": 160, \"weight\": 50},\n        \"Bob\": {\"height\": 170, \"weight\": 60},\n        \"Charlie\": {\"height\": 180, \"weight\": 70},\n        \"David\": {\"height\": 165, \"weight\": 45},\n        \"Eva\": {\"height\": 175, \"weight\": 55}\n    },\n    165,\n    50\n) == {\"Alice\": {\"height\": 160, \"weight\": 50}, \"David\": {\"height\": 165, \"weight\": 45}}\n\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in nums1:\n        if i in nums2:\n            count += 1\n    return count\n\n# testing the function with example lists\nnums1 = [1,2,3,4,5,6]\nnums2 = [3,4,7,8,9,10]\nprint(count_same_pair(nums1, nums2)) # output: 2 ",
        "generated_testcode": "assert count_same_pair([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\", \"apple\"]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    base_to_power = base ** power\n    sum_of_digits = 0\n    while base_to_power != 0:\n        digit = base_to_power % 10\n        sum_of_digits += digit\n        base_to_power //= 10\n    return sum_of_digits\n\n# Example usage:\nprint(power_base_sum(2, 15)) # Output: 22\nprint(power_base_sum(10, 3)) # Output: 19\nprint(power_base_sum(5, 8)) # Output: 26\nprint(power_base_sum(17, 12)) # Output: 22\nprint(power_base_sum(12, 0)) # Output: 0 ",
        "generated_testcode": "assert power_base_sum(2, 10) == 1024\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\\"([^\\\"]*)\\\"\"\n    matches = re.findall(pattern, text1)\n    return matches\n\n# Test the function\ntext1 = 'The quick brown fox said \"hello\" to the lazy dog.'\nprint(extract_quotation(text1) ) # Output: ['hello']\n\n\ntext2 = 'He said \"I like Python\" and she said \"I like JS\".'\nprint(extract_quotation(text2) ) # Output: ['I like Python', 'I like JS']\n\n\ntext3 = 'He said \"I like Python\" and she said \"I like JS\" and then they said \"I like both\".'\nprint(extract_quotation(text3) ) # Output: ['I like Python', 'I like JS', 'I like both'] ",
        "generated_testcode": "assert extract_quotation(text1) == \"Hello, World!\"\n\n# Test case 1:\ntext1 = 'He said \"Hello, World!\" to me.'\nprint(extract_quotation(text1)) # Output: \"Hello, World!\"\n\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    n = len(test_tup)\n    for i in range(n-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n\n# Test the function with a sample tuple\ntest_tup = (1, 2, 3, 4, 5, 6, 7)\nprint(multiply_elements(test_tup)) # Output: (2, 6, 12, 20, 35) ",
        "generated_testcode": "assert multiply_elements(()) == ()\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub('[^a-zA-Z0-9]+', '', S)\n\n# Test case\nS = \"Hello, World! 123\"\nprint(remove_char(S)) # Output: \"HelloWorld123\" ",
        "generated_testcode": "assert remove_char(S) == \"HelloWorld123\"\n\n# Test case 1:\nS = \"Hello World! 123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n\nlst1 = [1,2,3,4,5]\nlst2 = [4,5,6,7,8]\nprint(sum_list(lst1,lst2))\n\n\n#output: [5,7,10,11]\n\n\n#using numpy library\nimport numpy as np\n\ndef sum_list(lst1,lst2):\n    return np.add(lst1,lst2)\n\nlst1 = [1,2,3,4,5]\nlst2 = [4,5,6,7,8]\nprint(sum_list(lst1,lst2))\n\n#output: [5,7,10,11]\n\n\n#using map function\ndef sum_list(lst1,lst2):\n    return list(map(lambda x,y: x+y, lst1,lst2))\n\nlst1 = [1,2,3,4,5]\nlst2 = [4,5,6,7,8]\nprint(sum_list(lst1,lst2))\n#output: [5,7,10,11]\n\n\n#using list comprehension\ndef sum_list(lst1,lst2):\n    return [x+y for x,y in zip(lst1,lst2)]\nlst1 = [1,2,3,4,5",
        "generated_testcode": "assert sum_list(lst1=[1,2,3], lst2=[4,5,6]) == [5,7,9]\n\n\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x+y,nums1,nums2))\n\n\nnum1 = [1,2,3,4]\nnum2 = [4,5,6]\nprint(add_list(num1,num2)) #Output [5, 7, 10]\n\n\n# Write a function to find the maximum of a list of numbers using lambda and map functions.\ndef find_max(numbers):\n    return max(numbers)\n\nlst = [1, 3, 5, 7, 9, 2, 8]\nprint(find_max(lst)) #Output 9\n\n\n# Write a function to double each element of a list using lambda and map functions.\ndef double_list(numbers):\n    return list(map(lambda x:x*2, numbers))\n\nlst = [1, 3, 5, 7, 9]\nprint(double_list(lst)) #Output [2, 6, 10, 14, 18]\n\n# Write a function to check if all elements in a list are greater than a given number using lambda and map functions.\ndef check_greater_than(numbers, n):\n    return all(map(lambda x:x > n, numbers))\n\nlst = [10, 20, 30, 40]\nn = 5\nprint(check_greater_than(lst, n)) #Output True\n\n# Write a function to extract a specific key from",
        "generated_testcode": "assert add_list(list(range(1,5), list(range(4,7)) == [1, 5, 7, 9]\n\n\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given a list of integers, removes consecutive duplicates in the list and returns the new list.\n    \"\"\"\n    new_list = []\n    prev_num = None\n    for num in nums:\n        if num != prev_num:\n            new_list.append(num)\n            prev_num = num\n    return new_list\n\n# Test the function with some examples\nprint(consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6, 7, 7, 7, 7]))  # Output: [1, 2, 3, 4, 5, 6, 7]\nprint(consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5]))  # Output: [1, 2, 3, 4, 5]\nprint(consecutive_duplicates([1, 1, 1, 1, 1, 1, 2, 3, 3, 4, 4, 4, 4, 4, 4]))  # Output: [1, 2, 3, 4]\nprint(consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 5])) ",
        "generated_testcode": "assert consecutive_duplicates([\"a\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"e\"]), [\"a\", \"b\", \"c\", \"d\", \"e\"]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    return pi*(r+r)*h\n\n#testing the function\nprint(lateralsurface_cone(5,6)) #189.1831\nprint(lateralsurface_cone(7,10)) #392.6991\nprint(lateralsurface_cone(2,3)) #25.1327\n\n\n#testing with different values of pi\nprint(lateralsurface_cone(5,6,3.14)) #198.721\nprint(lateralsurface_cone(7,10,22/7)) #247.164\nprint(lateralsurface_cone(2,3,3.14)) #18.8496\n\n",
        "generated_testcode": "assert lateralsurface_cone(3, 5) == 29.289370185853405394, \"Test 1 failed\"\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return text.replace(' ',':').replace(',',':').replace('.',':')\n\n\n#Test the function with some examples\nprint(replace_specialchar('Hello, this is a sentence with spaces.'))\nprint(replace_specialchar('Hello,this.is.a.sentence.with.commas.'))\nprint(replace_specialchar('Hello, this is a sentence with all three: spaces, dots and commas.')) ",
        "generated_testcode": "assert replace_specialchar(input_string) == expected_output\n\n# Replace the input_string and expected_output with appropriate values to test the function. ",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    start = 0\n    end = len(A) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            result = mid\n            end = mid - 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return result\n\n# Test cases\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_first_occurrence(A, 4)) # Output: 2\n\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_first_occurrence(A, 5)) # Output: 4\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_first_occurrence(A, 9)) # Output: 7\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_first_occurrence(A, 1)) # Output:",
        "generated_testcode": "assert find_first_occurrence(A=[1, 2, 3, 4, 4, 4, 4, 5, 6, 7], x=4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    mod = 10**9 + 7\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product = (product * arr[j]) % mod\n            res = (res + product) % mod\n    return res\n    \n    # Test the function\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr, n))\n# Output: 573\n\narr = [3, 2, 4, 1]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr, n))\n# Output: 488\n\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr, n))\n# Output: 44269\n",
        "generated_testcode": "assert sum_Of_Subarray_Prod(arr=[1, 2, 3, 4, 5], n=4) == 1180\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n & 1) | ((n & (n >> 1)) & (n & (n << 1)) & 0xaaaaaaaa) | (n & (n << 1) & (n >> 1) & 0x555555555) | (n & (n >> 2) & (n << 2) & 0xcccccc) | (n & (n >> 4) & (n << 4))\n\n# Test the function with a sample input\nnum = 0b11010101010101\nprint(bin(num))           # 0b1010101010101\nprint(bin(set_middle_bits(num))  # 0b100001000100\n\n\n# The function first ANDs the number with 1 to get the last bit (which is always set), then ANDs it with the number shifted to the right by 1 to get all the even-numbered bits (0101010101000)\n# and even-numbered bits shifted to the left (010101010000), which results in 01000100000. Then, it ORs it with the number ANDed with the number shifted to the left by 1 and ANDed with the \n# complement of the number shifted to the right by 1 (0010101",
        "generated_testcode": "assert set_middle_bits(0b101010101010) == 0b10000100010\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    a: sorted list of n integers\n    x: integer to insert into array a\n    Returns: index where x should be inserted to maintain sorted order in a\n    \"\"\"\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n\n# Test cases\nprint(left_insertion([1, 3, 5, 7, 9], 6)) # Output: 2\nprint(left_insertion([1, 3, 5, 7, 9], 2)) # Output: 1\nprint(left_insertion([1, 3, 5, 7, 9], 0)) # Output: 0\nprint(left_insertion([1, 3, 5, 7, 9], 10)) # Output: 4\nprint(left_insertion([1, 3, 5, 7, 9], 5)) # Output: 1\nprint(left_insertion([1, 3, 5, 7, 9], 4)) # Output: 2 ",
        "generated_testcode": "assert left_insertion([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], \"cherry\") == 2\n\n\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    # create a regex pattern to match a string starting with vowels \n    pattern = '^[aeiouAEIOU]'\n    # check if the string matches the pattern \n    if re.search(pattern, string): \n        return True\n    else: \n        return False ",
        "generated_testcode": "assert check_str(string=\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 1:\n        return 1/2\n    else:\n        return 1/2 * (1 - (1/2) ** n) / (1 - 1/2)\n\n\n# Test the function with n = 5\nprint(geometric_sum(5)) # Output: 2.875\n\n\n# Write a function to calculate the geometric sum of the series from 0 to infinity\ndef infinite_geometric_sum(a, r):\n    if a == 1:\n        return 1/(1-r)\n    else:\n        return a/(1-r)\n\n# Test the function with a = 2 and r = 3\nprint(infinite_geometric_sum(2, 3)) # Output: 2.0",
        "generated_testcode": "assert geometric_sum(1) == 1\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize count of digit in triangular number \n    digits = 1 \n    count = 1 \n    num = 1 \n    index = 1 \n  \n    # Find the triangular number with n digits \n    while (digits < n): \n        num += 1 \n        count += 1 \n        digits = len(str(num * (num + 1) // 2)) \n  \n    # Return the index of triangular number \n    return index ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i + 1 < len(test_tup):\n            test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_tup\n\n# Test the function with a sample tuple\ntest_tup = ('apple', 2, 'banana', 4, 'cherry', 6, 'date', 8)\nprint(tuple_to_dict(test_tup)) ",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"red\", \"banana\", \"yellow\", \"cherry\", \"red\") == {\"apple\": \"red\", \"banana\": \"yellow\", \"cherry\": \"red\"}\n\n\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) <= 1:\n        return True\n    else:\n        for i in range(len(s) - 1):\n            if s[i] != s[i + 1]:\n                return False\n        return True\n \n# test the function with some examples\nprint(all_Characters_Same('aaa')) # True\nprint(all_Characters_Same('abc')) # False\nprint(all_Characters_Same('aaaaa')) # True ",
        "generated_testcode": "assert all_Characters_Same(s=\"abccba\") == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function calculates the area of a tetrahedron with all sides equal to \"side\"\n    \"\"\"\n    #calculate the area of the base\n    base_area = (side**2 * math.sqrt(3))/4\n    \n    #calculate the height of the tetrahedron\n    height = (side**2*(3**0.5)/2)\n    \n    #calculate the total area\n    area = base_area + (0.5 * height * side)\n    \n    return area\n\n#test the function\nprint(area_tetrahedron(3)) #should output 6.9282030782868",
        "generated_testcode": "assert area_tetrahedron(5) == 10.8253176645825317665\n\n# The testing code should include at least 2 different test cases, one where the input is a positive integer and one where the input is a float. \n# The function should return the area of a regular tetrahedron with the given side length. ",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if m<n:\n        return list1\n    else:\n        m = m%len(list1)\n        return list1[-m:] + list1[:-m]\n\nlist1 = [1,2,3,4,5,6,7]\nm = 2\nn = 3\nprint(rotate_right(list1,m,n)) # Output: [5, 6, 7, 1, 2, 3, 4]\nlist1 = [1,2,3,4,5,6,7]\nm = 6\nn = 2\nprint(rotate_right(list1,m,n)) # Output: [6, 7, 1, 2, 3, 4, 5] ",
        "generated_testcode": "assert rotate_right([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],2,1) == [\"f\",\"g\",\"a\",\"b\",\"c\",\"d\",\"e\"]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return None in test_tup\n\n# example usage:\n# test_tup = (1, None, 2, 3)\n# print(check_none(test_tup))  # True\n# test_tup = (1, 2, 3, 4)\n# print(check_none(test_tup))  # False ",
        "generated_testcode": "assert check_none(()) == True\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\n# Example usage:\n# divisible_by_digits(10, 20)  # Returns [12, 15, 20] ",
        "generated_testcode": "assert divisible_by_digits(10, 20) == []\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14\n    area = (r*r)*(a)/(360) * pi\n    return area\n\n# test function with sample data\nprint(sector_area(5, 90)\n# output : 78.53975\n# explanation : radius is 5 and angle is 90 degrees, \n# therefore, area of sector = (5*5)*(90/360)*pi = 78.54 sq. units (approx) ",
        "generated_testcode": "assert sector_area(5, 45) == 141.3716691669645880567\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n  \n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n    # that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] \n    # and Z[0..k-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    # Following code is used to print LCS \n    index = L[m][n][o] \n  \n    # Create a character array to store the LCS string \n    lcs = [\"\"] * (index+1)",
        "generated_testcode": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AFRDXC\" ) == \"ADH\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return re.sub(r\"(\\b[A-Z][a-z]+)\", r\" \\1\", str1)\n    \n#Example:\n# Input: \"helloWorld\"\n# Output: \"hello World\"\n# Explanation: Because the first letter of the second word is capitalized, it is separated from the first word by a space.\n\n\n# Input: \"theQuickBrownFox\"\n# Output: \"the Quick Brown Fox\"\n# Explanation: Because all the first letters of the words are capitalized, each word is separated from the previous word by a space. ",
        "generated_testcode": "assert capital_words_spaces(str1) == \"Hello World\"\n\n# Test case 1:\nstr1 = \"HelloWorld\"\nprint(capital_words_spaces(str1)) # Output: \"Hello World\"\n\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    nums = []\n    for n in nums_str:\n        nums.append(int(n))\n    nums.sort()\n    nums_str = []\n    for n in nums:\n        nums_str.append(str(n))\n    return nums_str\n\n#test the function with some sample inputs\nprint(sort_numeric_strings(['1', '3', '5', '10', '2', '15', '7'])) #output: ['1', '2', '3', '5', '7', '10'] ",
        "generated_testcode": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"10\", \"5\", \"6\"]) == [\"1\", \"2\", \"3\", \"5\", \"6\", \"10\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return test_list + list(test_tup)\n\n\n# Test the function with an example\ntest_list = [1, 2, 3]\ntest_tup = (4, 5, 6)\nprint(add_tuple(test_list, test_tup)) ",
        "generated_testcode": "assert add_tuple([\"apple\", \"banana\", \"cherry\"], (\"orange\", \"grape\")) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"]\n\n\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    if i >= n:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap(arr, left) and check_min_heap(arr, right)\n\n\n\ndef is_min_heap(arr):\n    return check_min_heap(arr, 0)\n\n\n# Test cases\nprint(is_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9])) # True\nprint(is_min_heap([1, 3, 4, 2, 5, 6, 7, 8])) # False\nprint(is_min_heap([1, 2, 4, 3, 5, 6, 7, 8])) # False\nprint(is_min_heap([1, 2, 4, 3, 5, 6, 7, 8, 9])) # False\nprint(is_min_heap([16, 4, 10, 12, 14, 8, 18, 15, 20])) # True\nprint(is_min_heap([7, 12, 1",
        "generated_testcode": "assert check_min_heap(arr=[4, 10, 3, 15, 12, 11, 13, 7, 17], i=0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\n    return jacobsthal_num(n-1) + jacobsthal_num(n-2) ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # sorting the list in ascending order\n    sorted_list = sorted(test_list)\n    # taking first k elements from the sorted list\n    min_k_elements = sorted_list[:K]\n    return min_k_elements\n\n# testing the function with sample data\ntest_list = [(5, 2), (3, 4), (1, 3), (2, 6), (4, 1), (6, 5), (7, 8), (2, 9), (3, 1)]\nK = 3\nresult = min_k(test_list, K)\nprint(\"The minimum\", K, \"records are:\", result) ",
        "generated_testcode": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)], 3) == [(1, 2), (3, 4), (5, 6)]\n\n# Test case 1: Test for normal input\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n                    break\n    return index_list\n\n# test the function with sample lists\nl1 = [1, 2, 3, 4, 5, 6, 7]\nl2 = [2, 3, 4, 6, 7, 8]\nl3 = [3, 4, 5, 6, 9, 10]\nprint(extract_index_list(l1, l2, l3)) # Output: [1, 2]\n\n# this function extracts the common elements from the three lists l1, l2 and l3 and stores their index values in a new list index_list. It uses three nested loops to iterate through each element of the three lists and checks if they are equal. If they are, then the index of the element in l1 is appended to the index_list. ",
        "generated_testcode": "assert extract_index_list([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"], [\"banana\", \"orange\", \"strawberry\", \"kiwi\", \"mango\"], [\"orange\", \"kiwi\", \"grapes\", \"blueberry\"]) == [1, 3]\n# Test case 1: The common elements in all three lists are \"orange\" and \"kiwi\". Their indices are 1 and 3, respectively. ",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None ",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^a[b]?')\n    result = pattern.search(text)\n    return result != None\n\n# Test the function with some examples\nprint(text_match_zero_one(\"a\"))  # True\nprint(text_match_zero_one(\"ab\"))  # True\nprint(text_match_zero_one(\"abb\")) # False\nprint(text_match_zero_one(\"ac\"))  # False\nprint(text_match_zero_one(\"abc\")) # False ",
        "generated_testcode": "assert text_match_zero_one(\"ab\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n# test the function with a sample test_list\ntest_list = ['abc', 'cba', 'ccc', 'ada', 'bbb', 'aaa']\nprint(count_reverse_pairs(test_list)) # Output: 2 ",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"xyz\", \"aba\", \"xyz\", \"aba\"]) == 2\n\n\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in list1[:i] and sublist not in list1[j:]:\n                count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5, 6]\nprint(unique_sublists(list1))  # Output: 10 ",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        float(num)\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n# Example usage:\nprint(is_decimal(\"5.67\"))  # Output: True\nprint(is_decimal(\"5.678\"))  # Output: False\nprint(is_decimal(\"abc\"))  # Output: False ",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arr) == 1:\n        return True\n    else:\n        arr.sort()\n        for i in range(n-1):\n            if arr[i] != arr[i+1]:\n                return False\n        return True\n\n#Example \narr = [1,1,1,1,1,1]\nn = len(arr)\nif unique_Element(arr,n):\n    print(\"Array contains only one distinct element\")\nelse:\n    print(\"Array does not contain only one distinct element\") ",
        "generated_testcode": "assert unique_Element(arr=[1,2,3,4,5],n=4) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #d is the degree of the angle and a is the radius of the circle\n    radians = a*(d*3.14159)/180\n    arc_length = radians*a\n    return arc_length\n\n#test the function\nprint(arc_length(180,5)) #should print 94.2478\nprint(arc_length(360,10)) #should print 628.3185\nprint(arc_length(45,4)) #should print 21.9912\nprint(arc_length(72,7)) #should print 87.6998\nprint(arc_length(120,3)) #should print 29.706",
        "generated_testcode": "assert arc_length(10, 30) == 50\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 30\n    else:\n        return 31\n\n# example usage:\nprint(check_monthnumber_number(4)) # returns 30\nprint(check_monthnumber_number(2)) # returns 31 ",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1): \n        if arr[i+1] - arr[i] < min_diff: \n            min_diff = arr[i+1] - arr[i] \n    return min_diff \n  \n# Driver code \nn = int(input(\"Enter the size of the array: \"))\narr = []\nprint(\"Enter the elements of the array: \")\nfor i in range(n):\n    arr.append(int(input()))\nmin_diff = find_Min_Diff(arr, n) \nprint(\"Minimum difference is:\", min_diff) ",
        "generated_testcode": "assert find_Min_Diff(arr,n) == 3\n# Testcase 1: arr = [1, 5, 3, 19, 18, 25, 6], n = 5\n# Output: 3 (The minimum difference is between 5 and 8) ",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isnumeric():\n            count += 1\n    return count\n\n#test the function\nprint(number_ctr(\"hello123world\"))\nprint(number_ctr(\"hello world123\"))\nprint(number_ctr(\"1234abcd\")) ",
        "generated_testcode": "assert number_ctr(\u201cHello 123, World 456\u201d) == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    temp = n*(n+1)\n    if temp%2==0:\n        return True\n    else:\n        return False\n\ndef find_polite_number(n):\n    count=1\n    num=1\n    while(count<n):\n        if is_polite(num):\n            count+=1\n        num+=1\n    return num\n\nprint(find_polite_number(5))  # Output: 25 \nprint(find_polite_number(10)) # Output: 36 \nprint(find_polite_number(15)) # Output: 64 ",
        "generated_testcode": "assert is_polite(12) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = iter(l1)\n    prev = next(i)\n    for curr in i:\n        yield prev, curr\n        prev = curr\n        \n# Example usage:\nl1 = [1, 2, 3, 4, 5]\nfor prev, curr in pair_wise(l1):\n    print(prev, curr)\n# Output:\n# 1 2\n# 2 3\n# 3 4\n# 4 5 ",
        "generated_testcode": "assert pair_wise([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [(\"apple\", \"banana\"), (\"banana\", \"cherry\"), (\"cherry\", \"date\"), (\"date\", \"elderberry\")]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create an empty dictionary\n    count = {}\n    \n    # Traverse through the loop and add each element of the array to the dictionary\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n            \n    pairs_count = 0\n    # Traverse through the array and for each element arr[i] check if sum-arr[i] is present in the dictionary\n    for i in range(n):\n        if sum-arr[i] in count:\n            # If it is present, then we have found a pair\n            pairs_count += count[sum-arr[i]]\n            \n    # Return the number of pairs\n    return pairs_count\n\n# Test the function with an example\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\nsum = 10\nprint(get_Pairs_Count(arr,n,sum)) ",
        "generated_testcode": "assert get_Pairs_Count(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6, sum=10) == 2 # Returns 2 because (2, 8) and (3, 7) are the pairs whose sum is 10. ",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Convert the given number to binary\n    binary_x = bin(x)\n    # Count the number of 1's in the binary representation of the number\n    count_ones = binary_x.count('1') \n    # If the count of 1's is odd, then the number has odd parity\n    if (count_ones % 2 != 0): \n        return True\n    else: \n        return False\n  \n# Test the function with an example\nnum = 13\nif(check_Odd_Parity(num)): \n    print(num, \"has odd parity\") \nelse: \n    print(num, \"has even parity\") ",
        "generated_testcode": "assert check_Odd_Parity(10) == False\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    li_dif = []\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    return li_dif\n\n#Example:\nli1 = [1,2,3,4,5,6,7,8]\nli2 = [2,4,6,8,10]\nprint(Diff(li1,li2)) #[1,3,5,7]\nli3 = [1,2,3,4,5]\nli4 = [2,3,4,6,7]\nprint(Diff(li3,li4)) #[1,5] ",
        "generated_testcode": "assert Diff([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\", \"kiwi\"]) == [\"apple\", \"cherry\", \"kiwi\"]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while count < n : \n        if i % 2 != 0 : \n            sum += i ** 4\n            count += 1\n        i += 1\n    return sum\n\n#Taking input from user\nn = int(input(\"Enter the value of n: \"))\n\n#Calling the function and printing the result\nprint(\"The sum of fourth power of first\", n, \"odd natural numbers is:\", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(3) == 35 \n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    stack = []\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\", \"(\"]:\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n        elif char == \"}\":\n            if not stack or stack.pop() != \"{\":\n                return False\n        elif char == \"]\":\n            if not stack or stack.pop() != \"[\":\n                return False\n        else:\n            continue\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n# Testing the function with examples\nprint(check_expression(\"({[]})\"))  # True\nprint(check_expression(\"{[(])}\"))  # False\nprint(check_expression(\"{{[]}()}\"))  # True\nprint(check_expression(\"{)[](]}\"))  # False ",
        "generated_testcode": "assert check_expression([\"(\", \"2\", \"+\", \"3\", \")\"]), \"Expression is balanced\"\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return \" \".join(result)\n\ntest_str = \"Hello I am a test string\"\nK = 2\nprint(remove_length(test_str, K) ) # \"Hello I am a string\"\n\n\ntest_str = \"The quick brown fox jumps over the lazy dog\"\nK = 5\nprint(remove_length(test_str, K) ) # \"The quick brown jumps lazy dog\"\n\n\ntest_str = \"The quick brown fox jumps over the lazy dog\"\nK = 4\nprint(remove_length(test_str, K) ) # \"The brown fox over the lazy\" ",
        "generated_testcode": "assert remove_length(test_str=\"Hello World\", K=2) == \"Hello\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two parameters 'text' and 'pattern' as input and returns the count and position of the pattern in the text.\n    It will return a dictionary with two keys 'count' and 'positions' with values as the count of pattern in the text and position of pattern in the text respectively.\n    \"\"\"\n    count=0\n    positions=[]\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)]==pattern:\n            count+=1\n            positions.append(i+1)\n    if count==0:\n        return {'count':count,'positions':None}\n    else:\n        return {'count':count,'positions':positions}\n\n#Example\nprint(occurance_substring(\"hellohellohellohello\",\"hello\"))  #{'count': 2, 'positions': [1, 7]} ",
        "generated_testcode": "assert occurance_substring(text=\"hello world\", pattern=\"llo\") == {\"count\": 1, \"positions\": [2]}\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    #regular expression for email validation\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    # return true if email matches the pattern else false\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n\n#test the function\nprint(check_email('john@example.com')) #True\nprint(check_email('jane.doe@example.com')) #True\nprint(check_email('jane.doe@example.co.in')) #True\nprint(check_email('john')) #False\nprint(check_email('jane.doe@.com')) #False ",
        "generated_testcode": "assert check_email(email='example@example.com') == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n#Example:\n# nums = [1, 3, 5, 2, 7, 8, 9, 12, 11]\n# odd_position(nums) \u279e True\n# Explanation:\n# The odd index numbers are 3, 7, 9, and 11, and they are all odd. ",
        "generated_testcode": "assert odd_position(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n\n\n# test the function with a test case\ntest_str = \"banana\"\nprint(count_vowels(test_str))  # Output: 1 ",
        "generated_testcode": "assert count_vowels(test_str=\"hello\") == 2\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = max(arr)\n    sum = 0\n    for i in range(max_val+1): \n        if arr.count(i) == 1: \n            sum += i \n    return sum\n\n# Drivers code \narr = [2, 3, 5, 6, 8, 9, 8, 5, 3, 6, 2, 9]\nn = len(arr)\nprint(find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum(arr=[1,2,3,4,5,6,7,8,9,10],n=7) == 55\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    temp = []\n    prev = ''\n    for i in list1:\n        if i == prev:\n            temp.append(i)\n        elif temp:\n            result.append(temp)\n            temp = [i]\n        else:\n            temp = [i]\n        prev = i\n    if temp:\n        result.append(temp)\n    return result\n\nprint(pack_consecutive_duplicates(['a', 'a', 'a', 'a', 'b', 'c', 'c', 'b', 'b', 'b'])) # [['a', 'a', 'a'], ['c', 'c'], ['b', 'b', 'b']]\nprint(pack_consecutive_duplicates(['a', 'b', 'c', 'd', 'd', 'd', 'd', 'c', 'c', 'c', 'a', 'a', 'a', 'a', 'b', 'b', 'b', 'b', 'c', 'c', 'd', 'd', 'd', 'd', 'd', 'd', 'd'])) # [['a'], ['b'], ['d', 'd'], ['c', 'c'], ['a', 'a', 'a'], ['b', 'b', 'b'], ['c', 'c', 'd', 'd', 'd'], ['d', 'd']] ",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\", \"c\", \"c\"]]\n",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a set to store unique sublists\n    unique_list = set()\n    # loop through the list and add each sublist to the set\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # add the slice of the list from i to j to the set\n            unique_list.add(tuple(list1[i:j])\n    # return the length of the set\n    return len(unique_list)\n\n# test the function\nlist1 = [1,2,3,4,5]\nprint(unique_sublists(list1)) # should return 10\nlist2 = [1,2,3,2,1]\nprint(unique_sublists(list2)) # should return 6 ",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(i+1, len(test_list)):\n                if i != j and i != k and j != k:\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result\n\n# testing the function\ntest_list = (1, 2, 3, 4, 5, 6, 7, 8, 9)\ncombinations = find_combinations(test_list)\nfor combination in combinations:\n    print(combination)\n\n\n# output\n# (1, 3, 5)\n# (1, 3, 6)\n# (1, 3, 7)\n# (1, 3, 8)\n# (1, 3, 9)\n# (1, 4, 6)\n# (1, 4, 7)\n# (1, 4, 8)\n# (1, 4, 9)\n# (1, 5, 7)\n# (1, 5, 8)\n# (1, 5, 9)\n# (1, 6, 8)\n# (1, 6, 9)\n# (1, 7, 9)\n# (2, 4, 6)\n# (2, 4",
        "generated_testcode": "assert find_combinations(()) == set()\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            count += 1\n    return count \n# main code \nn = int(input(\"Enter a number: \"))\nif count_Divisors(n) % 2 == 0: \n    print(\"The count of divisors of\", n, \"is even\")\nelse: \n    print(\"The count of divisors of\", n, \"is odd\") ",
        "generated_testcode": "assert count_Divisors(12) == 0\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, j+1, 2):\n                res += arr[k]\n    return res\n\n# Test the function with an example array\narr = [1, 4, 2, 5, 8, 3, 2, 9, 1, 2]\nprint(Odd_Length_Sum(arr))  # Output: 21 ",
        "generated_testcode": "assert Odd_Length_Sum(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 105 ",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    r, g, b = r / 2555.0, g / 2555.0, b / 2555.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = hue * 60\n    if hue < 0:\n        hue += 360\n    hue = int(hue)\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    saturation = int(saturation * 100)\n    value = int(cmax * 100)\n    return hue, saturation, value\n\n# Example usage:\nprint(rgb_to_hsv(255, 128, 255)) # (180, 100, 100) ",
        "generated_testcode": "assert rgb_to_hsv(1, 1, 1) == (0, 0, 1)\n\n# Test case 1: Test the case when all the values are equal. Expected output: h=0, s=0, v=1\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_product *= i\n        else:\n            odd_product *= i\n    return [even_product, odd_product]\n\n\n\n# test the function with a sample list\nlst = [2, 3, 4, 6, 8, 10, 11, 12, 15, 17]\nresult = mul_even_odd(lst)\nprint(\"Product of even numbers:\", result[0])\nprint(\"Product of odd numbers:\", result[1])\n\n",
        "generated_testcode": "assert mul_even_odd(list1) == (2*4*6*8) # Testing for even numbers\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Removing the parenthesis from the string and splitting by comma and space\n    test_str = test_str[1:-1].split(\", \")\n    # Converting each element to integer and storing it in a tuple\n    test_tuple = tuple(int(i) for i in test_str)\n    return test_tuple\n\n# Test the function with a sample string\ntest_str = \"(1, 2, 3, 4, 5, 6, 7)\"\nprint(tuple_str_int(test_str)) # Output: (1, 2, 3, 4, 5, 6, 7) ",
        "generated_testcode": "assert tuple_str_int((\"(1, 2, 3)\") == (1, 2, 3)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :param a: A sorted list of integers\n    :param x: The value to insert\n    :return: The index of the right insertion point for x in a\n    \"\"\"\n    if not a:\n        return 0\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n\n# Test cases\nprint(right_insertion([1, 3, 4, 5, 7, 9], 6)) # Output: 2\nprint(right_insertion([1, 3, 4, 5, 7, 9], 0)) # Output: 0\nprint(right_insertion([1, 3, 4, 5, 7, 9], 10)) # Output: 4\nprint(right_insertion([1, 3, 4, 5, 7, 9], 8)) # Output: 3\nprint(right_insertion([1, 3, 4, 5, 7, 9], 5) # Output: 2\nprint(right_insertion([], 3) # Output: 0 ",
        "generated_testcode": "assert right_insertion([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], \"grape\") == 3\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pattern = \"a.*b{3}\"\n    result = re.search(pattern, text)\n    return result != None\n    \n# Test the function\nprint(text_match_three(\"abbb\")) # True\nprint(text_match_three(\"abbbb\")) # False\nprint(text_match_three(\"aabbb\")) # True\nprint(text_match_three(\"abb\")) # False\nprint(text_match_three(\"abbbbb\")) # False\nprint(text_match_three(\"abbcabb\")) # True\nprint(text_match_three(\"aabb\")) # False ",
        "generated_testcode": "assert text_match_three([\"abbb\", \"abb\", \"abbbb\", \"abbbbb\", \"abbbbbb\", \"abbbbbbb\"] == [\"abbb\", \"abbbb\", \"abbbbb\"]\n\n\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(test_list.extend(test_str)\n\n\n# Example usage:\n# test_list = [1, 2, 3]\n# test_str = \"apple\"\n# new_tuple(test_list, test_str) ",
        "generated_testcode": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"fruit\") == (\"fruit\", \"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    perim = s*l\n    return perim\n\n#Write a function to calculate the area of a regular polygon\ndef area_polygon(n,s):\n    area = (n*s**2)/(4*tan(pi/n))\n    return area\n\n#Write a function to calculate the area of a triangle given its base and height\ndef area_triangle(b,h):\n    area = (b*h)/2\n    return area\n\n#Write a function to calculate the volume of a sphere given its radius\ndef volume_sphere(r):\n    vol = 4/3*pi*r**3\n    return vol\n\n#Write a function to calculate the volume of a cube given one of its side's length\ndef volume_cube(s):\n    vol = s**3\n    return vol\n\n#Write a function to calculate the surface area of a sphere given its radius\ndef surface_area_sphere(r):\n    sa = 4*pi*r**2\n    return sa\n\n#Write a function to calculate the surface area of a cube given one of its side's length\ndef surface_area_cube(s):\n    sa = 6*s**2\n    return sa ",
        "generated_testcode": "assert perimeter_polygon(5, 3) == 15\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n#Example:\nnums = [2, 3, 6, 8, 10, 12, 14, 16]\nprint(even_position(nums)) # Output: True\n\nnums = [2, 3, 5, 6, 10, 12, 14]\nprint(even_position(nums)) # Output: False ",
        "generated_testcode": "assert even_position([]), \"Empty list\"\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    flat_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                flat_tup.append(j)\n        else:\n            flat_tup.append(i)\n    return tuple(flat_tup)\n\n\n# Test the function with an example\ntest_tup = (1, 2, (3, 4, 5), 6, (7, (8, 9))\nprint(remove_nested(test_tup)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9) ",
        "generated_testcode": "assert remove_nested(('test', (1, 2, 3, ('hello', 'world', (4, 5, 6), 'goodbye')) == (1, 2, 3, 'hello', 'world', 4, 5, 6, 'goodbye')\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n            count += count_list(i)\n    return count ",
        "generated_testcode": "assert count_list([] ) == 0\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    low=0\n    high=n-1\n    pos=-1\n    while(low<=high):\n        mid=(low+high)//2\n        if arr[mid]==x:\n            pos=mid\n            low=mid+1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return pos\n\n#test the function with an example\narr=[1,2,3,4,5,6,7,7,8,9,10]\nx=7\nn=len(arr)\nprint(last(arr,x,n)) #output: 5\n\n#in this example, the function will return the last position of element 7 in the array, which is 5. ",
        "generated_testcode": "assert last(arr=[1,2,3,4,5,6,7,8,9],x=6,n=9) == 6\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if 'a' in text and text.endswith('b'):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_starta_endb('Abcdefb')) # True\nprint(text_starta_endb('Acdefb')) # False\nprint(text_starta_endb('Abcdefg')) # False\nprint(text_starta_endb('aAbcb')) # True\nprint(text_starta_endb('b')) # False ",
        "generated_testcode": "assert text_starta_endb(r\"a string that starts with a and ends with b\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n\n#Example usage:\nitems = [(3, \"item1\"), (5, \"item2\"), (2, \"item3\"), (8, \"item4\"), (6, \"item5\"), (9, \"item6\"), (4, \"item7\"), (1, \"item8\")]\nn = 3\ncheap_items(items,n) # Output: [(1, \"item8\"), (2, \"item3\"), (3, \"item1\")] ",
        "generated_testcode": "assert cheap_items([\"item1\": 10, \"item2\": 20, \"item3\": 5, \"item4\": 15, \"item5\": 25, \"item6\": 30, \"item7\": 3, \"item8\": 22, \"item9\": 27, \"item10\": 18}, 3) == [\"item3\", \"item7\", \"item10\"]\n\n# The output should be [\"item3\", \"item7\", \"item10\"] because these are the 3 cheapest items in the dataset. ",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\ndict = {'a': 100, 'b': 200, 'c': 300, 'd': 400}\nprint(\"Sum of the dictionary values is:\", return_sum(dict)) ",
        "generated_testcode": "assert return_sum({1: 10, 2: 20, 3: 30, 4: 40, 5: 50}) == 150\n\n\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(n): \n        if i % 2 != 0: \n            sum += i \n    return sum \n  \ndef sum_odd_numbers(l, r): \n    sum = 0\n    for i in range(l, r+1): \n        if i % 2 != 0: \n            sum += i \n    return sum \n  \nl = 1\nr = 10\nprint(sum_odd_numbers(l, r)) ",
        "generated_testcode": "assert sum_Odd(1, 10) == 25\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0  \n    for i in range(0, len(arr):  \n        sum += arr[i]  \n    return sum  \n\n#test the function  \narr = [1, 2, 3, 4, 5, 6, 7]  \nprint(\"Sum of the array is:\", _sum(arr) ",
        "generated_testcode": "assert _sum([1,2,3,4,5,6,7,8,9]) == 35\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # d is the number of bits to be rotated\n    # n is the given number\n    d = d%32   # we need the remainder for rotation as number of bits can only be 32 at max\n    # using binary operation to left rotate the number\n    # 1. First, we shift the bits d number of times to left\n    # 2. Then, we shift the bits 32-d number of times to right to get the original bits we want to discard\n    # 3. We use bitwise OR to merge both the shifted bits and get the left rotated number\n    return ((n<<d) | (n>>(32-d)) & ((1<<d)-1))  # (n<<d) left shifts the number d bits, (n>>(32-d) right shifts the bits to get the discarded bits and (1<<d)-1 gives a number with first d bits set to 1\n\n# testing the function\nn = 16               # number to be rotated\nd = 4              # number of bits to be rotated\nprint(left_Rotate(n,d))  # output: 128 ",
        "generated_testcode": "assert left_Rotate(1234, 2) == 486\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Removes all whitespaces from the given text\n    \"\"\"\n    return ''.join(text.split())\n\ndef remove_all_whitespaces_test():\n    \"\"\"\n    Tests the remove_all_spaces function\n    \"\"\"\n    assert remove_all_spaces(\"Hello, world!\") == \"Helloworld!\"\n    assert remove_all_spaces(\"I love Python\") == \"IlovePython\"\n    assert remove_all_spaces(\" I have spaces \") == \"Ihavespaces\"\n    assert remove_all_spaces(\" This is a sentence \") == \"Thisisasentence\"\n    assert remove_all_spaces(\"\") == \"\"\n    assert remove_all_spaces(\"    \") == \"\"\n    assert remove_all_spaces(\"Hello,     world!\") == \"Hello,world!\"\n    assert remove_all_spaces(\"Hello,\\nworld!\") == \"Helloworld!\"\n    assert remove_all_spaces(\"Hello,\\tworld!\") == \"Helloworld!\"\n    assert remove_all_spaces(\"Hello\\nworld!\") == \"Helloworld!\"\n    assert remove_all_spaces(\"Hello\\tworld!\") == \"Helloworld!\"\n    assert remove_all_spaces(\"Hello\\rworld!\") == \"Helloworld!\"\n    print(\"All tests passed!\") ",
        "generated_testcode": "assert remove_all_spaces(text) == \"Thisisatextwithnospaces\"\n\n# Test case 1:\ntext = \"This is a text with spaces\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n#test function with some examples\nprint(test_three_equal(2,2,2)) # Expected output: 3\nprint(test_three_equal(2,3,2)) # Expected output: 2\nprint(test_three_equal(2,3,4)) # Expected output: 0\nprint(test_three_equal(1,1,1)) # Expected output: 3\nprint(test_three_equal(1,2,3)) # Expected output: 0 ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            return i \n    return 0 ",
        "generated_testcode": "assert count_Rotation(arr=[4, 5, 6, 7, 8, 9, 10, 1, 2, 3], n=7) == 3\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return (n**0.5).is_integer()\n\n#example\n#num = 16\n#if is_Perfect_Square(num):\n#    print(num,\"is a perfect square\")\n#else:\n#    print(num,\"is not a perfect square\")\n\n#output: 16 is a perfect square ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    prod = 1\n    for i in range(n): \n        prod = prod * arr[i] \n      \n    if (prod % 2 == 0): \n        return True\n    else: \n        return False \n\n# test the function with an example \narr = [2, 3, 4, 6] \nn = len(arr) \nif (is_Product_Even(arr, n)): \n    print(\"Even\") \nelse: \n    print(\"Odd\") ",
        "generated_testcode": "assert is_Product_Even(arr=[2,4,6,8],n=3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_list = lst\n    return max_list\n\n# Test cases\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])) #[10, 11, 12]\nprint(max_sum_list([[1, -10, 3], [4, 5, 6], [100, 11, 12], [7, 8, 9]])) #[10, 11, 12]\nprint(max_sum_list([[1, -100, 3], [4, 5, 6], [-1, 12], [7, 8, 9]])) #[4, 5, 6] ",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12, 13], [7, 8, 9]] ) == [10, 11, 12, 13]\n\n# Test case 1: Test with a list of lists with positive integers\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not test_str:\n        return 0\n\n    max_run = 1 if test_str[0].isupper() else 0\n    curr_run = 1 if test_str[0].isupper() else 0\n\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            max_run = max(max_run, curr_run)\n            curr_run = 0\n\n    return max(max_run, curr_run)\n\n\n# Test the function with sample inputs\ntest_str1 = \"HELLO World\"\ntest_str2 = \"HellO World\"\ntest_str3 = \"HELLOworlD\"\ntest_str4 = \"Hello WORLD\"\ntest_str5 = \"hELLO World\"\ntest_str6 = \"Hello World\"\n\nprint(max_run_uppercase(test_str1))  # Output: 5\nprint(max_run_uppercase(test_str2))  # Output: 3\nprint(max_run_uppercase(test_str3))  # Output: 10\nprint(max_run_uppercase(test_str4))  # Output: 5\nprint(max_run_uppercase(test_str5))  # Output: 1\nprint(max_run_uppercase(test_str6))  # Output: 0 ",
        "generated_testcode": "assert max_run_uppercase(test_str=\"HeLLoWorLd\") == 2\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test the function with sample data\nnums = [2, 4, 6, 8, 10, 3, 15, 20]\nprint(first_odd(nums))  # Output: 3\n\n\nnums = [2, 4, 6, 8, 10]\nprint(first_odd(nums))  # Output: None ",
        "generated_testcode": "assert first_odd(nums=[2, 4, 6, 8, 10, 3, 5, 7, 11]) == 3\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if K in test_tup:\n        return True\n    else:\n        return False\n#Test the function with the sample inputs\nprint(check_K((1,2,3,4,5,6,7), 2)) #True\nprint(check_K((1,2,4,3,5,6,7), 8)) #False\nprint(check_K((1,2,3,4,5,6,7), 1)) #True\nprint(check_K((1,3,5,7,9,11), 7)) #True\nprint(check_K((1,5,2,3,7,9), 4)) #False ",
        "generated_testcode": "assert check_K(('hello', 'K') == True)\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given two tuples, check if each element in the second tuple is smaller than its corresponding index in the first tuple.\n    :param test_tup1: a tuple of integers\n    :param test_tup2: a tuple of integers\n    :return: True if each element in test_tup2 is smaller than its corresponding index in test_tup1, else False\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_smaller((1, 2, 3, 4), (0, 1, 2)))  # True\nprint(check_smaller((1, 2, 3, 4), (0, 1, 3)))  # False\nprint(check_smaller((1, 2, 3, 4), (0, 0, 0)))  # False\nprint(check_smaller((1, 2, 3, 4), (0, 0, 1)))  # True\nprint(check_smaller((1, 2, 3, 4), (0, 2, 3)))  # False\nprint(check_smaller((1, 2, 3, 4), (1, 2, 3)))  # True\nprint(check_smaller((1, 2, 3, 4), (1, 2, 4",
        "generated_testcode": "assert check_smaller((('a', 'b', 'c', 'd', 'e'), (1, 2, 3, 4)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a = [a, b, c, d]\n    result = []\n    for i in a:\n        result.extend([i]*i)\n    return result\n\na = count_variable(2, 1, 3, 2)\nprint(a) # Output: [2, 2, 1, 3, 3, 3, 2, 2]\n\n\n# Using list comprehension\ndef count_variable(a,b,c,d):\n    return [i for i,j in [(a,b,c,d) for i in [a,b,c,d] for j in range(i]]\na = count_variable(2, 1, 3)\nprint(a) # Output: [2, 2, 1, 3, 3, 3, 2, 2] ",
        "generated_testcode": "assert count_variable(1,2,3,4) == [1,2,2,3,3,3,3,4,4,4,4,4]\n\n# Test case 1: Test the function with arguments 1,2,3,4. The expected output is [1,2,2,3,3,3,4,4,4,4,4]\n# Test case 2: Test the function with arguments 2,3,4,1. The expected output is [2,2,3,3,3,3,4,4,4,4]\n# Test case 3: Test the function with arguments 0,3,5. The expected output is [3,3,3,3,3,3,3,5,5,5,5,5,5,5]\n# Test case 4: Test the function with arguments 1,1,1. The expected output is [1,1]\n# Test case 5: Test the function with arguments 0,0,0. The expected output is [] ",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i][0] != test_list2[i][0] or test_list1[i][1] != test_list2[i][1]:\n            return False\n    return True\n\n# Test the function with sample inputs\nprint(check_identical([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == True)\nprint(check_identical([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 7)]) == False)\nprint(check_identical([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4)]) == False)\nprint(check_identical([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6), (7, 8)]) == False) ",
        "generated_testcode": "assert check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4), (5,6)] ) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    street = street.lower()\n    if \"road\" in street:\n        street = street.replace(\"road\", \"rd.\")\n    return street.title()\n\n# Test the function with some examples\nprint(road_rd(\"Washington Road\")) # Wash. Rd.\nprint(road_rd(\"Broad Street\")) # Broad St.\nprint(road_rd(\"Main Road\")) # Main Rd.\nprint(road_rd(\"The Road Of The Palms\")) # The Rd. Of The Palms\nprint(road_rd(\"123 Main Road Apt 3B\")) # 123 Main Rd. Apt 3B\n\n\n# Write a function to abbreviate 'street' as 'st.' in a given string\ndef street_st(street):\n    street = street.lower()\n    if \"street\" in street:\n        street = street.replace(\"street\", \"st.\")\n    return street.title()\n\n# Test the function with some examples\nprint(street_st(\"Washington Street\")) # Wash. St.\nprint(street_st(\"123 Main Street Apt 3B\")) # 123 Main St. Apt 3B\nprint(street_st(\"Broad Street\")) # Broad St.\nprint(street_st(\"The Street Of The Palms\")) # The St. Of The Palms\n\n# Write a function to abbreviate 'boulevard' as 'blvd.' in a given string\ndef boulevard_blvd(street):\n    street = street",
        "generated_testcode": "assert road_rd(street=\"Park Road\") == \"Park Rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for _ in str1:\n        count += 1\n    return count\n\nprint(string_length(\"Hello World\"))\n\n\n#Output: 11\n\n\n#We can also use the built-in function len() to find the length of a string. ",
        "generated_testcode": "assert string_length(None) == 0\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = p * q\n    return area\n\n#testing the function\n#Example:\n#For p=10 and q=4, the function should return 40\nprint(rombus_area(10,4)) #Output: 40.0\n\n#For p=5 and q=8, the function should return 20\nprint(rombus_area(5,8)) #Output: 20.0 ",
        "generated_testcode": "assert rombus_area(4, 5) == 12\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    zero = 0\n    two = n - 1\n    i = 0\n    while i <= two:\n        if arr[i] == 0:\n            arr[i], arr[zero] = arr[zero], arr[i]\n            zero += 1\n            i += 1\n        elif arr[i] == 2:\n            arr[i], arr[two] = arr[two], arr[i]\n            two -= 1\n        else:\n            i += 1\n    return arr\n\n\n\n# test the code\narr = [0, 1, 2, 2, 0, 1, 1, 1, 2, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))  # Output: [0, 0, 0, 1, 1, 1, 2, 2]\n\n\narr = [0, 2, 1, 2, 0, 1, 1, 2, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))  # Output: [0, 0, 0, 1, 1, 1, 2, 2]\n\n\narr = [2, 1, 0, 2, 0, 1, 1, 2, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))  # Output: [0, ",
        "generated_testcode": "assert sort_by_dnf(arr, n) == sorted(arr)\n\n# The function should work for the following test cases:\narr = [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]\nn = len(arr)\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tup = ()\n    return new_tup\n\n#Example\n#Input: (1,2,3,4)\n#Output: ()\n#Explanation: Clear the values of the given tuple i.e (1,2,3,4) to clear_tuple(test_tup)\n#Output: () ",
        "generated_testcode": "assert clear_tuple((\"hello\") == None, \"Input is not a tuple\")\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0,nums))\n\n#Example\nnums = [2,5,6,9,10,12,15,17,20,21,24,30,33]\nm = 5\nn = 7\nprint(div_of_nums(nums,m,n)) #Output: [6, 10, 15, 21, 24, 30] ",
        "generated_testcode": "assert div_of_nums(nums=[1,2,3,4,5,6,7,8,9,10],m=3,n=5) == [3,6,9]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.islower():\n            count += 1\n    return count\n\n# test the function\nstring = \"Hello, World! 123\"\nprint(lower_ctr(string))  # Output: 8 ",
        "generated_testcode": "assert lower_ctr(\u201cHello World\u201d) == 8\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    i = 0\n    while i < len(lists) - 1:\n        if lists[i] == lists[i + 1]:\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count\n\n#test the function with an example\nlists = [1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7, 8, 9, 9, 9]\nprint(count_duplic(lists)) # Output: 4 ",
        "generated_testcode": "assert count_duplic([]), 0\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    else:\n        return False\n#Test the function\nprint(check_monthnum_number(2)) # True\nprint(check_monthnum_number(4)) # False ",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two dictionaries as input parameters, dict1 and dict2, and returns a new dictionary that contains the merged values of both dictionaries.\n    If both dictionaries have the same key, the value from dict2 will be used.\n    \"\"\"\n    dict3 = dict1.copy()\n    dict3.update(dict2)\n    return dict3\n\n# Example usage:\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\ndict2 = {\"b\": 4, \"d\": 5, \"e\": 6}\n\ndict3 = merge_dictionaries(dict1, dict2)\nprint(dict3) # Output: {\"a\": 1, \"b\": 4, \"c\": 3, \"d\": 5, \"e\": 6} ",
        "generated_testcode": "assert merge_dictionaries(\n    {\"a\": 1, \"b\": 2, \"c\": 3},\n    {\"c\": 4, \"d\": 5, \"e\": 6}\n) == {\"a\": 1, \"b\": 2, \"c\": 4, \"d\": 5, \"e\": 6}\n\n\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(p) < 8:\n        return False\n    has_num = False\n    has_upper = False\n    has_lower = False\n    has_special = False\n    for i in p:\n        if i.isnumeric():\n            has_num = True\n        elif i.isupper():\n            has_upper = True\n        elif i in \"!@#$%^&*()-+?=<>\":\n            has_special = True\n    return has_num and has_upper and has_special and has_lower\n\n\n# test cases\nprint(pass_validity(\"Abc@12345\")) #True\nprint(pass_validity(\"Abc@123\")) #False\nprint(pass_validity(\"Abcdefg\")) #False\nprint(pass_validity(\"1234567890\")) #False\nprint(pass_validity(\"ABCDEFG\")) #False\nprint(pass_validity(\"Abcdefg!@#\")) #False\nprint(pass_validity(\"Abc123!@#\")) #True ",
        "generated_testcode": "assert pass_validity(123456) == False\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    regex = re.compile(r'^' + sample)\n    if regex.search(string) : \n        return True\n    else : \n        return False\n\n# Test the function with sample inputs\nprint(check_substring(\"Hello, world!\", \"Hello\")) # True\nprint(check_substring(\"Hello, world!\", \"world\")) # False\nprint(check_substring(\"Python is awesome\", \"Python\")) # True ",
        "generated_testcode": "assert check_substring(string=\"hello world\", sample=\"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Removes even numbers from the given list.\n    \"\"\"\n    return [i for i in l if i % 2 != 0]\n\n\n# Test the function with an example list\nl = [1, 2, 4, 3, 6, 8, 11, 5, 10, 7]\nprint(remove_even(l)) ",
        "generated_testcode": "assert remove_even(l) == [1, 3, 5]\n\n# Test case 1: Test with a list of odd numbers\nl = [1, 3, 5, 7, 9]\nremove_even(l)\n\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in list_index:\n        result.append(nums[i])\n    return result\n\n# test the function with an example\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [1, 3, 5]\nprint(access_elements(nums, list_index))  # Output: [2, 4, 8] ",
        "generated_testcode": "assert access_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], [1, 3]) == [\"banana\", \"elderberry\"]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a==b==c:\n        return \"Equilateral\"\n    elif a==b or b==c or c==a:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\na = int(input(\"Enter side a : \"))\nb = int(input(\"Enter side b : \"))\nc = int(input(\"Enter side c : \"))\nprint(check_Type_Of_Triangle(a,b,c)) ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    for i in range(len(list1)):\n        total += list1[i][C]\n    return total\n\n# test the function\ndata = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(data, 1)) # should print 15 (2+5+8)\nprint(sum_column(data, 2)) # should print 18 (3+6+9) ",
        "generated_testcode": "assert sum_column(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 2) == 15\n\n# The function should return the sum of the 2nd column, which is 15. ",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    alpha = 0\n    digit = 0\n    spl = 0\n    for i in string:\n        if i.isalpha():\n            alpha += 1\n        elif i.isdigit():\n            digit += 1\n        else:\n            spl += 1\n    print(\"Alphabets:\", alpha)\n    print(\"Digits:\", digit)\n    print(\"Special Characters:\", spl)\n\n\nstring = input(\"Enter a string: \")\ncount_alpha_dig_spl(string) ",
        "generated_testcode": "assert count_alpha_dig_spl(string) == (alpha_count, digit_count, special_count) # add the string and expected output ",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = input.split() \n    freq = {}\n    for word in words: \n        if word in freq: \n            freq[word] += 1\n        else: \n            freq[word] = 1\n\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True) \n    second_freq = sorted_freq[1][1]\n    for word in sorted_freq: \n        if word[1] == second_freq: \n            return word[0]\n    return None\n    \n# Example usage:\ninput = \"apple banana cherry apple orange banana apple orange banana\"\nprint(second_frequent(input)) # Output: \"banana\" ",
        "generated_testcode": "assert second_frequent([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"grape\", \"orange\"]) == \"grape\"\n\n\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a == 0:\n        return 0\n    power = 10 ** (len(str(int(a)) - 1) - digits)\n    return (a + power - 1) // power * power\n\n# Example usage:\n# round_up(12345, 2) returns 13000\n# round_up(54321, 1) returns 55000\n# round_up(54321, 0) returns 54321\n# round_up(54321, -1) returns 54300\n# round_up(54321, -2) returns 54000\n# round_up(54321, -3) returns 50000\n# round_up(0.02345, 2) returns 0.02\n# round_up(0.02678, 2) returns 0.03\n# round_up(0.02678, 1) returns 0.1\n# round_up(0.02678, 0) returns 0\n# round_up(0.02678, -1) returns 0.03\n# round_up(0.02678, -2) returns 0.00\n# round_up(0.02678, -3) returns 0\n\n# Test your function with",
        "generated_testcode": "assert round_up(123.4567, 1) == 123.5\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count+=1\n    return count \n\narr = [1,2,3,4,5,6,1,2,3,4,4,2,5,6,1]\nn = len(arr)\nprint(count_Pairs(arr,n))\n\n# Output: 6 ",
        "generated_testcode": "assert count_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]\nn = len(arr)\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    import re \n    nums = re.findall(r'\\d+', input)\n    max_num = 0 \n    for num in nums: \n        if int(num) > max_num: \n            max_num = int(num) \n    return max_num ",
        "generated_testcode": "assert extract_max(input=\"a12bc34d56\") == 56\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n#example\ndict1 = {'a': 100, 'b': 200, 'c': 300} \nprint(get_key(dict1)) ",
        "generated_testcode": "assert get_key(dict()) == []\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    matrix = [[0 for x in range(n)] for y in range(n)]\n    top_row, bottom_row, left_col, right_col = 0, n-1, 0, n-1\n    matrix[0][0] = 1\n    count, num = 2, 1\n    while count <= n*n:\n        for col in range(left_col+1, right_col):\n            matrix[top_row][col] = num\n            num += 1\n        top_row += 1\n        for row in range(top_row, bottom_row):\n            matrix[row][right_col] = num\n            num += 1\n        for col in range(right_col-1, left_col, -1):\n            matrix[bottom_row][col] = num\n            num += 1\n        bottom_row -= 1\n        for row in range(bottom_row, top_row, -1):\n            matrix[row][left_col] = num\n            num += 1\n        left_col += 1\n        for col in range(left_col, right_col):\n            matrix[top_row][col] = num\n            num += 1\n        right_col -= 1\n        count += 4\n    return matrix\n ",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return (y2-y1)/(x2-x1)\n\n#Example\n#Slope of the line passing through points (2,3) and (5,6)\n#slope(2,3,5,6) \n# Output: 1.0 ",
        "generated_testcode": "assert slope(0,0,1,1) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    max_so_far = a[0] \n    curr_max = a[0] \n    for i in range(1,size): \n        curr_max = max(a[i],curr_max + a[i]) \n        max_so_far = max(max_so_far,curr_max) \n    return max_so_far \n\n\n#driver code \na = [-2, -3, 4, -1, -2, -1, 5, -3] \nsize = len(a) \nprint(max_sub_array_sum(a,size)) # Output : 7\n\n# The maximum sum of subarray is 7 (i.e. 4, -1, -2, -1, 5) ",
        "generated_testcode": "assert max_sub_array_sum([-2, 3, 4, -1, -2, 1, 5, -3], 5) == 7\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while count < n:\n        if i % 2 != 0:\n            sum += i**3\n            count += 1\n        i += 1\n    return sum\n\n# test the function\nprint(cube_Sum(5)) # Output: 35\nprint(cube_Sum(6)) # Output: 2298\nprint(cube_Sum(3)) # Output: 35\nprint(cube_Sum(0)) # Output: 0\nprint(cube_Sum(7)) # Output: 12305",
        "generated_testcode": "assert cube_Sum(3) == 35 ",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(s1) != len(s2):\n        return -1\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    return count // 2 ",
        "generated_testcode": "assert min_Swaps(s1 = \"0100\", s2 = \"1110\") == 1\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    tup.sort(key=lambda x:x[0]) \n    return tup\n\n#Example usage:\n# my_tuple = [('banana', 2), ('apple', 4), ('orange', 3), ('pear', 1)] \n# print(sort_tuple(my_tuple)) # Output: [('apple', 4), ('banana', 2), ('orange', 3), ('pear', 1)] ",
        "generated_testcode": "assert sort_tuple(()) == ()\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if b**2-4*a*c>=0:\n        x1=(-b+((b**2-4*a*c)**0.5)/2*a)\n        x2=(-b-((b**2-4*a*c)**0.5)/2*a)\n        if x1*x2<0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n#Example:\n#Test case 1:\n# Inputs: a = 1, b = -5, c = 6\n# Output: True\n#Test case 2:\n# Inputs: a = 2, b = 2, c = 2\n# Output: False\n#Test case 3:\n# Inputs: a = -1, b = 3, c = 2\n# Output: True ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    global count\n    temp_arr = [0]*n \n    merge_sort(arr, temp_arr, 0, n-1) \n    return count \n      \ndef merge_sort(arr, temp_arr, left, right): \n    global count\n    inv_count = 0\n    if left < right: \n        mid = (left + right)//2\n        merge_sort(arr, temp_arr, left, mid) \n        merge_sort(arr, temp_arr, mid+1, right) \n        inv_count = merge(arr, temp_arr, left, mid, right) \n    return inv_count \n      \ndef merge(arr, temp_arr, left, mid, right): \n    global count\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n      \n    l1 = arr[left:mid+1] + [float('inf')] \n    l2 = arr[mid+1:right+1] + [float('inf')] \n    for n in range(len(l1)): \n        if l1[n] <= l2[n]: \n            temp_arr[k] = l1[n] \n            k += 1\n        else: \n            temp_arr[k] = l2[n] \n            inv_count += len(l1) - n \n            k += 1\n            count += inv_count\n    for n in range",
        "generated_testcode": "assert get_inv_count(arr=[1, 20, 6, 4, 5]) == 2\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    mp = {}\n    for i in range(arr_size):\n        if arr[i] in mp:\n            mp[arr[i]] += 1\n        else:\n            mp[arr[i]] = 1\n    for key in mp:\n        if mp[key] % 2 != 0:\n            return key\n    return -1\n\narr = [3, 4, 5, 2, 6, 3, 2, 4, 5, 7, 4, 3, 5]\nn = len(arr)\nprint(get_odd_occurence(arr, n))\n\n\n\n# Output: 7 ",
        "generated_testcode": "assert get_odd_occurence(arr=[1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9], arr_size=9) == 1\n\n# Test case 1: Test the function with an array of length 9, where 1 occurs odd number of times.\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    heap = [1]\n    ugly_set = set()\n    for i in range(n):\n        top = heapq.heappop(heap)\n        for p in primes:\n            ugly_set.add(top * p)\n        for ugly in ugly_set:\n            heapq.heappush(heap, ugly)\n        print(heap)\n    return top\n\n# This code is based on the idea of using a heap to store the next candidates of super ugly numbers. We start with 1, then for each ugly number in the heap, multiply it by all primes, and add the resulting numbers to the set of ugly numbers.\n# We keep popping the smallest ugly number from the heap until we reach the nth ugly number. This is similar to the Dijkstra's algorithm for finding the shortest path in a graph. The time complexity of this algorithm is O(nk log k), where k is the number of primes. ",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    odd_nums = [num for num in range(1, n+1) if num % 2 != 0]\n    even_nums = [num for num in range(1, n+1) if num % 2 == 0]\n    if k <= len(odd_nums):\n        return odd_nums[k-1]\n    else:\n        return even_nums[k-len(odd_nums)-1]\n\n\nn = 10\nk = 6\nprint(get_Number(n, k)) ",
        "generated_testcode": "assert get_Number(10, 1) == 1\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    fact = 1\n    for i in range(1, n + 1): \n        fact = fact * i \n    while fact > 0: \n        count += 1\n        fact = fact // 10\n    return count \n  \n# Driver program \nn = 100\nprint(find_Digits(n)) ",
        "generated_testcode": "assert find_Digits(0) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    arr.sort() \n    dep.sort() \n    i = 1\n    j = 0\n    count = 1\n    plat = 1\n    while i < n and j < n: \n        if arr[i] <= dep[j]: \n            i += 1\n            count += 1\n        elif arr[i] > dep[j]: \n            j += 1\n            if i == n: \n                count -= 1\n        plat = max(plat, count) \n    return plat ",
        "generated_testcode": "assert find_platform([\"9:00\", \"9:40\", \"9:50\", \"11:00\", \"15:00\", \"18:00\"], [\"9:10\", \"12:00\", \"11:20\", \"11:30\", \"12:10\", \"16:00\"], 5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if xs is not():\n        return [xs[0]]\n    else:\n        return []\n\n#Test the function with a singleton tuple\nt = (1,)\nprint(lcopy(t)) #[1]\n\n\n#Test the function with an empty tuple\nt = ()\nprint(lcopy(t)) #[] ",
        "generated_testcode": "assert lcopy(('hello') == ['hello']\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area=((base1+base2)*height)/2\n    return area\n\n#Test the function with sample values\nprint(area_trapezium(10,20,30)==90) #True\nprint(area_trapezium(5,8,7)==23.5) #True\nprint(area_trapezium(12,24,15)==135) #True\n\n\n#Test the function with edge cases\nprint(area_trapezium(10,10,10)==50) #True\nprint(area_trapezium(0,0,10)==0) #True\nprint(area_trapezium(0,10,0)==0) #True\nprint(area_trapezium(10,0,0)==0) #True\nprint(area_trapezium(-10,0,5)==0) #True\nprint(area_trapezium(5,-10,10)==0) #True\nprint(area_trapezium(10,-5,10)==0) #True ",
        "generated_testcode": "assert area_trapezium(4,6,5) == 7.5\n\n# Write a function to find the area of a triangle using Heron's formula.\ndef area_triangle(a,b,c):\n    pass\n\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, N+1): \n        if N % i == 0: \n            for j in range(2, int(i/2)+1): \n                if i % j == 0: \n                    break\n            else: \n                sum += i\n    return sum\n\n# Test the function with an example\nnum = 120\nprint(\"Sum of prime divisors of\", num, \"is\", Sum(num)) ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a+b>c and b+c>a and c+a>b:\n        return True\n    else:\n        return False\n\na=int(input())\nb=int(input())\nc=int(input())\nif is_triangleexists(a,b,c):\n    print(\"Triangle exists\")\nelse:\n    print(\"Triangle does not exist\") ",
        "generated_testcode": "assert is_triangleexists(30, 60, 1120) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    Sum = 1\n    for i in range(2,int(N**0.5)+1):\n        if N%i == 0:\n            if N//i == i:\n                Sum = Sum + 1/i\n            else:\n                Sum = Sum + (1/i + 1/N//i)\n    return Sum\n\n# Test the function with a test case\nprint(Sum_of_Inverse_Divisors(9)) # Output: 2.666666666666666666666666666666666666667\nprint(Sum_of_Inverse_Divisors(12)) # Output: 3.145833333333333333333333333333333333333\nprint(Sum_of_Inverse_Divisors(15)) # Output: 2.2666666666666666666666666666666666667\nprint(Sum_of_Inverse_Divisors(22)) # Output: 3.0434722222222222222222222222222222222\nprint(Sum_of_Inverse_Divisors(28)) #",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12) == 28 \n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for i in num_list: \n        if i >= 0: \n            new_list.append(i)\n    return new_list\n\n# testing the function with sample input \nnum_list = [1, -2, 3, -4, 5, -6, 7, 8, -9] \nprint(remove_negs(num_list) ) # output [1, 3, 5, 7, 8] ",
        "generated_testcode": "assert remove_negs(num_list) == [1, 2, 3, 4, 5]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n+1, 1): \n        if n % i == 0 and i % 2 != 0: \n            sum += i \n    return sum\n  \n# Driver code to test the function \nn = 100\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 11\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    heap = []\n    for element in rawheap:\n        heappush(heap, element)\n    return heap\n\ndef heappush(heap, val):\n    heap.append(val)\n    i = len(heap) - 1\n    while i > 0:\n        parent = (i - 1) // 2\n        if heap[parent] < heap[i]:\n            heap[parent], heap[i] = heap[i], heap[parent]\n            i = parent\n        else:\n            break\n\ndef heappop(heap):\n    if not heap:\n        return None\n    val = heap[0]\n    heap[0] = heap[-1]\n    del heap[-1]\n    i = 0\n    while 2*i + 1 < len(heap):\n        left = 2*i + 1\n        right = 2*i + 2\n        if right < len(heap) and heap[left] < heap[right]:\n            child = right\n        else:\n            child = left\n        if heap[i] < heap[child]:\n            heap[i], heap[child] = heap[child], heap[i]\n            i = child\n        else:\n            break\n    return val\n\n# Example usage:\nrawheap = [4, 3, 2, 1, 7, 6, 5, 2, 1]\nheap = raw_heap(rawheap)\nprint(he",
        "generated_testcode": "assert raw_heap([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]) == [\"elderberry\", \"cherry\", \"grape\", \"banana\", \"apple\", \"date\", \"fig\"]\n\n\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x & 1 == 0: \n        return True \n    else: \n        return False\n\n# Testing the function with an even and odd number \nprint(check_Even_Parity(6)) # Output: True \nprint(check_Even_Parity(7)) # Output: False ",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    count = 0\n    while i < n : \n        if arr[i] == 0 : \n            j = i + 1\n            while j < n : \n                if arr[j] == 1 : \n                    break\n                j += 1\n            if j == n : \n                return -1\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n        i += 1\n    return count \n  \n# Driver code \nif __name__ == \"__main__\" : \n    arr = [0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1]\n    n = len(arr) \n    print(find_Min_Swaps(arr, n)) ",
        "generated_testcode": "assert find_Min_Swaps(arr,n) == min_swaps_required\n\n# Example:\narr = [0,1,0,1,1,0,1,0,1,1,0,1,1,0]\nn = len(arr)\nmin_swaps_required = 2\n# Explanation: \n# We can sort the array by making 2 adjacent swaps:\n# 0 1 0 1 1 0 1 1 0 1 1 0 1 -> 0 1 0 1 1 0 1 1 0 1 1 0 1\n#    ^           ^\n# The array can be sorted in 2 swaps. ",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: [x], list1))\n\n# Example:\n# Input: [\"apple\", \"banana\", \"cherry\"]\n# Output: [[\"apple\"], [\"banana\"], [\"cherry\"]]\n\n# Example:\n# Input: [\"cat\", \"dog\", \"bat\", \"rat\", \"elephant\"]\n# Output: [[\"cat\"], [\"dog\"], [\"bat\"], [\"elephant\"]] ",
        "generated_testcode": "assert listify_list([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n\n\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n            count += count_list(i)\n    return count ** 2\n\n#test the function\nprint(count_list([1, [2, [3, 4, [5, 6, [7, 8]], 9], 10]))  # output: 9\nprint(count_list([[1, 2, [3, 4, [5, [6, 7, [8, 9]]]]]))  # output: 6\nprint(count_list([1, 2, [3, 4, [5, 6, [7, 8, 9]]]))  # output: 3 ",
        "generated_testcode": "assert count_list([]), 0\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize an empty list to store sublists\n    sublist = []\n    # Loop through the length of the list\n    for i in range(len(my_list) + 1):\n        # Loop through the list and generate all sublists of i length\n        for j in range(len(my_list) - i + 1):\n            # Append the sublist to the sublist list\n            sublist.append(my_list[j:j + i])\n    return sublist\n\n# Test the function\nprint(sub_lists([1, 2, 3, 4, 5]))\n# Output: [[], [1], [2], [3], [4], [5], [1, 2], [2, 3], [3, 4], [4, 5], [1, 2, 3], [2, 3, 4], [3, 4, 5], [1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4, 5]] ",
        "generated_testcode": "assert sub_lists([\"apple\", \"banana\", \"cherry\"]) == [[], [\"apple\"], [\"banana\"], [\"cherry\"], [\"apple\", \"banana\"], [\"banana\", \"cherry\"], [\"apple\", \"banana\", \"cherry\"]]\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re \n    # regular expression to match non-alphanumeric characters at the end of the string \n    pattern = r'^[a-zA-Z0-9]*$' \n    # search for the pattern in the string \n    match = re.search(pattern, string) \n    # if match is found, return True else False \n    if match: \n        return True\n    else: \n        return False \n    \n# Test the function with some examples \nprint(check_alphanumeric(\"hello123\")) # True \nprint(check_alphanumeric(\"hello!123\")) # False ",
        "generated_testcode": "assert check_alphanumeric(string) == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    anagrams = []\n    for word in texts:\n        if sorted(word) == sorted(str):\n            anagrams.append(word)\n    return anagrams\n\n#Example Usage\ntexts = [\"cat\", \"dog\", \"tac\", \"god\", \"act\", \"gdo\", \"abc\"]\nstr = \"act\"\nprint(anagram_lambda(texts, str)) ",
        "generated_testcode": "assert anagram_lambda([\"listen\", \"silent\", \"enlist\", \"apple\", \"papel\", \"leppa\"], \"silent\") == [\"listen\", \"silent\", \"enlist\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #convert all words to lowercase\n    text=text.lower()\n    #split the text into words\n    words=text.split()\n    #create dictionary to count word occurrences\n    word_counts={}\n    for word in words:\n        if word in word_counts:\n            word_counts[word]+=1\n        else:\n            word_counts[word]=1\n    #sort the words based on their counts\n    sorted_word_counts=sorted(word_counts.items(),key=lambda x:x[1],reverse=True)\n    #return the n most common words\n    return sorted_word_counts[:n]\n    \n#test the function\ntext=\"The quick brown fox jumps over the lazy dog. The dog slept over the verandah.\"\nprint(n_common_words(text,2)) #output: [('the', 2), ('over', 1)] ",
        "generated_testcode": "assert n_common_words([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"grape\", \"orange\", \"orange\", \"orange\"], 2) == [\"orange\", \"apple\"]\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    s = set() \n    ans = 0\n    for i in range(n): \n        if arr[i] not in s: \n            j = arr[i] - 1\n            while j in s: \n                s.remove(j) \n                j -= 1\n            s.add(arr[i])\n            if arr[i] - j - 1 == 0: \n                ans = max(ans, arr[i] - j) \n    return ans\n\n# Test the function\narr = [1, 9, 3, 10, 4, 20, 2, 3, 21, 50, 60, 1] \nn = len(arr) \nprint(find_longest_conseq_subseq(arr, n)) # Output: 4\n",
        "generated_testcode": "assert find_longest_conseq_subseq(arr=[1, 9, 3, 10, 4, 20, 2, 1, 2, 3, 7, 5, 11, 6], n=9) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list of strings as input and returns a filtered list of strings which are palindromes.\n    Palindrome is a string that reads the same backward as forward, e.g. \"racecar\", \"level\", \"noon\", \"radar\", etc.\n    It uses lambda function to define a function that checks whether a string is palindrome or not and then filters the input list\n    based on that function.\n    \"\"\"\n    # Define a lambda function to check if a string is palindrome\n    is_palindrome = lambda s: s == s[::-1]\n    \n    # Filter the input list using the lambda function\n    result = list(filter(is_palindrome, texts))\n    \n    return result\n\n# Example usage:\ntexts = [\"hello\", \"level\", \"world\", \"racecar\", \"level\", \"python\", \"noon\", \"radar\"]\nprint(palindrome_lambda(texts)) # Output: ['level', 'racecar', 'noon', 'radar'] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"madam\", \"level\", \"rotor\", \"python\", \"hello\", \"wasitacatisaw\"]) == [\"racecar\", \"madam\", \"level\", \"rotor\", \"wasitacatisaw\"]\n\n\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: n*x,nums) for _ in range(n))\n    \nnums = [1,2,3,4,5]\nn=3\nprint(ntimes_list(nums,n)) #[[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]]\n\n\n#Explanation: \n#The above code will return a list of n copies of the input list. In the code, we used lambda function to multiply each element of the input list 'nums' by n. Then, we used map function to apply this lambda function n times on the list. \n#The map function returns a map object, which we converted to a list by enclosing it in the list() function. ",
        "generated_testcode": "assert ntimes_list([\"a\",\"b\",\"c\"],3) == [\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if monthname2.lower() in ['january','march','may','july','august','october','december']:\n        return True\n    else:\n        return False\n\n#test the function\nprint(check_monthnumb('january')) #True\nprint(check_monthnumb('june')) #False ",
        "generated_testcode": "assert check_monthnumb(monthname2=\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n): \n        sum += arr[i] \n    if sum % 2 == 0: \n        return 0\n    else: \n        return 1\n\n# Driver code to test the above function\narr = [4, 6, 7, 2, 1]\nn = len(arr) \nprint(min_Num(arr, n)) ",
        "generated_testcode": "assert min_Num(arr=[1,2,3,4,5,6],n=4) == 2\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    a = a.strip()\n    if len(a) == 0:\n        return 0\n    else:\n        b = a.split()\n        return len(b[-1]) ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of lists and two integers as input and removes sublists from the main list which are outside the given range.\n    \"\"\"\n    res = []\n    for i in list1:\n        if len(i) >= leftrange and len(i) <= rigthrange:\n            res.append(i)\n    return res\n\n#Example:\n#input: [[1,2,3],[4,5,6],[7,8],[9,10,11,12,13],[14,15],[16,17,18,19,20,21],[22,23,24]]\n#left range: 2\n#right range: 4\n#output: [[14,15],[16,17,18,19,20,21]]\nprint(remove_list_range([[1,2,3],[4,5,6],[7,8],[9,10,11,12,13],[14,15],[16,17,18,19,20,21],[22,23,24],2],2,4) ",
        "generated_testcode": "assert remove_list_range(list1, 2, 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x>0, nums))\n\n# Example usage:\nnums = [3, -2, 5, 6, -8, 0, 7, -4]\nprint(sum_positivenum(nums)) # Output: 14\n\n\n#Explanation:\n# The lambda function filters out the positive numbers from the list and returns a new list with only the positive numbers. The sum() function then adds up all the elements in this new list to return the sum of the positive numbers. ",
        "generated_testcode": "assert sum_positivenum(nums=[1, 2, 3, 4, -5, 6, -7, 8, 9, 0, -1]) == 20\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(string1) == len(string2) and len(string1) != 0:\n        temp = string1 + string1\n        if string2 in temp:\n            return True\n        else:\n            return False\n    else:\n        return False\nstring1 = \"ABACD\"\nstring2 = \"CDAB\"\nif are_Rotations(string1, string2):\n    print(\"Strings are rotations of each other\")\nelse:\n    print(\"Strings are not rotations of each other\") ",
        "generated_testcode": "assert are_Rotations(\"abcde\", \"cdeab\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(list1) > len(list2): \n        return False\n    for i in list1: \n        if i in list2: \n            list2.remove(i) \n        else: \n            return False\n    return True \n\n#Test the function with some examples \n#Example 1:\nlist1 = [[1,2], [2,3], [3,4]]\nlist2 = [[4,5], [1,2], [2,3], [3,4]]\nprint(check_subset(list1,list2)) #True\n\n\n#Example 2:\nlist1 = [[1,2], [2,3], [3,4]]\nlist2 = [[4,5], [2,3], [3,4]]\nprint(check_subset(list1,list2)) #False\n\n\n#Example 3:\nlist1 = [[1,2], [2,3], [3,4]]\nlist2 = [[4,5], [1,2], [2,3], [3,4], [5,6]]\nprint(check_subset(list1,list2)) #True\n\n\n#Example 4:\nlist1 = [[1,2], [2,3], [3,4], [4,5]]\nlist2 = [[4,5], [1,2], [2,3]]\nprint(check_subset(list1,list2)) #False ",
        "generated_testcode": "assert check_subset([\"apple\", \"banana\", \"cherry\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\n# Test the function\nprint(fibonacci(6)) # Output: 8\nprint(fibonacci(7)) # Output: 13\nprint(fibonacci(8)) # Output: 21\nprint(fibonacci(9)) # Output: 34 ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1)!=len(str2):\n        return False\n    elif sorted(str1)!=sorted(str2):\n        return False\n    else:\n        for i in range(1,len(str1)):\n            if str1==str2[:i]+str2[i:]:\n                return True\n        return False\n#Example:\n#check_Concat('abcde','abcd')\n#Output: False\n#check_Concat('abcde','cdeab')\n#Output: True ",
        "generated_testcode": "assert check_Concat(str1=\"hello\", str2=\"he\") == False\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n\n# test the function with sample tuples\ntest_list = [(1,2), (5,3), (8,9), (3,4), (11,10), (2,7)]\nprint(min_difference(test_list))  # Output: 1\n\n\n# Let's try with another sample list\ntest_list2 = [(2,4), (8,9), (1,7), (10,11), (6,4)]\nprint(min_difference(test_list2))  # Output: 1 ",
        "generated_testcode": "assert min_difference([(1, 2), (2, 3), (4, 5), (6, 7), (8, 9)] ) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # finding the maximum number between x and y\n    if x > y:\n        maximum = x\n    else:\n        maximum = y\n    while True:\n        if maximum % x == 0 and maximum % y == 0:\n            lcm = maximum\n            break\n        maximum += 1\n    return lcm\n\n\n\n# Test the function with two numbers\na = 12\nb = 20\nprint(\"LCM of\", a, \"and\", b, \"is\", lcm(a, b)) ",
        "generated_testcode": "assert lcm(12, 15) == 60\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    str = str.split() \n    str = sorted(str) \n    return ' '.join(str) ",
        "generated_testcode": "assert sort_String(None) == None\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n\n# Test the function with a tuple of length 3\ntup = ('apple', 'banana', 'cherry')\nK = 3\nprint(check_tuples(tup, K)) # Output: True\n\n\n# Test the function with a tuple of length 2\ntup = ('apple', 'banana')\nK = 3\nprint(check_tuples(tup, K)) # Output: False ",
        "generated_testcode": "assert check_tuples((\"hello\", 2) == False\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'a.*b')\n    return pattern.search(text) != None\n\n# Example usage:\nprint(text_match(\"ab\")) # True\nprint(text_match(\"aab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"acb\")) # False\nprint(text_match(\"aabb\")) # True\nprint(text_match(\"aabc\")) # False\nprint(text_match(\"abcd\")) # False ",
        "generated_testcode": "assert text_match(r\"a string with ab\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    d = (b**2 - 4*a*c)\n    if d >= 0: \n        return 2\n    elif d < 0: \n        return 0\n    else: \n        return 1 \n\n# Example usage: \na = 10\nb = 20\nc = 10\nprint(\"Number of solution is: \", Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1, 2, 3) == 0\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num%2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum, odd_sum\n\n#Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_sum, odd_sum = sum_even_odd(list1)\nprint(\"Sum of even numbers in the list:\", even_sum)\nprint(\"Sum of odd numbers in the list:\", odd_sum) ",
        "generated_testcode": "assert sum_even_odd(list1) == (10, 15) # Testing for a list with even and odd numbers\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    perimeter = 2*(b+h)\n    return perimeter\n\nb = float(input(\"Enter the length of base of parallelogram: \"))\nh = float(input(\"Enter the height of parallelogram: \"))\n\nprint(\"Perimeter of parallelogram is:\",parallelogram_perimeter(b,h)) \n\n\n#we can use the same function to calculate the perimeter of a rectangle as it is a special type of parallelogram. ",
        "generated_testcode": "assert parallelogram_perimeter(6, 7) == 20\n\n# Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n    pass\n\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: (x%m==0 or x%n==0),nums))\n\n#Test the function with an example\nnums = [34,67,89,12,90,32,56,21,88,99,77,62,54,36,11]\nm = 6\nn = 10\nresult = div_of_nums(nums,m,n)\nprint(result)\n#Output: [67, 90, 99, 62, 36] ",
        "generated_testcode": "assert div_of_nums(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],m=3,n=5) == [15,30]\n\n# The output should be [15,30] because 15 and 30 are the only numbers in the list that are divisible by both 3 and 5. ",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #convert n to binary\n    binary_n = bin(n)\n    #removing '0b' from the binary string\n    binary_n = binary_n[2:]\n    #initialize the left and right pointers\n    left,right = 0,len(binary_n)-1\n    #initialize max_left and min_right variables\n    max_left,min_right = 0,0\n    #loop through the binary string\n    for i in range(len(binary_n)):\n        #if the current bit is 1 and it is greater than left pointer, update max_left\n        if binary_n[i]=='1' and i>left:\n            max_left = i\n        #if the current bit is 1 and it is less than right pointer, update min_right\n        if binary_n[i]=='1' and i<right:\n            min_right = i\n    #if max_left and min_right are within the given range, return True else False\n    if max_left>=l and min_right<=r:\n        return True\n    else:\n        return False\n#Test the function with example\nprint(all_Bits_Set_In_The_Given_Range(10,1,2)) #True\nprint(all_Bits_Set_In_The_Given_Range(5,2,2)) #False\nprint(all_Bits_Set_In_The_Given_Range(25,1,3)) #True ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(12,2,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(str1)!=len(str2):\n        return False\n    else:\n        dict1={}\n        dict2={}\n        for i in range(len(str1)):\n            if str1[i] not in dict1:\n                dict1[str1[i]]=str2[i]\n            if str2[i] not in dict2:\n                dict2[str2[i]]=str1[i]\n            if dict1[str1[i]]!=str2[i] or dict2[str2[i]]!=str1[i]:\n                return False\n        return True\n\n#testing\nprint(is_Isomorphic(\"abc\",\"def\")) # True\nprint(is_Isomorphic(\"foo\",\"bar\")) # True\nprint(is_Isomorphic(\"abc\",\"defg\")) # False\nprint(is_Isomorphic(\"egg\",\"add\")) # False\nprint(is_Isomorphic(\"paper\",\"title\")) # True\nprint(is_Isomorphic(\"hello\",\"world\")) # False ",
        "generated_testcode": "assert is_Isomorphic(str1,str2) == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(numbers) == 0:\n        return 0\n    return sum(numbers) / len(numbers)\n\n# Test cases\nprint(sum_num([1, 2, 3, 4, 5, 6, 7]) == 4)\nprint(sum_num([2]) == 2)\nprint(sum_num([]) == 0)\nprint(sum_num([1, -2, 3, 4, -5, 6, -7]) == (-1)/2) ",
        "generated_testcode": "assert sum_num(1,2,3,4,5) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & 1\n\n# Sample Input\nn = 15\n\n# Sample Output\nTrue\n\n# Explanation:\n# The binary representation of 15 is 111111, so the last bit is set to 1 which means it is an odd number.\n# Hence the output is True. ",
        "generated_testcode": "assert is_odd(5) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup += ((test_tup1[i][0]-test_tup2[i][0], test_tup1[i][1]-test_tup2[i][1]),)\n    return res_tup\n\n# Test the function with example tuples\ntest_tup1 = ((1, 2), (3, 4), (5, 6))\ntest_tup2 = ((4, 5), (6, 7), (8, 9))\nprint(substract_elements(test_tup1, test_tup2)) # Expected output: ((-3, -3), (-3, -3), (-3, -3)) ",
        "generated_testcode": "assert substract_elements(('(1, 2, 3)', '(4, 5, 6)') == (-3, -3, -3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    reversed_lists = []\n    for lst in lists:\n        reversed_lists.append(lst[::-1])\n    return reversed_lists\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\nprint(reverse_list_lists(lists))  # Output: [[3, 2, 1], [7, 6, 5, 4], [8, 9]]\n\n\n\n# Write a function that takes a list of lists and returns a new list containing only the unique elements of each list.\ndef unique_lists(lists):\n    unique_lists = []\n    for lst in lists:\n        unique_lst = []\n        for elem in lst:\n            if elem not in unique_lst:\n                unique_lst.append(elem)\n        unique_lists.append(unique_lst)\n    return unique_lists\n\n# Example usage:\nlists = [[1, 2, 3, 2], [4, 5, 6, 5], [8, 9, 8]]\nprint(unique_lists(lists))  # Output: [[1, 2, 3], [4, 5, 6], [8, 9]] ",
        "generated_testcode": "assert reverse_list_lists([]), []\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while i < n-1 : \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        else : \n            return arr1[i] \n    return -1\n    # code here\n\n# Driver code\narr1 = [1,2,3,4,5,6,7,8,9]\narr2 = [1,2,3,4,5,6,7]\nn = len(arr1)\nprint(find_Extra(arr1,arr2,n)) ",
        "generated_testcode": "assert find_Extra(arr1 = [1,2,3,4,5,6,7], arr2 = [1,2,3,4,5,6,7,8], n = 6) == 6\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count1=0\n    count2=0\n    while A!=0:\n        A=A//10\n        count1+=1\n    while B!=0:\n        B=B//10\n        count2+=1\n    if count1==count2:\n        return True\n    else:\n        return False\n#Testing the function with example\nprint(same_Length(12345,5678)) #True\nprint(same_Length(123,3456)) #False ",
        "generated_testcode": "assert same_Length(1234,5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return ' '.join(text.split())\n\n# test the function\nprint(remove_spaces(\"   hello   world  \")) # \"hello world\"\nprint(remove_spaces(\"   hello  world    is    beautiful  \")) # \"hello world is beautiful\"\nprint(remove_spaces(\"   hello\")) # \"hello\"\nprint(remove_spaces(\"   \")) # \"\"\n\n\n# solution:\n# We can split the string into a list of words using the `split()` function and then join the words back together using a single space as the separator.\n# The `split()` function splits the string into words wherever it finds whitespace, so we end up with a list of words.\n# We then use the `join()` function to join the words back together with a single space between them.\n# If the original string has leading or trailing spaces, these will be removed as well. ",
        "generated_testcode": "assert remove_spaces(text) == \"This is a string with multiple spaces.\"\n\n# Test case 1:\ntext = \"This is a string with    multiple    spaces.\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublst[-1] for sublst in lst]\n    \n#Test the function with an example\nlst = [[1,2,3],[4,5,6],[7,8,9]]\nprint(Extract(lst)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]] ) == [3, 6, 9]\n\n\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    try:\n        x = float(test_str)\n        return (x,)\n    except ValueError:\n        pass\n    try:\n        x, y = test_str.split(\",\")\n        return (float(x), float(y))\n    except ValueError:\n        pass\n    try:\n        x, y, z = test_str.split(\",\")\n        return (float(x), float(y), float(z))\n    except ValueError:\n        pass\n    try:\n        x, y, z, w = test_str.split(\",\")\n        return (float(x), float(y), float(z), float(w))\n    except ValueError:\n        return None\n\n#Test the function with some examples\nprint(float_to_tuple(\"3.14\"))  # (3.14,)\nprint(float_to_tuple(\"2.5,3.2\"))  # (2.5, 3.2)\nprint(float_to_tuple(\"-2.3,-1.2,1.2\"))  # (-2.3, -1.2, 1.2)\nprint(float_to_tuple(\"1,2,3,4.5\"))  # (1.0, 2.0, 4.5)\nprint(float_to_tuple(\"1,2,3,4,5\"))  # None\nprint(float_to_tuple(\"1,2,3,4,5.6\"))  # None ",
        "generated_testcode": "assert float_to_tuple(1.23) == (1, 23)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    incl = A[0]\n    excl = 0\n    for i in range(1, len(A)):\n        new_excl = max(incl, excl + A[i])\n        incl = excl + A[i]\n        excl = max(incl - A[i], excl)\n    return max(incl, excl)\n\n\n# Example usage:\nA = [1, 10, 1, 2, 3, 4, 5, 6, 10, 6, 5, 4, 3, 2, 1]\nprint(max_sum_subseq(A)) # Output: 16\n\n\n#Time complexity: O(n)\n#Space complexity: O(1) ",
        "generated_testcode": "assert max_sum_subseq(A=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return n[-1]\n\ndef sort_last(tuples):\n    \"\"\"\n    Sorts a list of non-empty tuples by the last element in each tuple.\n    \"\"\"\n    return sorted(tuples, key=last)\n\n# Example usage:\ntuples = [(1, 3, 2), (3, 2, 1), (2, 1, 3), (2, 3, 1), (3, 1, 2)]\nprint(sort_last(tuples)) # Output: [(2, 1, 3), (3, 1, 2), (2, 3, 1), (1, 3, 2), (3, 2, 1)] ",
        "generated_testcode": "assert last([(1, 3, 2), (3, 1, 4), (2, 4, 1)] ) == [(2, 4, 1), (1, 3, 2), (3, 1, 4)]\n\n\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Splitting the sentence into list of words \n    words = sentence.split() \n    # Looping through the list of words \n    for i in words: \n        # Comparing each word with the given word \n        if i == word: \n            return True \n    # If the word is not present in the sentence \n    return False ",
        "generated_testcode": "assert is_Word_Present(sentence = \"I am a Python Programmer\", word = \"Python\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function extracts n number of elements from the given list of numbers which follow each other continuously.\n    It returns a new list of extracted elements.\n    If n is greater than the length of the list, it returns an empty list.\n    If n is less than or equal to 0, it returns an empty list.\n    \"\"\"\n    if n <= 0 or n > len(numbers):\n        return []\n    else:\n        return numbers[:n]\n\n# example usage:\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 3)) # [1, 2, 3]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 0)) # []\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 10)) # []\nprint(extract_elements([], 2)) # [] ",
        "generated_testcode": "assert extract_elements(list(range(10), 3) == [0, 1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort() \n    if (arr[0] < arr[n-1] and arr[n-2] > arr[n-1]): \n        return True\n    elif (arr[0] > arr[n-1] and arr[n-2] < arr[n-1]): \n        return True\n    else: \n        return False\n    \n# Driver Code\narr = [3, 2, 1, 4, 6, 5]\nn = len(arr)\nif (check(arr,n)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n# Output: Yes ",
        "generated_testcode": "assert check(arr=[1, 3, 2, 5, 4, 6, 7, 2, 8], n=6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(string)):\n        if string[i].isdigit():\n            return i\n    return -1\n\n# Test cases\nprint(match_num(\"a1bc23\")) # 1\nprint(match_num(\"abcdef\")) # -1\nprint(match_num(\"123abc\")) # 0\nprint(match_num(\"123abc123\")) # 0\nprint(match_num(\"abc123abc\")) # 3\nprint(match_num(\"\")) # -1 ",
        "generated_testcode": "assert match_num(string) == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # define the upper limit\n    upper_limit = 10 ** 6\n    # create a flag to check if a number is a multiple of all numbers from 1 to n\n    flag = False\n    # initialize the smallest multiple\n    smallest_multiple = 1\n    # loop through the range from 1 to the upper limit\n    for i in range(1, upper_limit):\n        # check if i is a multiple of all numbers from 1 to n\n        for j in range(1, n + 1):\n            # if i is not a multiple of j, break the loop and try the next number\n            if i % j != 0:\n                break\n            # if i is a multiple of all numbers from 1 to n, set the flag to True and break the loop\n            elif j == n:\n                flag = True\n        # if the flag is True, return the smallest multiple\n        if flag:\n            return i\n        # if the flag is still False after looping through the upper limit, return None\n        else:\n            return None\n\n# test the function with examples\nprint(smallest_multiple(10)) # should print 2520\nprint(smallest_multiple(15)) # should print 360360\nprint(smallest_multiple(20)) # should print 2327232560\nprint(smallest_multiple(22)) # should print 2327232560",
        "generated_testcode": "assert smallest_multiple(1) == 1\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result={}\n    for key in d1:\n        if key in d2:\n            result[key]=d1[key]+d2[key]\n        else:\n            result[key]=d1[key]\n    for key in d2:\n        if key not in d1:\n            result[key]=d2[key]\n    return result\nd1={'a':1,'b':2,'c':3}\nd2={'b':4,'c':5,'d':6}\nprint(add_dict(d1,d2)) # Output: {'a': 1, 'b': 6, 'c': 8, 'd': 6} ",
        "generated_testcode": "assert add_dict({'a':1, 'b':2, 'c':3}, {'b':4, 'c':5, 'd':6}) == {'a':1, 'b':6, 'c':8, 'd':6}\n\n\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0  \n    for i in range(1, n + 1):  \n        # convert integer to binary and remove prefix '0b' and fill the remaining digits with 0  \n        # so that all binary numbers have same length of n bits  \n        binary = format(i, '0' + str(n) + 'b') \n        # count the number of unset bits in binary representation  \n        count += binary.count('0')  \n    return count  \n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The total number of unset bits from 1 to\", n, \"are:\", count_Unset_Bits(n)) ",
        "generated_testcode": "assert count_Unset_Bits(10) == 8\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n# Testing the function with an even number\nprint(even_num(6))\n\n# Testing the function with an odd number\nprint(even_num(5)) ",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = 1\n    for i in range(start,end+1):\n        res *= i \n    return res\ndef binomial(n,k):\n    if k == 0:\n        return 1\n    else:\n        return int(factorial(n) / (factorial(k) * factorial(n-k)) )\ndef sum_of_squares(n):\n    sum = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            sum += binomial(n,i)**2\n    return sum\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of squares of binomial coefficients is: \", sum_of_squares(n)) ",
        "generated_testcode": "assert factorial(0, 5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\d{4}/\\d{2}/\\d{2}\"\n    match = re.search(pattern, url)\n    if match:\n        return match.group()\n    else:\n        return None\n\n# Test\nurl1 = \"https://www.example.com/2022/01/01/example-article.html\"\nurl2 = \"https://www.example.com/2022/example-article.html\"\nprint(extract_date(url1) == \"2022/01/01\") # True\nprint(extract_date(url2) == None) # True ",
        "generated_testcode": "assert extract_date(r'https://www.example.com/2021/01/31/') == ('2021', '01', '31')\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    num = 1\n    count = 0\n    while count < n:\n        str_num = str(num)\n        if '4' in str_num or '7' in str_num:\n            pass\n        else:\n            print(num)\n            count += 1\n        i += 1\n        num = 10 * num + i\n    return\n\nn = int(input(\"Enter the number of lucky numbers you want to print: \"))\nlucky_num(n) ",
        "generated_testcode": "assert lucky_num(1) == [1]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    low = 0 \n    high = n-1\n    while low <= high: \n        mid = (low + high) // 2\n        if arr[mid] == mid: \n            return mid \n        elif arr[mid] > mid: \n            high = mid - 1\n        else: \n            low = mid + 1\n    return -1\n\n# Test the code\narr = [-10, -5, 0, 3, 7, 9]\nn = len(arr)\nprint(find_fixed_point(arr, n)) ",
        "generated_testcode": "assert find_fixed_point(arr=[1, 2, 3, 4, 5, 3], n=5) == 3\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Convert the number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    \n    # Check if the reversed number is a palindrome\n    if reverse_num == str(num):\n        # If it is, subtract 1 from the number and reverse again\n        num -= 1\n        reverse_num = str(num)[::-1]\n    \n    # Convert back to an integer and return it\n    return int(reverse_num)\n\n\n# Test the function with some sample inputs\nprint(previous_palindrome(12321))  # Should print 12121\nprint(previous_palindrome(12345))  # Should print 1221\nprint(previous_palindrome(99))    # Should print 88\nprint(previous_palindrome(100))   # Should print 99\nprint(previous_palindrome(1230))  # Should print 131\nprint(previous_palindrome(1))    # Should print 1\nprint(previous_palindrome(22))   # Should print 111\nprint(previous_palindrome(47))   # Should print 44\nprint(previous_palindrome(15352)) # Should print 1521\nprint(previous_palindrome(123454))# Should print 1441\nprint(previous_palindrome(13456)) #",
        "generated_testcode": "assert previous_palindrome(12321) == 12121\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 1 or m > 12 or y < 1:\n        return False\n    elif m in [1, 3, 5, 7, 8, 10, 12]:\n        return d <= 31\n    elif m == 2:\n        if y % 4 == 0:\n            if y % 100 == 0:\n                if y % 400 == 0:\n                    return d <= 29\n                else:\n                    return d <= 28\n            else:\n                return d <= 29\n        else:\n            return d <= 28\n    else:\n        return d <= 30\n\n# Example usage:\n# print(check_date(2, 29, 20000))  # True\n# print(check_date(2, 29, 2001))  # False\n# print(check_date(2, 30, 2021))  # False\n# print(check_date(4, 31, 2021))  # True\n# print(check_date(6, 31, 2021))  # False ",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not nums or len(nums) < 3:\n        return None\n\n    heap = []\n\n    for num in nums:\n        if len(heap) < 3:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n\n\n    return heap[0] * heap[1] * heap[2]\n\n\n# Test the function with an example\nnums = [1, 10, -5, 3, -6, 2, -10]\nprint(maximum_product(nums))  # Output: 300\n",
        "generated_testcode": "assert maximum_product(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    if (k > n - k): \n        k = n - k \n    for i in range(0 , k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res \ndef catalan(n): \n    c = binomial_coeff(2*n, n) \n    return c//(n + 1)\ndef lobb_number(n): \n    return catalan(n) * binomial_coeff(2*n, n)\nfor i in range(1, 101): \n    print(lobb_number(i), end = \" \") ",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return string[-1].isdigit()\n\n# Test cases\nprint(end_num(\"abc1\")) # True\nprint(end_num(\"abcdef\")) # False\nprint(end_num(\"12345\")) # True\nprint(end_num(\"hello world1\")) # True\nprint(end_num(\"123hello\")) # False\nprint(end_num(\"xyz123\")) # True ",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(s)\n    if n < 2:\n        return False\n    for i in range(0, n-1, 2):\n        if s[i] == s[i+1]:\n            return False\n    return True\n\n# test the function with some examples\nprint(is_Two_Alter(\"aaabbc\")) # True\nprint(is_Two_Alter(\"abab\"))   # False\nprint(is_Two_Alter(\"abcde\"))  # True\nprint(is_Two_Alter(\"abc\"))   # True\nprint(is_Two_Alter(\"abba\"))   # False ",
        "generated_testcode": "assert is_Two_Alter(s=\"abab\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pos = [num for num in array_nums if num >= 0]\n    neg = [num for num in array_nums if num < 0]\n    return [i for pair in list(zip(neg, pos)) for i in pair] + (neg if len(neg) % 2 != 0 else []) + [i for pair in list(zip(pos, neg)) for i in pair]\n\n# Example usage:\nnums = [1, 2, -3, -5, 7, -8, -2, 4, -9, 6, 10]\nresult = rearrange_numbs(nums)\nprint(result)  # Output: [-3, 1, -5, 7, -2, 2, -8, 4, -9, 6, 10] ",
        "generated_testcode": "assert rearrange_numbs(array_nums=[-1, 2, -3, 4, 5, 6, -7, 8, 9, -10]) == [9, -1, 4, -3, 5, 2, -7, 8, -10]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Sort the given array in ascending order \n    A.sort() \n    # Initialize three pointers at the beginning of the array \n    l, m, r = 0, 1, arr_size-1 \n    # Traverse through the array while incrementing l and checking if there is a triplet with sum equal to given sum \n    while l < r: \n        # Initialize two pointers m and r \n        m = l+1\n        r = arr_size-1\n        while m < r: \n            # Calculate the sum of current triplet \n            cur_sum = A[l] + A[m] + A[r] \n            if cur_sum == sum: \n                return True\n            # If sum of current triplet is less than given sum, increment m \n            elif cur_sum < sum: \n                m += 1\n            # If sum of current triplet is greater than given sum, decrement r \n            else: \n                r -= 1\n        # If no triplet found, increment l \n        l += 1\n    return False\n# Test the function with an example \nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -2, -1, -4, 0, 4] \nsum = 12\narr_size = len(A) \nif find_triplet_array(A, arr_size, sum): \n    print",
        "generated_testcode": "assert find_triplet_array(A, arr_size, sum) == True or False\n\n# Test case 1:\nA = [1, 2, 4, 3, 6, 5, 7]\narr_size = 5\nsum = 10\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    uppercase_lowercase_sequences = []\n    sequence = \"\"\n    \n    for i in range(len(text)-1):\n        if text[i].isupper() and text[i+1].islower():\n            sequence += text[i]\n            for j in range(i+1, len(text)):\n                if text[j].islower():\n                    sequence += text[j]\n                else:\n                    break\n            uppercase_lowercase_sequences.append(sequence)\n            sequence = \"\"\n        else:\n            sequence = \"\"\n            \n    return uppercase_lowercase_sequences\n    \n# test the function with an example\nexample_text = \"TheQuickBrownFoxJumpsOverTheLazyDog isAStringOfWords\"\nprint(text_uppercase_lowercase(example_text)) # output: ['The', 'Fox', 'Jumps', 'Over', 'Lazy'] ",
        "generated_testcode": "assert text_uppercase_lowercase([\"Hello, World!\", \"Python is fun\", \"Java is also fun\", \"I love Python\", \"Java is not Python\"] == [\"Python is\", \"Java is\"]\n\n\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # create a table to store the count of coins for each value \n    count = [0] * (n+1) \n    count[0] = 1 # initialize base case : 0 coins needed for value 0 \n  \n    # iterate through all the coins for all the values from 1 to n \n    for i in range(1, n+1): \n        # count the number of ways to get the current value using each coin value from 1 to m \n        for j in range(m): \n            if S[j] <= i: \n                count[i] += count[i-S[j]] \n  \n    return count[n] \n  \n# Driver program to test the function \nS = [1, 2, 3] # S = {1, 2, 3} \nm = len(S) \nn = 4 # value to get \nprint(coin_change(S, m, n)) # Output: 4 \n  \n# There are 4 ways to get the value of 4 using coins S = {1, 2, 3} \n# (1, 1, 1, 1, 1), (1, 1, 2), (2, 2), (1, 3) ",
        "generated_testcode": "assert coin_change(5, [1, 2, 3], 4) == 2 # There are 2 ways to make change for 4 using the coins [1, 2, 3]\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for item in items:\n        result *= item\n    return result\n\n# Test the function with a sample list\nprint(multiply_list([2, 3, 4, 5, 6, 7, 8])) # Output: 6720\nprint(multiply_list([10, 20, 30])) # Output: 60000\nprint(multiply_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 36288800\n\n\n# Write a python function to calculate the factorial of a number (a non-negative integer).\n# The factorial of a number is the product of all the integers from 1 to that number.\n# For example, the factorial of 5 is 5*4*3*2*1, which equals 120.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function with some sample inputs\nprint(factorial(0)) # Output: 1\nprint(factorial(5)) # Output: 120\nprint(factorial(10)) # Output: 362888000\n\n# Write a python function that returns the sum of all the items in the list.\ndef sum_list(items):\n    result = 0",
        "generated_testcode": "assert multiply_list([] ) == 1\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in test_list:\n        if not all(j is None for j in i):\n            result.append(i)\n    return tuple(result)\n\n# Example usage:\n# test_list = ((None, None, None), (1, 2, 3), (None, 4, None), (4, None, 5), (None, None, None))\n# print(remove_tuple(test_list))  # Output: ((1, 2, 3), (4, None, 5)) ",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\n#Example:\n#Input:\n#test_tup = (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)\n#N = 3\n#Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20)] ",
        "generated_testcode": "assert chunk_tuples(('abcd', 2) == [('a', 'b'), ('c', 'd')]\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(arr) < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    max_num = max(arr[0], arr[1])\n    min_num = min(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        current_max = max_num * arr[i]\n        current_min = min_num * arr[i]\n        max_num = max(arr[i], current_max, current_min)\n        min_num = min(arr[i], current_max, current_min)\n        max_product = max(max_product, max_num)\n    return max_product\n\n# Example usage:\narr = [2, -20, 3, -4, 6, -5, 10, -7, 5, -8, -9]\nprint(max_product(arr)) # Output: 360 ",
        "generated_testcode": "assert max_product(arr=[1, 2, 3, 4, 5, 6, 7]) == 21\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return m+n-dp[m][n]\n\n# Time Complexity : O(mn)\n\ndef shortest_common_supersequence(str1, str2, m, n):\n    if not m or not n:\n        return max(m, n)\n    if str1[m-1] == str2[n-1]:\n        return shortest_common_supersequence(str1, str2, m-1, n-1) + 1\n    else:\n        return min(shortest_common_supersequence(str1, str2, m, n-1), shortest_common_supersequence(str1, str2, m-1, n)) + 1\n# Time Complexity : 2^n\n# This is just for reference, above function has very high time complexity.\n# Using memoization, we can bring it down to O(mn)\n\n",
        "generated_testcode": "assert super_seq([\"abc\", \"abd\", 3, 3] == 4\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with different values\nprint(max_of_two(2, 4)) # Output: 4\nprint(max_of_two(7, 3)) # Output: 7\nprint(max_of_two(22, 22)) # Output: 22 ",
        "generated_testcode": "assert max_of_two(10, 20 ) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n#Test the function\nprint(mutiple_tuple((2, 3, 4, 5)) # Output: 30\nprint(mutiple_tuple((1, 2, 3, 4, 5, 6)) # Output: 120\nprint(mutiple_tuple((10, 2, 5)) # Output: 100 ",
        "generated_testcode": "assert mutiple_tuple(()) == 1\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1 \n    for i in range(k): \n        res = res * (n - i) / (i + 1) \n    return int(res) \ndef find_n_rencontres(n): \n    count = 0\n    for k in range(1, n+1): \n        count += binomial_coeffi(n, k) \n    return int(count) \n# Driver Code \nn = 3\nprint(find_n_rencontres(n)) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "       self.data = data \n        self.left = None\n        self.right = None \n    def calculate_height(self):\n        if not self.data:\n            return 0\n        else:\n            left_height = self.left.calculate_height() if self.left else 0\n            right_height = self.right.calculate_height() if self.right else 0\n            return max(left_height, right_height) + 1\n        \n# Testing the function\nif __name__ == '__main__':\n    root = Node(1) \n    root.left = Node(2) \n    root.right = Node(3) \n    root.left.left = Node(4) \n    root.left.right = Node(5) \n    root.right.left = Node(6) \n    root.right.right = Node(7) \n    root.left.left.left = Node(8) \n    root.left.right.left = Node(9) \n    root.left.right.right = Node(10) \n    root.right.right.left = Node(11) \n    root.right.right.right = Node(12) \n    root.right.left.left.left = Node(13) \n    root.right.right.right.right = Node(14) \n    root.right.right.right.right.right = Node(15) \n    print(root.",
        "generated_testcode": "assert __init__(1) == 0\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dt = dt.split(\"-\")\n    return dt[2] + \"-\" + dt[1] + \"-\" + dt[0]\n\n# Test the function\nprint(change_date_format(\"2020-06-04\")) # Should print \"04-06-2020\" ",
        "generated_testcode": "assert change_date_format(2021-01-01) == \"01-01-2021\"\n\n# The function should work for any date in the format yyyy-mm-dd. ",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": " count=0\n  for i in tuplex:\n    if i == value:\n        count=count+1\n  return count\n#test the function\ntuplex=('a','b','c','d','a','e','a','f','a')\nvalue='a'\nprint(count_tuplex(tuplex,value)) ",
        "generated_testcode": "assert count_tuplex((\"abcaaabbbac\", \"a\") == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^a[b]*$')\n    result = pattern.search(text)\n    return result != None\n\n# test function\nprint(text_match(\"abbbbbbb\")) # True\nprint(text_match(\"ab\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"\")) # True\nprint(text_match(\"abbc\")) # False ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**3\n    return sum\n\n# test the function\nprint(sum_series(4))  # output: 100\nprint(sum_series(5))  # output: 2255\nprint(sum_series(6))  # output: 350\nprint(sum_series(7))  # output: 630\nprint(sum_series(8))  # output: 980 ",
        "generated_testcode": "assert sum_series(1) == 1\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty list to store unique words\n    unique_words = []\n    # iterate over the words in the input list\n    for word in l:\n        # if the word is not already in the unique_words list, append it\n        if word not in unique_words:\n            unique_words.append(word)\n    # return the unique list\n    return unique_words\n\n# test the function with an example list of strings\nexample_list = [\"apple\", \"banana\", \"orange\", \"apple\", \"pear\", \"banana\", \"grape\", \"orange\", \"pear\", \"kiwi\"]\nprint(remove_duplic_list(example_list)) # should print [\"apple\", \"banana\", \"orange\", \"pear\", \"kiwi\"] ",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"apple\", \"banana\", \"orange\", \"apple\"]) == [\"apple\", \"banana\", \"orange\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n\n# Test\nprint(camel_to_snake(\"CamelToSnakeCase\")) # Output: 'camel_to_snake_case'\nprint(camel_to_snake(\"SnakeToCamelCase\")) # Output: 'snake_to_camel_case'\nprint(camel_to_snake(\"SnakeToCamelCaseAndBack\")) # Output: 'snake_to_camel_case_and_back'\nprint(camel_to_snake(\"thisIsAString\")) # Output: 'this_is_a_string' ",
        "generated_testcode": "assert camel_to_snake(text) == expected_output\n\n# Test case 1\ntext = \"helloWorld\"\nexpected_output = \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dp = [[0 for i in range(n+1)] for j in range(m+1)] \n    for i in range(m+1): \n        dp[i][0] = 1\n    for i in range(n+1): \n        dp[0][i] = 1\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(i): \n                dp[i][j] += dp[i-1][j-k] \n    return dp[m][n] \n# Test the function\nprint(dealnnoy_num(5, 3)) # Output: 22\nprint(dealnnoy_num(6, 4)) # Output: 42\nprint(dealnnoy_num(7, 8)) # Output: 297\nprint(dealnnoy_num(10, 1)) # Output: 14\nprint(dealnnoy_num(1, 2)) # Output: 3\nprint(dealnnoy_num(10, 10)) # Output: 1560493\n\n# Explanation:\n# The Delannoy number counts the number of different paths from the top left corner of a \n# (n x m) grid to the bottom right corner, where you can move right or down. In this \n# problem, we are given n",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number + 1):\n        sum += i ** 2\n    return sum\n\n\n#test the function\nprint(series_sum(4)) #expected output: 30 (1+4+9+16=30) ",
        "generated_testcode": "assert series_sum(1) == 1\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    test_list.sort(key=lambda x: ord_list.index(x[0]) if x[0] in ord_list else ord_list.index(\"Other\"))\n    return test_list\n\n#Example:\n# test_list = [(\"b\", 2), (\"c\", 3), (\"a\", 1), (\"d\", 4), (\"Other\", 5), (\"Other\", 6), (\"a\", 7), (\"b\", 1), (\"c\", 8), (\"d\", 9)]\n# ord_list = [\"a\", \"b\", \"c\"]\n# Output: [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('Other', 5), ('a', 7), ('b', 1), ('c', 8), ('d', 9)] ",
        "generated_testcode": "assert re_arrange_tuples(\n    [(\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5), (\"kiwi\", 3, 1)],\n    [3, 1, 2, 5]\n) == [(\"kiwi\", 3, 1), (\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5)]\n\n# The output should be [(\"kiwi\", 3, 1), (\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5)] ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    max_char = ''\n    max_count = 0\n    for key, value in char_dict.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char\n\nstr1 = input(\"Enter a string: \")\nprint(\"Most common character: \", max_char(str1)) ",
        "generated_testcode": "assert max_char(input(\"Enter a string: \") == 'e'\n\n# Test case 1:\n# Input: \"Hello, World!\"\n# Output: 'l'\n\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = p \n    j = p \n    k = p \n    diff = float('inf')\n    while i <= q and j <= q and k <= r: \n        val = abs(A[i] + B[j] + C[k] - target) \n        if val < diff: \n            diff = val \n            res = (A[i], B[j], C[k]) \n        if A[i] + B[j] + C[k] == target: \n            return (A[i], B[j], C[k]) \n        elif A[i] + B[j] + C[k] < target: \n            if abs(A[i+1] - A[i]) < abs(B[j+1] - B[j]): \n                i += 1 \n            elif abs(B[j+1] - B[j]) < abs(C[k+1] - C[k]): \n                j += 1 \n            else: \n                k += 1 \n        else: \n            if abs(A[i] - A[i-1]) < abs(B[j] - B[j-1]): \n                i -= 1 \n            elif abs(B[j] - B[j-1]) < abs(C[k] - C[k-1]): \n                j -= 1 \n            else: \n                k -= 1 \n    return res ",
        "generated_testcode": "assert find_closet(A, B, C, p, q, r) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(models, key=lambda x: x['make'])\n\ncars = [\n    {'make': 'Toyota', 'model': 'Corolla', 'year': 2015},\n    {'make': 'Honda', 'model': 'Accord', 'year': 2012},\n    {'make': 'Tesla', 'model': 'S', 'year': 2020},\n    {'make': 'Ford', 'model': 'F150', 'year': 2019},\n    {'make': 'Mazda', 'model': 'MX-5', 'year': 2010},\n    {'make': 'Ford', 'model': 'Mustang', 'year': 2010}\n]\n\nprint(sorted_models(cars))  # Output: [{'make': 'Ford', 'model': 'F150', 'year': 2019}, {'make': 'Ford', 'model': 'Mustang', 'year': 2010}, {'make': 'Honda', 'model': 'Accord', 'year': 2012}, {'make': 'Mazda', 'model': 'MX-5', 'year': 2010}, {'make': 'Toyota', 'model': 'Corolla', 'year': 2015}, {'make': 'Tesla', 'model': 'S', 'year': 2020}] ",
        "generated_testcode": "assert sorted_models(models) == [{'name': 'iPhone 11', 'year': 2020, 'price': 9999}, {'name': 'Samsung S20', 'year': 2020, 'price': 749}, {'name': 'iPhone 12', 'year': 2020, 'price': 10999}, {'name': 'Samsung S20 Ultra', 'year': 2020, 'price': 8999}]\n\n# The testing code should ",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    def heapify(arr, n, i, name):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest, name)\n\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1, -1):\n        heapify(arr, n, i, \"build_max_heap\")\n\n\n    for i in range(n - 1, 0, -1, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, \"heap_sort\")\n\n\n    return arr\n\n\n\narr = [12, 11, 13, 14, 10, 3, 16, 5, 7]\nprint(\"Unsorted Array: \", arr)\nprint(\"Sorted Array (heap_sort): \", heap_sort(arr))\n",
        "generated_testcode": "assert heap_sort(arr) == sorted(arr)\n\n# The testing code should create an array of at least 5 elements, call the heap_sort function on it, and ",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in num:\n        if type(i) == tuple:\n            break\n        count += 1\n    return count\n\n# Test the function with sample data\nmy_list = [1, 2, 3, 4, (5, 6, 7), 8, 9, 10, (11, 12, 13)]\nprint(count_elim(my_list)) # Output: 3 ",
        "generated_testcode": "assert count_elim([1, 2, 3, (4, 5, 6)] ) == 3\n\n\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for element in test_tup:\n        if element in check_list:\n            return True\n    return False\n\n# Test the function with an example\ntest_tup = (1, 5, 6, 8, 9, 10)\ncheck_list = [4, 7, 11, 13, 6, 9]\n\nprint(check_element(test_tup, check_list))  # Output: True ",
        "generated_testcode": "assert check_element(('apple', ['apple', 'banana', 'cherry']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    from heapq import heappush, heappop\n    res = []\n    heap = []\n    for i in num1:\n        heappush(heap, i)\n    for j in num2:\n        heappush(heap, j)\n    while heap:\n        res.append(heappop(heap))\n    return res\n    \nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nprint(combine_lists(num1, num2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert combine_lists(sorted([1,3,5,7,9],sorted([2,4,6,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n\n\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    numbers = []\n    position = []\n    for i, char in enumerate(text):\n        if char.isdigit():\n            numbers.append(char)\n            position.append(i)\n    return numbers, position\n\n\ntext = input(\"Enter a string: \")\nnumbers, position = num_position(text)\nprint(\"Numbers in the string: \", numbers)\nprint(\"Their positions in the string: \", position) ",
        "generated_testcode": "assert num_position(text=\"Hello 123 world 456\") == [(123, 6), (456, 13)]\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    s = set()\n    for i in t:\n        s.add(i)\n    return s\n\n# Test the function with a sample tuple\nt = (1, 2, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9)\nprint(tuple_to_set(t)) # Output: {1, 2, 3, 4, 5, 6, 7, 8, 9} ",
        "generated_testcode": "assert tuple_to_set(()) == set()\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    d={}\n    for i in s:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    l=[]\n    for i in a:\n        if i in d:\n            l.append((i,d[i]))\n        else:\n            l.append((i,0)\n    l.sort(key=lambda x:x[1],reverse=True)\n    return l[:3]\ns=\"Hello World! This is a sample text to find the most common elements in the text.\"\na=['a','o','l']\nprint(most_common_elem(s,a)) #[('l', 3), ('o', 2), ('e', 2)] ",
        "generated_testcode": "assert most_common_elem([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"date\", \"cherry\", \"date\", \"date\"] , 2) == [(\"cherry\", 3), (\"apple\", 2)]\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    length=[]\n    for i in list1:\n        length.append(len(i))\n    return min(length)\nlist1=['hello','world','python','programming']\nprint(len_log(list1))# Output: 2 ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"elephant\", \"eggplant\"]) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tup1[index]\n#Get the item at index 1\nprint(get_item((1,2,3,4,5,6,7),1)) #Output: 2\n\n\n#Get the item at index 3\nprint(get_item((1,2,3,4,5,6,7),3)) #Output: 4\n\n\n#Get the item at index -1(last item)\nprint(get_item((1,2,3,4,5,6,7),-1)) #Output: 7\n\n\n#Get the item at index -2(second last item)\nprint(get_item((1,2,3,4,5,6,7),-2)) #Output: 6 ",
        "generated_testcode": "assert get_item((\"hello\", 1) == \"e\"\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    for i in tup:\n        total += len(str(i))\n    return total\n\ndef sort_tup_list(tup_list):\n    tup_list.sort(key=count_digs)\n    return tup_list\n\ntup_list = (12, 5, 89, 345, 9, 56, 789, 23)\nprint(sort_tup_list(tup_list)) ",
        "generated_testcode": "assert count_digs(()) == 0\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if (year % 12) == 8:\n        return \"Dragon\"\n    elif (year % 12) == 9:\n        return \"Snake\"\n    elif (year % 12) == 10:\n        return \"Horse\"\n    elif (year % 12) == 11:\n        return \"Goat\"\n    elif (year % 12) == 0:\n        return \"Monkey\"\n    elif (year % 12) == 1:\n        return \"Rooster\"\n    elif (year % 12) == 2:\n        return \"Dog\"\n    elif (year % 12) == 3:\n        return \"Pig\"\n    elif (year % 12) == 4:\n        return \"Rat\"\n    elif (year % 12) == 5:\n        return \"Ox\"\n    elif (year % 12) == 6:\n        return \"Tiger\"\n    elif (year % 12) == 7:\n        return \"Hare\"\n\nyear = int(input(\"Enter a year: \"))\nprint(chinese_zodiac(year)) ",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given two lists of tuples, each with two integers, find the maximum number of similar tuples between them.\n    Two tuples are similar if they have the same first and second element.\n    \"\"\"\n    count = 0\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    for tup in set1:\n        if tup in set2:\n            count += 1\n    return count\n\n\n# test the function with sample inputs\nprint(max_similar_indices([(1, 2), (3, 4), (5, 6), (7, 8)], [(5, 6), (7, 8), (9, 10), (11, 12)])) # expected output: 2\nprint(max_similar_indices([(1, 2), (3, 4), (5, 6), (7, 8)], [(5, 6), (7, 8), (9, 10), (11, 12), (3, 4)])) # expected output: 3\nprint(max_similar_indices([(1, 2), (3, 4), (5, 6), (7, 8)], [(9, 10), (11, 12), (13, 14), (15, 16)])) # expected output: 0 ",
        "generated_testcode": "assert max_similar_indices([(1, 2), (3, 4), (5, 6), (7, 8)], [(2, 3), (4, 5), (6, 7), (8, 9)] ) == [(1, 0), (2, 2)]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if r > n:\n        return 0\n    numerator = 1\n    denominator = 1\n    for i in range(1, r + 1):\n        numerator = (numerator * (n - i + 1)) % p\n        denominator = (denominator * i) % p\n    return (numerator * pow(denominator, p - 2, p)) % p ",
        "generated_testcode": "assert nCr_mod_p(10, 2, 13) == 6\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ar.sort() \n    minsubset = [] \n    maxsubset = [] \n    for i in range(n): \n        minsubset.append([ar[i]]) \n        maxsubset.append([ar[n-i-1]]) \n    for i in range(n-1, -1, -1, -1): \n        for j in range(i): \n            minsubset[i-j].append(ar[j]) \n    for i in range(n): \n        maxsubset[i].append(ar[n-i-1]) \n    return minsubset, maxsubset \n      \ndef min_subset_difference(ar): \n    n = len(ar) \n    minsubset, maxsubset = subset(ar, n) \n    min_diff = float('inf') \n    for i in range(n//2): \n        diff = abs(sum(minsubset[i]) - sum(maxsubset[i]) ) \n        if diff < min_diff: \n            min_diff = diff \n    return min_diff \n      \n# Driver code \nar = [1, 2, 3, 4, 5, 6, 5, 4] \nn = len(ar) \nprint(min_subset_difference(ar)) ",
        "generated_testcode": "assert subset([\"apple\", \"banana\", \"orange\", \"grape\", \"apple\", \"banana\", \"orange\", \"apple\", \"orange\"], 3) == 2\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if sale_amount > actual_cost:\n        profit = sale_amount - actual_cost\n        return profit\n    else:\n        return None ",
        "generated_testcode": "assert profit_amount(1000, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) > n:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(is_abundant(12)) # True\nprint(is_abundant(18)) # True\nprint(is_abundant(20)) # False\nprint(is_abundant(24)) # True ",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    return re.findall('[A-Z][a-z]*', text)\n\ndef split_string(text):\n    return ' '.join(split_list(text))\n\nprint(split_string(\"HelloWorldNiceDay\")) # \"Hello World Nice Day\"\nprint(split_string(\"TheQuickBrownFoxJumpsOverTheLazyDog\")) # \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nprint(split_string(\"Hey, I'mAStringSplitter!\")) # \"Hey I m A String Splitter\" ",
        "generated_testcode": "assert split_list(text) == expected_output\n\n# Test case 1\ntext = \"HelloWorld\"\nexpected_output = [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pos = 0\n    while n:\n        pos += 1\n        n >>= 1\n    return pos - 1\n\n#Example:\n#Input: 7 which is 1111 in binary\n#Output: 3 (position of rightmost set bit) ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(15) == 3\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    val = [10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\n# Test the function with a sample integer\nnum = 39999\nprint(int_to_roman(num)) ",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0:\n        return 0\n    else:\n        return sum(lst) / len(lst)\n\n# Example usage:\nlst = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(Average(lst)) # Output: 4.5 ",
        "generated_testcode": "assert Average(lst=[1,2,3,4,5,6,7,8,9]) == 5\n\n\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n<=2:\n        return n\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n\n# test the function\n# Example 1:\nn = 3\nprint(get_noOfways(n))  # Output: 3\n\n\n# Example 2:\nn = 5\nprint(get_noOfways(n))  # Output: 8\n\n\n# Example 3:\nn = 10\nprint(get_noOfways(n))  # Output: 84\n\n\n# Time Complexity: O(n) \n# Space Complexity: O(n) ",
        "generated_testcode": "assert get_noOfways(2) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 5000, 'M': 10000}\n    total = 0\n    prev = 0\n    for i in s[::-1]:\n        curr = roman_dict[i]\n        if curr < prev:\n            total -= curr\n        else:\n            total += curr\n        prev = curr\n    return total\n",
        "generated_testcode": "assert roman_to_int(s) == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, n+1, 2): \n        sum += i\n    return sum\n  \n# Driver Code \nn = int(input(\"Enter the number upto which you want to find the sum of even numbers: \"))\nprint(\"Sum of even numbers from 1 to\", n, \"is\", sum_Natural(n)) ",
        "generated_testcode": "assert sum_Natural(2, 10) == 30 # Test case 1\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (b**2 - 4*a*c)\n\n# Write a function to check if the discriminant is greater than zero\ndef discriminant_greater_than_zero(x,y,z):\n    if discriminant_value(x,y,z) > 0:\n        return True\n    else:\n        return False\n# Write a function to calculate the root1\ndef root1(x,y,z):\n    return (-b + math.sqrt(discriminant_value(x,y,z))/2*a)\n# Write a function to calculate the root2\ndef root2(x,y,z):\n    return (-b - math.sqrt(discriminant_value(x,y,z))/2*a)\n# Write a function to calculate the roots\ndef roots(x,y,z):\n    if discriminant_greater_than_zero(x,y,z):\n        return (root1(x,y,z),root2(x,y,z))\n    else:\n        return None\n# Write a function to calculate the sum of the roots\ndef sum_of_roots(x,y,z):\n    if discriminant_greater_than_zero(x,y,z):\n        return (root1(x,y,z) + root2(x,y,z))\n    else:\n        return None\n# Write a function to calculate the product of the roots\ndef product_of_roots(x,y",
        "generated_testcode": "assert discriminant_value(1, 2, 1) == 0\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s) % 2 == 0: \n        print(\"Length of word is even\")\n    else: \n        print(\"Length of word is odd\")\n\n#example\nword_len(\"hello\") ",
        "generated_testcode": "assert word_len(\u201chello\u201d) == False\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if text == \"\":\n        return \"\"\n    return text[0].lower() + ''.join(['_'+char.lower() if char.isupper() else char for char in text[1:])\n\n\n# Test the function\nprint(camel_to_snake(\"helloWorld\"))  # Output: \"hello_world\"\nprint(camel_to_snake(\"hello\"))     # Output: \"hello\"\nprint(camel_to_snake(\"HELLOworld\")) # Output: \"HELLO_world\"\nprint(camel_to_snake(\"\"))        # Output: \"\"\n\n\n# Another way to write the function using regular expressions\nimport re\ndef camel_to_snake(text):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n\n# Test the function\nprint(camel_to_snake(\"helloWorld\"))  # Output: \"hello_world\"\nprint(camel_to_snake(\"hello\"))     # Output: \"hello\"\nprint(camel_to_snake(\"HELLOworld\")) # Output: \"HELLO_world\"\nprint(camel_to_snake(\"\"))        # Output: \"\"\n\n\n# Another way to write the function using recursion\ndef camel_to_snake(text):\n    if text == \"\":\n        return \"\"\n    if text[1].isupper():\n        return text[0].lower() + '_' + camel_to_",
        "generated_testcode": "assert camel_to_snake(text) == expected_output\n\n# Test case 1\ntext = \"helloWorld\"\nexpected_output = \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    tuple1 = list(filter(None, tuple1)\n    return tuple(tuple1)\n\n# Test the function with sample data\nL = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(L)) # Output: (('a', 'b'), ('a', 'b', 'c'), 'd') ",
        "generated_testcode": "assert remove_empty(L) == [('a', 'b'), ('a', 'b', 'c'), 'd']\n\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in string: \n        if i in vowels: \n            continue\n        else: \n            return False\n    return True\n\nstring = input(\"Enter a string: \")\nif check(string.lower()): \n    print(\"The string contains all vowels.\")\nelse: \n    print(\"The string does not contain all vowels.\") ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = 0\n    for i in range(N):\n        val = (A * i) % B\n        if val > max_val:\n            max_val = val\n    return max_val\n\n# Example usage:\n# A=10, B=14, N=100\n# print(floor_Max(A,B,N)) # Output: 9\n# A=10, B=20, N=13\n# print(floor_Max(A,B,N)) # Output: 13 ",
        "generated_testcode": "assert floor_Max(2, 5, 10) == 10\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        for j in test_list:\n            if i[0] == j[0] and i != j:\n                test_list.remove(j)\n                i += j\n        result.append(i)\n    return result\n\n#Example\n#Input: [(1, 2), (1, 3), (1, 4), (2, 4), (2, 5), (3, 4)]\n#Output: [(1, 2, 3, 4), (2, 4, 5), (3, 4)]\n\n# Explanation: The output is a list of tuples with similar initial elements joined together. ",
        "generated_testcode": "assert join_tuples([(1, 2), (1, 3), (1, 4)] ) == [(1, 2, 3, 4)]\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\n# Test the function with some values\nprint(min_of_two(2, 3)) # Output: 2\nprint(min_of_two(5, 4)) # Output: 4\nprint(min_of_two(7, 7)) # Output: 7\n\n\n# Write a function to find the minimum of three numbers\ndef min_of_three(x, y, z):\n    return min_of_two(x, min_of_two(y, z))\n\n# Test the function with some values\nprint(min_of_three(3, 6, 9)) # Output: 3\nprint(min_of_three(12, 8, 1)) # Output: 8\nprint(min_of_three(7, 7, 7)) # Output: 7\n\n# Write a function to find the minimum of four numbers\ndef min_of_four(x, y, z, a):\n    return min_of_two(min_of_two(x, y), min_of_two(z, a))\n# Test the function with some values\nprint(min_of_four(2, 4, 6, 8)) # Output: 2\nprint(min_of_four(3, 9, 7, 1)) # Output: 1\nprint(min_of_four(7, 7, 7, 7)) # Output: 7",
        "generated_testcode": "assert min_of_two(2, 3) == 2\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # finding the maximum count of segments of length a \n    counta = n // a \n    n = n % a \n  \n    # finding the maximum count of segments of length b \n    countb = n // b \n    n = n % b \n  \n    # finding the maximum count of segments of length c \n    countc = n // c \n  \n    # returning the total count of segments \n    return counta + countb + countc ",
        "generated_testcode": "assert maximum_segments(10, 3, 5) == 2\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (test_tup1 + test_tup2)\n\n#Test the function with example\ntest_tup1 = ((1,2,3), (4,5,6))\ntest_tup2 = ((7,8,9), (10,11,12))\nprint(concatenate_nested(test_tup1, test_tup2)) # Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)) ",
        "generated_testcode": "assert concatenate_nested((\"abc\", (1, 2, 3)) == (\"abc\", (1, 2, 3))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    d = d % len(s)\n    return s[d:] + s[:d]\n\ns = input(\"Enter the string: \")\nd = int(input(\"Enter the number of positions: \"))\nprint(\"Left rotated string: \",left_rotate(s,d))\n\n\n#Test case\n#1. s = \"hello\", d = 2\n#Output: llohe\n#2. s = \"abc\", d = 3\n#Output: cba ",
        "generated_testcode": "assert left_rotate(s,d) == \"hello\"\n# Test case 1:\ns = \"hello\"\nd = 2\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A) \n    dp = [[0] * n for i in range(n)] \n    dp[0][0] = A[0][0] \n    for i in range(1, n): \n        dp[i][0] = dp[i-1][0] + A[i][0] \n    for j in range(1, n): \n        dp[j][j] = dp[j-1][j-1] + A[j][j] \n    for i in range(1, n): \n        for j in range(1, i): \n            dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + A[i][j] \n    for i in range(1, n): \n        dp[i][i] = dp[i][i] + dp[i-1][i-1] \n    for i in range(n-2, -1, -1, -1): \n        for j in range(i, -1, -1, -1): \n            dp[i][j] = min(dp[i][j], dp[i+1][j]) + A[i+1][j] \n            if j != i: \n                dp[i][j] = min(dp[i][j], dp[i+1][j+1] + A[i+1][j",
        "generated_testcode": "assert min_sum_path(\n    [\n        [1],\n        [2, 3],\n        [4, 5, 6],\n        [7, 8, 9, 10]\n    ]) == 11 # Explanation: The minimum sum path is 1 -> 3 -> 5 -> 7\n\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]