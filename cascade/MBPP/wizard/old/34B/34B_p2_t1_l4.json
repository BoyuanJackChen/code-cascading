[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n+1)] for i in range(m+1)] \n  \n    # base condition: if we are at (0,0) \n    dp[0][0] = cost[0][0]  \n  \n    # initialization for first row \n    for i in range(1, m+1): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n  \n    # initialization for first column \n    for j in range(1, n+1): \n        dp[0][j] = dp[0][j-1] + cost[0][j] \n  \n    # fill the dp[][][] in bottom-up manner \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j] \n  \n    # return the cost to reach (m,n) \n    return dp[m][n] \n  \n# driver code \nif __name__ == '__main__': \n    cost = [[1, 2, 3], \n           [4, 8, 2], \n           [5, 3, 5]] \n    m = 2\n    n = 2\n    print(min_cost(cost",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 6\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return tuple(result)\n\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(similar_elements(test_tup1, test_tup2)) # Output: (2, 4, 6) ",
        "generated_testcode": "assert similar_elements(('apple', 'banana', 'orange', 'pear', 'grape'), ('banana', 'orange', 'grape', 'kiwi')) == ('banana', 'orange', 'grape')\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n    return True\n\n# Test the function with some examples\nprint(is_not_prime(15))\nprint(is_not_prime(10))\nprint(is_not_prime(7)) ",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # creating a max heap\n    for i in range(n//2,-1,-1,-1):\n        heapify(nums,n,i)\n    # removing the root element and replacing it with the last element\n    for i in range(n-1,0,-1):\n        nums[i],nums[0]=nums[0],nums[i]\n        heapify(nums,i,0)\n        # returned the sorted list in descending order\n    return nums[::-1]\ndef heapify(nums,n,i):\n    # finding the left and right child indexes\n    left=2*i+1\n    right=2*i+2\n    largest=i\n    if left<n and nums[left]>nums[i]:\n        largest=left\n    if right<n and nums[right]>nums[largest]:\n        largest=right\n    # swapping the elements if the parent is smaller than the child\n    if largest!=i:\n        nums[i],nums[largest]=nums[largest],nums[i]\n        heapify(nums,n,largest)\n\n# test the function\nnums=[5,9,3,6,7,2,8,1,4,10,4,21,19]\nn=len(nums)\nprint(heap_queue_largest(nums,n)) # [21,19,10,9,8,7,",
        "generated_testcode": "assert heap_queue_largest([4, 10, 8, 2, 6, 12, 9, 15, 11], 3) == [15, 12, 11]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        dp = [0] * (n+1)\n        dp[2] = 1\n        dp[3] = 2\n        for i in range(4, n+1):\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n        return dp[n]\n\n# Test the function\nn = 10\nprint(count_ways(n))\nn = 20\nprint(count_ways(n))\n\n# Output: 5361\n# Explanation: For n=10, there are 531 ways to fill the 3x10 board with 2x1 dominoes\n# For n=20, there are 1069259984335026765649255741955238916 ways to fill the 3x20 board with 2x1 dominoes ",
        "generated_testcode": "assert count_ways(0) == 0\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return (x != 0) and (x & (x - 1)) == 0 \ndef differ_by_one_bit(n, m):\n    if n == m:\n        return False\n    if is_Power_Of_Two(n ^ m):\n        return True\n    return False\n\n# Driver code \nn, m = 10, 11\nif differ_by_one_bit(n, m):\n    print(\"Yes\")\nelse:\n    print(\"No\") ",
        "generated_testcode": "assert is_Power_Of_Two(16) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b\\w{4,}\\b\"\n    result = re.findall(pattern, text)\n    return result\n\n# Testing the function with example\ntext = \"Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace.\"\nprint(find_char_long(text))\n\n# Output: ['Python', 'interpreted', 'high-level', 'general-purpose', 'programming', 'language', 'Guido', 'van', 'Rossum', 'first', 'released', '1991', 'design', 'philosophy', 'emphasizes', 'code', 'readability', 'significant', 'whitespace'] ",
        "generated_testcode": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog.']\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n# Example usage:\n# >>> square_nums([1, 2, 3, 4, 5])\n# [1, 4, 9, 16, 25]\n# Here's how the function works:\n# 1. It takes a list of numbers as input.\n# 2. It applies the lambda function (x**2) to each element of the list, which squares the element.\n# 3. It returns a new list containing the squared elements.\n# You can use this function to square elements of any list of numbers. ",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n    str += str\n    for i in range(n):\n        if(str[i:i+n-1] == str[n:2*n-1]):\n            return i\n    return -1\n\n# Example usage:\nstring = \"geeksforgeeks\"\nprint(find_Rotations(string)) # Output: 4\n\n# Example usage:\nstring = \"ABCABC\"\nprint(find_Rotations(string)) # Output: 2\n# Example usage:\nstring = \"ABABD\"\nprint(find_Rotations(string)) # Output: -1 ",
        "generated_testcode": "assert find_Rotations(\"hello\") == 0\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    list1.sort()\n    return list1[:n]\n\n# Test the function\nlist1 = [4, 6, 2, 9, 1, 7, 8, 5, 3]\nn = 3\nprint(small_nnum(list1, n)) # Output: [1, 2, 3]\n\n\n# Write a function to get the n largest items from a dataset.\ndef large_nnum(list1,n):\n    list1.sort(reverse=True)\n    return list1[:n]\n\n# Test the function\nlist1 = [4, 6, 2, 9, 1, 7, 8, 5, 3]\nn = 3\nprint(large_nnum(list1, n)) # Output: [9, 8, 7] ",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if s.find(ch) == -1:\n        return s\n    else:\n        s = s.replace(s[0],\"\")\n        s = s[:-1]\n        return s\n\ns = input(\"Enter a string: \")\nch = input(\"Enter a character to remove: \")\nprint(remove_Occ(s,ch)) ",
        "generated_testcode": "assert (remove_Occ(\"abcbc\",\"b\") == \"ac\")\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not M or not M[0]:\n        return M\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n# Test:\nM = [\n    [3, 2, 5],\n    [1, 4, 3],\n    [2, 7, 1]\n]\nprint(sort_matrix(M)) # Output: [[2, 7, 1], [3, 2, 5], [1, 4, 3]] ",
        "generated_testcode": "assert sort_matrix(\n    [\n        [3, 2, 1],\n        [6, 5, 4],\n        [9, 8, 7]\n    ]) == [\n        [9, 8, 7],\n        [6, 5, 4],\n        [3, 2, 1]\n    ], \"Example 1\"\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    return count\n\nwords = ['apple', 'banana', 'apple', 'orange', 'apple', 'banana', 'grape', 'orange', 'orange']\nprint(count_common(words))\n\n\n# Output: {'apple': 3, 'banana': 2, 'orange': 2, 'grape': 1} ",
        "generated_testcode": "assert count_common(['apple', 'banana', 'apple', 'orange', 'apple', 'banana', 'apple', 'orange']) == {'apple': 3, 'banana': 2, 'orange': 2}\n\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    volume = (1/2) * l * b * h\n    return volume\n\n#Test the function \n#Input values of l,b and h\nl = 5\nb = 4\nh = 8\n\n#Function call to find the volume of triangular prism\nprint(\"The volume of triangular prism is: \",find_Volume(l,b,h)) ",
        "generated_testcode": "assert find_Volume(2,3,4) == 12\n\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Split a string at lowercase letters.\n    Returns a list of strings, where each string starts with an uppercase letter\n    and contains only lowercase letters.\n    \"\"\"\n    output = []\n    current_word = \"\"\n    for char in text:\n        if char.isupper():\n            if current_word != \"\":\n                output.append(current_word)\n                current_word = \"\"\n        current_word += char\n    if current_word != \"\":\n        output.append(current_word)\n    return output\n\n# Example usage:\n# split_lowerstring(\"HelloWorldAndGoodbye\") -> [\"Hello\", \"World\", \"And\", \"Goodbye\"]\n\n# split_lowerstring(\"TheQuickBrownFox\") -> [\"The\", \"Quick\", \"Brown\", \"Fox\"]\n# split_lowerstring(\"Thequickbrownfox\") -> [\"Thequickbrownfox\"] ",
        "generated_testcode": "assert split_lowerstring(\"helloWorld\") == [\"hello\", \"World\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if text.islower():\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_lowercase_underscore(\"this_is_a_valid_sequence\")) # True\nprint(text_lowercase_underscore(\"This_is_not_a_valid_sequence\")) # False\nprint(text_lowercase_underscore(\"this_is_also_valid\")) # True\nprint(text_lowercase_underscore(\"_this_is_not_valid\")) # False\nprint(text_lowercase_underscore(\"this_is_not_valid!\")) # False\nprint(text_lowercase_underscore(\"THIS_IS_NOT_VALID_EITHER\")) # False ",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == True\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    perimeter = 4 * a\n    return perimeter\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    area = a ** 2\n    return area\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(length, width):\n    perimeter = 2 * (length + width)\n    return perimeter\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(length, width):\n    area = length * width\n    return area\n\n# Write a function to find the perimeter of a triangle.\ndef triangle_perimeter(side1, side2, side3):\n    perimeter = side1 + side2 + side3\n    return perimeter\n\n# Write a function to find the area of a triangle.\ndef triangle_area(base, height):\n    area = 0.5 * base * height\n    return area\n\n# Write a function to find the circumference of a circle.\nimport math\ndef circle_circumference(radius):\n    circumference = 2 * math.pi * radius\n    return circumference\n\n# Write a function to find the area of a circle.\ndef circle_area(radius):\n    area = math.pi * radius ** 2\n    return area\n\n# Write a function to find the volume of a sphere.\ndef sphere_volume(radius):\n    volume = (4 / 3) * math.pi * radius ** 3\n    return volume\n\n# Write a function",
        "generated_testcode": "assert square_perimeter(5) == 20\n\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(string)\ndef remove_char(str1, str2):\n    str1_list = str_to_list(str1)\n    str2_list = str_to_list(str2)\n    result = \"\"\n    for char in str1_list:\n        if char not in str2_list:\n            result += char\n    return result\n\n# Test the function with example strings\nstr1 = \"hello world\"\nstr2 = \"lo\"\nprint(remove_char(str1, str2)) # Output: \"he wrd\"\n\n\nstr1 = \"banana\"\nstr2 = \"ana\"\nprint(remove_char(str1, str2)) # Output: \"bn\"\n\n\nstr1 = \"programming\"\nstr2 = \"ng\"\nprint(remove_char(str1, str2)) # Output: \"progrma\" ",
        "generated_testcode": "assert str_to_list(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize an empty set\n    set_nums = set()\n    \n    # iterate through each element in the array\n    for num in arraynums:\n        # if the element is already in the set, return True\n        if num in set_nums:\n            return True\n        # otherwise, add the element to the set\n        else:\n            set_nums.add(num)\n    \n    # if there are no duplicates, return False\n    return False\n\n# test the function\narraynums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(test_duplicate(arraynums)) # False\narraynums = [1, 2, 2, 3, 4, 5, 6, 7, 8]\nprint(test_duplicate(arraynums)) # True ",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 4, 5, 6, 7]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0:\n        return True\n    n = x\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    if s % 10 == x % 10:\n        return True\n    else:\n        return False\n    \n# Test Cases\nprint(is_woodall(1234)) # True\nprint(is_woodall(547)) # False\nprint(is_woodall(9472)) # True\nprint(is_woodall(1233423)) # True\nprint(is_woodall(123456)) # False\nprint(is_woodall(1234567)) # False\nprint(is_woodall(1234423)) # True ",
        "generated_testcode": "assert is_woodall(1) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(1, m+1): \n        if(m % n == 0): \n            count = count + 1\n    return count \nm = int(input(\"Enter the number: \")\nn = int(input(\"Enter the multiple: \")\nprint(\"The multiples of\", n, \"from 1 to\", m, \"are:\") \nfor i in range(1, m+1): \n    if(m % n == 0): \n        print(i) \n    count = multiples_of_num(m,n) \nprint(\"The number of multiples of\", n, \"from 1 to\", m, \"is\", count) \n\n#example output\n#Enter the number: 20\n#Enter the multiple: 3\n#The multiples of 3 are:\n#3\n#6\n#9\n#12\n#15\n#18\n#The number of multiples of 3 from 1 to 20 is 5 ",
        "generated_testcode": "assert multiples_of_num(5, 10) == [10, 20, 30, 40, 50, 60]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 4, 5, 6, 6])) # Output: 4\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6])) # Output: -1 ",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == None\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in list1:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n    return max_sum\n\n# Example usage:\nlist1 = [[1,2,3,4], [5,6,7], [8,9,10,11]]\nprint(maximum_Sum(list1)) # Output: 33\n\nlist2 = [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]\nprint(maximum_Sum(list2)) # Output: 21 ",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]]) == 25\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\n# Test the function with an example binary number\nbinary = \"10101010\"\nprint(binary_to_decimal(binary))  # Output: 42 ",
        "generated_testcode": "assert binary_to_decimal(\"101010\") == 10\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr.sort() \n    product = 1\n    i = 0\n    j = 0\n    while i < n-1: \n        if arr[i] == arr[i+1]: \n            i += 1\n        else: \n            if j == 0: \n                product *= arr[i] \n            else: \n                product *= arr[i] - arr[j] \n            j = i + 1\n            i += 1\n    if j == 0: \n        product *= arr[i] \n    else: \n        product *= arr[i] - arr[j] \n    return product \n\n# test the function with an example array \narr = [2, 3, 4, 5, 4, 2, 6, 7] \nn = len(arr) \nprint(\"Product of non-repeated elements in array is:\", find_Product(arr, n)) ",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9]) == 36 # Testing for a normal array\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list) == K:\n        return True\n    else:\n        return False\n\n# Example usage:\n# Test cases\nprint(check_k_elements((1, 2, 3, 4, 5, 6), 4)) # Should return True\nprint(check_k_elements((1, 2, 4, 6), 3)) # Should return False\nprint(check_k_elements((1, \"python\", 3.5, \"is\", \"awesome\"), 4)) # Should return True\nprint(check_k_elements((1, 2, 3, \"hello\", \"world\", 4, \"python\", 5), 5)) # Should return True\nprint(check_k_elements((1, 2), 3)) # Should return False ",
        "generated_testcode": "assert check_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 9) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return [''.join(filter(lambda x: not x.isdigit(), string)) for string in list]\n\n# Example: \n# input: ['a1b2c3', 'd4e5f6', '7g8h9i']\n# output: ['abc', 'def', 'ghi']\n# Explanation: The function removes all digits from the strings in the given list and returns a new list with the filtered strings. ",
        "generated_testcode": "assert remove([\"hello\", \"world\", \"123\", \"python\", \"12345\", \"123abc\", \"abc456\"]) == [\"hello\", \"world\", \"\", \"python\", \"\", \"abc\"]\n\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if k<0 or k>n:\n        return \"Invalid input\"\n    res = 1\n    for i in range(k):\n        res*= (n-i)\n        res//= (i+1)\n    return res\n\n#Test the function with some values\nprint(binomial_Coeff(5,2)) #Output: 10\nprint(binomial_Coeff(7,3)) #Output: 35\nprint(binomial_Coeff(10,6)) #Output: 210\nprint(binomial_Coeff(5,-1)) #Output: Invalid input\nprint(binomial_Coeff(5,7)) #Output: Invalid input ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    ones=0\n    twos=0\n    common_bit_mask=0\n    for i in range(arr_size): \n        # 1. Using bitwise XOR to find the common element\n        common_bit_mask=common_bit_mask^arr[i] \n        # 2. Using bitwise AND operator to find if the bit is set or not set\n        # If it is set then it means the element occurs odd number of times else even number of times\n        if (common_bit_mask & arr[i])!=0: \n            ones=ones^arr[i] \n        else:\n            twos=twos^arr[i] \n    return ones ",
        "generated_testcode": "assert get_Odd_Occurrence([1,2,3,2,3,4,5,4,5,6,6,7,7,8,8,9,9,10,10]) == 1 ",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(s) \n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            if s[i] == s[j] and (j-i)%2 == 0: \n                count += 1\n    return count \n\n# Driver program to test the above function \ns = \"aabbaacddeeffgg\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(\"abcba\") == 4\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import heapq\n    if k > len(nums):\n        return []\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    heap = [(-freq[num], num) for num in freq]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(k)]\n    return result\n\n# Test case\nnums = [1,1,2,2,3,3,3,4,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7]\nk = 3\nprint(func(nums, k)) ",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_Prime = -1\n    while n % 2 == 0: \n        max_Prime = 2\n        n >>= 1\n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            max_Prime = i \n            n = n / i \n    if n > 2: \n        max_Prime = n\n    return int(max_Prime) \n\n# Test the function with a number\nn = 100\nprint(max_Prime_Factors(n)) ",
        "generated_testcode": "assert max_Prime_Factors(100) == 5\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\"\n    while(N > 0): \n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary\n  \n# Test the function with an example \ndecimal_number = 10\nbinary_number = decimal_To_Binary(decimal_number)\nprint(\"Binary representation of\", decimal_number, \"is\", binary_number) ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum_n = (N*(N+1)//2)\n    sum_ar = sum(ar)\n    return sum_n - sum_ar ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10], 10) == None\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n <= 0:\n        return 0\n    i = 1\n    while True:\n        num = i * (i + 1)\n        if n <= num:\n            return num\n        i += 1\n\n# Testing the function with some examples\nprint(find_rect_num(1))  # Output: 1\nprint(find_rect_num(2))  # Output: 4\nprint(find_rect_num(3))  # Output: 9\nprint(find_rect_num(10)) # Output: 36\nprint(find_rect_num(15)) # Output: 121\nprint(find_rect_num(22)) # Output: 49\nprint(find_rect_num(0))  # Output: 0\nprint(find_rect_num(100)) # Output: 100",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    a = p // q \n    p = p % q \n    result = 0\n    count = 0\n    while N >= count : \n        result = p // (q // (count % q) \n        p = p * 10\n        count += 1\n        if N == count : \n            return result \n        p = p - (result * (q // (count % q)) \n        result = result * 10 + p // q \n        p = p % q \n    return result ",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of integers and strings and returns the sorted list.\n    \"\"\"\n    # Create two empty lists to hold the integers and strings\n    int_list = []\n    str_list = []\n    # Iterate through the mixed_list\n    for item in mixed_list:\n        # If the item is an integer, append it to int_list. If it's a string, append it to str_list\n        if isinstance(item, int):\n            int_list.append(item)\n        else:\n            str_list.append(item)\n    # Sort both lists\n    int_list.sort()\n    str_list.sort()\n    # Merge the sorted int_list and str_list into a single list and return it\n    return int_list + str_list\n\n# Example usage:\nmixed_list = [3, 'apple', 1, 'banana', 2, 'orange', 4, 'pear', 'grape', 5]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 4, 5, 'apple', 'banana', 'grape', 'orange'] ",
        "generated_testcode": "assert sort_mixed_list([3, 'apple', 1, 'banana', 4, 'orange', 2, 'pear']) == [1, 2, 3, 4, 'apple', 'banana', 'orange']\n\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list, odd_list\n\n\n# Test the function with a sample list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven, odd = div_even_odd(list1)\nprint(\"Even List:\", even)\nprint(\"Odd List:\", odd)\n\n\n# Output:\n# Even List: [2, 4, 6, 8, 10]\n# Odd List: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (4, 5)\n\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for c in S:\n        freq[c] = freq.get(c, 0) + 1\n\n    odd_count = 0\n    for f in freq.values():\n        if f % 2 != 0:\n            odd_count += 1\n            if odd_count > 1:\n                return False\n    return True\n\n# test the function\nprint(rearange_string(\"abbac\")) # False\nprint(rearange_string(\"aabbc\")) # True ",
        "generated_testcode": "assert rearange_string(\"aaabbbcc\") == False\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    from collections import Counter\n    count_dict = Counter(nums)\n    freq_dict = {}\n    for key, value in count_dict.items():\n        if value > 1:\n            freq_dict[key] = value\n    return freq_dict\n\nnums = [1,2,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,7]\nprint(freq_element(nums)) ",
        "generated_testcode": "assert freq_element(nums=[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [2, 3, 4, 5]]) == {1: 1, 5: 2, 6: 1}\n\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n# Test the function with a list of numbers\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(filter_evennumbers(numbers)) ",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0,n): \n        j = i+1\n        while j < n: \n            if arr[i] == arr[j] and i != j: \n                sum += arr[i]\n                j += 1\n            else: \n                j += 1\n    return sum\n# Test the function with an example\narr = [2, 4, 1, 3, 5, 6, 2, 4, 1, 8]\nn = len(arr)\nprint(find_Sum(arr,n)) ",
        "generated_testcode": "assert find_Sum(arr,n) == 10 # if arr = [1,2,3,4,2,5,6,3] and n = 6\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r\"^[a-z]+_[a-z]+$\"\n    result = re.search(pattern, text)\n    return result != None\n\n# Test cases\nprint(text_match(\"a_b_c\")) # True\nprint(text_match(\"a_Bc\")) # False\nprint(text_match(\"a_b_c_d\")) # True\nprint(text_match(\"A_b_c\")) # False\nprint(text_match(\"a_1_c\")) # False\nprint(text_match(\"abc_def\")) # False ",
        "generated_testcode": "assert text_match(\"a_b_c\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r'^[a-zA-Z]+'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0)\n    else:\n        return None\n\n# Test the function with some examples\nprint(text_match_string(\"Hello world!\"))  # Should return \"Hello\"\nprint(text_match_string(\"123abc\"))  # Should return None\nprint(text_match_string(\"  Hello\"))  # Should return None\nprint(text_match_string(\"Hello 123\"))  # Should return \"Hello\"\nprint(text_match_string(\"Hello\"))  # Should return \"Hello\"\nprint(text_match_string(\"Hello there!\"))  # Should return \"Hello\"\n\n\n# This function uses the caret (^) to match the start of the string, and the character class [a-zA-Z] to match any uppercase or lowercase letter. \n# The + sign matches one or more of the preceding character, so this pattern will match one or more letters at the beginning of the string. \n# The re.search() function returns a match object if the pattern is found, or None if it isn't. The function then returns the matched text or None. ",
        "generated_testcode": "assert text_match_string(\"Hello world!\") == \"Hello\"\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y): \n        x, y = y, x % y \n    return x \ndef gcd_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \narr = [2, 4, 6, 8, 16] \nprint(\"GCD of the array is\", gcd_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 8) == 4\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n\n#testing the function with some sample data\ndata = [1,2,3,4,5,6,7]\nprint(test_distinct(data)) # True\n\ndata = [1,2,3,4,5,6,6]\nprint(test_distinct(data)) # False\ndata = [1,2,3,4,5,5,6]\nprint(test_distinct(data)) # False\ndata = [1,2,3,4,5,5,6,7,7]\nprint(test_distinct(data)) # False\ndata = [1,2,3,4,5,6,7,8,9]\nprint(test_distinct(data)) # True ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    def compute_Factorial(N): \n        fact = 1\n        for i in range(1,N+1): \n            fact = fact * i % 10\n        return fact \n    def compute_Last_Digit_Factorial_Division(A,B): \n        if A < B: \n            A, B = B, A \n        for i in range(A-B+1,A+1): \n            fact_A = compute_Factorial(A)\n            fact_B = compute_Factorial(i)\n            fact_A = fact_A % 10\n            fact_B = fact_B % 10\n            if fact_A == 0: \n                return 0\n            if fact_A != fact_B: \n                return fact_A\n        return 1\n    return compute_Last_Digit_Factorial_Division(A,B) ",
        "generated_testcode": "assert compute_Last_Digit(5, 10) == 2\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Set all the odd bits of a number to 1.\n    If the given number is 7 (which is 1111 in binary), it becomes 119 (which is 1100111 in binary).\n    \"\"\"\n    return n | (n >> 1)\n\n\n# Test the function with some examples\nprint(odd_bit_set_number(7))  # Output: 19\nprint(odd_bit_set_number(10)) # Output: 15\nprint(odd_bit_set_number(20)) # Output: 23\nprint(odd_bit_set_number(32)) # Output: 39\n\n\n# This function works by shifting the number to the right by one bit, which effectively halves its value and then taking the bitwise OR with the original number.\n# For example, for 7 (which is 1111 in binary), shifting it right by one bit gives 1110 (which is 3 in decimal).\n# The bitwise OR with the original number results in 1111 (which is 7). ",
        "generated_testcode": "assert odd_bit_set_number(0) == 0\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N])\n    return result\n\n# Test cases\ntwo_dimensional_list = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11]]\nprint(specified_element(two_dimensional_list, 2)) # [4, 8, 11]\n\nprint(specified_element(two_dimensional_list, 0)) # [1, 5, 9]\nprint(specified_element(two_dimensional_list, 1)) # [2, 6, 10] ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return min(input_list, key=lambda x: len(x))\n\n#Example:\ninput_list = [[1,2,3,4,5], [1,2,3], [1,2,3,4,5,6,7,8], [1], [1,2]]\nprint(min_length_list(input_list))  # Output: [1]\n\n\n#Solution: ",
        "generated_testcode": "assert min_length_list([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"grape\"]) == \"apple\"\n\n\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if x == y == z:\n        return True\n    else:\n        return False\n\n# Get the sides of the triangle from user input\na = int(input(\"Enter the length of side a: \"))\nb = int(input(\"Enter the length of side b: \"))\nc = int(input(\"Enter the length of side c: \")\n\n# Call the function to check if it is equilateral or not\nif check_equilateral(a,b,c):\n    print(\"It is an equilateral triangle\")\nelse:\n    print(\"It is not an equilateral triangle\") ",
        "generated_testcode": "assert check_equilateral(3, 3, 3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return b*h\n\n#test the function\nprint(parallelogram_area(10,20)==200) #True\nprint(parallelogram_area(5,15)==75) #True\nprint(parallelogram_area(7,8)==56) #True\nprint(parallelogram_area(2,4)==8) #True\nprint(parallelogram_area(11,6)==66) #True ",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n#Example:\n# Input: 'abcba'\n# Output: True\n# \n# Input: 'cdefg'\n# Output: False ",
        "generated_testcode": "assert (check_Equality(\"hello\") == True)\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    count_list = [0] * (max_val - min_val + 1)\n    for num in my_list:\n        count_list[num - min_val] += 1\n    sorted_list = []\n    for i in range(len(count_list)):\n        sorted_list.extend([i + min_val] * count_list[i])\n    return sorted_list\n\n\n# Test the function with an example usage\nmy_list = [4, 2, 1, 6, 5, 3, 4, 3, 2, 8, 1]\nprint(counting_sort(my_list)) ",
        "generated_testcode": "assert counting_sort([\"apple\", \"banana\", \"orange\", \"pear\", \"grape\", \"apple\"]) == [\"apple\", \"apple\", \"banana\", \"grape\", \"orange\", \"pear\"]\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    tn = a * (1 - (r**n)**(n-1))/(1-r)\n    return tn\n\na = float(input(\"Enter the first term: \"))\nr = float(input(\"Enter the common ratio: \"))\nn = int(input(\"Enter the term number: \"))\n\nif r > 1:\n    print(\"Infinite series\")\nelse:\n    print(\"The tnth term of the geometric series is: \",tn_gp(a,n,r)) ",
        "generated_testcode": "assert tn_gp(1, 5, 2) == 32\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return int(str(num)[::-1])\n\ndef is_one_less_than_twice_reverse(num):\n    if num - rev(num) == 1:\n        return True\n    return False\n\n# example usage\nprint(is_one_less_than_twice_reverse(123)) # False\nprint(is_one_less_than_twice_reverse(285)) # True ",
        "generated_testcode": "assert rev(123) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr.sort(reverse=True) \n    return int(\"\".join(arr)) \n  \n# Driver code \nif __name__ == \"__main__\" : \n    arr = list(map(str,input().split()) \n    n = len(arr) \n    print(find_Max_Num(arr, n)) \n\n#Example:\n# Input:\n# 3 34 32 6 9 0 1 \n# Output:\n# 93432601 ",
        "generated_testcode": "assert find_Max_Num([1, 3, 4, 5, 8, 7]) == 85431\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": " if x < 0 and y > 0 or x > 0 and y < 0: \n    return True \n  else: \n    return False \n\n#Example \nprint(opposite_Signs(-10,5))  #True \nprint(opposite_Signs(10,-5)) #True \nprint(opposite_Signs(10,5))  #False ",
        "generated_testcode": "assert opposite_Signs(5, -6) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns True if n is an octagonal number, False otherwise.\n    \"\"\"\n    if (1+8*n)**0.5) % 2 == 1:\n        return True\n    else:\n        return False\n\ndef octagonal_number(n):\n    \"\"\"\n    Returns the nth octagonal number\n    \"\"\"\n    return n*(2*n-1)\n\ndef find_octagonal_number(n):\n    \"\"\"\n    Returns the nth octagonal number.\n    \"\"\"\n    count = 1\n    while True:\n        oct_num = octagonal_number(count)\n        if is_octagonal(oct_num):\n            if count == n:\n                return oct_num\n            else:\n                count += 1\n        else:\n            count += 1\n\n# Test cases\nprint(find_octagonal_number(1)) # 1\nprint(find_octagonal_number(2)) # 2\nprint(find_octagonal_number(3)) # 6\nprint(find_octagonal_number(4)) # 15\nprint(find_octagonal_number(10)) # 160\nprint(find_octagonal_number(25)) # 578\nprint(find_octagonal_number(50)) # 22450\n\n\n# Explanation:\n# The octagonal numbers are 1, 6, 15, ",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_len = 0\n    dp = [0] * n\n    for i in range(1, n): \n        for j in range(i): \n            if abs(arr[i] - arr[j]) <= 1: \n                dp[i] = dp[j] + 1\n            else: \n                dp[i] = max(dp[i], dp[j]) \n    return max(dp) + 1\n  \n# Driver code \narr = [1, 2, 3, 5, 7, 9, 11, 13, 17] \nn = len(arr) \nprint(\"Length of longest subsequence:\", max_len_sub(arr, n)) ",
        "generated_testcode": "assert max_len_sub([1, 5, 3, 10, 2, 16, 2, 7, 14, 5, 3, 12] ) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(n):\n        for j in range(i,n):\n            sub=s[i:j+1]\n            if sum(int(digit) for digit in sub)==len(sub):\n                count+=1\n    return count\n\nn=int(input(\"Enter the length of string: \"))\ns=input(\"Enter the string: \")\nprint(count_Substrings(s,n)) ",
        "generated_testcode": "assert count_Substrings(\"123\") == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Return the smallest number in the list.\n    \"\"\"\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n\n# Test cases\nprint(smallest_num([3, 4, 5, 1, 2, 9, 7]) == 1)\nprint(smallest_num([2, 2, 3, 4, 5, 6, 1]) == 1)\nprint(smallest_num([7, 9, 5, 3, 2, 8]) == 2) ",
        "generated_testcode": "assert smallest_num([3, 5, 1, 2, 8, 4]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of tuples containing two integers, return the maximum difference between any pair of numbers\n    :param test_list: list of tuples\n    :return: maximum difference between any pair of numbers\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\n\n# Test cases\nprint(max_difference([(5, 10), (6, 2), (10, 4), (1, 11)]))  # Output: 9\nprint(max_difference([(1, 2), (4, 3), (10, 6), (9, 11)]))  # Output: 3\nprint(max_difference([(4, 5), (7, 3), (9, 2)]))  # Output: 4\nprint(max_difference([(9, 11), (5, 2), (1, 8), (3, 6)]))  # Output: 8\nprint(max_difference([(2, 10), (1, 2), (10, 11), (4, 5)]))  # Output: 9\nprint(max_difference([(7,",
        "generated_testcode": "assert max_difference((1, 2, 3, 10, 4, 7, 6, 9, 11, 5) == 8\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n\nsubjects = [('Maths', 90), ('Science', 80), ('Social', 85), ('English', 70), ('Hindi', 95)]\nprint(subject_marks(subjects)) # [('Hindi', 95), ('Science', 80), ('Maths', 90), ('English', 70)] ",
        "generated_testcode": "assert subject_marks([('Maths', 90), ('Science', 80), ('English', 85), ('Social', 95)] ) == [('Social', 95), ('Maths', 90), ('English', 85), ('Science', 80)]\n\n\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# Test function\ndef main():\n    print(recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])) # should return 25\n    print(recursive_list_sum([1, 3, 5, 7, 9])) # should return 13\n    print(recursive_list_sum([2, 4, 6, 8, 10])) # should return 20\n    print(recursive_list_sum([10, -2, 5, 3, 1, 1])) # should return 13\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n#test the function\nlist1 = [1, -2, 3, 4, -5, 6, 7, -8, 9, 10, -11, 12, 13, 0]\nprint(pos_count(list1))  # Output: 6 ",
        "generated_testcode": "assert pos_count([1, -2, 3, 4, -5, 6, -7, 8, 0, -9, 10]) == 4\n\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    bell = [[0 for i in range(n+1)] for j in range(n+1)]   \n    bell[0][0] = 1\n    for i in range(n+1): \n        bell[i][0] = 1\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i] * bell[i] \n        for j in range(n): \n            bell[i][j] = bell[i][j] + bell[i][j+1] \n    return bell[n][0] ",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(A)==1:\n        return True\n    else:\n        is_increasing = True\n        is_decreasing = True\n        for i in range(1,len(A)):\n            if A[i]<A[i-1]:\n                is_increasing = False\n            if A[i]>A[i-1]:\n                is_decreasing = False\n        return is_increasing or is_decreasing\n    \n    #Alternate way \n    #return all(A[i]>=A[i-1] for i in range(1,len(A)) and all(A[i]<=A[i-1] for i in range(1,len(A)) ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n\n# Test Cases\nprint(is_sublist([1,2,3,4,5,6,7,8], [1,2,3])) # True\nprint(is_sublist([1,2,4,3,5,6,7,8], [1,2,3])) # False\nprint(is_sublist([1,2,3,4,5,6,7,8], [4,5,6,7])) # True\nprint(is_sublist([1,2,3,4,5,6,7,8], [2,4,5,6])) # False\nprint(is_sublist([1,2,3,4,5,6,7,8], [8])) # True ",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return len(set(len(tup) for tup in Input)) == 1 and len(Input[0]) == k\n\n# Example usage:\n# Input: [(1,2,3),(4,5,6,7),(2,4,6,8,9),(1,5,7,9,11,13)]\n# k = 4\n# Output: False ",
        "generated_testcode": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            sorted = True\n            gap = 1\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n    return nums\n\n# Example usage:\nnums = [3, 2, 6, 8, 1, 4, 5, 9, 7]\nprint(comb_sort(nums))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert comb_sort(nums=[4, 2, 6, 1, 9, 7, 3, 8, 5, 0, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0: \n        return True\n    i = 1\n    j = n-1\n    while i <= j: \n        if i*i + j*j == n: \n            return True\n        elif i*i + j*j < n: \n            i += 1\n        else: \n            j -= 1\n    return False\n\n#Example:\n#Input : n = 10\n#Output : True \n#Explanation: 10 = 3^2 - 1^2\n\n#Input : n = 11\n#Output : False ",
        "generated_testcode": "assert (dif_Square(121)) # True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[;,\\s]\\s*')\n    return pattern.split(text)\n\n# Test the function with an example\ntext = \"apple;orange,banana, grapes  ; pineapple ;  mango\"\nprint(multiple_split(text)) # Output: ['apple', 'orange', 'banana', 'grapes', 'pineapple', 'mango'] ",
        "generated_testcode": "assert multiple_split(\"Hello, world! This is a test string.\") == [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\", \"string\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(colors)):\n        if patterns[0] == 'R':\n            if colors[i] != 'R':\n                return False\n        elif patterns[0] == 'Y':\n            if colors[i] != 'Y':\n                return False\n        elif patterns[0] == 'B':\n            if colors[i] != 'B':\n                return False\n        else:\n            if colors[i] == 'R' or colors[i] == 'Y' or colors[i] == 'B':\n                return False\n    return True\n\n# Test cases\nprint(is_samepatterns(['R', 'Y', 'B', 'B', 'R', 'Y', 'B', 'R', 'Y'], ['R', 'Y', 'B'])) # True\nprint(is_samepatterns(['R', 'Y', 'B', 'B', 'R', 'Y', 'R', 'Y'], ['R', 'Y', 'B'])) # False\nprint(is_samepatterns(['R', 'Y', 'B', 'R', 'Y', 'B', 'R', 'Y'], ['R', 'Y', 'B'])) # True\nprint(is_samepatterns(['R', 'Y', 'B', 'R', 'Y', 'R', 'B', 'R'], ['R', 'Y', 'B'])) # False ",
        "generated_testcode": "assert is_samepatterns(['red', 'green', 'blue', 'yellow'], ['a', 'b', 'c']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        flag = True\n        for i in tup:\n            if i % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result\n\n# Test the function with sample data\ntest_list = [(1, 2, 3), (4, 6, 12), (9, 12, 18), (16, 24, 27), (81, 27, 54)]\nK = 3\nprint(find_tuples(test_list, K) ) # Output: [(12, 12, 18)] ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (12, 15, 18), (21, 24, 27), (10, 20, 30)], 6) == [(12, 15, 18), (24, 30, 36)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the number of squares possible in a rectangle of size m x n.\n    \"\"\"\n    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            count += i*j\n    return count\n\n#test the function with some sample inputs\nprint(count_Squares(3,5)) #should return 35\nprint(count_Squares(2,2)) #should return 4\nprint(count_Squares(7,7)) #should return 147 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    even = 0\n    odd = 0\n    for i in str(n):\n        if int(i) % 2 == 0:\n            even += int(i)\n        else:\n            odd += int(i)\n    return even - odd\n    \nn = int(input(\"Enter a number: \"))\nprint(\"Difference between even and odd digits:\", is_Diff(n)) ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        set_bits = 0\n        num = i\n        while num:\n            set_bits += num & 1\n            num >>= 1\n        if set_bits % 2 != 0:\n            count += 1\n    return count\n\n# Test the function with an example\nn = 10\nprint(count_With_Odd_SetBits(n)) ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 4\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n#Example\n#word_len(\"hello\") should return \"odd\"\n#word_len(\"python\") should return \"even\"\n#word_len(\"hi\") should return \"odd\" ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (n + 1) * (n + 2) // 6\n\n# Test the function with some sample inputs\nprint(tetrahedral_number(1)) # Output: 1\nprint(tetrahedral_number(2)) # Output: 8\nprint(tetrahedral_number(3)) # Output: 20\nprint(tetrahedral_number(4)) # Output: 35\nprint(tetrahedral_number(5)) # Output: 56\n\n\n# Test the function with a loop to generate the first 10 tetrahedral numbers\nfor i in range(1, 11):\n    print(i, tetrahedral_number(i)) ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = tuple(zip(test_tup1, test_tup2))\n    return res\n\ntest_tup1 = (\"apple\", \"banana\", \"cherry\", \"date\")\ntest_tup2 = (1, 2, 3, 4)\nprint(zip_tuples(test_tup1, test_tup2)) # (('apple', 1), ('banana', 2), ('cherry', 3), ('date', 4)) ",
        "generated_testcode": "assert zip_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 3.14159\n    volume = (4/3) * pi * r**3\n    return volume\n\n# Test the function with a radius of 5\nprint(volume_sphere(5)\n# Output: 523.601986890289623674\n\n\n# Write a function to calculate the area of a rectangle.\ndef area_rectangle(length, width):\n    return length * width\n\n# Test the function with length 5 and width 10\nprint(area_rectangle(5, 10)\n# Output: 50\n\n# Write a function to calculate the perimeter of a rectangle.\ndef perimeter_rectangle(length, width):\n    return 2 * (length + width)\n\n# Test the function with length 5 and width 10\nprint(perimeter_rectangle(5, 10)\n# Output: 20\n\n# Write a function to find the third side of a right triangle given the length of the other two sides.\ndef find_side(side1, side2, side3):\n    sides = sorted([side1, side2, side3])\n    return sides[2]\n# Test the function with side1=3, side2=4, side3=unknown\nprint(find_side(3, 4, 0)\n# Output: 5.0\n\n# Write a function to calculate the area of a triangle given the base and height.\ndef area_triangle",
        "generated_testcode": "assert volume_sphere(5) == 523.6\n\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum)\n        \nstrr = input(\"Enter a string: \")\nprint(\"The character made by adding all the characters of the string is:\", get_Char(strr)) ",
        "generated_testcode": "assert get_Char(\"Hello\") == \"H\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1\n    else: \n        seq = [0, 1] \n        for i in range(2, n): \n            seq.append(seq[seq[seq[i-1]]+seq[i-seq[i-1]])\n        return seq[n-1] ",
        "generated_testcode": "assert sequence(1) == 1\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 22 / 7\n    surface_area = 4 * pi * r ** 2\n    return surface_area\n\n#Test the function\nprint(surfacearea_sphere(5)\nprint(surfacearea_sphere(7)\nprint(surfacearea_sphere(10) ",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1592653589793\n\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return n * (2 * n - 1) if n > 0 else 0\n\n# Test the function\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(3))  # Output: 15\nprint(centered_hexagonal_number(5))  # Output: 65\nprint(centered_hexagonal_number(10)) # Output: 285\n\n\n# Write a function to find the side of a centered hexagonal number\ndef side_of_centered_hexagonal(num):\n    if num <= 0:\n        return 0\n    import math\n    return int((math.sqrt(num * 8 + 1) + 1) // 4)\n\n# Test the function\nprint(side_of_centered_hexagonal(1))   # Output: 1\nprint(side_of_centered_hexagonal(15)) # Output: 4\nprint(side_of_centered_hexagonal(65)) # Output: 8\n\n# Write a function to find the number of centered hexagonal numbers below a given number\ndef num_centered_hexagonal_below(n):\n    if n <= 0:\n        return 0\n    import math\n    return int(math.sqrt(n * 4 - 3) // 2)\n# Test the function\nprint(num_centered_hexagonal_below(1",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5, 'f': 6}\ndict3 = {'g': 7, 'h': 8, 'i': 9}\n\nprint(merge_dictionaries_three(dict1,dict2,dict3)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} ",
        "generated_testcode": "assert merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'c': 4, 'd': 5, 'e': 6},\n    {'b': 3, 'f': 6}\n) == {'a': 1, 'b': 3, 'c': 4, 'd': 5, 'e': 6, 'f': 6}\n\n# Test case 1: Three dictionaries with common keys\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n\nlist1 = [1,2,3,4,2,5,6,2,7,1,8,2,3,9,1,1]\nprint(freq_count(list1))\n\n\n\ndef freq_count(list1):\n    freq = {}\n    for element in list1:\n        freq[element] = freq.get(element, 0) + 1\n    return freq\nlist1 = [1,2,3,4,2,5,6,2,7,1,8,2,3,9,1,1]\nprint(freq_count(list1))",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"orange\", \"banana\", \"apple\", \"cherry\", \"date\", \"date\"]) == {\"apple\": 3, \"banana\": 3, \"cherry\": 2, \"orange\": 1, \"date\": 2}\n\n\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # list of all the numbers from 1 to n\n    nums = list(range(1, N+1))\n    \n    # sort the list in ascending order\n    nums.sort()\n    \n    # reverse the list to get the descending order\n    nums.reverse()\n    \n    # initialize a variable to store the closest smaller number\n    closest = None\n    \n    # iterate through the list\n    for num in nums:\n        # if the number is smaller than n\n        if num < N:\n            # set closest to the number\n            closest = num\n            # break the loop\n            break\n        \n    # return the closest smaller number\n    return closest\n\n# test the function with some examples\nprint(closest_num(10)) # 9\nprint(closest_num(12)) # 11\nprint(closest_num(13)) # 12\nprint(closest_num(1)) # None\nprint(closest_num(100)) # 99 ",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\nlist1 = ['cat','dog','elephant','rabbit','turtle']\nprint(len_log(list1)) # output: 6 ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"watermelon\"]) == 9\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n\n#Test function with sample inputs\nprint(find_substring([\"hello\", \"world\", \"hi\", \"this\", \"is\", \"python\"], \"py\")) #True\nprint(find_substring([\"hello\", \"world\", \"hi\", \"this\", \"is\", \"python\"], \"java\")) #False ",
        "generated_testcode": "assert find_substring(['hello', 'world', 'hi', 'python', 'pythonista'], 'py') == ['python', 'pythonista']\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num_str = str(n)\n    for i in range(len(num_str)-1): \n        if num_str[i] == num_str[i+1]: \n            return False\n    return True\n\n#test the function\nprint(is_undulating(1234235)) # True\nprint(is_undulating(1234456)) # False\nprint(is_undulating(1233455)) # True\nprint(is_undulating(123543)) # True\nprint(is_undulating(125534)) # False ",
        "generated_testcode": "assert is_undulating(123235321) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b==0:\n        return 1\n    else:\n        return a * power(a,b-1)\n\n#test the function with examples\nprint(power(2,3)) # output: 8\nprint(power(10,2)) # output: 100\nprint(power(5,0)) # output: 1\nprint(power(1,10)) # output: 1 ",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    min_val = min(test_list, key=lambda x: x[1])\n    return min_val[0]\n\n#Test the function\ntest_list = [(1, 4),(2, 3), (3, 1), (4, 2), (0, 5)]\nprint(index_minimum(test_list)) # Output: 2\n\n\ntest_list = [(1, 4),(2, 3), (3, 5), (4, 2), (0, 5)]\nprint(index_minimum(test_list)) # Output: 1\n\n\ntest_list = [(1, 4),(2, 3), (3, 1), (4, 2), (0, 5), (4, 0)]\nprint(index_minimum(test_list)) # Output: 2 ",
        "generated_testcode": "assert index_minimum([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]) == (0, 1)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    min_length = len(lst[0])   #Assuming the first list as the minimum length\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n\n#Test the function with an example\nlst = [[1,2,3,4,5],[1,2,3,4,5,6],[1,2,3],[1,2,3,4,5,6,7,8]]\nprint(Find_Min_Length(lst))  #Output: 3 ",
        "generated_testcode": "assert Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\n#Test the function\nprint(divisor(12))  # Output: 6 (1, 2, 3, 4, 6, 12)\nprint(divisor(15))  # Output: 4 (1, 3, 5, 15)\nprint(divisor(20))  # Output: 6 (1, 2, 4, 5, 10, 20) ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\n\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 2, 3, 1, 4, 5, 1, 2, 4, 6, 7, 8, 9, 2, 1, 4, 3, 5]\nprint(frequency_lists(list1))\n\n",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"cherry\", \"date\", \"cherry\"]) == {\"apple\": 2, \"banana\": 2, \"cherry\": 3, \"date\": 1}\n\n\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(numbers) == 0:\n        return 0\n    else:\n        result = 1\n        for num in numbers:\n            result *= num\n        return result / len(numbers)\n\n#test function\nprint(multiply_num([1,2,3,4,5,6,7,8,9,10]) # Output: 255.0 ",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 30\n\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    binary = \"\"\n    while n > 0: \n        binary += str(n % 2) \n        n = n // 2\n    return binary[::-1]\n\n# Example usage:\n# print(decimal_to_binary(10))  # Output: \"1010\" ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\n\n# test the function\nprint(next_smallest_palindrome(123))\nprint(next_smallest_palindrome(123456))\nprint(next_smallest_palindrome(9999))\nprint(next_smallest_palindrome(123321)) ",
        "generated_testcode": "assert next_smallest_palindrome(123) == 131\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr.sort()  # sorting the array\n    return arr[k-1]\n\n# Driver code\narr = [7, 10, 4, 20, 3, 2, 15, 11]\nn = len(arr)\nk = 3\nprint(\"K-th element is:\", kth_element(arr, n, k)) ",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 6, 3) == 6\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    words = word.split('_')\n    return words[0] + ''.join(w.title() for w in words[1:])\n\n# Example usage:\nsnake_to_camel('hello_world') # Output: 'helloWorld'\n\n\n# Write a function to convert camel case to snake case.\ndef camel_to_snake(word):\n    return ''.join(['_' + c.lower() if c.isupper() else c for c in word]).lstrip('_')\n# Example usage:\ncamel_to_snake('helloWorld') # Output: 'hello_world' ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    elif m == 1:\n        return 1\n    else:\n        return (m-1) * (eulerian_num(n-1, m) + eulerian_num(n-1, m-1))\n\n\n# Test the function with n = 3 and m = 4\nprint(eulerian_num(3, 4)) # Output: 6 ",
        "generated_testcode": "assert eulerian_num(2, 2) == 6\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x: sorted(x), input_list) if isinstance(x, list) else x for x in input_list)\n\n# Test the function with an example\ninput_list = [\"banana\", \"apple\", \"cherry\", [3, 2, 1], \"orange\", [1, 6, 5, 4], [7, 8, 3, 9], \"grape\"]\nprint(sort_sublists(input_list)) ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"aebdg\", \"aeppl\", \"aeerr\", \"aepph\", \"aeppt\"]\n# Test case 1: Test the function with a list of strings.\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n#test the function with the sample test cases\nprint(count([True, False, True, True, False, True, False]) == 3)\nprint(count([False, False, False, False, False, False, False]) == 0)\nprint(count([True, True, True, True, True, True, True]) == 4)\nprint(count([True, False, True, False, True, False, True]) == 2) ",
        "generated_testcode": "assert count([True, False, True, True, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        result.append(tuple(test_list[i] + list(test_tup[i])) )\n    return result\n\n\ntest_list = [[1, 4, 6], [3, 5, 7], [2, 9, 8]]\ntest_tup = ((2, 3, 10), (1, 5, 8), (4, 7, 6))\nprint(add_lists(test_list, test_tup)) # Expected output: [(1, 4, 6, 2, 3, 10), (3, 5, 7, 1, 5, 8), (2, 9, 8, 4, 7, 6)] ",
        "generated_testcode": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # initialize a variable to store the result\n    result = 0\n    # convert L and R to decimal\n    L = int(L, 16)\n    R = int(R, 16)\n    # iterate from L to R+1, as range function excludes the upper limit\n    for i in range(L, R+1):\n        # convert i to a string and check if it contains only hexadecimal digits (0-9 and A-F or a-f)\n        if all(c in \"0123456789ABCDEFabcdef\" for c in hex(i)[2:]):\n            result += 1\n    return result\n# test the function with some examples\nprint(count_Hexadecimal(\"1000\", \"200\")) # 15\nprint(count_Hexadecimal(\"1AE\", \"1FF\")) # 15\nprint(count_Hexadecimal(\"0\", \"FFFF\")) # 75\nprint(count_Hexadecimal(\"ABC\", \"DEF\")) # 15\nprint(count_Hexadecimal(\"-100\", \"100\")) # 0, as -100 is not a valid hexadecimal number\nprint(count_Hexadecimal(\"ABC\", \"abc\")) # 15, case insensitive comparison is used ",
        "generated_testcode": "assert count_Hexadecimal(1, 10) == 2\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    while j < len(num2) and k < len(num3):\n        if num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    while i < len(num1) and k < len(num3):\n        if num1[i] < num3[k]:\n            merged_list.append(num1[i])\n           ",
        "generated_testcode": "assert merge_sorted_list(num1=[1,3,5,7],num2=[2,4,6],num3=[0,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n\n# Test case 1: Test the function with 3 sorted lists of integers.\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(n): \n        if(s[i]=='1'): \n            count+=1\n    return count%2\n\ndef count_Odd_Rotation(s,n): \n    count=0\n    for i in range(n): \n        if(odd_Equivalent(s,n)%2!=0): \n            count+=1\n        s=s[1:]+s[0]\n    return count \n\n#driver code \ns=input(\"Enter a binary string: \")\nn=len(s)\nprint(\"The count of binary strings with odd value after rotations is: \",count_Odd_Rotation(s,n)) ",
        "generated_testcode": "assert odd_Equivalent(1010101,5) == 3 # Testing for even length string\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    missing_ranges = []\n    i = strt_val\n    for num in sorted(test_list):\n        if i not in test_list:\n            missing_ranges.append((i, i))\n        else:\n            if i != num:\n                missing_ranges[-1] = (missing_ranges[-1][0], num-1)\n            i = num+1\n    if i != stop_val:\n        missing_ranges.append((i, stop_val))\n    return missing_ranges\n\n# Test the function with sample inputs\nprint(extract_missing([1, 2, 3, 5, 9, 10], 1, 10)) # should return [(4, 4), (6, 8)]\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7], 1, 7)) # should return []\nprint(extract_missing([1, 3, 5, 7, 8, 10, 11], 1, 10)) # should return [(2, 2), (4, 4), (6, 7), (9, 9)]\nprint(extract_missing([1, 2, 3, 4, 5, 6, 7], 1, 7)) # should return []\nprint(extract_missing([1, 3, 5, 7, 9, 10], 1, 10)) # should return",
        "generated_testcode": "assert extract_missing([\"1-3\", \"5-8\", \"10-11\"], 1, 11) == [\"4\", \"9\"]\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements.intersection_update(nestedlist[i])\n    return list(common_elements)\n\n\n\n# test the function with an example\nnestedlist = [[1, 2, 3, 4, 5, 6], [2, 3, 7, 8], [3, 4, 5, 9, 10], [1, 3, 5, 8, 11]]\nprint(common_in_nested_lists(nestedlist))  # Output: [3, 1] ",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {3}\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return (2*3.14*diameter/2 + 2*(3.14*diameter/2)*height)\n\n#Test the function with a diameter of 5 and height of 10\nprint(perimeter(5,10))\n#Output: 47.123889887143319314\n\n#Test the function with a diameter of 10 and height of 20\nprint(perimeter(10,20))\n#Output: 125.663681440834695658\n#Test the function with a diameter of 7.5 and height of 15\nprint(perimeter(7.5,15))\n#Output: 70.686276892626602988 ",
        "generated_testcode": "assert perimeter(5,10) == 78.139797567248060692\n\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:\nprint(check_integer(\"123\"))  # True\nprint(check_integer(\"-123\"))  # True\nprint(check_integer(\"+123\"))  # True\nprint(check_integer(\"1.23\"))  # False\nprint(check_integer(\"123a\"))  # False\nprint(check_integer(\"abc\"))  # False\nprint(check_integer(\"\"))    # False\nprint(check_integer(\" \"))   # False ",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# Example usage:\ntest_list = ('apple', 'banana', 'cherry', 'apple', 'banana', 'date', 'banana', 'cherry', 'date', 'date', 'date')\nprint(assign_freq(test_list)) # Output: {'apple': 1, 'banana': 2, 'cherry': 2, 'date': 3} ",
        "generated_testcode": "assert assign_freq(()) == {}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list1:\n        if i:\n            return False\n    return True\n\n# example\nlist1 = [{}, {}, {}]\nprint(empty_dit(list1)) # True ",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n\n# Test the function with some sample inputs\nprint(tuple_to_int((1, 2, 3, 4)) == 1234) # Should print True\nprint(tuple_to_int((9, 9, 9, 9) == 9999) # Should print True\nprint(tuple_to_int((1, 0, 1) == 101) # Should print True\nprint(tuple_to_int((0, 0, 0, 0) == 0) # Should print True ",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5)) == 12345\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for element in test_list:\n        try:\n            result.append(float(element))\n        except ValueError:\n            result.append(element)\n    return result\n\n\n# Test case\nprint(list_to_float([\"1.5\", \"2\", \"3\", \"four\", \"5.25\", \"six\"]) == [1.5, 2.0, \"four\", 5.25, \"six\"])\nprint(list_to_float([\"1\", \"2\", \"three\", \"4\", \"5.5\", \"6\"]) == [1.0, 2.0, \"three\", 5.5, 6.0])\n\n\n# Using list comprehension\ndef list_to_float(test_list):\n    return [float(element) if element.isdigit() or element.replace(\".\", \"\", 1).isdigit() else element for element in test_list] ",
        "generated_testcode": "assert list_to_float([\"1\", \"2.5\", \"3\", \"hello\", \"4.2\", \"world\"]) == [1.0, 2.5, \"hello\", 4.2, \"world\"]\n\n\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(string)\n\n# test the function with a sample string \nstring = \"Hello world\"\nprint(string_to_list(string)) # output: ['H', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n\n\n# create a function to reverse a list \ndef reverse_list(lst): \n    return lst[::-1]\n\n# test the function with a sample list \nlst = [1, 2, 3, 4, 5]\nprint(reverse_list(lst)) # output: [5, 4, 3, 2, 1]\n\n# create a function to check if a list is a palindrome \ndef is_palindrome(lst): \n    return lst == lst[::-1]\n\n# test the function with a sample list \nlst = [1, 2, 3, 2, 1]\nprint(is_palindrome(lst)) # output: True\n\n# create a function to find the maximum value in a list \ndef find_max(lst): \n    return max(lst)\n\n# test the function with a sample list \nlst = [1, 2, 3, 4, 5, 6]\nprint(find_max(lst)) # output: 6\n\n# create a function to find the minimum value in a list \ndef find_min(lst): \n    return min(lst)\n\n#",
        "generated_testcode": "assert string_to_list(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\n\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n<=1 :\n        return arr[0]\n    if arr[0] != arr[1] :\n        return arr[0]\n    for i in range(2, n-1, 2) :\n        if arr[i] != arr[i+1] :\n            return arr[i]\n    return arr[n-1]\n\nn = int(input(\"Enter the length of the array: \"))\narr = []\nprint(\"Enter the elements of the array: \")\nfor i in range(n):\n    arr.append(int(input())\nresult = search(arr,n)\nif result == -1 :\n    print(\"There is no element that appears only once in the array.\")\nelse :\n    print(\"The element that appears only once is: \", result) ",
        "generated_testcode": "assert search([1,1,2,2,3,3,4,5,5,6,6,7,7,8,8,9,9,10,10,11]) == 4\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list1) - 1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n#Test the function with some sample inputs\nprint(max_product_tuple([1, 2, 3, 4, 5, 6, 7])) # 21\nprint(max_product_tuple([4, 5, 6, 2, 8, 9])) # 36\nprint(max_product_tuple([10, 15, 2, 30, 3, 4])) # 300\nprint(max_product_tuple([1, -2, 3, 4, -5, 6])) # 12 ",
        "generated_testcode": "assert max_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)]) == 63\n\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(n-2):\n        # Initialize two pointers, left and right\n        left = i + 1\n        right = n - 1\n        # Loop through the array until the pointers meet\n        while left < right:\n            # Calculate the sum of the triplet\n            curr_sum = A[i] + A[left] + A[right]\n            if curr_sum == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif curr_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\n\n\n# Testing the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nsum_to_find = 30\ncount = 0\nprint(check_triplet(arr, len(arr), sum_to_find, count))\n\n",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, 0) == (1, 6, 8)\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    ans = 0\n    for i in range(1, n+1): \n        x = i \n        sum = 0\n        while (i > 0): \n            sum += i % 10\n            i //= 10\n        if (sum == 1): \n            ans += 1\n    return ans\n\n# Driver code \nn = 10\nprint(smartNumber(n)) ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # create a list to store the sums of each number's factors\n    sums = [0] * (limit + 1)\n    for i in range(2, limit + 1):\n        for j in range(2, int(i / 2) + 1):\n            if i % j == 0:\n                sums[i] += j\n                sums[i] += i // j\n    \n    # iterate over the list and find the amicable numbers\n    total = 0\n    for i in range(2, limit + 1):\n        if i != sums[i] and i == sums[sums[i]] and sums[i] <= limit:\n            total += i + sums[i]\n    \n    return total\n\n# test the function\nprint(amicable_numbers_sum(1000000)) # 316285\n\n",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 392282\n\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    angle = math.degrees(math.atan2(b,a))\n    if angle < 0:\n        angle += 360\n    return angle\n\n#example\nprint(angle_complex(3,4)) # 63.43 degrees (approximately) ",
        "generated_testcode": "assert angle_complex(1,1) == 45.0\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_diff = -1\n    zero = 0\n    one = 0\n    start = 0\n    for i in range(n): \n        if string[i] == '0': \n            zero += 1\n        else: \n            one += 1\n        if zero > one: \n            max_diff = max(max_diff, zero - one)\n        else: \n            max_diff = max(max_diff, one - zero)\n    return max_diff ",
        "generated_testcode": "assert find_length(10101100111) == 2\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = 0 \n    for i in range(1,a+1): \n        if(a%i == 0 and b%i == 0): \n            res += i \n    return res \n#Taking input from user \na = int(input(\"Enter first number: \") \nb = int(input(\"Enter second number: \") \n#Calling the sum function \nprint(sum(a,b)) ",
        "generated_testcode": "assert sum(12,15) == 30 # True\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(y):\n        result += x\n    return result\n\n# Test the function with two integers\nprint(multiply_int(5, 3)) # Output: 15\nprint(multiply_int(10, 5)) # Output: 50 ",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    words = str.split()\n    return [word for word in words if len(word) > n]\n\n\nprint(long_words(4, \"The quick brown fox jumps over the lazy dog\"))\n\n\n# Output: ['quick', 'jumps']\n\n\nprint(long_words(2, \"The quick brown fox jumps over the lazy dog\"))\n\n# Output: ['quick', 'brown', 'jumps', 'lazy']\n\n\nprint(long_words(5, \"The quick brown fox jumps over the lazy dog\"))\n# Output: ['quick', 'jumps'] ",
        "generated_testcode": "assert long_words(5, ['apple', 'banana', 'orange', 'pear', 'pineapple', 'watermelon', 'kiwi', 'grape', 'strawberry']) == ['banana', 'orange', 'pear', 'pineapple', 'watermelon']\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(my_matrix) == 0:\n        return False\n    N = len(my_matrix)\n    sum_list = []\n    for i in range(N):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(N))\n        if i == 0:\n            diag1_sum = sum(my_matrix[j][j] for j in range(N))\n            diag2_sum = sum(my_matrix[j][N-j-1] for j in range(N))\n        if row_sum != diag1_sum or col_sum != diag1_sum:\n            return False\n        sum_list.append(row_sum)\n    return len(set(sum_list)) == 1\n\n# Test cases\nmatrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nmatrix2 = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nmatrix3 = [[4, 9, 2], [3, 5, 7], [8, 1, 6]]\nmatrix4 = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nmatrix5 = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]",
        "generated_testcode": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    max_count = 0\n    max_num = None\n    for num, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num\n\n# Example usage:\nnums = [1, 2, 3, 2, 4, 1, 1, 5, 6, 2, 3, 1, 7, 2, 8, 3, 2, 1, 9, 1, 2, 1]\nprint(max_occurrences(nums))  # Output: 1 ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 3, 4, 5, 2, 6, 1, 1, 1]) == 1\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    vowels = \"aeiouAEIOU\"\n    n = len(str1)\n    str1 = list(str1)\n    i = 0\n    j = n-1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        if str1[j] not in vowels:\n            j -= 1\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n\n# Test the function with some examples\nprint(reverse_vowels(\"hello\"))\nprint(reverse_vowels(\"leetcode\"))\nprint(reverse_vowels(\"AIBOhphobia\")) ",
        "generated_testcode": "assert reverse_vowels(\"hello\") == \"holle\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1[:-1]\n# Example usage:\n# tup_string((1,2,3,4)) -> \"1 2 3 4\"\n# tup_string((\"Hello\", \"World\") -> \"Hello World\"\n# tup_string((\"Python\", \"Programming\") -> \"Python Programming\"\nprint(tup_string((1, 2, 3, 4)) + \"\\n\" + tup_string((\"Hello\", \"World\") + \"\\n\" + tup_string(\"Python\", \"Programming\")) ",
        "generated_testcode": "assert tup_string((1,2,3,4,5,6)) == \"1,2,3,4,5,6\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(filter(lambda x: x < 0, nums))\n\n# Test the function with sample input\nprint(sum_negativenum([1, 2, 3, -4, -5, 6, -7, 8, -9]))  # Output: -12 ",
        "generated_testcode": "assert sum_negativenum([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == -30\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(p):\n        if arr[-1]%2==0:\n            arr.pop(-1)\n            arr.pop(-1)\n            arr.append(arr[-1]+arr[-2])\n        else:\n            arr.pop(-1)\n            arr.append(arr[-1]*2)\n    if arr[-1]%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nn = int(input(\"Enter the size of array : \"))\narr = list(map(int, input(\"Enter the array elements : \".split()))\np = int(input(\"Enter the number of operations to be performed : \"))\nprint(check_last(arr,n,p)) ",
        "generated_testcode": "assert (check_last([1,2,3,4,5,6],4,2) == True)\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (2 * n - 1) if n > 0 else 0\n\n# Test the function with some sample inputs\nprint(hexagonal_num(1) == 1)   # Should print True\nprint(hexagonal_num(2) == 6)   # Should print True\nprint(hexagonal_num(3) == 15)  # Should print True\nprint(hexagonal_num(10) == 190) # Should print True\nprint(hexagonal_num(0) == 0)   # Should print True ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if units<=100:\n        return units*0.50\n    elif units>100 and units<=300:\n        return (100*0.50+(units-100)*0.75)\n    else:\n        return (100*0.50+(200*0.75+(units-300)*1.2)\n\n#units=int(input(\"Enter the number of units consumed: \"))\n#print(\"Electricity bill: \",cal_electbill(units)) ",
        "generated_testcode": "assert cal_electbill(100) == 5.5\n\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n\n#test the function with an example array\nprint(zero_count([1, 2, 0, 3, 0, 4, 5, 0, 0])) #output: 0.3333333333333333333333\n\n\n#modify the function to return the index of the first zero element (if any)\ndef zero_index(nums):\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            return i\n    return -1 #indicates that there are no zeroes in the array\n\n#test the modified function\nprint(zero_index([1, 2, 3, 4, 5, 6, 7])) #output: -1\nprint(zero_index([1, 0, 3, 0, 4, 5, 0, 7])) #output: 1\n\n#modify the function to return a list of all indices where zeroes appear in the array\ndef zero_indices(nums):\n    indices = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            indices.append(i)\n    return indices if indices else -1 #indicates that there are no zeroes in the array\n\n",
        "generated_testcode": "assert zero_count([1, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 8, 0, 9]) == 0.5\n\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return True\n    while n: \n        if n & 1: \n            n -= 1\n        n >>= 1\n    return n == 0\n\n# Test the function with examples\nprint(is_Sum_Of_Powers_Of_Two(12)) # Explanation: 12 can be represented as 4 + 4 + 4, which are non-zero powers of 2. ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference\n\n# Test the function with a radius of 5\nprint(circle_circumference(5)\n\n# Output: 31.4\n\n\n# Write a function to find the area of a circle\ndef circle_area(r):\n    pi = 3.14\n    area = pi * r ** 2\n    return area\n\n# Test the function with a radius of 5\nprint(circle_area(5)\n# Output: 78.5 ",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for element in test_list:\n        if test_list.count(element) == 1:\n            result.append(element)\n    return result\n\n\n# test the function\ntest_list = (1, 2, 3, 4, 1, 5, 6, 2, 7, 8, 9, 7, 10, 10, 10, 11, 12, 13, 14, 14)\nprint(extract_singly(test_list) ) ",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'c', 'd', 'h', 'i', 'e') == ('f', 'g', 'h', 'i')\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    cur = len(nums)\n    while cur > 1:\n        # Find the maximum number in nums\n        max_index = nums.index(max(nums[:cur])\n        # Reverse from 0 to max_index\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        # Reverse whole list\n        nums = nums[:cur][::-1]\n        cur -= 1\n    return nums\n\n# Example usage:\nnums = [4, 2, 5, 1, 3, 6, 7, 5, 8, 9, 12, 11]\nsorted_nums = pancake_sort(nums)\nprint(sorted_nums)  # Output: [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 11, 12] ",
        "generated_testcode": "assert pancake_sort([4, 2, 5, 1, 3, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] in list3:\n                count += 1\n                list3.remove(list1[i])\n                break\n    return count\n# test the function\nlist1 = [1,2,3,4,5,6]\nlist2 = [2,3,5,7,8]\nlist3 = [2,3,6,9,10]\nprint(count_samepair(list1,list2,list3)) # Output: 2 ",
        "generated_testcode": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 1\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count \n#Test the function with an example: \nmy_tuple = (1, 2, [3, 4], [5, 6], (7, 8), [9, 10], 11, [12, [13, 14], 15], 16) \nprint(find_lists(my_tuple) ) # Output: 3 ",
        "generated_testcode": "assert find_lists((1,2,3,4,5,6,7,8,9,10) == 0\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n-1): \n        for j in range(i+1,n): \n            sum += abs(arr[i]-arr[j]) \n    return sum \n# Driver code \narr = [3,5,2,1,4] \nn = len(arr) \nprint(sum_Pairs(arr,n)) # Output: 7\n\n\n#Explanation:\n#The sum of absolute differences in all pairs of the given array [3,5,2,1,4] is:\n#|3-5| + |3-2| + |3-1| + |3-4| + |5-2| + |5-1| + |5-4| + |2-1| + |2-4| = 5 + 3 + 2 + 2 + 3 + 3 + 3 + 3 + 1 + 2 = 20 ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5,6,7,8,9]) == 20 # True\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    maxDiff = arr[1] - arr[0] \n    min_element = arr[0] \n    max_element = arr[0] \n    for i in range( 1, n): \n        if arr[i] < min_element: \n            min_element = arr[i] \n        else: \n            if arr[i] - min_element > maxDiff: \n                maxDiff = arr[i] - min_element \n        if arr[i] > max_element: \n            max_element = arr[i] \n        elif arr[i] - max_element > maxDiff: \n            maxDiff = arr[i] - max_element \n    return maxDiff ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in str1:\n        sum += ord(i)\n    return sum\n\n# Test the function with sample inputs\nstr1 = \"Hello\"\nprint(ascii_value_string(str1)  # Output: 532\n\nstr2 = \"World\"\nprint(ascii_value_string(str2)  # Output: 5528\nstr3 = \"Python\"\nprint(ascii_value_string(str3)  # Output: 6688\n",
        "generated_testcode": "assert ascii_value_string(\"Hello\") == 532\n# Test case 1: Testing with a small string \"Hello\" and the expected output is 532. ",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(m-2, -1, -1, -1): \n        for j in range(i+1): \n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n    return tri[0][0]\n\n# Example usage:\n# triangle = [\n#     [1, 3, 5],\n#     [2, 4, 6],\n#     [7, 9, 8, 1]\n# ]\n# m = len(triangle) \n# n = len(triangle[-1]) \n# print(max_path_sum(triangle, m, n)) # Output: 16\n\n# triangle = [\n#     [1, 3, 5, 2],\n#     [2, 4, 6, 1],\n#     [7, 9, 8, 1, 4],\n#     [1, 1, 1, 1, 1]\n# ]\n# m = len(triangle) \n# n = len(triangle[-1]) \n# print(max_path_sum(triangle, m, n)) # Output: 18\n# triangle = [\n#     [1],\n#     [2, 3],\n#     [4, 5, 6],\n#     [7, 8, 9, 1],\n#     [1, 1, 2, 3, 4]\n#",
        "generated_testcode": "assert max_path_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 23\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = 0\n    while x > 0 : \n        res = res + x % 10\n        x = x // 10\n    return res \n\ndef max_sum_divide(num):\n    if num < 10: \n        return 0\n    else: \n        temp = num\n        res = 0\n        while temp > 9: \n            res = temp % 10\n            temp = temp // 10\n            res += temp % 10\n            temp = temp // 10\n        return res \n\n# Driver code \nnum = 123456\nprint(\"Original Number:\", num)\nprint(\"Maximum sum of digits:\", max_sum_divide(num)) ",
        "generated_testcode": "assert sum_digits_single(123) == (1, 23)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n < 2:\n        return n\n    \n    arr.sort()\n    max_len = 1\n    i = 0\n    for j in range(1, n):\n        if arr[j] - arr[i] == 1:\n            max_len += 1\n        else:\n            i = j\n    return max_len\n\n# Example usage:\narr = [4, 5, 6, 7, 8, 9, 9, 10, 12, 13, 14, 17]\nn = len(arr)\nprint(longest_subseq_with_diff_one(arr, n))  # Output: 4\n\n\n# Time Complexity : O(nlogn) due to sorting\n# Space Complexity : O(1) ",
        "generated_testcode": "assert longest_subseq_with_diff_one(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a+b+c<=0 or a+b-c<=0:\n        return False\n    elif a+b+c==1 or a+b-c==1:\n        return True\n    else:\n        while a+b+c>1 and a+b-c>1:\n            a,b,c=a+b,b+c,a-c\n        return a%2==0 ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if(p%q==0):\n        return q\n    else:\n        return gcd(q,p%q)\ndef is_coprime(a,b):\n    if(gcd(a,b)==1):\n        return True\n    else:\n        return False\nprint(is_coprime(12,15)) #True\nprint(is_coprime(12,16)) #False ",
        "generated_testcode": "assert gcd(12,8) == 4\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i=j=0\n    sorted_arr=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            sorted_arr.append(a[i])\n            i+=1\n        else:\n            sorted_arr.append(b[j])\n            j+=1\n    sorted_arr.extend(a[i:])\n    sorted_arr.extend(b[j:])\n    return sorted_arr\n\ndef merge_sort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    left=arr[:mid]\n    right=arr[mid:]\n    left=merge_sort(left)\n    right=merge_sort(right)\n    return merge(left,right)\n\ndef sort_array(arr):\n    return merge_sort(arr) ",
        "generated_testcode": "assert merge([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\"], [\"peach\", \"pear\", \"plum\", \"kiwi\", \"orange\"]) == [\"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"pear\", \"pear\", \"plum\"]\n\n\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a == 0:\n        return \"a can't be 0\"\n    else:\n        x = -b / (2 * a)\n        y = a * x ** 2 + b * x + c\n        return (x, y)\n\n# Test the function with some examples\nprint(parabola_vertex(1, 2, 3)) # (1.0, -2.0)\nprint(parabola_vertex(3, -4, 1)) # (0.6666666666666666666667, -0.666666666666666666666)\nprint(parabola_vertex(2, 4, 2)) # (-1.0, 2.0)\nprint(parabola_vertex(0, 2, 3)) # a can't be 0 ",
        "generated_testcode": "assert parabola_vertex(1, -14, 10) == (-3, 0)\n\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N-1])\n    return result\n\n# test the function\nnums = [[1,2,3],[4,5,6],[7,8,9]]\nprint(specified_element(nums, 2)) # output: [3, 6, 9] ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # return ((n^(n&-2)) & 0xffffffff)  # XORing with all even bits set (0xfffffffe) will toggle all even bits\n    # Using bitwise operators \n    return (n^(0x55555555555) & 0xffffffff)  # XORing with 1 in every even bit position\n\n\n# Testing the function with an example \nn = 30\nprint(\"Original number: \", bin(n))\nprint(\"After toggling even bits: \", bin(even_bit_toggle_number(n)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 is 10 in binary, and after toggling the even bits, it becomes 1010, which is 10 in decimal.\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Convert a tuple of string values to a tuple of integer values\n\n    :param tuple_str: tuple of string values\n    :return: tuple of integer values\n    \"\"\"\n    return tuple(int(i) for i in tuple_str)\n\n\n# Example usage:\ntup_str = ('1', '2', '3', '4', '5')\nprint(tuple_int_str(tup_str))  # Output: (1, 2, 3, 4, 5)\n\n\n#Write a function to convert a list of tuples to a dictionary.\ndef list_to_dict(lst):\n    \"\"\"\n    Convert a list of tuples to a dictionary\n    :param lst: list of tuples\n    :return: dictionary\n    \"\"\"\n    return dict(lst)\n\n# Example usage:\nlst = [('a', 1), ('b', 2), ('c', 3)]\nprint(list_to_dict(lst))  # Output: {'a': 1, 'b': 2, 'c': 3} ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    encoded_list = []\n    count = 1\n    prev_element = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] == prev_element:\n            count += 1\n        else:\n            encoded_list.append((count, prev_element))\n            count = 1\n            prev_element = list1[i]\n    encoded_list.append((count, prev_element))\n    return encoded_list[1:]\n\n\n\n# Test the function with an example\nprint(encode_list([1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8]))  # Output: [(2, 1), (1, 2), (3, 3), (4, 4), (4, 5), (3, 6), (4, 7), (4, 8)] ",
        "generated_testcode": "assert encode_list([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"d\",\"d\",\"d\",\"d\",\"d\"]) == [(\"a\",1),(\"b\",2),(\"c\",3),(\"d\",3)]\n\n\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr.sort() \n    count = 0\n    i = 0\n    j = n-1\n    while i < j: \n        count += k-arr[i] \n        count += arr[j] - k \n        i += 1\n        j -= 1\n    return count//2\n  \n# Driver code \narr = [2, 5, 7, 1, 5, 3, 4] \nn = len(arr) \nk = 4\nprint(\"Minimum operations required to make all elements equal to k are:\",min_Ops(arr, n, k)) ",
        "generated_testcode": "assert min_Ops([4,2,5,6,8],4,10) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if month in [12,1,2]:\n        if days>=21:\n            return \"Winter\"\n        elif days<=20:\n            return \"Autumn\"\n    elif month in [3,4,5]:\n        return \"Spring\"\n    elif month in [6,7,8]:\n        return \"Summer\"\n    elif month in [9,10,11]:\n        return \"Fall\"\n    else:\n        return \"Error\"\nprint(month_season(int(input(\"Enter the month (1-12): \"),int(input(\"Enter the day (1-31): \")))\n        ",
        "generated_testcode": "assert month_season(1,1) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if b == 0:\n        if n % a == 0:\n            return 1, None\n        else:\n            return \"No solution\"\n    if a == 0:\n        if n % b == 0:\n            return None, 1\n        else:\n            return \"No solution\"\n    if a == b:\n        if n % a == 0:\n            return 1, 1\n        else:\n            return \"No solution\"\n    else:\n        x = n // a\n        y = (n - x * a) // b\n        if y * b == n - x * a:\n            return x, y\n        else:\n            return \"No solution\"\n\n# Test the function with some examples\nprint(solution(2, 3, 5)) # Should return (1, 1)\nprint(solution(2, 3, 6)) # Should return (3, 0)\nprint(solution(2, 3, 7)) # Should return \"No solution\"\nprint(solution(2, 4, 8)) # Should return (2, 0) ",
        "generated_testcode": "assert solution(2, 3, 5) == (1, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two lists as input, list1 and list2, and returns a new list with all elements from list2 removed from list1\n    \"\"\"\n    # create an empty list to store elements to be removed\n    elements_to_remove = []\n    # loop through each element in list2 and add it to the remove list if it's present in list1\n    for element in list2:\n        if element in list1:\n            elements_to_remove.append(element)\n    # loop through each element in the remove list and remove it from list1\n    for element in elements_to_remove:\n        list1.remove(element)\n    # return the modified list1 with all elements from list2 removed\n    return list1\n\n# example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [2, 4, 6]\nresult = remove_elements(list1, list2)\nprint(result) # prints [1, 3, 5, 7] ",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5, 6], [2, 4]) == [1, 3, 5, 6]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n\n# test the function\nprint(sum_series(10)) # Output: 30 (10+8+6+4+2 = 20) ",
        "generated_testcode": "assert sum_series(4) == 4\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    area = (l**2 / (4 * (s**2 - (s**2/(2*tan(pi/n))**2))\n    return area\n    \n#Calculate the area of a regular polygon with side length 5 and 7 sides.\narea_polygon(5,7) \n\n#Calculate the area of a regular polygon with side length 7 and 10 sides.\narea_polygon(7,10) ",
        "generated_testcode": "assert area_polygon(5, 3) == 7.0740778276386, \"The area of a regular pentagon with side length 3 should be approximately 7.07\"\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n\ndef sum_same(n1, n2): \n    if divSum(n1) == divSum(n2):\n        return True\n    else:\n        return False\n\n#Test the function with examples\nprint(sum_same(220, 220)) #True\nprint(sum_same(14, 4)) #False ",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and ord(str1[i]) == (i+65) or ord(str1[i]) == (i+97):\n            count += 1\n    return count\n\n# Test the function with a sample string \nstr1 = \"HelloWorld\"\nprint(count_char_position(str1) ) # Output: 2\nstr2 = \"Python\"\nprint(count_char_position(str2) ) # Output: 1 ",
        "generated_testcode": "assert count_char_position(\"Hello World\") == 2 # Testcase 1\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(N): \n        for j in range(i + 1, N): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count \n\n# example usage:\nA = [2, 3, 1, 6, 8, 5]\nN = len(A)\nprint(find_even_Pair(A, N)) ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9],5) == 4\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 1\n    while (power < n): \n        power <<= 1\n    return power\n  \n# Testing the function with some examples\nn = 100\nprint(next_Power_Of_2(n)) ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            freq += 1\n    return freq\n\n# Test the function with an example array and number\na = [1,2,3,4,5,6,2,3,7,8,2,9,2,4,5]\nx = 2\nprint(\"Frequency of\",x,\"in the array is: \",frequency(a,x)) ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,2,3,4,2,1,2,3,4,5,6,7,8,9,2,3,4,5], 2) == 4\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        a, b = 1, 2\n        for i in range(3, n+1):\n            c = 2 * b + a\n            a, b = b, c\n        return c\n\n# Test cases\nprint(get_pell(1)) # Should print 1\nprint(get_pell(2)) # Should print 2\nprint(get_pell(3)) # Should print 5\nprint(get_pell(10)) # Should print 120\nprint(get_pell(15)) # Should print 2171\nprint(get_pell(21)) # Should print 61629\nprint(get_pell(22)) # Should print 30\nprint(get_pell(23)) # Should print 493\nprint(get_pell(24)) # Should print 703\nprint(get_pell(25)) # Should print 985\nprint(get_pell(26)) # Should print 1382\nprint(get_pell(27)) # Should print 1801\nprint(get_pell(28)) # Should print 2397\nprint(get_pell(29)) # Should print 3260\nprint(get_pell",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if m < 0 or n >= len(list1) or n < m:                                                                                                                                                                              \n        return None                                                                                                                                                                                              \n    else:                                                                                                                                                                                                 \n        return sum(list1[m:n+1]) \n\n# test the function                                                                                                                                                                                            \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                      \nprint(sum_range_list(list1, 1, 4)) # should return 10 ",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5) == 20\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    p = 5 * a\n    return p\n\n# Test the function with a test value\nprint(perimeter_pentagon(10)) # Output: 50\n\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(l, b):\n    area = l * b\n    return area\n\n# Test the function with a test value\nprint(area_rectangle(5, 10)) # Output: 50\n\n\n# Write a function to find the volume of a cube\ndef volume_cube(side):\n    volume = side ** 3\n    return volume\n\n# Test the function with a test value\nprint(volume_cube(3)) # Output: 27\n\n# Write a function to find the surface area of a cube\ndef surface_area_cube(side):\n    surface_area = 6 * (side ** 2)\n    return surface_area\n\n# Test the function with a test value\nprint(surface_area_cube(3)) # Output: 54\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(radius, height):\n    volume = 3.14 * (radius ** 2) * height\n    return volume\n\n# Test the function with a test value\nprint(volume_cylinder(5, 10)) # Output: 785.3981633397444833\n\n# Write a function to find the surface area of",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in range(len(s)-2):\n        if s[i:i+3]==\"std\":\n            count+=1\n    return count\n    \n# example usage:\ns=\"a string containing the substring std std\"\nprint(count_occurance(s)) # output: 1\n\n\ns=\"a string containing the substring std and another substring std\"\nprint(count_occurance(s)) # output: 2\n\ns=\"a string not containing the substring std\"\nprint(count_occurance(s)) # output: 0 ",
        "generated_testcode": "assert count_occurance(\"hello world\") == 0\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    alphanumeric_text = '' \n    for character in text: \n        if character.isalnum(): \n            alphanumeric_text += character \n    return alphanumeric_text \n  \n#Example usage: \ntext = \"Hello, I am from India! How are *you?\"\nprint(remove_splchar(text)) # Output: HelloIamfromIndiaHowareyou ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d\n\n# Example usage:\n# >>> group_keyvalue([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5)])\n# {'a': [1, 3], 'b': [2, 4], 'c': [5]} ",
        "generated_testcode": "assert group_keyvalue([\"apple:3\", \"banana:2\", \"orange:4\", \"apple:1\", \"orange:3\"]) == {\"apple\": [\"3\", \"1\"], \"banana\": [\"2\"], \"orange\": [\"4\", \"3\"]}\n\n\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n    \nprint(is_valid_parenthese('()')) # True\nprint(is_valid_parenthese('())(')) # False\nprint(is_valid_parenthese('(())')) # True\nprint(is_valid_parenthese('(()()))')) # True\nprint(is_valid_parenthese('(())()')) # True ",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return a+b+c\n\n#Test the function with some examples\nprint(perimeter_triangle(3,4,5) == 12)\nprint(perimeter_triangle(5,12,13) == 30)\nprint(perimeter_triangle(2.5, 7.5, 10) == 20)\n\n\n#Write a function to calculate the area of a triangle\ndef area_triangle(base, height):\n    return 0.5 * base * height\n\n#Test the function with some examples\nprint(area_triangle(3,4) == 6)\nprint(area_triangle(6,8) == 24)\nprint(area_triangle(7.5, 3.5) == 10.8125)\n\n#Write a function to find the length of a diagonal of a rectangle\ndef diagonal_rectangle(length, width):\n    return (length**2 + width**2) ** 0.5\n\n#Test the function with some examples\nprint(diagonal_rectangle(3,4) == 5.0)\nprint(diagonal_rectangle(5,12) == 13.0)\nprint(diagonal_rectangle(2.5, 7.5) == 9.0625)\n\n#Write a function to find the volume of a box\ndef volume_box(length, width, height):\n    return length * width * height\n#Test the function with some examples\nprint(",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if L == 1:\n        return 2\n    for i in range(L, R+1):\n        if i == L:\n            continue\n        lcm = L*i\n        if lcm > R:\n            break\n        flag = True\n        for j in range(L, i):\n            if lcm%j == 0 and (L*i)//j != i:\n                flag = False\n                break\n        if flag:\n            return i\n        \nprint(answer(1, 10000000000000000000000)) ",
        "generated_testcode": "assert (answer(1, 10) == (1, 10))\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    index=[]\n    for i in patterns:\n        index.append(text.find(i))\n    return index\n\n#Test the function\ntext=\"The quick brown fox jumps over the lazy dog. The dog slept over the verandah.\"\npatterns=[\"The\",\"fox\",\"the\",\"over\",\"dog\"]\nprint(string_literals(patterns,text)) #[0, 10, 32, -1]\n\n\n#The function searches for the given patterns in the text and returns the index of their first occurrence in the text. If the pattern is not found, it returns -1. ",
        "generated_testcode": "assert string_literals(['hello', 'world'], 'hello world') == ['hello', 'world']\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Create a list to store the terms of the sequence \n    num_list = [0,1]\n    # Loop until the length of the list is greater than or equal to the given number \n    while len(num_list) < x+1:\n        # Calculate the next term as the sum of the squares of the digits of the previous term \n        next_term = sum([int(i)**2 for i in str(num_list[-1])])\n        # Append the next term to the list \n        num_list.append(next_term)\n    # Return True if the length of the list is equal to the given number, else return False \n    return len(num_list) == x+1\n\n# Test the function with an example\nprint(is_num_keith(7)) # True ",
        "generated_testcode": "assert is_num_keith(19) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import math\n    R=6371\n    slat=math.radians(slat)\n    slon=math.radians(slon)\n    elat=math.radians(elat)\n    elon=math.radians(elon)\n    dlat=elat-slat\n    dlon=elon-slon\n    a=math.sin(dlat/2)*math.sin(dlat/2)+math.cos(slat)*math.cos(elat)*math.sin(dlon/2)*math.sin(dlon/2)\n    c=2*math.atan2(math.sqrt(a),math.sqrt(1-a))\n    return R*c\n\nlat1=input(\"Enter starting latitude: \")\nlon1=input(\"Enter starting longitude: \")\nlat2=input(\"Enter ending latitude: \")\nlon2=input(\"Enter ending longitude: \")\nprint(\"Distance between the two points: \",distance_lat_long(lat1,lon1,lat2,lon2),\"KM\") ",
        "generated_testcode": "assert distance_lat_long(40, -80, 50, -120) == 47.34\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    n1, n2 = len(str1), len(str2) \n    j = 0\n    while(j <= n1-1 and j <= n2-1): \n        if (str1[j] != str2[j]): \n            break\n        j += 1\n    return str1[:j] \ndef common_prefix(strings): \n    if not strings: \n        return \"\"\n    prefix = strings[0] \n    for i in range(1, len(strings)): \n        prefix = common_prefix_util(prefix, strings[i]) \n    return prefix \n# test the function \nstrings = [\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"]\nprint(common_prefix(strings)) ",
        "generated_testcode": "assert common_prefix_util(\"hello\", \"heaven\") == \"he\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    uppercase = re.findall(r'[A-Z]',string)\n    lowercase = re.findall(r'[a-z]',string)\n    special = re.findall(r'[^a-zA-Z0-9]',string)\n    numeric = re.findall(r'\\d',string)\n    return uppercase,lowercase,special,numeric\n\n# Example usage\nstring = \"Abc123#@pattern\"\nuppercase,lowercase,special,numeric = find_character(string)\nprint(\"Uppercase characters:\",uppercase)\nprint(\"Lowercase characters:\",lowercase)\nprint(\"Special characters:\",special)\nprint(\"Numeric characters:\",numeric) ",
        "generated_testcode": "assert find_character(\"Hello@123\") == {'uppercase': 0, 'lowercase': 5, 'special': 1, 'numeric': 3}\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    num_set = set(arr)\n    for i in range(n):\n        if arr[i] + k in num_set:\n            count += 1\n    return count\n\n# Driver code\narr = [1, 5, 3, 2, 6, 7, 2, 8, 9, 5]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k)) # Output: 3\n\n\n# The time complexity of this function is O(n) as it uses a set to store the distinct elements of the array and then iterates through the array once. ",
        "generated_testcode": "assert count_pairs([1, 5, 9, 3, 6, 8, 12, 4, 10], 4) == 2 # Output: 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result\n\n#Test the function\nmy_list = [1,2,3,4,5,6,7,8,9,10]\nprint(greater_specificnum(my_list,5)) #[6, 7, 8, 9, 10] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8],5) == [6,7,8]\n\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\" \n    a: variable of the quadratic equation in the form of ax^2 + bx + c = 0\n    b: variable of the quadratic equation in the form of ax^2 + bx + c = 0\n    c: variable of the quadratic equation in the form of ax^2 + bx + c = 0\n    Assumes a != 0. \n    Returns the x and y coordinates of the focus of the parabola as a tuple. \n    \"\"\"\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return (x, y)\n\n# Test cases\nprint(parabola_focus(1, 2, 3)) # (-1.0, 2.0)\nprint(parabola_focus(2, -6, 1)) # (3.0, 2.0)\nprint(parabola_focus(3, -4, 10)) # (1.0, 0.0) ",
        "generated_testcode": "assert parabola_focus(1, -14, 10) == (3, 0)\n\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    result = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            result.append(pattern)\n    return result\n\n# test the function with some examples\nprint(check_literals(\"hello world\", [\"hello\", \"world\", \"goodbye\"])) # [\"hello\", \"world\"]\nprint(check_literals(\"I am a programming language\", [\"i\", \"am\", \"language\"])) # [\"i\", \"am\", \"language\"]\nprint(check_literals(\"Python is awesome\", [\"Python\", \"java\", \"C++\"])) # [\"Python\"] ",
        "generated_testcode": "assert check_literals(\"Hello, World!\", [\"Hello\", \"World\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    L = [[0] * (n + 1) for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    index = L[m][n] \n    lcs = [\"\"] * (index + 1) \n    lcs[index] = \"\" \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs[index-1] = X[i-1] \n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    return ''.join(lcs) ",
        "generated_testcode": "assert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 5, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    while i * i < n:\n        j = 1\n        while j * j < n:\n            if i * j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n# test the function with some examples\nprint(prod_Square(16)) # True\nprint(prod_Square(18)) # False\nprint(prod_Square(25)) # True\nprint(prod_Square(49)) # True\nprint(prod_Square(81)) # True\nprint(prod_Square(50)) # False ",
        "generated_testcode": "assert (prod_Square(16)) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 0\n    while i < n: \n        if arr[i] > 0 and arr[i] <= n and arr[i] != arr[arr[i]-1]: \n            j = arr[i]-1\n            while arr[j] != arr[i] and arr[j] > 0 and arr[j] <= n: \n                temp = arr[i] \n                arr[i], arr[j] = arr[j], temp \n                j = temp-1\n        i += 1\n    for i in range(n): \n        if arr[i] != i+1: \n            return i+1\n    return n+1\n\n# Test the code\narr = [1,2,0,3]\nn = len(arr)\nprint(first_Missing_Positive(arr, n)) # Output: 4 ",
        "generated_testcode": "assert first_Missing_Positive([1,2,3,4,5,6,7,8,9], 6) == 10\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(x1,x2+1):\n        for j in range(y1,y2+1):\n            if(i==x1 or i==x2 or j==y1 or j==y2):\n                count+=1\n    return count-4 # Subtracting 4 because the points on the boundary are counted twice\n\n#Driver code\nx1=1\ny1=1\nx2=5\ny2=5\nprint(count_Intgral_Points(x1,y1,x2,y2)) #Output: 12 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,4,4) == 16\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if monthname3 in ['April', 'June', 'September', 'November']:\n        return \"30 days\"\n    elif monthname3 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return \"31 days\"\n    elif monthname3 in ['February']:\n        return \"28/29 days\"\n    else:\n        return \"31 days\"\n\n#Example usage:\n#print(check_monthnumber('February')) # Output: 28/29 days\n#print(check_monthnumber('August')) # Output: 31 days\n#print(check_monthname('December')) # Output: 31 days ",
        "generated_testcode": "assert check_monthnumber(\"February\") == False\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    flag1=False\n    flag2=False\n    for i in str:\n        if i.isalpha():\n            flag1=True\n        elif i.isdigit():\n            flag2=True\n        if flag1 and flag2:\n            return True\n    return False \n#Test the function with a string \nprint(check_String(\"hello123\")) ",
        "generated_testcode": "assert (check_String(\"Hello\") == False)\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #convert the tuple into a list\n    test_list = list(test_tup)\n    #use set() to remove the duplicate elements\n    res = tuple(set(test_list))\n    return res\n#test the function with a sample tuple\ntest_tup = (4, 5, 6, 4, 7, 8, 5, 4, 9, 4, 8, 3, 2, 1)\nprint(remove_tuple(test_tup)) ",
        "generated_testcode": "assert remove_tuple((1, 2, 3, 4, 2, 5, 6, 3, 7, 7) == (1, 2, 3, 4, 5, 6, 7)\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal_number = 0  \n    base = 1  \n    while (n > 0):  \n        decimal_number += (n % 10) * base  \n        n = n // 10  \n        base = base * 8 \n    return decimal_number\n\n#Test the function with an example \noctal_num = 123\nprint(octal_To_Decimal(octal_num)) # Output: 83 ",
        "generated_testcode": "assert octal_To_Decimal(123) == 83\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n==0:\n        return -1\n    elif arr[0] == x:\n        return 0\n    elif arr[n-1] == x:\n        return n-1\n    else:\n        mid = (0+n-1)//2\n        if arr[mid] < x:\n            return first(arr[mid+1:n],x,n-mid-1)\n        else:\n            return first(arr[0:mid],x,mid)\n    return -1\n\narr = [1,2,3,4,4,4,4,4,5,6,7,8,9]\nx = 4\nn = len(arr)\nprint(first(arr,x,n)) ",
        "generated_testcode": "assert first([1,2,3,4,4,5,6,7,8],4,6) == 2\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of tuples, remove all tuples of length k and return the resulting list.\n    \"\"\"\n    return [tup for tup in test_list if len(tup) != K]\n\n\n# Test cases\nprint(remove_tuples([(1, 2), (3, 4, 5), (2, 3, 4, 5), (3, 4), (\"hello\", \"world\"), (\"python\", \"programming\", \"language\"), \"awesome\"], 2)) # Should print [(3, 4, 5), (2, 3, 4, 5), ('hello', 'world'), ('python', 'programming', 'language', 'awesome')]\nprint(remove_tuples([(1, 2), (3, 4, 5), (2, 3, 4, 5), (3, 4), (\"hello\", \"world\"), (\"python\", \"programming\", \"language\"), \"awesome\"], 3)) # Should print [(1, 2), (2, 3, 4, 5), ('hello', 'world'), ('python', 'programming', 'language', 'awesome')]\nprint(remove_tuples([(1, 2), (), (3, 4, 5, 6, 7), (3, 4), (\"hello\", \"world\", \"python\"), (\"programming\", \"language\"), \"awesome\", ()], 4)) # Should print [(1, 2), (3, 4), ('hello', 'world', 'python",
        "generated_testcode": "assert remove_tuples([(1, 2, 3), (4, 5, 6, 7), (9, 10), (11, 12, 13, 14), (15, 16, 17, 18)], 2) == [(4, 5, 6, 7), (11, 12, 13, 14)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return None\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ** test_tup2[i])\n    return tuple(result)\n\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (3, 2, 5)\nprint(find_exponentio(test_tup1, test_tup2)) # Output: (8, 9, 109376) ",
        "generated_testcode": "assert find_exponentio((2, 3), (4, 5)) == (2**4, 3**5)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # a is semi major axis and b is semi minor axis\n    # Calculate the length of the sides of the largest triangle that can be inscribed in an ellipse\n    c = (a**2 + b**2)/2\n    s = (a+b)**2\n    area = (a*b**2)/4\n    return c,s,area\n\n# Test the function\na = 5\nb = 3\nprint(largest_triangle(a,b)) # Expected output: (7.0710678111865498926, 25, 6.75) ",
        "generated_testcode": "assert largest_triangle(2,3) == 3.6, \"Test 1 failed\"\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 0 \n    while n != 0: \n        n = n // 2\n        power += 1\n    return 2 ** (power-1) ",
        "generated_testcode": "assert highest_Power_of_2(16) == 16\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = max(list1)\n    indices = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            indices.append(i)\n    return indices\n\n\n# test the function\nlist1 = [1, 2, 3, 4, 5, 4, 6, 7, 8, 5, 4, 3, 2, 1]\nprint(position_max(list1) )  # Output: [4, 5] ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10]) == [3, 6]\n\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(set(lst)) == 1: \n        return True\n    else: \n        return False\n\n#Example \nlst = [1, 1, 1, 1, 1]\nprint(chkList(lst)) # True\n\n\nlst = [1, 2, 3, 4, 5]\nprint(chkList(lst)) # False\n\n\nlst = []\nprint(chkList(lst)) # True\n\n\nlst = [\"apple\", \"apple\", \"apple\"]\nprint(chkList(lst)) # True\n\n\nlst = [\"apple\", \"banana\", \"cherry\"]\nprint(chkList(lst)) # False ",
        "generated_testcode": "assert chkList([1, 1, 1, 1, 1, 1, 1]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result = result + str1[i]\n    return result\n\nprint(remove_even(\"Hello World\"))  # Output: \"HloWrd\"\nprint(remove_even(\"Python\"))  # Output: \"Pyt\"\nprint(remove_even(\"Java\"))  # Output: \"Jv\"\nprint(remove_even(\"\"))  # Output: \"\"\nprint(remove_even(\"123456789\"))  # Output: \"13579\"\nprint(remove_even(\"Hello\"))  # Output: \"Hlo\" ",
        "generated_testcode": "assert remove_even(\"Hello, World!\") == \"HloWrd!\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    xor_value = n1 ^ n2 \n    distance = 0 \n    while xor_value > 0 : \n        distance += xor_value & 1 \n        xor_value >>= 1 \n    return distance \n\n# Taking input \nnum1 = int(input(\"Enter first number: \")) \nnum2 = int(input(\"Enter second number: \")) \n\nprint(\"Hamming distance between\", num1, \"and\", num2, \"is\", hamming_Distance(num1, num2)) ",
        "generated_testcode": "assert hamming_Distance(12, 23) == 3\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in s : \n        if i == c: \n            count += 1\n    return count \n#Example \ns = \"abcdca\"\nc = \"a\"\nprint(count(s,c)) # Output: 2\n\n\n#Test the function with the example ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    inv_count = 0\n    tup_len = len(test_tup)\n    for i in range(tup_len):\n        for j in range(i+1, tup_len):\n            if test_tup[i] > test_tup[j]:\n                inv_count += 1\n    return inv_count\n\n# test the function\ntup = (1, 20, 6, 4, 5, 3)\nprint(\"Inversions count:\", inversion_elements(tup)) ",
        "generated_testcode": "assert inversion_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == []\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # taking an empty list to store the concatenated elements\n    concat_list = []\n    # iterating through each element in the tuple\n    for i in range(len(test_tup)):\n        # concatenating adjacent elements and adding it to the list\n        if i < len(test_tup)-1:\n            concat_list.append(test_tup[i]+test_tup[i+1])\n    return concat_list\n\n# Testing the function with an example\ntest_tup = ('ab', 'cd', 'ef', 'gh', 'ij')\nprint(concatenate_elements(test_tup)) ",
        "generated_testcode": "assert concatenate_elements(('abc') == 'abcabc'\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0] * n for _ in range(n)] \n    res = 1\n    for i in range(n): \n        dp[i][i] = 1\n    for L in range(2, n+1): \n        for i in range(n-L+1): \n            j = i+L-1\n            if str[i] != str[j]: \n                dp[i][j] = dp[i+1][j] \n            else: \n                dp[i][j] = dp[i+1][j-1] + 1\n            res = max(res, dp[i][j]) \n    return res ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabcbbbabc\") == \"abc\"\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r\"^[+-]?\\d+(\\.\\d{1,2})?$\"\n    if re.match(pattern, num):\n        return True\n    return False\n\n\n#Example usage:\nimport re\n\nprint(is_decimal(\"3.14\"))  # True\nprint(is_decimal(\"-1.23\"))  # True\nprint(is_decimal(\"+4.56\"))  # True\nprint(is_decimal(\"7.5555\"))  # False\nprint(is_decimal(\"12.00\"))  # True\nprint(is_decimal(\"-0.5\"))  # True\nprint(is_decimal(\"1.2345\")) # False ",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not heap:\n        return None\n    min_val = heap[0]\n    heap[0] = a\n    n = len(heap)\n    i = 0\n    while(i<n):\n        min_index = i\n        if (2*i+1)<n and heap[2*i+1]<heap[min_index]:\n            min_index = 2*i+1\n        if (2*i+2)<n and heap[2*i+2]<heap[min_index]:\n            min_index = 2*i+2\n        if min_index != i:\n            heap[i],heap[min_index] = heap[min_index],heap[i]\n            i = min_index\n        else:\n            break\n    return min_val\n\n# Testing Code\nheap = [5,4,3,2,1]\na = 7\nprint(\"Original Heap: \",heap)\nprint(\"Replaced Heap: \",heap_replace(heap,a))\nprint(\"New Heap: \",heap) ",
        "generated_testcode": "assert heap_replace([5,4,3,2,1],6) == [6,4,3,2,1]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'^[a-zA-Z0-9]+$'\n    if re.match(pattern, string):\n        return True\n    return False\n\n# example usage:\n# print(is_allowed_specific_char('hello123'))  # True\n# print(is_allowed_specific_char('hello!@#'))  # False\n\n\n# Write a function to check if a given string is a palindrome using regex.\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# example usage:\n# print(is_palindrome('racecar'))  # True\n# print(is_palindrome('hello'))  # False\n\n# OR\ndef is_palindrome_regex(string):\n    import re\n    pattern = r'^(.)*\\1$'\n    return re.match(pattern, string)\n# example usage:\n# print(is_palindrome_regex('racecar'))  # True\n# print(is_palindrome_regex('hello'))  # False\n\n# Write a function to check if a given string starts with a vowel.\ndef starts_with_vowel(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return string[0].lower() in vowels\n# example usage:\n# print(starts_with_vowel('apple'))  # True\n# print(starts_with_vowel('banana'))  # False",
        "generated_testcode": "assert is_allowed_specific_char(\"Hello123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1): \n        if (i & (i<<1) and i & (i<<3)): \n            count += 1\n    return count \n\n# Driver code \nn = 100\nprint(count_Num(n)) ",
        "generated_testcode": "assert count_Num(10) == 2 # 1010 in binary is 5, so there are two numbers whose 1st and 3rd bits are set. ",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n+1): \n        sum += i**4 \n    return sum \n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of\", n, \"natural numbers is:\", fourth_Power_Sum(n)) ",
        "generated_testcode": "assert fourth_Power_Sum(4) == 100\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"Concatenate two tuples of strings\"\"\"\n    return (test_tup1 + test_tup2)\n\n# Example usage:\n# Concatenate two tuples of strings\ntup1 = (\"hello\", \"world\")\ntup2 = (\"how\", \"are\", \"you\")\nprint(concatenate_strings(tup1, tup2)) # Output: (\"hello\", \"world\", \"how\", \"are\", \"you\") ",
        "generated_testcode": "assert concatenate_strings((\"Hello\", \"World\") == \"HelloWorld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes the angle in radians and converts it to degrees.\n    \"\"\"\n    degree = radian * 180 / 3.14\n    return degree\n\n# example usage:\nangle = degree_radian(3.14)\nprint(angle)  # Output: 177.6696084339885849986\n\n\n# you can test the function with different values of radian\n# example:\nangle = degree_radian(2.5)\nprint(angle)  # Output: 144.78034066876324219\nangle = degree_radian(4.5)\nprint(angle)  # Output: 253.700493164301273256 ",
        "generated_testcode": "assert degree_radian(3.14159) == 176.72\n\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(alist):\n        result.extend([alist[i+1]] * alist[i])\n        i += 2\n    return result\n\n#Test the function with a sample list\nencoded_list = [2, 1, 3, 4, 2, 5, 1, 6]\nprint(decode_list(encoded_list)) # Output: [1, 1, 1, 2, 2, 3, 5, 6] ",
        "generated_testcode": "assert decode_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for item in list1: \n        if item not in list2: \n            return False\n    return True \n  \ndef check_subset_nested_list(list1, list2): \n    if len(list1) != len(list2): \n        return False\n    for i in range(len(list1): \n        if not check_subset_list(list1[i], list2[i]): \n            return False\n    return True \n  \n# Example usage: \nlist1 = [[1,2], [3,4], [5,6]] \nlist2 = [[1,2], [3,4], [5,6], [7,8]] \nprint(check_subset_nested_list(list1, list2)) # True \nlist3 = [[1,2], [4,3], [5,6]] \nprint(check_subset_nested_list(list1, list3)) # False ",
        "generated_testcode": "assert check_subset_list([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8]]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {} \n    for ch in str: \n        if ch in freq: \n            return ch \n        else: \n            freq[ch] = 1\n    return None\n\n# example\nprint(first_Repeated_Char(\"abca\")) # output: a ",
        "generated_testcode": "assert first_Repeated_Char(\"abcda\") == \"a\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if A == B:\n        return 0\n    elif A > B:\n        return A - B\n    else:\n        return B - A\n# Driver code \nA = 8\nB = 12\nprint(min_Operations(A,B)) ",
        "generated_testcode": "assert min_Operations(10, 15) == 5\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if K > len(test_tup):\n        return \"Invalid input. K is greater than the size of the tuple\"\n    else:\n        min_K = sorted(test_tup)[:K]\n        max_K = sorted(test_tup)[-K:]\n        return (min_K, max_K)\n\n# Test the function with an example\ntest_tup = (9, 4, 5, 7, 1, 8, 3, 6, 2, 5)\nK = 3\nprint(extract_min_max(test_tup, K)) # Output: ([1, 2, 3], [6, 7, 8]) ",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (4, 7)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    space = text.count(\" \")\n    comma = text.count(\",\")\n    dot = text.count(\".\")\n    total = space + comma + dot\n    if total < n:\n        return text\n    elif space <= n and comma <= n and dot <= n:\n        return text.replace(\" \",\":\")[:total-n+1].replace(\",\",\":\")[:total-n+1].replace(\".\",\":\")\n    elif space <= n:\n        return text.replace(\",\",\":\")[:total-n+1].replace(\".\",\":\")\n    elif comma <= n:\n        return text.replace(\" \",\":\")[:total-n+1].replace(\".\",\":\")\n    else:\n        return text.replace(\" \",\":\").replace(\",\",\":\",n-space)[:total-n+1]\n\n\n# Example usage:\ntext = \"hello, world, this is a test. Another test\"\nprint(replace_max_specialchar(text,2)) # Output: \"hello: world, this is a test. Another test\" ",
        "generated_testcode": "assert replace_max_specialchar(\"Hello, world\", 1) == \"Hello: world\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None ",
        "generated_testcode": "assert first_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return all(isinstance(i, type(test_tuple[0]) for i in test_tuple)\n\n\n# example usage:\nprint(check_type((\"hello\", 1, \"world\")) # False\nprint(check_type((1, 2, 3, 4, 5)) # True\nprint(check_type((\"hello\", \"world\", 3, \"hi\")) # False\nprint(check_type((\"hello\", \"world\", \"hi\")) # True ",
        "generated_testcode": "assert check_type((1, 2, 3, 4, 5, 6) == True)\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2\n\n# Test the function with the given examples\narr = [3, 3, 4, 4, 4, 4, 4, 5, 4, 4, 4]\nx = 4\nn = len(arr)\nif is_majority(arr, n, x):\n    print(f\"{x} is the majority element\")\nelse:\n    print(f\"{x} is not the majority element\")\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 4\nn = len(arr)\nif is_majority(arr, n, x):\n    print(f\"{x} is the majority element\")\nelse:\n    print(f\"{x} is not the majority element\") ",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6], 4) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n  \n#Test the function with some examples \nprint(count_Set_Bits(110)) #Output: 2 \nprint(count_Set_Bits(12)) #Output: 2 \nprint(count_Set_Bits(25)) #Output: 3 ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if high < low:\n        return -1\n    if high == low: \n        return low\n    if high == low + 1: \n        return low if arr[low] < arr[high] else high \n  \n    mid = (high + low) // 2\n    if arr[mid] > arr[low]: \n        return find_Min(arr,mid,high) \n    elif arr[mid] < arr[high]: \n        return find_Min(arr,low,mid) \n    else: \n        return find_Min(arr,low,mid-1) if arr[mid] == arr[high] else find_Min(arr,mid,high) ",
        "generated_testcode": "assert find_Min([4,5,6,7,0,1,2,3,4],0,5) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# Test the function with an example string\nstring = \"Hello World\"\nprint(odd_values_string(string) == \"Hlowrd\") # Output: True ",
        "generated_testcode": "assert odd_values_string(\"hello\") == \"hlo\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n\n# Test the function with some examples\nprint(min_of_three(2, 3, 4)) # output: 2\nprint(min_of_three(2, 4, 3)) # output: 2\nprint(min_of_three(4, 2, 3)) # output: 2\nprint(min_of_three(4, 3, 2)) # output: 2\nprint(min_of_three(3, 2, 2)) # output: 2 ",
        "generated_testcode": "assert min_of_three(5, 10, 15) == 5\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    l= l-1   # we subtract 1 from l because we start from the lth bit \n    n= n>>l   # we shift n to right by l bits to set all the bits before lth bit to 0\n    for i in range(l,r):\n        if n&(1<<i):\n            return False\n    return True\n# example to check all bits are unset or not from 3rd to 7th bit of 10(1010)\nprint(all_Bits_Set_In_The_Given_Range(10,3,7))   # Output: True\n# example to check all bits are unset or not from 1st to 4th bit of 0(01101)\nprint(all_Bits_Set_In_The_Given_Range(5,1,4))   # Output: False ",
        "generated_testcode": "assert (all_Bits_Set_In_The_Given_Range(10,2,4)) # True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    neg = 0\n    pos = n-1\n    for i in range(n):\n        if arr[i] < 0:\n            if i != neg:\n                arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n        elif arr[i] >= 0:\n            if i != pos:\n                arr[i], arr[pos] = arr[pos], arr[i]\n            pos -= 1\n            i += 1\n    return arr\n\n# test the function with sample inputs\narr = [-1, 2, -3, 4, 5, 6, -7, 8, 9, -2]\nn = len(arr)\nprint(re_arrange_array(arr, n))\n# Output: [-7, -3, -2, -1, 2, 4, 5, 6, 8, 9] ",
        "generated_testcode": "assert re_arrange_array(arr=[-1, 2, -3, 4, 5, 6, -2, 8, -7, 0, 9], n=7) == [-1, -3, -2, -7, 0, 2, 4, 5, 6, 8, 9]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str\nstr1 = input(\"Enter a string: \")\nchar = input(\"Enter character to replace space: \")\nprint(replace_blank(str1,char))\n\n\n#Output:\n#Enter a string: I am a programmer\n#Enter character to replace space: *\n#I*am*a*programmer ",
        "generated_testcode": "assert replace_blank(\"Hello World\", \"*\") == \"Hello*World\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(n-2, -1, -1, -1): \n        for j in range(i+1): \n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n    return tri[0][0] \n\n# Driver code \ntri = [[1, 3, 5, 9], \n       [2, 4, 6], \n       [1, 8, 10]] \nn = 3\nprint(max_sum(tri, n)) #Output: 19\n\n\n# The above program uses a bottom-up approach to find the maximum sum in a given right triangle. \n# We start from the last row and for each element in the row, we calculate the sum of the maximum of the two adjacent elements in the row below it and the current element itself. \n# This way, the maximum sum is calculated and stored in the first element of the triangle. ",
        "generated_testcode": "assert max_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 13\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    list1.sort(reverse=True)\n    return list1[:n]\n\n#Example usage:\nlst = [3,5,2,1,8,6,9,7]\nprint(larg_nnum(lst,3)) #[9,8,7]\n\n\n#Function to get the n smallest items from a dataset\ndef smal_nnum(list1,n):\n    list1.sort()\n    return list1[:n]\n#Example usage:\nlst = [3,5,2,1,8,6,9,7]\nprint(smal_nnum(lst,3)) #[1,2,3]\n\n#Function to get the n largest items from a dataset using heaps:\nimport heapq\ndef larg_nnum_heap(list1,n):\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n#Example usage:\nlst = [3,5,2,1,8,6,9,7]\nprint(larg_nnum_heap(lst,3)) #[8,7,6]\n\n#Function to get the n smallest items from a dataset using heaps:\nimport heapq\ndef smal_nnum_heap(list1,n):\n    heapq.heapify(list1)\n    return heapq.nsmallest(n,list1)\n#Example usage:\nlst = [3,5,2,1,8,6,9,7]",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9],3) == [8,9,7]\n\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi=22/7\n    return 2*pi*r*h\n\n#Test the function with sample values\nprint(lateralsuface_cylinder(10,20)) # Expected output: 251.36\nprint(lateralsuface_cylinder(6,8))  # Expected output: 125.66\n\n\n#Test the function with edge case\nprint(lateralsuface_cylinder(0,5))  # Expected output: 0.0\nprint(lateralsuface_cylinder(5,0))  # Expected output: 0.0\nprint(lateralsuface_cylinder(0,0))  # Expected output: 0.0\n\nprint(lateralsuface_cylinder(-5,8))  # Expected output: 0.0\nprint(lateralsuface_cylinder(5,-8)) # Expected output: 0.0\nprint(lateralsuface_cylinder(-5,-8)) # Expected output: 0.0 ",
        "generated_testcode": "assert lateralsuface_cylinder(5, 10) == 78.53981634\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return l**3\n\n# Test the function\nprint(volume_cube(3)) # Output: 27\nprint(volume_cube(4)) # Output: 64\n\n\n# Write a function to find the surface area of a cube.\ndef surface_area_cube(l):\n    return 6 * (l ** 2)\n\n\n# Test the function\nprint(surface_area_cube(3)) # Output: 54\nprint(surface_area_cube(4)) # Output: 96\n\n\n# Write a function to find the volume of a rectangular prism\ndef volume_rectangular_prism(l, w, h, d):\n    return l * w * d\n\n# Test the function\nprint(volume_rectangular_prism(2, 3, 4)) # Output: 24\nprint(volume_rectangular_prism(5, 4, 3)) # Output: 60\n\n\n# Write a function to find the surface area of a rectangular prism\ndef surface_area_rectangular_prism(l, w, h, d):\n    return 2 * (l * w + l * d + w * d)\n\n# Test the function\nprint(surface_area_rectangular_prism(2, 3, 4)) # Output: 22\nprint(surface_area_rectangular_prism(5, 4, 3)) # Output: 52\n\n# Write a",
        "generated_testcode": "assert volume_cube(3) == 27\n\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # set the 0th bit of the number \n    n |= (n >> 1) \n    # set the 2nd bit from right \n    n |= (n >> 2) \n    # set the 4th bit from right \n    n |= (n >> 4) \n    # set the 8th bit from right \n    n |= (n >> 8) \n    # set the 16th bit from right \n    n |= (n >> 16) \n    return n ",
        "generated_testcode": "assert even_bit_set_number(10) == 10 # 1010 is 1010 in binary, so all even bits are set\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(1,N//K+1):\n        for j in range(1,N//K+1):\n            if i*K+j*K<=N:\n                count+=1\n    return count\nN=int(input(\"Enter the length of the side of the equilateral triangle: \")\nK=int(input(\"Enter the length of the smaller equilateral triangle: \")\nprint(\"Number of equilateral triangle:\",No_of_Triangle(N,K)) \n",
        "generated_testcode": "assert No_of_Triangle(5,3) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n    for i in test_list:\n        # If the element is not present in the dictionary, add it with a count of 1\n        if i not in count_dict:\n            count_dict[i] = 1\n        # If it is already present, increase the count\n        else:\n            count_dict[i] += 1\n    # Create an empty list to store the duplicate elements\n    duplicate_list = []\n    # Iterate through the dictionary and add the keys with values greater than 1 to the list\n    for key, value in count_dict.items():\n        if value > 1:\n            duplicate_list.append(key)\n    return duplicate_list\n\n# Test the function with an example\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 2, 3), (10, 11, 12), (4, 5, 6)]\nprint(check_occurences(test_list)) ",
        "generated_testcode": "assert check_occurences([('A', 10), ('B', 20), ('C', 10), ('D', 30), ('E', 20)]) == [('A', 'C'), ('B', 'D')]\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j].strip(): \n                count += 1\n    return count \n  \n# Driver code \nstr = \"python_is_awesome\"\nprint(number_of_substrings(str)) ",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [0] * (m+1)\n    dp[1] = 1\n    total = 1\n    for i in range(2,m+1):\n        dp[i] = dp[i-1]\n        j = 2*i\n        while j <= m:\n            dp[i] += dp[i-1]\n            j *= 2\n        total += dp[i]\n    return total - 1\n\n# Test\nprint(get_total_number_of_sequences(5,3)) # 10\nprint(get_total_number_of_sequences(7,2)) # 5\nprint(get_total_number_of_sequences(5,5)) # 23 ",
        "generated_testcode": "assert get_total_number_of_sequences(5, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    list1[-1] = list2\n    return list1\n\n#Test the function with an example:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9]\nprint(replace_list(list1, list2)) #[1, 2, 3, [6, 7, 8, 9]] ",
        "generated_testcode": "assert replace_list([1,2,3,4,5],[6,7,8]) == [1,2,3,6,7,8]\n\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr=[]\n    for i in range(m):\n        temp=[]\n        for j in range(n):\n            temp.append(['*' for i in range(o)])\n        arr.append(temp)\n    return arr\n#Testing\nprint(array_3d(3,3,3)) #[[3D array of '*']] ",
        "generated_testcode": "assert array_3d(2,3,4) == [\n                        [\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ],\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ]\n                        ]\n                    ]\n\n# Write a function to print the above 3d array in a matrix form.\ndef print_3d_array(arr):\n    pass\n\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\nstr1 = \"Hello World\"\nprint(\"Total Characters in the string: \", count_charac(str1))\n\n\n#Output: Total Characters in the string: 11 ",
        "generated_testcode": "assert count_charac(\"Hello, World!\") == 12\n\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    lst.sort(key=lambda x:x[0])\n    return lst \n\n#Test the function\nlst = [(3, 'apple'), (1, 'banana'), (2, 'orange'), (3, 'grape'), (1, 'orange'), (2, 'apple'), (3, 'banana'), (1, 'grape')]\nprint(sort_on_occurence(lst)) # Output: [(1, 'banana'), (1, 'orange'), (1, 'grape'), (2, 'apple'), (2, 'orange'), (3, 'apple'), (3, 'grape')] ",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (2, 1), (2, 3), (1, 1), (3, 2)] == [(1, 2), (1, 1), (2, 3), (3, 4), (2, 1)]\n\n# Test case 1: Test the function with a list of tuples with positive integers\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while(True):\n        square = i*i\n        if square > N:\n            return square\n        i += 1\n\n# Test the function with a test case\nprint(next_Perfect_Square(121)) # Output: 144 ",
        "generated_testcode": "assert next_Perfect_Square(121) == 144\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n <= 1:\n        return 0\n    if n == 2:\n        return max(arr[0], arr[1])\n    else:\n        incl = arr[0]\n        excl = arr[1]\n        new_excl = arr[0]\n        for i in range(2, n):\n            new_incl = excl + arr[i]\n            new_excl = max(new_excl, incl)\n            incl = new_excl - excl + arr[i]\n            excl = max(incl, excl)\n        return max(incl, excl) ",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, -10, 5, 7, 6, 8, -3, 2, 1]) == 15\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a number as input and returns its square root using the babylonian method.\n    \"\"\"\n    if number < 0:\n        return \"Please enter a non-negative number\"\n    else:\n        guess = number / 2\n        while True:\n            new_guess = (guess + number / guess) / 2\n            if abs(new_guess - guess) < 0.00001:\n                return new_guess\n            guess = new_guess\n\nprint(babylonian_squareroot(25)) # Output: 5.0\nprint(babylonian_squareroot(10)) # Output: 3.16222777666016837953\nprint(babylonian_squareroot(9)) # Output: 3.0\nprint(babylonian_squareroot(2)) # Output: 1.414213562373095049\nprint(babylonian_squareroot(16)) # Output: 4.0\nprint(babylonian_squareroot(24)) # Output: 4.8989794922798340414\nprint(babylonian_squareroot(0)) # Output: 0.0\nprint(babylonian_squareroot(-2)) # Output:",
        "generated_testcode": "assert babylonian_squareroot(4) == 2\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0 for i in range(n) ] for i in range(n) ]\n    for i in range(n-1,-1,-1,-1): \n        for j in range(i+1,n): \n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i+1][j],dp[i][j-1]) \n    return dp[0][n-1] \n\n#test \nstr = \"abbbd\"\nprint(lps(str)) ",
        "generated_testcode": "assert lps(\"BBABCBCAB\") == 7 # \"BABCBAB\"\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"Return the sum of the first n-1 harmonic numbers.\"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\n# Test the function with n = 5\nprint(harmonic_sum(5))  # Output: 2.283333333333333333334\n\n\n# Create a list of the first 10 harmonic sums\nharmonic_sums = [harmonic_sum(i) for i in range(1, 11)]\nprint(harmonic_sums)  # Output: [0.0, 1.0, 1.5, 1.8333333333333333333333, 2.1428571428571428573, 2.29166666666666666667, 2.42893333333333333333, 2.5527902341851829137, 2.60104838561152637, 2.662149778302680615, 2.680117910179101792, ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x in array_nums1, array_nums2))\n\nprint(intersection_array([1, 2, 3, 4, 5], [2, 4, 6, 7])) # Output: [2, 4]\n\nprint(intersection_array([1, 2, 3, 4, 5], [6, 7, 8, 9])) # Output: []\nprint(intersection_array([1, 2, 3, 4, 5], [4, 5, 6, 7])) # Output: [4, 5]\n\nprint(intersection_array([1, 2, 3, 4, 5], [2, 3, 5])) # Output: [2, 3, 5]\n\n\n# Using lambda function to filter out the even numbers from a list of numbers\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = list(filter(lambda x: x % 2 == 0, num_list))\nprint(result) # Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5],[4,5,6,7]) == [4,5]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count \n\n#Test the function with sample inputs:\ntup = (1,2,3,4,5,6,2,7,2,9,2,10,2,11,2)\nx = 2\nprint(count_X(tup, x)) # Output: 4 ",
        "generated_testcode": "assert count_X((\"abracadabra\", \"a\") == 5)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n\n#Example Usage:\nmy_list = [1, 2, 3, 4, 5]\nelement = 0\nnew_list = insert_element(my_list, element)\nprint(new_list) # Output: [0, 1, 0, 2, 0, 3, 0, 4, 0, 5] ",
        "generated_testcode": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # convert complex number to polar coordinates\n    r = abs(numbers)\n    theta = cmath.phase(numbers)\n    return r, theta\n\n# example usage\nimport cmath\n\n# complex number\nx = 3 + 4j\n\n# converting complex number to polar coordinates\nr, theta = convert(x)\n\nprint(f\"The polar coordinates of {x} are {r} and {theta}\") ",
        "generated_testcode": "assert convert(2+3j) == (2.236, 1.107)\n\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\n#test the function\nlist2 = [1, 2, 'hello', 3, True, 4, 'world', 5.5, False, 6]\nprint(count_integer(list2)) # output: 4 ",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    return result\n\n# test the function with some examples\nprint(words_ae('The quick brown fox jumps over the lazy dog')) # ['The', 'over']\nprint(words_ae('A bird in the hand is worth two in the bush')) # ['A', 'in', 'is', 'two']\nprint(words_ae('Equality is a beautiful thing')) # ['Equality', 'a'] ",
        "generated_testcode": "assert words_ae(\"apple and banana\") == [\"apple\", \"and\", \"a\", \"banana\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    colors = []\n    for i in range(n):\n        colors += [l[i]] * (n - i)\n    return colors\n\n\n\ndef generate_combinations(colors, n):\n    comb = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                comb.append((colors[i], colors[j], colors[k]) if i != j != k else None)\n    return comb\n\n\n\ncolors = [\"Red\", \"Green\", \"Blue\"]\nn = 2\nresult = generate_combinations(combinations_colors(colors, n)\nprint(result)\n# [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')] ",
        "generated_testcode": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the count of prime numbers less than n\n    \"\"\"\n    count = 0\n    for i in range(2,n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n\n# Test the function with some examples\nprint(count_Primes_nums(10)) # Expected output: 4\nprint(count_Primes_nums(20)) # Expected output: 8\nprint(count_Primes_nums(50)) # Expected output: 24 ",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return a, b\n\n#Test the function with sample inputs\nprint(swap_numbers(10,20)) # Output: (20, 10) ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns the count of odd numbers in the list.\n    \"\"\"\n    return len(list(filter(lambda x: x % 2 != 0, array_nums))\n\n\n# Example usage:\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_odd(array_nums)) # Output: 5 ",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as parameters and returns a tuple containing the maximum element from each of the input tuples.\n    \"\"\"\n    return (max(test_tup1), max(test_tup2))\n\n\n# Test the function with sample input\ntup1 = (1, 3, 5, 7, 9, 3, 5)\ntup2 = (10, 6, 4, 8, 9, 2, 6)\nprint(maximize_elements(tup1, tup2)) # Output: (9, 10) ",
        "generated_testcode": "assert maximize_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)) == (5, 6, 7, 8, 9)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    primes = [2, 3, 5, 7, 13, 17, 29, 43, 61, 73, 89, 107, 149, 173, 197, 257, 283, 419, 463, 523, 563, 647, 757, 853, 953, 11579, 1257, 1367, 1609, 1753, 1903, 21179, 2621, 26333, 2993, 3683, 4537, 5051, 5113, 5723, 6011, 6163, 7211, 7581, 7817, 8419, 8961, 9781, 104333, 111719, 12301, 13123, 13811, 14669, 15733, 1697, 1789, 18773, 1953, 2047, 2141, 22611,",
        "generated_testcode": "assert newman_prime(1) == 3\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    try:\n        div_tup = []\n        for i in range(len(test_tup1):\n            div_tup.append(test_tup1[i] / test_tup2[i])\n        return div_tup\n    except ZeroDivisionError:\n        print(\"Division by zero is not possible.\")\n        return None\n    except TypeError:\n        print(\"Both tuples should have same length and only integer/float values\")\n        return None\n    except:\n        print(\"Something went wrong\")\n        return None\n        \n# Test the function with a sample input\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (2, 4, 6)\nresult = division_elements(test_tup1, test_tup2)\nprint(result)  # Output: [5.0, 5.0, 5.0] ",
        "generated_testcode": "assert division_elements((10, 20, 30), (2, 5)) == (5.0, 4.0, 6.0)\n\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    first_half = list1[:L]\n    second_half = list1[L:]\n    return (first_half, second_half)\n\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nL = 3\nprint(split_two_parts(list1, L))  # Output: ([1, 2, 3], [4, 5, 6, 7, 8, 9]) ",
        "generated_testcode": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 3) == ([1, 2, 3], [4, 5, 6, 7, 8])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = d1.copy()\n    res.update(d2)\n    return res\n\n\n#Test the function with an example:\n\ndict1 = {'a': 10, 'b': 8, 'c': 12}\ndict2 = {'d': 6, 'b': 15, 'c': 18}\n\nprint(merge_dict(dict1,dict2)) # Output: {'a': 10, 'b': 15, 'c': 18, 'd': 6} ",
        "generated_testcode": "assert merge_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 3, 'c': 4}\n\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if h_age <= 0:\n        return \"Invalid age\"\n    else:\n        return h_age * 7\n\n#test the function with different ages\nprint(dog_age(0) == \"Invalid age\")\nprint(dog_age(1) == 7)\nprint(dog_age(2) == 14)\nprint(dog_age(3) == 21)\nprint(dog_age(4) == 28)\nprint(dog_age(5) == 35)\nprint(dog_age(6) == 42)\nprint(dog_age(7) == 49) ",
        "generated_testcode": "assert dog_age(1) == 15\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(S, step):\n        result.append(S[i:i+step])\n    return result\n\n# Test:\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstep = 3\nprint(list_split(S, step)) #[ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10] ] ",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 2) == [[\"a\", \"c\", \"e\", \"g\"], [\"b\", \"d\", \"f\", \"h\"], [\"i\", \"j\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return 4 * (l * l)\n\n# Test the function with a sample value\nprint(lateralsurface_cube(5)) # Output: 80 ",
        "generated_testcode": "assert lateralsurface_cube(3) == 54\n\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0  \n    i = 1  \n    count = 0  \n    while(count < n):  \n        if(i % 2 != 0): \n            sum = sum + i**2 \n            count += 1 \n        i += 1\n    return sum ",
        "generated_testcode": "assert square_Sum(3) == 35\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 2 * find_star_num(n - 1) + find_star_num(n - 2) + 1\n\n\n# Test the function with n = 1 to 10\nfor i in range(1, 11):\n    print(find_star_num(i))\n\n\n# Output: 1, 3, 5, 11, 12, 26, 41, 71, 117, 187, 3331, 563, 945, 1606, 2703, 44851, 7420 ",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if type(k) == str:\n        return ord(k)\n    else:\n        return \"Not a string\"\n\n#Example Usage:\n#print(ascii_value(\"A\"))\n#65\n\n#print(ascii_value(123))\n#\"Not a string\" ",
        "generated_testcode": "assert ascii_value('a') == 97\n\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum=0\n    for i in range(0,n):\n        if i%2==0 and arr[i]%2==0:\n            sum+=arr[i]\n    return sum\n\n#test the function with sample input\narr=[1,2,3,4,5,6,7,8,9,10]\nn=len(arr)\nprint(sum_even_and_even_index(arr,n)) #output:12\narr=[10,20,30,40,50,60,70,80,90]\nn=len(arr)\nprint(sum_even_and_even_index(arr,n)) #output:100\narr=[1,3,5,7,9,10,20,21,22]\nn=len(arr)\nprint(sum_even_and_even_index(arr,n)) #output:0 ",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10],6) == 20 # Testing with a list of 6 elements\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    while i < n: \n        sum += (i*i*i*i*i*i*i)\n        i += 2\n    return sum \n\n#Test the function\nn = 5\nprint(\"The sum of the fifth power of first\", n, \"even natural numbers is:\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(3) == 220\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function extracts the last element of each tuple in a list of tuples and returns a list of those last elements\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result\n\n# Test the function with an example\nexample_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9, 10, 11, 12), (13, 14, 15)]\nprint(rear_extract(example_list)) # Output: [3, 7, 12, 15] ",
        "generated_testcode": "assert rear_extract([(1,2,3,4,5,6,7,8,9]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i]-test_tup2[i],)\n    return result\n\n# Test the function with example\ntup1 = (4, 7, 5, 3, 2)\ntup2 = (1, 2, 3, 4)\nprint(substract_elements(tup1, tup2)) # Output: (3, 5, 2, -1) ",
        "generated_testcode": "assert substract_elements((1, 2, 3, 4), (4, 5, 6)) == (-3, -3, -2)\n\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # define a dictionary to store already computed values \n    memo = {} \n    # recursive function to compute nCr \n    def nCr(n, r, memo): \n        if r == 0 or r == n: \n            return 1\n        if r == 1: \n            return n \n        if r > n - r: \n            return nCr(n, n - r, memo) \n        if (n, r) in memo: \n            return memo[(n, r)] \n        memo[(n, r)] = nCr(n - 1, r - 1, memo) + nCr(n - 1, r, memo) \n        return memo[(n, r)] \n    # function to find sum of even index binomial coefficients \n    def even_index_Sum(n): \n        # initialize sum as 0 \n        sum = 0\n        # iterate over all even indices and add nCr(n, i) to sum \n        for i in range(0, n // 2 + 1, 2): \n            sum += nCr(n, i, memo) \n        return sum % 1000000000007\n    return even_index_Sum(n) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(4) == 10 # Testing for n = 4\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    s = set()\n    for i in range(m):\n        s.add(a[i])\n    for i in range(m,n):\n        if a[i] not in s:\n            return a[i]\n    return -1\n ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9],5,6) == 4\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 3.14\n    volume = pi * r**2 * h\n    return volume\n\n#Test the function with some examples\nprint(volume_cylinder(5,10))\nprint(volume_cylinder(3,7))\nprint(volume_cylinder(1,20))\n\n\n#Test the function with different data types\nprint(volume_cylinder(2.5,10))\nprint(volume_cylinder(10,4.5))\nprint(volume_cylinder(2,6.5)) ",
        "generated_testcode": "assert volume_cylinder(5, 10) == 785.398163397444830002\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    new_dict={}\n    for key,value in dict.items():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\ndictionary={'apple':10,'banana':20,'orange':5,'mango':15}\nn=10\nnew_dict=dict_filter(dictionary,n)\nprint(new_dict)\n\n#output {'apple': 10, 'banana': 20, 'mango': 15} ",
        "generated_testcode": "assert dict_filter({'apple': 10, 'banana': 20, 'orange': 5, 'kiwi': 8}, 10) == {'apple': 10}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple as input and returns a dictionary with the element and its count as key-value pairs.\n    \"\"\"\n    count_dict = {}\n    for element in test_tup:\n        if element not in count_dict:\n            count_dict[element] = 1\n        else:\n            count_dict[element] += 1\n    return count_dict\n\ndef element_before_record(test_tup, record):\n    element_count = count_first_elements(test_tup)\n    for i in range(test_tup.index(record)-1, -1, -1):\n        if test_tup[i] in element_count:\n            return test_tup[i]\n    return None\n\n# Example usage:\ntest_tup = ('apple', 'banana', 'cherry', 'apple', 'date', 'cherry', 'banana', 'apple', 'date', 'cherry', 'date')\nrecord = 'date'\nprint(element_before_record(test_tup, record)) # Output: 'banana' ",
        "generated_testcode": "assert count_first_elements(('a', ('a', 'b', 'c', 'd', 'a', 'e', 'a', 'f')) == 2\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    decagonal_num = 0\n    while n > decagonal_num:\n        decagonal_num += i * (i + 1) // 2\n        i += 1\n    if n == decagonal_num:\n        return True\n    else:\n        return False\n\ndef nth_decagonal_number(n): \n    return n * (n - 1) // 2\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    if is_num_decagonal(n):\n        print(\"The\", n, \"th decagonal number is:\", nth_decagonal_number(n))\n    else:\n        print(n, \"is not a decagonal number.\")\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert is_num_decagonal(5) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    return found\n\n# Example usage:\ndata_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(sequential_search(data_list, 10))  # Output: True\nprint(sequential_search(data_list, 21))  # Output: False\nprint(sequential_search(data_list, 5))  # Output: True\nprint(sequential_search(data_list, 1))  # Output: True\nprint(sequential_search(data_list, -5))  # Output: False ",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 3\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Checks if all the elements in the list are unique or not\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n\n# Example usage:\nprint(all_unique([1, 2, 3, 4, 5, 6, 7, 8])) # True\nprint(all_unique([1, 2, 2, 3, 4, 5, 6, 7])) # False\nprint(all_unique([])) # True\nprint(all_unique([1])) # True ",
        "generated_testcode": "assert all_unique([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = list(map(lambda x,y: x-y,nums1,nums2))\n    return result\n\n#Test the function with sample inputs\nnums1 = [2, 4, 6, 8, 10]\nnums2 = [1, 3, 5, 7, 9]\nprint(sub_list(nums1,nums2)) #[1, 1, 1, 1] ",
        "generated_testcode": "assert sub_list([1,2,3,4,5],[2,3,4]) == [1,5]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = str(n) \n    for i in n: \n        if n.count(i) > int(i): \n            return False\n    return True\n\nn = int(input(\"Enter a number: \"))\nif validate(n): \n    print(\"Yes, the frequency of each digit is less than or equal to the digit itself.\")\nelse: \n    print(\"No, the frequency of each digit is greater than the digit itself.\") ",
        "generated_testcode": "assert validate(123456) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list:\n        if i == element:\n            return True\n    return False\n\n#Example:\nlist1 = [\"apple\",\"apple\",\"apple\",\"apple\"]\nelement = \"apple\"\nif check_element(list1,element):\n    print(\"All elements of the list are equal to 'apple'\")\nelse:\n    print(\"Not all elements of the list are equal to 'apple'\") ",
        "generated_testcode": "assert check_element(['apple', 'apple', 'apple', 'apple', 'apple'], 'apple') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'a[b]{2,3}')\n    matches = pattern.findall(text)\n    return matches\n\n# Test the function with some examples\nprint(text_match_two_three('abbb'))  # ['abbb']\nprint(text_match_two_three('aabb'))  # ['abb']\nprint(text_match_two_three('abbbbc')) # ['abbb']\nprint(text_match_two_three('abdbc')) # []\nprint(text_match_two_three('aabbb')) # ['abb']\nprint(text_match_two_three('aabbc')) # ['abb']\nprint(text_match_two_three('aabbcd')) # ['abb']\nprint(text_match_two_three('aabbcc')) # []\nprint(text_match_two_three('abb'))  # []\nprint(text_match_two_three('a'))    # []\nprint(text_match_two_three(''))    # [] ",
        "generated_testcode": "assert text_match_two_three(\"ab\") == False\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # function to find the maximum sum subarray sum in a given array \n    def find_max_crossing_subarray(arr, low, mid, high): \n        left_sum = -10**9\n        max_left = 0\n        max_right = 0\n        max_sum = 0\n        for i in range(mid, low-1, -1): \n            left_sum += arr[i]\n            if left_sum > max_left: \n                max_left = left_sum\n        left_sum = 0\n        for i in range(mid+1, high+1): \n            max_right += arr[i]\n            if max_right > max_right: \n                max_right = max_right\n        return max_left + max_right\n\n    def find_max_subarray_sum(arr, low, high): \n        if low == high: \n            return arr[low]\n        mid = (low + high) // 2\n        left_sum = find_max_subarray_sum(arr, low, mid)\n        right_sum = find_max_subarray_sum(arr, mid+1, high)\n        cross_sum = find_max_crossing_subarray(arr, low, mid, high)\n        return max(left_sum, right_sum, cross_sum)\n\n    # Modify the given array by repeating it k times\n    for i in range(1, k): \n        a.extend(",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, -2, 3, 4, -1, 5, 2, -3, 6, -1], 3) == 20\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0  \n    for i in range(1, n+1):  \n        if i % 2 == 0: \n            sum += i**2\n    return sum  \n\nn = int(input(\"Enter a positive integer: \"))  \nprint(\"The sum of squares of first\", n, \"even numbers is:\", square_Sum(n)) ",
        "generated_testcode": "assert square_Sum(4) == 20 # Testing for n = 4\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for num in arr:\n        if num != -1 and num != 0:\n            for i in range(1, N):\n                if (num * i) % P == 1:\n                    count += 1\n                    break\n    return count\n\n# Driver code\narr = [3, 6, 5, 7, 8, 9, 11, 0]\nP = 10\nN = len(arr)\nresult = modular_inverse(arr, N, P)\nprint(\"Count of elements having modular inverse for prime p =\", P, \"is\", result)\n ",
        "generated_testcode": "assert modular_inverse([2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    odd_days = 0\n    for i in range(1,N+1):\n        if(i%2!=0):\n            odd_days += 1\n    return odd_days\n\n#test the function\nprint(odd_Days(10)) # 5\nprint(odd_Days(15)) # 8\nprint(odd_Days(20)) # 10\nprint(odd_Days(30)) # 15 ",
        "generated_testcode": "assert odd_Days(2021) == 243\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    result = []\n    for l in list1:\n        if len(l) == max_len:\n            result.append(l)\n    return result\n\n# Test your function with an example\nlists = [[1, 2, 3], [4, 5, 6, 7, 8], [9, 10], [11, 12, 13, 14, 15, 16], [17, 18, 19, 20], [21]]\nprint(max_length(lists)) # Output: [[4, 5, 6, 7, 8], [11, 12, 13, 14, 15, 16]] ",
        "generated_testcode": "assert max_length([\"cat\", \"dog\", \"bird\", \"lion\", \"tiger\"] == \"tiger\"\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n < 2:\n        return k\n    if k < 1:\n        return 0\n    same, diff = 1, k\n    for i in range(3, n + 1):\n        total = (same + diff) * (k - 1)\n        same, diff = diff, total - same\n    return total\n\n# Driver code to test the function \nn = 3\nk = 2\nprint(count_no_of_ways(n, k)) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 18\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if m == 0:  \n        return \"Error: division by zero\"  \n    else:  \n        return n/m \n  \n# taking input from user  \nnum1 = int(input(\"Enter the numerator: \"))  \nnum2 = int(input(\"Enter the denominator: \"))  \n  \n# calling the function and printing the quotient  \nprint(\"The quotient is:\", find(num1,num2)) ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return (w**2 + h**2)**0.5\n\n#Test function\nprint(otherside_rightangle(3,4)) # Output: 5.0\n\nprint(otherside_rightangle(5,12)) # Output: 13.0\n\n\n#Write a function to calculate the hypotenuse of a right angled triangle\ndef hypotenuse_rightangle(a,b):\n    return (a**2 + b**2)**0.5\n\n#Test function\nprint(hypotenuse_rightangle(3,4)) # Output: 5.0\nprint(hypotenuse_rightangle(5,12)) # Output: 13.0 ",
        "generated_testcode": "assert otherside_rightangle(3, 4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = listval[0]\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val\n\nprint(max_val([2, 5, \"Hello\", 9, 3.5, \"Python\", 8, \"World\"])\n# Output: 9 ",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty list to hold the divisors\n    divisors = []\n    # Loop through numbers from 1 to the number\n    for i in range(1, number + 1):\n        # If the number is divisible by i, add it to the divisors list\n        if number % i == 0:\n            divisors.append(i)\n    # Return the sum of the divisors list\n    return sum(divisors)\n\n\n# Test the function with some examples\nprint(sum_div(12))  # Should print 28\nprint(sum_div(28))  # Should print 100\nprint(sum_div(48))  # Should print 178\n",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count \n    \n# Driver code \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are:\",get_Inv_Count(arr,n)) \n\n\n# Output: 2 \n# as (20, 4) and (20, 5) are two inversions. ",
        "generated_testcode": "assert get_Inv_Count([1,2,3,4,5,6,7,8,9]) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not isinstance(list1, list):\n        return [list1]\n    if len(list1) == 0:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return [list1[0]] + flatten_list(list1[1:])\n\n\n\n# Test Cases\nprint(flatten_list([1, 2, 3, [4, 5, 6, [7, 8, [9, 10, [11, 12, 13], 14], 15], 16], 17, [18, 19]]) )  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\nprint(flatten_list([1, [2, [3, [4, 5, [6, 7, [8, 9]], 10], 11], 12]))           # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(flatten_list([1, [2, [],",
        "generated_testcode": "assert flatten_list([1, 2, [3, 4, [5, 6, 7], 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two nested lists as input and returns the common elements between them.\n\n    \"\"\"\n    intersection = []\n    flat_l1 = [element for sublist in l1 for element in sublist]\n    flat_l2 = [element for sublist in l2 for element in sublist]\n    for element in set(flat_l1).intersection(flat_l2):\n        if flat_l1.count(element) == len(l1) and flat_l2.count(element) == len(l2):\n            intersection.append(element)\n    return intersection\n\n# Test cases\nprint(intersection_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [[2, 3], [3, 4], [4, 5]])) # Should print [3]\nprint(intersection_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [[2, 3, 4], [3, 4, 5], [4, 5, 6]]) # Should print [4]\nprint(intersection_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [[2, 3], [3, 4], [5, 6]]) # Should print []\nprint(intersection_nested_lists([[1, 2, ",
        "generated_testcode": "assert intersection_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [[2, 3], [3, 4]]) == [[2, 3], [3]]\n\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_total = 0\n    for i in range(len(stdata)):\n        total = stdata[i][0] + stdata[i][1] + stdata[i][2]\n        if total > max_total:\n            max_total = total\n    return max_total\n\n# Test the function with example usage:\nstdata = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_aggregate(stdata)) # Output: 21\n\n\n# Explanation: \n# The maximum aggregate of the tuples is (7, 8, 9) which is 7+8+9=24. ",
        "generated_testcode": "assert max_aggregate([(1,2,3), (4,5,6), (7,8,9)]) == 24\n\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1: \n        return 1 \n    if n == 0: \n        return 1 \n    a = [0] * (n + 1) \n    b = [0] * (n + 1) \n    a[0] = 1 \n    b[0] = 1 \n    for i in range(n + 1): \n        a[i] = 2 * b[i] + a[i - 1] \n        b[i] = a[i - 1] + b[i - 1] \n        if i == n - 1: \n            return a[i] - 1 \n    return 0\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    print(\"Number of binary sequences such that the sum of first n bits is same as the sum of last n bits: \",count_binary_seq(n)) ",
        "generated_testcode": "assert count_binary_seq(1) == 1\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(dict_depth(v) if isinstance(v, dict) else 0 for v in d.values()) if d else 0)\n\n\n\n# Test cases\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'a': {'b': {'c': {'d': 1, 'e': 2}}} ,'f': 3}\nd3 = {'a': {'b': {'c': {'d': 1, 'e': {'f': {'g': 2}}} }, 'h': 3} }\nd4 = {}\nd5 = {'a': 1, 'b': {'c': {'d': 2, 'e': {'f': 3, 'g': {'h': 4, 'i': {'j': 5}} } } } }\n\n\nprint(dict_depth(d1)) # Output: 1\nprint(dict_depth(d2)) # Output: 3\nprint(dict_depth(d3)) # Output: 3\nprint(dict_depth(d4)) # Output: 0\nprint(dict_depth(d5)) # Output: 3 ",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    num = bin(n)\n    num = num[2:]\n    num = num[::-1]\n    for i in num:\n        if i == '1':\n            return len(num) - num.index(i)\n\nn = 25\nprint(\"The most significant bit number which is set is: \", set_Bit_Number(n)) ",
        "generated_testcode": "assert set_Bit_Number(15) == 4\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    cnt = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if a[i]>a[j]:\n                cnt += 1\n    if cnt%2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int,input().split())\n    solve(a,n) ",
        "generated_testcode": "assert (solve([1,2,3,4,5,6,7,8,9],6) == True)\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr)\n    if rotations>n :\n        rotations = rotations % n\n    return arr[(index-rotations+ranges)%n]\n    \n#Test the code\narr = [1,2,3,4,5,6,7]\nranges = 3\nrotations = 2\nindex = 4\nprint(find_Element(arr,ranges,rotations,index)) # Output : 5 ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6],0,4,0) == 1\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pwords = []\n    for word in words:\n        if word.startswith('p'):\n            pwords.append(word)\n    return pwords\n\n# test the function\nwords = ['python', 'java', 'c++', 'perl', 'pascal', 'ruby', 'php', 'phpython']\nprint(start_withp(words)) # output: ['python', 'php'] ",
        "generated_testcode": "assert start_withp(['python', 'java', 'c++', 'kotlin', 'swift', 'pascal']) == ['python', 'pascal']\n\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_sum = 0\n    for j in range(index + 1, k):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, j) + max_sum_increasing_subseq(a, n, k) - a[j])\n    return max_sum\n\n# The above function will have exponential time complexity as it will compute the same subproblems again and again\n\n# We can use dynamic programming to reduce the time complexity\ndef max_sum_increasing_subseq(a, n, k):\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum = 0\n    for i in range(k, n):\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n\n# Driver code\na = [1, 101, 2, 3, 5, 6, 100, 7, 8, 9]\nn = len(a)\nk = 4\nprint(max_sum_increasing_subseq(a, n, k))\n\n# Output: 106 ",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 6) == 39\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return tuplex[m:n]\n#Example\n#Input: tuplex = (1,2,3,4,5,6,7,8,9), m=1, n=4\n#Output: (2,3,4) ",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,4) == (2,4)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    products = []\n    for i in nums1:\n        for j in nums2:\n            products.append(i * j)\n    products.sort(reverse=True)\n    return products[:N]\n\n\n# Test cases\nprint(large_product([1, 2, 3, 4], [3, 4, 5], 2)) # should return [12, 15]\nprint(large_product([10, -10, 5], [2, 4, 3], 3)) # should return [50, 40, -50]\nprint(large_product([-5, -2], [1, 3], 1)) # should return [15] ",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 2) == [50, 40]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(2,3))   # Output: 3\nprint(maximum(5,4))   # Output: 5\nprint(maximum(7,7))   # Output: 7 \n\n\n# You can also use the built-in max() function to find the maximum of two numbers. ",
        "generated_testcode": "assert maximum(5,10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    my_list = str1.split(\",\")\n    my_tuple = tuple(my_list)\n    return my_tuple\n#Test the function\nprint(string_to_tuple(\"apple,banana,orange\")) # ('apple', 'banana', 'orange') ",
        "generated_testcode": "assert string_to_tuple(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\n\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n | (n & -n) \n    \n# Example usage:\nn = 15\nprint(bin(n)) # '0b11111'\nresult = set_left_most_unset_bit(n)\nprint(bin(result)) # '0b1000000' ",
        "generated_testcode": "assert set_left_most_unset_bit(0b10101010) == 0b11101111 # 0b1101111 is the binary representation of the expected output\n\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 3.14\n    volume = (1/3) * pi * r**2 * h\n    return volume\n\n# Test the function with examples\nprint(volume_cone(5, 10)) # should return 125.6636\nprint(volume_cone(7, 3)) # should return 153.946\nprint(volume_cone(2.5, 4)) # should return 15.708\n\n\n# Write a function to calculate the area of a circle\ndef area_circle(r):\n    pi = 3.14\n    area = pi * r**2\n    return area\n\n# Test the function with examples\nprint(area_circle(5)) # should return 78.5\nprint(area_circle(3)) # should return 28.26\nprint(area_circle(1)) # should return 3.14\n\n\n# Write a function to find the average of a list of numbers\ndef average(lst):\n    return sum(lst) / len(lst)\n\n# Test the function with examples\nprint(average([1, 2, 3, 4, 5, 6, 7])) # should return 4.0\nprint(average([1, 3, 5, 7, 9])) # should return 5.0\nprint(average([2, 2, 2, 2, 2, 2, 2])) # should return 2.",
        "generated_testcode": "assert volume_cone(3, 5) == 141.371666941729868158\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in list1:\n        if i>0:\n            print(i, end=\" \")\nlist1 = [1, -2, 0, 4, -8, 3, 6, -10, 7]\npos_nos(list1) ",
        "generated_testcode": "assert pos_nos([1, -2, 3, 4, -5, 6, -7, 8, 0, -9]) == [1, 3, 4, 6, 8]\n\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    incl = 0\n    excl = 0\n    excl_new = 0\n    res = 0\n    for i in range(n) : \n        new_excl = max(excl, excl_new)\n        excl_new = excl\n        incl = (incl + grid[i][0]) - (0 if i == 0 else grid[i-1][1]) \n        excl = max(excl_new, incl)\n    return max(excl, res)\n\nn = int(input(\"Enter the number of rows: \"))\ngrid = []\nfor i in range(n):\n    row = list(map(int, input().split())\n    grid.append(row)\n\nresult = max_sum_rectangular_grid(grid, n)\nprint(\"Maximum sum such that no two chosen numbers are adjacent: \", result) ",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9]], 2) == 11\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_len = 0 \n    for i in str.split(): \n        if len(i) % 2 == 0 and len(i) > max_len: \n            max_len = len(i) \n    return max_len \n  \n# Testing the function with sample input \nstr = \"The quick brown fox jumps over the lazy dog\"\nprint(\"The maximum length of even word is\", find_Max_Len_Even(str)) ",
        "generated_testcode": "assert find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\") == 6\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    start = 0\n    end = len(A) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            result = mid\n            start = mid + 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result\n\n# test the function with some examples\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_last_occurrence(A, 4)) # Output: 4\nprint(find_last_occurrence(A, 9)) # Output: 7\nprint(find_last_occurrence(A, 10)) # Output: -1 ",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 5, 5, 5, 6], 5) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    encoded_list = []\n    count = 1\n    prev_element = alist[0]\n    for i in range(1, len(alist)):\n        if alist[i] == prev_element:\n            count += 1\n        else:\n            encoded_list.append([count, prev_element])\n            prev_element = alist[i]\n            count = 1\n    encoded_list.append([count, prev_element])\n    return encoded_list\n\n# test the function\nprint(modified_encode([1, 1, 1, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 8, 8, 8])) #[1, 1, 2, 3, 1, 3, 4, 3, 5, 1, 4, 8, 3]\nprint(modified_encode([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8])) #[3, 1, 2, 2, 3, 2, 4, 3, 3, 5, 3, 7, 2, 8, 2] ",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\"]) == [(\"a\", 1), (\"b\", 1), (\"c\", 3), (\"d\", 1), (\"e\", 4)]\n\n# Test case 1: Test with a list of characters with no repetition\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    a = 0\n    while a <= s:\n        b = 0\n        while b <= s:\n            c = s - a - b\n            if a**2 + b**2 + c**2 > 0 and a*b*c == s:\n                return max(a*b*c, 0)\n            b += 1\n        a += 1\n    return 0\n\n# test the function\nprint(max_volume(10)) # output: 36\nprint(max_volume(15)) # output: 180\nprint(max_volume(21)) # output: 800\nprint(max_volume(28)) # output: 729\nprint(max_volume(30)) # output: 800 ",
        "generated_testcode": "assert max_volume(12) == (2, 2, 2, 2)\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w{5}\\b'\n    long_words = re.findall(pattern, text)\n    return long_words\n\ntext = \"This is a sample text with five and six character words.\"\nprint(find_long_word(text)\n\n# Output: ['sampl', 'fifth', 'char'] ",
        "generated_testcode": "assert find_long_word(\"Hello world, I am a Python programmer\") == \"Python\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum_square = 0\n    square_sum = 0\n    for i in range(1, n+1):\n        sum_square += i**2\n        square_sum += i\n    square_sum = square_sum**2\n    return square_sum - sum_square\n\n\n# Test the function\nprint(sum_difference(10))  # Output: 2640\nprint(sum_difference(20))  # Output: 25162\nprint(sum_difference(50))  # Output: 15827000\n",
        "generated_testcode": "assert sum_difference(10) == 2640\n\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(s) \n    demlo = \"\" \n    for i in range(n): \n        if s[i] == '4': \n            demlo += '1'\n        elif s[i] == '7': \n            demlo += '9'\n        else: \n            demlo += s[i] \n    return demlo\ns = input(\"Enter a number: \")\nprint(\"Demlo Number: \",find_demlo(s) ",
        "generated_testcode": "assert find_demlo(1) == 1\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    min_list = []\n    for i in range(len(list1):\n        if list1[i] == min(list1):\n            min_list.append(i)\n    return min_list\n\n# test the function\nlist1 = [4, 5, 2, 9, 7, 6, 2, 1, 6, 8]\nprint(position_min(list1)) # Output: [1, 4] ",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == [0, 6]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if cur >= n:\n        return arr\n    if arr[cur] < 0:\n        if out_of_place != -1:\n            arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n            out_of_place += 1\n        else:\n            out_of_place = cur\n    return right_rotate(arr, n, out_of_place, cur + 1)\n\n\n\ndef alternate(arr):\n    n = len(arr)\n    return right_rotate(arr, n, -1, 0)\n\n\n# Driver code\narr = [-5, -2, 5, 10, -3, 20, -15, 100, -30, 25]\nprint(alternate(arr))\n\n\n# Output: [-30, -15, -5, -3, 5, 10, 20, 25, 100]\n\n\n# Time Complexity : O(N)\n# Space Complexity : O(1) ",
        "generated_testcode": "assert right_rotate(arr=[1, 2, 3, -4, -1, 5, -6, 7, 8], n=6, out_of_place=3, cur=0) == [3, -4, 1, 5, -6, 2, -1, 7, 8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0, len(test_tuple), 2):\n        sum += test_tuple[i]\n    return sum\n\n# Test the function with a sample tuple\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nprint(sum_of_alternates(test_tuple) # Output: 20 ",
        "generated_testcode": "assert sum_of_alternates(((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 12 # Testing with a tuple of integers\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    ans = 0\n    while n > 0:\n        ans += n & 1\n        n >>= 1\n    return ans\n\n# Example usage:\nn = 13\nprint(get_Min_Squares(n))  # Output: 2 (4 + 9) ",
        "generated_testcode": "assert get_Min_Squares(17) == 4\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    words = {}\n    for word in test_list:\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n\n    sorted_words = sorted(words.items(), key=lambda x: x[1], reverse=True)\n    return sorted_words[0][0]\n\n\n# Test cases\nprint(most_occurrences(['apple', 'banana', 'apple', 'orange', 'banana', 'apple', 'apple', 'orange', 'orange', 'banana']))\nprint(most_occurrences(['apple', 'orange', 'apple', 'orange', 'banana', 'apple', 'grape', 'orange', 'orange', 'grape', 'orange']))\nprint(most_occurrences(['hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi'])) ",
        "generated_testcode": "assert most_occurrences(['apple', 'banana', 'apple', 'orange', 'banana', 'apple', 'grape', 'orange']) == 'apple'\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n\n#Example Usage:\n#print(check_isosceles(3,4,5))\n#Output: False\n#print(check_isosceles(6,6,6))\n#Output: True ",
        "generated_testcode": "assert check_isosceles(5, 6, 7) == False\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if m<n:\n        m=m%len(list1)\n    else:\n        m=m-len(list1)\n    for i in range(m):\n        list1.insert(0,list1.pop())\n    return list1\nlist1=[1,2,3,4,5,6,7,8]\nm=2\nn=4\nprint(rotate_left(list1,m,n) ",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7],2,2) == [3,4,5,6,7,1,2]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n#Example:\nlist1 = [1, -2, 3, -4, -5, 6, -8, 0, -10]\nprint(neg_count(list1)) # Output: 3 ",
        "generated_testcode": "assert neg_count([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 4\n\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r\"\\b\\w{4}\\b\")\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_char(text)\n\n# Output: ['over']\n\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(find_char(text)\n# Output: ['over']\n\n\ntext = \"Hi there, how are you doing today?\"\nprint(find_char(text)\n# Output: ['over'] ",
        "generated_testcode": "assert find_char(\"Hello world, I am a Python developer.\") == [\"Hello\", \"world\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count ",
        "generated_testcode": "assert count_unset_bits(0b1111) == 0\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\nprint(char_frequency(\"google.com\")) ",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sub_li.sort(key = lambda x:x[1]) \n    return sub_li \n\n# Sample list\nmark_list = [[10, 85], [11, 90], [12, 91], [9, 95]] \n  \n# Sorting the list by second element of the sublist\nprint(Sort(mark_list)) ",
        "generated_testcode": "assert Sort([[1, 3], [2, 4], [3, 1], [4, 2]]) == [[3, 1], [4, 2], [1, 3], [2, 4]]\n\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is not a valid triangle\") \n\n#Example\n#check_Validity(4,5,8) ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum=0\n    i=0\n    while i<n:\n        sum+=a+(i*d)\n        i+=1\n    return sum\na=int(input(\"Enter first term of AP: \"))\nn=int(input(\"Enter number of terms: \"))\nd=int(input(\"Enter common difference: \"))\nprint(\"The sum of arithmetic progression is:\",ap_sum(a,n,d))\n",
        "generated_testcode": "assert ap_sum(1, 5, 2) == 15\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    monthname = monthname1.lower()\n    if monthname == \"february\":\n        return False\n    else:\n        return True\n\nmonthname = input(\"Enter a month name: \")\nprint(check_monthnum(monthname))\n\n\n# Output:\n# Enter a month name: February\n# False ",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w+\\W*$'\n    result = re.search(pattern, text)\n    if result:\n        return result.group(0).strip()\n    return None\n\n# Test cases\nprint(text_match_word(\"Hello, world!\")) # \"world!\"\nprint(text_match_word(\"Python is awesome!\")) # \"awesome!\"\nprint(text_match_word(\"Python is awesome\")) # \"awesome\"\nprint(text_match_word(\"The quick brown fox.\")) # \"fox.\"\nprint(text_match_word(\"The quick brown fox\")) # \"fox\" ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == \"world\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(s) \n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            if s[i] == s[j] and (j-i) > 1: \n                count += 1\n    return count\n\n# Test the function with an example\ns = \"aabbaa\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(\"abcabc\") == 3\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = []  \n    for i in range(x, y + 1):  \n        for j in range(1, i+1):  \n            if i % j == 0:  \n                res.append(j)  \n    return max(res) ",
        "generated_testcode": "assert find_Divisor(10, 20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_lst = sorted(lst)\n    return sum(sorted_lst[:3])\n\n# Test cases\nprint(sum_three_smallest_nums([2, 3, 5, 1, 7, 9, 10, 12, -5, 88, 4]) # Should print 15 (-5 + 2 + 3 = 10)\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) # Should print 6 (1 + 2 + 3 = 6)\nprint(sum_three_smallest_nums([9, 8, 7, 6, 5, 4, 3, 2, 1]) # Should print 12 (1 + 2 + 3 = 6)\nprint(sum_three_smallest_nums([1, 2, -3, 4, -5, 8, -1]) # Should print -2 (-3 + -5 + 1 = -3)\nprint(sum_three_smallest_nums([2, 2, 2, 2, 2, 2, 2]) # Should print 6 (There are no negative numbers, so the three smallest positive numbers are 2, 2, and 2) ",
        "generated_testcode": "assert sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6 # should return 6\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    lst = []\n    for i in s:\n        lst.append(i)\n    lst.sort()\n    return tuple(lst)\n\n\n# Test the function with sample input\nprint(set_to_tuple({\"apple\", \"banana\", \"cherry\", \"orange\"}) ) # Expected output: ('apple', 'banana', 'cherry', 'orange') ",
        "generated_testcode": "assert set_to_tuple({1, 2, 3, 4}) == ((1, 2, 3, 4)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n# function to find the smallest range that includes at least one element from each array\ndef smallest_range(arr):\n    # if there are no arrays, return None\n    if not arr:\n        return None\n\n    # create a min heap of elements, where each element is a tuple (value, list_num, index)\n    min_heap = []\n    for i, nums in enumerate(arr):\n        if len(nums) > 0:\n            heapq.heappush(min_heap, Element(nums[0], i, 0))\n\n\n    # set the min and max variables to the first element of the first array\n    min_val, max_val = min_heap[0].value, min_heap[0].value\n\n    # initialize the result tuple\n    result = (min_val, max_val)\n\n\n    # loop through the elements in the min heap\n    while min_heap:\n        # get the smallest element from the heap\n        curr = heapq.heappop(min_heap)\n        # if the current element has a next element in its list, push it to the heap with the next index\n        if curr.index + 1 < len(arr[curr.list_num]):\n            heapq.heappush(min_heap, Element",
        "generated_testcode": "assert smallest_range([[4, 10, 5, 8], [7, 6, 2, 3], [1, 8, 5]]) == (2, 7)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return (digits, letters)\n\n# test the function\nprint(dig_let(\"hello world 123\")) # (3, 7) ",
        "generated_testcode": "assert dig_let(\"hello world 123\") == (3, 10)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        if int(i**0.5)**2 == i:\n            count += 1\n    return count\n\n#example:\ncount_Odd_Squares(1,10) # 2 (3 and 5 are the only perfect squares in this range with odd factors) ",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 2 # Testing for range 1 to 10\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    diff_list = []\n    for i in range(len(nums)-1):\n        diff_list.append(nums[i+1] - nums[i])\n    return diff_list\n\n# test the function\nprint(diff_consecutivenums([1,2,3,4,5,6,7,8])) #[1, 1, 1, 1, 1, 1]\nprint(diff_consecutivenums([10, 20, 25, 30, 35])) #[10, 5, 5]\n\n\n# Now, write a function to find the average of the difference between consecutive numbers in a given list\ndef avg_diff(nums):\n    diff_list = diff_consecutivenums(nums)\n    return sum(diff_list)/len(diff_list)\n\n# test the function\nprint(avg_diff([1,2,3,4,5,6,7,8])) # 1.0\nprint(avg_diff([10, 20, 25, 30, 35])) # 5.0\n\n\n# Now, write a function to find the minimum and maximum difference between consecutive numbers in a given list\ndef min_max_diff(nums):\n    diff_list = diff_consecutivenums(nums)\n    return min(diff_list), max(diff_list)\n\n# test the function\nprint(min_max_diff",
        "generated_testcode": "assert diff_consecutivenums([1, 2, 3, 5, 8, 9, 10]) == [1, 3, 3, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n % 2 == 0:\n        return k\n    else:\n        return 1 if (n // 2) % 2 == 0 else k + 1\n\n# Test the function with some examples\nprint(zigzag(1, 1)) # 1\nprint(zigzag(2, 1)) # 1\nprint(zigzag(2, 2)) # 2\nprint(zigzag(3, 1)) # 1\nprint(zigzag(3, 2)) # 2\nprint(zigzag(3, 3)) # 1\nprint(zigzag(4, 1)) # 1\nprint(zigzag(4, 2)) # 2\nprint(zigzag(4, 3)) # 2\nprint(zigzag(4, 4)) # 1\nprint(zigzag(5, 1)) # 1\nprint(zigzag(5, 2)) # 2\nprint(zigzag(5, 3)) # 2\nprint(zigzag(5, 4)) # 1\nprint(zigzag(5, 5)) # 2\nprint(zigzag(6, 1)) # 1\nprint(zigzag(6, 2)) # 2\nprint(zigzag(6, 3)) # 2\nprint(zigzag(6, 4)) # 1\nprint(zigzag(6, 5)) # 2",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            count += i*j\n    return count\n\n#Example\n#Input:\n#m = 3, n = 2\n#Output:\n#18 \n#Explanation: \n#The 2d grid of size 3x2 looks like this:\n#  1 2 3\n#  4 5 6\n#  7 8 9\n#There are 9 squares in the rectangle (1, 4, and 7 are squares of side 1, 2, 3, and 2, 5, 6, and 8 are squares of side 2, and 3 and 9 are squares of side 3) ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    C = [[0 for x in range(r+1)] for x in range(n+1)] \n    for i in range(n+1): \n        C[i][0] = 1 \n        for j in range(1, r+1): \n            if i<j: \n                C[i][j] = 0\n            elif i == j: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][r] \ndef count_sequences(values, length):\n    count = 0\n    for i in range(len(values)):\n        count += bin_coff(len(values), i) * values[i]\n        if count >= length:\n            return count\n    return count\n# Example usage:\nvalues = [1, 2, 3]\nlength = 5\nprint(count_sequences(values, length)) # Output: 13 ",
        "generated_testcode": "assert bin_coff(5, 2) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in string:\n        if i!='0' and i!='1':\n            return False\n    return True\n\n#Example:\n#Input: \"1010101\"\n#Output: True\n#Input: \"12345\"\n#Output: False ",
        "generated_testcode": "assert (check(\"10101010101010101010\")) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not s: \n        return 0\n    n = len(s)\n    s = list(s)\n    s.sort()\n    res = n\n    for i in range(n): \n        temp = s[i] \n        if i > 0 and s[i] == s[i - 1]: \n            continue\n        cnt1 = 0\n        cnt2 = 0\n        for j in range(n): \n            if s[j] != temp: \n                cnt1 += 1\n            else: \n                cnt2 += 1\n        res = min(res, n - max(cnt1, cnt2))\n    return res ",
        "generated_testcode": "assert (minimum_Length(\"aaabbbccddeeff\") == 4)\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = {} \n    for i in range(n): \n        if arr[i] in count: \n            count[arr[i]] += 1\n        else: \n            count[arr[i]] = 1\n    for i in range(n): \n        if count[arr[i]] == k: \n            return arr[i] \n    return -1\n\narr = [1,2,3,4,5,6,6,6,6,6]\nn = len(arr)\nk = 4\nprint(first_Element(arr,n,k))\n",
        "generated_testcode": "assert first_Element(arr=[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5], n=11, k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str) > 128:\n        return False\n    else:\n        char_set = [False for _ in range(128)]\n        for char in str:\n            if char_set[ord(char)]:\n                return False\n            char_set[ord(char)] = True\n        return True\nprint(unique_Characters(\"Hello\")) #False\nprint(unique_Characters(\"World\")) #True ",
        "generated_testcode": "assert unique_Characters(\"abcde\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list1)):\n        list1[i].pop(n)\n        new_list.append(list1[i])\n    return new_list\n\n#Test the function with a sample nested list and column number\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(remove_column(my_list, 2)) # Expected output: [[1, 2], [4, 5], [7, 8]]\n\n\n#Test the function with a larger nested list and column number\nmy_list1 = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21]]\nprint(remove_column(my_list1, 1)) # Expected output: [[1, 3, 5], [6, 8, 13], [10, 12, 17], [14, 16, 21]] ",
        "generated_testcode": "assert remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [[1, 2], [4, 5], [7, 8]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return a+((n-1)*d)\na=int(input(\"Enter the first term of the AP: \" )\nd=int(input(\"Enter the common difference: \")\nn=int(input(\"Enter the index of the term to find: \")\nprint(\"The term at index\",n,\"is: \",tn_ap(a,n,d))\n\n\n#explanation: \n#In arithmetic progression, the formula for finding the nth term of the series is: \n#  An= a + (n-1)d\n#where,\n#   An is the nth term of the series\n#   a is the first term\n#   d is the common difference\n# So, we can directly use this formula to find the nth term by passing the values of a,n and d to the function and return the output. ",
        "generated_testcode": "assert tn_ap(1, 5, 2) == 7\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, radius+1):  \n        for j in range(1, radius+1):  \n            if (i*i + j*j <= radius*radius):  \n                count += 1\n    return count  \n\n# Driver code to test the function\nradius = 5\nprint(\"The number of rectangles in a circle of radius\", radius, \"are\", count_Rectangles(radius)) ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    angle = 180 - (a + b)\n    return angle\n\n# Test the function with some examples\nprint(find_angle(30, 45) == 105)\nprint(find_angle(75, 28) == 77)\nprint(find_angle(20, 60) == 90)\nprint(find_angle(80, 45) == 65)\nprint(find_angle(10, 70) == 100) ",
        "generated_testcode": "assert find_angle(30, 45) == 105\n\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = None\n    for i in test_list:\n        if max_val is None or i[1] > max_val:\n            max_val = i[1]\n    return max_val\n\ntest_list = [('Alice', 80), ('Bob', 70), ('Charlie', 90), ('David', 65), ('Emily', 100)]\nprint(find_max(test_list)) # Output: 100\n\n\n# Using lambda function\n\nmax_val = lambda x: max(x, key=lambda y: y[1])[1]\nprint(max_val(test_list)) # Output: 100 ",
        "generated_testcode": "assert find_max([(('Alice', 25), ('Bob', 30), ('Charlie', 220), ('David', 22)]) == 'Bob'\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x%y, nums1, nums2))\n\n#Example:\n# nums1 = [12, 15, 3, 8]\n# nums2 = [3, 4, 5]\n# print(moddiv_list(nums1,nums2)) # output: [0, 3, 3]\n# Here, 12%3 = 0, 15%4 = 3, 3%5 = 3\n# Note: Both lists should be of same length. ",
        "generated_testcode": "assert moddiv_list([10, 20, 30], [3, 4, 5]) == [1, 2, 0]\n\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    D = (b**2 - 4*a*c) \n    if D > 0: \n        root1 = (-b + D**0.5) / (2*a) \n        root2 = (-b - D**0.5) / (2*a) \n        if root1 == 2*root2: \n            return True\n        else: \n            return False\n    elif D == 0: \n        root1 = root2 = -b / (2*a) \n        if root1 == 2*root2: \n            return True\n        else: \n            return False\n    else: \n        return False\n\n#Example\n# Input:\n# Enter the coefficients of quadratic equation: 2, -4, 2\n# Output:False ",
        "generated_testcode": "assert Check_Solution(1, -6, 9) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return get_carol(n-1) + get_carol(n-2) + 1\n\n# Test the function with n = 10\nprint(get_carol(10)) \n# Output: 143 ",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of lists as an argument and returns a new list with all empty lists removed.\n    \"\"\"\n    # Create an empty list to store non-empty lists\n    non_empty_list = []\n    # Iterate through the input list\n    for sublist in list1:\n        # If the sublist is not empty, append it to the non_empty_list\n        if sublist:\n            non_empty_list.append(sublist)\n    # Return the non_empty_list\n    return non_empty_list\n\n# Test the function with an example\noriginal_list = [[], [1, 2, 3], [], [4, 5, 6], [7], [], [8, 9, 10], []]\nresult = remove_empty(original_list)\nprint(result) # Output: [[1, 2, 3], [4, 5, 6], [7], [8, 9, 10]] ",
        "generated_testcode": "assert remove_empty([]), []\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty dictionary to store the count of each element\n    count_dict = {}\n    # loop through each element in the list\n    for num in nums:\n        # if the element is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # if the element is not in the dictionary, add it with count 1\n        else:\n            count_dict[num] = 1\n    # find the element with maximum count\n    max_count = 0\n    max_num = None\n    for num in count_dict:\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_num = num\n    return max_num\n\n# test the function with an example list\nprint(max_occurrences([1, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6])) # Output: 6 ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 3, 4, 3, 4, 4, 4]) == 4\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Using list comprehension to add k to each element in the tuple.\n    return tuple(x + K for x in test_list)\n\n\n# Test the function with sample inputs:\ntest_list = (1, 2, 3, 4, 5)\nK = 2\nprint(add_K_element(test_list, K) ) # Output: (3, 4, 5, 6, 7) ",
        "generated_testcode": "assert add_K_element((1, 2, 3, 4, 5), 2) == (3, 4, 5, 6)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if ch == '0':\n        return '1'\n    else:\n        return '0'\n\ndef min_flips_to_make_binary_string_alternating(s): \n    n = len(s)\n    if n < 2:\n        return 0\n    flips_if_first_is_flipped = 1\n    flips_if_first_is_not_flipped = 0\n    flips_if_second_is_flipped = 1\n    flips_if_second_is_not_flipped = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            if s[i] == '0':\n                flips_if_first_is_flipped = flips_if_second_is_not_flipped + 1\n                flips_if_second_is_flipped = flips_if_first_is_flipped\n            else:\n                flips_if_first_is_flipped = float('inf')\n                flips_if_second_is_flipped = min(flips_if_first_is_flipped, flips_if_second_is_flipped) + 1\n        else:\n            if s[i] == '1':\n                flips_if_first_is_flipped = flips_if_second_is_not_flipped + 1\n                flips",
        "generated_testcode": "assert make_flip(\"01010101010101\") == 0\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in str(n):\n        count += 1\n    return count\n\n#Example\n# Input: 12345\n# Output: 4 ",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test the function with an example\nprint(adjacent_num_product([4, 2, 7, 6, -3, 8, -2, 9, -1, -7, 5, 2])) # Output: 56 ",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "\t    self.data = data \n\t    self.left = None\n\t    self.right = None\n\ndef height(node): \n    if node is None: \n        return 0\n    else: \n        left_height = height(node.left) \n        right_height = height(node.right) \n  \n        return max(left_height, right_height) + 1\n\n\ndef is_balanced(node): \n    if node is None: \n        return True\n\n    left_height = height(node.left) \n    right_height = height(node.right) \n  \n    if abs(left_height - right_height) <= 1 and is_balanced(node.left) is True and is_balanced(node.right) is True: \n        return True\n    else: \n        return False\n\n# Example usage:\nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \nroot.right.left = Node(6) \nroot.right.right = Node(7) \nroot.left.left.left = Node(8) \nroot.left.right.left = Node(9) \nroot.left.right.right = Node(10) \n\nif is_balanced(root): \n    print(\"True\")\nelse: \n   ",
        "generated_testcode": "assert is_balanced(Node(4, Node(2, Node(1), Node(6))), True)\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return test_tup*N\n\n# test the function with sample input\ntup = (1,2,3)\nN = 3\nprint(repeat_tuples(tup, N)) # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3) ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return 2*((l*w)+(w*h)+(h*l))\n\nprint(\"Enter dimensions of the cuboid (length,width,height):\")\nl=int(input(\"Length:\")\nw=int(input(\"Width:\")\nh=int(input(\"Height:\")\n\nresult=lateralsurface_cuboid(l,w,h)\nprint(\"The lateral surface area of the cuboid is\",result) ",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 52\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple of tuples (name, age, price) and returns a list of tuples sorted by the price.\n    \"\"\"\n    return sorted(price, key=lambda x: x[2])\n\n# example usage:\n# people = ((\"John\", 23, 25.5), (\"Jane\", 30, 21.7), (\"Bob\", 18, 18.5), (\"Lisa\", 25, 30.1))\n# print(float_sort(people)) # [('Bob', 18, 18.5), ('John', 23, 25.5), ('Jane', 30, 21.7), ('Lisa', 25, 30.1)] ",
        "generated_testcode": "assert float_sort(('apple', 1.5, 'banana', 2.5, 'orange', 3.5) == ('apple', 1.5, 'banana', 2.5, 'orange', 3.5)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Find the smallest missing element in a sorted array.\n    \"\"\"\n    if A[left_element] != left_element:\n        return left_element\n    elif right_element - left_element == 0:\n        return right_element + 1\n    else:\n        mid = (left_element + right_element) // 2\n        if A[mid] == mid:\n            return smallest_missing(A, mid + 1, right_element)\n        else:\n            return smallest_missing(A, left_element, mid)\n\n\n# Example usage:\nA = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 11\n",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 8) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(len(nums):\n        heapify(nums, len(nums), i)\n\n    for i in range(len(nums) - 1, 0, -1, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, i, 0)\n    return nums\n\ndef heapify(nums, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and nums[left] > nums[largest]:\n        largest = left\n    if right < n and nums[right] > nums[largest]:\n        largest = right\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i]\n        heapify(nums, n, largest)\n\n#example usage:\nnums = [4, 2, 1, 6, 5, 3, 7, 8, 9, 10, 14, 11]\nprint(heap_assending(nums)) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 14] ",
        "generated_testcode": "assert heap_assending([4, 2, 5, 1, 3, 0, 9, 7]) == [0, 1, 2, 3, 4, 5, 7, 9]\n\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return l * w * h\n\nprint(\"Enter dimensions of the cuboid:\")\nlength = float(input(\"Length: \"))\nwidth = float(input(\"Width: \"))\nheight = float(input(\"Height: \"))\n\n#calling the function and storing the result in a variable\nresult = volume_cuboid(length,width,height)\n\n#printing the result\nprint(\"The volume of the cuboid is:\", result, \"cubic units.\") ",
        "generated_testcode": "assert volume_cuboid(2, 3, 4) == 24\n\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str) == 0:\n        return []\n    elif len(str) == 1:\n        return [str]\n    else:\n        perms = []\n        for i in range(len(str)):\n            s = str[i]\n            rest = str[:i] + str[i+1:]\n            for perm in permute_string(rest):\n                perms.append(s + perm)\n        return perms\n\ndef print_perms(str):\n    perms = permute_string(str)\n    for perm in perms:\n        print(perm)\n\n# test the function\nprint_perms(\"abc\")\n\n\n# output:\n# abc\n# ab\n# acb\n# bac\n# bca\n# cab\n# cba ",
        "generated_testcode": "assert permute_string(\"abc\") == [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n%m==0:\n        return n\n    elif n%m>m/2:\n        return (n-(n%m)+m)\n    else:\n        return (n-n%m)\nprint(round_num(17,5))\n\n#Output: 15\nprint(round_num(19,5))\n#Output: 20\nprint(round_num(23,5))\n#Output: 20 ",
        "generated_testcode": "assert round_num(15, 10) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    temp_dict = {}\n    result = []\n    for i in test_tup:\n        if i not in temp_dict:\n            temp_dict[i] = True\n        else:\n            temp_dict[i] = False\n    for i in test_tup:\n        if temp_dict[i]:\n            result.append(i)\n        else:\n            result.append(\"REMOVED\")\n    return tuple(result)\n\n\n# Test the function with sample input\ntest_tup = (1,2,3,4,5,6,2,3,7,8,1,9,2,4,6,5,10)\nprint(remove_replica(test_tup)) # Output: (1, 2, 3, 4, 5, 6, 'REMOVED', 'REMOVED', 7, 8, 9, 'REMOVED', 'REMOVED', 'REMOVED') ",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'd', 'b', 'e', 'a') == ('a', 'b', 'c', 'd', 'e', None)\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return s.replace(c, '')\n\n#Test the function with sample inputs\ns = 'hello world'\nc = 'l'\nprint(remove_Char(s,c)) # Output: 'heo word' ",
        "generated_testcode": "assert (remove_Char(\"hello world\", \"l\") == \"heo word\")\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if test_list:\n        last_element = test_list.pop()\n        test_list.insert(0, last_element)\n        return test_list\n    else:\n        return []\n\n# Test the function with example\ntest_list = [1, 2, 3, 4, 5, 6]\nprint(move_first(test_list))  # Output: [6, 1, 2, 3, 4, 5]\ntest_list = [1, 2, 3]\nprint(move_first(test_list))  # Output: [3, 1, 2]\ntest_list = []\nprint(move_first(test_list))  # Output: [] ",
        "generated_testcode": "assert move_first([1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2*((l*h)+(l*w)+(w*h))\n\n#Test the function with some sample inputs\nprint(surfacearea_cuboid(4, 2, 3)) #22\nprint(surfacearea_cuboid(10, 2, 1)) #54\nprint(surfacearea_cuboid(5, 5, 5)) #150\n\n\n#Calculate the surface area of a cube of side 5\nprint(surfacearea_cuboid(5, 5, 5) == 94) #True ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"This function generates a 2D list with the given number of rows and columns\"\"\"\n    multi_list = [[0 for j in range(colnum)] for i in range(rownum)]\n    return multi_list\n\n# Test the function\nmy_list = multi_list(3,5)\nprint(my_list)\n\n# Output: [[0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]] ",
        "generated_testcode": "assert multi_list(3,4) == [[None, None, None, None], [None, None, None], [None, None, None]]\n\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of lists, sort the list based on the inner list value at index_no.\n\n    \"\"\"\n    return sorted(list_data, key=lambda inner_list: inner_list[index_no])\n\n\n# Example usage:\nlist_data = [[1, 2, 3], [4, 1, 6], [7, 8, 9], [4, 5, 6]]\nprint(index_on_inner_list(list_data, 2))  # Output: [[1, 2, 3], [4, 1, 6], [4, 5, 6], [7, 8, 9]]\nprint(index_on_inner_list(list_data, 1))  # Output: [[1, 2, 3], [4, 1, 6], [7, 8, 9], [4, 5, 6]]\nprint(index_on_inner_list(list_data, 0))  # Output: [[1, 2, 3], [4, 1, 6], [4, 5, 6], [7, 8, 9]] ",
        "generated_testcode": "assert index_on_inner_list(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ],\n    1\n) == [\n    [4, 5, 6],\n    [1, 2, 3],\n    [7, 8, 9]\n]\n\n# Test case 1: Test if the function can sort a list of lists by the second element of each inner list.\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(A)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] > A[right]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\ndef binary_search(A, left, right, key):\n    if left <= right:\n        mid = (left + right) // 2\n        if A[mid] == key:\n            return mid\n        elif A[mid] < key:\n            return binary_search(A, mid + 1, right, key)\n        else:\n            return binary_search(A, left, mid - 1, key)\n    return -1\n\ndef search(A, key):\n    n = len(A)\n    rotation_count = find_rotation_count(A)\n    if A[rotation_count] < key:\n        return binary_search(A, rotation_count, n - 1, key)\n    else:\n        return binary_search(A, 0, rotation_count - 1, key)\n\n\n# Example usage:\nA = [10, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nkey = 3\nprint(search(A, key)) # Output: 2\n",
        "generated_testcode": "assert find_rotation_count([1, 2, 3, 4, 5, 6, 7]) == 0\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return n ^ (n & ((1 << (len(bin(n).count('1'))-1) << 1) - 1) << 1) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 -> 1001\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    smallest = min(arr)\n    for i in range(n): \n        if arr[i] == smallest: \n            count += 1\n    return count ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,2,1]) == 2\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3)\n\n\n# Test the function with inputs\nprint(get_perrin(0)) # Expected output: 3\nprint(get_perrin(1)) # Expected output: 0\nprint(get_perrin(2)) # Expected output: 2\nprint(get_perrin(3)) # Expected output: 3\nprint(get_perrin(4)) # Expected output: 5\nprint(get_perrin(5)) # Expected output: 8\nprint(get_perrin(6)) # Expected output: 13\nprint(get_perrin(7)) # Expected output: 21\nprint(get_perrin(8)) # Expected output: 34\nprint(get_perrin(9)) # Expected output: 55\nprint(get_perrin(10)) # Expected output: 89\nprint(get_perrin(11)) # Expected output: 144\nprint(get_perrin(12)) # Expected output: 2333\nprint(get_perrin(13)) # Expected output: 3775\nprint(get_perrin(14)) #",
        "generated_testcode": "assert get_perrin(0) == 3\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    stack = []\n    count = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    count += len(stack)\n    return count\n\n# Testing the function with an example\ns = '((()())(()))'\nprint(swap_count(s))  # Output: 1\n\ns = '()(())()()'\nprint(swap_count(s))  # Output: 0\ns = ')(()((()'\nprint(swap_count(s))  # Output: 2\n\ns = '(()()()'\nprint(swap_count(s))  # Output: 1\ns = '()))(('\nprint(swap_count(s))  # Output: 2 ",
        "generated_testcode": "assert swap_count('([])') == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if N[-1] in ['2', '3', '5', '7', 'A', 'C', 'E']:\n        return \"Odd\"\n    else:\n        return \"Even\"\n\n#test the function with the sample test cases\nprint(even_or_odd(\"9\")) # should return \"Odd\"\nprint(even_or_odd(\"123E\")) # should return \"Even\"\nprint(even_or_odd(\"123F\")) # should return \"Odd\"\nprint(even_or_odd(\"123D\")) # should return \"Even\" ",
        "generated_testcode": "assert even_or_odd(\"123\") == \"odd\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    power = 0 \n    while n > 1: \n        n >>= 1\n        power += 1\n    return 1 << power\n\n#Example:\n#Input:\n#8\n#Output:\n#4 ",
        "generated_testcode": "assert highest_Power_of_2(16) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n\n# Test the function with n = 10\nprint(find_lucas(10)) # Output: 123 ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [string + item for item in list]\n\n#Example:\n#my_list = ['apple','banana','cherry']\n#string = 'fruit:'\n#print(add_string(my_list,string))\n#Output: ['fruit:apple', 'fruit:banana', 'fruit:cherry'] ",
        "generated_testcode": "assert add_string(['apple', 'banana', 'cherry'], 'fruit: ') == ['fruit: apple', 'fruit: banana', 'fruit: cherry']\n\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result\n\n# Example usage:\nl1 = ['Mobile', 'Laptop']\nl2 = ['Brand', 'Price', 'Model']\nl3 = [['Apple', 'Samsung', 'Redmi'], [2000000, 500000, '500'], ['iPhone', 'Galaxy', 'Note']]\nprint(convert_list_dictionary(l1, l2, l3))\n# Output: {'Mobile': {'Brand': 'Apple', 'Price': 2000000, 'Model': 'iPhone'}, 'Laptop': {'Brand': 'Samsung', 'Price': 500000, 'Model': 'Note'}} ",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"b\": 1, \"c\": True}, \"b\": {\"a\": 2, \"c\": False}, \"c\": {\"a\": 3, \"b\": True}}\n\n# Test case 1: Test if the function can handle empty lists\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    max_sum = float('-inf')\n\n    max_sum = max(max_sum, get_max_sum(n-1))\n    max_sum = max(max_sum, get_max_sum(n-2))\n    max_sum = max(max_sum, get_max_sum(n-3))\n    max_sum = max(max_sum, get_max_sum(n-4))\n\n    max_sum = max(max_sum, n)\n    max_sum = max(max_sum, n + get_max_sum(n-1))\n    max_sum = max(max_sum, n + get_max_sum(n-2))\n    max_sum = max(max_sum, n + get_max_sum(n-3))\n    max_sum = max(max_sum, n + get_max_sum(n-4))\n\n    return max_sum\n\nprint(get_max_sum(10))\n\n\n# Solution: 317",
        "generated_testcode": "assert get_max_sum(10) == 27\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(input_list, key=lambda x: len(x))\n\n# Test the function with sample input\nmy_list = ['apple', 'banana', 'orange', 'kiwi', 'mango', 'pear', 'grapes']\nprint(max_length_list(my_list)) # Expected output: 'banana' ",
        "generated_testcode": "assert max_length_list([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"]) == \"banana\"\n\n\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n\n# Test the function with an example\ntest_tup = (1, 3, 5, 2, 7, 5, 8, 9)\nprint(check_distinct(test_tup))  # Output: False\n\n\ntest_tup = (1, 3, 5, 2, 7, 9, 8)\nprint(check_distinct(test_tup))  # Output: True ",
        "generated_testcode": "assert check_distinct((1, 2, 3, 4, 5, 6, 7) == True)\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None ",
        "generated_testcode": "assert first_non_repeating_character(\"abcdcaf\") == \"b\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    if re.match('^[a-zA-Z]$', string[0]) and re.match('[a-zA-Z]$', string[-1]):\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check_char('Hello')) # True\nprint(check_char('python')) # False\nprint(check_char('regex')) # True\nprint(check_char('algorithm')) # False\nprint(check_char('a')) # True\nprint(check_char('A')) # True ",
        "generated_testcode": "assert check_char(\"abcba\") == True\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a==b==c:\n        return a\n    elif a<=b<=c or c<=b<=a:\n        return b\n    elif b<=a<=c or a<=c<=b:\n        return a\n    else:\n        return c\na=int(input())\nb=int(input())\nc=int(input())\nprint(median_numbers(a,b,c))\n\n#alternate code \ndef median_numbers(a,b,c):\n    numbers=[a,b,c]\n    numbers.sort()\n    return numbers[1]\na=int(input())\nb=int(input())\nc=int(input())\nprint(median_numbers(a,b,c)) ",
        "generated_testcode": "assert median_numbers(2, 4, 3) == 3\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        result.append(digits_sum)\n    return result\n\nprint(sum_of_digits([123, 456, 789]))  # Output: [6, 15, 24] ",
        "generated_testcode": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # convert tuples to lists to modify their values\n    t1 = list(test_tup1)\n    t2 = list(test_tup2)\n    # check for the length of the tuples\n    if len(t1) == len(t2):\n        # iterate through the tuples\n        for i in range(len(t1)):\n            # perform xor operation on each element\n            t1[i] = t1[i] ^ t2[i]\n    else:\n        # if length of tuples is not same, return None\n        return None\n    # convert the list to tuple and return\n    return tuple(t1)\n\n# test the function\nprint(bitwise_xor((1, 2, 3, 4), (5, 6, 7)) ) ",
        "generated_testcode": "assert bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9)) == (5, 5, 1, 5)\n\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n\ndef extract_freq_tuples(test_list):\n    freq = {}\n    for i in test_list:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n\n\ntest_list = [(1, 2), (2, 3), (1, 2), (3, 4), (1, 2)]\nprint(extract_freq_tuples(test_list)) ",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"orange\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 2}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        tup_sum = tuple(x + y for x, y in zip(tup1, tup2))\n        result.append(tup_sum)\n    return tuple(result)\n\n\n# Test the function with sample input\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nprint(add_nested_tuples(test_tup1, test_tup2)) ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18)) ) == ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n# Test case 1:\n# Input:\n# ((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18))\n# Output:\n# ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if (r > n-r): \n        r = n-r \n    res = 1\n    C = [1]*(r+1)\n    for i in range(1, n+1): \n        C[0] = 1\n        for j in range(1, r+1): \n            C[j] = (C[j] + C[j-1]) % p \n            for k in range(j+1, n+1): \n                C[j] = (C[j] + C[j-1]) % p \n    return C[r] ",
        "generated_testcode": "assert ncr_modp(10, 2, 13) == 45\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n\n# Test the function with a few examples\nprint(is_valid_URL(\"http://www.google.com\"))  # True\nprint(is_valid_URL(\"https://www.google.com\"))  # True\nprint(is_valid_URL(\"http://www.google.com/something\"))  # True\nprint(is_valid_URL(\"www.google.com\"))  # False\nprint(is_valid_URL(\"google.com\"))  # False\nprint(is_valid_URL(\"ftp://www.google.com\"))  # True\nprint(is_valid_URL(\"http://localhost\"))  # True\nprint(is_",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n\n#Test the function\nprint(minimum(3,5))\nprint(minimum(9,6))\nprint(minimum(12,14)) ",
        "generated_testcode": "assert minimum(5,6) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in tuple1:\n        if i == tuplex:\n            return True\n    return False\n\n#Example usage:\ntuple1 = (1,2,3,4,5,6,7,8)\nprint(check_tuplex(3, tuple1)) # Output: True\nprint(check_tuplex(10, tuple1)) # Output: False ",
        "generated_testcode": "assert check_tuplex(\"apple\", (\"apple\", \"banana\", \"cherry\")) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x & 1: \n        return 1 # odd \n    else: \n        return 0 # even ",
        "generated_testcode": "assert find_Parity(10) == 0 # even\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    # Convert n to a string and sort its digits\n    digits = sorted(str(n), reverse=True)\n    # Find the index of the first digit that is less than the previous digit\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            # Swap it with the smallest digit greater than it to the right\n            j = i\n            while j < len(digits) and digits[i] <= digits[j]:\n                j += 1\n            digits[i], digits[j - 1] = digits[j - 1], digits[i]\n            # Reverse the digits after the swapped digit to get the smallest possible number\n            digits[i:] = digits[i:][::-1]\n            # Convert the digits back to an int and return it\n            return int(\"\".join(digits))\n    # If no digit is less than the previous digit, the next number is not possible\n    return -1\n\n# Test cases\nprint(rearrange_bigger(123456))  # Output: 125346\nprint(rearrange_bigger(987654321))  # Output: 987651234\nprint(rearrange_bigger(1234))  # Output: -1\nprint(rearrange_bigger(",
        "generated_testcode": "assert rearrange_bigger(12345) == 5342\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    nums = []\n    for i in nums1:\n        for j in nums2:\n            nums.append(i+j)\n    nums.sort()\n    return nums[:k]\n\n# Time Complexity: O(nlogn) for sorting the array + O(k) to get k smallest pairs, hence O(nlogn + k)\n\n# Space Complexity: O(n) to store all pairs ",
        "generated_testcode": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# Test the function with a sample list\nlist1 = [(1,2), (3,4), (5,6), (7,8)]\nprint(min_product_tuple(list1)) # Output: -12 ",
        "generated_testcode": "assert min_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)]) == 12\n\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    min_val = listval[0]\n    for val in listval:\n        if isinstance(val, int) or isinstance(val, float):\n            if val < min_val:\n                min_val = val\n    return min_val\n\n#test the function with different types of input\nlist_1 = [3, 4, 2, 5.6, 'hello', 'world', 2.5, '8', '1']\nlist_2 = [3, 4, 2, 'hello', 'world', 2.5, '8', '1']\nlist_3 = [3, 4, 2, 'hello', 'world', 2.5, '8', 1]\nprint(min_val(list_1))\nprint(min_val(list_2))\nprint(min_val(list_3)) ",
        "generated_testcode": "assert min_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    words = word.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\n# Test the function with sample inputs\nprint(snake_to_camel('hello_world')) # Output: helloWorld\nprint(snake_to_camel('welcome_to_the_jungle')) # Output: welcomeToTheJungle\nprint(snake_to_camel('long_long_string_with_many_words')) # Output: longLongStringWithManyWords ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list as input and returns a new list after removing all odd numbers from it.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n\n# testing the function with a sample list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_odd(l) # Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    extracted_element = []\n    for tuple in list1:\n        extracted_element.append(tuple[n-1])\n    return extracted_element\n\n# test the function with an example\nlist1 = [(1, 2, 3), ('apple', 'banana', 'cherry'), ('A', 'B', 'C'), ('I', 'II', 'III')]\nn = 2\nprint(extract_nth_element(list1, n)) # output: ['apple', 'banana', 'B'] ",
        "generated_testcode": "assert extract_nth_element([(1,2,3,4,5,6,7,8,9], 3) == 3\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list1:  \n        for j in list2:  \n            if i == j:  \n                return True  \n    return False ",
        "generated_testcode": "assert overlapping([1,2,3,4,5],[4,5,6,7]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arr) == 0: \n        return 0\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    max_num = max(arr[0], arr[1])\n    min_num = min(arr[0], arr[1])\n    for i in range(2, len(arr)): \n        if arr[i] < 0: \n            max_num, min_num = min_num, max_num\n        max_product = max(max_product, arr[i] * max_num)\n        min_product = min(min_product, arr[i] * min_num)\n        max_num = max(arr[i], max_num)\n        min_num = min(arr[i], min_num)\n    return max_product ",
        "generated_testcode": "assert max_Product([1, 10, -5, 3, -7, 6]) == 35\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n<=3:\n        return n\n    else:\n        # Initialize a variable to store the maximum sum\n        maxSum = 0\n        # Loop through all possible divisions of the number into three parts\n        for i in range(1, n-1):\n            for j in range(i+1, n):\n                # Calculate the maximum sum for each division\n                maxSum = max(maxSum, i + j + (n-i-j) + max(breakSum(i), breakSum(j), breakSum(n-i-j)) )\n        return maxSum\n\n# Test the function with an example\nn = 7\nprint(breakSum(n)) # Output: 12\nn = 10\nprint(breakSum(n)) # Output: 16",
        "generated_testcode": "assert breakSum(10) == 18\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    Output = [] \n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)): \n            if Input[i] == Input[j]: \n                Output.append(Input[i]) \n    return Output \n  \n# Driver Code \nInput = [(1,2),(3,4),(5,6),(1,2),(7,8),(3,4),(9,10),(5,6)] \nprint(group_tuples(Input)) ",
        "generated_testcode": "assert group_tuples([(1,2,3),(2,3,4),(3,4,5)]) == 3\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_len = 0\n    sublist = []\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)+1): \n            if len(lst[i:j]) > max_len: \n                max_len = len(lst[i:j])\n                sublist = lst[i:j]\n    return sublist \n    \n#Test the function with an example:\nlst = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(\"Original List:\", lst)\nprint(\"Sublist with maximum length:\", Find_Max(lst)) ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list) * len(list1)\n    return total_sum\n\n# Example usage:\nlist1 = [1.5, 2.3, 3.7, 4.2, 5.4, 6.6, 7.1, 8.9]\nresult = round_and_sum(list1)\nprint(result)  # Output: 42\n\n\n# Another example:\nlist2 = [2.2, 3.3, 4.4, 5.5, 6.6]\nresult2 = round_and_sum(list2)\nprint(result2)  # Output: 24\n\n\n# You can try with any other list of numbers ",
        "generated_testcode": "assert round_and_sum([1.5, 2.3, 3.7, 4.2, 5.8, 6.1]) == 25\n\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    i = 2\n    while n > 0: \n        sum += i ** 3\n        i += 2\n        n -= 1\n    return sum\n\n# test the function\nprint(cube_Sum(5))\nprint(cube_Sum(6)) ",
        "generated_testcode": "assert cube_Sum(3) == 216\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    test_list = list(test_tup)\n    delimiter = input(\"Enter the delimiter: \")\n    concatenated_str = delimiter.join(test_list)\n    return concatenated_str\n\n# Test the function\ntup = (\"apple\", \"banana\", \"cherry\")\nprint(concatenate_tuple(tup)) # Output: apple,banana,cherry\n\n\ntup = (\"ice cream\", \"chocolate\", \"cake\")\nprint(concatenate_tuple(tup)) # Output: ice cream#chocolate#cake\n\n\ntup = (\"ice\", \"cream\", \"cake\")\nprint(concatenate_tuple(tup)) # Output: ice#cream#cake ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"!\") == \"HelloWorld!\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes+=i**3\n    return sum_of_cubes/n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of the cubes of first\",n,\"natural numbers is\", find_Average_Of_Cube(n)) \n\n\n#test the function\n#Test with n=5\n#Output: The average of the cubes of first 5 natural numbers is 117.0 ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 14.16666666666666666667\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n)] for i in range(m)] \n    for i in range(m - 1, -1, -1): \n        for j in range(n - 1, -1, -1): \n            if (i == m - 1): \n                dp[i][j] = gold[i][j] \n            elif (j == n - 1): \n                dp[i][j] = gold[i][j] \n            else: \n                dp[i][j] = gold[i][j] + max(dp[i + 1][j], dp[i][j + 1]) \n            if (i < m - 1 and j < n - 1): \n                dp[i][j] += gold[i][j] \n                if (dp[i + 1][j] > dp[i][j + 1]): \n                    dp[i][j] += dp[i + 1][j] \n                else: \n                    dp[i][j] += dp[i][j + 1] \n    return dp[0][0] ",
        "generated_testcode": "assert get_maxgold([[1, 3, 3, 3, 1], [2, 1, 4, 0], [0, 6, 4, 5]] == 12)\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function accepts a tuple of strings as an argument and returns a list of the rear element of each string in the tuple.\n    The rear element is the last two characters of each string.\n    \"\"\"\n    result = []\n    for string in test_tuple:\n        result.append(string[-2:])\n    return result\n\n# Test the function with a sample tuple\ntest_tuple = (\"Hello\", \"World\", \"Python\", \"Program\")\nprint(extract_rear(test_tuple)) ",
        "generated_testcode": "assert extract_rear((\"hello\") == \"o\"\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(list1)):\n        if list1[i] == x: \n            count += 1\n    return count \n  \n# Test the function \nlist1 = [4, 5, 6, 4, 7, 4, 2, 8, 4] \nx = 4\nprint(count_element_in_list(list1, x)) # Output: 3 \n\n\nlist2 = [1, 2, 3, 4, 5, 4, 6, 4] \nprint(count_element_in_list(list2, 4)) # Output: 2 \n\n\nlist3 = [1, 4, 4, 4, 4, 4, 4, 4] \nprint(count_element_in_list(list3, 4)) # Output: 4 ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 2, 7, 8, 2, 9, 2], 2) == 3\n\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Example usage:\n# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# print(filter_oddnumbers(nums))  # Output: [1, 3, 5, 7, 9]\n\n\n# Write a lambda function to calculate the square of a number\nsquare = lambda x: x ** 2\n# Example usage:\n# print(square(5))  # Output: 25\n\n\n# Write a lambda function to check if a number is divisible by 3\nis_divisible_by_3 = lambda x: x % 3 == 0\n# Example usage:\n# print(is_divisible_by_3(9))  # Output: True\n# print(is_divisible_by_3(7))  # Output: False ",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    return re.sub(pattern, r\"\\3-\\2-\\1\", dt)\n\n# Example usage:\nprint(change_date_format(\"20221-05-16\"))  # Output: \"16-05-2021\" ",
        "generated_testcode": "assert change_date_format(\"2021-07-15\") == \"15-07-2021\"\n\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n\nmy_list = [3, 4, 2, 1, 6, 5, 7, 8, 4, 2, 9]\nprint(shell_sort(my_list)) # Output: [1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert shell_sort([4, 3, 2, 1, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res_list = []\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_list.append(test_tup1[i] & test_tup2[i])\n    res_tup = tuple(res_list)\n    return res_tup\n\ntest_tup1 = (5, 6, 7, 8)\ntest_tup2 = (3, 6, 9)\nprint(and_tuples(test_tup1, test_tup2)) ",
        "generated_testcode": "assert and_tuples((1, 2, 3, 4, 5), (4, 5, 6, 7)) == ((1, 4), (2, 5), (3, 6), (4, 7))\n\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return (-b/(2*a)) if a != 0 else None\n\n# Example usage:\n# The directrix of the parabola x^2 + 2y^2 - 6x - 8 = 0 is:\n# y = parabola_directrix(1, 2, -6)\n# Output: -3.0\n\n# The directrix of the parabola y^2 - 4x - 3 = 0 is:\n# x = parabola_directrix(0, -1, -3)\n# Output: None (since a = 0) ",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    set1 = set(list1)\n    set2 = set(list2)\n    if set1 & set2:\n        return True\n    return False\n\n# Example usage:\nlist1 = [1, 3, 5, 7, 9, 11]\nlist2 = [2, 4, 7, 10, 12]\nprint(common_element(list1, list2))  # Output: True\n\nlist3 = [2, 4, 6, 8, 10]\nprint(common_element(list1, list3))  # Output: False ",
        "generated_testcode": "assert common_element([1, 2, 3], [2, 4, 5]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    total_area = (base1+base2)*height/2\n    return total_area\nprint(median_trapezium(5,6,3)\n\n#testing the function\n#we can test the function by passing different values to the parameters of the function and printing the output to check if it is giving the correct median of the trapezium. \n#example:\n#for base1=5,base2=6 and height=3 the output should be 9\n#the function will calculate the total area as (5+6)*3/2=9 and return 9 as the output\n",
        "generated_testcode": "assert median_trapezium(4, 6, 3) == 5.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in arr:\n        if i >= number:\n            return False\n    return True\n\narr = [1, 2, 3, 4, 5]\nnumber = 6\nif check_greater(arr, number):\n    print(\"All elements of the array are less than\", number)\nelse:\n    print(\"There is an element in the array greater than or equal to\", number) ",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 0) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = \"ab+\"\n    import re\n    result = re.search(pattern, text)\n    return result != None\n\n# Test the function\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"abbc\")) # True\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"acb\")) # False\nprint(text_match_one(\"abbbbc\")) # True\nprint(text_match_one(\"abc\")) # False\nprint(text_match_one(\"\")) # False ",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = n % 10\n    return n\n\n# Test the function with some examples\nprint(last_Digit(12345))  # Output: 5\nprint(last_Digit(768))   # Output: 8\nprint(last_Digit(10000)) # Output: 0\nprint(last_Digit(98654) + 3) # Output: 7\nprint(last_Digit(999) + 1)  # Output: 0\nprint(last_Digit(12) + 3)  # Output: 2\nprint(last_Digit(9) + 1)   # Output: 0 ",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n\n#Test the function\nprint(neg_nos([-3,-5,10,6,-8,9,-12,34,23,-40]))\n\n\n#output: [-3, -5, -8, -12, -40] ",
        "generated_testcode": "assert neg_nos([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, -4, -6, -8]\n\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\nstr1 = input(\"Enter a string: \")\nprint(\"String with odd characters removed: \", remove_odd(str1))\n\n\n# Test Cases\n# Test case 1:\n# Enter a string: \"Hello, World!\"\n# Output: \"HloWrd\"\n\n# Test case 2:\n# Enter a string: \"Python\"\n# Output: \"Pon\"\n# Test case 3:\n# Enter a string: \"123456789\"\n# Output: \"2468\"\n# Test case 4:\n# Enter a string: \"Hello, World!\"\n# Output: \"HloWrd\" ",
        "generated_testcode": "assert remove_odd(\"Hello, World!\") == \"HloWrd\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    bidirectional_pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and i != j:\n                bidirectional_pairs.append((test_list[i], test_list[j]))\n    return bidirectional_pairs\n\n\n# Example usage:\ntest_list = [1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]\nprint(count_bidirectional(test_list))  # Output: [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)] ",
        "generated_testcode": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 1)]) == 2\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    s = 0\n    for i in L:\n        s = s * 10 + i\n    return s\n\n# test the function with some sample inputs\nprint(multiple_to_single([1, 2, 3, 4]))\nprint(multiple_to_single([5, 6, 7, 8, 9]))\nprint(multiple_to_single([9, 9, 9, 9])) ",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    words = text.split()\n    positions = []\n    for i in range(len(words)):\n        word = words[i]\n        if word.endswith('ly') or word in ['very', 'really', 'actually', 'highly', 'extremely']:\n            positions.append(i)\n    return positions\n\n# Test the function with examples\ntext = \"The quickly quickly quickly brown fox jumps over the lazily dog.\"\nprint(find_adverb_position(text)) # Output: [1, 3, 5] ",
        "generated_testcode": "assert find_adverb_position(\"The quick brown dog jumped over the lazy fox.\") == [(4, \"quick\"), (6, \"brown\"), (11, \"jumped\"), (16, \"over\"), (19, \"lazy\")]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a parameter l, the length of a side of the cube, and calculates the surface area of the cube.\n    \"\"\"\n    surface_area = 6 * (l ** 2)\n    return surface_area\n\n\n# Test the function with a test case\nprint(surfacearea_cube(3)) # Output: 54\n\n\n# Test the function with another test case\nprint(surfacearea_cube(4)) # Output: 96 ",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n# Example usage:\narr = [1, -2, 3, 4, -5, 6, 0, -8, -9, 10]\nratio = positive_count(arr)\nprint(ratio)  # Output: 0.5 (since there are 3 positive numbers and 3 negative numbers in the array) ",
        "generated_testcode": "assert positive_count([1, -2, 3, 4, -5, 6, -7, 8, 9, 0, -10]) == 4/7\n\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    largest = None \n    for num in list1: \n        if num < 0: \n            if largest is None or num > largest: \n                largest = num \n    return largest ",
        "generated_testcode": "assert largest_neg([-5, -1, -3, 0, 2, -6, -8, -2]) == -2\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Trims the given tuples in the list by k positions\n\n    :param test_list: list of tuples\n    :param K: the number of positions to be trimmed\n    :return: list of trimmed tuples\n    \"\"\"\n    if K <= 0:\n        return test_list\n    else:\n        return [(tuple(t[:-K]) for t in test_list) if len(t) > K else t for t in test_list]\n\n\n# Test Cases\n# Input:\n# test_list = [(1, 2, 3, 4, 5, 6, 7), (1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9), (1, 2)]\n# K = 2\n# Output: [(1, 2, 3), (1, 2), (1, 2, 3, 4), (1, 2)]\nprint(trim_tuple([(1, 2, 3, 4, 5, 6, 7), (1, 2, 3), (1, 2, 3, 4, 5, 6, 7, 8, 9), (1, 2)], 2))\n\n\n# Input:\n# test_list = [(1, 2, 3, 4, 5), (1, 2, 3), (1, 2, 3",
        "generated_testcode": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10, 11), (12, 13, 14, 15, 16, 17, 18), (19, 20, 21)] , 2) == [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n# Test case 1: Test with a list of tuples with different lengths and k=2\n# Expected output: [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n\n# Test the function with two tuples\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 6, 7, 8, 9)\nprint(index_multiplication(test_tup1, test_tup2)) ",
        "generated_testcode": "assert index_multiplication((1, 2, 3, 4), (5, 6, 7)) == (5, 12, 28)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count_dict = {}\n    for element in tup:\n        if element not in count_dict:\n            count_dict[element] = 1\n        else:\n            count_dict[element] += 1\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict\n\n#test the function with sample inputs\ntup = (1, 2, 3, 4, 5, 2, 3, 5, 7, 8, 9, 2, 4)\nlst = [2, 3, 5, 6, 9, 2, 8, 4]\nprint(count_Occurrence(tup, lst)) ",
        "generated_testcode": "assert count_Occurrence((\"hello\", [\"h\", \"e\", \"l\", \"o\"]) == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns a list of cubes of elements in the input list using lambda function\n    \"\"\"\n    return list(map(lambda x: x**3, nums)\n\n\n# Test the function with an example list\nnumbers = [1, 2, 3, 4, 5, 6, 7]\nprint(cube_nums(numbers))  # Output: [1, 8, 27, 64, 125, 216, 343] ",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\n\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    num = [0,1,1]\n    for i in range(2,n+1):\n        num.append(num[i-1]+num[i-2])\n    return sum(num)\n\n# Test the function with n=10\nn = 10\nprint(cal_sum(n))\n\n# Output: 49",
        "generated_testcode": "assert cal_sum(1) == 3\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    a = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    b = ((x3-x2)**2 + (y3-y2)**2)**0.5\n    c = ((x3-x1)**2 + (y3-y1)**2)**0.5\n    if a+b>c and b+c>a and a+c>b:\n        return True\n    else:\n        return False\n\n#example\n#check_Triangle(0,0,0,4,0,4) => True\n#check_Triangle(0,0,4,0,6) => False\n",
        "generated_testcode": "assert check_Triangle(0,0,0,0,0,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(str) - l + 1):\n        res.append(str[i:i+l])\n    return res\n\n# Test the function with sample inputs\nprint(extract_string('hello', 2))\nprint(extract_string('world', 3))\nprint(extract_string('python', 4)) ",
        "generated_testcode": "assert extract_string(\"hello world\", 2) == \"he\"\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n\n# Test\ntext1 = \"hello world\"\nprint(remove_whitespaces(text1) == \"helloworld\") # True\ntext2 = \"  there are spaces between words  \"\nprint(remove_whitespaces(text2) == \"therearespacesbetweenwords\") # True\ntext3 = \"   python is awesome   \"\nprint(remove_whitespaces(text3) == \"pythonisawesome\") # True ",
        "generated_testcode": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"\n\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    loss = actual_cost - sale_amount\n    if loss < 0:\n        return abs(loss)\n    else:\n        return None ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum\n\n# Test the function with an example \nn = 24\nprint(sumofFactors(n)) ",
        "generated_testcode": "assert sumofFactors(20) == 32 \n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test the function\ntest_text = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_wordz(test_text))  # Output: True\n\n\ntest_text = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_wordz(test_text))  # Output: False\n\n\ntest_text = \"He likes playing guitar better than piano.\"\nprint(text_match_wordz(test_text))  # Output: True ",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\") == False\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n\nmonthnum = int(input(\"Enter month number (1-12): \"))\n\nif check_monthnumb_number(monthnum):\n    print(\"The month has 31 days.\")\nelse:\n    print(\"The month doesn't have 31 days.\") ",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n\n\n# Test the function with an example\nstring_list = ['hello', 'world', 'python', 'programming']\nprint(reverse_string_list(string_list))  # Output: ['olleh', 'dlrow', 'nohtygnimmorp'] ",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]\n\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(lst)==1:\n        return lst\n    else:\n        min_len = 100000000000000\n        sublist=[]\n        for i in range(len(lst)):\n            for j in range(i+1,len(lst)+1):\n                sub=lst[i:j]\n                if len(sub)<min_len:\n                    min_len=len(sub)\n                    sublist=sub\n        return sublist\n\n#Testing the function\nlst=[1,2,3,4,5,6,7,8,9,10]\nprint(Find_Min(lst))\nlst=[1,2,3,4,5,6]\nprint(Find_Min(lst))\nlst=['a','b','c','d']\nprint(Find_Min(lst))\nlst=['hello']\nprint(Find_Min(lst))\n\n#output:\n#[1]\n#[1, 2, 3, 4, 5]\n#['a']\n#['h'] ",
        "generated_testcode": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    area = l * b\n    return area\n\n#Test the function\nprint(rectangle_area(2,4)\nprint(rectangle_area(5,8)\nprint(rectangle_area(10,10) ",
        "generated_testcode": "assert rectangle_area(5, 4) == 20\n\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    return re.sub('[A-Z]+', '', str1)\n\n# Test the function with a sample string\nstr1 = \"Hello WoRLD\"\nprint(remove_uppercase(str1)) ",
        "generated_testcode": "assert remove_uppercase(\"Hello World\") == \"hello world\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[0] for sublist in lst] \n\n#Example:\nlst = [[1,2,3],[4,5,6],[7,8,9]]\nprint(Extract(lst)) #[1,4,7] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == [1,4,7]\n\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n\n#test the function\nstring = \"Hello World\"\nprint(\"Number of uppercase characters in the string:\", upper_ctr(string))\n\n\nstring = \"Python is Awesome\"\nprint(\"Number of uppercase characters in the string:\", upper_ctr(string))\n\n\nstring = \"Programming is Fun\"\nprint(\"Number of uppercase characters in the string:\", upper_ctr(string)) ",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i],list1[j]));\n    return result\n\n#Testing\nlist1 = [1, 2, 3, 4, 5]\nprint(combinations_list(list1)) # [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5)] ",
        "generated_testcode": "assert combinations_list([1,2,3]) == [(1,2), (1,3), (2,3)]\n\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n\n        result = max(result, max_product)\n\n\n    return result\n\n\n# Example usage:\narr = [2, 3, -2, -5, 7, -1, 6, -1, 4]\nprint(max_subarray_product(arr))  # Output: 28\n\narr = [-2, -3, 4, -1, -5]\nprint(max_subarray_product(arr))  # Output: 24 ",
        "generated_testcode": "assert max_subarray_product([2, 3, -2, 4, -5]) == 24\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    val = list(dict.values())\n    return val.count(val[n-1]) == len(val)\n\n# Example usage:\nexample_dict = {\"a\": 10, \"b\": 10, \"c\": 10}\nif check_value(example_dict, len(example_dict)):\n    print(\"All values are same\")\nelse:\n    print(\"Values are not same\") ",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n\n\n# Test the function with sample data\ndict1 = {'a': 1, 'b': None, 'c': 3, 'd': [], 'e': 'hello', 'f': {}, 'g': 0, 'h': '', 'i': 8}\nprint(drop_empty(dict1)) ",
        "generated_testcode": "assert drop_empty(dict1) == {'a': 1, 'b': 2, 'c': 3}\n\n\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    mid = low + (high - low)//2\n    if (mid == 0 or arr[mid-1] <= arr[mid]) and (high == n-1 or arr[mid] >= arr[mid+1]): \n        return mid \n    elif mid > 0 and arr[mid-1] > arr[mid]: \n        return find_peak_util(arr, low, (mid-1, n) \n    else: \n        return find_peak_util(arr, (mid+1, high) \n\n\ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n-1, n) \n\n\n# Driver code \narr = [1, 3, 20, 4, 1, 5, 4, 1, 2, 3, 1] \nn = len(arr) \nprint(\"Index of peak element is\", find_peak(arr, n)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 6) == 10\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    octalNum = \"\"\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octalNum = str(remainder) + octalNum\n        deciNum = deciNum // 8\n    return octalNum\n\n# Test the function with some examples\nprint(decimal_to_Octal(10))  # Output: '12'\nprint(decimal_to_Octal(20))  # Output: '24'\nprint(decimal_to_Octal(30))  # Output: '36' ",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not arr: \n        return 0\n    if len(arr) == 1: \n        return arr[0]\n    max_product = [0]*n \n    max_product[0] = arr[0] \n    for i in range(1, n): \n        max_product[i] = max(arr[i], max_product[i-1]*arr[i]) \n    ans = max_product[0] \n    for i in range(1, n): \n        for j in range(i, n): \n            product = 1\n            for k in range(i, j): \n                product *= arr[k] \n            ans = max(ans, product) \n    return ans ",
        "generated_testcode": "assert max_product([2, 3, -2, 4, -1, -6, 5, 2, -11]) == 60\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if k == 0 or len(price) == 0:\n        return 0\n    if k >= len(price)//2:\n        max_profit = 0\n        for i in range(1, len(price)):\n            if price[i] > price[i-1]:\n                max_profit += price[i] - price[i-1]\n        return max_profit\n    local_profit = []\n    for i in range(k):\n        local_profit.append([0] * len(price))\n        for j in range(i, len(price)):\n            if j == i:\n                local_profit[i][j] = price[j] - price[i]\n            else:\n                max_diff = float('-inf')\n                for m in range(i, j):\n                    max_diff = max(max_diff, price[j]-price[m]+local_profit[i][m-1])\n                local_profit[i][j] = max(local_profit[i][j-1], max_diff)\n    return local_profit[k-1][len(price)-1]\n#Test the function\nprices = [10, 22, 5, 75, 65, 80, 60, 70, 90, 95]\nprint(max_profit(prices, 3)) # Output: 87\n\nprint(max_profit([",
        "generated_testcode": "assert max_profit([5, 2, 4, 1, 2, 6, 7, 3, 9, 1], 2) == 10\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup[0]):\n        sum = test_tup[0][i] + test_tup[1][i]\n        result = result + (sum,)\n    return result\n\n#Test the function\ntup = ((1,2,3),(4,5,6))\nprint(add_pairwise(tup)) # Output: (5, 7, 9) ",
        "generated_testcode": "assert add_pairwise((1, 2, 3, 4, 5)) == (3, 7, 11)\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    else:\n        result = 1\n        for i in range(lens):\n            result = (result * arr[i]) % n\n        return result ",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 4, 7) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    l=sorted(l)\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True\n# Test the function with the sample input below\nlst=[1,2,3,4,5,6,7,8,9]\nprint(check_Consecutive(lst))  # True\n\nlst=[10,11,12,13,14,15,16,18]\nprint(check_Consecutive(lst))  # False ",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection_set = set1.intersection(set2)\n    intersection_tuple = tuple(intersection_set)\n    return intersection_tuple\n\n# test the function with sample data\ntest_list1 = (1, 2, 3, 4, 5, 6, 7)\ntest_list2 = (2, 4, 6, 8, 10)\nresult = tuple_intersection(test_list1, test_list2)\nprint(result)  # Output: (2, 4, 6) ",
        "generated_testcode": "assert tuple_intersection((\"abc\", \"bcd\") == (\"b\", \"c\")\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if i == ch:\n            result += newch\n        else:\n            result += i\n    return result\n\nstr1 = \"this is a test string\"\nch = 't'\nnewch = 'T'\nprint(replace_char(str1,ch,newch))  # Output: This is a TesT string ",
        "generated_testcode": "assert replace_char(\"hello world\", \"l\", \"p\") == \"heppo wporpd\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)\n\ndef sort_counter2(dict1):\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n\n\n# Example usage:\ndict1 = {'a': 3, 'b': 2, 'c': 1, 'd': 4}\nprint(sort_counter(dict1))  # Output: {'d': 4, 'a': 3, 'b': 2, 'c': 1}\nprint(sort_counter2(dict1))  # Output: {'d': 4, 'a': 3, 'b': 2, 'c': 1} ",
        "generated_testcode": "assert sort_counter({\"apple\": 3, \"banana\": 2, \"orange\": 4, \"kiwi\": 1}) == [\"kiwi\", \"banana\", \"apple\", \"orange\"]\n\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) + min(nums)\n\n# or\ndef big_sum(nums):\n    if len(nums) == 0:\n        return None\n    else:\n        return sum(nums[0::len(nums)-1])\n\n# or\ndef big_sum(nums):\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) + min(nums)\n\n# or\ndef big_sum(nums):\n    if not nums:\n        return None\n    else:\n        return sum([max(nums), min(nums)])\n# or\ndef big_sum(nums):\n    if not nums:\n        return None\n    else:\n        return max(nums) + min(nums)\n# or\ndef big_sum(nums):\n    if not nums:\n        return None\n    else:\n        return sum(sorted(nums)[::len(nums)-1]) ",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (36, 10)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if string.islower():\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(is_lower(\"hello\"))  # True\nprint(is_lower(\"HELLO\"))  # False\nprint(is_lower(\"Hello\"))  # False\nprint(is_lower(\"\"))      # True\nprint(is_lower(\"123\"))    # True\nprint(is_lower(\"123Abc\")) # False ",
        "generated_testcode": "assert is_lower(\"Hello\") == False\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if i.isupper():\n            result += i\n    return result\n\n# test the function with some examples\nprint(remove_lowercase(\"Hello World\"))  # Output: \"HW\"\nprint(remove_lowercase(\"HELLO WORLD\"))  # Output: \"HELLOWORLD\"\nprint(remove_lowercase(\"Python is Awesome\"))  # Output: \"Python is Awesome\"\nprint(remove_lowercase(\"PYTHON IS AWESOME\"))  # Output: \"PYTHONISAWESOME\"\nprint(remove_lowercase(\"Coding is fun\"))  # Output: \"Codingisfun\" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"Hello World\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    while n > 10 : \n        n //= 10\n    return n \n  \n# test the function with some examples \nprint(first_Digit(12345)) # Output: 1 \nprint(first_Digit(987))  # Output: 9 \nprint(first_Digit(1024)) # Output: 1 \nprint(first_Digit(654))  # Output: 6 \nprint(first_Digit(89))   # Output: 8 ",
        "generated_testcode": "assert first_Digit(1234) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dict1 = {}\n    for char in str1:\n        if char in dict1:\n            dict1[char] += 1\n        else:\n            dict1[char] = 1\n    max_char = max(dict1, key=dict1.get)\n    return max_char\n\n# testing the function\nstr1 = \"hello world\"\nprint(get_max_occuring_char(str1)) # Output: l ",
        "generated_testcode": "assert (get_max_occuring_char(\"hello world\") == \"l\")\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create a 2D table to store whether a subset of set is possible with a certain sum\n    dp = [[False for x in range(sum + 1)] for y in range(n + 1)]\n\n    # Initialize the top row and leftmost column with True\n    for i in range(n + 1):\n        dp[0][i] = False\n    for i in range(sum + 1):\n        dp[i][0] = True\n    # Fill the dp table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if set[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j - set[i - 1]] or dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][sum]\n\n\n\n# Test the function with an example\nset = [2, 3, 5, 1, 8, 6, 7]\nsum = 10\nn = len(set)\nif is_subset_sum(set, n, sum):\n    print(\"There exists a subset with sum\", sum)\nelse:\n    print(\"No subset with sum\", sum)\n\n",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6, 7], 10) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[A-Z][a-z]+')\n    sequences = re.findall(pattern, text)\n    return sequences\n\n# Example usage:\ntext = \"The quick brown Fox jumps over the Lazy Dog\"\nprint(match(text) ) # ['Fox', 'Lazy'] ",
        "generated_testcode": "assert match(\"Hello, World!\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": " i = 1\n  while True: \n    factorial = 1\n    for j in range(1, i+1): \n      factorial *= j \n    if factorial % x == 0: \n      return i \n    i += 1\n# Test the function with x = 1000\nprint(first_Factorial_Divisible_Number(100)) # Output: 5 ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    list1 = list(test_list1)\n    list2 = list(test_list2)\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return tuple(list1)\n\n# Test the function with sample tuples\ntest_list1 = (1, 2, 3, 4, 5, 6)\ntest_list2 = (3, 4, 7, 8, 9)\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: (1, 2, 5, 6)\n\n\n# Another example\ntest_list1 = (1, 2, 3, 4, 5, 6)\ntest_list2 = (1, 2, 3, 4)\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: ()\n\n# Another example\ntest_list1 = (1, 2, 3, 4, 5, 6)\ntest_list2 = (7, 8, 9, 10)\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: (1, 2, 3, 4, 5, 6) ",
        "generated_testcode": "assert remove_matching_tuple((\"abc\", \"def\") == (\"abc\", \"def\")\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1] \n\ndef largest_palindrome(arr): \n    max_palindrome = 0\n    for i in arr :\n        if is_palindrome(i) :\n            max_palindrome = max(max_palindrome, i)\n    return max_palindrome\n\n#Example:\narr = [123, 5432, 456, 99, 1221, 122, 788, 345]\nprint(largest_palindrome(arr)) # Output: 121 ",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    c = 1\n    for i in range(1, min(r, n-r)+1): \n        c = c*(n-i+1)//i \n    return c \n\ndef binomial_probability(n, r, p):\n    return nCr(n, r) * (p**r) * ((1-p)**(n-r))\n\nn = 6\nr = 4\np = 0.4\nq = 1-p\nqr = q**(n-r)\npr = p**r\nprob = (nCr(n, r) * pr * qr) + nCr(n, r-1) * p * qr\nprint(\"Probability: \", round(prob, 4)) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    tup.sort(key=lambda x:x[1]) \n    return tup\n\n# Example usage:\n# tup = [(1, 4), (2, 3), (3, 1), (4, 2), (5, 0), (6, 5)] \n# print(sort_tuple(tup))  # Output: [(5, 0), (3, 1), (4, 2), (2, 3), (1, 4), (6, 5)] ",
        "generated_testcode": "assert sort_tuple(()) == []\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the area of a pentagon given the length of one of its sides.\n    \"\"\"\n    import math\n    area = (5 * (a ** 2 - 2 * (math.sqrt(5 * (5 - 2 * math.cos(math.radians(108)) * a ** 2)) ** 2)) / 4)\n    return area\n\n# Test the function\nprint(area_pentagon(5)) # Output: 41.7942060008670368766\n\nprint(area_pentagon(3)) # Output: 13.693964166917995733\n\n\n# Write a function to find the area of a hexagon\ndef area_hexagon(a):\n    \"\"\"\n    Returns the area of a hexagon given the length of one of its sides.\n    \"\"\"\n    import math\n    area = (3 * math.sqrt(3) * (a ** 2) / 2)\n    return area\n\n# Test the function\nprint(area_hexagon(4)) # Output: 35.861752165722239802\nprint(area_hexagon(5)) # Output: 64.95192393347573325\n\n# Write a function to find the area of an octagon\ndef area_octagon(a):\n    \"\"\"\n    Returns the",
        "generated_testcode": "assert area_pentagon(5) == 50.265487666928112089\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort() \n    max_freq = 1\n    curr_freq = 1\n    curr_val = arr[0]\n    for i in range(1, n): \n        if arr[i] == arr[i-1]: \n            curr_freq += 1\n        else: \n            max_freq = max(max_freq, curr_freq)\n            curr_val = arr[i]\n            curr_freq = 1\n    return max(max_freq, curr_freq)\n\n\narr = [1,2,3,4,5,5,5,5,6,7,8,9,9]\nn = len(arr)\nprint(\"Frequency of largest element is\", frequency_Of_Largest(n,arr)) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,6]) == 1\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    symmetric_list = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i] == test_list[j]):\n                symmetric_list.append((test_list[i], test_list[j]))\n    return symmetric_list\n\n\n# Test the function with a sample tuple\ntest_list = (1, 3, 4, 5, 6, 3, 1, 6, 7, 8, 8)\nprint(extract_symmetric(test_list))  # Output: [(1, 1), (3, 3), (4, 4), (6, 6), (8, 8)] ",
        "generated_testcode": "assert extract_symmetric(()) == set()\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum=0\n    i=0\n    while i<n:\n        sum+=a*(r**i)\n        i+=1\n    return sum\na=int(input(\"Enter first term: \"))\nn=int(input(\"Enter number of terms: \"))\nr=int(input(\"Enter common ratio: \"))\nprint(\"Sum of GP is: \",sum_gp(a,n,r))\n\n#example testcase\n#Enter first term: 2\n#Enter number of terms: 5\n#Enter common ratio: 2\n#Sum of GP is: 62.0 ",
        "generated_testcode": "assert sum_gp(1,10,2) == 1023\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    first = 0\n    last = len(item_list)-1\n    found = False\n    while( first<=last and not found):\n        mid = (first + last)//2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\n#example\nprint(binary_search([1,2,3,4,5,6,7,8,9],7) #True ",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9,10], 4) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    hexagon_coords = []\n    points = [\n        (radius, 0),\n        (radius / 2, -radius),\n        (-radius / 2, -radius),\n        (-radius, 0),\n        (-radius / 2, radius),\n        (radius / 2, radius),\n        (radius, 0)\n    ]\n    for i in range(startx, endx):\n        for j in range(starty, endy):\n            polygon_coords = [(x + i, y + j) for x, y in points]\n            hexagon_coords.append(polygon_coords)\n    return hexagon_coords\n\n# Test the function with startx = 0, starty = 0, endx = 10, endy = 10, radius = 2\nhexagons = calculate_polygons(0, 0, 10, 10, 2)\nfor hexagon in hexagons:\n    print(hexagon)\n\n# Output should be:\n# [(2, 0), (1.0, -2.0), (0, -2), (-1.0, -2.0), (-2, 0), (-1.0, 2.0), (0, 2)]\n# [(4, 0), (3.0, -2.0), (2, -2), (1, -2.0), (0, 0), (1, 2), (2, 2)]\n# [(6, 0), (4.0, -2.0), (3, -2), (2, -2.0), (1, 0), (2, 2), (3, 2)]\n# [(8, 0), (5.0, -2.0), (4, -2), (3, -2.0), (2, 0), (3, 2), (4, 2)]\n# [(10, 0), (6.0, -2.0), (5, -2), (4, -2.0), (3, 0), (4, 2), (5, 2)]\n# [(2, 2), (1.0, 0), (0, -2), (-1.0, -2.0), (-2, 0), (-1.0, 2.0), (0,",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [(5, 0), (10, 8), (10, 10), (0, 10), (-5, 8), (-5, 0), (0, 0)]\n\n# The function should return a list of 6 tuples representing the coordinates of the hexagon with the given start and end points and radius. \n# The first point should be the top center of the hexagon (startx, starty), the second point should be the top right corner, the third point should be the bottom right corner, \n# the fourth point should be the bottom left corner, the fifth point should be the top left corner, the sixth point should be the bottom left corner, and the last point should be the top left corner. \n# The coordinates should be rounded to the nearest integer. ",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a binary tuple to an integer.\n    :param test_tup: tuple\n    :return: integer\n    \"\"\"\n    return int(\"\".join(str(i) for i in test_tup), 2)\n\n\n\n# Test the function with a sample binary tuple\ntest_tup = (0, 1, 1, 0, 1, 1, 1, 1, 0, 1)\nprint(binary_to_integer(test_tup))  # Output: 83\n\n",
        "generated_testcode": "assert binary_to_integer(()) == ",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)\n\n# Test the function with a sample string\nstr1 = 'Hello, World! This is a test string with lowercase letters and UPPERCASE letters'\nresult = remove_lowercase(str1)\nprint(result)\n\n# Output: 'Hello, World! This is a test string with UPPERCASE letters' ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"Hello World\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #create a max heap\n    for i in range(n//2,-1,-1,-1):\n        heapify(nums,n,i)\n    #remove the smallest element n times\n    for i in range(n):\n        nums[0],nums[i] = nums[0],nums[i]\n        heapify(nums,n-i-1,0)\n        #return the n smallest elements\n    return nums[n:]\n    \ndef heapify(nums,n,i):\n    #check if the parent node has a smaller child node\n    smallest = i\n    left = 2*i+1\n    right = 2*i+2\n    if left < n and nums[left] < nums[smallest]:\n        smallest = left\n    if right < n and nums[right] < nums[smallest]:\n        smallest = right\n    #swap the parent with the smallest child if the parent is not the smallest\n    if smallest != i:\n        nums[i],nums[smallest] = nums[smallest],nums[i]\n        heapify(nums,n,smallest)\n        \n#example usage:\nnums = [3,2,1,5,6,7,4,8,10,12,11]\nn = 3\nprint(heap_queue_smallest(nums,n)) #[1,2,3] ",
        "generated_testcode": "assert heap_queue_smallest([4, 2, 1, 6, 5, 3, 7], 3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 22/7\n    return pi * r * (r + (r+h)**2)**0.5\n\n# Test the function\nprint(surfacearea_cone(5, 7))  # Output: 39.2487562224792748997\nprint(surfacearea_cone(3, 8))  # Output: 153.940480588383310635\n\nprint(surfacearea_cone(10, 2))  # Output: 3555.31523888400974844\n\nprint(surfacearea_cone(12, 1))  # Output: 100.5792493848618817\n\n\n\n#Explanation:\n# The formula to calculate the surface area of a cone is:\n# Surface area = pi * radius * (radius + height^2)\n# We define a function named surfacearea_cone that takes two parameters: r and h, which represent the radius and height of the cone respectively.\n# We assign the value of pi as 22/7 to avoid using the math module.\n# We then calculate the surface area using the formula and return the result. \n# Finally, we test the function with some sample test cases. ",
        "generated_testcode": "assert surfacearea_cone(4, 7) == 157.07\n# This should return 157.07. ",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n# example usage:\nprint(gcd(24, 16)) # Output: 8\nprint(gcd(100, 25)) # Output: 25\nprint(gcd(15, 12)) # Output: 3\nprint(gcd(12, 14)) # Output: 2\nprint(gcd(17, 23)) # Output: 1 ",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return r * 2\n\n# Define the radius of a circle\nradius = 5\n\n# Call the diameter_circle function and pass it the radius\ndiameter = diameter_circle(radius)\n\n# Print the result\nprint(\"The diameter of the circle is:\", diameter)\n\n\n# Example Output:\n# The diameter of the circle is: 10 ",
        "generated_testcode": "assert diameter_circle(5) == 10\n\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    string = \"\"\n    for element in list:\n        string += str(element)\n    return string\n\n# Test the function with a sample list\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult = concatenate_elements(my_list)\nprint(result) ",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    gcd = 1\n    if x>y:\n        small = y\n    else:\n        small = x\n    for i in range(1,small+1):\n        if x%i==0 and y%i==0:\n            gcd = i\n    return gcd\n\ndef lcm(x,y):\n    lcm = (x*y)//ngcd(x,y)\n    return lcm\n\nx = int(input(\"Enter first number: \"))\ny = int(input(\"Enter second number: \"))\nprint(\"GCD of\",x,\"and\",y,\"is\",ngcd(x,y))\nprint(\"LCM of\",x,\"and\",y,\"is\",lcm(x,y)) ",
        "generated_testcode": "assert ngcd(12,8) == 4\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if(n>m):\n        r=n%m\n        return r\n    else:\n        r=m%n\n        return r\nn=int(input(\"Enter the first number:\"))\nm=int(input(\"Enter the second number:\"))\nprint(\"Remainder is:\",find(n,m))\n\n\n#example:\n#Enter the first number:10\n#Enter the second number:5\n#Remainder is: 0\n#Enter the first number:15\n#Enter the second number:6\n#Remainder is: 3 ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums) - 1):\n        result.append(nums[i] + nums[i + 1])\n    return result\n\n# Test the function with an example\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8])) #[3, 5, 7, 9, 11, 13] ",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5]) == 9\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = (n * (n + 1) / 2) ** 2 \n    return int(sum) \n\n# Driver code \nn = 5\nprint(\"The sum of first\", n, \"cubes of natural numbers is :\", sum_Of_Series(n)**3) ",
        "generated_testcode": "assert sum_Of_Series(3) == 36\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    zero_count=0\n    for i in range(len(A)):\n        if A[i]==0:\n            zero_count+=1\n    j=0\n    while j<zero_count:\n        A.append(0)\n        A.remove(0)\n        j+=1\n    return A\n\n#testing\narr=[1,0,2,0,3,4,0,5,6,0]\nprint(re_order(arr)) #output:[1, 2, 3, 4, 5, 6, 0, 0, 0, 0]\narr=[0,0,0,0,0,0,1,2,3]\nprint(re_order(arr)) #output:[1, 2, 3, 0, 0, 0, 0, 0, 0] ",
        "generated_testcode": "assert re_order([1, 0, 2, 0, 3, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if k == 0:\n        return 1\n    if n == k:\n        return 1\n    if k == 1:\n        return n\n    return n * permutation_coefficient(n-1, k-1)\n\n# example usage: permutation_coefficient(5, 2)  # Output: 20\n\n\n# Time Complexity: O(n) \n# Space Complexity: O(1) ",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 20\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for word in list1:\n        if word not in removewords:\n            result.append(word)\n    return result\n\nlist1 = ['hello', 'world', 'python', 'programming', 'language']\nremovewords = ['hello', 'python']\n\nprint(remove_words(list1, removewords)) # Output: ['world', 'programming', 'language'] ",
        "generated_testcode": "assert remove_words(['apple', 'banana', 'orange', 'grape', 'watermelon'], ['banana', 'orange']) == ['apple', 'watermelon']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(l1) != len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n\n# Example usage:\n# l1 = [1, 2, 3, 4, 5]\n# l2 = [1, 2, 3, 4, 5]\n# l3 = [1, 2, 5, 4, 3]\n# l4 = [1, 2, 3, 4, 6]\n# print(same_order(l1, l2))  # True\n# print(same_order(l1, l3))  # False\n# print(same_order(l1, l4))  # False ",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    count = 0\n    while(i <= n) : \n        sum = sum + i \n        count = count + 1\n        i = i + 2\n    return (sum/count) \n\n#test the function \nn = 111\nprint(\"Average of odd numbers till\", n, \"is\", average_Odd(n)) ",
        "generated_testcode": "assert average_Odd(3) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr)\n    dp = [0] * (k+1)\n    dp[0] = 1\n    for i in range(n):\n        dp[i%k] += dp[(i-arr[i])%k]\n    return dp[-1]\n\n# Driver code \narr = [3, 2, 7, 4]\nk = 10\nprint(no_of_subsequences(arr, k)) ",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 10) == 7\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    min_sum = 0\n    for i in range(1, num+1):\n        if num % i == 0:\n            min_sum += i\n    return min_sum\n\n#Test the function\nprint(find_Min_Sum(15))\nprint(find_Min_Sum(20))\nprint(find_Min_Sum(30))\nprint(find_Min_Sum(45)) ",
        "generated_testcode": "assert find_Min_Sum(12) == 7 # Testing for a number with 6 factors and minimum sum as 7\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    flat_list = [] \n    for i in test_tuple: \n        if isinstance(i, tuple): \n            flat_list.extend(flatten(i)) \n        else: \n            flat_list.append(i) \n    return flat_list \n\ndef count_freq(test_tuple):\n    flat_list = flatten(test_tuple)\n    freq_dict = {}\n    for element in flat_list:\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict\n\n#Test the function\ntest_tuple = (1, (2, 3, ('a', 'b', (5, 6, 2), 7), 4) ,5, (6, (8, 9, (5, 10, 2), 8), 7) )\nprint(count_freq(test_tuple)) ",
        "generated_testcode": "assert flatten(()) == {}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    test_list = list(test_tup)\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + K\n    return test_list\n\n#Test the function\ntest_tup = ('apple', 'banana', 'cherry')\nK = ',fruit'\nprint(add_str(test_tup, K)) ",
        "generated_testcode": "assert add_str((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"), \"fruit\") == [\"apple fruit\", \"banana fruit\", \"cherry fruit\", \"date fruit\", \"elderberry fruit\", \"fig fruit\"]\n\n\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for num in test_tup:\n        sum += num\n    return sum\n\n#Test the function\ntest_list = (1, 2, 3, 4, 5, 6, 7)\nprint(\"Sum of elements in tuple:\", sum_elements(test_list)) ",
        "generated_testcode": "assert sum_elements((1,2,3,4,5,6,7,8,9)) == 45\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    found = [False] * (10**9 + 1) \n    s = sum(arr) \n    if s % m == 0: \n        return True\n    for i in range(n): \n        if s % m != 0: \n            found[s % m] = True\n        s -= arr[i] \n        if found[s % m]: \n            return True\n    return False\n\nn, m = map(int, input().split())\narr = list(map(int, input().split())[:n]\nif modular_sum(arr, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Find the maximum number to know number of digits\n    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(nums,exp)\n        exp *= 10\n\ndef counting_sort(nums,exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    # Store count of occurrences in count[]\n    for i in range(n):\n        index = (nums[i]//exp)\n        count[(index)%10] += 1\n    # Change count[i] so that count[i] now contains actual position of this digit in output[]\n    for i in range(1,10):\n        count[i] += count[i-1]\n    # Build the output array\n    i = n-1\n    while i>=0:\n        index = (nums[i]/exp)\n        output[count[index%10]-1] = nums[i]\n        count[index%10] -= 1\n        i -= 1\n    # Copying the output array to nums[], so that nums[] now contains sorted numbers acc. to current digit\n    i = 0\n    for i in range(n):\n        nums[i] = output[i]\n        exp *= 10\n\n# Example usage:\nnums = [170, 45, 75",
        "generated_testcode": "assert radix_sort([4, 1, 2, 8, 5, 3, 7]) == [1, 2, 3, 4, 5, 7, 8]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max = 0\n    for num in list1: \n        if num > max and num > 0: \n            max = num\n    return max\n\nlist1 = [-2, 4, 10, 5, -7, 3, 8, -12]\nprint(\"Original list: \", list1)\nprint(\"Largest positive number in the list: \", largest_pos(list1)) ",
        "generated_testcode": "assert largest_pos([1, 2, 3, 5, -5, 10, 0, -1, 20, 15]) == 20\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Finds the square root of a perfect number.\n\n    \"\"\"\n    root = 1\n    while root * root < num:\n        root += 1\n    if root * root == num:\n        return root\n    else:\n        return \"Not a perfect square\"\n\n\nprint(sqrt_root(16))\nprint(sqrt_root(10))\nprint(sqrt_root(36))\nprint(sqrt_root(144))\n\nprint(sqrt_root(35))\nprint(sqrt_root(361)) ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes the length of the edges of a tetrahedron as an argument and returns its volume.\n    \"\"\"\n    import math\n    return (math.sqrt(2)/12)*num**3\n\n# Test the function with an example\nprint(volume_tetrahedron(4.5)\n\n# Output: 1.35357360331768663483\n\n\n# Solution:The formula for calculating the volume of a tetrahedron is:\n# V = (1/6) * \u221a(2) * edge^3\n# We can use this formula to find the volume of the tetrahedron by taking the length of the edge as the input parameter and returning the result. ",
        "generated_testcode": "assert volume_tetrahedron(2, 4, 6) == 12\n\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": " \n    if num1 > num2: \n        greater = num1 \n    else: \n        greater = num2 \n  \n    while True: \n        if greater % num1 == 0 and greater % num2 == 0: \n            lcm = greater \n            break\n        greater += 1\n  \n    return lcm \n\ndef find_lcm_of_array(arr):\n    lcm = arr[0] \n    n = len(arr) \n    for i in range(1, n): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n  \n# Test the function with example \narr = [12, 4, 7, 24, 13, 26] \nprint(find_lcm_of_array(arr)) ",
        "generated_testcode": "assert find_lcm(12, 15) == 60\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if x==y:\n        return \"This is an isosceles triangle\"\n    elif y==z:\n        return \"This is an isosceles triangle\"\n    elif x==z:\n        return \"This is an isosceles triangle\"\n    else:\n        return \"This is a scalene triangle\"\nx=int(input(\"Enter the first side: \"))\ny=int(input(\"Enter the second side: \"))\nz=int(input(\"Enter the third side: \"))\nprint(check_isosceles(x,y,z)) ",
        "generated_testcode": "assert check_isosceles(3, 4, 5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr)\n    i = 1\n    lis = [1]*n\n    lds = [1]*n\n    max_length = 1\n    while i < n:\n        j = 0\n        while j < i:\n            if arr[i] > arr[j] and lis[j]+1 > lis[i]:\n                lis[i] = lis[j]+1\n            j += 1\n        i += 1\n    i = n-2\n    while i >= 0:\n        j = n-1\n        while j > i:\n            if arr[i] > arr[j] and lds[j]+1 > lds[i]:\n                lds[i] = lds[j]+1\n            j -= 1\n        i -= 1\n    i = 0\n    while i < n:\n        max_length = max(max_length, lis[i]+lds[i]-1)\n        i += 1\n    return max_length\n    \narr = [1,2,3,4,5,6,7,6,5,4,3,2,1]\nprint(\"Length of Longest Bitonic Subsequence is \", lbs(arr)) ",
        "generated_testcode": "assert lbs([1, 11, 2, 10, 4, 5, 2, 1, 7, 6, 10]) == [1, 2, 10, 7, 10]\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return lambda x: (any(char.islower() for char in x) and any(char.isupper() for char in x) and any(char.isdigit() for char in x) and len(x) == 8)\n\n#Example:\n#Input: 'Abcd1234'\n#Output: True\n#Input: 'abcd1234'\n#Output: False\n#Input: 'ABCD1234'\n#Output: False\n#Input: 'Abcdef123'\n#Output: False\n#Input: 'Abcd12345'\n#Output: False\n\n#Note: The length of the string should be 8. ",
        "generated_testcode": "assert (check_string(\"Aa1\") == True)\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(n): \n        max_sum += arr[i]\n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                max_sum -= arr[i]\n                break\n    return max_sum\n\n# Driver Code\narr = [10, 22, 3, 1, 2, 4, 5, 8, 15] \nn = len(arr) \nprint(max_sum_increasing_subsequence(arr, n)) # Output: 30\n\n\narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(max_sum_increasing_subsequence(arr, n)) # Output: 10\n\narr = [10, 2, 3, 1, 2, 11, 15] \nn = len(arr) \nprint(max_sum_increasing_subsequence(arr, n)) # Output: 26 ",
        "generated_testcode": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5, 6, 10, 7]) == 174\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if line1.coefficients[0] * line2.coefficients[1] == line1.coefficients[1] * line2.coefficients[0]:\n        return True\n    else:\n        return False\n\n# Example usage:\n# Example usage:\n# Line1 = Line(1, -2, 3)  # 1x - 2y + 3 = 0\n# Line2 = Line(2, -4, 6)  # 2x - 4y + 6 = 0\n# print(parallel_lines(Line1, Line2))  # Output: True\n# Line3 = Line(1, 2, 3)  # 1x + 2y + 3 = 0\n# Line4 = Line(3, 4, 6)  # 3x + 4y + 6 = 0\n# print(parallel_lines(Line3, Line4))  # Output: False ",
        "generated_testcode": "assert parallel_lines([1, -2, 3], [4, -8, 6]) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    words = str1.split()\n    new_words = []\n    for word in words:\n        if len(word) > 1:\n            new_word = word[0].upper() + word[1:-1] + word[-1].upper()\n        else:\n            new_word = word.upper()\n        new_words.append(new_word)\n    return \" \".join(new_words)\n\n\nprint(capitalize_first_last_letters(\"hello world is a beautiful day\")) ",
        "generated_testcode": "assert capitalize_first_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    num_dict = {}\n    for num in arr:\n        target = sum - num\n        if target in num_dict:\n            count += num_dict[target]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count\n\n\narr = [1, 3, 5, 8, 2, -2, 7, 4, -1]\nn = len(arr)\nsum = 6\nprint(get_pairs_count(arr, n, sum))  # Output: 2 (pairs: (1, 5) and (3, 3) and (2, 4)) ",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 3\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    min_len = float('inf')\n    for i in list1:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_list = i\n    return [i for i in list1 if len(i) == min_len]\n\n\n# Test\nprint(min_length([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8], [1, 2, 3, 4, 5], [7, 8, 9, 10, 11, 12]])) #[7, 8] ",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5, 6, 7], [8, 9], [10, 11, 12, 13, 14]] ) == [8, 9]\n\n\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_lucas(n-1) + 2 * jacobsthal_lucas(n-2))\n\n\n#Testing the function\nfor i in range(10):\n    print(jacobsthal_lucas(i)) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 0\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count / len(nums)\n\n# Example usage:\n# arr = [1, -2, -5, 6, -8, 0, 3, 4, -9, 10, -1]\n# print(negative_count(arr)) # Output: 0.375\n\n\n# The function first initializes a count variable to zero, then loops through each number in the input array. If the number is negative, it increments the count.\n# Finally, it returns the count divided by the length of the array to get the ratio of negative numbers. ",
        "generated_testcode": "assert negative_count([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 0.4\n\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": " \n    # Initialize dp[] to store minimum number of coins required for each value from 0 to V \n    dp = [float('inf')]*(V+1) \n  \n    # base case assigns value 0 for each coin value \n    for i in range(V+1): \n        if i in coins: \n            dp[i] = 1\n  \n    # Loop through all coins for all values from 1 to V \n    for i in range(1, V+1): \n        for j in coins: \n            if j<=i: \n                sub_res = dp[i-j] \n                if sub_res != float('inf') and sub_res+1 < dp[i]: \n                    dp[i] = sub_res+1\n  \n    return dp[V] \n  \n# sample input values \ncoins = [1, 2, 5, 10, 20, 50, 100, 200, 500, 2000, 5000, 20000] \nV = 37 \nprint(min_coins(coins, len(coins), V)) ",
        "generated_testcode": "assert min_coins([1, 2, 5], 5, 11) == 3\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two strings as input and returns True if they are permutations of each other, else False.\n    \"\"\"\n    if len(str1) != len(str2):\n        return False\n    # Convert the strings to lists and sort them\n    sorted_str1 = sorted(list(str1))\n    sorted_str2 = sorted(list(str2))\n    # Compare the sorted lists\n    if sorted_str1 == sorted_str2:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(check_permutation(\"listen\", \"silent\")) # True\nprint(check_permutation(\"hello\", \"world\")) # False ",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return tuple(item for item in test_tuple if type(item) != data_type)\n\n\n# Test the function with sample inputs\ntest_tuple = (1, \"Hello\", 3.4, True, False, None, 5, 3j, [1, 2, 3])\nprint(remove_datatype(test_tuple, int))  # Output: (\"Hello\", 3.4, False, None, complex, [1, 2, 3])\nprint(remove_datatype(test_tuple, bool))  # Output: (1, \"Hello\", 3.4, None, complex, [1, 2, 3])\nprint(remove_datatype(test_tuple, list))  # Output: (1, \"Hello\", 3.4, True, False, None, 5, 3j)\nprint(remove_datatype(test_tuple, complex))  # Output: (1, \"Hello\", 3.4, True, False, None, [1, 2, 3])\nprint(remove_datatype(test_tuple, tuple))  # Output: (1, \"Hello\", 3.4, True, False, None, [1, 2, 3])\nprint(remove_datatype(test_tuple, float))  # Output: (1, \"Hello\", True, False, None, 5, [1, 2, 3])\nprint(remove_datatype(test_tuple, str))   # Output: (1, 3.4,",
        "generated_testcode": "assert remove_datatype((\"abc\", int) == (\"abc\")\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(pattern)\n    m = len(text)\n    for i in range(m-n+1):\n        j = 0\n        while j < n:\n            if text[i+j] != pattern[j]:\n                break\n            j += 1\n        if j == n:\n            return i\n    return -1\n\n# Example usage\ntext = \"Hello, how are you? Are you doing well?\"\npattern = \"are\"\nprint(search_literal(pattern, text))  # Output: 8\n\n\n# This function takes a pattern and a text string as inputs and returns the index where the pattern occurs in the text string. \n# It works by iterating through the text string and comparing each substring of the text with the pattern of the same length as the pattern.\n# If the substring matches the pattern, it returns the index where the match starts. If no match is found, it returns -1. \n# The time complexity of this function is O(mn) where m is the length of the pattern and n is the length of the text string. ",
        "generated_testcode": "assert search_literal(\"abc\",\"abcdabc\") == (True, 0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 22/7\n    return 2 * pi * r * r\n\n# Test the function with a sample value of r\nr = 5\nprint(topbottom_surfacearea(r)) # Output: 51.415707723171029639\n\n\n# Define a function to calculate the surface area of a sphere\ndef surface_area(r):\n    pi = 22/7\n    return 4 * pi * r * r\n\n# Test the function with a sample value of r\nr = 5\nprint(surface_area(r)) # Output: 314.15707723171029639\n\n# Define a function to calculate the volume of a sphere\ndef volume(r):\n    pi = 22/7\n    return 4/3 * pi * r ** 3\n\n# Test the function with a sample value of r\nr = 5\nprint(volume(r)) # Output: 523.60127751279256435\n\n# Define a function to calculate the lateral surface area of a cylinder\ndef lateral_surfacearea(r, h):\n    pi = 22/7\n    return 2 * pi * r * h\n\n# Test the function with sample values of r and h\nr = 5\nh = 10\nprint(lateral_surfacearea(r, h)) # Output",
        "generated_testcode": "assert topbottom_surfacearea(5) == 78.53981633397444833, \"The top surface area of a cylinder with radius 5 should be 78.53981633397444833\"\n\n# Test the function with a radius of 10\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= len(list):\n        return list[::n]\n    else:\n        return list\n\n#Example usage:\nmy_list = [1,2,3,4,5,6,7,8,9,10]\nprint(nth_items(my_list,3)) #[1 4 7]\nprint(nth_items(my_list,2)) #[1, 3, 5, 7, 9] ",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9], 3) == [1,4,7]\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    words = str1.lower().split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            return word\n        else:\n            word_dict[word] = 1\n    return \"No word is repeated.\"\n\n# Test the function with a sample string\nstr1 = \"This is a sample string to find the first repeated word in it.\"\nprint(first_repeated_word(str1) # Output: \"is\" ",
        "generated_testcode": "assert first_repeated_word(\"abca abc\") == \"abc\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    tup = tuple(str1)\n    return tup\n\n# Test the function with sample input\nstring_list = [\"apple\", \"banana\", \"cherry\"]\nprint(string_list_to_tuple(string_list)) # Output: ('a', 'p', 'p', 'l', 'e', 'b', 'a', 'n', 'a', 'n', 'a', 'c', 'h', 'e', 'r', 'r', 'y') ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda base,power:base**power,bases_num,index))\n\n#Example\n# bases_num = [2,3,4,5]\n# index = [5,3,2]\n# basesnum_coresspondingnum(bases_num,index) # Output: [32, 27, 25]\n# 2^5=32, 3^3=27 and 4^2=16. ",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4],3) == [8,27,81]\n\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    freq = [0]*10000\n    for i in range(n): \n        freq[arr[i]]+=1\n    max_freq = -1\n    min_freq = n\n    max_num = 0\n    min_num = 0\n    for i in range(10000): \n        if freq[i]>max_freq: \n            max_freq = freq[i] \n            max_num = i \n        if freq[i]>0 and freq[i]<min_freq: \n            min_freq = freq[i] \n            min_num = i \n    return max_num - min_num \n\n# Taking input from user \narr = list(map(int,input().strip().split())\nn = len(arr) \nprint(find_Diff(arr,n)) ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == 1\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    s = 0\n    for i in range(1, n): \n        if n % i == 0: \n            s += i \n    return s \ndef is_abundant(n): \n    if n < 12: \n        return False \n    else: \n        return get_sum(n) > n ",
        "generated_testcode": "assert get_sum(12) == 3\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub('[.,\\s]+', ':', text)\n\n#Example:\n#Input: \"I love Python, but I hate commas. So let's use colons instead!\"\n#Output: \"I:love:Python:but:I:hate:commas.So:let's:use:colons:instead!\" ",
        "generated_testcode": "assert fill_spaces(\"Hello, World\") == \"Hello:World\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = num1 + num2\n    count = 0\n    while sum>0:\n        count += 1\n        sum //= 10\n    return count\n\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nprint(\"The sum of the numbers is: \",num1+num2)\nprint(\"The number of digits in the sum is: \",count_digits(num1,num2)) ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    flattened = \"\"\n    for i in test_list:\n        if isinstance(i, tuple):\n            flattened += flatten_tuple(i)\n        else:\n            flattened += str(i)\n    return flattened\n\n# test the function\nprint(flatten_tuple((1, 2, (3, 4, (5, 6), (7, 8, (9, 10), 11), 12))) # Output: 123456789101112",
        "generated_testcode": "assert flatten_tuple((1,2,3,4,5) == \"12345\")\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Function to toggle only first and last bits of the given number \n    # If the last bit is set, then unset it else set it \n    n ^= (1 << 0) \n    # If the first bit is set, then unset it else set it \n    n ^= (1 << 31) \n    return n \n\n# Test the function with an example \nn = 34\nprint(bin(take_L_and_F_set_bits(n)) # Output : '0b101010100' ",
        "generated_testcode": "assert take_L_and_F_set_bits(0b10101010101) == 0b1111100000\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    index = -1\n    for i in range(len(string)-1,-1,-1):\n        if string[i] == char:\n            index = i\n            break\n    return index\n\n# Test the function with example\nstring = \"hello world\"\nchar = \"o\"\nprint(last_occurence_char(string, char))  # Output: 7 ",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    ans = 0\n    for i in range(1,n+1):\n        for j in range(i+1, n+1):\n            x = bin(i)[2:]\n            y = bin(j)[2:]\n            x = x.zfill(len(y))\n            y = y.zfill(len(x))\n            ans += sum(c1!=c2 for c1, c2 in zip(x, y))\n    return ans\n\n#example:\nTotal_Hamming_Distance(5) # 8 ",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 26\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr) \n    L = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and L[i]<L[j]+1: \n                L[i] = L[j]+1\n    return max(L) \n\n# Example usage:\narr = [10, 22, 9, 3, 5, 3, 7, 101, 18, 2, 4, 21, 11, 50, 41, 60, 80] \nprint(\"Length of Longest Increasing Subsequence is \", longest_increasing_subsequence(arr))\n",
        "generated_testcode": "assert longest_increasing_subsequence(arr=[1, 10, 2, 3, 1, 4, 9, 11, 12, 5, 6, 7, 13, 8, 19, 20]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    count = 0\n    while count < n : \n        if i % 2 != 0 : \n            sum = sum + pow(i, 5) \n            count += 1\n        i += 1\n    return sum ",
        "generated_testcode": "assert odd_Num_Sum(3) == 341 # Testing for n = 3\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if low<=high: \n        mid = (low + high) // 2 \n        if arr[mid]>arr[mid+1]: \n            return arr[mid]\n        if mid>0 and arr[mid]<arr[mid-1]: \n            return arr[mid-1]\n        if arr[mid]<arr[0]: \n            return find_Max(arr,mid+1,high) \n        return find_Max(arr,low,mid-1) \n    return -1\n\ndef binary_search(arr): \n    return find_Max(arr,0,len(arr)-1) \n\n#example usage:\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\nprint(binary_search(arr)) #output:25\narr = [25,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\nprint(binary_search(arr)) #output:25\narr = [25,24,23,22,21,20,19,18,",
        "generated_testcode": "assert find_Max([1,2,3,4,5,6,7,8],0,4) == 8\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    col = []\n    for i in range(len(list1)):\n        col.append(list1[i][n])\n    return col\n\n# test the function\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(my_list, 1)) # output: [2, 5, 8]\n\n\n# Extract the last column of a list of lists using negative indexing\nprint(extract_column(my_list, -1)) # output: [3, 6, 9] ",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(seq_nums) < 2:\n        return True\n    else:\n        common_diff = seq_nums[1] - seq_nums[0]\n        for i in range(2, len(seq_nums)):\n            if seq_nums[i] - seq_nums[i-1] != common_diff:\n                return False\n    return True\n\n# Test the function with examples\nprint(Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8])) # Should return True\nprint(Seq_Linear([1, 3, 5, 7, 9, 11, 13])) # Should return True\nprint(Seq_Linear([1, 3, 5, 8, 10, 12])) # Should return False\nprint(Seq_Linear([2, 6, 10, 14, 18])) # Should return True\nprint(Seq_Linear([2, 6, 9, 12, 15])) # Should return False ",
        "generated_testcode": "assert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a tuple to a floating-point number.\n    \"\"\"\n    # join the tuple elements to form a string\n    str_num = ''.join(str(i) for i in test_tup)\n    # convert the string to a float\n    float_num = float(str_num)\n    return float_num\n\n# example usage:\ntest_tup = (3, '.', 1, 4, 1, 4, 1, 5, 9)\nprint(tuple_to_float(test_tup))  # Output: 3.14159 ",
        "generated_testcode": "assert tuple_to_float((\"123.45\") == 123.45\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    oddList = []\n    evenList = []\n    for num in list:\n        if num % 2 == 0: \n            evenList.append(num)\n        else: \n            oddList.append(num)\n    return oddList, evenList\n\n# Test the function\nmixedList = [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(\"Original List:\", mixedList)\nodds, evens = Split(mixedList)\nprint(\"Odd numbers:\", odds)\nprint(\"Even numbers:\", evens) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1) :  \n        sum_of_cubes += i ** 3  \n        sum_of_numbers += i  \n    return sum_of_numbers ** 2 - sum_of_cubes ",
        "generated_testcode": "assert difference(5) == 2202\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N) : \n        for j in range(i+1, N) : \n            if (A[i]^A[j]) % 2 != 0 : \n                count += 1\n    return count\n                \n# Taking input using fast I/O method\nfrom sys import stdin  \n  \ndef takeInput() :\n    n = int(stdin.readline().strip())\n    if n == 0 :\n        return list(), 0\n    a = list(map(int, stdin.readline().strip().split())\n    return a, n\n\n# Main function to call the count function\nif __name__ == '__main__' : \n    test = int(stdin.readline().strip())\n    while test > 0 : \n        A, N = takeInput()\n        print(find_Odd_Pair(A, N))\n        test -= 1 ",
        "generated_testcode": "assert find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n\n# or \ndef toggle_string(string):\n    return string.swapcase() ",
        "generated_testcode": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n1_str = str(n1)\n    n2_str = str(n2)\n    distance = 0\n    for i in range(len(n1_str)):\n        for j in range(len(n2_str):\n            distance += abs(int(n1_str[i]) - int(n2_str[j]))\n        return distance\n\n# Test the function\nprint(digit_distance_nums(123, 456)) # output: 6\nprint(digit_distance_nums(789, 1112)) # output: 6\nprint(digit_distance_nums(123, 456)) # output: 12\nprint(digit_distance_nums(1234, 5678)) # output: 16 ",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\n\na = [-2, -3, 4, -1, -2, -1, 5, -3]\nsize = len(a)\nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, size))  # Output: 7\n\n\n\n# Test with different examples:\n# Example 1:\n# Input: [-2, 1, -3, 4, -1, -2, 1, 5, -3]\n# Output: 7\n\n# Example 2:\n# Input: [-2, -3, 4, -1, -2, 1, 5, -3, 6]\n# Output: 8\n# Example 3:\n# Input: [-2, -3, 4, -1, -2, 1, 5, -3, 6, -1, 2]\n# Output: 10\n# Example 4:\n# Input: [-2, -3, 4, -1, -2, 1, -5, 10, -3, 6]\n# Output: 12\n",
        "generated_testcode": "assert max_sub_array_sum([1, -5, 20, 4, -3, 3, 10, -15, 50, 2], 7) == 53\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Converting the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Finding the union of the sets\n    union_set = set1.union(set2)\n    # Converting the set back to tuple\n    union_tup = tuple(union_set)\n    # Returning the tuple\n    return union_tup\n\n# Testing the function\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (4, 5, 6, 7, 8, 9)\nprint(union_elements(test_tup1, test_tup2)) ",
        "generated_testcode": "assert union_elements(('apple', 'banana', 'orange') == ('apple', 'banana', 'orange')\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function will take a tuple as input and will return a dictionary where the key is the element of the tuple and its value is the list of all its similar elements.\n    \"\"\"\n    test_dict = {}\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] not in test_dict:\n                    test_dict[test_list[i]] = [test_list[j]]\n                else:\n                    test_dict[test_list[i]].append(test_list[j])\n    return test_dict\n\n\n\n# Example usage:\ntest_list = (1, 2, 3, 4, 5, 6, 1, 2, 3, 7, 1, 8, 9, 1, 2, 4, 5)\nprint(assign_elements(test_list))  # Output: {1: [1, 1, 1], 2: [2, 2], 4: [4, 4], 5: [5, 5], 3: [3, 3]} ",
        "generated_testcode": "assert assign_elements(('abc') == {'a': 'b', 'b': 'c', 'c': 'a'}\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_length = 0\n    for i in lst:\n        if isinstance(i, list):\n            length = Find_Max_Length(i)\n            if length > max_length:\n                max_length = length\n        else:\n            return 1\n    return max_length + 1\n\n#test the function\nlists = [[1,2,[3,4,5, [6,7,8]], 9, [10,[11,12, [13,14,15, [16,17,18,19,[20,21,22]],[23,24]]]]]\nprint(Find_Max_Length(lists))  # Output: 7 ",
        "generated_testcode": "assert Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    start = text.find(\"\\\"\") + 1\n    end = text.find(\"\\\"\", start)\n    return text[start:end]\n\n# Example usage:\ntext = \"The quick brown fox said \\\"Jumps over the lazy dog\\\"\"\nresult = extract_values(text)\nprint(result) # Output: Jumps over the lazy dog ",
        "generated_testcode": "assert extract_values('The quick brown fox jumps \"over the lazy dog\"') == 'over the lazy dog'\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\nn=int(input(\"Enter the length of the array: \"))\narr=[]\nprint(\"Enter the elements of the array: \")\nfor i in range(n):\n    arr.append(int(input()))\nprint(\"Number of unequal pairs: \",count_Pairs(arr,n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10]) == 30 # Testcase 1\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(word) \n\n#Example:\n# Input: 'Hello'\n# Output: ['H', 'e', 'l', 'l', 'o'] ",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Test cases\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(4567))  # Output: 16\nprint(sum_digits(89))  # Output: 17\nprint(sum_digits(0))  # Output: 0 ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Function to check whether the given list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n#Test the function with some examples\nprint(issort_list([1,2,3,4,5,6,7,8,9,10])) #True\nprint(issort_list([1,2,3,4,5,7,6,8,9])) #False\nprint(issort_list([1,2,3,4,5,6,7,8,8])) #True\nprint(issort_list([10,20,30,40,50,60,70,80])) #True\nprint(issort_list([])) #True\nprint(issort_list([1])) #True ",
        "generated_testcode": "assert issort_list([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Creates a list of empty dictionaries of a specified length.\n\n    :param length: int\n    :return: list of dictionaries\n    \"\"\"\n    return [{} for _ in range(length)]\n\n# Example usage:\n# empty_list(3) returns [{}, {}, {}] ",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        sublist.sort()\n        result.append(sublist)\n    return result\n\n# test the function\nlist1 = [['apple', 'orange', 'banana'], ['cat', 'dog', 'fish', 'lion'], ['hello', 'world', 'python', 'code']]\nprint(sort_sublists(list1) # [['apple', 'banana', 'orange'], ['cat', 'dog', 'fish', 'lion'], ['code', 'hello', 'python', 'world']]\n\n\n# Using list comprehension\ndef sort_sublists_list_comp(list1):\n    return [sorted(sublist) for sublist in list1]\n\nprint(sort_sublists_list_comp(list1)) # [['apple', 'banana', 'orange'], ['cat', 'dog', 'fish', 'lion'], ['code', 'hello', 'python', 'world']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for string in list1:\n        words = string.split()\n        for word in words:\n            if charlist not in word:\n                new_list.append(word)\n    return new_list\n\n#Example Usage:\nwords_list = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"]\nchar_to_remove = \"a\"\nprint(remove_words(words_list, char_to_remove)) #Output: ['banana', 'orange']\n\n\n#Function to remove words containing a certain character or string from a given list of strings\ndef remove_words(list1, charlist):\n    new_list = []\n    for string in list1:\n        words = string.split()\n        for word in words:\n            if charlist not in word:\n                new_list.append(word)\n    return new_list\n\n#Example Usage:\nwords_list = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"]\nchar_to_remove = \"a\"\nprint(remove_words(words_list, char_to_remove)) #Output: ['banana', 'orange']\n\n#Example Usage:\nwords_list = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"]\nstring_to_remove = \"an\"\nprint(remove_words(words_list, string_to_remove)) #",
        "generated_testcode": "assert remove_words(['apple', 'banana', 'orange', 'grape', 'watermelon'], 'ae') == ['pple', 'bnn', 'grp', 'wtrmnl']\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_sum = 0\n    for i in range(N): \n        for j in range(i+1, N): \n            if abs(arr[i]-arr[j]) < K: \n                max_sum = max(max_sum, arr[i]+arr[j])\n    return max_sum \n\n# Driver code \narr = [3, 6, 5, 8, 9, 10, 2, 4, 7, 1, 11]\nK = 4\nN = len(arr) \nprint(max_sum_pair_diff_lessthan_K(arr, N, K)) # Output: 17\n\n# Time Complexity: O(N^2) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 13 # True\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n        else:\n            result.remove(num)\n    return result\n\n# Test the function with a sample list\nnums = [1, 2, 3, 4, 5, 2, 6, 7, 1, 8, 9, 0, 9]\nprint(two_unique_nums(nums)) # Output: [1, 2, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert two_unique_nums([1, 2, 3, 4, 5, 2, 6, 7, 1]) == [3, 4, 5, 6, 7]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_num = []\n    product = 1\n    for num in list_data:\n        if num not in unique_num:\n            unique_num.append(num)\n    for i in unique_num:\n        product *= i\n    return product\n\n#test the function with an example\nprint(unique_product([1,2,3,4,2,3,4,5,6,7,7,8,9,0,8,9,10,0,10])) # Expected output: 0\n\nprint(unique_product([1,2,3,4,5,6,7,8,9])) # Expected output: 362880 ",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi=22/7\n    return (2*pi*r*h)+(2*pi*r**2)\n\n#Example Usage:\n#surfacearea_cylinder(5,10)\n#Output: 157.08\n#Assuming pi is 22/7 as per requirement ",
        "generated_testcode": "assert surfacearea_cylinder(5, 10) == 785.3981634\n# Test case 1: r = 5, h = 10, expected output: 785.3981634\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    c = 0\n    for i in range(L,R+1): \n        if i%A != 0: \n            c+=1\n            if c == N: \n                return i \n    return -1\nA=int(input(\"Enter the given number: \"))\nN=int(input(\"Enter the position of the number: \"))\nL=int(input(\"Enter the lower bound: \"))\nR=int(input(\"Enter the upper bound: \"))\nprint(count_no(A,N,L,R)) ",
        "generated_testcode": "assert count_no(2,10,20) == 11\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # create a dictionary for B\n    dict1 = {}\n    for i in range(m): \n        if B[i] in dict1: \n            dict1[B[i]] += 1\n        else: \n            dict1[B[i]] = 1\n    # traverse through A and check if all elements of B are present in it or not\n    for i in range(n): \n        dict2 = {} \n        for j in range(i,n): \n            # include each element of A in dict2\n            if A[j] in dict2: \n                dict2[A[j]] += 1\n            else: \n                dict2[A[j] ] = 1\n            # check if dict2 is same as dict1\n            if dict1 == dict2: \n                return True\n            # if not, then remove first element from dict2 and move to next element\n            if j-i+1 == m: \n                break\n    return False\n\n# Driver code\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nB = [2, 4, 8]\nn = len(A) \nm = len(B) \nif is_Sub_Array(A,B,n,m): \n    print(\"B is subarray of A\")\nelse: \n    print(\"B is not subarray of A\") ",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8],[1,2,3,4],5,3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initialize a variable to store the last digit \n    last_digit = 1 \n    # Iterate from 1 to n//5, as each set of 5! would have 0 or 5 at the tens digit \n    for i in range(1, n+1, 5): \n        last_digit *= i \n    # Return the last digit \n    return last_digit % 10 ",
        "generated_testcode": "assert last_Digit_Factorial(5) == 2\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n    return list3\n\n#Example usage:\nlist1 = [1,2,3,4,5]\nlist2 = ['a','b','c','d']\nlist3 = []\nprint(interleave_lists(list1,list2,list3)) # [1, 'a', 2, 'b', 3, 'c', 4, 'd', 5] ",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            result_list.append((test_tup1[i], test_tup2[i]))\n    return result_list\n\n\n# Test the function with two tuples\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ntest_tup2 = (2, 1, 4, 5, 3, 8, 7)\nprint(find_dissimilar(test_tup1, test_tup2)) ",
        "generated_testcode": "assert find_dissimilar(('abc', 'def') == ('abc', 'def')\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result += even_ele(i, even_fnc)\n        elif even_fnc(i):\n            result.append(i)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0\n\ndef is_odd(num):\n    return not is_even(num)\n\ntest_tuple = (1, 2, (3, 4, (5, 6, 7), 8, (9, (10, 11, (12, 13, 14), 15), 16), 17, 18) )\neven_list = even_ele(test_tuple, is_even)\nprint(even_list)\nodd_list = even_ele(test_tuple, is_odd)\nprint(odd_list) ",
        "generated_testcode": "assert even_ele(((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (2, 4, 6, 8, 10)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return (b**2 + b*s + s**2) * 2\n\n#b = base, s = slant_height \n#Taking inputs from user\nb = float(input(\"Enter the base: \"))\ns = float(input(\"Enter the slant height: \"))\n\n#Calling the function\nprint(\"Surface area of the square pyramid is: \", surface_Area(b,s)) ",
        "generated_testcode": "assert surface_Area(5, 10) == 140\n\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\ndict1 = {}\nprint(my_dict(dict1)) #True\ndict2 = {'a':1, 'b':2}\nprint(my_dict(dict2)) #False\n\n\n#Another way to check if a dictionary is empty or not using len() function:\n\ndef my_dict(dict1):\n    return len(dict1) == 0\n\ndict1 = {}\nprint(my_dict(dict1)) #True\ndict2 = {'a':1, 'b':2}\nprint(my_dict(dict2)) #False ",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    return res\n\n# Test the function with some examples\nfor i in range(10):\n    print(catalan_number(i)) ",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b(?:[a-zA-Z]+)ly\\b'\n    adverbs = re.findall(pattern, text)\n    adverb_positions = []\n    for adverb in adverbs:\n        pos = text.find(adverb)\n        adverb_positions.append((adverb, pos))\n    return adverb_positions\n\n# Test\nprint(find_adverbs(\"He walked quickly and happily to the market.\")) # [('quickly', 10), ('happily', 18)] ",
        "generated_testcode": "assert find_adverbs(\"He ran quickly and carefully to the market\") == [(4, \"quickly\"), (6, \"carefully\")]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in two arguments, a list of items with their prices and a value n. It returns a list of n expensive items from the given dataset.\n    \"\"\"\n    heap = []\n    for item, price in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (price, item) )\n        else:\n            if price > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (price, item) )\n    return [item for price, item in heap] ",
        "generated_testcode": "assert expensive_items([[1,2,3,4,5,6,7,8,9,10], 3) == [10,9,8]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    #create a new list and copy first k elements to it\n    b = []\n    for i in range(k):\n        b.append(a[i])\n    #delete the first k elements from the original list\n    for i in range(k):\n        a.pop(0)\n    #add the new list b to the end of the modified list a\n    a.extend(b)\n    return a\n\n#Example usage:\na = [1,2,3,4,5,6,7,8,9]\nn = len(a)\nk = 3\nprint(split_Arr(a,n,k)) #output: [4, 5, 6, 7, 8, 9, 1, 2, 3] ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8],5,2) == [3,4,5,6,7,8,1,2]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n\n#Example Usage:\n#my_list = [1, 2, 3, 4, 5, 6, 7]\n#print(list_tuple(my_list)) #Output: (1, 2, 3, 4, 5, 6, 7)\n\n\n#Write a function to convert a tuple to a set.\ndef tuple_set(tup):\n    return set(tup)\n\n#Example Usage:\n#my_tuple = (1, 2, 2, 3, 4, 4, 5, 5)\n#print(tuple_set(my_tuple)) #Output: {1, 2, 3, 4, 5}\n\n#Write a function to get the length of a list or tuple.\ndef len_list_tuple(list_or_tuple):\n    return len(list_or_tuple)\n\n#Example Usage:\n#my_list = [1, 2, 3, 4, 5]\n#my_tuple = (1, 2, 3, 4, 5)\n#print(len_list_tuple(my_list)) #Output: 3\n#print(len_list_tuple(my_tuple)) #Output: 3 ",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)\n\n# Example usage:\n# print(big_diff([10, 3, 5, 1000, 1, 8, 7]))  # Output: 97\n# print(big_diff([7, 2, 10, 9, 1, 12, 15, 22, 4]))  # Output: 13\n# print(big_diff([5, 2, 8, 15, 3, 2, 1, 10, 12, 17, 7]))  # Output: 14 ",
        "generated_testcode": "assert big_diff([10, 2, 5, 7, 1, 3, 0, 9]) == 9\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    squares = []\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            squares.append(i)\n    return squares\n\n# test the function\nprint(perfect_squares(10, 20))\nprint(perfect_squares(10, 30))\n\n\n# using list comprehension\ndef perfect_squares(a, b):\n    return [i for i in range(a, b+1) if int(i**0.5)**2 == i]\n\n# test the function\nprint(perfect_squares(10, 20))\nprint(perfect_squares(10, 30)) ",
        "generated_testcode": "assert perfect_squares(1, 20) == [1, 4, 9, 16]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Calculate the rectangular coordinates\n    r = (x**2 + y**2)**0.5\n    theta = math.atan2(y,x)\n    x_coord = r*math.cos(theta)\n    y_coord = r*math.sin(theta)\n    return x_coord, y_coord\n\n# Test the function\nprint(polar_rect(3,4)) # Expected output: (3.0, 4.0)\nprint(polar_rect(5,12)) # Expected output: (5.0, 12.0) ",
        "generated_testcode": "assert polar_rect(1,0) == (1,0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(newList) < 2: \n        return newList\n    else: \n        first = newList[0] \n        last = newList[-1] \n        newList[0] = last \n        newList[-1] = first \n        return newList \n\n#Test the function with an example \nprint(swap_List([10,20,30,40,50,60])) #Output: [60, 20, 30, 40, 50, 10] ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5, 6]) == [6, 2, 3, 4, 5, 1]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(k): \n        res = res * (n-i) \n        res = res // (i+1) \n    return res \n  \ndef sum_of_prod_binomial(n, k):\n    result = 0\n    for i in range(k, n+1):\n        result += binomial_Coeff(n, i)\n    return result \n  \n# test the function with example\nn = 5\nk = 3\nprint(\"The sum of product of binomial co-efficients is\", sum_of_prod_binomial(n,k)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return '.'.join([str(int(i) for i in ip.split('.')])\n    return ip.lstrip('0') or '0'\n\n\n# test the function with sample inputs\nprint(removezero_ip('000.000.0.100')) # Output: 0.0.100\nprint(removezero_ip('0.0.0.00.100')) # Output: 0.0.0.100\nprint(removezero_ip('000.01.00.100.0000')) # Output: 0.1.100.0\nprint(removezero_ip('0.0.0.0.0')) # Output: 0\nprint(removezero_ip('00.000.0.00.00')) # Output: 0\nprint(removezero_ip('192.001.00.00.01')) # Output: 192.1.0.1\nprint(removezero_ip('01.00.0.01')) # Output: 1.0.0.1 ",
        "generated_testcode": "assert removezero_ip(\"000.0255.000.0100\") == \"0.25.0.100\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum - odd_sum\n\n\n# Test the function with a sample list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(diff_even_odd(list1)) ",
        "generated_testcode": "assert diff_even_odd([1,2,3,4,5,6,7,8,9]) == 2\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0 \n    for i in range(len(str1)): \n        if str1[i]!=str2[i]: \n            count+=1\n    return count\n\n#example\nstr1 = '01001'\nstr2 = '11101'\nprint(min_Swaps(str1,str2)) ",
        "generated_testcode": "assert (min_Swaps(\"010011010101\",\"10101010100\")==2)\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return len(tuple_list)\n\n# Example usage:\nmy_tuple = ('apple', 'banana', 'cherry', 'date')\nprint(tuple_size(my_tuple)) # Output: 3 ",
        "generated_testcode": "assert tuple_size((1,2,3,4,5)) == 3\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k // 2)\n    j = k - i\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n-j, k)\n\n# Test the code\ndef main():\n    arr1 = [1, 3, 5, 7, 9, 11]\n    arr2 = [2, 4, 6, 8, 10]\n    m = len(arr1)\n    n = len(arr2)\n    k = 5\n    print(find_kth(arr1, arr2, m, n, k))\n\nmain() ",
        "generated_testcode": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8, 9], 3, 4, 3) == 6\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    num = number\n    while(num > 0):\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n\n# Test the function with an example\nprint(armstrong_number(153)) # Output: True ",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\n# test the function\nresult = sum_average(10)\nprint(\"Sum:\", result[0])\nprint(\"Average:\", result[1]) ",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1: \n        return False\n    else: \n        return True\n\n# Test the function with an example \nprint(is_Even(10)) # True\nprint(is_Even(7)) # False ",
        "generated_testcode": "assert is_Even(10) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "\t    self.a = a \n\t    self.b = b \n\tdef __repr__(self): \n\t    return \"({}, {})\".format(self.a, self.b) \n\nclass Graph:\n    def __init__(self): \n        self.vertex = {} \n\n    def addEdge(self, a, b):\n        if a not in self.vertex: \n            self.vertex[a] = [] \n        if b not in self.vertex: \n            self.vertex[b] = [] \n        self.vertex[a].append(b) \n        self.vertex[b].append(a)\n\n    def dfs_util(self, v, visited, length, max_len): \n        visited[v] = True\n        for i in self.vertex[v]: \n            if visited[i] == False: \n                length = self.dfs_util(i, visited, length + 1, max_len) \n        if length > max_len[0]:\n            max_len[0] = length \n        return length\n\n    def dfs(self): \n        visited = {k: False for k in self.vertex} \n        max_len = [0] \n        for i in self.vertex:\n            if visited[i] == False:\n                self.dfs_util(i, visited, 0, max_len) \n        return max_len[0]\n",
        "generated_testcode": "assert longest_chain([(1,2), (2,3), (3,4), (4,5), (5,6)]) == [1, 2, 3, 4, 5, 6]\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None\n\n# test the function\nprint(first_repeated_char(\"hello\")) # Output: 'l'\nprint(first_repeated_char(\"abcd\")) # Output: None ",
        "generated_testcode": "assert first_repeated_char(\"hello\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    ludics = [1]\n    num = 1\n    while len(ludics) < n:\n        num += 1\n        if all(num % i != 0 for i in range(2, num)):\n            ludics.append(num)\n            for i in range(len(ludics) - 1, 0, -1):\n                if num % ludics[i] == 0:\n                    break\n            else:\n                for i in range(len(ludics) - 1, 0, -1):\n                    ludics.append(num * ludics[i])\n    return ludics[:n]\n\n# example usage: get_ludic(10) => [1, 1, 2, 3, 4, 7, 9, 12, 15, 20, 21, 26, 27, 35, 38, 45] ",
        "generated_testcode": "assert get_ludic(1) == []\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    words = s.split()\n    return ' '.join(reversed(words))\n\n# Test the function with an example\ns = \"Hello world!\"\nprint(reverse_words(s)) # Output: \"world! Hello\"\n\n\n# Explanation:\n# The given string \"Hello world!\" is split into a list of words using the `split()` method. This results in the list `[\"Hello\", \"world!\"]`.\n# Then, the `reversed()` function is used to reverse the order of the words in the list.\n# Finally, the list of words is joined back into a string using a space as the separator, which results in the string \"world! Hello\". ",
        "generated_testcode": "assert reverse_words(\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with example values\nprint(prime_num(11) == True)\nprint(prime_num(12) == False)\nprint(prime_num(2) == True)\nprint(prime_num(101) == True)\nprint(prime_num(1) == False) ",
        "generated_testcode": "assert prime_num(2) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    radian = degree * (22/180) * 3.14159\n    return radian\nprint(radian_degree(45)\nprint(radian_degree(90)\nprint(radian_degree(180)\nprint(radian_degree(270)\nprint(radian_degree(360) ",
        "generated_testcode": "assert radian_degree(180) == math.pi\n\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start()\n    else:\n        return None, None\n\n#Test function\ntext = \"Hello, how are you?\"\npattern = \"how\"\nprint(find_literals(text, pattern)) # ('how', 7)\n\n\ntext = \"I love Python\"\npattern = \"java\"\nprint(find_literals(text, pattern)) # (None, None) ",
        "generated_testcode": "assert find_literals(\"Hello, World!\", \"World\") == True, 7\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    bell = [[0 for j in range(n + 1)] for i in range(n + 1)] \n    for i in range(n + 1): \n        bell[i][0] = 1\n        bell[i][i] = 1\n    for i in range(1, n): \n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j] \n    return bell[n][0] ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if A==0 and B==0:\n        return 0\n    if B==0:\n        return A\n    if A==0:\n        return B\n    if A<0 and B<0:\n        A,B = B,A\n    if A>0 and B<0:\n        A,B = -B,-A\n    if A>B:\n        A,B = B,A\n    if A<=B:\n        return A*(N//(B//A+1))\n    else:\n        return A*(N//(B//A+1)-1)\n# Example usage:\n# A=2,B=5,N=10\n# print(floor_Min(A,B,N)) ",
        "generated_testcode": "assert floor_Min(10, 15, 3) == 10\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(list1) < k:\n        return list1\n    else:\n        return list1[:k-1] + list1[k:]\n\n#Example:\n#Input: list1 = [1, 2, 3, 4, 5, 6, 7, 8], k = 3\n#Output: [1, 2, 4, 5, 6, 7, 8]\n#Explanation: The third element (k=3) is removed from the list [1, 2, 3, 4, 5, 6, 7, 8].\n\n#Test the function with the given example:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nk = 3\nprint(remove_kth_element(list1, k)) ",
        "generated_testcode": "assert remove_kth_element([1, 2, 3, 4, 5, 6], 2) == [1, 2, 4, 5, 6]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return max(test_list, key=lambda x: x[N])[N]\n\n\n# Test the function with sample data\ntest_list = [(1, 2, 3), (4, 5, 1), (7, 9, 9), (11, 15, 10)]\nN = 1\nprint(max_of_nth(test_list, N))  # Output: 15\n\n\n# Another test case\ntest_list = [(10, 20, 30), (40, 5, 60), (7, 90, 10), (11, 15, 100)]\nN = 2\nprint(max_of_nth(test_list, N))  # Output: 90 ",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 4\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    first = []  \n    last = []  \n    for i in lst:  \n        first.append(i[0])  \n        last.append(i[-1])  \n    return (first, last) ",
        "generated_testcode": "assert merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == ([1, 7], [2, 3], [4, 5, 6], [8, 9])\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_value = 0\n    for i in test_list:\n        if i[1] > max_value:\n            max_value = i[1]\n            max_item = i\n    return max_item\n\n# test the function\ntest_list = [('apple', 10), ('banana', 20), ('orange', 5), ('mango', 100), ('grapes', 25)]\nprint(maximum_value(test_list)) # Output: ('mango', 100) ",
        "generated_testcode": "assert maximum_value([(1, 2), (3, 4), (5, 6)] ) == 6\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    sum = 0\n    for i in test_list:\n        sum += i\n        result.append(sum)\n    return result\n\n# test the function\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9)) #[1, 3, 6, 10, 15, 21, 28, 36] ",
        "generated_testcode": "assert cummulative_sum((1,2,3,4,5,6)) == (1,3,6,10,15)\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Finds the average value of a tuple of tuples\n    \"\"\"\n    total = 0\n    count = 0\n    for tuple in nums:\n        for num in tuple:\n            total += num\n            count += 1\n    return total/count\n\n# Example usage:\nmy_tuple = ((1,2,3),(4,5,6),(7,8,9))\nprint(average_tuple(my_tuple)) ",
        "generated_testcode": "assert average_tuple(((1, 2, 3, 4, 5, 6, 7, 8, 9) == 5.0\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for num1 in test_tup1:\n        for num2 in test_tup2:\n            if num1 % num2 == 0:\n                result.append(num1)\n            else:\n                continue\n    return result\n\n# Test the function with sample tuples\ntest_tup1 = (4, 8, 12, 16, 20, 24)\ntest_tup2 = (2, 3, 4, 5)\nprint(tuple_modulo(test_tup1, test_tup2)) # Output: [4, 8, 12, 16, 20, 24] ",
        "generated_testcode": "assert tuple_modulo((10, 20, 30), (3, 4, 5)) == (1, 2, 3)\n\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # if d is 0 or b is greater than a, return -1 as we cannot reach the point \n    if d == 0 or b > a: \n        return -1 \n    # if d is less than b, then we can only reach the point if b % d is 0 \n    elif d < b: \n        # return b // d + (b % d) as we need to move to d in b // d jumps and then b % d more jumps to reach the point \n        return b // d + (b % d) \n    # else we can reach the point in b // d jumps \n    else: \n        return b // d ",
        "generated_testcode": "assert min_Jumps(1, 1, 5) == 2\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x/y, nums1, nums2))\n\n#example:\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8,10]\nprint(div_list(nums1, nums2)) #[0.5, 0.5, 0.5, 0.5] ",
        "generated_testcode": "assert div_list(nums1, nums2) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Test case 1: nums1 = [1, 2, 3, 4, 5, 6, 7, 8], nums2 = [2, 2, 2, 2, 2, 2, 2]\n# Expected output: [0.5, 1.0, 2.0, 2.5, 3.0, 4.0]\n\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    num = \"\"\n    str_result = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num += i\n        else:\n            str_result += i\n    return str_result + num\n\n# Test\nprint(move_num(\"Hello 123 world 456\"))  # Expected output: \"Hello world123456\"\nprint(move_num(\"abc123def456ghi\"))  # Expected output: \"abcdefghi123456\"\nprint(move_num(\"123Hello world\"))  # Expected output: \"Hello world123\" ",
        "generated_testcode": "assert move_num(\"a1b2c3\") == \"123\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [1] * n  # Initialize all elements to 1 as each element is a subset of itself\n    max_size = 1  # Initialize max_size to 1 as each element is a subset of itself\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                if dp[i] > max_size:\n                    max_size = dp[i]\n    return max_size\n\n\n\n# Test the function with example\na = [1, 2, 3, 4, 8, 9, 16, 18]\nn = len(a)\nprint(\"Length of largest subset found: \", largest_subset(a, n))  # Output: 3\n\n\na = [4, 8, 12, 16, 32]\nn = len(a)\nprint(\"Length of largest subset found: \", largest_subset(a, n))  # Output: 2\n\n\na = [2, 3, 7, 9, 27, 81]\nn = len(a)\nprint(\"Length of largest subset found: \", largest_subset(a, n))  # Output: 1\n\n\na = [1, 3, 6, 10, 24]\nn = len(a)\n",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 6, 8, 9, 12, 16, 18]) == [1, 2, 4, 8, 16]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for item in test_list:\n        num_str = \"\"\n        for ch in item:\n            if ch.isdigit():\n                num_str += ch\n            elif num_str:\n                num = int(num_str) + K\n                result.append(str(num))\n                num_str = \"\"\n            else:\n                result.append(ch)\n        if num_str:\n            num = int(num_str) + K\n            result.append(str(num))\n        result.append(num_str)\n    return \"\".join(result)\n\n\n# Testing the function with sample inputs\nprint(increment_numerics([\"a1b2c3\", \"x1y2z3\"], 2))  # Output: \"a3b4c5\" \"x3y4z5\"\nprint(increment_numerics([\"1ab2c\", \"12yz3\"], 5))  # Output: \"6ab7c\" \"17yz8\"\nprint(increment_numerics([\"abcd\", \"efgh\"], 3))  # Output: \"abcd\" \"efgh\" ",
        "generated_testcode": "assert increment_numerics([\"a123b45c\", \"x1y22z\", \"123q456\"], 5) == [\"a128b410c\", \"x6y27z\", \"128q411\"]\n\n# Test case 1:\n# Input: [\"a123b45c\", \"x1y22z\", \"123q456\"], 5\n# Output: [\"a128b410c\", \"x6y27z\", \"128q411\"]\n# Explanation: In the first string, \"a123b45c\", we replace 123 with 128, in the second string \"x1y22z\" we replace 1 with 6 and in the third string \"123q456\" we replace 123 with 128.\n\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = j = k = 0\n    median = [0]\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n\n        if k == n:\n            break\n\n    while i < n:\n        median.append(arr1[i])\n        i += 1\n        k += 1\n\n    while j < n:\n        median.append(arr2[j])\n        j += 1\n        k += 1\n\n    if n % 2 == 0:\n        return (median[n//2] + median[n//2-1])/2\n    else:\n        return median[n//2]\n\n# Testing the function with example\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(get_median(arr1, arr2, n)) # Output: 5.5 ",
        "generated_testcode": "assert get_median([1, 3, 5, 7], [2, 4, 6], 3) == 4\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(map(lambda x:x**n,nums)\n\n\nnums = [2,3,4,5]\nn=2\nresult = nth_nums(nums,n)\nprint(result) # Output: [4, 9, 16]\n\n\n# Explanation: \n# The lambda function is used to calculate the n-th power of each element in the list. map() function applies this lambda function to each element of the list and returns a new list with the result. ",
        "generated_testcode": "assert nth_nums([2,3,4,5],2) == [4,9,25]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if string.isupper():\n        return True\n    else:\n        return False\n#Test the function with a sample string\nprint(is_upper(\"HELLO\")) #True\nprint(is_upper(\"Hello\")) #False\nprint(is_upper(\"HELLo\")) #False\nprint(is_upper(\"HELLO WORLD\")) #False\nprint(is_upper(\"HELLOworld\")) #False\nprint(is_upper(\"HELLO WORLD!\")) #False\nprint(is_upper(\"12345\")) #True ",
        "generated_testcode": "assert is_upper(\"hello\") == False\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(newList)<2:  #checking if the length of list is less than 2\n        print(\"List should have at least 2 elements\")\n    else: \n        first_element = newList[0]  #storing the first element of the list in a variable\n        last_element = newList[-1]  #storing the last element of the list in a variable\n        newList[0] = last_element  #replacing the first element with the last element\n        newList[-1] = first_element  #replacing the last element with the first element\n    return newList  #returning the new list with swapped elements\n\n\n#test the function\nprint(swap_List([10, 20, 30, 40, 50, 60, 70]) )  #Passing a list with 5 elements\nprint(swap_List([10]) )  #Passing a list with only one element ",
        "generated_testcode": "assert swap_List([1,2,3,4,5,6]) == [6,2,3,4,5,1]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #calculate the height of the triangle using the formula 2r*h = r*r \n    h = r*(1-((3**0.5)/2)**2)\n    #calculate the area of the triangle using the formula 0.5*base*height \n    area = 0.5*r*h \n    return area \n \n#taking input for the radius of the semicircle \nr = float(input(\"Enter the radius of the semicircle : \")) \n#calling the function to find the area of the largest triangle \nprint(\"The area of the largest triangle that can be inscribed in the semicircle is : \", triangle_area(r)) \n \n#sample input : 5 \n#output : The area of the largest triangle that can be inscribed in the semicircle is : 6.75 ",
        "generated_testcode": "assert triangle_area(3) == 6.0\n\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #initialize variables\n    n = len(array)\n    missing_number = 0\n    \n    #iterate through the array and store the sum of all the numbers in the range of start and end in sum1\n    sum1 = (start+end)*(end-start+1)//2\n    sum2 = sum(array)\n    \n    #find the difference between sum1 and sum2\n    difference = sum1-sum2\n    \n    #if difference is 0, then there are no missing numbers\n    if difference == 0:\n        return end+1\n    \n    #otherwise, the missing number is the difference\n    else:\n        return difference\n\n#example usage\narray = [1,2,3,4,6,7,8,9]\nstart = 1\nend = 9\nprint(find_First_Missing(array,start,end)) #output: 5\n\narray = [1,2,3,4,5,6,7,9]\nstart = 1\nend = 9\nprint(find_First_Missing(array,start,end)) #output: 8 ",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,5) == 6\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.replace(\" \", \"%20\")\n\n# Test cases\nprint(replace_spaces(\"hello world\")) # Output: \"hello%20world\"\nprint(replace_spaces(\"hello  world \")) # Output: \"hello%20%20world\"\nprint(replace_spaces(\"   hello world \")) # Output: \"%20%20%20hello%20world\"\nprint(replace_spaces(\"h ello world\")) # Output: \"h%20ello%20world\"\nprint(replace_spaces(\"hello     world\")) # Output: \"hello%20%20%20%20%20%20%20world\" ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello%20world\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    even = [] \n    odd = [] \n    for num in list: \n        if num % 2 == 0: \n            even.append(num) \n        else: \n            odd.append(num) \n    return even, odd \n  \n# Sample list \nmixed_list = [1, 2, 4, 6, 8, 10, 12, 15, 18, 20, 22, 45, 6] \n# Calling the function and printing the even and odd numbers \neven, odd = Split(mixed_list) \nprint(\"Even numbers:\", even) \nprint(\"Odd numbers:\", odd) ",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\n\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    x,y = ele \n    for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]: \n        sub.append((x+dx, y+dy)) \n    return sub\n\ndef adjacent_coordinates(coordinate):\n    x, y = coordinate\n    return [(x+dx, y+dy) for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]]\n\n#Test:\ncoordinate = (2, 3)\nprint(adjacent_coordinates(coordinate)) #[(1, 3), (3, 3), (2, 2), (2, 4)] ",
        "generated_testcode": "assert adjac((1,1)) == [(0,1),(1,0),(2,1),(1,2),(1,0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(r\"\\s\", \"_\", text)\n\n# Test\nprint(replace_spaces(\"happy birthday\")) # happy_birthday\nprint(replace_spaces(\"hello world\")) # hello_world\nprint(replace_spaces(\"Python is fun\")) # Python_is_fun\nprint(replace_spaces(\"I love Python\")) # I_love_Python ",
        "generated_testcode": "assert replace_spaces(\"I love Python\") == \"I_love_Python\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    zeroes = []\n    non_zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n    return non_zeroes + zeroes\n\n\n#test the function\nprint(move_zero([0,1,2,0,3,4,0,6,7,0,9])) #[1, 2, 3, 4, 6, 7, 9, 0, 0, 0] ",
        "generated_testcode": "assert move_zero([0, 3, 1, 0, 4, 0, 5]) == [3, 1, 4, 5, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Initializing sum variable\n    sum = 0\n    # Loop through all the elements of the array\n    for i in range(n) : \n        # Loop through all the elements of the array again\n        for j in range(i + 1, n) : \n            # XOR the current element with all the elements after it\n            sum = sum ^ arr[j] \n        # XOR the current element with the sum so far\n        sum = sum ^ arr[i] \n    # Return the sum of XOR of all pairs\n    return sum ",
        "generated_testcode": "assert pair_OR_Sum([1, 2, 3, 4, 5], 4) == 18\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while count < n:\n        sum += i**4\n        i += 2\n        count += 1\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of the fourth power of first\", n, \"even natural numbers is\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(4) == 1000000\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"Function to sort iterable using a heap data structure.\"\"\"\n    # Create a new list and build a max heap\n    heap = []\n    for value in iterable:\n        heappush(heap, value)\n    # Pop the smallest value off the heap and append to a new list until it is empty\n    sorted_list = []\n    while heap:\n        sorted_list.append(heappop(heap))\n    # Return the sorted list\n    return sorted_list\n\n\n\n# Example usage:\nunsorted_list = [3, 5, 1, 8, 2, 6, 7, 4]\nsorted_list = heap_sort(unsorted_list)\nprint(sorted_list)  # Output: [1, 2, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert heap_sort([4, 2, 5, 1, 3, 0]) == [0, 1, 2, 3, 4, 5]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a == 0: \n        return \"a cannot be zero\"\n    else: \n        x1 = (-b + (b*b - 4*a*c)**0.5)/(2*a) \n        x2 = (-b - (b*b - 4*a*c)**0.5)/(2*a) \n        if x1 != 0 and x2 != 0: \n            if 1/x1 == x2: \n                return \"Roots are reciprocal of each other\" \n            elif 1/x2 == x1: \n                return \"Roots are reciprocal of each other\" \n            else: \n                return \"Roots are not reciprocal of each other\" \n        else: \n            return \"Roots are not reciprocal of each other\" \n\n#Example: \n# Input: Enter the coefficients of quadratic equation (a,b,c) \n# 1,4,-4 \n# Output: Roots are reciprocal of each other \n\n# Input: Enter the coefficients of quadratic equation (a,b,c) \n# 1,2,-3 \n# Output: Roots are not reciprocal of each other \n\n# Note: The program will check if roots of the quadratic equation are reciprocal of each other or not, if roots exist and are not equal to zero. If a is zero, it will return an error message. ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if actual_cost == sale_amount: \n        return True \n    else: \n        return False \n#Example \nactual_cost = float(input(\"Enter Actual Cost : \")) \nsale_amount = float(input(\"Enter Sale Amount : \")) \nif noprofit_noloss(actual_cost,sale_amount): \n    print(\"No profit and No loss\") \nelse: \n    print(\"Profit or Loss\") ",
        "generated_testcode": "assert noprofit_noloss(1000, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    wci = 13.12 + 0.6215*t - 11.39*v**0.16 + 0.396*t*v**0.16 - 0.0103*t*v\n    return wci\n\ndef test_wind_chill():\n    #Test with values of wind speed and temperature\n    assert round(wind_chill(30, 20),1) == 18.9\n    assert round(wind_chill(15, -10),1) == -24.1\n    assert round(wind_chill(50, 0),1) == -31.5\n    assert round(wind_chill(20, 5),1) == 2.6\n    assert round(wind_chill(10, 10),1) == 9.9\n    assert round(wind_chill(40, 25),1) == -1.2\n    assert round(wind_chill(25, -5),1) == -24.7\n    assert round(wind_chill(0, 30),1) == 30.0\n    print(\"All test cases pass\") ",
        "generated_testcode": "assert wind_chill(5, 10) == 10.0\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n#Example:\n#sample_names = [\"Apple\", \"Banana\", \"cherry\", \"date\", \"eggnog\", \"Fig\"]\n#sample_nam(sample_names)\n#Output: 11\n#Explanation: The names \"Banana\" and \"eggnog\" have been removed because they start with a lowercase letter, so the length of \"Apple\" and \"Fig\" are added to the total length. ",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"dave\", \"eve\", \"Frank\"]) == 10\n# Test case 1: Testing with a list of names where the first and last names start with uppercase letters\n\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = []\n    stack = []\n    for i in items:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            stack.pop()\n        elif not stack:\n            res.append(i)\n    return ''.join(res)\n\nprint(remove_parenthesis(\"a(bc)d\"))  # output: \"ad\"\nprint(remove_parenthesis(\"(bcdef)ghij(kl)mno\"))  # output: \"ghij\"\nprint(remove_parenthesis(\"(a(bcdef)ghi)jkl(mn)o\"))  # output: \"ajkl\"\nprint(remove_parenthesis(\"(a(bc(def)g)hi)j(kl)\"))  # output: \"ajhi\" ",
        "generated_testcode": "assert remove_parenthesis(\"hello (world)\") == \"helloworld\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n % 9 == 0: \n        return True\n    else: \n        return False\n\ndef main():\n    n = int(input(\"Enter a positive integer: \"))\n    if is_nonagonal(n):\n        print(n, \"is a nonagonal number.\")\n    else:\n        print(n, \"is not a nonagonal number.\")\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for row in test_list:\n        if row not in result:\n            result.append(row)\n    return tuple(result)\n\n# Test the function with sample inputs\ntest_list = ((1,2,3),(4,5,6),(1,2,3),(7,8,9),(4,5,6),(7,8,9))\nprint(remove_similar_row(test_list)) # Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9)) ",
        "generated_testcode": "assert remove_similar_row(()) == ()\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r\"\\b\\w*z\\w*\\b\"\n    result = re.search(pattern, text)\n    return result != None\n\n# Test the function\nprint(text_match_wordz_middle(\"hazard\")) # True\nprint(text_match_wordz_middle(\"haz\")) # False\nprint(text_match_wordz_middle(\"artisan\")) # True\nprint(text_match_wordz_middle(\"bazaar\")) # True\nprint(text_match_wordz_middle(\"beautiful\")) # False\nprint(text_match_wordz_middle(\"bizarre\")) # True ",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\") == True\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if k < 0 or k > len(input): \n        return input \n    else: \n        return input[:k][::-1] + input[k:] \n   \n#Example \ninput = [1, 2, 3, 4, 5, 6, 7, 8] \nk = 3\nprint(reverse_Array_Upto_K(input, k)) # Output: [3, 2, 1, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 2) == [2, 1, 4, 3, 6, 5, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = 1 \n    for i in val: \n        result *= i \n    return result\n\ndef kth_index_product(tup, k): \n    n = len(tup) \n    res = [] \n    for i in range(n): \n        for j in range(n): \n            if i != j: \n                temp = list(tup) \n                temp.pop(i) \n                temp.pop(j-1 if j > i else j) \n                res.append(get_product(temp)) \n                \n    res.sort() \n    return res[k-1] \n\ntup = (2, 5, 3, 4, 6, 8, 7) \nk = 3\nprint(kth_index_product(tup, k)) # Output: 84\n\ntup = (1, 6, 4, 2, 8, 5) \nk = 2\nprint(kth_index_product(tup, k)) # Output: 40\n\ntup = (1, 2, 3, 4, 5, 6) \nk = 4\nprint(kth_index_product(tup, k)) # Output: 240 ",
        "generated_testcode": "assert get_product((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 36 # Testing for k = 3\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return (N//K)**3 ",
        "generated_testcode": "assert No_of_cubes(10, 2) == 6\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a string and splits it at the uppercase letters, returning a list of strings.\n    \"\"\"\n    result = []\n    word = \"\"\n    for char in text:\n        if char.isupper() and word != \"\":\n            result.append(word)\n            word = char\n        else:\n            word += char\n    result.append(word)\n    return result\n\n# Test the function\nprint(split_upperstring(\"helloWorldAndAnotherWord\")) # Output: ['hello', 'World', 'And', 'anotherWord']\nprint(split_upperstring(\"TheQuickBrownFox\")) # Output: ['The', 'Quick', 'Brown', 'Fox'] ",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    for i in range(0, len(lst), n):\n        if i < len(lst)-1 and i+n < len(lst):\n            lst[i], lst[i+n] = lst[i+n], lst[i]\n    return lst\n\n# Test the function with a sample list\nsample_lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(exchange_elements(sample_lst)) ",
        "generated_testcode": "assert exchange_elements([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 1, 4, 3, 6, 5, 8]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 0                                                                                                                                                                                                           \n    for i in range(m, n+1):                                                                                                                                                                                              \n        total += nums[i]                                                                                                                                                                                           \n    return total                                                                                                                                                                                                    \n\n#example:\n# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                                       \n# m = 2                                                                                                                                                                                                         \n# n = 5                                                                                                                                                                                                          \n# print(sum_Range_list(nums, m, n))  # output: 20                                                                                                                                                                  \n# print(sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5))  # output: 20 \n\n\n#using slicing\ndef sum_Range_list_slicing(nums, m, n):\n    return sum(nums[m:n+1])\n\n#example:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nm = 2 \n",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 3) == 9\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n!=m:\n        return False\n    for i in range(n):\n        if arr1[i]!=arr2[i]:\n            return False\n    return True\n    \n#Taking input from user\nn=int(input(\"Enter length of array 1:\"))\narr1=[]\narr2=[]\nfor i in range(n):\n    arr1.append(int(input(\"Enter element:\"))\nfor i in range(n):\n    arr2.append(int(input(\"Enter element:\"))\nm=int(input(\"Enter length of array 2:\"))\nfor i in range(m):\n    arr2.append(int(input(\"Enter element:\"))\n    \n#function call\nif are_Equal(arr1,arr2,n,m):\n    print(\"Both arrays are equal\")\nelse:\n    print(\"Both arrays are not equal\")\n    \n#Example:\n#Enter length of array 1:3\n#Enter element:1\n#Enter element:2\n#Enter element:3\n#Enter length of array 2:3\n#Enter element:1\n#Enter element:2\n#Enter element:3\n#Both arrays are equal ",
        "generated_testcode": "assert are_Equal([1,2,3,4,5],[1,2,3,4,5],4,5) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(test_tup1) <= len(test_tup2):\n        for i in test_tup1:\n            if i not in test_tup2:\n                return False\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_subset((1, 2), (1, 2, 3, 4, 5)) == True)\nprint(check_subset((1, 2, 3, 4), (2, 3, 4, 5) == False)\nprint(check_subset((1, 2, 3, 4), (2, 3, 4, 1) == True)\nprint(check_subset((1, 2, 3), (4, 5, 6) == False) ",
        "generated_testcode": "assert check_subset((1, 2, 3), (1, 2, 3, 4)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a matrix into a list of columns\n    \"\"\"\n    col = len(test_list[0])\n    transpose_matrix = [tuple(test_list[j][i] for j in range(col)) for i in range(len(test_list))]\n    return transpose_matrix\n\n\n# Test the function with sample input\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list)) ",
        "generated_testcode": "assert matrix_to_list(()) == ()\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a list of key-value pairs and groups them into a dictionary of lists.\n    \"\"\"\n    from collections import defaultdict\n    d = defaultdict(list)\n    for key, value in l:\n        d[key].append(value)\n    return d\n\n\n#Example usage:\nl = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5)]\nprint(grouping_dictionary(l)) # Output: {'a': [1, 3], 'b': [2, 4], 'c': [5]} ",
        "generated_testcode": "assert grouping_dictionary([('apple', 'red'), ('apple', 'green'), ('banana', 'yellow'), ('apple', 'red')]) == {'apple': ['red', 'green'], 'banana': ['yellow']}\n\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return 2*(l+b)\n\n#testing the function\nprint(rectangle_perimeter(4,5)) #18\nprint(rectangle_perimeter(7,8)) #29\nprint(rectangle_perimeter(2.5,3.5)) #13.0\nprint(rectangle_perimeter(10,2)) #24\n\n\n#Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n#testing the function\nprint(rectangle_area(4,5)) #20\nprint(rectangle_area(7,8)) #56\nprint(rectangle_area(2.5,3.5)) #8.75\nprint(rectangle_area(10,2)) #20.0\n\n#Write a function to find the perimeter of a square\ndef square_perimeter(s):\n    return 4*s\n\n#testing the function\nprint(square_perimeter(4)) #16\nprint(square_perimeter(7)) #28\nprint(square_perimeter(3.5)) #14.0\n\n#Write a function to find the area of a square\ndef square_area(s):\n    return s*s\n\n#testing the function\nprint(square_area(4)) #16\nprint(square_area(7)) #49\nprint(square_area(3.5)) #12.25\n\n#Write a",
        "generated_testcode": "assert rectangle_perimeter(4, 5) == 18\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        sum += i**5\n    return sum\n\n# Taking input from user \nn = int(input(\"Enter a positive integer : \"))\n\n# Calling the function and printing the sum of fifth power of n natural numbers\nprint(\"The sum of fifth power of\", n, \"natural numbers is :\", fifth_Power_Sum(n)) ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 15125\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    a.sort() \n    b.sort() \n    i = 0\n    j = 0\n    diff_sum = 0\n    while i < n and j < n: \n        diff_sum += abs(a[i]-b[j]) \n        if a[i] < b[j]: \n            i += 1\n        else: \n            j += 1\n    return diff_sum \n# Driver code \na = [1,4,7,9,12] \nb = [2,3,5,8,11] \nn = len(a) \nprint(\"Minimum sum of absolute differences is\", find_Min_Sum(a,b,n)) ",
        "generated_testcode": "assert find_Min_Sum([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 3) == 1\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #finding factorial of n\n    fact = 1\n    for i in range(1,n+1) : \n        fact = fact*i\n    #finding first digit of factorial\n    while fact%10 ==0 : \n        fact = fact//10\n    return fact%10\n#driver code\nn = int(input(\"Enter a number: \")\nprint(\"The first digit in factorial of\",n,\"is\",first_Digit(n)) ",
        "generated_testcode": "assert first_Digit(123) == 7\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Create a dictionary to store the count of each item in the list\n    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Find the item with maximum count\n    max_item = None\n    max_count = 0\n    for key, value in count_dict.items():\n        if value > max_count:\n            max_item = key\n            max_count = value\n    return max_item\n\n\n# Test the function with sample input\nlist1 = [1, 2, 3, 4, 2, 5, 6, 3, 5, 7, 1, 2, 3, 8, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8]\nprint(max_occurrences(list1)) # Output: 8 ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"banana\"]) == \"banana\"\n\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(len(x)): \n        for j in range(i+1, len(x)): \n            if x[i] == x[j] and x[i] not in repeat_list: \n                repeat_list.append(x[i]) \n    return repeat_list \n\n# Test the function with sample input \nint_list = [2, 3, 4, 5, 6, 2, 7, 3, 8, 9, 2, 5, 10, 4] \nprint(Repeat(int_list) # Output: [2, 3, 4, 5] ",
        "generated_testcode": "assert Repeat([1,2,3,4,5,6,6,7,8,9,9,10]) == [6,9]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if l1==r1:\n        return [l1,l2]\n    elif l2==r2:\n        return [l1,l2]\n    elif l1>r2:\n        return [l1,l2+1]\n    elif l2>r1:\n        return [l1+1,l2]\n    else:\n        return [l1,l2+1]\n\nl1 = int(input(\"Enter the lower limit of first range: \"))\nr1 = int(input(\"Enter the upper limit of first range: \"))\nl2 = int(input(\"Enter the lower limit of second range: \"))\nr2 = int(input(\"Enter the upper limit of second range: \"))\nprint(\"Points are:\",find_Points(l1,r1,l2,r2)) ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n < 3: \n        return 0\n    if n == 3: \n        return max(arr[0]+arr[1]+arr[2], max(arr[1]+arr[2]+arr[0], arr[2]+arr[0]+arr[1])\n    max_sum = [0]*n \n    max_sum[0], max_sum[1], max_sum[2] = arr[0], max(arr[0], arr[1]), max(max(arr[0]+arr[1], arr[1])+arr[2], arr[2]) \n    for i in range(3, n): \n        max_sum[i] = max(max_sum[i-1], arr[i]+max_sum[i-2], arr[i]+arr[i-1]+max_sum[i-3]-arr[i-3]) \n    return max_sum[n-1] ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_dict = {}\n    sorted_keys = sorted(dict1.keys())\n    for i in sorted_keys:\n        sorted_dict[i] = dict1[i]\n    return sorted_dict\n\n\n# Example usage:\ndict1 = {'a': 10, 'b': 3, 'c': 5, 'd': 15, 'e': 8}\nsorted_dict(dict1)\n# Output: {'a': 10, 'b': 3, 'c': 5, 'd': 15, 'e': 8} ",
        "generated_testcode": "assert sorted_dict(dict1) == {'apple': 1, 'banana': 2, 'orange': 3, 'pear': 4}\n\n\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_val = 0\n    for i in range(1, n+1):\n        if i % x == y:\n            max_val = i\n    return max_val\n\n#Example Usage: find_max_val(10, 3, 0) will return the largest value of k such that k % 3 = 0 and k <= 10, which is 9. ",
        "generated_testcode": "assert find_max_val(10, 3, 4) == 2\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    num = 2\n    while(num <= n): \n        sum += num \n        count += 1\n        num += 2\n    return sum/count \n\n# Driver program to test the function \nn = 20\nprint(\"Average of even numbers from 1 to\", n, \"is\", average_Even(n)) \nn = 40\nprint(\"Average of even numbers from 1 to\", n, \"is\", average_Even(n)) ",
        "generated_testcode": "assert average_Even(2) == 2.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        first_element = num_list[0]\n        num_list.pop(0)\n        num_list.append(first_element)\n        return num_list\n\n# test the function with an example\nnum_list = [1, 2, 3, 4, 5]\nprint(move_last(num_list))  # Output: [2, 3, 4, 5, 1] ",
        "generated_testcode": "assert move_last([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n#test the function\nprint(count_char(\"hello world\",'l'))  # output: 3\n\n\n#Using a dictionary to count occurrence of each character in a string\ndef count_char_dict(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    return char_dict\n#test the function\nprint(count_char_dict('hello world'))  # output: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\n\n#Using Counter from collections module to count occurrence of each character in a string\nfrom collections import Counter\ndef count_char_collections(string):\n    return Counter(string)\n#test the function\nprint(count_char_collections('hello world'))  # output: Counter({'l': 3, 'o': 2, 'h': 1, 'e': 1, ' ': 1, 'w': 1, 'r': 1, 'd': 1}) ",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in string: \n        if i in vowels: \n            count += 1\n    return count \n    \n# testing the function with a sample string \nstring = \"python\"\nvowels = \"aeiou\"\nprint(Check_Vow(string, vowels)) ",
        "generated_testcode": "assert Check_Vow(\"Hello World\", \"aeiou\") == 3\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    new_string = string[0] \n    for i in range(1, len(string)): \n        if string[i] != string[i - 1]: \n            new_string += char \n    return new_string \n\n# Test the function \nstring = \"aaabbbbcdeeeeefgh\"\nchar = \"x\"\nprint(replace(string, char)\n# Output: axbxcxdxexfxxg\n\nstring = \"abbcccdddd\"\nchar = \"x\"\nprint(replace(string, char)\n# Output: abxcdd ",
        "generated_testcode": "assert (replace(\"hello\", \"l\") == \"helo\")\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # split the IP address into 4 octets \n    octets = Ip.split('.') \n    # check if there are 4 octets \n    if len(octets) != 4: \n        return False\n    for octet in octets: \n        # check if the octet is an integer between 0 and 2555 \n        if not octet.isdigit() or int(octet) > 255: \n            return False\n        # leading zeros not allowed \n        if octet[0] == '0' and len(octet) != 1: \n            return False\n        # check if the octet is not 0 or 1 when starting with 0 \n        if octet[0] == '0' and int(octet) != 0: \n            return False\n    return True\n\n# test the function with an example IP address \nIp = '192.168.0.1'\nprint(check_IP(Ip) # Output: True\n\nIp = '255.256.10.2'\nprint(check_IP(Ip) # Output: False\nIp = '192.168.01.5.2'\nprint(check_IP(Ip) # Output: False\nIp = '260.192.10.5'\nprint(check_IP(Ip) # Output: False ",
        "generated_testcode": "assert check_IP(\"192.168.0.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]:\n            return False\n    return True\n\n#test the function\nprint(decreasing_trend([4,3,2,1])) #True\nprint(decreasing_trend([9,8,7,6,5])) #True\nprint(decreasing_trend([5,6,7,8])) #False\nprint(decreasing_trend([9,8,7,6,5,4])) #False\nprint(decreasing_trend([1,2,3,4,5])) #False ",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6]) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pos = 0\n    if (n == 0):\n        return -1\n    while (n != 0):\n        n = n & (n-1)\n        pos += 1\n    return pos\n  \ndef set_Right_most_Unset_Bit(n):\n    if (n == 0):\n        return 1\n    pos = get_Pos_Of_Right_most_Set_Bit(n)\n    return n | (1 << pos) ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(15) == 3\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 >= num2 and num1 >= num3: \n        return num1 \n    elif num2 >= num1 and num2 >= num3: \n        return num2 \n    else: \n        return num3 \n\n# Test the function with three numbers \nprint(max_of_three(2, 4, 7)) \nprint(max_of_three(6, 8, 12)) \nprint(max_of_three(11, 14, 7)) ",
        "generated_testcode": "assert max_of_three(5, 10, 7) == 10\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for digit in list:\n        result = result * 10 + digit\n    return result\n\n# Example usage:\n# num_list = [4,5,6,8,9]\n# print(convert(num_list) # Output: 45689\n\n\n# You can assume that the input list contains only integers. ",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    words = string.split()\n    new_string = []\n    seen = set()\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            new_string.append(word)\n    return \" \".join(new_string)\n\n\n# Test the function with sample inputs\nprint(remove_duplicate(\"this is a test string with duplicate words and words\")) # Output: \"this is a test string with and words\" ",
        "generated_testcode": "assert remove_duplicate(\"hello world world world hello\") == \"hello world\"\n\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if x + y in range(m,n+1):\n        return 20\n    else:\n        return x + y\n\n#test the function\nprint(sum_nums(5,6,10,14)) #should return 11\nprint(sum_nums(5,6,6,10)) #should return 20\nprint(sum_nums(5,6,1,10)) #should return 11\nprint(sum_nums(5,6,1,5)) #should return 20 ",
        "generated_testcode": "assert sum_nums(5, 6, 10, 15) == 11\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'[^a-zA-Z0-9]+'\n    return re.sub(pattern, '', text1)\n\n# Example:\n# Input:\n# text1 = \"Hello! I am from India. How are you?\"\n# Output:\n# \"HelloIamfromIndiaHowareyou\" ",
        "generated_testcode": "assert remove_extra_char(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a+b>c and b+c>a and a+c>b:\n        return True\n    else:\n        return False\n\n#taking input sides of triangle from user\na=int(input(\"Enter the length of side a: \"))\nb=int(input(\"Enter the length of side b: \"))\nc=int(input(\"Enter the length of side c: \"))\n\n\n#checking if triangle is valid or not\nif validity_triangle(a,b,c):\n    print(\"Valid triangle\")\nelse:\n    print(\"Invalid triangle\") ",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return \"\".join(str1.split())\n\n# Test the function with an example string\ninput_str = \"This is a sample string\"\nprint(remove_spaces(input_str)) # Output: \"Thisisasamplestring\" ",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        if key in ditionary:\n            return ditionary[key]\n    except KeyError:\n        return None\n    \n#Test the function with the following example:\nmy_dict = {'apple': 1, 'banana': 2, 'cherry': 3}\nprint(access_key(my_dict, 'apple')) # Output: 1\nprint(access_key(my_dict, 'orange')) # Output: None ",
        "generated_testcode": "assert access_key({'a':1,'b':2,'c':3},'b') == 2\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(nums) < 2:\n        return False\n    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return False\n    return True\n\n# Test the function with some examples\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 8])) # True\nprint(increasing_trend([1, 2, 3, 4, 5, 6, 7, 7])) # True\nprint(increasing_trend([1, 3, 2, 4, 5])) # False\nprint(increasing_trend([5, 4, 3, 2, 1])) # False\nprint(increasing_trend([1])) # False ",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the smallest prime divisor of a number `n`.\n    \"\"\"\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return i\n    return n\n\n# test the function\nprint(smallest_Divisor(100)) # should print 2\nprint(smallest_Divisor(101)) # should print 101\nprint(smallest_Divisor(102)) # should print 2\nprint(smallest_Divisor(103)) # should print 103\nprint(smallest_Divisor(104)) # should print 2\nprint(smallest_Divisor(105)) # should print 3\nprint(smallest_Divisor(106)) # should print 2\nprint(smallest_Divisor(108)) # should print 2\nprint(smallest_Divisor(107)) # should print 107 ",
        "generated_testcode": "assert smallest_Divisor(15) == 3\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x*y, nums1, nums2))\n\n\n#Example usage:\nnums1 = [1,2,3,4]\nnums2 = [5,6,7]\nprint(mul_list(nums1,nums2)) #[5, 12, 28]\n\n\n#Explanation:\n#The map() function applies the lambda function to each element of the two lists in parallel, multiplying them together to get the corresponding product. ",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 2\n    while n % 2 == 0: \n        n >>= 2\n    if n % 8 == 7: \n        return False\n    while i * i <= n: \n        j = 0\n        while j * j <= n: \n            if (n - i * i - j * j) == 0: \n                return True\n            j += 1\n        i += 1\n    return False \n\n#Example\n#Test the function with input:\nprint(sum_Square(5)) # True\nprint(sum_Square(8)) # False\nprint(sum_Square(10)) # True\nprint(sum_Square(11)) # False ",
        "generated_testcode": "assert sum_Square(5) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in str: \n        if i == x: \n            count += 1\n    return count \n  \n# test the function with sample inputs\nstring = \"helloworld\"\nchar = \"l\"\nprint(count_Char(string,char)) ",
        "generated_testcode": "assert count_Char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                return False\n        return True\n    sum = 0\n    for i in range(2, n+1): \n        if is_prime(i): \n            sum += i\n    return sum\n\n#Test the function\nn = 10\nprint(sum_Of_Primes(n)) #Output: 17",
        "generated_testcode": "assert sum_Of_Primes(10) == 17 # Sum of primes between 1 to 10 is 17 (2+3+5+7)\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    freq_dict = {}\n    for element in test_tup:\n        freq_dict[element] = test_tup.count(element)\n    return freq_dict\ntest_tup = (1, 2, 3, 4, 2, 5, 1, 6, 3, 2, 7, 8, 9, 3)\nprint(freq_element(test_tup)) ",
        "generated_testcode": "assert freq_element(('hello world') == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# test the function\nprint(recur_gcd(20, 8)) # output: 4\nprint(recur_gcd(16, 12)) # output: 4\nprint(recur_gcd(54, 24)) # output: 6\nprint(recur_gcd(60, 48)) # output: 12\nprint(recur_gcd(17, 23)) # output: 1\nprint(recur_gcd(100, 25)) # output: 25 ",
        "generated_testcode": "assert recur_gcd(12, 8) == 4\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    c = (a**2 + b**2) ** 0.5\n    return c\n\n#Test the function with the following code:\nprint(len_complex(3, 4))\nprint(len_complex(5, 12))\nprint(len_complex(0, 10))\n\n\n#The output should be:\n#5.0\n#13.0\n#10.0 ",
        "generated_testcode": "assert len_complex(3,4) == 5\n\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n <= 1:\n        return 0\n    elif arr[0] == 0:\n        return -1\n    else:\n        # create a list to store the minimum number of jumps required for each index\n        min_jumps = [0] * n\n        # initialize the first element with 0 as we are already at the starting index\n        # initialize the second element with the value of the first element as we can only move one step forward\n        min_jumps[1] = arr[1]\n        # iterate through the array starting from the second element\n        for i in range(2, n):\n            # check if the current index can be reached with the max number of steps from the previous indexes\n            for j in range(i):\n                # check if the previous index can reach the current index with a jump\n                if i <= j + arr[j]:\n                    # update the minimum number of jumps required for the current index\n                    min_jumps[i] = min(min_jumps[i], min_jumps[j] + 1)\n        # check if the last index can be reached\n        if min_jumps[n-1] == 0:\n            return -1\n        return min_jumps[n-1]\n\n\n# test the function with an example\narr = [1, 3, 5, 8, 9, 2, 2, 6, 3, 6, 8, 9]\nn = len(arr)\nprint(min_jumps",
        "generated_testcode": "assert min_jumps([1, 3, 5, 8, 9, 2, 2, 6, 2, 6, 8, 9], 8) == 3\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(nums) - 1:\n        mul = nums[i] * nums[i+1]\n        result.append(mul)\n        i += 1\n    return result\n\n# Test the function with an example list\nprint(mul_consecutive_nums([1, 2, 3, 5, 6, 8, 9]) # Output: [2, 15, 48] ",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5]) == [2, 6, 12]\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    group_dict = {}\n    for i in test_list:\n        if i[1] not in group_dict:\n            group_dict[i[1]] = [i[0]]\n        else:\n            group_dict[i[1].append(i[0])\n    return group_dict\n\n#Example: group_element([('apple', 'red'), ('banana', 'yellow'), ('orange', 'orange'), ('grape', 'yellow')])\n# Output: {'red': ['apple'], 'yellow': ['banana', 'orange']} ",
        "generated_testcode": "assert group_element([(1, 2), (3, 2), (4, 3), (2, 2), (5, 1)]) == {1: [1], 2: [2, 4], 3: [3]}\n\n",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if N < 0:\n        return -1\n    else:\n        res = 1\n        for i in range(1,N+1):\n            res = (res * i) % 100\n        return res\n\n#Test the function with sample inputs:\nprint(last_Two_Digits(12))  # Output: 24\nprint(last_Two_Digits(15))  # Output: 20\nprint(last_Two_Digits(20))  # Output: 24\nprint(last_Two_Digits(25))  # Output: 20\nprint(last_Two_Digits(30))  # Output: 32 ",
        "generated_testcode": "assert last_Two_Digits(5) == 120\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub(r'\\s+', ' ', text1).strip()\n    return text1\n\ntext1 = \"   Hello     world  how    are    you   \"\nprint(remove_multiple_spaces(text1)) # Output: \"Hello world how are you\"\n\n\n# Explanation:\n# The re.sub() function replaces all occurrences of one or more whitespace characters (\\s+) with a single whitespace character (' ') and the strip() function removes any leading and trailing whitespaces. ",
        "generated_testcode": "assert remove_multiple_spaces(\"This is a    string with    multiple  spaces.\") == \"This is a string with multiple spaces.\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_values = []\n    for value in test_dict.values():\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n# Test the function with sample data\ntest_dict = {'a': 100, 'b': 200, 'c': 100, 'd': 300, 'e': 200}\nprint(extract_unique(test_dict)) # Output: [100, 200, 300] ",
        "generated_testcode": "assert extract_unique({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3, \"e\": 2}) == {1, 2, 3}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # check if the length of both tuples is equal\n    if len(test_tup1) != len(test_tup2):\n        return False\n\n    # check if each element in the second tuple is greater than its corresponding index in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] <= test_tup1[i]:\n            return False\n    return True\n\n# Test the function with two tuples\ntup1 = (1, 3, 5, 7, 9)\ntup2 = (2, 4, 6, 8)\nprint(check_greater(tup1, tup2))  # Output: True\n\n\ntup1 = (1, 3, 5, 7, 9)\ntup2 = (2, 4, 6, 10)\nprint(check_greater(tup1, tup2))  # Output: False\n\ntup1 = (1, 3, 5, 7, 9)\ntup2 = (1, 4, 6, 8)\nprint(check_greater(tup1, tup2))  # Output: False\n\ntup1 = (1, 3, 5, 7, 9)\ntup2 = (2, 4, 6, 8, 10)\nprint(check_greater(tup1, tup2))  # Output",
        "generated_testcode": "assert check_greater((1, 3, 5, 7, 9), (2, 4, 6, 8)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = [] \n    for i in range(len(list1): \n        res.append(list(zip(list1[i],list2[i])) \n    return res\nlist1 = [[1,2,3],[4,5,6],[7,8,9]]\nlist2 = [['a','b','c'],['d','e','f'],['g','h','i']]\nprint(zip_list(list1, list2))  # Output: [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (6, 'f'), (7, 'g'), (8, 'h'), (9, 'i')] ",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [[1,4],[2,5],[3,6]]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 == 0, array_nums))\n\n\n# test the function with sample input\nprint(count_even([1,2,3,4,5,6,7,8,9,10])) ",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n# Example usage:\ntest_dict = {(3, 4): 1, (1, 2): 2, (4, 5): 3, (1, 3): 4, (2, 2): 5}\nprint(sort_dict_item(test_dict))\n# Output: [(1, 2), 2), (2, 2), (3, 4), 1], (1, 3), 4), (4, 5), 3)]\n\n\n# Write a function to sort a list of tuples by the second element of each tuple.\ndef sort_list_of_tuples(lst):\n    return sorted(lst, key=lambda x: x[1])\n# Example usage:\nlst = [(1, 2), (3, 4), (4, 1), (2, 3)]\nprint(sort_list_of_tuples(lst))  # Output: [(4, 1), (1, 2), (2, 3), (3, 4)] ",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 0\n    count = 0\n    n = len(str1)\n    while i < n :\n        if str1[i] != str2[i] :\n            j = i+1\n            while j < n :\n                if str1[j] == str2[i] :\n                    str1 = list(str1)\n                    str1[i], str1[j] = str1[j], str1[i]\n                    str1 = ''.join(str1)\n                    str2 = list(str2)\n                    str2[i], str2[j] = str2[j], str2[i]\n                    str2 = ''.join(str2)\n                    count += 1\n                    break\n                j += 1\n        i += 1\n    return count \n\n# test the function with example\nstr1 = \"10101\"\nstr2 = \"11010\"\nprint(min_Swaps(str1,str2))\n# Output : 1 ",
        "generated_testcode": "assert min_Swaps(\"01001110101000110\",\"111010010001010\") == 3\n# Testcase 1: Testing for a valid input\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in li:\n        if min <= i <= max:\n            count += 1\n    return count\n\n# Test the function with an example\nmy_list = [1, 3, 5, 7, 9, 12, 15, 18, 20]\nprint(count_range_in_list(my_list, 5, 15)) # Output: 3\n\n\n# Solution 2\ndef count_range_in_list(li, min, max):\n    return sum(min <= i <= max for i in li)\n\n\n# Test the function with an example\nmy_list = [1, 3, 5, 7, 9, 12, 15, 18, 20]\nprint(count_range_in_list(my_list, 5, 15)) # Output: 3 ",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 7) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    total_sum = sum(arr)\n    left_sum = 0\n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n\n# Testing the function with sample test cases\narr = [-7, 1, 5, 2, -4, 3, 0]\nprint(equilibrium_index(arr)) # Output: 3\n\narr = [-2, 1, -3, 4, -1]\nprint(equilibrium_index(arr)) # Output: 1\narr = [1, 2, 3]\nprint(equilibrium_index(arr)) # Output: -1\narr = [1]\nprint(equilibrium_index(arr)) # Output: 0 ",
        "generated_testcode": "assert equilibrium_index([-1, 2, 3, -4, 5, 6, 7, 6]) == 4\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "            arr, min_arr, max_arr): \n    if i < 0 or i >= n: \n        return n \n    if min_arr[i] <= key: \n        return i \n    return find_ind(key, i-1, n, arr, min_arr, max_arr) \n  \ndef min_elements_to_remove(arr, n, k): \n    arr.sort() \n    min_arr = [arr[i-1] for i in range(n)] \n    max_arr = [arr[i] for i in range(n)] \n    count = 0\n    for i in range(n-2, -1, -1, -1): \n        min_arr[i] = min(min_arr[i+1], arr[i]) \n        max_arr[i] = max(max_arr[i+1], arr[i]) \n    i, j = 0, n-1\n    while i < j: \n        if max_arr[i] - min_arr[i] > k: \n            if find_ind(min_arr[i]+k, j, n, arr, min_arr, max_arr) <= j: \n                j = find_ind(min_arr[i]+k, j, n, arr, min_arr, max_arr) \n            else: \n                count += n - j \n                break\n        else: \n            count += j-i \n           ",
        "generated_testcode": "assert find_ind([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 2\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d.keys():\n        return True\n    else:\n        return False\n#Sample Input:\n#d={'a':1,'b':2,'c':3}\n#x='a'\n#Sample Output:True\n\n#x='d'\n#Sample Output:False ",
        "generated_testcode": "assert is_key_present({\"a\":1,\"b\":2,\"c\":3},\"a\") == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\n# Test the function with n = 5\nprint(harmonic_sum(5)) # should return 2.45\n\n\n# Write a function to calculate the geometric sum of n-1\ndef geometric_sum(n):\n    if n == 1:\n        return 1/n\n    else:\n        return 1/n + geometric_sum(n-1)\n\n# Test the function with n = 5\nprint(geometric_sum(5)) # should return 2.4681\n\n# Write a function to calculate the factorial of n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function with n = 5\nprint(factorial(5)) # should return 120\n\n# Write a function to calculate the value of sin(x) using the Taylor series\ndef sin(x, n):\n    if n == 0:\n        return x\n    else:\n        return x + sin(x, n-1) * -1 / ((2*n) * (2*n+1))\n\n# Test the function with x = pi/6 and n = 100\nprint(sin(pi/6, 100)) # should return 0.5\n\n# Write a function to calculate the value",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # get the length of each sublist and append it to a new list\n    lengths = []\n    for i in range(len(list1)):\n        lengths.append(len(list1[i]))\n    # sort the new list\n    lengths.sort()\n    # create an empty list to store the sorted sublists\n    sorted_list = []\n    # iterate over the sorted lengths\n    for i in lengths:\n        # iterate over the original list and find any sublists with the same length\n        for j in list1:\n            if len(j) == i:\n                # add the sorted sublists to the sorted list\n                sorted_list.append(sorted(j))\n    return sorted_list\n\n# example usage\nmy_list = [[5, 2, 4], [2, 3, 1, 6], [1, 8, 7], [3, 2], [4, 1, 1, 2, 3], [4, 1]]\nprint(sort_sublists(my_list)) # should print [[2, 3], [4, 1], [1, 8], [2, 3, 4], [1, 2, 3, 5], [1, 2, 4, 1]] ",
        "generated_testcode": "assert sort_sublists([]), []\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create a hash table for arr2\n    hash = {}\n    for i in range(n):\n        hash[arr2[i]] = True\n    \n    # Traverse through arr1 and check if each element is present in hash\n    for i in range(m):\n        if arr1[i] not in hash:\n            return False\n    \n    return True\n\n# Driver code\narr1 = [1, 2, 3]\narr2 = [1, 2, 3, 4, 5, 6]\nm = len(arr1)\nn = len(arr2)\n\nif is_subset(arr1, m, arr2, n):\n    print(\"arr1 is subset of arr2\")\nelse:\n    print(\"arr1 is not a subset of arr2\")\n\n\n# Output: arr1 is subset of arr2 ",
        "generated_testcode": "assert is_subset([1, 2, 3, 4], 3, [1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in range(1, n+1):\n        while i:\n            count += i & 1\n            i >>= 1\n    return count ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #initializing an empty list \n    list1 = [] \n    #Iterating through each character of the string and appending it to the list \n    for i in string: \n        list1.append(i) \n    #returning the list \n    return list1 \n#taking input from the user\nstring = input(\"Enter a string: \")\n#printing the output\nprint(\"The converted list is:\",Convert(string) ) ",
        "generated_testcode": "assert Convert(\"Hello World\") == [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\"]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_dict = {}\n    for item in test_list:\n        if item not in unique_dict:\n            unique_dict[item] = 1\n        else:\n            unique_dict[item] += 1\n    return unique_dict\n\n# Example usage:\ntest_list = (1, 2, 3, 4, 2, 3, 5, 1, 6, 7, 2, 8, 4, 9, 10, 11, 11, 12, 3)\nprint(get_unique(test_list)) # Output: {1: 2, 2: 3, 3: 3, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 1} ",
        "generated_testcode": "assert get_unique((\"apple\", \"banana\", \"cherry\", \"apple\", \"date\", \"cherry\") == {\"apple\": 2, \"banana\": 1, \"cherry\": 2, \"date\": 1}\n\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return test_tup[0], test_tup[-1]\n\n#Example usage:\ntest_tup = ('apple', 'banana', 'cherry', 'date')\nprint(front_and_rear(test_tup)) # ('apple', 'date') ",
        "generated_testcode": "assert front_and_rear(('apple', 'banana', 'cherry', 'date', 'elderberry') == ('apple', 'elderberry')\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n=int(input())\n    odd_product=1\n    even_product=1\n    for i in range(0,len(str(n),2):\n        odd_product*=int(n[i])\n    for i in range(1,len(str(n),2):\n        even_product*=int(n[i])\n    if odd_product==even_product:\n        return True\n    else:\n        return False\nn=input()\nif product_Equal(n):\n    print(\"True\")\nelse:\n    print(\"False\") ",
        "generated_testcode": "assert product_Equal(123456) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #create a new empty list to store non-duplicate elements\n    new_list = []\n    #iterate over each sublist in the given list\n    for i in list1:\n        #check if the sublist is already present in the new list\n        if i not in new_list:\n            #if not, append it to the new list\n            new_list.append(i)\n    #return the new list\n    return new_list\n#test the function with sample inputs\nlist1 = [[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9], [1, 2, 3], [10]]\nprint(remove_duplicate(list1)) #[ [1, 2, 3], [4, 5, 6], [7, 8, 9], [10] ] ",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\", \"kiwi\"] == [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    try:\n        for t in test_tup:\n            if t[0] == t[1] or t[0] == t[2] or t[1] == t[2]:\n                return False\n        return True\n    except:\n        return False\n\n# Test the function with a sample tuple\ntest_tuple = (2, 3, 4)\nprint(check_valid(test_tuple)) # True\n\n\n# Test the function with another tuple\ntest_tuple = (2, 3, 3)\nprint(check_valid(test_tuple)) # False\n\n\n# Test the function with another tuple\ntest_tuple = (2, 'a', 4)\nprint(check_valid(test_tuple)) # False\n\n\n# Test the function with another tuple\ntest_tuple = (2, 'a', 'b')\nprint(check_valid(test_tuple)) # True\n\n\n# Test the function with another tuple\ntest_tuple = ()\nprint(check_valid(test_tuple)) # False ",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == True)\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count=0\n    for i in range(2,n+1):\n        if(n%i==0):\n            j=1\n            while(j<=n/i):\n                if(i**j==n):\n                    count+=1\n                j+=1\n    return count\nprint(count_Fac(12))\n\ndef count_distinct_power(n):\n    pf=[]\n    count=0\n    for i in range(2,n+1):\n        if(n%i==0):\n            j=1\n            while(j<=n/i):\n                if(i**j==n):\n                    if i not in pf:\n                        pf.append(i)\n                    count+=1\n                j+=1\n    return len(pf)\nprint(count_distinct_power(12))\n\ndef count_distinct_power(n):\n    pf=[]\n    count=0\n    for i in range(2,n+1):\n        if(n%i==0):\n            j=1\n            while(j<=n/i):\n                if(i**j==n):\n                    pf.append(i)\n                    count+=1\n                j+=1\n            n//=i\n    return count\nprint(count_distinct_power(12)) ",
        "generated_testcode": "assert count_Fac(12) == 2 # Testing for n=12, output should be 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # remove the parentheses and split on the comma\n    numbers = test_str[1:-1].split(',')\n    # convert each number to an int and add it to a list\n    num_list = [int(num.strip()) for num in numbers]\n    # convert the list to a tuple\n    num_tuple = tuple(num_list)\n    return num_tuple\n\n# test the function with a sample string\ntest_str = '( 1, 2, 3, 4, 5 )'\nprint(str_to_tuple(test_str))  # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    p = 4*a\n    return p\n\n# Test the function with an example\nprint(rombus_perimeter(5) == 20) # True\nprint(rombus_perimeter(10) == 40) # True\nprint(rombus_perimeter(3.5) == 14) # True ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(data)\n    mean = sum(data) / n\n    deviations = [(x - mean) ** 2 for x in data]\n    variance = sum(deviations) / (n - 1)\n    standard_deviation = variance ** 0.5\n    return standard_deviation\n\n# Test the function with some sample data\nsample_data = [2, 4, 6, 8, 12, 14, 16, 20, 24]\nprint(sd_calc(sample_data)) ",
        "generated_testcode": "assert round(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9]), 2) == 2.72\n\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(0, len(list1), 2):\n        new_list.append(list1[i])\n    return new_list\n\n# Test the function with an example list\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(alternate_elements(l1))  # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r\"^[a-z]*[b]*$\"\n    result = re.match(pattern, text)\n    return result != None\n\n# Test cases\nprint(text_match(\"a\")) # True\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abc\")) # False\nprint(text_match(\"abbbbc\")) # True\nprint(text_match(\"aabb\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"\")) # True\nprint(text_match(\"ba\")) # False\nprint(text_match(\"b\")) # True\nprint(text_match(\"bab\")) # False ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return test_tup + (test_dict,)\n\n\n# Test the function with sample inputs\ntest_tup = (\"hello\", 5, [1, 2, 3], (7, 8, 9))\ntest_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(add_dict_to_tuple(test_tup, test_dict)) # Output: (\"hello\", 5, [1, 2, 3], (7, 8, 9), {'a': 1, 'b': 2, 'c': 3}) ",
        "generated_testcode": "assert add_dict_to_tuple((\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"}) == (\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"})\n\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # create a result matrix to store maximum average values \n    # for sub-problems \n    res = [[0 for j in range(N)] for i in range(N)] \n  \n    # initialize first column \n    for i in range(N - 1, -1, -1): \n        res[i][0] = cost[i][0] \n  \n    # initialize first row \n    for j in range(1, N): \n        res[0][j] = res[0][j - 1] + cost[0][j] \n  \n    # fill the result matrix \n    for i in range(1, N): \n        for j in range(1, N): \n            res[i][j] = cost[i][j] + max(res[i - 1][j], res[i][j - 1]) \n            for k in range(i - 1, -1, -1): \n                res[i][j] = cost[i][j] + max(res[k][j - 1] - res[i - k][j - 1]) \n  \n    # return last element of result matrix \n    return res[N - 1][N - 1] / (N + 1) ",
        "generated_testcode": "assert maxAverageOfPath(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n) == 12.666666666666666666667\n\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result={}\n    for key,value in students.items():\n        if value[\"height\"]>h and value[\"weight\"]>w:\n            result[key]=value\n    return result\n\n#test the function with sample data\nstudents={\"Alice\":{\"height\":160,\"weight\":50},\n          \"Bob\":{\"height\":175,\"weight\":65},\n          \"Charlie\":{\"height\":180,\"weight\":70},\n          \"David\":{\"height\":172,\"weight\":60},\n          \"Eve\":{\"height\":165,\"weight\":55}}\n\nh=170\nw=60\nprint(filter_data(students,h,w)) #should return Charlie",
        "generated_testcode": "assert filter_data(\n    {\n        \"Alice\": {\"height\": 160, \"weight\": 50},\n        \"Bob\": {\"height\": 170, \"weight\": 60},\n        \"Charlie\": {\"height\": 180, \"weight\": 70},\n        \"David\": {\"height\": 165, \"weight\": 45},\n        \"Eva\": {\"height\": 175, \"weight\": 55}\n    },\n    165,\n    50\n) == {\"Alice\": {\"height\": 160, \"weight\": 50}, \"David\": {\"height\": 165, \"weight\": 45}}\n\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    nums1 = map(lambda x: x**2, nums1)\n    nums2 = set(map(lambda x: x**2, nums2))\n    for num in nums1:\n        if num in nums2:\n            count += 1\n    return count\n\n# Test the function with sample inputs\nprint(count_same_pair([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 9])) # Output: 2 ",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [2, 4, 6, 7]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if base == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(power):\n            result *= base\n        return sum(int(digit) for digit in str(result))\n\n# Example usage:\nprint(power_base_sum(2, 15)) # Output: 13\nprint(power_base_sum(10, 5)) # Output: 15\nprint(power_base_sum(3, 4)) # Output: 19\nprint(power_base_sum(9, 0)) # Output: 1\nprint(power_base_sum(4, 7)) # Output: 30 ",
        "generated_testcode": "assert power_base_sum(2, 10) == 1024\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n\n# Test the function with an example string\ntext1 = 'He said, \"I love Python\" and she said, \"I love JavaScript\"'\nprint(extract_quotation(text1) ) # Output: ['\"I love Python\"', '\"I love JavaScript\"'] ",
        "generated_testcode": "assert extract_quotation('\"Hello, World!\"') == 'Hello, World!'\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup) - 1):\n        res += (test_tup[i] * test_tup[i + 1],)\n    return res\n\n# Test the function\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(multiply_elements(test_tup)) # Expected output: (2, 6, 12, 20) ",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4, 5)) == (2, 6, 12)\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub('[^a-zA-Z0-9]', '', S)\n\n\n# Test Cases\nprint(remove_char(\"Hey! What's up? 123!!!\")) # \"HeyWhatsup123\"\nprint(remove_char(\"This is a sentence.!@#$%\")) # \"Thisisasentence\"\nprint(remove_char(\"Hello, world!\")) # \"Helloworld\"\nprint(remove_char(\"Madam, in Eden, I'm Adam.\")) # \"MadaminEdenImAdam\"\n\n\n# The code uses the re.sub() function to replace all characters that are not letters or numbers with an empty string. The regex pattern [^a-zA-Z0-9] matches any character that is not a letter or a number. ",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst1)!=len(lst2):\n        return \"lists are not equal in length\"\n    else:\n        sum_lst=[]\n        for i in range(len(lst1)):\n            sum_lst.append(lst1[i]+lst2[i])\n        return sum_lst\n\n#test the function\nprint(sum_list([1,2,3],[4,5,6])) # [5, 7, 9]\nprint(sum_list([1,2,3],[4,5])) # lists are not equal in length ",
        "generated_testcode": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x+y, nums1, nums2))\n\nnum1 = [1,2,3,4,5,6,7]\nnum2 = [3,4,5,6,7,8,9]\nprint(add_list(num1,num2))\n\n\n#Output: [4, 6, 8, 10, 12, 16] ",
        "generated_testcode": "assert add_list([1,2,3],[4,5,6]) == [5,7,9]\n\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    prev = None\n    for num in nums:\n        if num != prev:\n            res.append(num)\n            prev = num\n    return res\n\n#test function\nprint(consecutive_duplicates([1,1,2,3,4,4,5,5,5,5,6,7,8,9,9])) # [1,2,3,4,5,6,7,8,9]\nprint(consecutive_duplicates([1,1,1,1,2,2,3,4,4,4,4,4,5,6,6,6,7,7,7,7,8,9,9,9,9,9])) # [1,2,3,4,5,6,7,8,9] ",
        "generated_testcode": "assert consecutive_duplicates([\"a\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"e\"]), [\"a\", \"b\", \"c\", \"d\", \"e\"]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi=3.141592\n    slant_height=((r**2+h**2)**0.5)\n    lateral_surface_area=pi*r*slant_height\n    return lateral_surface_area\n\n#testing the function with example values\nprint(lateralsurface_cone(5,7)) #output: 152.339414781772860485 ",
        "generated_testcode": "assert lateralsurface_cone(3, 5) == 29.289370185853405394, \"Test 1 failed\"\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n\n# test the function\nprint(replace_specialchar(\"Hello, I am Sara\")) # should output \"Hello:I:am:Sara\"\nprint(replace_specialchar(\"Hello, I am Sara.\")) # should output \"Hello:I:am:Sara:\"\nprint(replace_specialchar(\"Hello, I am Sara:\")) # should output \"Hello:I:am:Sara:\"\nprint(replace_specialchar(\"Hello I am Sara.\")) # should output \"Hello:I:am:Sara:\"\nprint(replace_specialchar(\"Hello I am Sara\")) # should output \"Hello:I:am:Sara\" ",
        "generated_testcode": "assert replace_specialchar(\"Hello, World\") == \"Hello:World\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                r = mid - 1\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n\n# Test cases\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7]\nx = 4\nprint(find_first_occurrence(A, x)) # Output: 2\n\n\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7]\nx = 5\nprint(find_first_occurrence(A, x)) # Output: 5\n\n\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7]\nx = 8\nprint(find_first_occurrence(A, x)) # Output: -1 ",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    mod = 10**9 + 7\n    res = 0\n    for i in range(n):\n        temp = 1\n        for j in range(i,n):\n            temp = (temp * arr[j]) % mod\n            res += temp\n            res %= mod\n    return res\n\n# Test the code\narr = [1, 2, 3, 4]\nn = len(arr)\nprint(\"Sum of products of all subarrays is: \", sum_Of_Subarray_Prod(arr,n))\n# Output: Sum of products of all subarrays is: 64 ",
        "generated_testcode": "assert sum_Of_Subarray_Prod(arr=[1, 2, 3, 4, 5], n=4) == 1180\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # convert the number to binary string\n    binary_string = bin(n)\n    # find the length of binary string\n    length = len(binary_string)\n    # extract the first and last bits\n    first_bit = binary_string[2]\n    last_bit = binary_string[-1]\n    # extract the middle bits\n    middle_bits = binary_string[3:length-1]\n    # toggle the middle bits\n    toggled_middle_bits = ''\n    for bit in middle_bits:\n        if bit == '1':\n            toggled_middle_bits += '0'\n        else:\n            toggled_middle_bits += '1'\n    # form the toggled binary string\n    toggled_binary_string = first_bit + toggled_middle_bits + last_bit\n    # convert the binary string back to integer\n    toggled_integer = int(toggled_binary_string, 2)\n    return toggled_integer\n\n# test the function\nprint(set_middle_bits(31)) # output: 29\nprint(set_middle_bits(25)) # output: 17\nprint(set_middle_bits(52)) # output: 59\nprint(set_middle_bits(62)) # output: 61 ",
        "generated_testcode": "assert set_middle_bits(0b101010101010) == 0b10000100010\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Locates the left insertion point for a specified value in a sorted list.\n    \"\"\"\n    # initialize variables\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        # if the mid value is greater than or equal to the target value, search in the left half of the list\n        if a[mid] >= x:\n            right = mid\n        # if the mid value is less than the target value, search in the right half of the list\n        else:\n            left = mid + 1\n    return left\n\n# test the function with an example\na = [1, 3, 4, 5, 6, 7, 8, 9]\nx = 7\nprint(left_insertion(a, x)) # output should be 4\n\n\n# test the function with edge cases\n# when the target value is the smallest value\na = [2, 3, 4, 5, 6, 7, 8, 9]\nx = 1\nprint(left_insertion(a, x)) # output should be 0\n\n# when the target value is the largest value\na = [1, 3, 4, 5, 6, 7, 8]\nx = 9\nprint(left_insertion(a, x)) # output should be 5\n# when the target value is already in the list\na = [1, 3, 4, 5",
        "generated_testcode": "assert left_insertion([1, 3, 5, 7, 9], 4) == 1\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    # create a regular expression to match the pattern \n    pattern = r'^[aeiouAEIOU]'\n    # use search() function to find the match \n    if re.search(pattern, string): \n        return True\n    else: \n        return False \n\n# testing the function \nstring = \"elephant\"\nprint(check_str(string)) # Output: False \n\nstring = \"election\"\nprint(check_str(string)) # Output: True ",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Return the sum of the first n-1 terms of the geometric series 1 + 1/2 + 1/4 + 1/8 + ... + 1/(2^n-1)\n    \"\"\"\n    if n < 1:\n        return 0\n    return 1 - 1/(2**n)\n\n# Example usage:\nprint(geometric_sum(3) # should print 0.875 = 1 + 1/2 + 1/4) ",
        "generated_testcode": "assert geometric_sum(1) == 1\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    i = 1\n    while True: \n        if len(str(count)) == n:\n            return i \n        else:\n            i += 1 \n            count += i \n    return 0\n\n# test the function with example \nprint(find_Index(3)) # output 7 ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a given tuple to a dictionary where the keys are the odd-indexed elements and values are the even-indexed elements of the tuple\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n\n# Test the function with a sample tuple\ntest_tup = ('apple', 1, 'banana', 2, 'cherry', 3, 'date', 4)\nprint(tuple_to_dict(test_tup)) # Should print {'apple': 1, 'banana': 2, 'cherry': 3, 'date': 4} ",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"red\", \"banana\", \"yellow\", \"cherry\", \"red\") == {\"apple\": \"red\", \"banana\": \"yellow\", \"cherry\": \"red\"}\n\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return s[1:] == s[:-1]\n\n# Test the function with an example string\ns = \"abccde\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Characters are not same\") ",
        "generated_testcode": "assert all_Characters_Same(\"abbbbbbb\") == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"Returns the surface area of a tetrahedron with sides of length 'side'.\"\"\"\n    # We can calculate the area of a tetrahedron using the formula:\n    # area = (1/2) * side^2 * sqrt(3) * height\n    # where height is the length of the height of the tetrahedron, which is equal to the\n    # length of one of the edges times the square root of 3.\n    height = side * (3 ** (1/2))\n    return (1/2) * side ** 2 * height\n\n# Test the function with a few inputs\nprint(area_tetrahedron(3)) # Should print 9.838992523651159875\nprint(area_tetrahedron(5)) # Should print 86.60254052555853246\nprint(area_tetrahedron(10)) # Should print 346.00380224767953592\n\n# Write a function to calculate the volume of a tetrahedron\ndef volume_tetrahedron(side):\n    \"\"\"Returns the volume of a tetrahedron with sides of length 'side'.\"\"\"\n    # We can calculate the volume of a tetrahedron using the formula:\n    # volume = (1/3) * (1/6) * side^3\n    volume = (1/6) * side **",
        "generated_testcode": "assert area_tetrahedron(5) == 10.8253176645825317665\n\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(list1) == 0 or n == 0:\n        return list1\n    m = m%len(list1)\n    return list1[-m:] + list1[:-m]\n\n\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 2\nn = 3\nprint(rotate_right(list1,m,n)) # Output: [7,8,9,1,2,3,4,5,6]\n\n\n# Another way to solve this problem is to use deque\n#from collections import deque\n#def rotate_right(list1,m,n):\n#    if len(list1) == 0 or n == 0:\n#        return list1\n#    d = deque(list1)\n#    d.rotate(m)\n#    return list(d)\n#list1 = [1,2,3,4,5,6,7,8,9]\n#m = 2\n#n = 3\n#print(rotate_right(list1,m,n)) # Output: [7,8,9,1,2,3,4,5,6] ",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7],2,2) == [6,7,1,2,3,4,5]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if any(elem is None for elem in test_tup):\n        return True\n    else:\n        return False\n\n#Test the function with some test cases\nprint(check_none((1, None, 2, 3, 4, None, 5)) == True)\nprint(check_none((1, 2, 3, 4, 5, 6)) == False)\nprint(check_none((None, None, None, None, None)) == True)\nprint(check_none((\"apple\", \"banana\", \"cherry\", None, \"orange\")) == True)\nprint(check_none((\"apple\", \"banana\", \"cherry\", \"orange\", \"watermelon\")) == False) ",
        "generated_testcode": "assert check_none((1, 2, 3, 4, 5, 6)) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            result.append(i)\n    return result\n\nprint(divisible_by_digits(10, 20))  # [12, 14, 15, 16, 18]\nprint(divisible_by_digits(100, 200))  # [120, 126, 132, 140, 144, 150, 160, 162, 168, 180, 192]\n\n# Time Complexity: O(n*log(n)) where n is the number of digits in the range\n# Space Complexity: O(1) ",
        "generated_testcode": "assert divisible_by_digits(10, 20) == []\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 22/7\n    return (r*r)*(a-sin(a)*r)/(2*pi)\nr = float(input(\"Enter the radius of sector: \"))\na = float(input(\"Enter the angle of the sector in degrees: \")\na = radians(a)\nprint(\"Area of sector: \",sector_area(r,a))\n\n\n# Importing math library for sin function. \nfrom math import sin, radians\n\n# Taking radius and angle as input from user. \nr = float(input(\"Enter the radius of sector: \"))\na = float(input(\"Enter the angle of the sector in degrees: \")\n\n# Calculating sector area using the formula. \narea = (r*r)*(a-sin(radians(a))/2\n\n# Printing the result. \nprint(\"Area of sector: \",area) ",
        "generated_testcode": "assert sector_area(5, 45) == 141.3716691669645880567\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n      \n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note \n    # that L[i][j][k] contains length of LCS of X[0..i-1] and \n    # Y[0..j-1] and Z[0..k-1]\n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    return L[m][n][o]\n\n# Driver program to test the above function \nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"GXTYAB\"\nm = len(",
        "generated_testcode": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AFRDXC\" , 4, 5, 5) == \"AD\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    #using regex, find all words that start with capital letters and add a space before them\n    words = re.findall(r'[A-Z][a-z]*', str1)\n    #iterate through the words and add a space before them\n    for word in words:\n        str1 = str1.replace(word, ' ' + word)\n    return str1\n\n#test the function\nprint(capital_words_spaces(\"HelloWorld\")) #Hello World\nprint(capital_words_spaces(\"IAmAString\")) #I Am A String ",
        "generated_testcode": "assert capital_words_spaces(\"helloWorld\") == \"hello World\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Create a lambda function to convert the string to int\n    convert = lambda num_str: int(num_str)\n    # Convert the list of strings to a list of integers\n    nums = list(map(convert, nums_str))\n    # Sort the list of integers\n    nums.sort()\n    # Convert the list of integers back to a list of strings\n    result = list(map(str, nums)\n    return result\n\n# Test the function with an example list\nnums_str = [\"3\", \"1\", \"5\", \"2\", \"8\", \"6\", \"4\"]\nprint(sort_numeric_strings(nums_str))  # Output: ['1', '2', '3', '4', '5', '6', '8'] ",
        "generated_testcode": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"10\", \"5\", \"6\"]) == [\"1\", \"2\", \"3\", \"5\", \"6\", \"10\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in test_tup:\n        test_list.append(i)\n    return test_list\n\n# Test the function\nlist1 = [1,2,3,4]\ntup1 = (5,6,7)\nprint(add_tuple(list1, tup1))  # Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr)\n    if i >= n:\n        return True\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n    return check_min_heap(arr, left_child) and check_min_heap(arr, right_child)\n\n\n# Test the function with an example\narr = [1, 2, 3, 4, 10, 20, 15, 25, 200]\nprint(check_min_heap(arr, 0))  # Output: True\n\n\n# Let's test the function with some more examples\narr = [1, 4, 3, 10, 20, 15, 25, 200]\nprint(check_min_heap(arr, 0))  # Output: False\narr = [10, 20, 30, 40, 50, 15, 25]\nprint(check_min_heap(arr, 0))  # Output: False\narr = [1, 2, 3, 4, 10, 20, 15, 25, 200, 50]\nprint(check",
        "generated_testcode": "assert check_min_heap([4, 10, 3, 15, 12, 11, 14, 13, 8, 6, 16, 1, 7]) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return (n * jacobsthal_num(n-1) + 1) / 2\n\n\n# Test the function with example \nprint(jacobsthal_num(0)) # Output: 0\nprint(jacobsthal_num(1)) # Output: 1\nprint(jacobsthal_num(2)) # Output: 1\nprint(jacobsthal_num(3)) # Output: 2\nprint(jacobsthal_num(4)) # Output: 5\nprint(jacobsthal_num(5)) # Output: 11\nprint(jacobsthal_num(6)) # Output: 21\nprint(jacobsthal_num(7)) # Output: 42\n\n# To find the first 10 Jacobsthal numbers, we can use a loop to call the function for n from 0 to 9\nfor i in range(10):\n    print(jacobsthal_num(i)) \n# Output: 0 1 1 1 2 5 11 21 42 65 105 169 263 405 ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    test_list.sort()\n    min_K = test_list[:K]\n    return min_K\n\ntest_list = [(5, 2), (4, 6), (3, 7), (1, 9), (7, 10), (2, 3), (8, 5), (9, 4)]\nK = 3\nresult = min_k(test_list, K)\nprint(result) ",
        "generated_testcode": "assert min_k([(('A', 5), ('B', 3), ('C', 1), ('D', 6), ('E', 2)], 2) == [('C', 1), ('E', 2)]\n\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            result.append(i)\n    return result\n\n# test case\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [2, 4, 6, 8, 10]\nl3 = [2, 4, 6, 9, 12]\nprint(extract_index_list(l1, l2, l3)) # Output: [1, 3]\n\n\n# Second solution using sets\ndef extract_index_list(l1, l2, l3):\n    set_1 = set(l1)\n    set_2 = set(l2)\n    set_3 = set(l3)\n    return [i for i in range(len(l1)) if l1[i] in set_1.intersection(set_2, set_3)]\n\n# test case\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [2, 4, 6, 8, 10]\nl3 = [2, 4, 6, 9, 12]\nprint(extract_index_list(l1, l2, l3)) # Output: [1, 3] ",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 6], [3, 4, 5, 7]) == [2, 3]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None\n\n\n# Example usage:\nnums = [4, 3, 7, 1, 2, 8, 2, -1, 6]\nprint(second_smallest(nums))  # Output: 2\n\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert second_smallest([5, 2, 3, 8, 1, 6, 7, 4]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'a[b]?')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(text_match_zero_one(\"ab\"))  # True\nprint(text_match_zero_one(\"abc\")) # True\nprint(text_match_zero_one(\"abb\")) # True\nprint(text_match_zero_one(\"abbb\")) # False\nprint(text_match_zero_one(\"ac\"))  # False ",
        "generated_testcode": "assert text_match_zero_one(\"ab\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n# test cases\nprint(count_reverse_pairs(['abc', 'cba', 'xyz', 'rey', 'yer', 'robot', 'bot']) == 2)\nprint(count_reverse_pairs(['aaa', 'aa', 'aba', 'ba', 'aba']) == 2)\nprint(count_reverse_pairs(['abc', 'xyz', '123', 'hello', 'world']) == 0)\nprint(count_reverse_pairs(['abc', 'xyz', '123', 'hello', 'world', '121']) == 1)\nprint(count_reverse_pairs(['123', '321', 'python', 'onyp', 'abba', 'revive']) == 3)\nprint(count_reverse_pairs([]) == 0)\nprint(count_reverse_pairs(['aba', 'abba', 'ab', 'ba']) == 2) ",
        "generated_testcode": "assert count_reverse_pairs(['abc', 'cba', 'xyz', 'aba', 'bac', 'def', 'fed']) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_list = []\n    for i in range(len(list1)):\n        if list1[i] not in unique_list:\n            unique_list.append(list1[i])\n    return len(unique_list)\n\n# example usage:\nlist1 = [[1,2,3],[4,5,6],[1,2,3],[7,8,9],[4,5,6],[7,8,9]]\nprint(unique_sublists(list1)) # Output: 2 ",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if type(num) != float:\n        return False\n    else:\n        num_str = str(num)\n        if \".\" in num_str:\n            if len(num_str.split(\".\")[1]) <= 2:\n                return True\n        else:\n            return False\n\n# Check if the input is valid\ndef is_valid(input_list):\n    if len(input_list) == 3:\n        if is_decimal(input_list[0]) and is_decimal(input_list[1]) and is_decimal(input_list[2]):\n            return True\n    return False\n\n# Main function to calculate the bill amount\ndef calculate_bill(input_list):\n    if is_valid(input_list):\n        total_bill = (input_list[0] + input_list[1]) * input_list[2] * 0.01 + input_list[0] + input_list[1]\n        return round(total_bill, 2)\n    else:\n        return \"Invalid input\"\n\n# Test the function with sample inputs\nprint(calculate_bill([100.00, 200.00, 10.25]))\nprint(calculate_bill([500.50, 100.25, 5.5]))\nprint(calculate_bill([25.75, 10.5, 12.00]))\nprint",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n):\n        j=i+1\n        while(j<n):\n            if arr[i]==arr[j]:\n                return False\n            j+=1\n    return True \n\n# Test the function\narr=[1,2,3,4,5,6,6]\nn=len(arr)\nif(unique_Element(arr,n)):\n    print(\"Array contains only one distinct element\")\nelse:\n    print(\"Array doesn't contain only one distinct element\") \n\n# Output:Array doesn't contain only one distinct element ",
        "generated_testcode": "assert unique_Element(arr=[1,2,3,4,5],n=4) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pi = 3.14159265359\n    arclen = d*a/360 * pi\n    return arclen\n\ndef main():\n    d = float(input(\"Enter the diameter of the circle: \")\n    a = float(input(\"Enter the angle in degrees: \")\n    result = arc_length(d,a)\n    print(\"The arc length of the angle is:\",result)\n\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert arc_length(10, 30) == 50\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum3 in [2]:\n        return None  # None because it depends on whether it is a leap year or not\n    else:\n        raise ValueError(\"Invalid month number\")\n\n\n# Example usage:\n# print(check_monthnumber_number(2))  # False\n# print(check_monthnumber_number(6))  # True\n# print(check_monthnumber_number(13))  # raises ValueError(\"Invalid month number\") ",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = abs(arr[1] - arr[0]) \n    for i in range(2, n): \n        if abs(arr[i] - arr[i-1]) < min_diff: \n            min_diff = abs(arr[i] - arr[i-1]) \n    return min_diff ",
        "generated_testcode": "assert find_Min_Diff([1, 5, 3, 19, 18, 25, 30, 20, 40],6) == 1\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n# test the function\nprint(number_ctr(\"hello world 123\"))\nprint(number_ctr(\"hello world 123!\"))\nprint(number_ctr(\"hello 123 world!\"))\nprint(number_ctr(\"1234 hello world\")) ",
        "generated_testcode": "assert number_ctr(\"Hello 123 world 456\") == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns True if n is polite number, else False\n    \"\"\"\n    if n <= 0:\n        return False\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    return False\n\ndef nth_polite_number(n):\n    \"\"\"\n    Returns nth polite number\n    \"\"\"\n    count = 0\n    num = 1\n    while True:\n        if is_polite(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1\n\n# Test\nprint(nth_polite_number(10)) # Output: 124\nprint(nth_polite_number(15)) # Output: 256\nprint(nth_polite_number(20)) # Output: 345\nprint(nth_polite_number(25)) # Output: 495\nprint(nth_polite_number(30)) # Output: 693\nprint(nth_polite_number(35)) # Output: 924\nprint(nth_polite_number(40)) # Output: 12233\nprint(nth_polite_number(45)) # Output: 1546\nprint(nth_polite_number(50)) # Output: 1763\nprint(nth_polite_number(55)) # Output: 22112\nprint(nth_pol",
        "generated_testcode": "assert is_polite(12) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(l1) < 2:\n        return []\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n\n\n# Example usage:\nl1 = [1,2,3,4,5,6]\nresult = pair_wise(l1) # Output: [(1, 2), (2, 3), (3, 4), (4, 5)]\nprint(result) ",
        "generated_testcode": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    left, right = 0, n-1\n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n\n#Driver code\narr = [1, 5, 7, 1, 5, 3, 3, 3, 1]\nn = len(arr)\nsum = 6\nprint(get_Pairs_Count(arr,n,sum)) ",
        "generated_testcode": "assert (get_Pairs_Count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 3)\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    set_bit_count = 0 \n    while (x): \n        set_bit_count += x & 1 \n        x >>= 1\n    return (set_bit_count % 2 == 1)\n\n#Example \n#check_Odd_Parity(7) -> True \n#7 is represented as 1111 in binary form which has odd number of set bits (3) ",
        "generated_testcode": "assert check_Odd_Parity(10) == False\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(set(li1) - set(li2)) + list(set(li2) - set(li1)) \n# Example usage:\n# li1 = [1, 2, 3, 4, 5, 6, 7]\n# li2 = [2, 4, 6, 8, 10]\n# print(Diff(li1,li2)) # Output: [8, 10, 1, 3, 5, 7] ",
        "generated_testcode": "assert Diff([1,2,3,4,5],[1,2,3,4,5]) == []\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while (count < n) : \n        if (i % 2 != 0) : \n            sum += i**4\n            count += 1\n        i += 1\n    return sum \n# Test the function with an example value of n \nn = 5\nprint(\"The sum of the fourth power of first\", n, \"odd numbers is : \", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(3) == 35 \n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for i in exp:\n        if i in ['{','(','[']:\n            stack.append(i)\n        elif i == '}':\n            if not stack or stack.pop() != '{':\n                return False\n        elif i == ')':\n            if not stack or stack.pop() != '(':\n                return False\n        elif i == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n\n# Testing the function with examples\nexp1 = \"{()}[]\"\nprint(check_expression(exp1)) # True\nexp2 = \"{[()]\"\nprint(check_expression(exp2)) # False\nexp3 = \"{(})\"\nprint(check_expression(exp3)) # False\nexp4 = \"{()}[]\"\nprint(check_expression(exp4)) # True ",
        "generated_testcode": "assert check_expression(\"(a+(b*c)\") == False\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    words = test_str.split()\n    return \" \".join([word for word in words if len(word) != K])\n\n\ntest_str = \"Hello World Programming World\"\nK = 5\nprint(remove_length(test_str, K)\n# Output: \"Hello Programming\" ",
        "generated_testcode": "assert remove_length(\"Hello world\", 2) == \"Held\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pattern_length = len(pattern)\n    text_length = len(text)\n    count = 0\n    position = []\n    for i in range(text_length - pattern_length + 1):\n        if text[i:i+pattern_length] == pattern:\n            count += 1\n            position.append(i+1)\n    return count, position\n\ntext = \"ABABCDBEACDDBE\"\npattern = \"BE\"\ncount, position = occurance_substring(text,pattern)\nprint(\"The pattern '\", pattern, \"' occurs\", count, \"times in the given text and the positions are:\", position) ",
        "generated_testcode": "assert occurance_substring(\"ABCDCDCBAABCDEFG\",\"ABC\") == {\"count\": 2, \"positions\": [0, 4]}\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    \n    # regex pattern for email validation\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    \n    # checking if the email matches the pattern\n    if re.match(pattern, email): \n        return True\n    else: \n        return False\n    \n# testing the function with some examples\nprint(check_email('myname@gmail.com')) # True\nprint(check_email('myname123@gmail.com')) # True\nprint(check_email('myname.123@gmail.com')) # True\nprint(check_email('my.name.123@gmail.com')) # True\nprint(check_email('my.name@gmail.com')) # True\nprint(check_email('my_name@gmail.com')) # True\nprint(check_email('myname@gmail.co.in')) # True\nprint(check_email('myname@gmail.co')) # False (invalid TLD)\nprint(check_email('myname@gmail')) # False (invalid domain extension)\nprint(check_email('myname@123gmail.com')) # False (invalid domain starting with number)\nprint(check_email('myname@gmail.com.')) # False (trailing period)\nprint(check_email('myname@gmail..com')) # False (double period)",
        "generated_testcode": "assert check_email('example@example.com') == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Test the function with the following list:\nprint(odd_position([2, 3, 6, 5, 8, 9, 12, 10])) ",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n# test the function\ntest_str = \"education\"\nprint(count_vowels(test_str)) # Output: 3\n\n\ntest_str = \"elephant\"\nprint(count_vowels(test_str)) # Output: 1\n\n\ntest_str = \"octopus\"\nprint(count_vowels(test_str)) # Output: 2 ",
        "generated_testcode": "assert count_vowels(\"abcde\") == 2\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr = set(arr) #convert array into set to remove duplicates\n    sum = 0 #initialize sum to 0\n    for i in arr:\n        sum += i #add each element of set to sum\n    return sum\n\n# test the function with sample inputs\narr = [1,2,3,4,2,3,5,6,7,8,9,4,1]\nn = len(arr)\nprint(find_Sum(arr,n)) ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9]) == 45\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list, packs consecutive duplicates of a list into sublists.\n    Example: [1,1,1,1,1,2,2,3,3,4,4,4,4,4,5,6,6,7,7,7,8,8,8,8,8] -> [[1,1,1,1], [2,2], [3,3], [4,4,4,4,4], [5], [6,6], [7,7,7], [8,8,8,8]]\n    \"\"\"\n    packed_list = []\n    sublist = []\n    prev_item = None\n    for item in list1:\n        if item == prev_item:\n            sublist.append(item)\n        else:\n            if sublist:\n                packed_list.append(sublist)\n            sublist = [item]\n        prev_item = item\n    packed_list.append(sublist)\n    return packed_list\n\n# Test the function with an example list\nprint(pack_consecutive_duplicates([1,1,1,1,1,2,2,3,3,4,4,4,4,5,6,6,7,7,8,8,8,8])) # Output: [[1, 1, 1], [2, 2], [3, 3], [4, 4, 4, 4], [5], [6, 6], [7, ",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\", \"c\", \"c\"]]\n",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    unique_list = []\n    for i in range(len(list1)):\n        sublist = []\n        for j in range(i+1, len(list1)+1):\n            sublist.append(list1[i:j])\n            if sublist not in unique_list:\n                unique_list.append(sublist)\n                sublist = []\n    return len(unique_list)\n\n# Example usage:\nlist1 = [1, 2, 3, 4]\nprint(unique_sublists(list1)) # Output: 4\nlist2 = [1, 2, 2, 3]\nprint(unique_sublists(list2)) # Output: 6\nlist3 = [1, 1, 2, 2, 3, 3, 3, 4]\nprint(unique_sublists(list3)) # Output: 12 ",
        "generated_testcode": "assert unique_sublists([1, 2, 3, 4, 5]) == 10\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(i+1, len(test_list)):\n                if test_list[i] + test_list[j] == test_list[k]:\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result\n\n#Test the function\ntest_list = (1,2,3,4,5,6,7,8,9)\nprint(find_combinations(test_list)) # Expected output: [(1, 2, 3), (1, 3, 5), (1, 4, 6), (1, 6, 8), (2, 3, 7), (2, 5, 7), (3, 4, 8), (4, 5, 9)]\n\n\n# Other test cases\nprint(find_combinations((1,2,3,4,5,6,7,8,9,10,11)) # Expected output: [(1, 2, 3), (1, 3, 5), (1, 4, 6), (1, 6, 8), (2, 3, 7), (2, 5, 7), (3, 4, 8), (4, 5, 9), (5, 6, 10),",
        "generated_testcode": "assert find_combinations([1, 2, 3, 4]) == [(1, 2, 3), (1, 4), (2, 3), (1, 2, 4), (3, 4)]\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    cnt = 0 \n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            cnt += 1\n    return cnt \n\nn = int(input(\"Enter the number: \"))\nif count_Divisors(n) % 2 == 0:\n    print(\"The count of divisors is even\")\nelse:\n    print(\"The count of divisors is odd\") ",
        "generated_testcode": "assert count_Divisors(12) == 0\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i) % 2 != 0:\n                for k in range(i, j+1):\n                    sum += arr[k]\n    return sum\n\n#Test the function with example\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(Odd_Length_Sum(arr)) # Output: 63 ",
        "generated_testcode": "assert Odd_Length_Sum(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 105 ",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    r, g, b = r/255.0, g/255.0, b/25.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = hue * 60\n    if hue < 0:\n        hue += 360\n        \n    if cmax == 0:\n        sat = 0\n    else:\n        sat = delta / cmax\n        \n    val = cmax\n    \n    return round(hue, 2), round(sat, 2), round(val, 2)\n\n# Example usage:\nprint(rgb_to_hsv(128, 2555, 212)) # returns (62.0, 1.0, 1.0) ",
        "generated_testcode": "assert rgb_to_hsv(1, 1, 1) == (0, 0, 1)\n\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return (even_product, odd_product)\n\n\n#test the function with a sample list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(mul_even_odd(list1)) # Output: (384, 1008)\n\n\n#test the function with another list\nlist2 = [2, 4, 6, 8]\nprint(mul_even_odd(list2)) # Output: (384, 1) ",
        "generated_testcode": "assert mul_even_odd([1,2,3,4,5,6,7,8,9]) == (384, 16) # Test case 1\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # remove brackets from string\n    test_str = test_str.replace('(','').replace(')','')\n    # split string by comma and convert each element to integer\n    int_list = [int(num) for num in test_str.split(',')]\n    # convert list to tuple\n    int_tuple = tuple(int_list)\n    return int_tuple\n\n# test the function\ntest_str = '(1, 2, 3, 4, 5)'\nprint(tuple_str_int(test_str)) # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(a)\n    lo = 0\n    hi = n-1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if a[mid] < x:\n            lo = mid+1\n        else:\n            hi = mid-1\n    return lo\n\n# Example usage:\na = [1, 3, 4, 5, 6, 7, 8, 9]\nx = 6\nprint(right_insertion(a, x))  # Output: 3 ",
        "generated_testcode": "assert right_insertion([1, 3, 4, 5, 7, 9], 6) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = 'abbb'\n    if pattern in text:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(text_match_three('abbb'))  # True\nprint(text_match_three('abb'))  # False\nprint(text_match_three('abbbb')) # False\nprint(text_match_three('aabbb')) # False\nprint(text_match_three('ababbb')) # False\nprint(text_match_three('abbbaaabbb')) # True\nprint(text_match_three('abbbba')) # False ",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns a tuple with the first element as the length of the string and the second element as the list.\n    \"\"\"\n    return (len(test_str), test_list)\n\n\n# Test the function with sample inputs\nprint(new_tuple(\"Hello World\", [1, 2, 3, 4, 5])) ",
        "generated_testcode": "assert new_tuple(['apple', 'banana', 'cherry'], 'fruit') == ('fruit', 'apple', 'banana', 'cherry')\n\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    p = s * l\n    return p\n\n#or\ndef perimeter_polygon(n, s):\n    return n * s\n#where s is the length of each side and n is the number of sides\n\n#example\n#perimeter_polygon(5, 3) would return 15 (if each side is 3 units long and there are 5 sides) ",
        "generated_testcode": "assert perimeter_polygon(5, 3) == 15\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Test the function with the following code\nprint(even_position([2, 3, 4, 6, 8, 10, 11, 12])) # Should return False\nprint(even_position([2, 4, 6, 8, 10])) # Should return True ",
        "generated_testcode": "assert even_position([2, 3, 4, 6, 8, 10, 11, 12]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result += list(i)\n        else:\n            result.append(i)\n    return tuple(result)\n\n# Test the function with an example\ntest_tup = (1,2,(3,4),5,(6,7,(8,9,10))),(11,12)\nprint(remove_nested(test_tup)) ",
        "generated_testcode": "assert remove_nested(('test', (1, 2, 3, ('hello', 'world', (4, 5, 6), 'goodbye')) == (1, 2, 3, 'hello', 'world', 4, 5, 6, 'goodbye')\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count ",
        "generated_testcode": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    res = -1\n    while(low<=high):\n        mid = (low+high)//2\n        if arr[mid] == x:\n            res = mid\n            low = mid+1\n        elif arr[mid]<x:\n            low = mid+1\n        else:\n            high = mid-1\n    return res\n\n#test the function with an example:\narr = [1,2,3,4,5,6,6,6,6,6,7,8,9]\nx = 6\nn = len(arr)\nprint(last(arr,x,n)) ",
        "generated_testcode": "assert last([1,2,3,4,5,6,7,8,9],8,6) == 5\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": " pattern = r'a.*b$'\n  result = re.search(pattern, text)\n  return result != None\n\n# Example usage:\n# text_starta_endb('ab') --> True\n# text_starta_endb('abc') --> False\n# text_starta_endb('acb') --> False\n# text_starta_endb('aab') --> True\n# text_starta_endb('axxxb') --> True\n# text_starta_endb('axxxbxxx') --> False\n# text_starta_endb('xxba') --> False\n# text_starta_endb('a') --> False ",
        "generated_testcode": "assert text_starta_endb(\"aab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap)\n\n# Create a list of items with their prices\nitems = [\n    {\"name\": \"item1\", \"price\": 200},\n    {\"name\": \"item2\", \"price\": 50},\n    {\"name\": \"item3\", \"price\": 100},\n    {\"name\": \"item4\", \"price\": 120},\n    {\"name\": \"item5\", \"price\": 10},\n    {\"name\": \"item6\", \"price\": 80},\n    {\"name\": \"item7\", \"price\": 300},\n    {\"name\": \"item8\", \"price\": 60},\n    {\"name\": \"item9\", \"price\": 150},\n    {\"name\": \"item10\", \"price\": 40},\n    {\"name\": \"item11\", \"price\": 15},\n    {\"name\": \"item12\", \"price\": 35},\n    {\"name\": \"item13\", \"price\": 70}\n]\n\n# Find the 3 cheap items\nn = 3\n\n# Call the cheap_items function and print the result\nresult = cheap_items(items, n)\nprint(result) # Output: [{\"name\": \"item11\",",
        "generated_testcode": "assert cheap_items([\"item1\": 10, \"item2\": 20, \"item3\": 5, \"item4\": 15, \"item5\": 25, \"item6\": 30, \"item7\": 3, \"item8\": 22, \"item9\": 27, \"item10\": 18}, 3) == [\"item3\", \"item7\", \"item10\"]\n\n# The output should be [\"item3\", \"item7\", \"item10\"] because these are the 3 cheapest items in the dataset. ",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n\ndict = {'a': 100, 'b': 200, 'c': 300, 'd': 400}\nprint(\"Sum of the dictionary values :\", return_sum(dict))\n\n\n# Output: Sum of the dictionary values : 10000 ",
        "generated_testcode": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n+1): \n        if i % 2 != 0: \n            sum += i \n    return sum\n\n#Driver code \nl = int(input(\"Enter the lower bound: \"))\nr = int(input(\"Enter the upper bound: \"))\nif l % 2 == 0: \n    l += 1\nprint(\"The sum of odd numbers between\", l, \"and\", r, \"is\", sum_Odd(r)-sum_Odd(l-1)) ",
        "generated_testcode": "assert sum_Odd(1, 10) == 25\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #return sum of array using inbuilt sum() function \n    return sum(arr) \n\n# Test the function with an example array \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nprint(\"Sum of the array is:\", _sum(arr) ",
        "generated_testcode": "assert _sum([1,2,3,4,5]) == 15\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # d is the number of bits by which the given number n is to be rotated\n    print(\"Original Number: \", bin(n))\n    # convert the number to binary and store the d bits before rotation in a variable\n    binary_n = bin(n)\n    left_bits = binary_n[:d]\n    # rotate the bits by d positions to the left\n    right_bits = binary_n[d:]\n    # concatenate the right bits and the left bits\n    rotated_bits = right_bits + left_bits\n    # convert the rotated bits back to decimal and return the value\n    return int(rotated_bits, 2)\n    \nn = 34\nd = 2\nprint(\"Rotated Number: \", left_Rotate(n,d))\n\n\n# Output:\n# Original Number:  0b10101010\n# Rotated Number:  1010\n\n\n# The binary representation of 34 is 0b101010, and after rotating its bits 2 positions to the left, the new binary representation becomes 0b1010, which is 2 in decimal. ",
        "generated_testcode": "assert left_Rotate(1234, 2) == 486\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return ''.join(text.split())\n\n# Example usage:\n# my_string = 'This is a sentence with spaces.'\n# print(remove_all_spaces(my_string))  # Output: 'Thisisasentencewithspaces.'\n\n\ndef remove_all_spaces(text):\n    return ''.join(text.split())\n# Example usage:\n# my_string = 'This is a sentence with spaces.'\n# print(remove_all_spaces(my_string))  # Output: 'Thisisasentencewithspaces.' ",
        "generated_testcode": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\nprint(test_three_equal(1,2,2))\nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,2,3)) ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # Find the index of minimum element in the rotated array\n    min_idx = find_Min(arr,0,n-1)\n    \n    if min_idx != 0:\n        return min_idx\n    else:\n        return 0\n    \ndef find_Min(arr,low,high):\n    if low > high:\n        return high\n    \n    if low == high:\n        return low\n    \n    mid = (low + high) // 2\n    \n    if mid < high and arr[mid+1] < arr[mid]:\n        return mid + 1\n    \n    if mid > low and arr[mid-1] > arr[mid]:\n        return mid - 1\n    \n    if arr[low] > arr[mid]:\n        return find_Min(arr,low,mid-1)\n    else:\n        return find_Min(arr,mid+1,high)\n\n# test the function\narr = [15,18,2,3,6,12]\nn = len(arr)\nprint(count_Rotation(arr,n))  # Output: 2\n\narr = [3,4,5,1,2]\nn = len(arr)\nprint(count_Rotation(arr,n))  # Output: 1\narr = [10,20,30,1,2]\nn = len(arr)\nprint(count_Rotation(arr,n))  # Output: 2\narr = [2,",
        "generated_testcode": "assert count_Rotation([15,16,19,20,25,1,3,6,12],6) == 2\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import math\n    root = int(math.sqrt(n))\n    return root * root == n\n\n# Example Usage:\nn = 16\nif is_Perfect_Square(n):\n    print(n,\"is a perfect square\")\nelse:\n    print(n,\"is not a perfect square\")\n# Output: 16 is a perfect square ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    product = 1\n    for i in range(n): \n        product *= arr[i]\n    if(product % 2 == 0): \n        return True\n    else: \n        return False\n# Testing the function with an example\narr = [2, 3, 4, 6]\nn = len(arr)\nif(is_Product_Even(arr, n)):\n    print(\"The product is even\")\nelse:\n    print(\"The product is odd\") ",
        "generated_testcode": "assert is_Product_Even([2,4,6,8],3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]\nprint(max_sum_list(lists)) # Output: [10, 11, 12] ",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12, 13], [7, 8, 9]] ) == [10, 11, 12, 13]\n\n# Test case 1: Test with a list of lists with positive integers\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n    return max(max_count, current_count)\n\n\n# test the function with some sample inputs\nprint(max_run_uppercase(\"hello WORLD\")) # 5\nprint(max_run_uppercase(\"UPPERCASE UPPERCASE lowercase\")) # 7\nprint(max_run_uppercase(\"HeLLo WoRLD\")) # 2\nprint(max_run_uppercase(\"12345\")) # 0 ",
        "generated_testcode": "assert max_run_uppercase(\"Hello World\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the first odd number in a list of numbers.\n    If no odd number is found, returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# test the function\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16])) # None\nprint(first_odd([2, 4, 6, 8, 10, 12, 14, 16, 17])) # 17 ",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i == K:\n            return True\n    return False\n\n#test the function\ntest_tuple = (1,2,3,4,5,6,7,8,9,10)\nK = 8\nif check_K(test_tuple, K):\n    print(\"Tuple contains\",K)\nelse:\n    print(\"Tuple does not contain\",K)\n\n\n#test with another tuple\ntest_tuple = (1,2,3,4,5,6,7,8,9,10)\nK = 11\nif check_K(test_tuple, K):\n    print(\"Tuple contains\",K)\nelse:\n    print(\"Tuple does not contain\",K) ",
        "generated_testcode": "assert check_K(('hello', 'K') == True)\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n    return False\n\n# Test the function with sample tuples\ntup1 = (4, 8, 2, 9, 5, 1)\ntup2 = (1, 5, 7, 3, 6, 9)\nprint(check_smaller(tup1, tup2))  # Output: True\n\n\ntup3 = (1, 3, 5, 2, 4, 8)\ntup4 = (2, 5, 4, 5, 3, 1)\nprint(check_smaller(tup3, tup4))  # Output: False\n\ntup5 = (9, 2, 4, 8, 3, 7)\ntup6 = (5, 6, 3, 4, 2, 8)\nprint(check_smaller(tup5, tup6))  # Output: False\n\ntup7 = (1, 3, 5, 2, 4, 8)\ntup8 = (2, 5, 4, 5, 3, 1)\nprint(check_smaller(tup7, tup8))  # Output: True ",
        "generated_testcode": "assert check_smaller((1, 3, 5, 7, 9), (2, 3, 6, 8)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dict_var = {a:0,b:0,c:0,d:0}\n    for i in [a,b,c,d]:\n        dict_var[i] += 1\n    for key in dict_var:\n        for j in range(dict_var[key]):\n            print(key,end='')\n\na=input()\nb=input()\nc=input()\nd=input()\ncount_variable(a,b,c,d)\n#sample input:\n#1\n#2\n#3\n#2\n#output:\n#122333 ",
        "generated_testcode": "assert count_variable(1,2,3,4) == [1,2,2,3,3,3,3,4,4,4,4,4]\n\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n# Example usage:\nlist1 = [(1,2), (3,4), (5,6)]\nlist2 = [(1,2), (3,4), (5,6)]\nlist3 = [(1,2), (3,4), (6,5)]\nprint(check_identical(list1, list2)) # Output: True\nprint(check_identical(list1, list3)) # Output: False ",
        "generated_testcode": "assert check_identical([(1, 2), (3, 4), (5, 6)], [(5, 6), (3, 4), (1, 2)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if 'road' in street.lower():\n        return street[:street.lower().index('road')] + 'rd.' + street[street.lower().index('road')+4:]\n    else:\n        return street\n\n# Example usage:\nprint(road_rd('Washington Road')) # Output: 'Washington Rd.'\nprint(road_rd('Park Road')) # Output: 'Park Rd.'\nprint(road_rd('Broadway')) # Output: 'Broadway'\n\n\n# Write a function to abbreviate 'street' as 'st.' in a given string.\ndef street_st(street):\n    if 'street' in street.lower():\n        return street[:street.lower().index('street')] + 'st.' + street[street.lower().index('street')+6:]\n    else:\n        return street\n\n# Example usage:\nprint(street_st('Broad Street')) # Output: 'Broad St.'\nprint(street_st('Parkway')) # Output: 'Parkway'\n\n# Write a function to abbreviate 'boulevard' as 'blvd.' in a given string.\ndef boulevard_blvd(street):\n    if 'boulevard' in street.lower():\n        return street[:street.lower().index('boulevard')] + 'blvd.' + street[street.lower().index('boulevard')+8:]\n    else:\n        return street\n\n# Example usage:\nprint(bou",
        "generated_testcode": "assert (road_rd(\"123 Main Road\") == \"123 Main Rd.\")\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for _ in str1:\n        count += 1\n    return count\n\n# Test the function with different strings\nprint(string_length(\"Hello, World!\"))\nprint(string_length(\"Python\"))\nprint(string_length(\"12345\"))\nprint(string_length(\" \")) ",
        "generated_testcode": "assert string_length(\"hello\") == 5\n\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    area = p*q\n    return area\n\n# Test the function with some sample test cases\nprint(rombus_area(4,5)) # should return 20\nprint(rombus_area(7,3)) # should return 21\nprint(rombus_area(10,8)) # should return 80\nprint(rombus_area(2.5,3)) # should return 7.5\nprint(rombus_area(11,11)) # should return 1100 ",
        "generated_testcode": "assert rombus_area(4, 5) == 12\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count_0 += 1\n        elif arr[i] == 1:\n            count_1 += 1\n        else:\n            count_2 += 1\n    for i in range(n):\n        if i < count_0:\n            arr[i] = 0\n        elif i < count_0 + count_1:\n            arr[i] = 1\n        else:\n            arr[i] = 2\n    return arr\n\n\narr = [0, 1, 2, 0, 1, 1, 2, 2, 0, 1, 0, 2, 1, 2, 2, 0, 0, 1]\nn = len(arr)\nsort_by_dnf(arr, n)\nprint(arr) ",
        "generated_testcode": "assert sort_by_dnf(arr, n) == sorted(arr)\n\n# The function should work for the following test cases:\narr = [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]\nn = len(arr)\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    test_tup = ()\n    return test_tup\n\n#testing\nprint(clear_tuple((1,2,3,4,5)) ) #Expected output: () ",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5)) == ()\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0,nums))\nnums = [2,4,6,8,10,12,14,16,18,20]\nm=3\nn=5\nprint(div_of_nums(nums,m,n)) # Output: [6, 12, 20] ",
        "generated_testcode": "assert div_of_nums([1,2,3,4,5,6,7,8,9,10],2,3) == [2,3,4,6,8,9]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    ctr = 0\n    for letter in str:\n        if letter.islower():\n            ctr += 1\n    return ctr\n\n#test the function\nprint(lower_ctr(\"Hello World\"))\nprint(lower_ctr(\"hello world\"))\nprint(lower_ctr(\"HELLO WORLD\"))\nprint(lower_ctr(\"HeLlO WoRlD\")) ",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 8\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            count += 1\n    return count\n\n#Example:\n#Input: [1,2,2,3,3,3,3,4,5,6,6,6]\n#Output: 3\n#Explanation: The consecutive duplicate elements are 2,2 and 3,3,3,6,6. The count is 3. ",
        "generated_testcode": "assert count_duplic([]), 0\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    else:\n        return False\nprint(check_monthnum_number(2)) # True\nprint(check_monthnum_number(5)) # False ",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**dict1,**dict2}\n\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nresult = merge_dictionaries(dict1,dict2)\nprint(result) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4} ",
        "generated_testcode": "assert merge_dictionaries({\"a\":1, \"b\":2}, {\"b\":3, \"c\":4}) == {\"a\":1, \"b\":3, \"c\":4}\n\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    length = len(p)\n    if length < 8 or length > 16:\n        return False\n    has_digit = False\n    has_upper = False\n    has_lower = False\n    for char in p:\n        if char.isdigit():\n            has_digit = True\n        elif char.isupper():\n            has_upper = True\n        elif char.islower():\n            continue\n        else:\n            return False\n    return has_digit and has_upper\n\n# Example usage:\nprint(pass_validity(\"Abc12345678\"))  # True\nprint(pass_validity(\"Abc1234\"))    # False\nprint(pass_validity(\"12345678abcd\"))  # False\nprint(pass_validity(\"Abcdefgh\"))   # False\nprint(pass_validity(\"Abc12345678901\"))  # False ",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    if re.match('^'+sample, string) : \n        return True\n    else : \n        return False\n# example usage \nstring = \"Hello, World\"\nsample = \"Hello\"\nif check_substring(string, sample) : \n    print(f\"{string} starts with {sample}\")\nelse : \n    print(f\"{string} does not start with {sample}\") ",
        "generated_testcode": "assert check_substring(\"hello world\", \"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Removes even numbers from a list\n    :param l: A list of numbers\n    :return: A list with even numbers removed\n    \"\"\"\n    # Your code here\n    return [x for x in l if x % 2 != 0]\n\n\n# Test the function with an example\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_even(my_list)) # Output: [1, 3, 5, 7, 9]\n\n\n#Test the function with another example\nmy_list2 = [10, 5, 3, 8, 12, 15, 11, 6, 7]\nprint(remove_even(my_list2)) # Output: [5, 11] ",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two arguments:\n    1. nums: a list of integers\n    2. list_index: a list of indices to access from the nums list\n    The function returns a list of elements present at the given indices in the nums list\n    \"\"\"\n    result = []\n    for i in list_index:\n        result.append(nums[i])\n    return result\n\n# Test the function with sample inputs\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [1, 3, 4]\nprint(access_elements(nums, list_index))  # Output: [2, 4, 5] ",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 4]) == [2, 4, 5]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a==b==c:\n        return \"Equilateral Triangle\"\n    elif a==b or b==c or c==a:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Scalene Triangle\"\n#Example Usage:\n#print(check_Type_Of_Triangle(4,5,6))  # Output: Scalene Triangle\n#print(check_Type_Of_Triangle(6,6,6))  # Output: Isosceles Triangle\n#print(check_Type_Of_Triangle(5,5,5))  # Output: Equilateral Triangle ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list of lists as input and returns the sum of a specific column in the list.\n    C is the index of the column to sum, with 0 being the first column.\n    \"\"\"\n    total = 0\n    for i in range(len(list1)):\n        total += list1[i][C]\n    return total\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 1))  # Output: 15 (2 + 5 + 8) ",
        "generated_testcode": "assert sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 12\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    alpha_count = 0\n    digit_count = 0\n    spl_count = 0\n    for char in string:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            digit_count += 1\n        else:\n            spl_count += 1\n    return \"Alphabets: \" + str(alpha_count) + \" Digits: \" + str(digit_count) + \" Special characters: \" + str(spl_count)\n\n\n# Test the function with a sample string\nsample_string = \"Hello@123!World\"\nprint(count_alpha_dig_spl(sample_string) ) ",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello World! 123\") == (10, 3, 1) # Testing with a string containing alphabets, digits and special characters\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #convert the string to list of words \n    words = input.split() \n    #create a dictionary to store the count of each word \n    freq_dict = {} \n    for word in words: \n        if word in freq_dict: \n            freq_dict[word] += 1\n        else: \n            freq_dict[word] = 1 \n            \n    #sort the dictionary by value in descending order and get the second most repeated word \n    sorted_words = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True) \n    return sorted_words[1][0] \n  \n#test the function \ninput = \"apple banana apple orange banana orange cherry banana date apple\"\nprint(second_frequent(input) # Output: banana ",
        "generated_testcode": "assert second_frequent(['apple', 'banana', 'apple', 'orange', 'banana', 'apple', 'orange', 'orange']) == 'banana'\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not isinstance(a, (int, float):\n        raise ValueError(\"a must be a number\")\n    if not isinstance(digits, int) or digits < 0:\n        raise ValueError(\"digits must be a positive integer\")\n    return round(a + 5 * (10 ** (-digits - 1), digits)\n\n\n# Example usage:\nprint(round_up(4.23456, 1))  # Output: 4.3\nprint(round_up(4.23456, 2))  # Output: 4.24\nprint(round_up(4.23456, 3))  # Output: 4.235\nprint(round_up(4.23456, 4))  # Output: 4.2346\nprint(round_up(4.23456, 5))  # Output: 4.23456\nprint(round_up(4.23456, 0))  # Output: 5\nprint(round_up(4.23456, -1))  # Raises ValueError: digits must be a positive integer\nprint(round_up(\"4.23456\", 2))  # Raises ValueError: a must be a number ",
        "generated_testcode": "assert round_up(123.4567, 1) == 123.5\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count += 1\n    return count \n\n# Driver code \narr = [1,2,3,4,5,1,2,3,1,2,4]\nn = len(arr)\nprint(count_Pairs(arr,n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],9) == 3\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    numbers = map(int, re.findall('\\d+', input)) \n    return max(numbers) if numbers else None ",
        "generated_testcode": "assert extract_max(\"The maximum number is 23\") == 23\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n#Example:\n\nmy_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\nprint(get_key(my_dict)) # ['name', 'age', 'city'] ",
        "generated_testcode": "assert get_key({\"a\": 1, \"b\": 2, \"c\": 3}) == [\"a\", \"b\", \"c\"]\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    matrix = [[0 for i in range(n)] for i in range(n)]\n    top_row, bottom_row, left_col, right_col = 0, n - 1, 0, n - 1\n    direction = 0\n    num = 1\n    while top_row <= bottom_row and left_col <= right_col:\n        if direction == 0:\n            for i in range(left_col, right_col + 1):\n                matrix[top_row][i] = num\n                num += 1\n            top_row += 1\n        elif direction == 1:\n            for i in range(top_row, bottom_row + 1):\n                matrix[i][right_col] = num\n                num += 1\n        elif direction == 2:\n            for i in range(right_col, left_col - 1, -1):\n                matrix[bottom_row][i] = num\n                num += 1\n        elif direction == 3:\n            for i in range(bottom_row, top_row - 1, -1):\n                matrix[i][left_col] = num\n                num += 1\n        left_col += 1\n        right_col -= 1\n        bottom_row -= 1\n        top_row += 1\n        direction = (direction + 1) % 4\n    return matrix\n\nn = 5\nresult = generate_matrix(n)\nfor i in range(n):\n    for j in",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    m = (y2 - y1) / (x2 - x1) \n    return m\n# Test the function with sample values\nprint(slope(5,5,8,9,12) ) # Should print 1.6666666666666666666667\nprint(slope(2,2,4,6,4) ) # Should print 0\nprint(slope(1,2,3,4,6) ) # Should print 1.666666666666666666667\n\n\n\n# Write a python function to find the length of a line in two dimensional space.\ndef length(x1,y1,x2,y2):\n    import math\n    distance = math.sqrt((x2-x1)**2 + (y2-y1)**2)\n    return distance\n# Test the function with sample values\nprint(length(2,4,6,8,6)) # Should print 4.472136601370472493\nprint(length(3,3,6,9,9)) # Should print 3.16222777666016837953\nprint(length(4,6,8,2,2)) # Should print 5.656854249494972125\n\n\n# Write",
        "generated_testcode": "assert slope(0,0,1,1) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0,size): \n        max_ending_here += a[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n            start = i + 1\n        if max_ending_here > max_so_far: \n            max_so_far = max_ending_here \n            end = i \n            s = start \n  \n    return end\n  \n# Driver function to test the above function \na = [-2, -3, 4, -1, -2, -5, -1, 4, 11, -6] \nsize = len(a) \nprint(\"Length of maximum sum subarray is \", max_sub_array_sum(a,size)) ",
        "generated_testcode": "assert max_sub_array_sum([1,2,3,-100,4,5,6,-1,2,3],6) == 9\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    count = 0\n    while count < n: \n        if i % 2 != 0: \n            sum += i * i * i \n            count += 1\n        i += 1\n    return sum \n# Test the function with an example\nprint(cube_Sum(5)) # Expected Output: 125\nprint(cube_Sum(6)) # Expected Output: 475\nprint(cube_Sum(10)) # Expected Output: 32280\nprint(cube_Sum(12)) # Expected Output: 129600\nprint(cube_Sum(7)) # Expected Output: 4525\nprint(cube_Sum(1)) # Expected Output: 1 ",
        "generated_testcode": "assert cube_Sum(3) == 35 ",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": " \n    # If lengths of given strings are not equal, return -1 \n    if len(s1)!=len(s2): \n        return -1\n  \n    # Store counts of zeroes and one's in two strings \n    count_0_s1 = s1.count('0') \n    count_1_s1 = len(s1) - count_0_s1 \n    count_0_s2 = s2.count('0') \n    count_1_s2 = len(s2) - count_0_s2 \n  \n    # If counts of both strings are same, return 0\n    if count_0_s1 == count_0_s2 and count_1_s1 == count_1_s2: \n        return 0\n  \n    # If counts of one's and zero's in both strings are not same, then it is not possible to make them equal \n    if count_0_s1 != count_0_s2 and count_1_s1 != count_1_s2: \n        return -1\n  \n    # Find the string with lesser number of one's \n    if count_1_s1 < count_1_s2: \n        s1,s2 = s2,s1 \n  \n    # Initialize result variable \n    res = 0\n  \n    # Initialize indices for two strings \n    i = 0\n    j = 0\n    temp = 0\n  ",
        "generated_testcode": "assert min_Swaps(\"10101010101010\", \"0101010101011\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[0]) \n\n# example usage: \ntup = [('banana', 20), ('apple', 10), ('cherry', 30), ('orange', 5)] \nprint(sort_tuple(tup)) # [('apple', 10), ('banana', 20), ('cherry', 30), ('orange', 5)] ",
        "generated_testcode": "assert sort_tuple(()) == ()\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a == 0:  \n        return \"a can not be 0\"  \n    else:  \n        d = b**2 - 4*a*c  \n        if d < 0:  \n            return \"No real solution\"  \n        elif d > 0:  \n            return \"Two distinct real solution\"  \n        else:  \n            x1 = (-b + d**0.5)/2  \n            x2 = (-b - d**0.5)/2  \n            if x1*x2 < 0:  \n                return \"Roots are numerically equal but opposite in sign\"  \n            else:  \n                return \"Roots are equal and real\"  \na = int(input(\"Enter coefficient of x^2: \"))  \nb = int(input(\"Enter coefficient of x: \"))  \nc = int(input(\"Enter constant term: \"))  \nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    temp_arr = [0]*n \n    return merge_sort(arr, temp_arr, 0, n-1) \n  \ndef merge_sort(arr, temp_arr, left, right): \n    inv_count = 0 \n    if left < right: \n        mid = (left + right)//2\n        inv_count += merge_sort(arr, temp_arr, left, mid) \n        inv_count += merge_sort(arr, temp_arr, mid+1, right) \n        inv_count += merge(arr, temp_arr, left, mid, right) \n    return inv_count \n  \ndef merge(arr, temp_arr, left, mid, right): \n    i = left\n    j = mid + 1\n    k = left \n    inv_count = 0 \n    l = 0\n    r = 0\n    for l in range(left, mid+1): \n        temp_arr[l+right+1] = arr[l] \n    for r in range(mid+1, right+1): \n        temp_arr[r+right+1] = arr[r] \n    i = left\n    j = right + 1\n    for k in range(left, right+1): \n        if temp_arr[i] <= temp_arr[j]: \n            arr[k] = temp_arr[i] \n            i += 1\n        else: \n            arr[k]",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6, 7, 8]) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n\n# example usage:\narr = [1, 2, 3, 4, 2, 5, 3, 6, 4, 7, 5, 8, 1, 9, 6, 10, 1]\narr_size = len(arr)\nresult = get_odd_occurence(arr, arr_size)\nif result != -1:\n    print(\"Number with odd occurrences is \", result)\nelse:\n    print(\"No number has odd occurrences\") ",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 6, 7, 7]) == 1\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    heap = [1]\n    i = [0] * len(primes)\n    while len(heap) < n:\n        min_num = heap[0]\n        del heap[0]\n        for j in range(len(primes)):\n            if i[j] > 0 and primes[j] * heap[0] == min_num:\n                i[j] -= 1\n            else:\n                heap.append(primes[j] * min_num)\n                i[j] += 1\n        heap.sort()\n    return min_num\n\n# Test case\nprimes = [2, 3, 5]\nn = 12\nprint(nth_super_ugly_number(n, primes)) # Output: 36\n# Explanation: The sequence of ugly numbers is [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36]\n\nprimes = [2, 3, 7]\nn = 15\nprint(nth_super_ugly_number(n, primes)) # Output: 120\n# Explanation: The sequence of ugly numbers is [1, 2, 3, 4, 7, 8, 14, 16, 2",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    odd_array = []\n    even_array = []\n    for i in range(1,n+1):\n        if i % 2 != 0:\n            odd_array.append(i)\n        else:\n            even_array.append(i)\n    if k <= len(odd_array):\n        return odd_array[k-1]\n    else:\n        return even_array[k-len(odd_array)-1]\n    \nprint(get_Number(10,3))\nprint(get_Number(10,7))\nprint(get_Number(7,4)) ",
        "generated_testcode": "assert get_Number([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    factorial = 1\n    for i in range(1, n + 1): \n        factorial *= i \n    while (factorial > 0): \n        count += 1\n        factorial //= 10\n    return count \n\n# test the function with sample inputs\nn = 5\nprint(find_Digits(n)) ",
        "generated_testcode": "assert find_Digits(0) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n\n    # Sort the arrival and departure time \n    arr.sort() \n    dep.sort() \n  \n    # Initialize the platform required \n    platform_required = 1\n  \n    # Initialize the pointer for arrival and departure \n    i = 1\n    j = 0\n    curr_platform_req = 1\n    max_platform_req = 1\n  \n    # Traverse the arrival and departure array \n    while i < n and j < n: \n        # If the next arrival is less than or equal to the departure, \n        # increment i and increase the platform required \n        if arr[i] <= dep[j]: \n            curr_platform_req += 1\n            i += 1\n\n        # Else, increment the departure pointer and decrease the platform required \n        else: \n            curr_platform_req -= 1\n            j += 1\n\n        # Update the max platform required \n        max_platform_req = max(max_platform_req, curr_platform_req)\n  \n    # Return the minimum platform required \n    return max_platform_req ",
        "generated_testcode": "assert find_platform([\"9:00\", \"9:40\", \"9:50\", \"11:00\", \"15:00\", \"18:00\"], [\"9:10\", \"12:00\", \"11:20\", \"11:30\", \"12:10\", \"16:00\"], 5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(xs) * 2\n\n#test the function\na = (1,)\nprint(lcopy(a)) #[1,1]\n\n\ndef list_copy(xs):\n    return xs[:]\n\na = [1,2,3]\nprint(list_copy(a)) #[1,2,3]\n\n\n#write a python function to copy a list using list() method\ndef copy_list(xs):\n    return list(xs)\n#test the function\na = [1,2,3,4]\nprint(copy_list(a)) #[1,2,3,4]\n\n#write a python function to copy a list using slicing method\ndef slice_copy(xs):\n    return xs[:]\n#test the function\na = [1,2,3,4,5]\nprint(slice_copy(a)) #[1,2,3,4,5] ",
        "generated_testcode": "assert lcopy((1,) == [1]) == True\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    area = 0.5 * (base1+base2) * height\n    return area\n\n#Test the function with sample data\nprint(area_trapezium(10, 12, 7) == 42.0) #True\nprint(area_trapezium(5, 8, 15) == 30.0) #True\nprint(area_trapezium(2, 4, 3) == 7.0) #True ",
        "generated_testcode": "assert area_trapezium(4,6,5) == 7.5\n\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, N + 1): \n        if N % i == 0: \n            for j in range(2, i + 1): \n                if i % j == 0 and N / i == i / j: \n                    if is_prime(i): \n                        sum += i\n                        break\n    return sum\n\ndef is_prime(n): \n    if n <= 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\n\n# Driver code \nprint(Sum(12)) ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False ",
        "generated_testcode": "assert is_triangleexists(30, 60, 1120) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(2,N): \n        if(N%i==0): \n            Sum+=i \n    return Sum \n  \n# Driver function \nif __name__ == \"__main__\": \n    N = int(input(\"Enter a number: \")\n    Sum = 1 \n    print(\"Sum of inverse divisors is:\",Sum_of_Inverse_Divisors(N,Sum)) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12) == 28 \n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for num in num_list:\n        if num >= 0:\n            new_list.append(num)\n    return new_list\n    \n# Test the function with an example list\ntest_list = [3, -5, 8, -10, 12, -1, 0, 7, -3, 4]\nprint(remove_negs(test_list)) \n# Output: [3, 8, 12, 0, 7, 4] ",
        "generated_testcode": "assert remove_negs([1, -2, 3, -4, 5, -6, 7, -8, 9]) == [1, 3, 5, 7, 9]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n+1, 1):\n        if(n % i == 0 and i % 2 != 0):\n            sum = sum + i\n    return sum\n\n#testing the function\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of odd factors of\", n, \"is:\", sum_of_odd_Factors(n))\n ",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 11\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    heap = []\n    for element in rawheap:\n        heap.append(element)\n        current = len(heap) - 1\n        parent = (current - 1) // 2\n        while current > 0 and heap[current] < heap[parent]:\n            heap[current], heap[parent] = heap[parent], heap[current]\n            current = parent\n            parent = (current - 1) // 2\n    return heap\n\n\n# Test case\nprint(raw_heap([4, 10, 14, 8, 7, 2, 9, 3, 12, 16, 18, 222])) ",
        "generated_testcode": "assert raw_heap([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]) == [\"elderberry\", \"cherry\", \"grape\", \"banana\", \"apple\", \"date\", \"fig\"]\n\n\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x % 2 == 0: \n        return True\n    else: \n        return False\n\n#test the function\nprint(check_Even_Parity(10)) # True \nprint(check_Even_Parity(7)) # False ",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    count = 0\n    while i < n-1 :\n        if arr[i] == 0 :\n            j += 1\n        else :\n            if i != j :\n                arr[i], arr[j] = arr[j], arr[i]\n                count += 1\n            j += 1\n        i += 1\n    return count\n\n# Test the code\narr = [1, 0, 0, 1, 1, 1, 0]\nn = len(arr)\nprint(\"Minimum adjacent swaps required to sort binary array is : \", find_Min_Swaps(arr, n)) ",
        "generated_testcode": "assert find_Min_Swaps(arr,n) == min_swaps_required\n\n# Example:\narr = [0,1,0,1,1,0,1,0,1,1,0,1,1,0]\nn = len(arr)\nmin_swaps_required = 2\n# Explanation: \n# We can sort the array by making 2 adjacent swaps:\n# 0 1 0 1 1 0 1 1 0 1 1 0 1 -> 0 1 0 1 1 0 1 1 0 1 1 0 1\n#    ^           ^\n# The array can be sorted in 2 swaps. ",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(str, list1))\n\n# Example usage:\n# list1 = [1,2,3,4,5]\n# print(listify_list(list1)) # Output: ['1', '2', '3', '4', '5']\n\n\n# Write your function here\ndef listify_list(list1):\n    return list(map(str, list1))\n    # Converting each element in the list to string and then converting the map object to list\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nprint(listify_list(list1)) # Output: ['1', '2', '3', '4', '5'] ",
        "generated_testcode": "assert listify_list([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1 \n    return count ** 2 \n\n#test the function \ninput_list1 = [1, 2, [3, 4], [5, [6, 7], 8, 9], [[10, 11]]] \nprint(count_list(input_list1) ) # output: 3 \n\n\ninput_list2 = [1, 2, [3, 4, [5, [6, 7], 8, 9], [[10, 11]]] \nprint(count_list(input_list2) # output: 4 ",
        "generated_testcode": "assert count_list([[1,2,3], [4,5,6], [7,8,9,10]]) == 3\n\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sub_list = [[]]\n    for i in range(len(my_list)+1):\n        for j in range(len(my_list)-i+1):\n            sub_list += [my_list[j:j+i]]\n    return sub_list\n\n\n# Test the function with a sample list\nmy_list = [1,2,3,4]\nprint(sub_lists(my_list))  # Output: [[], [1], [2], [3], [4], [1,2], [3,4], [1,2,3], [1,2,3,4]] ",
        "generated_testcode": "assert sub_lists([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]]\n\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^[a-zA-Z0-9]*$')\n    if pattern.search(string):\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check_alphanumeric(\"Hello123\")) # True\nprint(check_alphanumeric(\"Hello!123\")) # False\nprint(check_alphanumeric(\"Hello world\")) # False\nprint(check_alphanumeric(\"Hello world123\")) # False\nprint(check_alphanumeric(\"Hello123world\")) # True\nprint(check_alphanumeric(\"1234\")) # True\nprint(check_alphanumeric(\"Hello#123\")) # False ",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(lambda x:sorted(x) == sorted(str), texts)\n    )\n\n# Test the function\ntexts = [\"listen\", \"silent\", \"enlist\", \"apple\", \"papel\", \"leppa\", \"ppae\"]\nstr = \"silent\"\nresult = anagram_lambda(texts, str)\nprint(result) # Output: ['silent', 'listen']\n\n\n# Explanation:\n# The lambda function takes two arguments x and str. It first sorts the characters of x and then sorts the characters of str. If both are equal, it means they are anagrams and the word is added to the result list.\n# The filter() function applies the lambda function to each element of the texts list and returns only those elements for which the lambda function returns True. ",
        "generated_testcode": "assert anagram_lambda(['arc','car','tab','bat','madam','mom','hello','listen'],'tab') == ['car']\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    #splitting the text into words\n    words = text.lower().split()\n    \n    #creating a dictionary to store the frequency of each word\n    word_freq = {}\n    \n    #iterating through each word and updating its frequency in the dictionary\n    for word in words:\n        if word in word_freq:\n            word_freq[word] += 1\n        else:\n            word_freq[word] = 1\n            \n    #creating a list of tuples (word,frequency)\n    freq_list = [(k,v) for k,v in word_freq.items()]\n    \n    #sorting the list in descending order of frequency\n    freq_list = sorted(freq_list, key = lambda x: x[1], reverse = True)\n    \n    #returning the first n words as a list\n    return [word[0] for word in freq_list[:n]] ",
        "generated_testcode": "assert n_common_words(\"This is a test. This is only a test. This is something else.\", 1) == [\"this\"]\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort()\n    max_length = 1\n    for i in range(1,n):\n        if arr[i] - arr[i-1] == 1:\n            max_length += 1\n        elif arr[i] - arr[i-1] == 0:\n            continue\n        else:\n            max_length = 1\n    return max_length\n\n# Driver Code \narr = [1,9,3,1,5,6,7,4,8,10,2,3,5,6,7]\nn = len(arr)\nprint(\"Length of Longest consecutive subsequence is\", find_longest_conseq_subseq(arr, n)) ",
        "generated_testcode": "assert find_longest_conseq_subseq(arr=[1, 9, 3, 10, 4, 20, 2, 1, 2, 3, 7, 5, 11, 6], n=9) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(lambda x: x == x[::-1], texts))\n\n# Example usage:\ntexts = [\"abba\", \"racecar\", \"apple\", \"hello\", \"pop\", \"python\", \"deified\", \"civic\", \"noon\"]\nresult = palindrome_lambda(texts)\nprint(result) # Output: ['abba', 'racecar', 'pop', 'python', 'civic', 'noon'] ",
        "generated_testcode": "assert palindrome_lambda(['racecar', 'python', 'deified', 'civic', 'apple', 'radar', 'rotor', 'python', 'madam']) == ['racecar', 'deified', 'civic', 'rotor']\n\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: n*x,nums)*n)\n\n#Example:\n# nums = [1,2,3,4,5]\n# ntimes_list(nums, 3)\n# Output: [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]\n\n\ndef ntimes_list(nums,n):\n    return nums*n\n#Example:\n# nums = [1,2,3,4,5]\n# ntimes_list(nums, 3)\n# Output: [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5] ",
        "generated_testcode": "assert ntimes_list([1,2,3],3) == [1,2,3,1,2,3,1,2,3]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if monthname2 == \"January\" or monthname2 == \"March\" or monthname2 == \"May\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"October\" or monthname2 == \"December\":\n        print(\"31 days\")\n    elif monthname2 == \"April\" or monthname2 == \"June\" or monthname2 == \"September\" or monthname2 == \"November\":\n        print(\"30 days\")\n    elif monthname2 == \"February\":\n        print(\"28 or 29 days depending on the year\")\n    else:\n        print(\"31 days\")\n    return\nmonthname = input(\"Enter the name of the month: \")\ncheck_monthnumb(monthname) ",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count_odd = 0\n    for i in range(n):\n        if arr[i]%2!=0:\n            count_odd += 1\n    if count_odd == 0:\n        return 0\n    if count_odd%2 == 0:\n        return 0\n    else:\n        return 1\nn = int(input(\"Enter the number of elements in the array: \"))\narr = []\nfor i in range(n):\n    element = int(input(\"Enter the element: \" )\n    arr.append(element)\nprint(\"Minimum number to be added to make the sum of array even: \", min_Num(arr, n)) ",
        "generated_testcode": "assert min_Num([1, 2, 3, 4, 5, 6]) == 2\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Removing all white spaces from right and left of the string \n    a = a.strip() \n    # Splitting the string by space \n    b = a.split() \n    # Getting the last word from the list of words \n    c = b[-1] \n    # Finding the length of the last word \n    length = len(c) \n    return length \n\n# Testing the function \nstring = \"Hello World\"\nprint(length_Of_Last_Word(string)) # Output: 5 ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = []\n    for i in list1:\n        if len(i) >= leftrange and len(i) <= rigthrange:\n            res.append(i)\n    return res\n\n\n# Example usage:\nlist1 = [[1,2,3], [4,5,6,7,8], [9,10], [11,12,13,14,15], [16,17,18]]\nprint(remove_list_range(list1, 2, 4))  # Output: [[4, 5, 6, 7, 8], [11, 12, 13, 14, 15]]\n\nlist2 = [[1,2,3], [4,5,6], [7], [8], [9,10,11,12,13,14]]\nprint(remove_list_range(list2, 2, 4))  # Output: [[4, 5, 6], [9, 10, 11, 12, 13, 14]] ",
        "generated_testcode": "assert remove_list_range(list1, 2, 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the sum of positive numbers in a list\n    \"\"\"\n    # use lambda function to filter positive numbers and then use sum function to add them up\n    return sum(filter(lambda x: x > 0, nums))\n    \n# test the function\nnums = [1, -2, 3, 4, -5, 6, -7, 8, -9, 10]\nprint(sum_positivenum(nums)) # Output: 19\n\n\n# test the function with an empty list\nnums = []\nprint(sum_positivenum(nums)) # Output: 0\n\n\n# test the function with a list containing only negative numbers\nnums = [-1, -2, -3, -4, -5]\nprint(sum_positivenum(nums)) # Output: 0 ",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, -6, 7, 8, -9, 10]) == 25\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(string1) != len(string2): \n        return False\n    s1 = string1 + string1 \n    if string2 in s1: \n        return True\n    else: \n        return False\n    \n# testing the function with examples \nstring1 = \"geeks\"\nstring2 = \"eksge\"\nif are_Rotations(string1, string2): \n    print(\"Yes\")\nelse: \n    print(\"No\") \n\n\nstring1 = \"potter\"\nstring2 = \"tterpo\"\nif are_Rotations(string1, string2): \n    print(\"Yes\")\nelse: \n    print(\"No\") \n\n\nstring1 = \"palindrome\"\nstring2 = \"midrome\"\nif are_Rotations(string1, string2): \n    print(\"Yes\")\nelse: \n    print(\"No\") ",
        "generated_testcode": "assert are_Rotations(\"abcde\", \"cdeab\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n#testing\nlist1 = [1, [2, 3], 4]\nlist2 = [1, [2, 3, 4, [5, 6], 7] ]\nlist3 = [1, [2, 3, 4, [5, 6, 7, 8], 9] ]\nprint(check_subset(list1,list2)) #True\nprint(check_subset(list1,list3)) #False\n\n\n#can also use set.issubset() method to check subset of two sets but not for nested lists. ",
        "generated_testcode": "assert check_subset([[1,2],[3,4,5])([1,2,3,4,5]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function\nprint(fibonacci(0)) # 0\nprint(fibonacci(1)) # 1\nprint(fibonacci(2)) # 1\nprint(fibonacci(3)) # 2\nprint(fibonacci(4)) # 3\nprint(fibonacci(5)) # 5\nprint(fibonacci(6)) # 8\nprint(fibonacci(7)) # 13\nprint(fibonacci(8)) # 21\nprint(fibonacci(9)) # 34 ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if str1 in str2*2:\n        return True\n    else:\n        return False\n\n#Test the function with sample inputs\nprint(check_Concat(\"hello\",\"hleloworldello\")) #True\nprint(check_Concat(\"hello\",\"world\")) #False\nprint(check_Concat(\"hello\",\"hlelohello\")) #False\nprint(check_Concat(\"hello\",\"hellohello\")) #True\nprint(check_Concat(\"hello\",\"hlello\")) #False\nprint(check_Concat(\"hello\",\"hlellohello\")) #True\nprint(check_Concat(\"hello\",\"helloworld\")) #False ",
        "generated_testcode": "assert (check_Concat(\"hello\",\"he\") == False)\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            min_diff = min(min_diff, diff)\n    return min_diff\n\n#Example usage:\ntest_list = ((1, 2), (4, 5), (7, 9), (12, 20))\nprint(min_difference(test_list)) # Output: 5 ",
        "generated_testcode": "assert min_difference([(1, 2), (2, 3), (4, 5), (6, 7), (8, 9)] ) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two positive integers as input and returns their L.C.M.\n    L.C.M. is the smallest number which is divisible by both x and y.\n    \"\"\"\n    # Find the maximum number among the two\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    \n    # Iterate from the greater number till we find a number that is divisible by both x and y\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n    \n    return lcm\n\n# Test the function with some examples\nprint(lcm(12, 14)) # Output: 24\nprint(lcm(17, 23)) # Output: 757\nprint(lcm(8, 12)) # Output: 24\nprint(lcm(15, 20)) # Output: 60 ",
        "generated_testcode": "assert lcm(12, 15) == 60\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    str = \"\".join(sorted(str)\n    return str\n\n#Example:\n#Input: \"Hello World\"\n#Output: \" dHeloWollr\"\n\n#Note: Return the sorted string as a new string, not in place. ",
        "generated_testcode": "assert sort_String(\"hello\") == \"ehllo\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n# Test the function with a tuple of size 4 and K=4\nprint(check_tuples((1, 2, 3, 4, 5), 4)) # True\n# Test the function with a tuple of size 3 and K=4\nprint(check_tuples((1, 2, 3), 4)) # False ",
        "generated_testcode": "assert check_tuples((1, 2, 3), 3) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"aab\")) # True\nprint(text_match(\"acb\")) # False\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abcd\")) # False\nprint(text_match(\"aabb\")) # True\nprint(text_match(\"abcdb\")) # True ",
        "generated_testcode": "assert text_match(\"a string with ab\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    d = (b*b) - (4*a*c)\n    if d < 0:\n        return 0\n    elif d == 0:\n        return 1\n    else:\n        return 2\n\na = int(input(\"Enter coefficient of x^2: \"))\nb = int(input(\"Enter coefficient of x: \"))\nc = int(input(\"Enter constant term: \"))\nif Check_Solution(a,b,c) == 0:\n    print(\"No Real Solution\")\nelif Check_Solution(a,b,c) == 1:\n    print(\"One Solution\")\nelse:\n    print(\"Two solutions\") ",
        "generated_testcode": "assert (Check_Solution(1,2,3) == 1)\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum, odd_sum\n\n\n# Test the function with sample input\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_sum, odd_sum = sum_even_odd(list1)\nprint(\"Even sum: \", even_sum)\nprint(\"Odd sum: \", odd_sum) ",
        "generated_testcode": "assert sum_even_odd([1,2,3,4,5,6,7,8,9]) == (12, 25)\n\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    p = 2*(b+h)\n    return p\n\n#or\n#def parallelogram_perimeter(b,h):\n#    return 2*(b+h)\n\n#Test the function with some examples\nprint(parallelogram_perimeter(10,20))\nprint(parallelogram_perimeter(6.5, 4.5)\nprint(parallelogram_perimeter(8,12.25)\nprint(parallelogram_perimeter(12,2.5) ",
        "generated_testcode": "assert parallelogram_perimeter(6, 7) == 20\n\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(lambda x:x%m==0 or x%n==0,nums))\n\n#Test the function\nnums = [45,67,12,89,120,15,21,100,1,35]\nm = 15\nn = 20\nprint(\"Original list of numbers:\",nums)\nprint(\"Numbers divisible by\",m,\"or\",n,\"are:\",div_of_nums(nums,m,n)) ",
        "generated_testcode": "assert div_of_nums(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],m=3,n=5) == [15,30]\n\n# The output should be [15,30] because 15 and 30 are the only numbers in the list that are divisible by both 3 and 5. ",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if l<=n<=r:\n        return True\n    else:\n        return False\n\n#Example\n#n=10,l=2,r=5\n#Output:False\nprint(all_Bits_Set_In_The_Given_Range(10,2,5)) ",
        "generated_testcode": "assert (all_Bits_Set_In_The_Given_Range(12,2,5)) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dict1=dict()\n    dict2=dict()\n    if len(str1)!=len(str2):\n        return False\n    for i in range(len(str1)):\n        if str1[i] not in dict1:\n            dict1[str1[i]]=str2[i]\n        else:\n            if dict1[str1[i]]!=str2[i]:\n                return False\n        if str2[i] not in dict2:\n            dict2[str2[i]]=str1[i]\n        else:\n            if dict2[str2[i]]!=str1[i]:\n                return False\n    return True\n# Test the function with examples\nprint(is_Isomorphic(\"abc\",\"def\"))   # True\nprint(is_Isomorphic(\"foo\",\"bar\"))   # True\nprint(is_Isomorphic(\"abc\",\"dee\"))   # False\nprint(is_Isomorphic(\"abc\",\"dcf\"))   # False ",
        "generated_testcode": "assert (is_Isomorphic(\"egg\",\"add\")) == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param numbers: A list of numbers\n    :return: The average of the numbers in the list\n    \"\"\"\n    if len(numbers) == 0:\n        return 0\n    else:\n        return sum(numbers) / len(numbers)\n\n\n# Test the function with some examples:\nprint(sum_num([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Should print 5\nprint(sum_num([1])) # Should print 1\nprint(sum_num([])) # Should print 0\nprint(sum_num([0, -1, 5, 2, -3, 8])) # Should print 2\nprint(sum_num([2, 2, 2, 2, 2, 2, 2])) # Should print 2 ",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return n & 1\n\n#Testing the function with sample input\nprint(is_odd(7)) #Output : 1\nprint(is_odd(10)) #Output : 0\nprint(is_odd(0)) #Output : 0\n\n\n#Explanation : \n#The bitwise AND operator (&) is used to compare the binary representation of the given number with 1. \n#If the given number is odd, its binary representation will have 1 in the least significant bit.\n#So, when we perform bitwise AND operation with 1, the result will be 1, otherwise it will be 0.\n#For example : \n#7 in binary form : 1111\n#10 in binary form : 1010\n#0 in binary form : 0\n#When 7 is ANDed with 1, the result is 1, so the function returns 1.\n#When 10 is ANDed with 1, the result is 0, so the function returns 0.\n#When 0 is ANDed with 1, the result is 0, so the function returns 0. ",
        "generated_testcode": "assert is_odd(5) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            res.append(substract_elements(test_tup1[i], test_tup2[i]))\n        else:\n            res.append(test_tup1[i] - test_tup2[i])\n    return tuple(res)\n\n#Test the function with sample tuples\ntest_tup1 = ((1,2,3),(4,5,6),(7,8,9))\ntest_tup2 = ((3,2,1),(6,5,4) ,(9,8,7))\nprint(substract_elements(test_tup1, test_tup2))  # Output: ((-2, 0, 2), (1, 0, 2), (0, 0, 0)) ",
        "generated_testcode": "assert substract_elements(((1, 2, 3), (4, 5, 6)) == ((-3, -3, -3))\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    reversed_lists = []\n    for lst in lists:\n        reversed_lists.append(lst[::-1])\n    return reversed_lists\n\n# Test the function with an example\nlists = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\nprint(reverse_list_lists(lists)) # Output: [[3, 2, 1], [7, 6, 5, 4], [8, 9]] ",
        "generated_testcode": "assert reverse_list_lists([]), []\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    extra = -1\n    while i < n : \n        if arr1[i] != arr2[j]: \n            extra = arr1[i] \n            break\n        i += 1\n        j += 1\n    return extra ",
        "generated_testcode": "assert find_Extra([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7], 6) == 6\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    a = str(A)\n    b = str(B)\n    if len(a) == len(b):\n        return True\n    else:\n        return False\n\n#Example Usage:\n#if same_Length(123,45):\n#   print(\"Both numbers have same number of digits\")\n#else:\n#   print(\"Both numbers have different number of digits\")\n\n#if same_Length(1234,45):\n#   print(\"Both numbers have same number of digits\")\n#else:\n#   print(\"Both numbers have different number of digits\") ",
        "generated_testcode": "assert same_Length(1234,5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return \" \".join(text.split())\n\n# Testing the function with some examples\nprint(remove_spaces(\"Python    is    fun\"))  # Output: \"Python is fun\"\nprint(remove_spaces(\"  Coding is   fun \"))  # Output: \"Coding is fun\"\nprint(remove_spaces(\"  HTML CSS  JavaScript \"))  # Output: \"HTML CSS JavaScript\" ",
        "generated_testcode": "assert remove_spaces(\"Hello  world\") == \"Hello world\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[-1] for sublist in lst] \n\n#example \n# Input:[[1,2,3,4],[5,6,7,8],[9,10,11,12]] \n# Output:[4,8,12] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == [3, 6, 9]\n\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    try:\n        if type(test_str) != str:\n            raise ValueError(\"Invalid input. Input should be a string\")\n        if not test_str.count(\",\") == 1:\n            raise ValueError(\"Invalid input. Input should have only one comma\")\n        return tuple(float(x) for x in test_str.split(\",\"))\n    except ValueError as ve:\n        print(ve)\n\n# Test case\nprint(float_to_tuple(\"2.3, 4.5\"))  # Output: (2.3, 4.5)\nprint(float_to_tuple(\"3.5, 4\"))  # Output: (3.5, 4.0)\nprint(float_to_tuple(\"2, 4.5\"))  # Output: ValueError: Invalid input. Input should contain float values\nprint(float_to_tuple(\"2.3, 4.5, 6.7\"))  # Output: ValueError: Invalid input. Input should have only one comma ",
        "generated_testcode": "assert float_to_tuple(\"1.23\") == (1, 23)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0]\n    elif len(A) == 2:\n        return max(A)\n    else:\n        max1 = max(A[0], A[1])\n        max2 = A[0]\n        for i in range(2, len(A)):\n            temp = max1\n            max1 = max(max1, max2 + A[i])\n            max2 = temp\n        return max(max1, max2)\n\n\n# test the function\nA = [2, 4, 6, 2, 5, 2, 1, 2, 6, 4]\nprint(max_sum_subseq(A))  # Output: 13\n\nA = [1, 2, 3, 2, 4, 5, 6, 7, 8, 9]\nprint(max_sum_subseq(A))  # Output: 25\nA = [5, 5, 5, 10, 4, 100, 10, 5]\nprint(max_sum_subseq(A))  # Output: 1105\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(max_sum_subseq(A))  # Output:",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return n[-1]\n\ndef sort_last(tuples):\n    \"\"\"\n    Input: a list of non-empty tuples\n    Output: the same list of tuples sorted in increasing order based on their last element\n    \"\"\"\n    return sorted(tuples, key=last)\n\n\n# Example usage:\ntuples = [(1, 7), (3, 2), (9, 0), (4, 10), (9, 5)]\nprint(sort_last(tuples)) # Output: [(9, 0), (3, 2), (1, 7), (9, 5), (4, 10)] ",
        "generated_testcode": "assert last([(1, 3, 2), (3, 1, 4), (2, 4, 1)] ) == [(2, 4, 1), (1, 3, 2), (3, 1, 4)]\n\n\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Converting both sentence and word to lowercase \n    sentence = sentence.lower() \n    word = word.lower() \n    # Splitting the sentence into words \n    words = sentence.split() \n    if word in words: \n        return True \n    else: \n        return False ",
        "generated_testcode": "assert is_Word_Present(\"I am a Python Programmer\",\"Python\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two arguments:\n    1. List of integers (numbers)\n    2. An integer (n)\n    It returns a list containing n consecutive elements of the input list (numbers)\n    \"\"\"\n    result = []\n    for i in range(n):\n        if i < len(numbers):\n            result.append(numbers[i])\n    return result\n\n\n# Test the function with sample inputs\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 3)) # [1, 2, 3]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 6)) # [1, 2, 3, 4, 5, 6, 7, 8]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 1)) # [1]\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 0)) # []\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 10)) # [1, 2, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    arr.sort() \n    for i in range(1,n-1): \n        if arr[i]!=arr[0] and arr[i]!=arr[n-1]: \n            return \"Not Possible\"\n    return \"Possible\"\n  \n#Test the function\narr=[2,1,3,1,2]\nn=len(arr)\nprint(check(arr,n)\n\narr=[1,2,3,4,5]\nn=len(arr)\nprint(check(arr,n)\n\narr=[1,1,2,3,2]\nn=len(arr)\nprint(check(arr,n) ",
        "generated_testcode": "assert (check([1, 3, 2, 5, 4, 6, 7, 9, 8, 10, 11]) == True)\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    start_num = \"123\"\n    if string.startswith(start_num):\n        return True\n    else:\n        return False\n\nprint(match_num(\"123hello\"))\nprint(match_num(\"456world\"))\n\n\n# Write a function to check if a string ends with a specific number\ndef match_num(string):\n    end_num = \"456\"\n    if string.endswith(end_num):\n        return True\n    else:\n        return False\nprint(match_num(\"abc456\"))\nprint(match_num(\"def789\")) ",
        "generated_testcode": "assert match_num(\"123456\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    for i in range(n, factorial(n) * n, n):\n        if is_divisible(i, n):\n            return i\n\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef is_divisible(num, n):\n    for i in range(2, n + 1):\n        if num % i != 0:\n            return False\n    return True\n\n# Example usage:\nprint(smallest_multiple(2))  # Output: 2\nprint(smallest_multiple(3))  # Output: 6\nprint(smallest_multiple(4))  # Output: 12\nprint(smallest_multiple(5))  # Output: 60\nprint(smallest_multiple(6))  # Output: 60\nprint(smallest_multiple(7))  # Output: 420\nprint(smallest_multiple(8))  # Output: 8640\nprint(smallest_multiple(9))  # Output: 8640\nprint(smallest_multiple(10)) # Output: 2520\nprint(smallest_multiple(11)) # Output: 2520\nprint(smallest_multiple(12)) # Output: 51040\nprint(smallest_multiple(13)) # Output: 51040\nprint(smallest_multiple(1",
        "generated_testcode": "assert smallest_multiple(1) == 1\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for key in d2:\n        if key in d1:\n            d1[key] += d2[key]\n        else:\n            d1[key] = d2[key]\n    return d1\n\n# Example usage:\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'b':4,'c':5,'d':6}\nprint(add_dict(d1,d2)) # Output: {'a': 1, 'b': 6, 'c': 8, 'd': 6} ",
        "generated_testcode": "assert add_dict({'a':1, 'b':2, 'c':3}, {'b':4, 'c':5, 'd':6}) == {'a':1, 'b':6, 'c':8, 'd':6}\n\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "     \n    # Count to store the result  \n    count = 0 \n      \n    # Loop through all the numbers from 1 to n  \n    for i in range(1, n + 1) : \n          \n        # Convert the number to binary and count the \n        # number of unset bits in it  \n        bin_rep = bin(i)[2:] \n        for bit in bin_rep : \n            if bit == '0' : \n                count += 1\n      \n    # Return the count of unset bits in the range \n    return count  \n      \n# Test the function with an example \nn = 10\nprint(count_Unset_Bits(n)) ",
        "generated_testcode": "assert count_Unset_Bits(10) == 8\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(even_num(6)) # True\nprint(even_num(5)) # False\n\n\n# Write a function to calculate the area of a rectangle\ndef area(width, height):\n    return width * height\n\n# Test the function\nprint(area(5, 10)) # 50\nprint(area(10, 20)) # 200\n\n# Write a function to calculate the circumference of a circle\nimport math\ndef circumference(radius):\n    return 2 * math.pi * radius\n\n# Test the function\nprint(circumference(5)) # 31.41592653589793238\n\n# Write a function to calculate the surface area of a sphere\ndef surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\n# Test the function\nprint(surface_area(5)) # 314.15926535897932384\n\n# Write a function to calculate the volume of a sphere\ndef volume(radius):\n    return (4/3) * math.pi * radius ** 3\n\n# Test the function\nprint(volume(5)) # 523.5987775559829374475\n\n# Write a function to calculate the mean of a list",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    factorial = 1 \n    for i in range(start, end + 1, 1): \n        factorial = factorial * i \n    return factorial \n  \ndef binomialCoefficient(n, k): \n    return factorial(n) // (factorial(k) * factorial(n - k)) \n  \ndef sumOfSquares(n): \n    sum = 0\n    for i in range(0, n+1): \n        for j in range(0, i+1): \n            sum += binomialCoefficient(n, i) ** 2 \n    return sum \n  \n# Driver Code \nn = 5\nprint(sumOfSquares(n)) ",
        "generated_testcode": "assert factorial(0, 5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = r\"(\\d{4}/\\d{2}/\\d{2})\"\n    result = re.search(pattern, url)\n    if result:\n        date = result.group()\n        year = date[:4]\n        month = date[5:7]\n        day = date[8:]\n        return year, month, day\n    return None, None, None\n\n# Test case\nprint(extract_date(\"https://www.rithmschool.com/blog/7-12-2019/welcome\")) # Should print (\"2019\", \"07\", \"12\")\nprint(extract_date(\"https://www.rithmschool.com/blog/7-31-2021/new-course\")) # Should print (\"2021\", \"07\", \"31\")\nprint(extract_date(\"https://www.rithmschool.com/blog/12-31/post-name\")) # Should print (None, None, None) ",
        "generated_testcode": "assert extract_date(\"https://www.rithmschool.com/blog/category/monthly-challenges/august-2021/\") == (\"august\", \"2021\")\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 1\n    num = 1\n    count = 0\n    while count < n:\n        str_num = str(num)\n        if '4' in str_num or '7' in str_num:\n            continue\n        else:\n            print(num)\n            count += 1\n        i += 1\n        num = i * 9\n\nlucky_num(5) ",
        "generated_testcode": "assert lucky_num(1) == [1]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    low = 0 \n    high = n-1\n    while low <= high: \n        mid = (low + high) // 2\n        if arr[mid] == mid: \n            return arr[mid] \n        elif arr[mid] < mid: \n            low = mid + 1\n        else: \n            high = mid - 1\n    return -1\n\n# test the code \narr = [-10, -5, 0, 2, 3, 4, 5, 7, 9] \nn = len(arr) \nprint(find_fixed_point(arr, n)) # Output: 3\n\narr = [0, 2, 3, 4, 5, 7, 8] \nn = len(arr) \nprint(find_fixed_point(arr, n)) # Output: 0\narr = [5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_fixed_point(arr, n)) # Output: -1\narr = [-10, -5, 2, 3, 4, 6, 7, 8, 9] \nn = len(arr) \nprint(find_fixed_point(arr, n)) # Output: -1 ",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 4, 5, 3]) == 3\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # convert num to string and reverse it\n    reverse_num = str(num)[::-1]\n    \n    # check if the reverse is the same as the original\n    if reverse_num == str(num):\n        # if it is the same, then we need to find the previous palindrome\n        # convert num to a list of its digits\n        num_list = list(str(num))\n        \n        # loop through the digits from the end to the beginning\n        for i in range(len(num_list)-1, -1, -1):\n            # if the current digit is not 0, decrement it and exit the loop\n            if num_list[i] != '0':\n                num_list[i] = str(int(num_list[i])-1)\n                break\n            # if the current digit is 0, set it to 9 and continue to the next digit\n            else:\n                num_list[i] = '9'\n        \n        # if the first digit is 0, remove it\n        if num_list[0] == '0':\n            num_list = num_list[1:]\n        \n        # join the list of digits back into a string and convert it back to an integer\n        prev_palindrome = int(''.join(num_list))\n        \n        # reverse the list to get the palindrome\n        prev_palindrome = int(prev_palindrome[::-1])\n        \n        # return the previous palindrome\n        return prev_",
        "generated_testcode": "assert previous_palindrome(12321) == 12121\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function checks if a date is valid or not.\n    Returns True if the date is valid, False otherwise.\n    \"\"\"\n    if m < 1 or m > 12:\n        return False\n    elif y < 1:\n        return False\n    elif d < 1:\n        return False\n    elif m in [1, 3, 5, 7, 8, 10, 12]:\n        return d <= 31\n    elif m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return d <= 29\n        else:\n            return d <= 28\n    elif m in [4, 6, 9, 11]:\n        return d <= 30\n    else:\n        return d <= 31\n\n# Example usage:\nprint(check_date(2, 29, 2020))  # True\nprint(check_date(2, 29, 2021))  # False\nprint(check_date(13, 25, 20221))  # False\nprint(check_date(11, 31, 2021))  # True ",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import heapq\n    if len(nums) < 3:\n        return None\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > 3:\n            heapq.heappop(heap)\n    return max(nums) * max(heap) if len(nums) == 3 else heap[0] * heap[1] * heap[2] ",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1 \n    if k > n - k: \n        k = n - k \n    for i in range(0, k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res \ndef catalan(n): \n    c = binomial_coeff(2*n, n) \n    return c // (n + 1) \n\n# Driver program to test the above function \nn = 5\nprint(\"The \", n,\"th catalan number is \", catalan(n)) ",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a string as input and returns True if the string ends with a number, False otherwise.\n    \"\"\"\n    if string[-1].isdigit():\n        return True\n    else:\n        return False\n\n# Test cases\nprint(end_num(\"hello1\")) # True\nprint(end_num(\"hello world1\")) # True\nprint(end_num(\"hello world\")) # False\nprint(end_num(\"1234\")) # True\nprint(end_num(\"12.34\")) # False\nprint(end_num(\"hello world 123\")) # True ",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) % 2 == 1:\n        return False\n    else:\n        for i in range(0, len(s)-1, 2):\n            if s[i] == s[i+1]:\n                return False\n        return True\n# Test the function with an example\ns = 'abcdeafgabcdeaf'\nif is_Two_Alter(s):\n    print(s, 'is made up of two alternating characters')\nelse:\n    print(s, 'is not made up of two alternating characters') ",
        "generated_testcode": "assert is_Two_Alter(\"abab\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    pos_nums = []\n    neg_nums = []\n    for num in array_nums:\n        if num >= 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n    return list(map(lambda x: x**2, pos_nums + neg_nums) + list(map(lambda x: -x, neg_nums))\n\n# Test the function with an example array\narr = [1, -2, 3, -4, 5, 6, -7, 8, -9, 10]\nprint(rearrange_numbs(arr)) ",
        "generated_testcode": "assert rearrange_numbs(array_nums=[-1, 2, -3, 4, 5, 6, -7, 8, 9, -10]) == [9, -1, 4, -3, 5, 2, -7, 8, -10]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = arr_size \n    found = False\n    # create a dictionary to store the sum and the count of the sum found till now\n    sum_dict = {}\n    for i in range(n): \n        for j in range(i+1, n): \n            s = A[i] + A[j] \n            if s not in sum_dict: \n                sum_dict[s] = (i, j) \n            else: \n                found = True\n                break\n    if found: \n        return True \n    else: \n        for i in range(n): \n            if (sum - A[i]) in sum_dict: \n                return True\n    return False \n\n\n# main code\nA = [1, 4, 45, 12, 7, 3, 2, 10, 4] \narr_size = len(A) \nsum = 17 \nif find_triplet_array(A, arr_size, sum): \n    print(\"Triplet found\") \nelse: \n    print(\"Triplet not found\") ",
        "generated_testcode": "assert find_triplet_array([1, 2, 4, 3, 6, 5, 7], 5) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = 0\n    while i < len(text) - 1:\n        if text[i].isupper() and text[i + 1].islower():\n            return True\n        i += 1\n    return False\n\n\nprint(text_uppercase_lowercase(\"Python\"))  # True\nprint(text_uppercase_lowercase(\"JavaScript\"))  # False\nprint(text_uppercase_lowercase(\"JavaisAwesome\"))  # True\nprint(text_uppercase_lowercase(\"Perl\"))  # False\nprint(text_uppercase_lowercase(\"T3st\"))  # False\nprint(text_uppercase_lowercase(\"T3st is good\"))  # False\nprint(text_uppercase_lowercase(\"T3st Is good\"))  # True ",
        "generated_testcode": "assert text_uppercase_lowercase(\"Python isAwesome\") == [\"Python\"]\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [[0 for i in range(n+1)] for j in range(m+1)] \n  \n    for i in range(m+1): \n        dp[i][0] = 1\n  \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = dp[i][j-1] \n            if j-S[i-1] >= 0: \n                dp[i][j] += dp[i][j-S[i-1]] \n  \n    return dp[m][n] \n\n# Example usage:\nS = [1, 2, 3] \nm = len(S) \nn = 4\nprint(coin_change(S, m, n)) # Output: 4 (1,1,1,1,1 or 1,2,1 or 2,2 or 1,1,2) ",
        "generated_testcode": "assert (coin_change([1, 2, 5], 5, 11) == 3)\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 1\n    for item in items:\n        total *= item\n    return total\n\n# Test the function with a sample list\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(multiply_list(my_list)) # Output: 3628880 ",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    # loop through the list\n    for i in test_list:\n        # check if all values are none\n        if all(j is None for j in i):\n            # if yes, remove it\n            test_list.remove(i)\n    return test_list\n\n# test the function\ntest_list = [(1,2,3), (None, None, None), (4, None, 6), (None, None, None), (7,8,9)]\nprint(remove_tuple(test_list)) ",
        "generated_testcode": "assert remove_tuple([(1, 2, 3, 4, None, None, 5, 6, None)]) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\n#Test the function with example\ntest_tup = (1,2,3,4,5,6,7,8,9,10)\nN = 2\nprint(chunk_tuples(test_tup, N)) # Output: [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n\nN = 3\nprint(chunk_tuples(test_tup, N)) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10,)]\nN = 4\nprint(chunk_tuples(test_tup, N)) # Output: [(1, 2, 3, 4, 5), (6, 7, 8, 9), (10,)] ",
        "generated_testcode": "assert chunk_tuples(('abcd', 2) == [('a', 'b'), ('c', 'd')]\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n\n# Example usage:\narr = [-10, -10, 5, 2]\nprint(max_product(arr)) # Output: 500 ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7]) == (6, 7)\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n > m:\n        X, Y = Y, X\n        m, n = n, m\n    lcs = [[0] * (n + 1) for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                lcs[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                lcs[i][j] = lcs[i - 1][j - 1] + 1\n            else:\n                lcs[i][j] = max(lcs[i - 1][j], lcs[i][j - 1])\n    return m + n - lcs[m][n]\n\n\n\ndef shortest_common_supersequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    lcs = super_seq(str1, str2, m, n)\n    return m + n - lcs\n\n\n\n# Test\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"\nprint(\"Length of the shortest supersequence is \", shortest_common_supersequence(str1, str2))\n",
        "generated_testcode": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 5) == 7\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n#Test the function with different values of x and y\nprint(max_of_two( 2, 4)) # Output: 4\nprint(max_of_two( 9, 7)) # Output: 9\nprint(max_of_two( -2, -7)) # Output: -2\nprint(max_of_two( 0, -5)) # Output: 0\nprint(max_of_two( 8, 8)) # Output: 8 ",
        "generated_testcode": "assert max_of_two( 10, 20 ) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = 1\n    for i in nums:\n        result *= i\n    return result\n\n#test the function\nprint(mutiple_tuple((2,3,4,5)) # output: 30 ",
        "generated_testcode": "assert mutiple_tuple((1, 2, 3, 4, 5) == 120\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    if k > n - k: \n        k = n - k \n    for i in range(k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res \n\ndef find_rencontres_number(n): \n    return binomial_coeffi(2*n, n) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "\t    self.data = data \n\t    self.left = None\n\t    self.right = None\n\t    \ndef height(root):\n    if root is None:\n        return 0\n    else:\n        left_height = height(root.left) \n        right_height = height(root.right) \n        return 1 + max(left_height, right_height) ",
        "generated_testcode": "assert calculate_height(Node(5) == 1\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dd, mm, yyyy = dt.split('-')\n    return f'{dd}-{mm}-{yyyy}'\n\n# Test\nprint(change_date_format('2021-08-15')) ",
        "generated_testcode": "assert change_date_format(\"2021-07-15\") == \"15-07-2021\"\n\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in tuplex:\n        if i == value:\n            count += 1\n    return count\n\n# Example usage:\ntuplex = (1,2,3,4,5,3,6,7,3,8,3,9,3,10)\nvalue = 3\nprint(count_tuplex(tuplex,value)) # Output: 3 ",
        "generated_testcode": "assert count_tuplex((\"abcaaabbbac\", \"a\") == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r\"a[b]*\")\n    result = pattern.search(text)\n    return result != None\n\n# Example usage:\nprint(text_match(\"acb\")) # True\nprint(text_match(\"abbbbc\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"ab\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"cdbc\")) # False ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number + 1):\n        sum += i ** 3\n    return sum\n\n\n# Test the function\nprint(sum_series(5)) # Output: 2255\nprint(sum_series(10)) # Output: 3850\nprint(sum_series(100)) # Output: 2440275000\n\nprint(sum_series(5000)) # Output: 12500000000000000",
        "generated_testcode": "assert sum_series(1) == 1\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(set(l))\n# Example:\n# Input: \n# l = ['hello', 'world', 'hello', 'world', 'abcd', 'hello', 'python', 'python']\n# Output: \n# ['abcd', 'hello', 'world', 'python']\n# Explanation: \n# The function should return a list of the unique words in the input list. ",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"apple\", \"banana\", \"orange\", \"apple\"]) == [\"apple\", \"banana\", \"orange\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n\n# Testing the function\nprint(camel_to_snake(\"CamelCaseString\")) # Output: 'camel_case_string'\nprint(camel_to_snake(\"camelCaseString\")) # Output: 'camel_case_string'\nprint(camel_to_snake(\"camelCase\")) # Output: 'camel_case'\nprint(camel_to_snake(\"Camelcase\")) # Output: 'camelcase'\nprint(camel_to_snake(\"CAMELCase\")) # Output: 'c_a_m_e_l_case' ",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    dp = [[0 for x in range(n+1)] for y in range(m+1)] \n    for i in range(m+1): \n        dp[i][0] = 1\n    for i in range(n+1): \n        dp[0][i] = 1\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(i): \n                dp[i][j] += dp[i-1][j] \n            for k in range(i, n+1): \n                dp[i][j] += dp[i][j-1] \n    return dp[m][n]\n#test the function \nn,m = 2,3\nprint(\"The delannoy number at position ({},{}) is {}\".format(n,m,dealnnoy_num(n,m)) ",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\n\n#test the function\nprint(series_sum(4)) #should print 30\nprint(series_sum(5)) #should print 55\n\n\n#using the formula for the sum of squares of first n numbers \n# n(n+1)(2n+1)/6\ndef sum_of_series(n):\n    return n*(n+1)*(2*n+1)//6\n\nprint(sum_of_series(4)) #should print 30\nprint(sum_of_series(5)) #should print 55 ",
        "generated_testcode": "assert series_sum(1) == 1\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return [t for x in ord_list for t in test_list if t[0] == x]\n\n# Example usage:\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\nord_list = ['d', 'a', 'e', 'c', 'b']\nre_arrange_tuples(test_list, ord_list) # Output: [('d', 4), ('a', 1), ('e', 5), ('c', 3), ('b', 2)]\n\n# Explanation: \n# The function iterates through the ordered list and selects the tuples from the test_list whose first element matches the current ordered element and appends it to the result list. ",
        "generated_testcode": "assert re_arrange_tuples(\n    [(\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5), (\"kiwi\", 3, 1)],\n    [3, 1, 2, 5]\n) == [(\"kiwi\", 3, 1), (\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5)]\n\n# The output should be [(\"kiwi\", 3, 1), (\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5)] ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = ''\n    max_count = 0\n    for key, value in char_count.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char\n\n#test the function\nprint(max_char(\"Hello World\")) # Expected output: 'l' ",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    i = p \n    j = p \n    k = p \n    min_diff = abs(A[i] + B[j] + C[k] - target)\n    min_sum = A[i] + B[j] + C[k]\n    while i <= q and j <= q and k <= r: \n        current_sum = A[i] + B[j] + C[k] \n        current_diff = abs(current_sum - target) \n        if current_diff < min_diff: \n            min_diff = current_diff \n            min_sum = current_sum \n        if current_sum < target: \n            if abs(A[i+1] + B[j] + C[k] - target) < abs(A[i] + B[j+1] + C[k] - target): \n                i += 1 \n            elif abs(A[i] + B[j+1] + C[k] - target) < abs(A[i+1] + B[j] + C[k] - target): \n                j += 1 \n            else: \n                k += 1 \n        elif current_sum > target: \n            if abs(A[i-1] + B[j] + C[k] - target) < abs(A[i] + B[j-1] + C[k] - target): \n                i -= 1 \n            elif abs(A[i] +",
        "generated_testcode": "assert find_closet(A, B, C, p, q, r) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sorted_models = sorted(models, key=lambda x: x['cost'])\n    return sorted_models\n\ncar_models = [\n    {\"make\": \"Chevrolet\", \"model\": \"Camaro\", \"cost\": 450000},\n    {\"make\": \"Ford\", \"model\": \"Mustang\", \"cost\": 500000},\n    {\"make\": \"Porsche\", \"model\": \"718 Cayman\", \"cost\": 850000},\n    {\"make\": \"Honda\", \"model\": \"NSX\", \"cost\": 700000},\n    {\"make\": \"Hyundai\", \"model\": \"Genesis\", \"cost\": 350000},\n    {\"make\": \"Toyota\", \"model\": \"Corolla\", \"cost\": 250000}\n]\n\nprint(sorted_models(car_models)) ",
        "generated_testcode": "assert sorted_models(models) == [{'name': 'iPhone 11', 'year': 2020, 'price': 9999}, {'name': 'Samsung S20', 'year': 2020, 'price': 749}, {'name': 'iPhone 12', 'year': 2020, 'price': 10999}, {'name': 'Samsung S20 Ultra', 'year': 2020, 'price': 8999}]\n\n# The testing code should ",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(arr)\n    for i in range(n//2-1, -1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n\n# Example usage:\narr = [5, 4, 3, 1, 2, 6, 7, -1, 2]\nheap_sort(arr)\nprint(arr) ",
        "generated_testcode": "assert heap_sort(arr) == sorted(arr)\n\n# The testing code should create an array of at least 5 elements, call the heap_sort function on it, and ",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    count = 0\n    for i in num:\n        if type(i) == tuple:\n            break\n        count += 1\n    return count\n\n# Test the function\nprint(count_elim([1,2,3,4,(\"apple\", \"banana\", \"cherry\", \"orange\"))) # Output: 3\nprint(count_elim([\"apple\", \"banana\", \"cherry\", \"orange\", 2, 3, (1, 2)]) # Output: 3\nprint(count_elim([1,2,(3,4), 5,6,7,8]) # Output: 2 ",
        "generated_testcode": "assert count_elim([1, 2, 3, (4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in test_tup:\n        if i in check_list:\n            return True\n    return False\n\n#Example:\n\n#test_list = (1, 5, 6, 3, 8, 9)\n#check_list = [3, 7, 2, 6, 4]\n\n#print(check_element(test_list, check_list)) # Output: True ",
        "generated_testcode": "assert check_element([1, 2, 3, 4, 5], [10, 2, 3]) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import heapq\n    res = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    while num1 and num2:\n        if num1[0]<num2[0]:\n            res.append(heapq.heappop(num1))\n        else:\n            res.append(heapq.heappop(num2))\n    if num1:\n        res += num1\n    if num2:\n        res += num2\n    return res\n\n#testing\nnum1 = [1, 3, 5, 7, 9]\nnum2 = [2, 4, 6, 8, 10]\nprint(combine_lists(num1, num2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert combine_lists([1,3,5,7],[2,4,6,8,10]) == [1,2,3,4,5,6,7,8,10]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            result.append((i, int(text[i]))\n    return result\n\n# Test\nprint(num_position('hello world 123')) # [(10, 1), (11, 2), (12, 3)]\nprint(num_position('Python 123')) # [(6, 1), (7, 2), (8, 3)]\nprint(num_position('123abc456')) # [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\nprint(num_position('abcdef')) # [] ",
        "generated_testcode": "assert num_position(\"Hello 123 world 456\") == [(123, 6), (456, 13)]\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    s = set(t)\n    return s\n\n# Test the function with some sample tuples\nt = (4, 5, 3, 1, 4, 6, 3, 5, 7, 7, 8, 9, 2, 1)\nprint(tuple_to_set(t)) ",
        "generated_testcode": "assert tuple_to_set((1, 2, 3, 4, 4, 5, 3, 2, 1)) == {1, 2, 3, 4, 5}\n\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    from collections import Counter\n    c = Counter(s)\n    l = []\n    for i in a:\n        if i in c:\n            l.append((i,c[i])\n    l.sort(key=lambda x: x[1], reverse=True)\n    return l\n\n#test the function\ns = \"hello world, this is a test\"\na = [\"e\",\"o\"]\nprint(most_common_elem(s,a)) # [('o', 2), ('l', 3)] ",
        "generated_testcode": "assert most_common_elem(\"hello world\", 2) == [('l', 3), ('o', 2)]\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    shortest_word = \"\"\n    for word in list1:\n        if shortest_word == \"\" or len(word) < len(shortest_word):\n            shortest_word = word\n    return len(shortest_word)\n\n# Test the function with a list of words\nprint(len_log([\"hello\", \"world\", \"python\", \"programming\"]))\nprint(len_log([\"Java\", \"Python\", \"JavaScipt\", \"JavaScript\", \"Ruby\"])) ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"elephant\", \"eggplant\"]) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return tup1[index]\n\n#Example\ntup1 = ('apple', 'banana', 'cherry')\nprint(get_item(tup1,1)) #Output: 'banana' ",
        "generated_testcode": "assert get_item((\"hello\", 1) == \"e\"\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(len(str(i)) for i in tup)\n\ndef sort_tup_by_total_digits(tup):\n    return sorted(tup, key=count_digs)\n\n# Example usage:\n# tup = (123, 5678, 9, 2, 3456)\n# print(sort_tup_by_total_digits(tup)) # Output: (9, 2, 123, 3456, 5678) ",
        "generated_testcode": "assert count_digs(()) == 0\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a year and returns the corresponding Chinese zodiac sign.\n    \"\"\"\n    sign_list = [\n        \"Monkey\",\n        \"Rooster\",\n        \"Dog\",\n        \"Pig\",\n        \"Rat\",\n        \"Ox\",\n        \"Tiger\",\n        \"Rabbit\",\n        \"Dragon\",\n        \"Snake\",\n        \"Horse\",\n        \"Goat\",\n        \"Sheep\",\n    ]\n    index = (year - 4) % 12\n    return sign_list[index]\n\n\n\n# test the function with year input\nyear = int(input(\"Enter a year: \"))\nprint(chinese_zodiac(year)) ",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    \"\"\"\n    Given two lists of tuples, return a list of tuples containing the maximum values of the similar indices.\n    If there is no similar index, return an empty list.\n\n    \"\"\"\n    max_list = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i][0] == test_list2[j][0]:\n                max_list.append((test_list1[i][0], max(test_list1[i][1], test_list2[j][1]))\n    return max_list\n\n# Example usage:\ntest_list1 = [(1, 5), (2, 3), (3, 9), (4, 7), (5, 2)]\ntest_list2 = [(1, 10), (2, 6), (3, 9), (6, 1), (7, 8)]\nprint(max_similar_indices(test_list1, test_list2))  # Output: [(1, 10), (2, 6), (3, 9)] ",
        "generated_testcode": "assert max_similar_indices([(1, 2, 3, 4, 5), (4, 5, 6, 7)] == [(2, 0), (3, 1), (4, 2)]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if r > n: \n        return 0 \n    if r == 0: \n        return 1\n    num = 1\n    den = 1\n    for i in range(1, r+1): \n        num = (num * (n-i+1)) % p \n        den = (den * i) % p \n    return (num * pow(den, p-2, p)) % p \n\n# Example usage: \nn = 10\nr = 2\np = 13\nprint(nCr_mod_p(n, r, p)) # Output: 6\n\n\n# Time complexity: O(n) ",
        "generated_testcode": "assert nCr_mod_p(10, 2, 13) == 6\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    ar.sort() \n    minsubsets = [] \n    for i in range(n): \n        minsubsets.append([ar[i]]) \n    for i in range(1, n): \n        for j in range(n): \n            for k in range(i): \n                if ar[i] > ar[k]: \n                    minsubsets.append(minsubsets[k] + [ar[i]]) \n    return minsubsets ",
        "generated_testcode": "assert subset([1,2,3,4,5,6,7,8,9], 3) == 3 # True\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return None\n\n#test the function with sample test cases\nprint(profit_amount(1000,200))  #should return 100\nprint(profit_amount(1200,80))  #should return None ",
        "generated_testcode": "assert profit_amount(1000, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) > n:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(is_abundant(12))\nprint(is_abundant(24))\nprint(is_abundant(25)) ",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[A-Z]')\n    split = pattern.split(text)\n    return split[1:]\n\n#Example:\n#text = \"HelloWorld\"\n#split_list(text) #['Hello', 'World'] ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    pos = 0\n    if n == 0:\n        return -1\n    while n:\n        pos += 1\n        n >>= 1\n    return pos\n\n#Test the function with some examples\nprint(get_First_Set_Bit_Pos(10)) # Output: 2\nprint(get_First_Set_Bit_Pos(25)) # Output: 4\nprint(get_First_Set_Bit_Pos(7))  # Output: 2\nprint(get_First_Set_Bit_Pos(16)) # Output: 4\nprint(get_First_Set_Bit_Pos(0))  # Output: -1 ",
        "generated_testcode": "assert (get_First_Set_Bit_Pos(16) == 5) # 16 is 1000000 in binary, so the rightmost set bit is at position 5 (counting from 1)\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    val = [\n        10000, 900, 500, 400, 100,\n        90, 50, 40, 10,\n        9, 5, 4, 1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n# Test cases\nprint(int_to_roman(3))  # Should be \"III\"\nprint(int_to_roman(14)) # Should be \"XIV\"\nprint(int_to_roman(21)) # Should be \"XXI\"\nprint(int_to_roman(9999)) # Should be \"CMXCIX\" ",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    total = sum(lst)\n    length = len(lst)\n    return total/length \n\nlst = [1,2,3,4,5,6,7,8,9] \nprint(\"Original list:\",lst)\nprint(\"Average of the list:\",Average(lst)) # Output: 5.0 ",
        "generated_testcode": "assert Average([1,2,3,4,5]) == 3.0\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 2\n    else:\n        return get_noOfways(n-1) + get_noOfways(n-2)\n\n\n# Test the function with example\nn = 4\nprint(get_noOfways(n))  # Output: 5\n\n\n# This function has time complexity of O(2^n) which is exponential and will take a lot of time for large values of n. \n# So, we can use memoization to optimize it.\n\ndef get_noOfways_memo(n, memo):\n    if n == 0 or n == 1:\n        memo[n] = 1\n        return 1\n    if memo[n] != -1:\n        return memo[n]\n    if n == 2:\n        memo[n] = 2\n        return 2\n    memo[n] = get_noOfways_memo(n-1, memo) + get_noOfways_memo(n-2, memo)\n    return memo[n]\n\n# Test the function with example\nn = 4\nmemo = [-1]*(n+1)\nprint(get_noOfways_memo(n, memo))  # Output: 5\n\n\n# This function has time complexity of O(n) and space complexity of O(n). ",
        "generated_testcode": "assert get_noOfways(2) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 5000, 'M': 10000}\n    total = 0\n    prev = 0\n    for i in s[::-1]:\n        curr = roman_dict[i]\n        if curr < prev:\n            total -= curr\n        else:\n            total += curr\n        prev = curr\n    return total\n\nprint(roman_to_int('III')) # 3\nprint(roman_to_int('IV')) # 4\nprint(roman_to_int('LVIII')) # 58\nprint(roman_to_int('MCMXCIV')) # 1994 ",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i \n    return sum \ndef sum_even(l, r): \n    if (l%2!=0): \n        l = l+1 \n    return sum_Natural(r) - sum_Natural(l-1) \nl = 1\nr = 10\nprint(\"Sum of even numbers between\", l, \"and\", r, \"is\", sum_even(l, r)) ",
        "generated_testcode": "assert sum_Natural(2, 10) == 30 # Test case 1\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return y**2 - 4*x*z\n\n# Test the function with some values\nprint(discriminant_value(1, 2, 3)) # 13\nprint(discriminant_value(1, -10, 25)) # 121\nprint(discriminant_value(10, 20, 10)) # -300\n\n\n# Write a function to calculate the roots of a quadratic equation\ndef quadratic_roots(a,b,c):\n    d = discriminant_value(a,b,c)\n    if d < 0:\n        return \"No real roots\"\n    elif d == 0:\n        x = (-b + (d**0.5))/(2*a)\n        return -x\n    else:\n        x1 = (-b + (d**0.5))/(2*a)\n        x2 = (-b - (d**0.5))/(2*a)\n        return x1, x2\n\n# Test the function with some values\nprint(quadratic_roots(1, 2, 3)) # No real roots\nprint(quadratic_roots(1, -10, 25)) # 5.0\nprint(quadratic_roots(10, 20, 10)) # (1.0, -1.0) ",
        "generated_testcode": "assert discriminant_value(1, 2, 1) == 0\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    length = len(s) \n    if length % 2 == 0: \n        return True \n    else: \n        return False \n\n#test the function with some sample test cases \nprint(word_len(\"hello\")) # True \nprint(word_len(\"python\")) # False \nprint(word_len(\"car\")) # False \nprint(word_len(\"racecar\")) # True ",
        "generated_testcode": "assert word_len(\"hello\") == False\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    snake_case_text = \"\"\n    for char in text:\n        if char.isupper():\n            snake_case_text += \"_\" + char.lower()\n        else:\n            snake_case_text += char\n    return snake_case_text\n\n\n# Example usage:\nprint(camel_to_snake(\"CamelCaseString\")) # Output: \"camel_case_string\" ",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return list(filter(None, tuple1))\n\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) ) # [('a', 'b'), ('a', 'b', 'c'), 'd'] ",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('', 'a', 'b', 'c', 'd')]\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for char in string: \n        if char in vowels: \n            continue\n        else: \n            return False\n    return True\n\nstring = input(\"Enter a string: \")\nif check(string.lower()):\n    print(\"String contains all vowels\")\nelse:\n    print(\"String does not contain all vowels\") ",
        "generated_testcode": "assert check(\"aeiou\") == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    #check if A is greater than B\n    if A>B:\n        A,B = B,A\n    #check if N is even or odd\n    if N%2==0:\n        max_val = ((N//2)*(A+(B-A+1))+(B-A+1)//2)\n    else:\n        max_val = (N//2)*(A+(B-A+1)+1)\n    return max_val\n\n#example:\nA = 2\nB = 7\nN = 5\nprint(floor_Max(A,B,N)) #output: 24 ",
        "generated_testcode": "assert floor_Max(2, 5, 10) == 10\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                result.append((test_list[i][0], test_list[i][1] + test_list[j][1]))\n    return result\n\n#Example:\n#test_list = [('A', 5), ('B', 6), ('C', 7), ('A', 1), ('B', 2), ('D', 8), ('A', 3)]\n#join_tuples(test_list) \n#output: [('A', 6), ('B', 8), ('C', 7), ('D', 8)] ",
        "generated_testcode": "assert join_tuples([(1, 2), (1, 3), (1, 4)] ) == [(1, 2, 3, 4)]\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\n# test the function with different values\nprint(min_of_two(2, 3))   # output: 2\nprint(min_of_two(5, 4))   # output: 4\nprint(min_of_two(7, 7))   # output: 7\n\n\n# write a function to find minimum of three numbers\ndef min_of_three( x, y, z ):\n    return min_of_two( min_of_two( x, y ), z )\n\n# test the function with different values\nprint(min_of_three(2, 3, 4))   # output: 2\nprint(min_of_three(5, 4, 3))   # output: 3\nprint(min_of_three(7, 7, 1))   # output: 1\n\n# write a function to find minimum of a list of numbers\ndef min_in_list( numbers ):\n    if len(numbers) == 0:\n        return None\n    elif len(numbers) == 1:\n        return numbers[0]\n    else:\n        return min_of_two( numbers[0], min_in_list( numbers[1:] ) )\n\n# test the function with different lists\nprint(min_in_list( [2, 3, 4, 5]) )    # output: 2\nprint(min_in_list( [7,",
        "generated_testcode": "assert min_of_two(2, 3) == 2\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    segments = 0\n    segments += n // a \n    n = n % a \n    segments += n // b \n    n = n % b \n    segments += n // c \n    return segments ",
        "generated_testcode": "assert maximum_segments(10, 3, 5) == 2\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    return test_tup1 + (test_tup2,)\n\n# Example usage:\n# test_tup1 = (1, 2, 3)\n# test_tup2 = (4, 5, 6)\n# result = concatenate_nested(test_tup1, test_tup2)\n# print(result) # Output: (1, 2, 3, (4, 5, 6))\n\n\n# 2.Write a function to check if a given tuple contains a specific element.\ndef check_element(test_tup, element):\n    return element in test_tup\n# Example usage:\n# test_tup = (1, 2, 3, 4, 5)\n# element = 3\n# print(check_element(test_tup, element)) # Output: True\n\n# 3.Write a function to check if two given tuples are equal.\ndef check_tuples_equal(test_tup1, test_tup2):\n    return test_tup1 == test_tup2\n# Example usage:\n# test_tup1 = (1, 2, 3)\n# test_tup2 = (1, 2, 3, 4)\n# print(check_tuples_equal(test_tup1, test_tup2)) # Output: False\n\n# 4.Write a function to get the maximum element from a tuple.\ndef get_max_element(test_",
        "generated_testcode": "assert concatenate_nested((1, 2, 3), (4, 5, 6)) == ((1, 2, 3), (4, 5, 6))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return s[d:]+s[:d] \n\n#sample test case\ns=\"hello\"\nd=2\nprint(left_rotate(s,d)) #llohe\n\n#explanation:\n#The function takes two parameters s and d. s is the string to be rotated and d is the number of positions to be rotated.\n#The function slicing is used to rotate the string. s[d:] returns the string starting from d index to the end and s[:d] returns the string starting from 0 index to d-1 index. ",
        "generated_testcode": "assert left_rotate(\"abcdefg\", 2) == \"cdefgab\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": false,
        "answer": "    n = len(A) \n    dp = A[n-1] # initialize the last row\n    for i in range(n-2, -1, -1, -1): \n        for j in range(i+1): \n            dp[j] = A[i][j] + min(dp[j], dp[j+1]) \n            A[i][j] += min(dp[j], dp[j+1])\n    return A[0][0]\n\n\n# Example usage: \nA = [[2],[3,4],[6,5,7],[4,6,8,9]]\nprint(min_sum_path(A)) # Output: 11 ",
        "generated_testcode": "assert min_sum_path([[1],[2,3],[4,5,6],[7,8,9,10]]) == 11 # Test case 1\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]