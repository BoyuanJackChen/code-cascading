[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n+1)] for i in range(m+1)] \n  \n    for i in range(m+1): \n        dp[i][0] = float('inf') \n    for j in range(n+1): \n        dp[0][j] = float('inf') \n  \n    dp[0][0] = cost[0][0] \n  \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = cost[i-1][j-1] + min(dp[i-1][j], dp[i][j-1], dp[i-1][j]) \n            if i > 1: \n                dp[i][j] = min(dp[i][j], dp[i-1][j-1]) \n            if j > 1: \n                dp[i][j] = min(dp[i][j], dp[i][j-1]) \n            dp[i][j] += cost[i-1][j-1] \n  \n    return dp[m][n] ",
        "generated_testcode": "assert min_cost(\n    [\n        [1, 2, 3],\n        [4, 8, 2],\n        [1, 5, 3]\n    ], 2, 2) == 6\n\n# The output should be 6. ",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Initialize an empty list to store the similar elements\n    sim_elements = []\n    \n    # Iterate through the first list\n    for i in list1:\n        # If the element is present in the second list and not in the sim_elements list, append it to the similar elements list\n        if i in list2 and i not in sim_elements:\n            sim_elements.append(i)\n    \n    # Return the similar elements tuple\n    return tuple(sim_elements)\n\n\n# Test the function with sample tuples\ntup1 = (1, 2, 3, 4, 5, 6, 7)\ntup2 = (2, 4, 6, 8, 10)\nprint(similar_elements(tup1, tup2))  # Output: (2, 4, 6) ",
        "generated_testcode": "assert similar_elements(('apple', 'banana', 'orange', 'pear', 'grape'), ('banana', 'orange', 'grape', 'kiwi')) == ('banana', 'orange', 'grape')\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer as input and returns True if it's not a prime number, else False.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test the function with some examples\nprint(is_not_prime(25)) # True\nprint(is_not_prime(11)) # False\nprint(is_not_prime(15)) # True\nprint(is_not_prime(17)) # False\nprint(is_not_prime(1)) # True ",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    #Build a max heap\n    for i in range(n//2,-1,-1,-1):\n        heapify(nums,n,i)\n        \n    for i in range(n-1,0,-1):\n        nums[0],nums[i] = nums[i],nums[0]\n        heapify(nums,i,0)\n        \n    return nums[0]\n\ndef heapify(nums,n,i):\n    largest = i\n    l = 2*i+1\n    r = 2*i+2\n    \n    if l < n and nums[largest] < nums[l]:\n        largest = l\n    if r < n and nums[largest] < nums[r]:\n        largest = r\n    if largest != i:\n        nums[i],nums[largest] = nums[largest],nums[i]\n        heapify(nums,n,largest)\n\n#Test the function with an example\nnums = [1,2,3,4,5,6,7,8,9,10]\nn = len(nums)\nprint(heap_queue_largest(nums,n)) #Output: 10\n\n\n#Time Complexity: O(n) for building max heap and O(nlogn) for heapify. Therefore, the time complexity is O(nlogn) ",
        "generated_testcode": "assert heap_queue_largest(nums=[4, 10, 8, 2, 5, 1, 6, 3, 9], n=3) == [10, 9, 8]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    dp = [0] * (n + 1)\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + sum(dp[:i - 1]) + 1\n    return dp[n]\n\n# test the function\nprint(count_ways(4)) # output: 5\nprint(count_ways(5)) # output: 11\nprint(count_ways(6)) # output: 22",
        "generated_testcode": "assert count_ways(0) == 0\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0: \n        return False\n    return (x & (x - 1)) == 0\ndef differ_by_one_bit(a, b):\n    if a == b:\n        return False\n    return is_Power_Of_Two(a ^ b) ",
        "generated_testcode": "assert is_Power_Of_Two (8) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b\\w{4,}\\b\"\n    result = re.findall(pattern, text)\n    return result\n\n#test function\nprint(find_char_long(\"This is a sample text with some sample words.\")) # ['sample', 'some', 'words']\n\n\n# Another way of doing it:\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)\n\n\n#test function\nprint(find_char_long(\"This is a sample text with some sample words.\")) # ['sample', 'some', 'words'] ",
        "generated_testcode": "assert find_char_long(text) == ['Python', 'Programming', 'Pandas', 'DataFrame', 'Series', 'Numpy', 'Scikit-learn', 'Algorithms']\n\n\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x**2, nums)\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(square_nums(nums))\n\n\n# Output: [1, 4, 9, 16, 25, 36, 49, 64, 81] ",
        "generated_testcode": "assert square_nums(list(range(1, 6)) == [1, 4, 9, 16, 25, 36, 49]\n\n\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(str) \n    s = str + str\n    for i in range(n): \n        if str == s[i:i+n]: \n            return i\n    return None\n\n# Driver code \nstr = \"geeks\"\nprint(find_Rotations(str)) ",
        "generated_testcode": "assert find_Rotations(str) == 0 # Test case 1\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort()\n    return list1[:n]\n\n#Test the function with an example\nlist1 = [2, 5, 3, 7, 1, 9, 4, 8, 6]\nprint(small_nnum(list1, 3)) # Output: [1, 2, 3]\n\n\n#Write a function to get the n largest items from a dataset.\ndef large_nnum(list1,n):\n    list1.sort(reverse=True)\n    return list1[:n]\n\n#Test the function with an example\nlist1 = [2, 5, 3, 7, 1, 9, 4, 8, 6]\nprint(large_nnum(list1, 3)) # Output: [9, 8, 7]\n\n\n#Write a function to remove duplicates from a list\ndef remove_duplicates(list1):\n    return list(set(list1))\n\n#Test the function with an example\nlist1 = [2, 5, 3, 7, 1, 2, 9, 4, 8, 6, 3, 7, 1]\nprint(remove_duplicates(list1)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n#Write a function to check if a list is empty\ndef is_empty(list1):\n    return len(list1)",
        "generated_testcode": "assert small_nnum(list1,n) == expected_output\n\n# Write a function to get the n largest items from a dataset.\ndef large_nnum(list1,n):\n    pass\n\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if s.count(ch) < 2: #if the character occurs less than 2 times, return the original string\n        return s \n    else:\n        first = s.find(ch) #find the index of first occurrence of the character\n        last = s.rfind(ch) #find the index of last occurrence of the character\n        if first == last: #if both are same, it means it occurs only once in the string, so remove it\n            return s.replace(ch,\"\",1) \n        else:\n            return s[:first]+s[first+1:last]+s[last+1:] #remove first and last occurrence of the character\n\n#Example usage:\ns = \"hello world\"\nch = \"l\"\nprint(remove_Occ(s,ch)) #output: \"helo word\" ",
        "generated_testcode": "assert remove_Occ(s,ch) == \"hello world\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if not M:\n        return []\n    return sorted(M, key=lambda x: sum(x))\n\n\n# Test cases\nmatrix = [[3, 2, 9], [1, -1, 0], [9, 5, 1]]\nprint(sort_matrix(matrix)) # Output: [[1, -1, 0], [3, 2, 9], [9, 5, 1]]\n\n\nmatrix = [[1, 4], [3, 2, 5], [8, 9, 1, 3]]\nprint(sort_matrix(matrix)) # Output: [[3, 2, 5], [1, 4], [8, 9, 1, 3]]\n\n\nmatrix = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\nprint(sort_matrix(matrix)) # Output: [[8, 9], [1, 2, 3], [4, 5, 6, 7]] ",
        "generated_testcode": "assert sort_matrix(\n    [\n        [3, 2, 1],\n        [6, 5, 4],\n        [9, 8, 7]\n    ]) == [\n        [9, 8, 7],\n        [6, 5, 4],\n        [3, 2, 1]\n    ], \"Example 1\"\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count_dict = {}\n    for word in words:\n        if word not in count_dict:\n            count_dict[word] = 1\n        else:\n            count_dict[word] += 1\n    return count_dict\n\n# Test the function with some sample data\nwords = ['apple', 'banana', 'apple', 'orange', 'apple', 'apple', 'banana', 'orange', 'orange', 'banana']\nresult = count_common(words)\nprint(result) # Output: {'apple': 3, 'banana': 2, 'orange': 2} ",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 2}\n\n\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    volume = 0.5 * l * b * h\n    return volume\n\nlength = float(input(\"Enter the length of triangular base: \"))\nbreadth = float(input(\"Enter the breadth of triangular base: \"))\nheight = float(input(\"Enter the height of triangular prism: \"))\n\nbase_area = 0.5 * length * breadth\nvolume = find_Volume(base_area, height)\n\nprint(\"The volume of triangular prism is: \", volume) ",
        "generated_testcode": "assert find_Volume(2,3,4) == 12\n\n# Test case 1:\n# Input: \n#   l = 2, b = 3, h = 4\n# Output:\n#   12.0\n\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    start = 0\n    for i, letter in enumerate(text):\n        if letter.islower():\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return result\n\n# example usage:\nprint(split_lowerstring(\"HelloWorld\")) ",
        "generated_testcode": "assert split_lowerstring(text) == expected_output\n\n# Example:\n# text = \"HelloWorld\"\n# expected_output = [\"Hello\", \"World\"]\n# ",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    start = None\n    for i, c in enumerate(text):\n        if c.islower():\n            if start is None:\n                start = i\n        else:\n            if start is not None:\n                if i - start > 1:\n                    result.append(text[start:i])\n                start = None\n    if start is not None and i - start > 1:\n        result.append(text[start:i + 1])\n    return result\n\n\n# test cases\nprint(text_lowercase_underscore(\"Hello_world_this_is_a_test\"))\nprint(text_lowercase_underscore(\"Hello_world\"))\nprint(text_lowercase_underscore(\"Hello_World\"))\nprint(text_lowercase_underscore(\"HELLO_WORLD\"))\nprint(text_lowercase_underscore(\"HELLO_World\"))\nprint(text_lowercase_underscore(\"HELLO_Worl_d\"))\nprint(text_lowercase_underscore(\"HELLO_Worl_d_WorlD\"))\nprint(text_lowercase_underscore(\"HELLO_Worl_d_WorlD_\"))\nprint(text_lowercase_underscore(\"HELLO_Worl_d__WorlD\"))\nprint(text_lowercase_underscore(\"HELLO_Worl_d__WorlD_WORLD\"))\nprint(",
        "generated_testcode": "assert text_lowercase_underscore([\"a_b_c\", \"d_E_f\", \"g_H_i\", \"J_k_l\", \"m_n_o\"] == [\"a_b_c\", \"J_k_l\"]\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return a * 4\n\n# Write a function to find the area of a square\ndef square_area(a):\n    return a * a\n\n# Write a function to find the volume of a cube\ndef cube_volume(a):\n    return a ** 3\n\n# Write a function to find the surface area of a cube\ndef cube_surface_area(a):\n    return a ** 2 * 6\n\n# Write a function to find the volume of a cuboid\ndef cuboid_volume(l, w, h):\n    return l * w * h\n\n# Write a function to find the surface area of a cuboid\ndef cuboid_surface_area(l, w, h):\n    return 2 * ((l * w) + (w * h) + (h * l))\n\n# Write a function to find the surface area of a cylinder\ndef cylinder_surface_area(r, h):\n    return (2 * 3.14 * r * h) + (2 * 3.14 * r ** 2)\n\n# Write a function to find the volume of a cylinder\ndef cylinder_volume(r, h):\n    return 3.14 * r ** 2 * h\n\n# Write a function to find the surface area of a cone\ndef cone_surface_area(r, slant_height):\n    return 3.14 * r * slant_height + 3.14 * r ** 2\n\n# Write a function to find the",
        "generated_testcode": "assert square_perimeter(5) == 20\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    pass\n\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(string) \n\ndef remove_chars(string1, string2): \n    list1 = str_to_list(string1) \n    list2 = str_to_list(string2) \n    for i in string2: \n        if i in list1: \n            while i in list1: \n                list1.remove(i) \n    return \"\".join(list1) \n\nstring1 = input(\"Enter the first string: \") \nstring2 = input(\"Enter the second string: \") \nprint(\"Resultant string: \", remove_chars(string1, string2)) ",
        "generated_testcode": "assert str_to_list(string1, string2) == expected_output\n\n# Test case 1\nstring1 = \"hello\"\nstring2 = \"le\"\nexpected_output = \"ho\"\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num_dict = {}\n    for num in arraynums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = True\n    return False\n\n# Test cases\nprint(test_duplicate([1,2,3,4,5,6,7,7])) # True\nprint(test_duplicate([1,2,3,4,5,6,8])) # False\nprint(test_duplicate([])) # False\nprint(test_duplicate([1,1,2,3,4,5])) # True\nprint(test_duplicate([1,2,3,4,5,6,5])) # True\nprint(test_duplicate([1,1,1,1,1,1])) # True ",
        "generated_testcode": "assert test_duplicate(arraynums=[1,2,3,4,5,6,7]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if x < 0:\n        return False\n    while x > 0:\n        if x == 1:\n            return True\n        elif x % 2 == 0:\n            x = x // 2\n        else:\n            x = x * 3 + 1\n    return False\n\n# Test the function with some examples\nprint(is_woodall(1))    # True\nprint(is_woodall(10))   # True\nprint(is_woodall(15))   # True\nprint(is_woodall(20))   # False\nprint(is_woodall(21))   # True ",
        "generated_testcode": "assert is_woodall(1) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    multiples = []\n    for i in range(1,m+1):\n        multiples.append(n*i)\n    return multiples\n\n#test the function\nprint(multiples_of_num(10,5)) #[5, 10, 15, 20, 25, 30, 35, 40, 45, 50] ",
        "generated_testcode": "assert multiples_of_num(5, 10) == [10, 20, 30, 40, 50, 60]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not nums:\n        return -1\n    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return num\n        else:\n            num_dict[num] = 1\n    return -1\n\n# Example usage:\nnums = [1, 2, 3, 4, 5, 2, 6, 1]\nprint(find_first_duplicate(nums))  # Output: 1 ",
        "generated_testcode": "assert find_first_duplicate(nums=[1, 2, 3, 4, 5, 6, 2, 1, 7]) == 2\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = 0 \n    for i in range(len(list1)): \n        current_sum = sum(list1[i]) \n        if current_sum > max_sum: \n            max_sum = current_sum \n    return max_sum \n# example\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(\"Maximum sum is:\", maximum_Sum(list1)) # Output: 20 ",
        "generated_testcode": "assert maximum_Sum(list1) == 100\n\n# The list1 is defined as follows:\nlist1 = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]]\n# The maximum sum of elements in the list of lists is 100, which is the sum of the last sublist [14, 15, 16, 17]. ",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\n#example\nprint(binary_to_decimal('1011010')) # 22 ",
        "generated_testcode": "assert binary_to_decimal(10101010) == 42\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = 1\n    for i in range(n): \n        product = 1\n        for j in range(n): \n            if i != j: \n                product *= arr[j] \n        max_product *= product \n    return max_product \n\n# Driver code \narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(find_Product(arr, n)) ",
        "generated_testcode": "assert find_Product(arr=[1,2,3,4,5,6,7,8],n=5) == 280\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list and a number K, return True if the list contains K elements, else return False\n    \"\"\"\n    if len(test_list) == K:\n        return True\n    else:\n        return False\n\n# Test Cases\nprint(check_k_elements((1,2,3,4,5,6,7), 5)) # True\nprint(check_k_elements((1,2,3,4,5,6,7), 6) ) # False\nprint(check_k_elements((1,2,3,4,5,6,7), 4) ) # False\nprint(check_k_elements((1,2,3,4,5), 4) ) # True\nprint(check_k_elements((1,2,3,4), 3) ) # True ",
        "generated_testcode": "assert check_k_elements(('abc', 2) == False)\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = [] \n    for string in list: \n        new_string = ''.join(letter for letter in string if not letter.isdigit()) \n        new_list.append(new_string) \n    return new_list \n\n#Testing the function with an example\nlist = ['Hello 123', 'World 456', 'Python 789'] \nprint(remove(list) # Output: ['Hello', 'World', 'Python'] ",
        "generated_testcode": "assert remove([\"hello\", \"world\", \"123\", \"python\", \"12345\", \"123abc\", \"abc456\"]) == [\"hello\", \"world\", \"\", \"python\", \"\", \"abc\"]\n\n\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if k > n: \n        return 0\n    res = 1\n    for i in range(k): \n        res *= n-i\n        res //= i+1\n    return res\nn = int(input(\"Enter n: \"))\nk = int(input(\"Enter k: \"))\nprint(\"Binomial Coefficient C(%d,%d) = %d\" % (n, k, binomial_Coeff(n,k)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a variable to store the result \n    res = 0\n    # Traverse the array and XOR all the elements of the array \n    for i in range(arr_size): \n        res = res ^ arr[i] \n    return res ",
        "generated_testcode": "assert get_Odd_Occurrence(arr=[1,2,3,2,3,4,5,4,5,4],arr_size=6) == 1 # Test case 1\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(s) \n    cnt = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if s[i] == s[j]: \n                cnt += 1\n    return cnt \n# Test the function with an example string \ns = \"ababa\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(s) == 5 # Testing for the string \"abba\"\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    from heapq import heappush, heappop\n    freq = {}\n    for num in nums:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            freq[num] += 1\n    \n    heap = []\n    for key, val in freq.items():\n        heappush(heap, (-val, key))\n    \n    res = []\n    for i in range(k):\n        if not heap:\n            break\n        res.append(heappop(heap)[1])\n    \n    return res\n\n# Test\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 11, 12, 12, 12, 12, 13, 14, 15, 15, 16, 17, 17, 17, 17, 17, 18, 19, 20, 20]\nk = 3\nprint(func(nums, k)) # Output: [10, 12, 17] ",
        "generated_testcode": "assert func(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    maxPrime = -1\n    while n % 2 == 0: \n        maxPrime = 2\n        n >>= 1\n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            maxPrime = i\n            n = n / i \n    if n > 2: \n        maxPrime = n\n    return int(maxPrime) ",
        "generated_testcode": "assert max_Prime_Factors (100) == 5\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while (N > 0): \n        binary = str(N % 2) + binary\n        N = N // 2\n    return binary\n\n#Testing the function with sample inputs\nprint(decimal_To_Binary(5))  # Output: 101 \nprint(decimal_To_Binary(10)) # Output: 1010 \nprint(decimal_To_Binary(20)) # Output: 101000 ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(ar) \n    total_sum = (N * (N + 1)) // 2\n    sum_of_array = sum(ar)\n    return total_sum - sum_of_array\n    \n    # Driver code \nar = [1,2,3,4,5,6,7,8,9,10,11]\nN = 10\nprint(find_missing(ar,N)) # Output: 0\n\nar = [1,2,4,3,5,6,7,8,9,10]\nN = 7\nprint(find_missing(ar,N)) # Output: 3\nar = [1,2,3,4,5,6,7,9,10]\nN = 7\nprint(find_missing(ar,N)) # Output: 8 ",
        "generated_testcode": "assert find_missing(ar,N) == 4\n# Test case 1:\nar = [1,2,3,5,6,7,8,9,10]\nN = 6\nprint(find_missing(ar,N)) # Output: 4\n\n\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while True:\n        count = 0\n        for j in range(1, n+1):\n            count += i * n\n        if count >= n:\n            return count\n        i += 1 ",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    digits = 0\n    i = 0\n    while (N>0):\n        if(N>q):\n            N -= q\n            i += 1\n            digits += 1\n            q *= 10\n        else:\n            break\n    if(N == 0):\n        return -1\n    num = p * 10**(i)\n    digits += i+1\n    while(N>1):\n        num //= 10\n        N -= 1\n        digits -= 1\n    return num%10\n    \n# Example usage:\nprint(find_Nth_Digit(3,2,4)) # Output: 3 ",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of integers and strings as input and sorts them in ascending order,\n    maintaining the relative order of strings within the list.\n\n    \"\"\"\n    # Separate the integers and strings into two different lists\n    int_list = []\n    str_list = []\n    for item in mixed_list:\n        if isinstance(item, int):\n            int_list.append(item)\n        elif isinstance(item, str):\n            str_list.append(item)\n    # Sort the integer list\n    int_list.sort()\n    # Combine the sorted integer list and string list\n    sorted_list = int_list + str_list\n    return sorted_list\n\n# Example usage:\nprint(sort_mixed_list([3, \"apple\", 1, \"banana\", 2, \"orange\", \"kiwi\", 4, \"pear\"]) # Output: [1, 2, 3, 4, \"apple\", \"banana\", \"kiwi\", \"orange\"] ",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 3, \"banana\", 1, \"orange\", 5, \"grape\", 2, \"kiwi\", 4]) == [1, 2, 3, 4, 5, \"apple\", \"banana\", \"grape\", \"kiwi\"]\n\n# Test case 1: Test the function with a mixed list of integers and strings.\n# Expected output: [1, 2, 3, 4, 5, \"apple\", \"banana\", \"grape\", \"kiwi\"]\n\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even, odd\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven, odd = div_even_odd(list1)\nprint(\"Even numbers:\", even)\nprint(\"Odd numbers:\", odd) ",
        "generated_testcode": "assert div_even_odd(list1) == (2, 3)\n\n# The output should be (2, 3) because 2 is the first even number and 3 is the first odd number in the list. ",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for char in S:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    flag = False\n    for key in freq:\n        if freq[key] % 2 == 1:\n            if flag:\n                return False\n            flag = True\n    return True\n\n# Test the function with some examples\nprint(rearange_string(\"aabbcc\")) # True\nprint(rearange_string(\"aabbd\")) # False\nprint(rearange_string(\"aabbccd\")) # True\nprint(rearange_string(\"aabbc\")) # True\nprint(rearange_string(\"aabbccdde\")) # False ",
        "generated_testcode": "assert rearange_string(S=\"aabbc\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import Counter\n    counter = Counter(nums)\n    for i,j in counter.items():\n        if j%2!=0:\n            return i\n    return None\n\n#Example Usage:\nlst = [1,2,3,4,5,2,4,5,3,6,7,8,7,8,9,10,10]\nprint(freq_element(lst))  #Output: 1 ",
        "generated_testcode": "assert freq_element(nums=[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [2, 3, 4, 5]]) == {1: 1, 5: 2, 6: 1}\n\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: [2, 4, 6, 8, 10]\n\n\n# Write a function to calculate the sum of a list using lambda function.\ndef find_sum(lst):\n    return sum(lst)\nprint(find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: 45\n\n\n# Write a function to double each element in a list using lambda function.\ndef double_list(lst):\n    return list(map(lambda x: x * 2, lst))\nprint(double_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Output: [2, 4, 6, 8, 10, 12, 14, 16, 18]\n\n# Write a function to square each element in a list using lambda function.\ndef square_list(lst):\n    return list(map(lambda x: x**2, lst))\nprint(square_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))",
        "generated_testcode": "assert filter_evennumbers(list(range(10)) == [0, 2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    #Create a dictionary to store the element and its frequency in the array\n    d = {} \n    for i in range(n): \n        if arr[i] in d: \n            d[arr[i]] += 1\n        else: \n            d[arr[i]] = 1\n    #Initialize sum variable to 0\n    sum = 0\n    #Iterate through the dictionary items and multiply the key with its value and add to the sum variable\n    for i in d: \n        sum += i * d[i]\n    return sum \n#Test the function with an example\narr = [1, 2, 3, 4, 5, 2, 6, 1, 4]\nn = len(arr)\nprint(\"Sum of repeated elements in the array is:\", find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum(arr,n) == 10 # if arr = [1,2,3,4,2,5,6,3] and n = 6\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\\b[a-z]+(_[a-z]+\\b)+')\n    result = pattern.search(text)\n    return result.group(0) if result else ''\n    \n# Test cases\nprint(text_match(\"a_b_c\")) # should return \"a_b_c\"\nprint(text_match(\"a_B_c\")) # should return \"\"\nprint(text_match(\"a_bc\")) # should return \"\"\nprint(text_match(\"a_b_c_d_e_f\")) # should return \"a_b_c_d_e_f\"\nprint(text_match(\"_a_bc\")) # should return \"\"\nprint(text_match(\"abc_def\")) # should return \"\" ",
        "generated_testcode": "assert text_match([\"_a_b_c_d_\", \"a_bc_d\", \"ABC_def\", \"hello_world\", \"a_b_c_d_e\"]), [\"_a_b_c_d_\"]\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r'^\\b\\w+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n\n# Example usage:\ntext = \"hello world, how are you?\"\nresult = text_match_string(text) \nprint(result) ",
        "generated_testcode": "assert text_match_string(\u201cHello world\u201d) == \u201cHello\u201d\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y): \n        x, y = y, x % y \n    return x\n  \ndef find_gcd_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n  \n# Test the function with an example array \narr = [12, 14, 16] \nprint(find_gcd_array(arr)) # Output: 2 \n\n\n# In this code, we have defined a helper function find_gcd() to find the gcd of two numbers, and the main function find_gcd_array() that takes an array as input and returns the gcd of all the elements in the array. \n# The main function iterates through the array and finds the gcd of each element with the result variable. ",
        "generated_testcode": "assert find_gcd(12, 8) == 4\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns True if all the numbers in the given list are distinct, otherwise returns False.\n    \"\"\"\n    return len(set(data)) == len(data)\n\n# Test cases\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7])) # True\nprint(test_distinct([1, 2, 3, 4, 5, 5, 6, 7])) # False\nprint(test_distinct([1, 2, 3, 4, 5, 6, 1])) # False\nprint(test_distinct([])) # True\nprint(test_distinct([1])) # True ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5, 6, 7]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    a = factorial(A) % 10\n    b = factorial(B) % 10\n    for i in range(1,10):\n        if (a * b) % 10 == 1:\n            return i\n    return 0\n#Example \n#Input: A = 5, B = 2\n#Output: 2\n#Explanation: Last digit of 5! is 1, last digit of 2! is 2, and their product is 2. ",
        "generated_testcode": "assert compute_Last_Digit(5, 10) == 2\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not n:\n        return 0\n    else:\n        return n | (n >> 1)\n\n# Example:\n# Input: 5 (101)\n# Output: 7 (1111)\n# Explanation: \n# In the binary representation of 5, only the first bit is set. \n# In the binary representation of 7, both the first and second bits are set. \n# Therefore, we need to set all the odd bits of the binary representation of 5, which can be done by setting all the bits \n# to the right of the least significant set bit.\n\n# We can do this by performing the following steps:\n# 1. Shift the binary representation of n to the right by 1 (5 -> 101 -> 10)\n# 2. Perform bitwise OR operation between the shifted number and the original number (101 | 10 = 111)\n# 3. The result is 7. ",
        "generated_testcode": "assert odd_bit_set_number(0) == 0\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for row in nums:\n        result.append(row[N])\n    return result\n\n# test case\nprint(specified_element([[1,2,3,4],[5,6,7],[8,9,10]], 2)) # should return [3,7,10] ",
        "generated_testcode": "assert specified_element(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 0) == [1, 6, 10, 14]\n\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return min(input_list,key=lambda x:len(x))\n\n#Test the function with an example\ninput_list = [[1,2,3,4],[5,6],[7,8,9,10,11],[12,13,14,15,16,17,18],[19,20],[21,22,23,24,25,26,27,28]]\nprint(min_length_list(input_list)) #[5,6]\n\n\n#Solution 2: Using the inbuilt min function and len() method\ndef min_length_list(input_list):\n    return min(input_list,key=len)\n\n#Test the function with an example\ninput_list = [[1,2,3,4],[5,6],[7,8,9,10,11],[12,13,14,15,16,17,18],[19,20],[21,22,23,24,25,26,27,28]]\nprint(min_length_list(input_list)) #[5,6] ",
        "generated_testcode": "assert min_length_list([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"grape\"]) == \"apple\"\n\n\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x==y==z:\n        return True\n    else:\n        return False\n#test the function\nprint(check_equilateral(3,4,5)) #False\nprint(check_equilateral(6,6,6)) #True\nprint(check_equilateral(1,1,1)) #True\nprint(check_equilateral(5,5,10)) #False ",
        "generated_testcode": "assert check_equilateral(3, 3, 3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    area = b * h\n    return area\n\n#Test the function with values\nprint(parallelogram_area(8,5) == 40)\nprint(parallelogram_area(12,6) == 72)\nprint(parallelogram_area(4,4) == 16)\n\n\n#The function looks good! It takes in the parameters base and height, multiplies them to get the area, and returns the value. Let's move on to the next question. ",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n\n# Write a function to calculate the area of a triangle given its base and height.\ndef triangle_area(b,h):\n    pass\n\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n#testing the function\nprint(check_Equality(\"abcba\"))\nprint(check_Equality(\"abcd\"))\nprint(check_Equality(\"python\"))\nprint(check_Equality(\"Java\")) ",
        "generated_testcode": "assert check_Equality(\u201cabc\u201d) == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_elements = max_val - min_val + 1\n    count = [0] * range_of_elements\n    output = [0] * len(my_list)\n\n\n    for i in range(len(my_list)):\n        count[my_list[i] - min_val] += 1\n\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n\n    for i in my_list:\n        output[count[i - min_val] - 1] = i\n        count[i - min_val] -= 1\n\n\n    return output\n\n\n\nmy_list = [4, 2, 1, 7, 6, 5, 3, 2, 1]\nprint(counting_sort(my_list))\n",
        "generated_testcode": "assert counting_sort([\"apple\", \"banana\", \"orange\", \"pear\", \"grape\", \"apple\"]) == [\"apple\", \"apple\", \"banana\", \"grape\", \"orange\", \"pear\"]\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if r!=1:\n        return a * (((r**n) - 1)/(r-1))\n    else:\n        return n*a\n\na=int(input(\"Enter the first term of GP: \" )\nn=int(input(\"Enter the value of n: \"))\nr=int(input(\"Enter the common ratio: \"))\ntn=tn_gp(a,n,r)\nprint(\"The tn term of geometric series is: \",tn) ",
        "generated_testcode": "assert tn_gp(1, 5, 2) == 32\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"This function takes a number as input and returns its reverse\"\"\"\n    rev = 0    \n    while num > 0:\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    return rev\n\ndef one_less_than_twice_reverse(num):\n    \"\"\"This function checks if a number is one less than twice its reverse\"\"\"\n    if (num-rev(num)) == 1:\n        return True\n    else:\n        return False\n\n#Testing the function\nprint(one_less_than_twice_reverse(123)) #True\nprint(one_less_than_twice_reverse(531)) #False\nprint(one_less_than_twice_reverse(235)) #True\nprint(one_less_than_twice_reverse(234)) #False ",
        "generated_testcode": "assert rev(123) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr = [str(x) for x in arr] \n    arr.sort(reverse=True) \n    return int(''.join(arr))\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        n = int(input())\n        arr = list(map(int, input().split())[:n])\n        print(find_Max_Num(arr,n))\n\nif __name__ == \"__main__\":\n    main()\n\n# T = int(input())\n# for i in range(T):\n#     n = int(input())\n#     arr = list(map(int, input().split())[:n]\n#     arr = [str(x) for x in arr] \n#     arr.sort(reverse=True) \n#     print(int(''.join(arr))\n\n# Sample Input \n# 2\n# 3\n# 1 3 30 34 5 9\n# 4\n# 54 546 548 60 87 309\n\n# Sample Output\n# 95433034\n# 98765454301 ",
        "generated_testcode": "assert find_Max_Num(arr,n) == expected_output\n\n# Example:\narr = [1, 4, 3, 5, 8, 7]\nn = len(arr)\nprint(find_Max_Num(arr, n)) # Output: 87541 ",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if (x < 0 and y > 0) or (x > 0 and y < 0): \n        return True\n    else: \n        return False\n# test the function with some examples \nprint(opposite_Signs(5, -6)) # True \nprint(opposite_Signs(-5, -6)) # False \nprint(opposite_Signs(-5, 6)) # True \nprint(opposite_Signs(5, 6)) # False \nprint(opposite_Signs(-5, 0)) # False ",
        "generated_testcode": "assert opposite_Signs(5, -6) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    n = n * 2\n    a, b, c = 1, 3, 1\n    count = 0\n    while a < n:\n        count += 1\n        n, a, b = n - b, b, a + 8 + b\n    return count\n\n# Test the function with sample inputs\nprint(is_octagonal(1)) # 1\nprint(is_octagonal(2)) # 2\nprint(is_octagonal(3)) # 4\nprint(is_octagonal(4)) # 6\nprint(is_octagonal(5)) # 10\nprint(is_octagonal(6)) # 15\nprint(is_octagonal(7)) # 22\nprint(is_octagonal(8)) # 26\nprint(is_octagonal(9)) # 37\n\n",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 0\n    hs = set()\n    for i in range(n): \n        hs.add(arr[i])\n        if (arr[i] - 1) not in hs: \n            max_len = max(max_len, len(hs)) \n    return max_len ",
        "generated_testcode": "assert max_len_sub([1, 5, 3, 10, 2, 16, 2, 7, 14, 5, 3, 12] ) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)):\n        sum = 0\n        for j in range(i, len(s)):\n            sum += int(s[j])\n            if sum == j-i+1:\n                count += 1\n    return count\nn = int(input(\"Enter the length of the string: \"))\ns = input(\"Enter the string: \")\nprint(\"Number of substrings with sum of digits equal to their length: \", count_Substrings(s,n)) ",
        "generated_testcode": "assert count_Substrings(123, 3) == 2 # Explanation: 1+2+3 = 6 and 12+3 = 15 are the only substrings with this property. ",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(xs) == 0:\n        return None\n    else:\n        min_num = xs[0]\n        for num in xs:\n            if num < min_num:\n                min_num = num\n        return min_num\n\n# Test case\nprint(smallest_num([3, 4, 5, 1, 2, -1, 0, 9])) # Expected output: -1\nprint(smallest_num([]) ) # Expected output: None ",
        "generated_testcode": "assert smallest_num([3, 5, 2, 1, 8, 6, 4]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1] - test_list[0]\n    min_val = test_list[0]\n    for i in range(1, len(test_list)):\n        diff = test_list[i] - min_val\n        if diff < 0:\n            min_val = test_list[i]\n        elif diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Test the function with the sample inputs\nprint(max_difference((1, 2, 3, 10, 2, 4, 8, 1, 6, 10, 23))) # Output: 22\nprint(max_difference((1, 2, 3, 10, 2, 4, 18, 1, 6, 10, 23, 22, 35))) # Output: 33\nprint(max_difference((10, 2, 3, 1, 7, 2, 1, 6, 20, 23, 11, 9))) # Output: 19 ",
        "generated_testcode": "assert max_difference(()) == None\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1])\n\n# Example usage:\n# subjectmarks = [('Maths', 90), ('Science', 85), ('Social', 95), ('English', 80)]\n# sorted_list = subject_marks(subjectmarks)\n# print(sorted_list) # Output: [('Maths', 90), ('English', 80), ('Science', 85), ('Social', 95)]\n\n\n# Write a function to sort a list of tuples by the second element in descending order.\ndef subject_marks_descending(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n# Example usage:\n# subjectmarks = [('Maths', 90), ('Science', 85), ('Social', 95), ('English', 80)]\n# sorted_list = subject_marks_descending(subjectmarks)\n# print(sorted_list) # Output: [('Social', 95), ('Science', 85), ('English', 80), ('Maths', 90)] ",
        "generated_testcode": "assert subject_marks([('Maths', 90), ('Science', 80), ('English', 85), ('Social', 95)] ) == [('Social', 95), ('Maths', 90), ('English', 85), ('Science', 80)]\n\n\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# test the function\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(recursive_list_sum(my_list)) # output: 25\n\n\n# write a function of recursion to calculate factorial\ndef recursive_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * recursive_factorial(n-1)\n\n# test the function\nprint(recursive_factorial(5)) # output: 120\n\n# write a function of recursion to find the fibonacci sequence\ndef recursive_fibonacci(n):\n    if n <= 1:\n        return n\n    else:\n        return recursive_fibonacci(n-1) + recursive_fibonacci(n-2)\n# test the function\nprint(recursive_fibonacci(6)) # output: 8 ",
        "generated_testcode": "assert recursive_list_sum([] ) == 0\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n# test the function\nmy_list = [3, -5, 8, 10, -2, 0, 1, -7, 4, -3, 6]\nprint(pos_count(my_list)) # Output: 3 ",
        "generated_testcode": "assert pos_count([]), 0\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    bell = [[0 for j in range(n+1)] for i in range(n+1)]   \n    bell[0][0] = 1\n    for i in range(1, n+1):  \n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]  \n        for j in range(i, n+1):  \n            bell[i][j] = bell[i][j-1] + bell[i-1][j]  \n    return bell[n][0] ",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not A:\n        return False\n    return (all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)) )\n\n\n# Test cases\nprint(is_Monotonic([1,2,3,4,5,6,7])) # True\nprint(is_Monotonic([6,5,4,3,2,1])) # True\nprint(is_Monotonic([1,3,2,4,5,6])) # False\nprint(is_Monotonic([1,2,3,4,5,4,6])) # True\nprint(is_Monotonic([1,2,2,3,4,5])) # True\nprint(is_Monotonic([1,2,3,4,3,5])) # False ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    len_s = len(s)\n    for i in range(len(l) - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False\n\nl = [1,2,3,4,5,6,7,8,9]\ns = [4,5,6]\nprint(is_sublist(l, s)) # Output: True\n\ns = [1,2,3,4,5]\nprint(is_sublist(l, s)) # Output: True\ns = [10,11,12]\nprint(is_sublist(l, s)) # Output: False\ns = [5,6,7,8,9]\nprint(is_sublist(l, s)) # Output: True\ns = [1,3,5]\nprint(is_sublist(l, s)) # Output: False ",
        "generated_testcode": "assert is_sublist([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], [\"banana\", \"cherry\"]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Get the length of the first tuple\n    n = len(Input[0])\n    for i in range(1, k):\n        # If the length of any tuple is not equal to the first tuple, return False\n        if len(Input[i]) != n:\n            return False\n    return True\n\n# Test the function with some example tuples\nprint(find_equal_tuple(((('apple', 'banana', 'cherry'), ('kiwi', 'orange', 'mango'), ('pear', 'grape'), ('kiwi', 'peach', 'pear', 'banana'))) # False\nprint(find_equal_tuple(((('apple', 'banana', 'cherry'), ('kiwi', 'orange', 'mango', 'peach'), ('pear', 'grape', 'grapes')) # True ",
        "generated_testcode": "assert find_equal_tuple(({(1, 2, 3), (4, 5, 6), (7, 8, 9)}, 3) == True)\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            sorted = True\n            gap = 1\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n            i += 1\n\n    return nums\n\n# Example usage:\nnums = [5, 3, 8, 2, 9, 1, 4, 6, 7]\nsorted_nums = comb_sort(nums)\nprint(sorted_nums)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert comb_sort(nums=[4, 2, 6, 1, 9, 7, 3, 8, 5, 0, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 0: \n        return False\n    for i in range(int(n/2)+1): \n        x = i*i \n        y = n - x \n        if int(y**0.5)**2 == y: \n            return True\n    return False\n# Test the function with some examples\nprint(dif_Square(12)) # True \nprint(dif_Square(13)) # True\nprint(dif_Square(27)) # True \nprint(dif_Square(29)) # False ",
        "generated_testcode": "assert dif_Square(121) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[^\\w\\s]+|_')\n    return pattern.split(text)\n\ntext = \"This_is_a_test-string,_with_multiple@delimiters.\"\nresult = multiple_split(text)\nprint(result)\n\n# Output: ['This', 'is', 'a', 'test', 'string', 'with', 'multiple', 'delimiters'] ",
        "generated_testcode": "assert multiple_split(text=\"Hello, world! This is a test string.\") == [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\", \"string\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    colors = colors.split()\n    patterns = patterns.split()\n    # check if both the lists are of equal length\n    if len(colors) != len(patterns):\n        return False\n    # create a dictionary to store the color-pattern mapping\n    mapping = {}\n    for i in range(len(colors)):\n        if colors[i] not in mapping:\n            mapping[colors[i]] = patterns[i]\n        else:\n            # check if the pattern is same for the same color\n            if mapping[colors[i]] != patterns[i]:\n                return False\n    # check if the pattern is same for all the colors\n    if len(set(patterns)) == len(set(mapping.values()):\n        return True\n    else:\n        return False\n\n# test the function\nprint(is_samepatterns(\"red orange orange purple\", \"solid stripes solid stripes\")) # True\nprint(is_samepatterns(\"red orange red\", \"solid stripes solid\")) # False\nprint(is_samepatterns(\"red white red\", \"solid stripes solid\")) # True ",
        "generated_testcode": "assert is_samepatterns([\"red\", \"green\", \"blue\", \"yellow\"], [\"a\", \"b\", \"c\"]) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n\n#test the function with sample data\ntest_list = [(2, 6, 8), (3, 9, 12), (12, 18, 24), (15, 30), (21, 36), (10, 20, 30), (12, 16, 24)]\nK = 6\nprint(find_tuples(test_list, K) # Output: [(12, 18, 24), (12, 16, 24)] ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (12, 15, 18), (21, 24, 27), (10, 20, 30)], 6) == [(12, 15, 18), (24, 30, 36)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if m<1 or n<1:\n        return 0\n    count=0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i==j:\n                count+=1\n            elif i>j:\n                count+=1\n                m-=1\n                n-=1\n            elif j>i:\n                count+=i\n    return count\n\n#test the function with example inputs\nprint(count_Squares(2,3)) #should return 2\nprint(count_Squares(4,5)) #should return 9\nprint(count_Squares(7,7)) #should return 25\nprint(count_Squares(1,2)) #should return 1\nprint(count_Squares(0,5)) #should return 0 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0 \n    odd_sum = 0 \n    for i in str(n): \n        if int(i) % 2 == 0: \n            even_sum += int(i) \n        else: \n            odd_sum += int(i) \n    return even_sum - odd_sum \n\n# Test the function with some values \nprint(is_Diff(123456789)) # Output: 7 \nprint(is_Diff(11111111111)) # Output: 0 \nprint(is_Diff(2222222222)) # Output: 0 \nprint(is_Diff(123345)) # Output: 2 ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0, n + 1): \n        # Check if set bits are odd or not \n        if bin(i).count('1') % 2 != 0: \n            count += 1\n    return count\n\n# Test the function with an example \nn = 10\nprint(count_With_Odd_SetBits(n)) # Output: 5 ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 4\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n\n#Test the function with some examples:\nprint(word_len(\"hello\")) #True\nprint(word_len(\"python\")) #True\nprint(word_len(\"computer\")) #False\nprint(word_len(\"algorithm\")) #False\nprint(word_len(\"programming\")) #False ",
        "generated_testcode": "assert word_len(\u201chello\u201d) == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (n + 1) * (n + 2) // 6 ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as input and returns a tuple of tuples, where each inner tuple contains corresponding elements of the input tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i], test_tup2[i]),)\n    return result\n\n\n# test the function with two tuples\ntup1 = (1, 2, 3)\ntup2 = ('a', 'b', 'c')\nprint(zip_tuples(tup1, tup2)) # Output: ((1, 'a'), (2, 'b'), (3, 'c')) ",
        "generated_testcode": "assert zip_tuples((\"abc\", (1, 2, 3)) == ((\"a\", 1), (\"b\", 2), (\"c\", 3))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14\n    volume = (4/3) * pi * r**3\n    return volume\n\n# test the function with a radius of 5\nprint(volume_sphere(5)\n\n# test the function with a radius of 3.5\nprint(volume_sphere(3.5) ",
        "generated_testcode": "assert volume_sphere(5) == 523.6\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    pass\n\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0  \n    for i in strr:  \n        sum += ord(i)  \n    return chr(sum)  \n\n# test the function with sample input  \nstrr = \"hello\"\nprint(get_Char(strr)) ",
        "generated_testcode": "assert get_Char(\u201cabc\u201d) == \u201cabcd\u201d\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    # Initialize a list with the first three numbers of the sequence\n    sequence = [0, 1, 1]\n    # Iterate from 3 to n and generate the next number in the sequence\n    for i in range(3, n+1):\n        # The next number is the sum of the two previous numbers (with a bitwise XOR)\n        next_num = sequence[i-1] ^ sequence[i-2]\n        # If the next number is 0, it means we reached the end of the sequence\n        if next_num == 0:\n            return \"End of sequence\"\n        # Otherwise, append the next number to the list\n        sequence.append(next_num)\n    return sequence[n]\n\n# Test the function with some examples\nprint(sequence(1)) # Should print 1\nprint(sequence(2)) # Should print 1\nprint(sequence(3)) # Should print 2\nprint(sequence(4)) # Should print 3\nprint(sequence(5)) # Should print 4\nprint(sequence(6)) # Should print 7\nprint(sequence(7)) # Should print 13\nprint(sequence(8)) # Should print 23\nprint(sequence(9)) # Should print 34\nprint(sequence(10)) # Should print 55\nprint(sequence(11)) # Should print ",
        "generated_testcode": "assert sequence(1) == 1\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14\n    surface_area = 4 * pi * r ** 2\n    return surface_area\n\n# Example usage:\nradius = 5\nsurface_area_of_sphere = surfacearea_sphere(radius)\nprint(\"Surface area of sphere with radius\", radius, \"is\", surface_area_of_sphere)\n\n\n# Example output:\n# Surface area of sphere with radius 5 is 314.159926535897931354\n\n\n# The function takes in one parameter `r` which is the radius of the sphere and calculates the surface area using the formula `4*pi*r**2`. We then return the surface area to the caller. ",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1592653589793\n\n# The testing code should include at least 2 different test cases. ",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (2 * n - 1)) if n > 0 else 0\n\n# Test cases\nprint(centered_hexagonal_number(1))  # Output: 1\nprint(centered_hexagonal_number(3))  # Output: 15\nprint(centered_hexagonal_number(9))  # Output: 190\n\n\n# Solution:\n# A centered hexagonal number is a figurate number that extends like this:\n# 1, 7, 19, 37, 61, 91, 127, ...\n# We can observe that the centered hexagonal number at position n is given by the formula:\n# Hn = n(2n - 1)\n# where Hn is the nth centered hexagonal number. ",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Merge three dictionaries into a single dictionary\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n#Example usage:\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5}\ndict3 = {'f': 6, 'g': 7}\nprint(merge_dictionaries_three(dict1, dict2, dict3)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7} ",
        "generated_testcode": "assert merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'c': 4, 'd': 5, 'e': 6},\n    {'b': 3, 'f': 6}\n) == {'a': 1, 'b': 3, 'c': 4, 'd': 5, 'e': 6, 'f': 6}\n\n# Test case 1: Three dictionaries with common keys\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {}\n    for element in list1:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict\n\n# example usage:\nlist1 = [1, 2, 3, 4, 2, 5, 6, 1, 3, 2, 7, 8, 2, 9, 1, 1, 5]\nprint(freq_count(list1))  # Output: {1: 3, 2: 3, 3: 2, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1} ",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"orange\", \"banana\", \"apple\", \"cherry\", \"date\", \"date\"]) == {\"apple\": 3, \"banana\": 3, \"cherry\": 2, \"orange\": 1, \"date\": 2}\n\n\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(N-1, 0, -1):\n        if bin(N).count('1') == bin(i).count('1') and i < N:\n            return i\n    return None\n# Time Complexity: O(logN)\n\n# Test:\nprint(closest_num(10)) # 9 (1010 in binary is 1010, and the closest smaller number with same number of ones is 9, 1001)\nprint(closest_num(14)) # 12 (11110 in binary is 10110, and the closest smaller number with same number of ones is 11000)\nprint(closest_num(15)) # None (11111 is already the smallest number with 4 bits set, so there is no smaller number with same number of ones) ",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\nprint(len_log([\"apple\", \"banana\", \"orange\", \"kiwi\"]) # output: 6\nprint(len_log([\"car\", \"train\", \"boat\", \"plane\"]) # output: 5\nprint(len_log([\"hello\", \"world\", \"python\"]) # output: 5\n\n\n# One possible solution is to iterate over the list of words and compare the length of each word with the current maximum length found so far. If the length of a word is greater than the current maximum length, then update the maximum length to be the length of that word. At the end of the loop, return the maximum length. Here's the code:\r\n\r\n\r\n# Function to find the length of the longest word\r\ndef len_log(list1):\r\n    max_length = 0 # set max_length to 0\r\n    for word in list1:\r\n        if len(word) > max_length: # if length of word is greater than max_length\r\n            max_length = len(word) # update max_length to length of word\r\n    return max_length # return the maximum length found\r\n\r\n\r\n# Test the function with sample inputs\r\nprint(len_log([\"apple\", \"banana\", \"orange\", \"kiwi\"]) # output: 6\r\nprint(len_log",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"watermelon\"]) == 9\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n\n#Test the function with sample data\nstr1 = ['apple', 'banana', 'orange', 'watermelon', 'grape']\nsub_str = 'an'\nprint(find_substring(str1, sub_str)) # True\n\n\nstr1 = ['hello', 'world', 'hi', 'there']\nsub_str = 'z'\nprint(find_substring(str1, sub_str)) # False ",
        "generated_testcode": "assert find_substring([\"hello\", \"world\", \"hi\", \"python\"], \"py\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 10:\n        return False\n    str_n = str(n)\n    for i in range(1, len(str_n)-1):\n        if str_n[i] != '0' and str_n[i-1] == str_n[i] == str_n[i+1]:\n            return False\n    return True\n\n# Example usage:\n# print(is_undulating(1232105))  # True\n# print(is_undulating(123321))  # False\n# print(is_undulating(123456))  # False\n# print(is_undulating(12332100)) # True ",
        "generated_testcode": "assert is_undulating(123235321) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return a ** b\n\n#test the function\nprint(power(2,3))\nprint(power(5,2))\nprint(power(10,0)) # if b is zero, then a doesn't matter. It'll return 1\n\n\n# Write a function to calculate the factorial of a number.\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n#test the function\nprint(factorial(5))\nprint(factorial(0))\nprint(factorial(1))\n\n# Write a function to calculate the sum of a list of numbers\ndef sum(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + sum(lst[1:])\n\n#test the function\nprint(sum([1,2,3,4,5,6,7,8,9]))\nprint(sum([1]))\nprint(sum([])) #If list is empty, it'll return zero\n\n# Write a function to calculate the product of a list of numbers\ndef product(lst):\n    if len(lst) == 0:\n        return 1\n    else:\n        return lst[0] * product(lst[1:])\n\n#test the function\nprint(product([1,2,3,4,5,6,7,8,9]))\nprint(product([1]))\nprint(product([])) #",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    min_value = min(test_list, key=lambda x: x[1])\n    return min_value\n\n# Test the function\ntest_list = [(1, 5), (3, 2), (2, 4), (0, 1), (4, 3)]\nprint(index_minimum(test_list)) # Output: (0, 1) ",
        "generated_testcode": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8)] ) == (1, 4)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if lst == []:\n        return None\n    else:\n        min_len = len(lst[0])\n        for sublist in lst:\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n        return min_len\n# Example usage:\nlst = [[1, 2, 3, 4, 5], [6, 7], [8, 9, 10, 11, 12, 13], [14, 15, 16], [17, 18, 19]]\nprint(Find_Min_Length(lst))  # Output: 2 ",
        "generated_testcode": "assert Find_Min_Length([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"grape\"]) == 5\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n#test the function\nprint(divisor(12)) # should print 6\nprint(divisor(15)) # should print 4\nprint(divisor(20)) # should print 6 ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n    return count_dict\n\n# Test the function with sample data\nlist1 = [1,2,3,4,5,2,3,4,5,6,7,8,9,4,5,6,7,2,3,4,5,6,7,8,9,10,4,5,6,7,8,9,10]\nprint(frequency_lists(list1)) ",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"cherry\", \"date\", \"cherry\"]) == {\"apple\": 2, \"banana\": 2, \"cherry\": 3, \"date\": 1}\n\n\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(numbers) == 0:\n        return None\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return product/len(numbers)\n\n#test the function with some examples\nprint(multiply_num([1,2,3,4,5,6,7,8,9])) # Output: 252.0\nprint(multiply_num([0,2,4,6,8])) # Output: 0.0\nprint(multiply_num([])) # Output: None ",
        "generated_testcode": "assert multiply_num(list(range(1, 6)) == 120\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary\n    \n# Test the function with an example\nprint(decimal_to_binary(10)) # Output: '1010' \nprint(decimal_to_binary(23)) # Output: '1011111'\nprint(decimal_to_binary(50)) # Output: '1101100'\nprint(decimal_to_binary(242)) # Output: '11111101010' ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the next smallest palindrome of a given number.\n    If the number is already a palindrome, returns the next palindrome.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Checks if a number is palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\n# Test cases\nprint(next_smallest_palindrome(123))  # Output: 124\nprint(next_smallest_palindrome(124))  # Output: 1331\nprint(next_smallest_palindrome(877))  # Output: 888\nprint(next_smallest_palindrome(198))  # Output: 199\nprint(next_smallest_palindrome(199))  # Output: 201\nprint(next_smallest_palindrome(123321))  # Output: 123331\nprint(next_smallest_palindrome(123331))  # Output: 124421\nprint(next_smallest_palindrome(123456))  # Output: 125521\nprint(next_smallest_palindrome(12521))  # Output:",
        "generated_testcode": "assert next_smallest_palindrome(123) == 131\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort()\n    return arr[k-1]\n\n# Example usage:\narr = [7, 10, 4, 20, 3, 2, 15]\nn = len(arr)\nk = 3\nprint(kth_element(arr, n, k)) # Output: 7 ",
        "generated_testcode": "assert kth_element(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=9, k=3) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = word.split(\"_\")\n    return words[0] + \"\".join(w.capitalize() for w in words[1:])\n\n\n# Test cases\nprint(snake_to_camel(\"hello_world\"))\nprint(snake_to_camel(\"hello_world_two\"))\nprint(snake_to_camel(\"hello_world_three\"))\nprint(snake_to_camel(\"this_is_a_longer_example\"))\nprint(snake_to_camel(\"this_is_an_even_longer_example\"))",
        "generated_testcode": "assert snake_to_camel(snake_to_camel) == \"snakeToCamel\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif n < 2 * m:\n        return 0\n    else:\n        return (m * eulerian_num(n - 1, m - 1) + (n - m) * eulerian_num(n - 2, m)) % (10**9 + 7) # To avoid overflow error \n\n\n# Test the function with sample inputs\nprint(eulerian_num(5, 3)) # Output: 6\nprint(eulerian_num(6, 2)) # Output: 15\nprint(eulerian_num(7, 3)) # Output: 35 ",
        "generated_testcode": "assert eulerian_num(2, 2) == 6\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of lists of strings, sort each sublist in alphabetical order.\n\n    Example:\n    >>> sort_sublists([['pear', 'apple', 'orange'], ['banana', 'cherry', 'kiwi'], ['orange', 'pear', 'kiwi', 'apple']])\n    [['apple', 'pear', 'orange'], ['banana', 'cherry', 'kiwi'], ['apple', 'kiwi', 'orange']]\n    \"\"\"\n    return list(map(lambda x: sorted(x), input_list)\n\n# test cases\nprint(sort_sublists([['pear', 'apple', 'orange'], ['banana', 'cherry', 'kiwi'], ['orange', 'pear', 'kiwi', 'apple']))\nprint(sort_sublists([['dog', 'cat', 'zebra'], ['elephant', 'lion', 'ant'], ['bird', 'fish', 'turtle', 'lion'])) ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"aebdg\", \"aeppl\", \"aeerr\", \"aepph\", \"aeppt\"]\n# Test case 1: Test the function with a list of strings.\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n#Test the function\nlst = [True, False, True, False, True, False, True]\nprint(count(lst))  # Output: 3 ",
        "generated_testcode": "assert count([]), 0\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(list(test_list) + list(test_tup))\n\n\n# Test the function with the given list and tuple\ntest_list = [4, 5, 6]\ntest_tup = (1, 2, 3)\nprint(add_lists(test_list, test_tup)) # Output: (4, 5, 6, 1, 2, 3) ",
        "generated_testcode": "assert add_lists([\"apple\", \"banana\", \"cherry\"], (\"kiwi\", \"mango\", \"grapes\")) == (\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\", \"grapes\")\n\n# Test case 1: Testing with a list of strings and a tuple of strings\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(L,R+1):  \n        if all(c in \"0123456789ABCDEF\" for c in hex(i)[2:].upper()):  \n            count += 1 \n    return count \n  \n# Driver code to test the function  \nL = int(input(\"Enter the lower limit: \"))\nR = int(input(\"Enter the upper limit: \"))\nprint(\"The count of hexadecimal numbers in the given range is:\",count_Hexadecimal(L,R)) ",
        "generated_testcode": "assert count_Hexadecimal(1, 10) == 2\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    merged_list = []\n    i, j, k = 0, 0, 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    return merged_list\n\n# Test cases\nprint(merge_sorted_list([1,3,5,7,9],[2,4,6,8,10],[0,3,4,6,9])) # [0,1,2,3,3,4,4,5,6,6,7,8,9,9]\nprint(merge_sorted_list([1,3,5,7,9],[2,4,6,8,10],[0,3,4,6,9,12])) # [0,1,2,3,3,4,4,5,6,6,7,8,9,10]\n",
        "generated_testcode": "assert merge_sorted_list(num1=[1,3,5,7],num2=[2,4,6],num3=[0,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n\n# Test case 1: Test the function with 3 sorted lists of integers.\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(n): \n        if s[i]=='1':\n            count+=1\n    return count%2\ndef count_Rotation(s): \n    n=len(s)\n    if n<=1:\n        return 0\n    count=0\n    for i in range(n): \n        if s[i]=='0' and odd_Equivalent(s,n):\n            count+=1\n    return count\n#Driver code\ns=input()\nprint(count_Rotation(s)) ",
        "generated_testcode": "assert odd_Equivalent(1010101,5) == 3 # Testing for even length string\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Create a set of all values in the given range\n    full_set = set(range(strt_val, stop_val+1))\n    # Create a set of values in the test list\n    test_set = set(test_list)\n    # Subtract the test set from the full set to get the missing values\n    missing_set = full_set - test_set\n    # Convert the missing values to a sorted list\n    missing_list = sorted(list(missing_set))\n    # Initialize an empty list to store the ranges\n    ranges = []\n    # Loop through the missing values\n    for val in missing_list:\n        # Check if the current value is the start of a new range\n        if not ranges or val != ranges[-1][1]+1:\n            # If it is, create a new range with only the current value\n            ranges.append([val, val])\n        else:\n            # If it's not, extend the last range to include the current value\n            ranges[-1][1] = val\n    # Format the ranges as a string\n    result = ', '.join(f'{r[0]-1}-{r[1]}' if r[0] != r[1] else str(r[0]) for r in ranges)\n    return result\n\n# Example usage:\ntest_list = [1, 2, 3, 5, 6, 7, 9, 13, 14, 15, 16, 17]\nstrt_",
        "generated_testcode": "assert extract_missing([\"1-3\", \"5-8\", \"10-11\"], 1, 11) == [\"4\", \"9\"]\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        result.intersection_update(nestedlist[i])\n    return list(result)\n\n\nnestedlist = [[1, 2, 3, 4], [2, 4, 6], [3, 4, 5]]\nprint(common_in_nested_lists(nestedlist))  # Output: [4]\n\n\nnestedlist = [[1, 2, 3, 4, 5], [2, 4, 6, 7], [3, 4, 5, 8]]\nprint(common_in_nested_lists(nestedlist))  # Output: [4] ",
        "generated_testcode": "assert common_in_nested_lists(\n    [\n        [1, 2, 3, 4, 5],\n        [2, 3, 4, 5, 6],\n        [3, 4, 5, 6, 7],\n        [4, 5, 6, 7, 8]\n    ]) == [4, 5]\n\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return (2 * 3.14 * diameter) + (2 * 3.14 * diameter * height) \n\nprint(perimeter(5,4)) # Should print 47.12\nprint(perimeter(7,3)) # Should print 59.06\nprint(perimeter(2.5,8)) # Should print 47.12\n\n\n#explanation: \n#The perimeter of a cylinder is the sum of the circumference of its base (which is the diameter multiplied by pi) and the circumference of its side (which is the diameter multiplied by pi and the height). \n#The diameter is the distance around the circle at the top or bottom of the cylinder, and the height is the distance from one end to the other. ",
        "generated_testcode": "assert perimeter(5,10) == 78.139797567248060692\n\n# The perimeter of a cylinder with diameter 5 and height 10 is approximately 78.1398 (rounded to 8 decimal places). ",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:\nprint(check_integer(\"123\")) # True\nprint(check_integer(\"12.3\")) # False\nprint(check_integer(\"Hello\")) # False\nprint(check_integer(\"123.0\")) # True (0 is allowed after the integer)\nprint(check_integer(\"1 2 3\")) # False (No spaces allowed) ",
        "generated_testcode": "assert check_integer(123) == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n#test\ntest_list = [('apple', 'banana', 'cherry'), ('banana', 'orange', 'grapes'), ('apple', 'orange', 'grapes'), ('apple', 'banana', 'cherry', 'orange')]\nprint(assign_freq(test_list)) ",
        "generated_testcode": "assert assign_freq(()) == {}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if len(i) != 0:\n            return False\n    return True\n\n# Test the function with a sample list of dictionaries\nlist1 = [{}, {}, {}]\nlist2 = [{}, {'name': 'John', 'age': 30}, {}]\nlist3 = [{}, {}, {}]\nprint(empty_dit(list1)) # True\nprint(empty_dit(list2)) # False\nprint(empty_dit(list3)) # False ",
        "generated_testcode": "assert empty_dit([]), \"Empty list should return True\"\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if not nums:\n        return 0\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * 10 ** (len(nums) - i - 1)\n    return result\n\nprint(tuple_to_int((4, 3, 2, 1)) == 4321)  # True\nprint(tuple_to_int((1, 2, 3, 4, 5) == 12345)  # True\nprint(tuple_to_int((9, 9, 9) == 99)  # True\nprint(tuple_to_int((0, 0, 1, 2, 3) == 123)  # True\nprint(tuple_to_int((7, 8, 9) == 789)  # True ",
        "generated_testcode": "assert tuple_to_int(()) == 0\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Convert all possible elements in the list to float.\n    If an element cannot be converted to float, keep it as is.\n    \"\"\"\n    result = []\n    for element in test_list:\n        try:\n            result.append(float(element))\n        except ValueError:\n            result.append(element)\n    return result\n\n# Example usage:\nmy_list = [\"1.5\", \"2\", \"3.2\", \"five\", \"4\"]\nprint(list_to_float(my_list)) # [1.5, 2.0, \"five\", 4.0] ",
        "generated_testcode": "assert list_to_float([\"1\", \"2.5\", \"3\", \"hello\", \"4.2\", \"world\"]) == [1.0, 2.5, \"hello\", 4.2, \"world\"]\n\n\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = string.split() \n    return words ",
        "generated_testcode": "assert string_to_list(\u201chello\u201d) == [\u201ch\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    mid = 0\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if (mid > 0 and arr[mid] == arr[mid - 1]):\n            if (mid > 1 and arr[mid] == arr[mid - 2]):\n                if (arr[mid] != arr[mid - 3]):\n                    res = mid\n                    break\n                else:\n                    low = mid + 1\n            else:\n                high = mid - 1\n        elif (mid < n - 1 and arr[mid] == arr[mid + 1]):\n            if (mid < n - 2 and arr[mid] == arr[mid + 2]):\n                if (mid == 0 or arr[mid] != arr[mid - 1]):\n                    res = mid\n                    break\n                else:\n                    low = mid + 1\n            else:\n                res = mid\n                break\n        else:\n            res = mid\n            break\n    return res\n#Test the function with an example\narr = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\nn = len(arr)\nprint(search(arr, n)) # Output: 2 ",
        "generated_testcode": "assert search(arr,n) == 4\n# Testcase 1:\narr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9]\nn = len(arr)\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test the function\nprint(max_product_tuple([1, 4, -2, 3, 6, 7, -5, 0, -1])) # Output: 28\n\nprint(max_product_tuple([1, 10, -2, 3, 6, 7, 0, -1])) # Output: 60\nprint(max_product_tuple([1, 2, 3, 4, 5, 6, 7, 8])) # Output: 56\nprint(max_product_tuple([-1, -2, -3, -4, -5])) # Output: 20\nprint(max_product_tuple([-1, -2, 3, 4, 5, -6, 7])) # Output: 20 ",
        "generated_testcode": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8)] ) == 56\n\n\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    triplet_set = set()\n    count_set = set()\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        curr_sum = A[i] + A[left] + A[left + 1]\n        while left < right:\n            if curr_sum == sum:\n                triplet_set.add((A[i], A[left], A[right]) if A[i] < A[left] < A[right] else (A[i], A[right], A[left]))\n                count_set.add(A[i])\n                count_set.add(A[left])\n                count_set.add(A[right])\n                left += 1\n                right -= 1\n            elif curr_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return len(triplet_set) >= count\n\ndef find_triplet_with_sum(A, sum, count):\n    A.sort()\n    n = len(A)\n    if n < 3:\n        return False\n    for i in range(n - 2):\n        if check_triplet(A, n, sum - A[i], count):\n            return True\n    return False\n\n\n# Test\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1",
        "generated_testcode": "assert check_triplet(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=20, count=0) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        for j in range(1,i): \n            if(i%j==0): \n                sum+=1\n    if(sum==n): \n        return \"Smart Number\"\n    else: \n        return \"Not a smart number\"\n\n# Test the function with some examples\nprint(smartNumber(1)) #Output: Smart Number\nprint(smartNumber(2)) #Output: Smart Number\nprint(smartNumber(3)) #Output: Not a smart number\nprint(smartNumber(6)) #Output: Smart Number ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    def sum_of_divisors(n):\n        divisors = []\n        for i in range(1, n):\n            if n % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    amicable_sum = 0\n    for i in range(1, limit + 1):\n        sum_divisors = sum_of_divisors(i)\n        if sum_divisors != i and sum_of_divisors <= limit and sum_of_divisors != 1 and sum_of_divisors != i:\n            if sum_of_divisors == sum_of_divisors(sum_divisors):\n                amicable_sum += i + sum_divisors\n    return amicable_sum\n\nprint(amicable_numbers_sum(1000000))  # Output: 316237",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 392282\n\n# The sum of all amicable numbers from 1 to 100000 is 39282. ",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if a == 0 and b == 0:\n        return 0\n    elif a > 0 and b >= 0:\n        return math.degrees(math.atan(b/a))\n    elif a < 0 and b >= 0:\n        return 180 + math.degrees(math.atan(b/a))\n    elif a < 0 and b < 0:\n        return 180 + math.degrees(math.atan(b/a))\n    elif a == 0 and b < 0:\n        return 90\n    elif a > 0 and b < 0:\n        return 360 + math.degrees(math.atan(b/a))\n    elif a == 0 and b > 0:\n        return 90\n    else:\n        return math.degrees(math.atan(b/a))\n\n# example usage:\n# angle_complex(3,4) # output: 64.1077790002559197014\n# angle_complex(-3,4) # output: 1159.86289251777920966\n# angle_complex(-3,-4) # output: -125.13274122871834019\n# angle_complex(0,-4) # output: 90.0\n# angle_complex(3,-",
        "generated_testcode": "assert angle_complex(1,1) == 45.0\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    ones = 0\n    zeros = 0\n    max_diff = 0\n    for i in range(n: \n        if string[i] == \"1\": \n            ones += 1\n        else: \n            zeros += 1\n        diff = abs(ones - zeros)\n        if diff > max_diff: \n            max_diff = diff\n    ones = zeros = 0\n    return max_diff ",
        "generated_testcode": "assert find_length(10101100111) == 2\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum=0\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            sum+=i\n    return sum\na=int(input(\"Enter first number: \"))\nb=int(input(\"Enter second number: \"))\nprint(\"Sum of common divisors of\",a,\"and\",b,\"is\",sum(a,b))\n#example\n#Input: Enter first number: 12\n#       Enter second number: 15\n#Output: Sum of common divisors of 12 and 15 is 33 ",
        "generated_testcode": "assert sum(12,15) == 30 # True\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(y):\n        result += x\n    return result\n\n# Test the function with two numbers\nx = 5\ny = 3\nprint(multiply_int(x, y)) # Output: 15\n\n\n# Function to multiply two integers without using * operator\ndef multiply_int(x, y):\n    if y == 0:\n        return 0\n    elif y > 0:\n        return x + multiply_int(x, y-1)\n    else:\n        return -multiply_int(x, -y)\n\n# Test the function with two numbers\nx = 5\ny = 3\nprint(multiply_int(x, y)) # Output: 15\n\n# Test the function with negative numbers\nx = 5\ny = -3\nprint(multiply_int(x, y)) # Output: -15 ",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n\n\n# test the function with sample inputs\nprint(long_words(4, \"The quick brown fox jumps over the lazy dog\")) # should return ['jumps']\nprint(long_words(2, \"I am a bot, short and stout\")) # should return ['am', 'bot,', 'short', 'stout'] ",
        "generated_testcode": "assert long_words(5, ['apple', 'banana', 'orange', 'pear', 'pineapple', 'watermelon', 'kiwi', 'grape', 'strawberry']) == ['banana', 'orange', 'pear', 'pineapple', 'watermelon']\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    n = len(my_matrix)\n    # calculate the sum of first row\n    first_row_sum = sum(my_matrix[0])\n    # calculate the sum of each row\n    for row in range(1, n):\n        if sum(my_matrix[row]) != first_row_sum:\n            return False\n    # calculate the sum of each column\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += my_matrix[row][col]\n        if col_sum != first_row_sum:\n            return False\n    # calculate the sum of diagonals\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum != first_row_sum or diag2_sum != first_row_sum:\n        return False\n    return True\n\n# create a sample matrix\nmatrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\n# test the function\nif magic_square_test(matrix):\n    print(\"Magic Square\")\nelse:\n    print(\"Not a Magic Square\") ",
        "generated_testcode": "assert magic_square_test(\n    [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]) == True, \"Should return True\"\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count_dict = {}\n    max_num = nums[0]\n    max_count = 1\n    \n    for i in nums:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n            \n        if count_dict[i] > max_count:\n            max_count = count_dict[i]\n            max_num = i\n            \n    return max_num\n\n# Example usage:\nprint(max_occurrences([1, 2, 3, 4, 5, 2, 6, 7, 2, 3, 2, 1, 2, 2, 2, 2, 8, 9, 2]))  # Output: 2 ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\", \"cherry\", \"banana\"]) == \"banana\"\n\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    vowels_list = [i for i in str1 if i in vowels]\n    vowels_list.reverse()\n    vowels_list_iter = iter(vowels_list)\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str += next(vowels_list_iter)\n        else:\n            new_str += char\n    return new_str\n\n# Test the function with some examples\nprint(reverse_vowels(\"hello world\"))  # Output: \"holle wrold\"\nprint(reverse_vowels(\"AEiouytPMS\"))  # Output: \"eyuiotePMS\" ",
        "generated_testcode": "assert reverse_vowels(\"hello world\" ) == \"holle wrold\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    string = \"\".join(tup1)\n    return string\n\n# Test the function\ntup = ('h', 'e', 'l', 'l', 'o')\nprint(tup_string(tup))  # Output: hello ",
        "generated_testcode": "assert tup_string(()) == \"\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x<0,nums))\n\n#Example:\nnums = [-5,2,3,-8,10,-1,12]\nprint(sum_negativenum(nums)) # Output: -13\n\n\n#Explanation:\n#The lambda function filters the negative numbers from the list and then the sum function is applied to it to calculate the sum of negative numbers. ",
        "generated_testcode": "assert sum_negativenum(nums=[1, 2, 3, -4, 5, -6, 7, -8, 9]) == -13\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if p%2 == 0: #if p is even then last element will always be even\n        return True\n    else:\n        if n%2!=0: #if n is odd\n            arr.pop() #remove last element\n            if p%4 == 1: #if p is odd\n                return check_last(arr,n-1,p-1) #recursive call\n            else: #if p is even\n                return check_last(arr,n-1,p-2) #recursive call\n        else: #if n is even\n            arr.pop() #remove last element\n            return check_last(arr,n-1,p) #recursive call\n            \n#Example:\narr = [1,2,3,4,5,6,7,8,9]\nn = len(arr)\np = 3\nprint(check_last(arr,n,p)) #Output: True ",
        "generated_testcode": "assert check_last ([1,2,3,4,5,6],4,2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return n * (2 * n - 1) if n > 0 else 0\n\n# Test cases\nprint(hexagonal_num(1)) # should return 1\nprint(hexagonal_num(2)) # should return 6\nprint(hexagonal_num(10)) # should return 190\nprint(hexagonal_num(0)) # should return 0\n\n\n# The formula for the nth hexagonal number is n * (2 * n - 1). \n# We can simply return this formula with an if statement to handle the case where n is 0 or less. ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if units<=100:\n        return units*0.5\n    else:\n        return (100*0.5)+(units-100)*0.75\n\n# take input of units used\nunits=int(input(\"Enter the units used: \"))\n# call the function and calculate the electricity bill\nbill=cal_electbill(units)\n# print the electricity bill\nprint(\"The electricity bill is\",bill)\n\n# Example:\n# Enter the units used: 80\n# The electricity bill is 40.0\n# Enter the units used: 120\n# The electricity bill is 100.0\n# Enter the units used: 200\n# The electricity bill is 125.0 ",
        "generated_testcode": "assert cal_electbill(100) == 5.5\n\n# Write 2 lines of testing code for the function.\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n\n# Example usage:\nnums1 = [1, 0, 3, 0, 4, 0, 6, 0, 7, 8, 0, 9]\nratio1 = zero_count(nums1)\nprint(ratio1) # Output: 0.4\n\nnums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nratio2 = zero_count(nums2)\nprint(ratio2) # Output: 0.0\n\nnums3 = [0, 0, 0, 0, 0, 0, 0]\nratio3 = zero_count(nums3)\nprint(ratio3) # Output: 1.0 ",
        "generated_testcode": "assert zero_count(nums=[1, 0, 3, 2, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9]) == 3/9\n\n\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return False\n    while n: \n        if n & 1: \n            n -= 1\n        n >>= 1\n    return n == 0\n\n# Test the function with some examples\nprint(is_Sum_Of_Powers_Of_Two(12)) # True\nprint(is_Sum_Of_Powers_Of_Two(15)) # False\nprint(is_Sum_Of_Powers_Of_Two(21)) # False\nprint(is_Sum_Of_Powers_Of_Two(24)) # True ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference\n\n# test the function\nprint(circle_circumference(5)\nprint(circle_circumference(7)\nprint(circle_circumference(3.2)\n\n\n# Define a function to find the area of a circle\ndef circle_area(r):\n    pi = 3.14159\n    area = pi * r**2\n    return area\n\n# test the function\nprint(circle_area(5)\nprint(circle_area(7)\nprint(circle_area(3.2) ",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if test_list.count(i) == 1:\n            result.append(i)\n    return result\n\n# test the function\ntest_list = (1, 2, 3, 4, 4, 5, 6, 5, 7, 8, 8, 9, 9, 10, 10)\nprint(extract_singly(test_list) ) ",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'c', 'd', 'h', 'i', 'e') == ('f', 'g', 'h', 'i')\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    def flip(arr, i):\n        return arr[:i+1][::-1] + arr[i+1:]\n\n    n = len(nums)\n    while n > 1:\n        max_index = 0\n        for i in range(n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        nums = flip(nums, max_index)\n        nums = flip(nums, n-1)\n        n -= 1\n    return nums\n\n# Example usage:\nnums = [4, 5, 2, 3, 1, 6, 7, 8]\nprint(pancake_sort(nums)) # Output: [1, 2, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert pancake_sort(nums=[4, 2, 5, 1, 3, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                for k in range(len(list3):\n                    if list2[j]==list3[k]:\n                        count+=1\n    return count\nlist1=[1,2,3,4,5,6]\nlist2=[2,4,6,8,9]\nlist3=[3,5,6,7,9]\nprint(count_samepair(list1,list2,list3)) #Output: 2 ",
        "generated_testcode": "assert count_samepair([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"cherry\", \"date\"], [\"cherry\", \"date\", \"elderberry\"]) == 2\n# Test case 1: The output should be 2 because \"banana\" and \"cherry\" appear in all three lists. ",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n\n# Test the function with a sample tuple\nInput = (1, 2, [3, 4, 5], 6, (7, 8, 9), [10, 11, [12, 13], 14], 15)\nprint(find_lists(Input))  # Output: 2 ",
        "generated_testcode": "assert find_lists(()) == 0\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(abs(arr[i]-arr[j]) for i in range(n) for j in range(n) if i!=j)\narr = [1,2,3,4,5,6]\nn = len(arr)\nprint(sum_Pairs(arr,n))\n\n#output: 30\n\n\n#explanation:\n#The sum of absolute differences in the given array is calculated by iterating over all possible pairs (i,j) such that i!=j and adding the absolute difference of arr[i] and arr[j] to a variable sum. The sum is then returned as the final result. \n#For the given example, the sum of absolute differences will be |1-2| + |1-3| + |1-4| + |1-5| + |1-6| + |2-1| + |2-3| + |2-4| + |2-5| + |2-6| + |3-1| + |3-2| + |3-4| + |3-5| + |3-6| + |4-1| + |4-2| + |4-3| + |4-5| + |4-6| + |5-1| + |5-2| + |5-3| + |5-4| + |5-6| + |6-1| + |6-2| + |6-3| + |6-4| + |6-5| = 30. ",
        "generated_testcode": "assert sum_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1,2,3,4,5]\nn = len(arr)\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_diff = arr[1] - arr[0] \n    min_element = arr[0] \n    max_element = arr[0] \n    for i in range(1, n): \n        if arr[i] < min_element: \n            min_element = arr[i] \n        else: \n            if arr[i] - min_element > max_diff: \n                max_diff = arr[i] - min_element \n        if arr[i] > max_element: \n            max_element = arr[i] \n        elif arr[i] - max_element > max_diff: \n            max_diff = arr[i] - max_element \n    return max_diff ",
        "generated_testcode": "assert max_Abs_Diff(arr,n) == 4\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_ascii = 0\n    for char in str1:\n        ascii_value = ord(char)\n        sum_ascii += ascii_value\n    return sum_ascii\n\n# example\nprint(ascii_value_string(\"hello\")) # 532\n\n\n# Using built-in function sum() and map()\ndef ascii_value_string(str1):\n    return sum(map(ord, str1))\n\n# example\nprint(ascii_value_string(\"hello\")) # 532 ",
        "generated_testcode": "assert ascii_value_string(\u201chello\u201d) == 532\n# Test case 1: Testing with a small string\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = tri[m-1]\n    for i in range(m-2, -1, -1, -1): \n        for j in range(i+1): \n            dp[j] += max(dp[j], dp[j+1]) \n            tri[i][j] += dp[j] \n    return max(dp) ",
        "generated_testcode": "assert max_path_sum(\n    [\n        [1],\n        [2, 3],\n        [4, 5, 6],\n        [7, 8, 9, 10],\n        [11, 12, 13, 14]\n    ]) == 30\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = 0\n    while x > 0 : \n        max_sum += x % 10\n        x = x // 10\n    return max_sum\n\ndef max_sum_digits(num) : \n    if num < 10 : \n        return num\n    num = str(num)\n    for i in range(len(num) - 1) : \n        max_sum = 0\n        temp_sum = 0\n        for j in range(i+1) : \n            temp_sum += int(num[j])\n        max_sum = max(max_sum, temp_sum)\n        temp_sum = int(num[i])\n        for j in range(i+1, len(num)) : \n            temp_sum += int(num[j])\n            max_sum = max(max_sum, temp_sum)\n            temp_sum -= int(num[j-i])\n        max_sum = max(max_sum, temp_sum)\n    return max_sum\n\n# Testing\nprint(max_sum_digits(12345)) # Output: 16\nprint(max_sum_digits(123456789)) # Output: 27\nprint(max_sum_digits(1234567890)) # Output: 27\nprint(max_sum_digits(12345678909)) # Output:",
        "generated_testcode": "assert sum_digits_single(123) == (1, 23)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    maxLen = 0\n    dp = [1] * n\n    for i in range(1, n): \n        for j in range(i): \n            if abs(arr[i] - arr[j]) == 1: \n                dp[i] = max(dp[i], dp[j] + 1) \n                maxLen = max(maxLen, dp[i]) \n    return maxLen \n\n# Testing the code \narr = [4, 5, 6, 1, 2, 3, 7, 8, 9, 11, 12] \nn = len(arr) \nprint(\"Length of Longest subsequence with adjacent difference 1 is\", longest_subseq_with_diff_one(arr, n)) ",
        "generated_testcode": "assert longest_subseq_with_diff_one(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(a,c): \n        if i == b: \n            return True\n    return False \na = 1\nb = 2\nc = 100\nif does_Contain_B(a,b,c): \n    print(\"Present\") \nelse: \n    print(\"Not Present\") ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    while q != 0:\n        p, q = q, p%q\n    return p\n\ndef is_coprime(num):\n    for i in range(2, num):\n        if gcd(num,i) == 1:\n            return True\n        else:\n            return False\nprint(is_coprime(15)) #False\nprint(is_coprime(9)) #False\nprint(is_coprime(17)) #True ",
        "generated_testcode": "assert gcd(12,8) == 4\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i=0\n    j=0\n    c=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            c.append(a[i])\n            i+=1\n        else:\n            c.append(b[j])\n            j+=1\n    c+=a[i:]\n    c+=b[j:]\n    return c\ndef merge_sort(arr):\n    if len(arr)<=1:\n        return arr\n    else:\n        mid=len(arr)//2\n        left=arr[:mid]\n        right=arr[mid:]\n        left=merge_sort(left)\n        right=merge_sort(right)\n        return merge(left,right)\n\narr=[12,45,23,34,67,89,90,2,9,0,43,62]\narr=merge_sort(arr)\nprint(arr) ",
        "generated_testcode": "assert merge([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\"], [\"peach\", \"pear\", \"plum\", \"kiwi\", \"orange\"]) == [\"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"pear\", \"pear\", \"plum\"]\n\n\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Finds the vertex of a parabola given the coefficients a, b, and c\n    Returns a tuple (x_vertex, y_vertex)\n    \"\"\"\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (x_vertex, y_vertex)\n\n# Example usage:\n# >>> parabola_vertex(1, -5, 6)\n# (2.5, 1.0)\n# >>> parabola_vertex(2, -3, 1)\n# (1.5, -0.5) ",
        "generated_testcode": "assert parabola_vertex(1, -14, 10) == (-3, 0)\n\n\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    extracted = []\n    for i in range(len(nums)):\n        if i % N == 0:\n            extracted.append(nums[i])\n    return extracted\n\n# test the function with an example\ntwo_dimensional_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]\nN = 2\nresult = specified_element(two_dimensional_list, N)\nprint(result) # Output: [[1, 2, 3], [7, 8, 9], [13, 14, 15]]\n\n\n# The function takes in a two dimensional list and an integer N as input parameters. It initializes an empty list called extracted. Then, it iterates through the indices of the list, and if the index is divisible by N, it appends the element at that index to the extracted list. Finally, it returns the extracted list. ",
        "generated_testcode": "assert specified_element(nums, 1) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return n ^ (n & 0xAAAAAAAA) \n  \n# Driven code to test the function \nif __name__ == '__main__' : \n    n = 54 \n    print(bin(n)) \n    print(bin(even_bit_toggle_number(n)) ) # output 0b11110 ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 is 10 in binary, and after toggling the even bits, it becomes 1010, which is 10 in decimal.\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(int(i) for i in tuple_str)\n# Example usage:\nprint(tuple_int_str((\"1\", \"2\", \"3\", \"4\", \"5\")) # Output: (1, 2, 3, 4, 5)\n\n\n# Create a function named `find_longest_word` that takes a list of words as input and returns the length of the longest one.\ndef find_longest_word(words_list):\n    return len(max(words_list, key=len))\n# Example usage:\nwords = [\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]\nprint(find_longest_word(words)) # Output: 6 (because \"banana\" is the longest word in the list) ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    count = 1\n    prev = None\n    for i in range(len(list1):\n        if i == len(list1)-1:\n            if list1[i] == prev:\n                count += 1\n            else:\n                if prev is not None:\n                    result.append((prev, count))\n                result.append((list1[i], 1)\n        else:\n            if list1[i] == prev:\n                count += 1\n            else:\n                if prev is not None:\n                    result.append((prev, count)\n                prev = list1[i]\n                count = 1\n        if i == len(list1)-1 and count != 0:\n            result.append((list1[i], count)\n    return result\n\n#Example:\n#Input: [1,1,1,1,2,2,3,4,4,4,4,5]\n#Output: [(1,3),(2,2),(3,1),(4,3),(5,1)] ",
        "generated_testcode": "assert encode_list([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"d\",\"d\",\"d\",\"d\",\"d\"]) == [(\"a\",1),(\"b\",2),(\"c\",3),(\"d\",3)]\n\n\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    i = 0\n    j = n-1\n    while i<j:\n        if arr[i]!=arr[j]:\n            count+=(arr[j]-arr[i])//k\n            if (arr[j]-arr[i])%k!=0:\n                count+=1\n            i+=1\n            j-=1\n        else:\n            i+=1\n            j-=1\n    return count\n\n# Driver code\nn=int(input(\"Enter the size of array: \"))\narr = list(map(int,input(\"Enter the elements of the array: \".split()))\nk=int(input(\"Enter the value of k: \")\nprint(\"Minimum operations required to make all elements equal: \",min_Ops(arr,n,k)) ",
        "generated_testcode": "assert min_Ops(arr=[1, 5, 7, 2, 4, 8, 3], n=5, k=3) == 5\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if month in [\"September\",\"October\",\"November\",\"December\"]:\n        return \"Autumn\"\n    elif month in [\"March\",\"April\",\"May\"]:\n        return \"Spring\"\n    elif month in [\"June\",\"July\",\"August\"]:\n        return \"Summer\"\n    elif month in [\"January\",\"February\",\"March\"]:\n        return \"Winter\"\n    else:\n        if days > 31:\n            return \"Spring\"\n        elif days < 21:\n            return \"Winter\"\n        else:\n            return \"Fall\"\n\nprint(month_season(\"March\",31))\nprint(month_season(\"December\",31))\nprint(month_season(\"June\",30))\nprint(month_season(\"June\",1))\nprint(month_season(\"August\",28)) ",
        "generated_testcode": "assert month_season(1,1) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0 and b == 0:\n        return None, None\n    if a == 0:\n        return None, n/b\n    if b == 0:\n        return n/a, None\n    if n%(a*b) != 0:\n        return None, None\n    else:\n        return n/b, n/a\n\n# Test cases\nprint(solution(1, 2, 4)) # Output: (2.0, 0.0)\nprint(solution(2, 3, 12)) # Output: (2.0, 4.0)\nprint(solution(3, 4, 15)) # Output: (3.0, 5.0)\nprint(solution(4, 2, 10)) # Output: None, 2.5\nprint(solution(0, 2, 10)) # Output: None, 5.0\nprint(solution(2, 0, 10)) # Output: 5.0, None ",
        "generated_testcode": "assert solution (2, 3, 5) == (1, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # loop through each element in list1 and check if it is present in list2\n    for element in list1:\n        if element in list2:\n            # remove the element from list1\n            list1.remove(element)\n    return list1\n\n\n# test the function with sample inputs\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nlist2 = [2, 4, 6, 8]\nprint(remove_elements(list1, list2)) # Output: [1, 3, 5, 7] ",
        "generated_testcode": "assert remove_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"orange\"], [\"apple\", \"orange\"]) == [\"banana\", \"cherry\"]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n        \n# Test the function\nprint(sum_series(6)) # Should print 12 \nprint(sum_series(10)) # Should print 30\n\n\n# Write a recursive function to calculate the factorial of a number (n!).\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function\nprint(factorial(5)) # Should print 120 \nprint(factorial(0)) # Should print 1 \nprint(factorial(1)) # Should print 1 \nprint(factorial(6)) # Should print 720 ",
        "generated_testcode": "assert sum_series(4) == 4\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculate the area of a regular polygon given the side length\n    \"\"\"\n    import math\n    area = (l**2 * s)/(4 * math.tan(math.pi/s)\n    return area\n\n# Test the function\nprint(area_polygon(5, 4)) # should be 10.0265961578494469805\nprint(area_polygon(6, 8)) # should be 124.910036044215796264\nprint(area_polygon(3, 7.5) # should be 19.0457675329655746142 ",
        "generated_testcode": "assert area_polygon(5, 3) == 7.0740778276386, \"The area of a regular pentagon with side length 3 should be approximately 7.07\"\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef isSumSame(n1, n2):\n    if divSum(n1) == divSum(n2):\n        return True\n    else:\n        return False\n\nn1 = int(input(\"Enter first number: \"))\nn2 = int(input(\"Enter second number: \"))\nprint(isSumSame(n1, n2)) ",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)):\n        if (i == ord(str1[i]) - ord('a')) or (i == ord(str1[i]) - ord('A')):\n            count += 1\n    return count\n\n# Example usage:\nstr1 = \"HelloWorld\"\nprint(\"Count of characters at same position as in English alphabets:\", count_char_position(str1)) # Output: 2 ",
        "generated_testcode": "assert count_char_position(\u201cHello\u201d) == 2 # Testcase 1\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count=0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i]^A[j])%2==0: \n                count+=1\n    return count\n#Test the function with sample test cases\nA=[2,4,7,1,5,3]\nN=len(A)\nprint(find_even_Pair(A,N)) #Output: 3\nA=[1,3,5,7,9,12]\nN=len(A)\nprint(find_even_Pair(A,N)) #Output: 4\nA=[2,6,3,1,8,10]\nN=len(A)\nprint(find_even_Pair(A,N)) #Output: 5 ",
        "generated_testcode": "assert find_even_Pair(A=[1,2,3,4,5,6,7,8],N=4) == 2 # Returns 2 because (1^3) and (5^7) are the only pairs with xor as an even number. ",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n != 0: \n        n = n >> 1\n        count += 1\n    return 1 << count\n\n# Driver code to test the function with example values \nn = 10\nprint(next_Power_Of_2(n)) # Output: 16\nn = 20\nprint(next_Power_Of_2(n)) # Output: 32\nn = 25\nprint(next_Power_Of_2(n)) # Output: 32 ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = 0 \n    for i in range(len(a)): \n        if (a[i] == x): \n            freq+=1\n    return freq ",
        "generated_testcode": "assert frequency(a,x) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        p = [0, 1]\n        for i in range(2, n+1):\n            p.append(2*p[i-1] + p[i-2])\n        return p[n]\n\n# test the function\nprint(get_pell(0)) # 0\nprint(get_pell(1)) # 1\nprint(get_pell(2)) # 1\nprint(get_pell(3)) # 2\nprint(get_pell(4)) # 5\nprint(get_pell(5)) # 7\nprint(get_pell(6)) # 12\nprint(get_pell(7)) # 19\nprint(get_pell(8)) # 28\nprint(get_pell(9)) # 41\nprint(get_pell(10)) # 57 ",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_list = sum(list1[m:n+1])                                                                                                                                                                               \n    return sum_list \n\n# test the function with example                                                                                                                                                                     \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                    \nprint(sum_range_list(list1, 2, 4))  # should return 12\n\n\n# The above function will return the sum of numbers between the indices 2 and 4 (both inclusive) in the list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. The output will be 12 because 3+4+5+6=12. ",
        "generated_testcode": "assert sum_range_list(list1, 1, 3) == 10\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    p = 5 * a\n    return p\n\n# Test the function with a=5\nprint(perimeter_pentagon(5)) # Output: 25\n\n\n# Test the function with a=10\nprint(perimeter_pentagon(10)) # Output: 50 ",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n\n# Write a function to find the area of a triangle given the base and height.\ndef area_triangle(base, height):\n    pass\n\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n\n# Test the function\ns = \"standardize\"\nprint(count_occurance(s)) # 1\n\ns = \"thispythonstdcoding\"\nprint(count_occurance(s)) # 1\ns = \"thisstdcode is forstdcoding\"\nprint(count_occurance(s)) # 2\ns = \"python is a std language\"\nprint(count_occurance(s)) # 1\ns = \"std is a word\"\nprint(count_occurance(s)) # 1\ns = \"astd is not std\"\nprint(count_occurance(s)) # 0 ",
        "generated_testcode": "assert count_occurance(s) == 2 # Test case 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return ''.join(char for char in text if char.isalnum()) \n  \n#Example usage: \n#input string \ntext = \"Hello, World! 123 #how are you?\"\n#output: \"HelloWorld123howareyou\"\nprint(remove_splchar(text)) ",
        "generated_testcode": "assert remove_splchar(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello, World! 123\"\nexpected_output_string = \"HelloWorld123\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    d = {}\n    for k, v in l:\n        d.setdefault(k, []).append(v)\n    return d\n\n# Example usage:\n>>> l = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6)]\n>>> group_keyvalue(l)\n{'a': [1, 3, 6], 'b': [2, 4], 'c': [5]}\n\n\nWrite a function to convert a dictionary of lists into a list of dictionaries.\ndef dict_to_list(d):\n    l = []\n    for k, v in d.items():\n        for i in v:\n            l.append({k: i})\n    return l\n\n# Example usage:\n>>> d = {'a': [1, 3, 6], 'b': [2, 4], 'c': [5]}\n>>> dict_to_list(d)\n[{'a': 1}, {'a': 3}, {'a': 6}, {'b': 2}, {'b': 4}, {'c': 5}] ",
        "generated_testcode": "assert group_keyvalue([\"apple:3\", \"banana:2\", \"orange:4\", \"apple:1\", \"orange:3\"]) == {\"apple\": [\"3\", \"1\"], \"banana\": [\"2\"], \"orange\": [\"4\", \"3\"]}\n\n\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    parent_dict = {'}':'{', ')':'(', ']':'[',']':'['}\n    for i in str1:\n        if i in parent_dict.values():\n            stack.append(i)\n        elif i in parent_dict.keys():\n            if not stack or parent_dict[i] != stack.pop():\n                return False\n        else:\n            return False\n    return len(stack) == 0\n\n\nprint(is_valid_parenthese('({[]})'))\nprint(is_valid_parenthese('({[]}')) ",
        "generated_testcode": "assert is_valid_parenthese(\"()\" ) == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    p = a + b + c\n    return p\n\n#Test the function with some examples\nprint(perimeter_triangle(3,4,5) == 12) #True\nprint(perimeter_triangle(5,12,13) == 30) #True\nprint(perimeter_triangle(2,2,2) == 6) #False\nprint(perimeter_triangle(7,9,13) == 32) #True\nprint(perimeter_triangle(1,2,3) == 6) #False\n\n\n#The function is correct ",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n\n# Write a function to find the area of a triangle given the base and height.\ndef area_triangle(base, height):\n    pass\n\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    lcm_list = []\n    for i in range(L,R+1):\n        for j in range(L,R+1):\n            if i!=j:\n                lcm = find_lcm(i,j)\n                if lcm>=L and lcm<=R and lcm not in lcm_list:\n                    lcm_list.append(lcm)\n    if len(lcm_list) == 0:\n        return [-1]\n    return lcm_list\n\ndef find_lcm(a,b):\n    if a>b:\n        smaller = b\n    else:\n        smaller = a\n    for i in range(smaller, LCM(a,b)+1):\n        if i%a == 0 and i%b == 0:\n            return i\n        \ndef LCM(a,b):\n    if a>b:\n        greater = a\n    else:\n        greater = b\n    while True:\n        if greater%a == 0 and greater%b == 0:\n            lcm = greater\n            break\n        greater+=1\n    return lcm\n    \n#Example Usage:\nprint(answer(2,20)) #[2,4,6,12,20]\nprint(answer(2,10)) #[-1] ",
        "generated_testcode": "assert answer(1, 10) == (1, 10)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for pattern in patterns:\n        if pattern in text:\n            return pattern\n    return None\n\n#Example:\n#patterns = ['cat', 'dog', 'bird']\n#text = 'I have a dog and a cat and a bird'\n#print(string_literals(patterns,text)) # Output: 'dog' ",
        "generated_testcode": "assert string_literals([\"apple\", \"banana\", \"orange\"], \"I love apples and bananas but not oranges\") == [\"apple\", \"banana\"]\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    keith_nums = []\n    for i in range(1, x): \n        keith_nums.append(i) \n        keith_nums.append(i+1) \n        if sum(keith_nums) == x: \n            return True\n        keith_nums = keith_nums[1:]\n    return False \n# Example usage:\n# print(is_num_keith(19)) # True \n# print(is_num_keith(100)) # False ",
        "generated_testcode": "assert is_num_keith(19) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import math\n    R = 6373.0\n    slat = math.radians(slat)\n    slon = math.radians(slon)\n    elat = math.radians(elat)\n    elon = math.radians(elon)\n    dist_lat = elat - slat\n    dist_lon = elon - slon\n    a = math.sin(dist_lat/2)**2 + math.cos(slat)*math.cos(elat)*math.sin(dist_lon/2)**2\n    c = 2*math.atan2(math.sqrt(a),math.sqrt(1-a))\n    return R*c\n\n#Example usage:\ndistance_lat_long(42.886192, -78.89583, 42.88749, -78.89319) #returns 0.1898219333333179846 km.\n#This calculates the distance between (42.88192 N, -78.89583 W) and (42.8749 N, -78.89319 W) in kilometers. ",
        "generated_testcode": "assert distance_lat_long(40, -80, 50, -120) == 47.34\n\n# Write a function to calculate the area of a triangle given the base and height.\ndef triangle_area(base, height):\n    pass\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n1 = len(str1) \n    n2 = len(str2) \n    j = 0\n    for i in range(min(n1, n2): \n        if (str1[i] != str2[i]): \n            break\n        j += 1\n    return str1[:j] \n  \ndef common_prefix(lst): \n    prefix = lst[0] \n    for i in range(1, len(lst)): \n        prefix = common_prefix_util(prefix, lst[i]) \n        if prefix == \"\": \n            return \"\"\n    return prefix \n  \n# Driver code \nlst = [\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"] \nprint(common_prefix(lst)) # gee\n\n\nlst = [\"hello\", \"world\", \"helloworld\"] \nprint(common_prefix(lst)) # hellow\n\n\nlst = [\"python\", \"ruby\", \"java\"] \nprint(common_prefix(lst)) # \"\"\n\n\nlst = [\"apple\", \"apple\", \"apple\"] \nprint(common_prefix(lst)) # apple ",
        "generated_testcode": "assert common_prefix_util([\"abcdef\", \"abcef\", \"abxyz\"]), \"abc\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    upper_case = re.findall(r\"[A-Z]\", string)\n    lower_case = re.findall(r\"[a-z]\", string)\n    special_char = re.findall(r\"[\\W]\", string)\n    digit = re.findall(r\"[0-9]\", string)\n    return upper_case, lower_case, special_char, digit\n\n\n# test the function\nstring = \"Abc@1234#$%^\"\nresult = find_character(string)\nprint(\"Upper case characters :\", result[0])\nprint(\"Lower case characters :\", result[1])\nprint(\"Special characters :\", result[2])\nprint(\"Digits :\", result[3]) ",
        "generated_testcode": "assert find_character(string) == (2, 3, 1, 4) # Test case 1\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j] - arr[i] == k:\n                count += 1\n    return count\n\n# Test the function with an example\narr = [1, 5, 3, 6, 2, 7, 9, 8, 4]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k)) # Output: 2 ",
        "generated_testcode": "assert count_pairs(arr=[1, 5, 9, 3, 6, 8, 12, 4, 10], n=6, k=3) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a list and a number and returns a new list containing all the elements in the original list that are greater than the specified number.\n    \"\"\"\n    result = []\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result\n\n#test the function with an example\nprint(greater_specificnum([5,9,2,3,8,1,10],5))\n#Output: [9,8,10]\n\n\n#Example 2\nprint(greater_specificnum([-5,-10,0,10,100,5],0))\n#Output: [10,100] ",
        "generated_testcode": "assert greater_specificnum(list(range(10), 5) == [6, 7, 8, 9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function finds the focus of a parabola given the coefficients a, b and c.\n    \"\"\"\n    # Calculate the focus\n    focus = (-b) / (2 * a)\n    return focus\n\n# Test the function\nprint(parabola_focus(1, 2, 3))  # Output: -3.0\nprint(parabola_focus(2, 5, 2))  # Output: -2.0\nprint(parabola_focus(3, -6, 1)) # Output: 2.0 ",
        "generated_testcode": "assert parabola_focus(1, -14, 10) == (3, 0)\n\n\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    matched_patterns = []\n    for pattern in patterns:\n        if re.search(pattern, text) is not None:\n            matched_patterns.append(pattern)\n    return matched_patterns\n\n# Example usage:\ntext = \"hello world, how are you?\"\npatterns = [\"hello\", \"world\", \"how\"]\nprint(check_literals(text, patterns)) # Output: ['hello', 'world', 'how'] ",
        "generated_testcode": "assert check_literals(\n    \"The quick brown fox jumps over the lazy dog.\",\n    [\"the\", \"fox\", \"dog\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    L = [[0] * (n + 1) for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    index = L[m][n] \n    common_subsequence = [\"\"] * (index+1) \n    common_subsequence[index] = \"\" \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            common_subsequence[index-1] = X[i-1] \n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    return common_subsequence\n#Test the function with two sample sequences\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X) \nn =",
        "generated_testcode": "assert longest_common_subsequence([\"ABCDGH\", \"AEDFHR\"], 4, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n<2:\n        return True\n    for i in range(2,int(n**(1/2)+1):\n        j=i\n        while j<=n:\n            if i*j==n:\n                return True\n            j*=2\n    return False\n#test the function\nprint(prod_Square(10)) #True\nprint(prod_Square(12)) #False ",
        "generated_testcode": "assert prod_Square(16) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 0\n    while i < n: \n        if arr[i] > 0 and arr[i] <= n and arr[i] != arr[arr[i]-1]: \n            j = arr[i]-1\n            while arr[i] != arr[j] and arr[j]>0 and arr[j]<=n: \n                arr[i],arr[j] = arr[j],arr[i] \n                j = arr[i]-1\n        i += 1\n    for i in range(n): \n        if arr[i] != i+1: \n            return i+1\n    return n+1\n\n#Test the function with an example\narr = [3, 7, 1, 2, 6, 8, -1, 4, 5]\nn = len(arr) \nprint(\"First missing positive integer is \", first_Missing_Positive(arr, n)) ",
        "generated_testcode": "assert first_Missing_Positive(arr=[1,2,0],n=3) == 3\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if x1<0 or y1<0 or x2<0 or y2<0: \n        return 0\n    else: \n        return (x2-x1+1)*(y2-y1+1) \nx1,y1,x2,y2=map(int,input().split())\nprint(count_Intgral_Points(x1,y1,x2,y2)) \n# Test the function with sample input \n# Sample input:\n# 2 2 5 6 7\n# Output: 25 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,4,4) == 16\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if monthname3 == \"April\" or monthname3 == \"June\" or monthname3 == \"September\" or monthname3 == \"November\":\n        return 30\n    elif monthname3 == \"February\":\n        return 28\n    elif monthname3 == \"January\" or monthname3 == \"March\" or monthname3 == \"May\" or monthname3 == \"July\" or monthname3 == \"August\" or monthname3 == \"October\" or monthname3 == \"December\":\n        return 31\n    else:\n        return 31\n\n# Example usage:\n# print(check_monthnumber(\"February\"))  # Output: 28\n# print(check_monthnumber(\"June\"))    # Output: 30 ",
        "generated_testcode": "assert check_monthnumber(monthname3) == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    letter_present = False\n    digit_present = False\n    for i in range(len(str): \n        if str[i].isdigit(): \n            digit_present = True\n        elif str[i].isalpha(): \n            letter_present = True\n        if letter_present and digit_present: \n            return True\n    return letter_present and digit_present ",
        "generated_testcode": "assert check_String(\u201cHello123\u201d) == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Converting tuple into set to remove duplicates\n    unique_tup = set(test_tup)\n    # Converting set back to tuple\n    new_tuple = tuple(unique_tup)\n    return new_tuple\n\n# Test the function with sample input\ntest_tup = (4, 5, 6, 7, 8, 4, 3, 4, 2, 1, 9, 3, 5, 6, 7)\nprint(remove_tuple(test_tup)) ",
        "generated_testcode": "assert remove_tuple(('apple', 'banana', 'apple', 'orange', 'apple', 'grapes', 'orange') == ('apple', 'banana', 'orange', 'grapes')\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal_number = 0  \n    base = 1  \n    while (n > 0):  \n        decimal_number += (n % 10) * base  \n        n = n // 10  \n        base = base * 8   \n    return decimal_number\n\n# Test the function with an example octal number\noctal_number = 123\nprint(\"Octal number: \", octal_number)\nprint(\"Decimal number: \", octal_To_Decimal(octal_number)) ",
        "generated_testcode": "assert octal_To_Decimal(123) == 83\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    res = -1 # Initialize result \n    while (low <= high): \n        mid = (low + high) // 2 # Find mid element \n        if (x == arr[mid]): \n            res = mid # If x is found, update res and continue searching in left half \n            high = mid-1 \n        elif (x < arr[mid]): \n            high = mid-1 # Search in left half \n        else: \n            low = mid+1 # Search in right half\n    return res ",
        "generated_testcode": "assert first(arr,x,n) == 4\n# Test case 1: arr = [1,2,3,4,4,4,4,5,6,7], x = 4, n = 7\n# Output: 2\n\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if len(tup) != K:\n            result.append(tup)\n    return result\n\ntest_list = [(1, 2, 3), (4, 5, 6, 7, 8), (4, 5, 6), (7, 8, 9, 0, 5), (1, 2)]\nK = 2\nprint(remove_tuples(test_list, K))\n\n\n# Output: [(4, 5, 6, 7, 8), (7, 8, 9, 0, 5)]\n\n\n# The above function will take two parameters, a list of tuples and an integer K. It will iterate through each tuple in the list and check if the length is not equal to K, \n# it will append the tuple to the result list. Finally, it will return the result list with all the tuples removed with length K. ",
        "generated_testcode": "assert remove_tuples([(1, 2, 3), (4, 5, 6, 7), (9, 10), (11, 12, 13, 14), (15, 16, 17, 18)], 2) == [(4, 5, 6, 7), (11, 12, 13, 14)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup1)):\n        res += (test_tup1[i] ** test_tup2[i],)\n    return res\n\n#Test the function with sample input\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (3, 2, 5)\nprint(find_exponentio(test_tup1, test_tup2)) # Expected output: (8, 9, 109345120) ",
        "generated_testcode": "assert find_exponentio((2, 3) == 8\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in an ellipse with semimajor and semiminor axes a and b.\n    Formula: area = ab/4\n    \"\"\"\n    area = (a*b)/4\n    return area\n\n# Example usage:\n# print(largest_triangle(3,4)) # Output: 6.0\n# print(largest_triangle(5,2)) # Output: 5.0\n# print(largest_triangle(2,6)) # Output: 6.0 ",
        "generated_testcode": "assert largest_triangle(2,3) == 3.6, \"Test 1 failed\"\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 0\n    # convert n to binary and count number of zeros after \"1\"\n    while (n): \n        power += (n & 1 == 0)\n        n >>= 1\n    return 1 << power\n\n# example usage:\nn = 16\nprint(highest_Power_of_2(n)) # output: 8\nn = 15\nprint(highest_Power_of_2(n)) # output: 8\nn = 20\nprint(highest_Power_of_2(n)) # output: 16\n\n# time complexity is O(log n) as it involves only bitwise operations. ",
        "generated_testcode": "assert highest_Power_of_2(16) == 16\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = max(list1)\n    positions = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            positions.append(i)\n    return positions\n\n# Test the function with some sample data\nsample_list = [1, 2, 3, 4, 5, 5, 4, 3, 2, 1, 5, 6, 7, 8, 7, 6, 5]\nprint(position_max(sample_list))  # Output: [3, 4, 6, 7] ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [3, 4]\n\n\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0:\n        return True\n    else:\n        return all(elem == lst[0] for elem in lst) ",
        "generated_testcode": "assert chkList([\"apple\", \"apple\", \"apple\", \"apple\"]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\n# Test\nprint(remove_even(\"Hello World\"))  # \"Hlowrd\"\nprint(remove_even(\"Python\"))   # \"Pyt\"\nprint(remove_even(\"Computer\")) # \"Cmpr\"\nprint(remove_even(\"Java\"))    # \"Jv\" ",
        "generated_testcode": "assert remove_even(None) == None\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    xor = n1 ^ n2 \n    set_bits = 0 \n    while (xor) : \n        set_bits += xor & 1\n        xor >>= 1\n    return set_bits ",
        "generated_testcode": "assert hamming_Distance(12, 23) == 3\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in s : \n        if i == c : \n            count += 1\n    return count \n\n#Test the function with sample inputs: \ns = \"hello world\"\nc = \"o\"\nprint(count(s,c)) #Output: 2 ",
        "generated_testcode": "assert count(s,c) == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    inv_count = 0\n    n = len(test_tup)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_tup[i] > test_tup[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function with a sample tuple\ntest_list = (1, 20, 6, 2, 23, 11, 45)\nprint(inversion_elements(test_list)) # Output: 4 ",
        "generated_testcode": "assert inversion_elements(()) == []\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            result += (test_tup[i] + test_tup[0],)\n        else:\n            result += (test_tup[i] + test_tup[i+1],)\n    return result\n\n# Test the function with sample input\ntest_tup = ('Hello', 'Python', 'World', 'Programming', 'Language')\nprint(concatenate_elements(test_tup)) ",
        "generated_testcode": "assert concatenate_elements(('abc') == 'abcabc'\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0 for _ in range(n)] for _ in range(n)] \n    res = 1\n    for i in range(1, n): \n        for j in range(i): \n            if str[i] != str[j]:\n                dp[i][j] = dp[i-1][j] \n            else: \n                dp[i][j] = dp[i-1][j] + 1\n            res = max(res, dp[i][j]) \n    return res ",
        "generated_testcode": "assert find_longest_repeating_subseq(\u201cabcabc\u201d) == 2\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r\"^\\d+\\.\\d{1,2}$\"\n    if re.search(pattern, num):\n        return True\n    else:\n        return False\n\nimport re\n\n# Test cases\nprint(is_decimal(\"4.25\")) # True\nprint(is_decimal(\"3.567\")) # False\nprint(is_decimal(\"4\")) # False\nprint(is_decimal(\"-1.23\")) # True\nprint(is_decimal(\"12.345\")) # False\nprint(is_decimal(\"-4.56\")) # True\nprint(is_decimal(\"2.34j\")) # False\nprint(is_decimal(\"2.34.56\")) # False ",
        "generated_testcode": "assert is_decimal(12.34) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if not heap:\n        return None\n    else:\n        min_val = heap[0]\n        insert(heap,a)\n        pop(heap)\n        return min_val\n\n#Inserting a new element in the heap\ndef insert(heap,ele):\n    heap.append(ele)\n    n = len(heap)\n    i = n-1\n    while i>0 and heap[i]<heap[i//2]:\n        heap[i],heap[(i//2)] = heap[(i//2),i]\n        i = i//2\n\n#Pop the smallest element from the heap\ndef pop(heap):\n    if not heap:\n        return None\n    else:\n        n = len(heap)\n        heap[0],heap[n-1] = heap[n-1],heap[0]\n        min_val = heap[n-1]\n        del heap[n-1]\n        i = 0\n        n -= 1\n        while(i<n):\n            l = 2*i+1\n            r = 2*i+2\n            if l<n and r<n:\n                if heap[l]<heap[r]:\n                    if heap[i]>heap[l]:\n                        heap[i],heap[l] = heap[l],heap[i]\n                        i = l\n                    elif heap[i]>heap[r]:\n                        heap[i",
        "generated_testcode": "assert heap_replace(heap,a) == expected_output\n# Test case 1\nheap = [5, 3, 8, 1, 6, 2, 7]\na = 4\nexpected_output = [5, 4, 8, 1, 6, 2, 7, 3]\nheap_replace(heap,a)\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile('^[a-zA-Z0-9]+$')\n    if pattern.match(string):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_allowed_specific_char(\"abcde12345\")) # True\nprint(is_allowed_specific_char(\"abcde_12345\")) # False\nprint(is_allowed_specific_char(\"ABCDE12345\")) # True\nprint(is_allowed_specific_char(\"ABCDE12345!\")) # False\nprint(is_allowed_specific_char(\"12345\")) # True\nprint(is_allowed_specific_char(\"abcdefghijklmnopqrstuvwxyz\")) # True\nprint(is_allowed_specific_char(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")) # True\nprint(is_allowed_specific_char(\"1234567890\")) # True ",
        "generated_testcode": "assert is_allowed_specific_char(string) == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1): \n        # convert the number to binary and store it in binary_str \n        binary_str = bin(i) \n        # check if the oth and nth bits are set \n        if binary_str[-2] == '1' and binary_str[-1] == '1': \n            count += 1\n    return count \n  \n# test the function \nprint(count_Num(100)) # 5 ",
        "generated_testcode": "assert count_Num(10) == 2 # 1010 in binary is 5, so there are two numbers whose 1st and 3rd bits are set. ",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 4\n    return sum\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of fourth power of first\", n, \"natural numbers is:\", fourth_Power_Sum(n))\n\n\n# Test the function with n = 5\n# Output: The sum of fourth power of first 5 natural numbers is: 2255\n# Test the function with n = 10\n# Output: The sum of fourth power of first 10 natural numbers is: 3025\n# Test the function with n = 15\n# Output: The sum of fourth power of first 15 natural numbers is: 348000\n# Test the function with n = 20\n# Output: The sum of fourth power of first 20 natural numbers is: 6250000 ",
        "generated_testcode": "assert fourth_Power_Sum(4) == 100\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # unpack the tuples\n    tup1, tup2 = test_tup1, test_tup2\n    # concatenate the tuples\n    result = tup1 + tup2\n    # return the result\n    return result\n\n# test the function with sample inputs\nprint(concatenate_strings((\"Hello\", \"World\"))\nprint(concatenate_strings((\"Python\", \"Programming\"))\nprint(concatenate_strings((\"Tuples\", \"are awesome!\")) ",
        "generated_testcode": "assert concatenate_strings((\"Hello\", \"World\") == \"HelloWorld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    degree = radian * 180 / 3.14159\n    return degree\n\nprint(degree_radian(3.14159))\n\n\n# Write a function to convert degrees to radians.\ndef radian_degree(degree):\n    radian = degree * 3.14159 / 180\n    return radian\n\nprint(radian_degree(180))\n\n# Write a function to calculate the circumference of a circle.\ndef circumference(radius):\n    pi = 3.14159\n    return 2 * pi * radius\nprint(circumference(5))\n\n# Write a function to calculate the area of a circle.\ndef area(radius):\n    pi = 3.14159\n    return pi * radius ** 2\nprint(area(5))\n\n# Write a function to calculate the volume of a sphere.\ndef volume(radius):\n    pi = 3.14159\n    return (4/3) * pi * radius ** 3\nprint(volume(5))\n\n# Write a function to calculate the surface area of a sphere.\ndef surface_area(radius):\n    pi = 3.14159\n    return 4 * pi * radius ** 2\nprint(surface_area(5))\n\n# Write a function to calculate the area of a rectangle.\ndef area_rectangle(length, width):\n    return length * width\nprint(",
        "generated_testcode": "assert degree_radian(3.14159) == 176.72\n\n\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    decoded_list = []\n    for i in range(0, len(alist), 2):\n        for j in range(alist[i]):\n            decoded_list.append(alist[i+1])\n    return decoded_list\n\n\nalist = [2, 1, 4, 3, 4, 2, 5]\nprint(decode_list(alist)) #[1, 1, 4, 4, 4, 5, 5]\n\n\n#alternate solution\ndef decode_list(alist):\n    return [alist[i+1] for i in range(0, len(alist), 2) for j in range(alist[i])]\n\n\nalist = [2, 1, 4, 3, 4, 2, 5]\nprint(decode_list(alist)) #[1, 1, 4, 4, 4, 5, 5] ",
        "generated_testcode": "assert decode_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\n# Example usage:\nlist1 = [[1, 2, 3], [2, 3, 4], [4, 5]]\nlist2 = [[1, 2, 3], [2, 3, 4], [4, 5], [6, 7]]\nprint(check_subset_list(list1, list2))  # Output: True\n\n\nlist3 = [[1, 2, 3], [2, 3, 4], [6, 7]]\nprint(check_subset_list(list1, list3))  # Output: False ",
        "generated_testcode": "assert check_subset_list([\"apple\", \"banana\", \"cherry\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str: \n        if char in char_dict: \n            return char \n        else: \n            char_dict[char] = 1\n    return 'None'\n        \n# example\nprint(first_Repeated_Char('helloh')) # Output: h ",
        "generated_testcode": "assert first_Repeated_Char(\"abcabc\") == \"a\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    # Using Euclidean Algorithm \n    while B: \n        A, B = B, A % B \n    return A \n  \n# driver code  \nA = 50\nB = 20\nprint(\"Minimum operations required to make\",A,\"equal to\",B,\"is\",min_Operations(A,B)) ",
        "generated_testcode": "assert min_Operations(10, 15) == 5\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if K > len(test_tup):\n        return None\n    else:\n        sorted_tup = sorted(test_tup)\n        min_K = sorted_tup[:K]\n        max_K = sorted_tup[-K:]\n        return (min_K, max_K)\n\n\n# Test\ntest_tup = (5, 3, 8, 1, 2, 10, 7, 6, 4, 9, 11)\nK = 3\nprint(extract_min_max(test_tup, K)) # Output: ([1, 2, 3], [9, 10, 11]) ",
        "generated_testcode": "assert extract_min_max(('apple', 2) == None\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    special_char = \"., \"\n    count = 0\n    for i in text:\n        if i in special_char:\n            count += 1\n            if count == n:\n                return text.replace(i, \":\", count)\n    return text\n\ntext = \"Hello, how are you. I am fine.\"\nn = 2\nprint(replace_max_specialchar(text, n)) ",
        "generated_testcode": "assert replace_max_specialchar(text=\"Hello, world!\", n=1) == \"Hello: world!\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# Test the function with a list of numbers\nprint(first_even([3, 6, 1, 1, 9, 4, 5, 3, 2])) # 6\nprint(first_even([1, 3, 5, 8, 10, 2, 4])) # 8\nprint(first_even([2, 4, 6, 1, 3, 5])) # 2\nprint(first_even([1, 3, 5, 7])) # None ",
        "generated_testcode": "assert first_even(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a set of types of all the elements in the tuple\n    types = set([type(i) for i in test_tuple])\n    # check if the length of the set is 1 or not\n    if len(types) == 1:\n        return True\n    else:\n        return False\n# test the function with different tuples\nprint(check_type((1,2,3,4,5)) # True\nprint(check_type((\"Hello\", \"World\", \"Python\")) # True\nprint(check_type((\"Hello\", \"World\", 2) # False\nprint(check_type((\"Hello\", \"World\", None) # False ",
        "generated_testcode": "assert check_type(()) == True\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n\n# Test the function with an example\narr = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8]\nx = 4\nn = len(arr)\nif is_majority(arr, n, x):\n    print(\"Majority element present\")\nelse:\n    print(\"Majority element not present\") ",
        "generated_testcode": "assert is_majority(arr=[1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6], n=7, x=4) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n\n# test the function with some examples \nprint(count_Set_Bits(5)) # 2 \nprint(count_Set_Bits(7)) # 3 \nprint(count_Set_Bits(10)) # 2 ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if low > high: \n        return None\n    if high < low:\n        return None\n    if high == low: \n        return arr[low]\n    if high == low + 1: \n        return min(arr[low],arr[high])\n    \n    mid = int((low + high) / 2) \n    if arr[mid] > arr[high]: \n        return find_Min(arr, mid+1, high) \n    elif arr[low] < arr[mid]:\n        return find_Min(arr, low, mid) \n    else: \n        return find_Min(arr, low, mid-1) \n\ndef min_element(arr):\n    if len(arr) == 0:\n        return None\n    return find_Min(arr,0,len(arr)-1)\n\n#Example usage:\narr = [6, 7, 9, 10, 15, 19, 20, 21, 3, 4, 5]\nprint(min_element(arr)) #Output: 3\n\n#In this example, the minimum element in the array is 3. ",
        "generated_testcode": "assert find_Min(arr=[4,5,6,7,0,1,2,3],low=0,high=4) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n#Test the function with some examples\nprint(odd_values_string(\"Hello World\")) # \"HloWrd\"\nprint(odd_values_string(\"Python\")) # \"Pyt\"\nprint(odd_values_string(\"\")) # \"\" ",
        "generated_testcode": "assert odd_values_string(input_string) == expected_output_string\n\n# For example, if input_string is \"Hello World\", the expected output is \"HloWrd\"\n# The first character \"H\" has index 0, the second character \"e\" has index 1, the third character \"l\" has index 2, and so on. \n# Since 1 and 3 are odd indices, they are removed from the string. ",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<b and a<c: \n        return a \n    elif b<c: \n        return b \n    else: \n        return c \n# test the function with some values \nprint(min_of_three(2, 4, 1)) # Output: 1 \nprint(min_of_three(6, 10, 5)) # Output: 5 \nprint(min_of_three(8, 8, 8)) # Output: 8 \n\n\n# Write a function to find minimum of a list of numbers \ndef min_of_list(lst): \n    min_num = lst[0] \n    for num in lst: \n        if num < min_num: \n            min_num = num \n    return min_num \n# test the function with a list of numbers \nnumbers = [4, 7, 2, 1, 9, 3, 6] \nprint(min_of_list(numbers)) # Output: 1 ",
        "generated_testcode": "assert min_of_three(5, 10, 15) == 5\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(l,r+1):\n        if (n&i)!=0:\n            return False\n    return True\n# Example usage:\n# Input : n = 10, l = 2, r = 7\n# Output : False\n# Explanation : Since bit 3 is set in the range 2 to 7, the function returns False. ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    j = n-1\n    while i < j:\n        while arr[i] < 0 and i < n:\n            i += 1\n        while arr[j] >= 0 and j >= 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr\n\n\narr = [-1, 2, -3, 4, 5, -6, 7, 8, -9, 10]\nn = len(arr)\nre_arrange_array(arr, n)\nprint(arr) ",
        "generated_testcode": "assert re_arrange_array(arr=[-1, 2, -3, 4, 5, 6, -2, 8, -7, 0, 9], n=7) == [-1, -3, -2, -7, 0, 2, 4, 5, 6, 8, 9]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if not isinstance(str1, str) or not isinstance(char, str):\n        return \"Invalid input\"\n    return str1.replace(\" \",char)\n\n#Test the function with example string and character\nstring = \"Python is fun\"\nreplace_char = \"*\"\nprint(replace_blank(string, replace_char)) #Python*is*fun\n\n\nstring = \"Hello World\"\nreplace_char = \"%\"\nprint(replace_blank(string, replace_char)) #Hello%World\n\n\nstring = \"This is a test\"\nreplace_char = \"+\"\nprint(replace_blank(string, replace_char)) #This+is+a+test\n\n\n#The output should be:\n#Python*is*fun\n#Hello%World\n#This+is+a+test ",
        "generated_testcode": "assert replace_blank(\"I am a    string with    blank spaces\",'*') == \"I*am*a****string*with****blank*spaces\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Create a table to store the maximum sum of sub-triangle rooted at each node \n    max_sum = [0] * n \n    # Initialize the first element with the first element of the triangle \n    max_sum[0] = tri[0] \n    # Calculate the maximum sum of each sub-triangle rooted at each node \n    for i in range(1, n): \n        for j in range(i, -1, -1): \n            if j - 1 < 0: \n                left_sum = 0\n            else: \n                left_sum = max_sum[j - 1] \n            if j + 1 > i: \n                right_sum = 0\n            else: \n                right_sum = max_sum[j + 1] \n            max_sum[j] = tri[i] + max(left_sum, right_sum) \n    # Return the maximum sum of the sub-triangle \n    return max(max_sum) \n\n# Test the function with an example \ntri = [1, 5, 1, 3, 1, 8, 10, 3, 2, 1, 6, 1, 12] \nn = len(tri) \nprint(max_sum(tri, n)) ",
        "generated_testcode": "assert max_sum(\n    [\n        [1, 2, 3],\n        [4, 5, 6, 7],\n        [8, 9, 10, 11, 12],\n        [13, 14, 15, 16, 17]\n    ], 3) == 30\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Return the n largest items in the list\"\"\"\n    list1.sort(reverse=True)\n    return list1[:n]\n\n# Test the function with an example\ndata = [34, 12, 67, 89, 5, 102, 45, 23, 1, 6, 90, 99, 8, 76, 43]\nprint(larg_nnum(data, 3)) # Output: [90, 99, 89, 82] ",
        "generated_testcode": "assert larg_nnum(list1,n) == expected_output\n\n# Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n    pass\n\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 22/7\n    return 2*pi*r*h\n\n#Test the function with a radius of 10 and a height of 20\nprint(lateralsuface_cylinder(10,20))\n\n\n#Output: 157.08\n\n\n#Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    pi = 22/7\n    return pi * r**2 * h\n\n#Test the function with a radius of 10 and a height of 20\nprint(volume_cylinder(10,20))\n\n#Output: 6283.2\n\n#Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    pi = 22/7\n    return 1/3 * pi * r**2 * h\n\n#Test the function with a radius of 10 and a height of 20\nprint(volume_cone(10,20))\n#Output: 16683.2\n\n#Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n    pi = 22/7\n    return pi * r * (r + (r**2 + h**2)**0.5)\n\n#Test the function with a radius of 10 and a height of 20\nprint(surfacearea_cone(",
        "generated_testcode": "assert lateralsuface_cylinder(5, 10) == 78.53981634\n\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return l ** 3\n\n#Test the function\nprint(volume_cube(3))\n\n#Test the function with different values\nprint(volume_cube(2))\nprint(volume_cube(4))\nprint(volume_cube(10)) ",
        "generated_testcode": "assert volume_cube(3) == 27\n\n# Write a function to find the volume of a rectangular prism.\ndef volume_rectangular_prism(l, w, h):\n    pass\n\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return n | (n >> 1)\n\n#Example\n#n = 5 (which is 101 in binary)\n#5 | 101\n#   -------\n#   1010 (which is 6 in decimal)\n#so the function returns 6\n\n#n = 7 (which is 1111 in binary)\n#7 | 1101\n#   -------\n#   1111 (which is 7 in decimal)\n#so the function returns 7\nprint(even_bit_set_number(5)) #Output: 6\nprint(even_bit_set_number(7)) #Output: 7 ",
        "generated_testcode": "assert even_bit_set_number(10) == 10 # 1010 is 1010 in binary, so all even bits are set\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while N>=K:\n        N-=K\n        count+=1\n        N-=1\n    return count\n\nN = 12\nK = 5\nprint(No_of_Triangle(N,K))\n\n\n#Output: 2 ",
        "generated_testcode": "assert No_of_Triangle(5,3) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    record_dict = {}\n    for record in test_list:\n        name = record[0]\n        time = record[1]\n        if time in record_dict:\n            record_dict[time] += [name]\n        else:\n            record_dict[time] = [name]\n    return record_dict\n\n\n# Test cases\ntest_list = [('Alice', '10:00'), ('Bob', '12:00'), ('Joe', '10:00'), ('Jake', '12:00'), ('Bob', '15:00'), ('Alice', '15:00')]\nprint(check_occurences(test_list)) ",
        "generated_testcode": "assert check_occurences(test_list) == True\n\n# Test case 1: All records are unique\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j].strip(): \n                count += 1\n    return count \n\n# Test the function with an example string \nstr = \"Python is a programming language\"\nprint(number_of_substrings(str)) ",
        "generated_testcode": "assert number_of_substrings(\u201cabc\u201d) == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1:\n        return m\n    total = 0\n    for i in range(2,m+1):\n        total += get_total_number_of_sequences(i-1,n-1)\n    return total\n\ndef get_total_number_of_sequences_memo(m,n,memo={}): \n    if n == 1:\n        return m\n    if n in memo:\n        return memo[n]\n    total = 0\n    for i in range(2,m+1):\n        total += get_total_number_of_sequences_memo(i-1,n-1,memo)\n    memo[n] = total\n    return total\n\ndef get_total_number_of_sequences_dp(m,n): \n    dp = [0]*(n+1)\n    dp[1] = m\n    for i in range(2,n+1):\n        for j in range(1,m+1):\n            dp[i] += dp[i-1]\n    return dp[n]-1 ",
        "generated_testcode": "assert get_total_number_of_sequences(5, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    list1.pop()\n    list1.extend(list2)\n    return list1\n\nlist1 = [1,2,3,4,5,6,7,8]\nlist2 = [9,10,11,12]\nprint(replace_list(list1,list2))\n\n\n# output: [1, 2, 3, 4, 5, 6, 9, 10, 11, 12] ",
        "generated_testcode": "assert replace_list([\"a\",\"b\",\"c\"],[\"d\",\"e\"]) == [\"a\",\"b\",\"d\",\"e\"]\n\n# Test case 1: Test if the function replaces the last element of the list with another list\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr_3d = []\n    for i in range(m):\n        arr_2d = []\n        for j in range(n):\n            arr_1d = []\n            for k in range(o):\n                arr_1d.append('*')\n            arr_2d.append(arr_1d)\n        arr_3d.append(arr_2d)\n    return arr_3d\n\n# Test the function\nprint(array_3d(3,4,5)\n# Output: [\n#          [['*', '*', '*', '*', '*'],\n#          ['*', '*', '*', '*', '*'],\n#          ['*', '*', '*', '*', '*']\n#         ]\n# ]\n\n\n# 2. Write a function to print the elements of the above generated 3d array layer by layer.\ndef print_3d_array(arr_3d):\n    for i in range(len(arr_3d)):\n        for j in range(len(arr_3d[i])):\n            for k in range(len(arr_3d[i][j])):\n                print(arr_3d[i][j][k], end=' ')\n            print()\n        print()\n\n# Test the function\narr_3d = array_3d(3,4,5)\nprint_3d_array(arr_3d)\n# Output:\n# * * * * * * \n#",
        "generated_testcode": "assert array_3d(2,3,4) == [\n                        [\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ],\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ]\n                        ]\n                    ]\n\n# Write a function to print the above 3d array in a matrix form.\ndef print_3d_array(arr):\n    pass\n\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for char in str1:\n        count += 1\n    return count\n\nprint(count_charac(\"Hello World\"))\n\n\n# Using len() function\ndef count_charac(str1):\n    return len(str1)\n\nprint(count_charac(\"Hello World\")) ",
        "generated_testcode": "assert count_charac(\u201chello\u201d) == 5\n\n# Write a function to count the number of vowels in a string.\ndef count_vowels(str1):\n    pass\n\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    lst = sorted(lst, key=lambda x: x[0])\n    return lst \n\n# Testing the function with sample input \nlst = [(3, 'a'), (1, 'b'), (2, 'c'), (3, 'd'), (1, 'e'), (2, 'f')] \nprint(sort_on_occurence(lst)) # Output: [(1, 'b'), (1, 'e'), (2, 'c'), (2, 'f'), (3, 'a'), (3, 'd')] ",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (2, 1), (2, 3), (1, 1), (3, 2)] == [(1, 2), (1, 1), (2, 3), (3, 4), (2, 1)]\n\n# Test case 1: Test the function with a list of tuples with positive integers\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = N+1\n    while True:\n        root = int(i**0.5)\n        if root*root == i:\n            return i\n        i += 1 ",
        "generated_testcode": "assert next_Perfect_Square(121) == 144\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n <= 1: \n        return 0\n    if n == 2: \n        return max(arr[0], arr[1]) \n\n    # Initialize two variables to store the maximum sum of including and excluding the current element. \n    # dp_i_including stores the maximum sum including the current element and dp_i_excluding stores the maximum sum excluding the current element. \n    dp_i_including = arr[0] \n    dp_i_excluding = 0\n\n    # Initialize the maximum sum to the first element. \n    max_sum = arr[0] \n\n    for i in range(1, n): \n        # Calculate the maximum sum including the current element. \n        new_dp_i_including = max(dp_i_including + arr[i], arr[i]) \n\n        # Calculate the maximum sum excluding the current element. \n        new_dp_i_excluding = max(dp_i_including, dp_i_excluding) \n\n        # Update the maximum sum. \n        max_sum = max(max_sum, new_dp_i_including, new_dp_i_excluding) \n\n        # Update dp_i_including and dp_i_excluding for the next iteration. \n        dp_i_including = new_dp_i_including \n        dp_i_excluding = new_dp_i_excluding \n\n    return max_",
        "generated_testcode": "assert max_sum(arr=[1, 2, 3, 4, -10, 5, 7, 6, 8, -3, 4]) == 15\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \"\"\"\n    if number == 0 or number == 1:\n        return number\n    x = number\n    y = 1\n    while True:\n        x = (x + number / x) / 2\n        y = (x ** 2)\n        if y <= number:\n            break\n    return x\n\n#Test the function\nprint(babylonian_squareroot(10))  # Output: 3.16222777666016837953\nprint(babylonian_squareroot(4))   # Output: 2.0\nprint(babylonian_squareroot(16))  # Output: 4.0\nprint(babylonian_squareroot(81))  # Output: 9.0 ",
        "generated_testcode": "assert babylonian_squareroot(4) == 2\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(str) \n  \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n  \n    # Strings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Build the table in bottom-up manner \n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n  \n    return L[0][n-1] ",
        "generated_testcode": "assert lps(\"BBABCBCAB\" ) == 7\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n):\n        sum += 1/i\n    return sum\n\n# Example usage:\nprint(harmonic_sum(5)) # Output: 2.283333333333333333333\n\n\n# Create a function to calculate the factorial of n using recursion\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Example usage:\nprint(factorial(5)) # Output: 120\n\n# Create a function to calculate the value of a^b\ndef power(a,b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n\n# Example usage:\nprint(power(2,3)) # Output: 8\n\n# Create a function to calculate the value of n! using a loop\ndef factorial_loop(n):\n    result = 1\n    for i in range(1,n+1):\n        result *= i\n    return result\n\n# Example usage:\nprint(factorial_loop(5)) # Output: 120\n\n# Create a function to check whether a number is prime or not\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    intersection_arr = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection_arr\n\narray_nums1 = [1,2,3,4,5,6,7]\narray_nums2 = [4,5,6,7,8,9]\nprint(intersection_array(array_nums1,array_nums2)) #Output: [4, 5, 6, 7] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5], [4,5,6,7]) == [4,5]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count ",
        "generated_testcode": "assert count_X((\"abracadabra\", \"a\") == 5)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n\n\n#test the function\nprint(insert_element([1,2,3,4,5],0)) #[0,1,0,2,0,3,0,4,0,5]\nprint(insert_element([],7)) #[]\nprint(insert_element([1,2,3,4,5,6,7],None)) #[None,1,None,2,None,3,None,4,None,5,None,6,None,7] ",
        "generated_testcode": "assert insert_element([\"apple\", \"banana\", \"cherry\"], \"orange\") == [\"orange\", \"apple\", \"orange\", \"banana\", \"orange\", \"cherry\"]\n\n\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import cmath\n    return abs(numbers), cmath.phase(numbers)\n\n#Example:\n#print(convert(3+2j) #Output: (3.16222777666016837953, 0.5403023058681395249)\n#print(convert(-4-5j) #Output: 5.0999019513592784664, 3.141592653589793236)\n\n\n#Write a python function to convert polar coordinates to complex numbers.\ndef convert(r, phi):\n    import cmath\n    return r*(cmath.cos(phi)+cmath.sin(phi)*1j)\n\n#Example:\n#print(convert(3, 0.5403023058681395249) #Output: (2.964546333885908615-1.959926239805787282j) ",
        "generated_testcode": "assert convert(2+3j) == (2.236, 1.107)\n\n# The output should be (2.236, 1.107)\n\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\nlist1 = [1, 2, 'hello', 3.5, 'world', 4, True, False, 3.4, 'python', 5]\nprint(count_integer(list1)) ",
        "generated_testcode": "assert count_integer([]), 0\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # split the text into words\n    words = text.split()\n    # create an empty list to store words starting with 'a' or 'e'\n    ae_words = []\n    # iterate over each word in the list of words\n    for word in words:\n        # check if the word starts with 'a' or 'e'\n        if word.startswith(('a') or word.startswith('e'):\n            # if it does, append it to the list\n            ae_words.append(word)\n    # return the list of words starting with 'a' or 'e'\n    return ae_words\n\n# example usage:\nprint(words_ae(\"The quick brown fox jumps over the lazy dog\")) # should print [\"The\", \"over\"] ",
        "generated_testcode": "assert words_ae([\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"pear\", \"orange\"]) == [\"apple\", \"banana\", \"elephant\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    l: list of colors\n    n: number of colors to choose\n    \"\"\"\n    from itertools import product\n    return list(product(l, repeat=n))\n\n# Test\nprint(combinations_colors(['red', 'blue', 'green'], 2))\n# Output: [('red', 'red'), ('red', 'blue'), ('red', 'green'), ('blue', 'red'), ('blue', 'blue'), ('blue', 'green'), ('green', 'red'), ('green', 'blue'), ('green', 'green')]\n\n\n# Now, let's generate all combinations with repetitions of three colors and print them in a more readable format\ncolors = ['red', 'blue', 'green']\nfor c in combinations_colors(colors, 3):\n    print(c[0], c[1], c[2]) ",
        "generated_testcode": "assert combinations_colors([\"red\", \"green\", \"blue\"], 2) == [(\"red\", \"red\"), (\"red\", \"green\"), (\"red\", \"blue\"), (\"green\", \"green\"), (\"green\", \"blue\"), (\"blue\", \"blue\")]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = False\n    primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)\n",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return a,b\n\n#Test the function with sample inputs\na = 10\nb = 20\nprint(\"Before Swapping a =\",a,\"and b =\",b)\na,b = swap_numbers(a,b)\nprint(\"After Swapping a =\",a,\"and b =\",b) ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n\n# The function should return a tuple with the two numbers in reverse order. ",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    odd_nums = list(filter(lambda x: x % 2 != 0, array_nums))\n    return len(odd_nums)\n\n# Test the function\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(\"Original List:\", array_nums)\nprint(\"Number of odd elements in the list:\", count_odd(array_nums))\n\n\n# Output:\n# Original List: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# Number of odd elements in the list: 4 ",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n\n\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    This function maximizes two tuples element-wise and returns the maximum tuple.\n    \"\"\"\n    max_tuple = tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n    return max_tuple\n\n# Test the function with sample inputs\nprint(maximize_elements((1, 2, 3), (4, 5, 6, 7))) # Output: (4, 5, 6) ",
        "generated_testcode": "assert maximize_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9) ) == (5, 6, 7, 8, 9)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n -= 1\n    res = 2\n    count = 1\n    while n:\n        if not n & 1:\n            n >>= 1\n        else:\n            n = (n - 1) // 2\n            res *= 2\n        count += 1\n    return res\n\n# Test the function\nfor i in range(1, 10):\n    print(newman_prime(i))\n\n\n# Output: 2, 3, 5, 7, 13, 29, 97, 71, 109, 4333, 4159, 607, 761, 16381, 21799, 46739, 110969, 276991 ",
        "generated_testcode": "assert newman_prime(1) == 3\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n\n# Test the function with sample tuples\ntup1 = (10, 20, 30, 40)\ntup2 = (2, 5, 6, 10)\nprint(division_elements(tup1, tup2)) # Output: (5.0, 4.0, 5.0) ",
        "generated_testcode": "assert division_elements((10, 2, 5, 6, 4) , (2, 4, 3, 2) ) == (5.0, 1.25, 3.0)\n\n# The output should be (5.0, 1.25, 3.0) ",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    This function splits the given list into two parts where the length of the first part is L\n    :param list1: input list\n    :param L: length of the first part of the list\n    :return: a tuple containing two lists\n    \"\"\"\n    list1_len = len(list1)\n    if L == 0:\n        return [], list1\n    elif L == list1_len:\n        return list1, []\n    elif L < 0:\n        return list1, []\n    elif L > list1_len:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]\n\n# test the function with sample inputs\nprint(split_two_parts([1,2,3,4,5,6,7,8], 3))\nprint(split_two_parts([1,2,3,4,5,6,7,8], 0))\nprint(split_two_parts([1,2,3,4,5,6,7,8], -2))\nprint(split_two_parts([1,2,3,4,5,6,7,8], 6))\nprint(split_two_parts([1,2,3,4,5,6,7,8], 5)) ",
        "generated_testcode": "assert split_two_parts([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], 2) == ([\"apple\", \"banana\"], [\"cherry\", \"date\", \"elderberry\", \"fig\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = dict(d1)\n    res.update(d2)\n    return res\n\n#test the function with example dictionaries\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'d':4,'e':5}\nprint(merge_dict(d1,d2)) #output {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5} ",
        "generated_testcode": "assert merge_dict(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'c': 4, 'd': 5, 'e': 6}\n) == {'a': 1, 'b': 2, 'c': 4, 'd': 5, 'e': 6}\n\n\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if h_age <= 0:\n        return \"Invalid age\"\n    else:\n        return h_age * 7\n\n# Test the function with different values of h_age\nprint(dog_age(0) == \"Invalid age\")\nprint(dog_age(1) == 7)\nprint(dog_age(2) == 14)\nprint(dog_age(3) == 21) ",
        "generated_testcode": "assert dog_age(1) == 15\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if step == 1:\n        return S\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n\n# Test the function with an example\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstep = 3\nprint(list_split(S, step))  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\n\n# Test the function with an example\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstep = 2\nprint(list_split(S, step))  # Output: [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n\n\n# Test the function with an example\nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstep = 4\nprint(list_split(S, step))  # Output: [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]] ",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 2) == [[\"a\", \"c\", \"e\", \"g\"], [\"b\", \"d\", \"f\", \"h\"], [\"i\", \"j\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return 4 * (l ** 2)\n\n# Test the function\nprint(lateralsurface_cube(5))  # Output: 150\nprint(lateralsurface_cube(10)) # Output: 400\n\n\n# Write a function to find the lateral surface area of a cuboid\ndef lateralsurface_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)\n\n# Test the function\nprint(lateralsurface_cuboid(3, 4, 5)) # Output: 52\nprint(lateralsurface_cuboid(2, 2, 2)) # Output: 20\n\n\n# Write a function to find the lateral surface area of a cylinder\nimport math\ndef lateralsurface_cylinder(r, h):\n    return 2 * math.pi * r * h\n# Test the function\nprint(lateralsurface_cylinder(4, 3)) # Output: 25.1327412002259316605\nprint(lateralsurface_cylinder(2, 5)) # Output: 37.699911118431063388\n\n# Write a function to find the lateral surface area of a cone\ndef lateralsurface_cone(r, slant_height):\n",
        "generated_testcode": "assert lateralsurface_cube(3) == 54\n\n# The testing code should include at least 2 different test cases. ",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\" This function takes a integer n as input and returns the sum of squares of first n odd natural numbers \"\"\"\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        sum += i ** 2\n        i += 2\n        count += 1\n    return sum\n\n# testing the function\nprint(square_Sum(5)) # output: 100\nprint(square_Sum(7)) # output: 140 ",
        "generated_testcode": "assert square_Sum(3) == 35\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        i = 3\n        num = 1\n        while i <= n: \n            num += (i * 2)\n            i += 1\n        return num ",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return ord(k)\n\n# example usage\nprint(ascii_value(\"a\")) # output: 97\n\n\n\n# Write a function to find the reverse of a string using recursion.\ndef reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n\n# example usage\nprint(reverse_string(\"hello\")) # output: \"olleh\"\n\n\n\n# Write a function to check if a string is palindrome or not.\ndef is_palindrome(s):\n    return s == s[::-1]\n# example usage\nprint(is_palindrome(\"racecar\")) # output: True\nprint(is_palindrome(\"hello\")) # output: False\n\n\n# Write a function to find the length of a string.\ndef string_length(s):\n    return len(s)\n# example usage\nprint(string_length(\"hello\")) # output: 5\n\n\n# Write a function to check if a number is prime or not.\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n# example usage\nprint(is_prime(17)) # output: True\nprint(is_prime(15)) # output: False\n\n\n# Write a function to check",
        "generated_testcode": "assert ascii_value(a) == 97\n\n# Write a function to find the length of a string.\ndef string_length(s):\n    pass\n\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize sum variable to 0  \n    sum = 0  \n  \n    # traverse the list  \n    for i in range(0,n):  \n        # check if element at even index is even  \n        if i%2 == 0 and arr[i]%2 == 0:  \n            sum += arr[i]  \n    return sum  \n  \n# test the function with a sample list  \narr = [1, 2, 4, 3, 6, 8, 10, 11, 12]  \nn = len(arr)  \nprint(sum_even_and_even_index(arr,n)) # output: 12 ",
        "generated_testcode": "assert sum_even_and_even_index(arr=[1,2,3,4,5,6,7,8,9,10],n=6) == 20 # Testing with a sample input\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**5\n    return sum\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of first\",n,\"even numbers is:\",even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(3) == 220\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return_list = []\n    for i in test_list:\n        return_list.append(i[-1])\n    return return_list\n\n# Test the function with example\ntest_list = [(1, 2, 3, 4), (5, 6, 7), (8, 9, 10), (11, 12, 13)]\nprint(rear_extract(test_list))  # Output: [4, 7, 10, 13] ",
        "generated_testcode": "assert rear_extract([(1,2), (3,4), (5,6)] ) == [2, 4, 6]\n\n\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    return result\n\n# Example usage:\n# substract_elements((4, 3, 2, 1), (1, 2, 1)) \n# Output: (3, 1, 0) ",
        "generated_testcode": "assert substract_elements(('abc', (1, 2, 3, 4)) == ('a', 1, 1, 1)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize a variable to store the sum of even index binomial coefficients \n    sum = 0\n      \n    # Loop through all even index terms and add the binomial coefficient \n    for i in range(0, n+1, 2): \n        # Calculate the binomial coefficient using C(n, i) = n! / (i! * (n-i)!)) \n        c = 1\n        for j in range(1, i+1): \n            c = c * (n-i+j) / j \n        sum += int(c) \n      \n    # Return the sum of even index binomial coefficients \n    return int(sum) \n  \n# Test the function with some sample inputs \nn = 10\nprint(even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(4) == 10 # Testing for n = 4\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    ans = -1\n    for i in range(n):\n        a[i] -= m\n    for i in range(n):\n        if a[i]<0:\n            return i+1\n    return ans\n\n# Driver code \narr = [1,2,3,4,5,6,7,8,9,10]\nm = 3\nn = len(arr)\nprint(get_Position(arr,n,m)) ",
        "generated_testcode": "assert get_Position(a,n,m) == 2 # Testing for the example given in the question.\n# Testing for edge cases\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14\n    vol = pi * r * r * h\n    return vol\n\n#test the function\nprint(volume_cylinder(5,10)\nprint(volume_cylinder(4,8)\nprint(volume_cylinder(2.5,12)\n\n\n#or\n\n#use a loop to calculate volumes for a range of radii and heights\nfor r in range(1,11):\n    for h in range(1,21):\n        print(\"Radius:\",r,\"Height:\",h,\"Volume:\",volume_cylinder(r,h)) ",
        "generated_testcode": "assert volume_cylinder(5, 10) == 785.398163397444830002\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_dict={}\n    for key,value in dict.items():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\n\n#Example:\n#d={'a':10,'b':20,'c':30,'d':40}\n#n=25\n#print(dict_filter(d,n))\n#Output:{'c':30,'d':40} ",
        "generated_testcode": "assert dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 4) == {3: 4, 9: 10}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count_dict = {}\n    for element in test_tup:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return count_dict\n\ntest_tup = (1, 2, 3, 4, 2, 3, 5, 1, 6, 2, 7, 2, 5, 8, 2)\nprint(count_first_elements(test_tup)) ",
        "generated_testcode": "assert count_first_elements(('a', ('a', 'b', 'c', 'd', 'a', 'e', 'a', 'f')) == 2\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i=1\n    while True:\n        decagonal= (i*(9*i-1))//2\n        if decagonal >= n:\n            return decagonal\n        i+=1\n        \ndef find_decagonal(n):\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += is_num_decagonal(i)\n    return decagonal_num\n\nprint(find_decagonal(10)) # should print 55\nprint(find_decagonal(5)) # should print 5\nprint(find_decagonal(1)) # should print 1\nprint(find_decagonal(2)) # should print 12\nprint(find_decagonal(7)) # should print 71\n\n\n# Solution explanation: \n# We first define a helper function is_num_decagonal(n) that takes in a number n and returns the nth decagonal number (i.e. the sum of the first n numbers starting from 1). \n# The formula for the nth decagonal number is given by (n*(9*n-1))//2. We use this formula to generate decagonal numbers until we exceed n and return the last decagonal number that is less than or equal to n. \n# Then, we iterate from 1 to n in find_decagonal(n) and add each decagonal number to decagonal_num using the is_num_dec",
        "generated_testcode": "assert is_num_decagonal(5) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n\n# Test the function with sample data\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sequential_search(arr, 3))  # Output: (True, 2) ",
        "generated_testcode": "assert sequential_search([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"pear\"], \"kiwi\") == 3\n\n\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Check if all elements in the given list are unique\n    :param test_list: list of elements\n    :return: True if all elements are unique, False otherwise\n    \"\"\"\n    return len(test_list) == len(set(test_list))\n\n\n# Test cases\nprint(all_unique([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(all_unique([1, 2, 3, 4, 5, 5, 6]))  # False\nprint(all_unique(['apple', 'banana', 'cherry', 'orange']))  # True\nprint(all_unique([1, 2, 3, 4, 'apple', 'banana', 'cherry', 'apple']))  # False\nprint(all_unique([]))  # True\nprint(all_unique([1]))  # True ",
        "generated_testcode": "assert all_unique([\"apple\", \"banana\", \"cherry\", \"orange\"]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x[0]-x[1], zip(nums1,nums2))\n    \nnums1 = [1,2,3,4,5,6]\nnums2 = [4,5,6,7,8,9]\nprint(sub_list(nums1, nums2)) # output: [-3,-3,-3,-3,-3] ",
        "generated_testcode": "assert sub_list(list(range(1,5), list(range(2,4)) == [1, 5]\n\n\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = [0]*10\n    for i in str(n): \n        freq[int(i)] += 1\n    for i in range(10): \n        if freq[i] > i: \n            return False\n    return True\n\n# test the function with some examples\nprint(validate(12234456789)) # True\nprint(validate(123456689)) # False\nprint(validate(11122233445566)) # True\nprint(validate(11234556)) # False \nprint(validate(1234456)) # True ",
        "generated_testcode": "assert validate(123456) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for item in list:\n        if item != element:\n            return False\n    return True\n\n#Test the function with an example\nmy_list = [\"apple\",\"apple\",\"apple\",\"apple\"]\nprint(check_element(my_list,\"apple\")) # True\nprint(check_element(my_list,\"banana\")) # False\n\n\n#Check whether all elements of a list are same or not\ndef check_same(list):\n    return all(element == list[0] for element in list)\n\n\n#Test the function with examples\nmy_list = [\"apple\",\"apple\",\"apple\",\"apple\"]\nprint(check_same(my_list)) # True\nmy_list = [\"apple\",\"banana\",\"apple\"]\nprint(check_same(my_list)) # False ",
        "generated_testcode": "assert check_element([\"apple\",\"apple\",\"apple\",\"apple\"],\"apple\") == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = 'a(bb|bbb)'\n    result = re.search(pattern, text)\n    return result != None\n\n# Test the function\nprint(text_match_two_three(\"abbb\")) # True\nprint(text_match_two_three(\"abb\")) # False\nprint(text_match_two_three(\"a\")) # False\nprint(text_match_two_three(\"abba\")) # False\nprint(text_match_two_three(\"abbbb\")) # True\nprint(text_match_two_three(\"abbbbc\")) # True ",
        "generated_testcode": "assert text_match_two_three([\"ab\", \"abb\", \"aabb\", \"abbb\", \"abbbb\", \"abcd\", \"abbbcd\"] == [\"abbb\", \"aabb\", \"abbb\"]\n\n\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = float('-inf') \n    max_ending_here = 0\n    for i in range(n): \n        max_ending_here = max_ending_here + a[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        max_sum = max(max_sum, max_ending_here) \n    if max_sum < 0: \n        max_sum = 0\n    for i in range(1, n): \n        max_sum += a[i-1] \n        a[i] += a[i-1] * (k-1) \n        max_ending_here = 0\n        for j in range(i, n): \n            max_ending_here += a[j] \n            if j - i + 1 < n: \n                max_sum = max(max_sum, max_ending_here) \n            if j - i + 1 < n: \n                max_ending_here -= a[j-n] \n    return max_sum % 1000000000007\n    \n# Driver code to test the above function \na = [1, -2, -3, 4, -1, -2, 5, -1] \nk = 3\nn = len(a) \nprint(max_sub_array_sum_repeated(a, n, k)) ",
        "generated_testcode": "assert max_sub_array_sum_repeated(a, n, k) == 100\n# Test case 1: a = [1, -2, 3, 4, -1, 5, 2, -3], n = 6, k = 3\n# Repeating the array 3 times will give [1, -2, 3, 4, -1, 5, 2, -3, 1, -2, 3, 4, -1, 5, 2, -3, 1, -2, 3, 4, -1, 5, 2, -3]\n# The largest sum of contiguous subarray is 10 (starting from index 2, ending at index 6)\n\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0  \n    i = 0  \n    while i <= n:  \n        sum += i**2  \n        i += 2  \n    return sum  \nn = 4  \nprint(\"The sum of squares of first\", n, \"even natural numbers is:\", square_Sum(n)) ",
        "generated_testcode": "assert square_Sum(4) == 20 # Testing for n = 4\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    mod = P\n    inv = [0] * (N + 1)\n    inv[1] = 1\n    for i in range(2, N + 1):\n        inv[i] = (mod - mod // i) * inv[mod % i] % mod\n    return inv\n\narr = [2, 3, 5, 6, 7, 8, 9]\nN = len(arr)\nP = 10\nprint(modular_inverse(arr, N, P))\n ",
        "generated_testcode": "assert modular_inverse(arr=[2, 3, 4, 5, 6, 7, 8, 9], N=10, P=5) == 2\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # convert the input year into a string and extract the last two digits\n    year = str(N)[2:]\n    # convert the last two digits into integer and calculate the sum of digits\n    s = sum(int(d) for d in year) \n    # calculate the sum of digits again if the sum is greater than 9\n    while s > 9:\n        s = sum(int(d) for d in str(s))\n    # if the sum is 0, 1, 4, 5, or 9, the number of odd days is 365, else it is 366\n    return 366 if s in (0, 4, 5, 9) else 365 ",
        "generated_testcode": "assert odd_Days(2021) == 243\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    result = []\n    for i in range(len(list1)):\n        if len(list1[i]) == max_len:\n            result.append(list1[i])\n    return result\n\n# test the function\nlist1 = [[1,2,3], [4,5,6,7,8], [1,2,3,4,5,6], [4,5,6], [7,8,9,10,11,12,13]]\nprint(max_length(list1)) # output: [[1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11, 12, 13]] ",
        "generated_testcode": "assert max_length([\"cat\", \"dog\", \"bird\", \"lion\", \"tiger\"] == \"tiger\"\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 2:\n        return k\n    if k < 1:\n        return 0\n    same_color = k\n    diff_color = k * (k - 1) * (n - 1)\n    for i in range(3, n + 1):\n        same_color, diff_color = diff_color, (same_color + diff_color) * (k - 1)\n    return same_color + diff_color\n\n\n# test the function\nn = 3\nk = 2\nprint(count_no_of_ways(n, k)) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 18\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    if(m == 0):\n        return \"Error: Division by Zero\"\n    else:\n        return n/m\n\n#Example usage:\n#print(find(10,2)) # Output: 5.0\n#print(find(10,0)) # Output: \"Error: Division by Zero\" ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return 1\n\n# Test case\nprint(otherside_rightangle(3,4)) # Output: 5\nprint(otherside_rightangle(5,12)) # Output: 13\nprint(otherside_rightangle(8,10)) # Output: 10\nprint(otherside_rightangle(6,8)) # Output: 10\n\n\n#Solution:\ndef otherside_rightangle(w, h):\n    return (w**2 + h**2)**0.5\n\n# We can use the Pythagorean theorem to find the length of the missing side. ",
        "generated_testcode": "assert otherside_rightangle(3, 4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = listval[0]\n    for val in listval:\n        if isinstance(val, int) or isinstance(val, float):\n            if val > max_val:\n                max_val = val\n    return max_val\n\n# Test the function with a list of heterogeneous values\nlist_val = [2, 'apple', 5.5, 'orange', 7, 'banana', 10, 4.5]\nprint(max_val(list_val))  # Output: 10 ",
        "generated_testcode": "assert max_val([\"apple\", 5, 3.14, 7, 2.71, \"banana\", 8, \"cherry\", 3.14159, 10, \"2.71828\"] == 10\n\n\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\n# test the function with an example\nprint(sum_div(12)) # should print 28\nprint(sum_div(15)) # should print 24",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count \n\n#Driver Code\narr = [1,20,6,4,5]\nn = len(arr)\nprint(\"Number of inversions are: \",get_Inv_Count(arr, n)) ",
        "generated_testcode": "assert get_Inv_Count(arr=[1,2,3,4,5,6,7,8],n=5) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for element in list1:\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n\n\n# Test the function with an example:\nnested_list = [1, [2, 3, [4, 5, [6, 7]], 8, [9, [10, 11, [12, 13]]] ]\nprint(flatten_list(nested_list) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] ",
        "generated_testcode": "assert flatten_list([\"apple\", \"banana\", [\"orange\", \"grape\", [\"lemon\", \"pineapple\", \"pear\"]]) == [\"apple\", \"banana\", \"orange\", \"grape\", \"lemon\", \"pineapple\", \"pear\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    >>> intersection_nested_lists([[1, 2, 3], [2, 3, 4], [4, 5, 6]], [[2, 3], [4, 5], [6, 7]])\n    [[2, 3], [4, 5], [6]]\n    \"\"\"\n    result = []\n    for i in l1:\n        for j in l2:\n            if set(i).intersection(j):\n                result.append(list(set(i).intersection(j))[:])\n    return result\n\n# test\nprint(intersection_nested_lists([[1, 2, 3], [2, 3, 4], [4, 5, 6]], [[2, 3], [4, 5], [6, 7]]) #[[2, 3], [4, 5], [6]] ",
        "generated_testcode": "assert intersection_nested_lists(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 10]], [[2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]\n) == [[2, 3], [5, 6], [8, 9], [1]]\n\n# The output should be [[2, 3], [5, 6], [8, 9], [1]]\n\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    # Initialize the maximum to zero\n    max_agg = 0\n    # Iterate through the list of tuples\n    for tup in stdata:\n        # Calculate the sum of the tuple\n        tup_sum = sum(tup)\n        # If the sum is greater than the current maximum, update the maximum\n        if tup_sum > max_agg:\n            max_agg = tup_sum\n    # Return the maximum aggregate\n    return max_agg\n\n# Test the function with sample data\nstdata = [(1, 3, 5), (2, 4, 6), (7, 8, 9, 10), (3, 6, 9)]\nprint(max_aggregate(stdata))  # Output: 30 ",
        "generated_testcode": "assert max_aggregate([(1,2), (3,4), (5,6)] ) == 11\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0] * (n+1) \n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2, n+1): \n        dp[i] = 2 * dp[i-1] + dp[i-2] \n    return dp[n] \n  \ndef count_binary_seq_util(n): \n    if n < 0: \n        return 0\n    return count_binary_seq(n) - 1\n  \n# Driver program to test above function \nn = 3\nprint(count_binary_seq_util(n)) ",
        "generated_testcode": "assert count_binary_seq(1) == 1\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Finds the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values()) if d else 0) if d else 0)\n    return 0\n\n\n\n# Test the function with some examples\nprint(dict_depth({}))  # Output: 1\nprint(dict_depth({'a': 1, 'b': 2}))  # Output: 1\nprint(dict_depth({'a': 1, 'b': {'c': {'d': {'e': 3, 'f': {'g': 4}}}})  # Output: 3\nprint(dict_depth({'a': 1, 'b': {'c': {'d': {'e': 3, 'f': {'g': {'h': {'i': {'j': 4}}}}}})  # Output: 4\nprint(dict_depth({'a': 1, 'b': [1, 2, {'c': 3, 'd': [3, 4, {'e': 5}]})  # Output: 3\nprint(dict_depth({'a': 1, 'b': {'c': {'d': {'e': 3, 'f': {'g': [1, 2, {'h': {'i': 4}]}})  # Output: 4\nprint(dict_depth({'a': 1, 'b': {'c': {'d': {'e': 3, 'f': {'g': [",
        "generated_testcode": "assert dict_depth(d) == 3\n\n# The dictionary d is defined as follows:\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': 2,\n            'e': 3\n        },\n        'f': 4\n    },\n    'g': [1, 2, 3]\n}\n\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    num = 0\n    count = 0\n    while (n != 0): \n        if (n & 1): \n            count += 1\n        num = count\n        n >>= 1\n    return num ",
        "generated_testcode": "assert set_Bit_Number(15) == 4\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    b = sorted(a)\n    count = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n\n#Driver code\na = [1,2,3,4,5,6,7]\nn = len(a)\nif solve(a,n):\n    print(\"YES\")\nelse:\n    print(\"NO\") ",
        "generated_testcode": "assert solve([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],5) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr) \n    actual_index = (ranges + index) % n \n    return arr[actual_index] \n# Taking input from user\narr = list(map(int,input(\"Enter the elements of array : \").split()) \nranges = int(input(\"Enter the number of rotations : \"))\nindex = int(input(\"Enter the index at which element is to be found : \")\n# Calling function to find element at given index after rotation\nprint(\"Element at given index after rotation is : \",find_Element(arr,ranges,index)\n\n\n#Example:\n#Input :\n#Enter the elements of array : 1 2 3 4 5 6 7 8\n#Enter the number of rotations : 2\n#Enter the index at which element is to be found : 4\n#Output : Element at given index after rotation is : 6 \n\n#Explanation : After 2 rotations, the array becomes [3, 4, 5, 6, 7, 8, 1]. So element at index 4 is 6. ",
        "generated_testcode": "assert find_Element(arr,ranges,rotations,index) == expected_output\n\n# Example:\narr = [1,2,3,4,5,6,7,8,9]\nranges = [0,6]\nrotations = 2\nindex = 6\nexpected_output = 7\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n\nwords = ['python', 'code', 'fun', 'play', 'practice']\nprint(start_withp(words)) # ['python', 'play'] ",
        "generated_testcode": "assert start_withp([\"python\", \"java\", \"c++\", \"kotlin\", \"sql\", \"pascal\"]) == [\"python\", \"pascal\"]\n\n\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if k <= index:\n        return 0\n    incl = a[index]\n    excl = 0\n    for i in range(index + 1, k):\n        new_excl = max(incl, excl + a[i])\n        incl = excl\n        excl = new_excl\n    return incl\n\n# Test the function with an example\na = [10, 22, 3, 4, 6, 10, 5, 11, 12, 8, 9, 15]\nn = len(a)\nk = 3\nindex = 2\nprint(max_sum_increasing_subseq(a, n, index, k))  # Output: 30 (Subsequence: 10, 11, 15) ",
        "generated_testcode": "assert max_sum_increasing_subseq(a, n, index, k) == expected_output\n\n# where a is a list of integers, n is the length of the list, index is the index till which we need to find the maximum sum of increasing subsequence and k is the index of the element to be included in the subsequence. ",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the n-th element of the m-th tuple in a tuple of tuples.\n    \"\"\"\n    return tuplex[m][n]\n#Example usage:\ntuplex = ((1,2,3),(\"apple\", \"banana\", \"cherry\"),(\"x\", \"y\", \"z\"))\nprint(colon_tuplex(tuplex,1,1)) # Output: \"banana\"\nprint(colon_tuplex(tuplex,2,0)) # Output: \"x\"\nprint(colon_tuplex(tuplex,0,2)) # Output: 3 ",
        "generated_testcode": "assert colon_tuplex((\"apple\",1,2) == \"apple:apple:apple\"\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n\n# Test cases\nprint(large_product([1, 2, 3, 4], [3, 6, 5], 2)) # [15, 12]\nprint(large_product([-10, -10, 5], [1, 6], 3)) # [60, -50, -50]\nprint(large_product([-5, -2], [0, 5], 1)) # [0] ",
        "generated_testcode": "assert large_product(nums1=[1, 2, 3, 4, 5], nums2=[10, 20, 30, 40, 50], N=2) == [50, 40]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a>b:\n        return a\n    else:\n        return b\n\n#example usage\nprint(maximum(5,8))  #output: 8\nprint(maximum(12,3)) #output: 12 ",
        "generated_testcode": "assert maximum(5,10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(str1)\n\n#Example:\n# Input: \"Hello World\"\n# Output: ('H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd') ",
        "generated_testcode": "assert string_to_tuple(str1) == ('a', 'b', 'c', 'd', 'e')\n\n\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = n ^ (n & (n-1))\n    n = n ^ ((1 << n.bit_length())-1)\n    return n ",
        "generated_testcode": "assert set_left_most_unset_bit(0b10101010) == 0b11101111 # 0b1101111 is the binary representation of the expected output\n\n# Explanation:\n# The left most unset bit in 0b10101010 is the 2^4 bit, which is 1000000 in binary. Adding it to the number will give 0b1101010 + 0b100000 = 0b1101010 + 0b100000 = 0b1101010 + 16 = 0b1101010 + 0b100000 = 0b1110110 = 0b1101111. ",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14\n    vol = (1/3) * pi * r * r * h\n    return vol\n\n#Test the function\nprint(volume_cone(5,6)) # Expected output: 121.199\nprint(volume_cone(7,9)) # Expected output: 415.21\nprint(volume_cone(10,8)) # Expected output: 282.74\n\n\n#Write a function to calculate the area of a triangle.\ndef area_triangle(b,h):\n    area = 0.5 * b * h\n    return area\n\n#Test the function\nprint(area_triangle(10,5) == 25.0) # Expected output: True\nprint(area_triangle(7,4) == 28.0) # Expected output: True\nprint(area_triangle(8,6) == 48.0) # Expected output: True\n\n#Write a function to find the average of three numbers.\ndef average(a,b,c):\n    avg = (a + b + c) / 3\n    return avg\n\n#Test the function\nprint(average(1,2,3) == 2.0) # Expected output: True\nprint(average(10,5,0) == 5.0) # Expected output: True\nprint(average(3,8,21) == 9.0) # Expected",
        "generated_testcode": "assert volume_cone(3, 5) == 141.371666941729868158\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for num in list1:\n        if num > 0:\n            print(num, end=\" \")\n\nlist1 = [1, -2, 3, 4, -5, 6, -7, 8, 9, -10]\nprint(\"Original List:\", list1)\nprint(\"Positive numbers in the list:\")\npos_nos(list1)\n\n# Original List: [1, -2, 3, 4, -5, 6, -7, 8, 9, -10]\n# Positive numbers in the list: 1 3 4 6 8 9 ",
        "generated_testcode": "assert pos_nos(list1) == [1, 3, 5, 7, 9]\n\n\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0 or n == 1 or not grid or len(grid) != n :\n        return 0\n    dp = [0] * n\n    for i in range(n) :\n        for j in range(n) :\n            if j == 0 :\n                dp[j] = grid[i][j]\n            else :\n                dp[j] = max(dp[j-1], grid[i][j])\n            dp[j] += dp[j]\n    max_sum = 0\n    for i in range(n) :\n        for j in range(n) :\n            if i == 0 :\n                max_sum = max(max_sum, dp[j])\n            else :\n                if j == 0 :\n                    max_sum = max(max_sum, dp[j])\n                else :\n                    for k in range(i) :\n                        max_sum = max(max_sum, dp[j] - dp[k])\n    return max_sum\n\n# Example usage:\ngrid = [[1, 2, 3, 4], \n        [5, 6, 7]]\nn = len(grid)\nprint(max_sum_rectangular_grid(grid, n)) # Output: 12 (6 + 6) ",
        "generated_testcode": "assert max_sum_rectangular_grid(\n    [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 10, 11],\n        [12, 13, 14, 15, 16],\n        [17, 18, 19, 20, 21],\n        [22, 23, 24, 25, 26]\n    ], 4) == 65\n\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_len = 0\n    for word in str.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len\n\n#Test the function\nstring = \"The quick brown fox jumps over the lazy dog\"\nprint(find_Max_Len_Even(string))  # Output: 6\n\n\nstring = \"Hello world is a wonderful world\"\nprint(find_Max_Len_Even(string))  # Output: 8 ",
        "generated_testcode": "assert find_Max_Len_Even([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\", \"peach\", \"grapes\"] == 6\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    start = 0\n    end = len(A) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            result = mid\n            start = mid + 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result\n\n# Test cases\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_last_occurrence(A, 4)) # Output: 3\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_last_occurrence(A, 9)) # Output: 7\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_last_occurrence(A, 10)) # Output: -1\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_last_occurrence(A, 1)) # Output: 0 ",
        "generated_testcode": "assert find_last_occurrence(A=[1, 2, 3, 4, 4, 5, 5, 5, 6, 7, 8, 9], x=5) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if not alist:\n        return []\n    result = []\n    count = 1\n    prev = alist[0]\n    for i in range(1, len(alist)):\n        if alist[i] == prev:\n            count += 1\n        else:\n            result.append((count, prev))\n            count = 1\n            prev = alist[i]\n    result.append((count, prev))\n    return result\n\ndef modified_decode(alist):\n    if not alist:\n        return []\n    result = []\n    for tup in alist:\n        count, element = tup\n        result.extend([element]*count)\n    return result\n\n# Example usage:\ninput_list = [1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]\nencoded = modified_encode(input_list)\nprint(encoded)  # Output: [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\ndecoded = modified_decode(encoded)\nprint(decoded)  # Output: [1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5]\nprint(",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\"]) == [(\"a\", 1), (\"b\", 1), (\"c\", 3), (\"d\", 1), (\"e\", 4)]\n\n# Test case 1: Test with a list of characters with no repetition\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    side = [0,0,0,0]\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                for k in range(3):\n                    if k!=i and k!=j:\n                        side[0] = i+1\n                        side[1] = j+1\n                        side[2] = 8 - i - j\n                        if side[0] * side[1] * side[2] == s:\n                            return side\n    return None\n\ns = int(input(\"Enter the sum of sides of the cuboid: \"))\nresult = max_volume(s)\nif result is None:\n    print(\"No cuboid exists with the given sum of sides.\")\nelse:\n    print(\"The maximum cuboid with the given sum of sides is:\")\n    print(\"Length: \",result[0])\n    print(\"Breadth: \",result[1])\n    print(\"Height: \",result[2]) ",
        "generated_testcode": "assert max_volume (12) == (2, 2, 2)\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\\b\\w{5}\\b')\n    long_words = re.findall(pattern, text)\n    return long_words\n\nprint(find_long_word(\"The quick brown fox jumps over the lazy dog.\")) # ['quick', 'jumps']\nprint(find_long_word(\"I love programming.\")) # ['love', 'program']\nprint(find_long_word(\"Hello world!\")) # ['world']\nprint(find_long_word(\"Python is an interpreted high-level programming language.\")) # ['Python', 'level'] ",
        "generated_testcode": "assert find_long_word(text=\"The quick brown fox jumps over the lazy dog.\") == \"quick\"\n\n# Test case 1: Test with a normal sentence\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_square = 0\n    square_sum = 0\n    for i in range(1, n+1):\n        sum_square += i**2\n        square_sum += i\n    return square_sum**2 - sum_square\n\n\n# test the function\nprint(sum_difference(5)) # 22025 - 55 = 1970\nprint(sum_difference(10)) # 3025 - 385 = 2640\nprint(sum_difference(20)) # 44100 - 2850 = -2390\nprint(sum_difference(50)) # 274025 - 25500 = 24525\nprint(sum_difference(100)) # 255002500 - 3333850 = 24667150",
        "generated_testcode": "assert sum_difference(10) == 2640\n\n# The function should return 2640 for n = 10, as the sum of squares of first 10 natural numbers is 385 and the square of the sum is 3025. The difference is 2640. ",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a dictionary to store the demlo equivalent of each digit \n    demlo_dict = {0:'zero', 1:'one', 2:'two', 3:'three', 4:'four', 5:'five', 6:'six', 7:'seven', 8:'eight', 9:'nine'}\n    # initialize an empty string to store the demlo equivalent\n    demlo_str = ''\n    # iterate over each digit in the given number \n    for digit in str(s):\n        # convert the digit to an integer and get its demlo equivalent from the dictionary \n        demlo_str += demlo_dict[int(digit)]\n    # return the demlo equivalent as a string \n    return demlo_str ",
        "generated_testcode": "assert find_demlo(1) == 1\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    min_value = min(list1)\n    positions = []\n    index = 0\n    for i in list1:\n        if i == min_value:\n            positions.append(index)\n        index += 1\n    return positions\n\nlist1 = [4, 9, 2, 7, 5, 1, 8, 2, 10, 2, 6]\nprint(position_min(list1)) # Output: [3, 5]\n\n\n# Using list comprehension\ndef position_min(list1):\n    min_value = min(list1)\n    return [index for index in range(len(list1)) if list1[index] == min_value]\n\nlist1 = [4, 9, 2, 7, 5, 1, 8, 2, 10, 2, 6]\nprint(position_min(list1)) # Output: [3, 5] ",
        "generated_testcode": "assert position_min([3, 5, 2, 9, 1, 5, 7, 6, 2, 5] ) == [2, 5]\n\n\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if out_of_place < n-1:\n        if arr[out_of_place] < 0 and arr[cur] > 0:\n            arr[out_of_place], arr[cur] = arr[cur], arr[out_of_place]\n            right_rotate(arr, n, out_of_place+1, cur+2)\n        elif arr[out_of_place] < 0 and arr[cur] < 0:\n            right_rotate(arr, n, out_of_place, cur+1)\n        else:\n            right_rotate(arr, n, out_of_place+1, cur+2)\n\n    return arr\n\ndef rearrange_alternating_positive_negative(arr):\n    if len(arr) < 2:\n        return arr\n    return right_rotate(arr, len(arr), 0, 0)\n\n# test the function with some examples\narr = [1, -2, 3, -4, 5, -6, 7, -8, 9]\nprint(rearrange_alternating_positive_negative(arr)) # [-2, 1, -4, 3, -6, 5, -8, 7, 9]\n\narr = [1, -2, 3, -4, -5, -6, 7, 8, 9, -10, 11, -12]\nprint(rearrange_alternating_positive_negative(",
        "generated_testcode": "assert right_rotate(arr=[1, 2, 3, -4, -1, 5, -6, 7, 8], n=6, out_of_place=3, cur=0) == [3, -4, 1, 5, -6, 2, -1, 7, 8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a variable to store the sum\n    sum_of_alternates = 0\n    # Loop through the tuple and add the alternate elements to the sum\n    for i in range(0, len(test_tuple), 2):\n        # Check if the element is a tuple\n        if isinstance(test_tuple[i], tuple):\n            # Add the first element of the tuple to the sum\n            sum_of_alternates += test_tuple[i][0]\n        else:\n            # Add the element to the sum\n            sum_of_alternates += test_tuple[i]\n    # Return the sum\n    return sum_of_alternates\n\n\n# Test the function with a sample tuple\ntest_tuple = (1, (2, 3), 4, (5, 6), 7, (8, 9), 10)\nprint(sum_of_alternates(test_tuple))  # Output: 20 ",
        "generated_testcode": "assert sum_of_alternates(()) == 0\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    i = 1\n    while n > 0:\n        result.append(i * i)\n        n -= i * i\n        i += 1\n    return len(result)\n\n\n# test the function\nprint(get_Min_Squares(13))  # Output: 2 (4+9)\nprint(get_Min_Squares(17))  # Output: 2 (4 + 9 + 4)\nprint(get_Min_Squares(25))  # Output: 1 (16)\nprint(get_Min_Squares(33))  # Output: 2 (4 + 9)\nprint(get_Min_Squares(36))  # Output: 3 (4 + 9 + 9 + 12) ",
        "generated_testcode": "assert get_Min_Squares(17) == 4\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    word_count = {}\n    max_word = \"\"\n    max_count = 0\n    \n    for word in test_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n        \n        if word_count[word] > max_count:\n            max_word = word\n            max_count = word_count[word]\n            \n    return max_word\n\n# Example usage:\ntest_list = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"grape\", \"orange\", \"orange\", \"grape\", \"grape\", \"apple\"]\nprint(most_occurrences(test_list)) # Output: \"apple\" ",
        "generated_testcode": "assert most_occurrences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"grape\", \"orange\", \"orange\"]) == \"apple\"\n\n\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x==y or y==z or x==z:\n        return True\n    else:\n        return False\n#test the function\nprint(check_isosceles(5,6,7))\nprint(check_isosceles(6,6,8))\nprint(check_isosceles(6,6,6))\n\n#output:\n#False\n#False\n#True ",
        "generated_testcode": "assert check_isosceles(5, 6, 7) == False\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if m < n:\n        return None\n    else:\n        return list1[n:]+list1[:n]\nlist1=['a','b','c','d','e','f','g','h']\nm=2\nn=4\nprint(rotate_left(list1,m,n))\n\n#Output:['e', 'f', 'g', 'h', 'a', 'b', 'c', 'd'] ",
        "generated_testcode": "assert rotate_left([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],2,2) == [\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\"]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n# test the function with a sample list\nmy_list = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\nprint(neg_count(my_list)) ",
        "generated_testcode": "assert neg_count(list()) == 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w{3,5}\\b'\n    result = re.findall(pattern,text)\n    return result\n\ntext = \"I love programming and programming is fun\"\nprint(find_char(text) # Output: ['I', 'lov', 'pro', 'and', 'pro', 'fun'] ",
        "generated_testcode": "assert find_char(text=\"Hello world! This is a test string.\") == [\"Hello\", \"test\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1 if n & 1 == 0 else 0\n        n >>= 1\n    return count \n\n#test the function\nprint(count_unset_bits(10)) # 2 \nprint(count_unset_bits(15)) # 3 \nprint(count_unset_bits(25)) # 3 \nprint(count_unset_bits(128)) # 7 \nprint(count_unset_bits(1023)) # 2 \n",
        "generated_testcode": "assert count_unset_bits(0b1111) == 0\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n\n\nstr1 = \"google.com\"\nprint(char_frequency(str1))\n\n\n# Output: {'g': 2, 'o': 2, 'l': 1, 'e': 1, '.': 1, 'c': 1, 'm': 1} ",
        "generated_testcode": "assert char_frequency(str1) == {'a': 2, 'b': 3, 'c': 1, 'd': 2, 'e': 1, 'f': 1}\n\n\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    l = len(sub_li) \n    for i in range(0, l): \n        for j in range(0, l-i-1): \n            if (sub_li[j][1] > sub_li[j + 1][1]): \n                temp = sub_li[j] \n                sub_li[j] = sub_li[j + 1] \n                sub_li[j + 1] = temp \n    return sub_li \n# Example \nsub_li = [['item1', 20], ['item2', 10], ['item3', 30], ['item4', 5], ['item5', 15]] \nsub_li = Sort(sub_li) \nprint(sub_li) ",
        "generated_testcode": "assert Sort(sub_li) == sorted(sub_li, key=lambda x: x[1])\n\n# Test case 1:\nsub_li = [[1, 3], [2, 2], [3, 1]]\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        print(\"Valid triangle\")\n    else:\n        print(\"Invalid triangle\")\n\na=int(input(\"Enter the length of side a: \"))\nb=int(input(\"Enter the length of side b: \"))\nc=int(input(\"Enter the length of side c: \"))\ncheck_Validity(a,b,c) ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = (n/2)*(2*a + (n-1)*d)\n    return sum\n\n# Test the function\nprint(ap_sum(1,10,2))\n\n\n# Output: 60\n\n\n# Explanation: \n# The sum of an arithmetic progression can be calculated as:\n# S = (n/2) * (2a + (n-1)d)\n# where, S is the sum, a is the first term, n is the number of terms and d is the common difference. \n# Therefore, for a = 1, n = 10 and d = 2, we get,\n# S = (10/2) * (2*1 + 9*2) = 5*20 = 100 \n# Hence, the output is 60. ",
        "generated_testcode": "assert ap_sum(1, 5, 2) == 15\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n\n# Test the function with \"February\" and \"April\"\nprint(check_monthnum(\"February\")) # True\nprint(check_monthnum(\"April\")) # False ",
        "generated_testcode": "assert check_monthnum(February) == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b\\w+\\b[.,?!]?\" # \\b matches word boundary, \\w matches any letter, and \\b matches any punctuation\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog.\"\nprint(text_match_word(text)) # Output: \"dog.\"\n\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(text_match_word(text)) # Output: \"dog\" ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\" ) == \"world\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s):\n        if s[i] == s[0] or s[i] == s[-1]: \n            count += 1\n    return count\n\n# test the function with some examples\nprint(check_Equality(\"abcde\"))\nprint(check_Equality(\"ababa\"))\nprint(check_Equality(\"abcd\")) ",
        "generated_testcode": "assert check_Equality(s) == 1\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    res = 0 \n    for i in range(x+1,y):  \n        if(y%i==0): \n            for j in range(2,i): \n                if(i%j==0): \n                    break\n            else: \n                res = i \n    return res \nprint(find_Divisor(4,10)) ",
        "generated_testcode": "assert find_Divisor(10, 20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns the sum of the three smallest numbers in the list.\n    \"\"\"\n    # Remove any negative numbers from the list\n    lst = [num for num in lst if num >= 0]\n    # Sort the list in ascending order\n    lst.sort()\n    # If there are less than three positive numbers, return 0\n    if len(lst) < 3:\n        return 0\n    else:\n        # Return the sum of the first three numbers in the sorted list\n        return lst[0] + lst[1] + lst[2]\n\n# Test the function with some examples\nprint(sum_three_smallest_nums([4, -1, 7, 2, -5, 9, 11, 6, 10, -3])) # Expected output: 3\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Expected output: 6\nprint(sum_three_smallest_nums([9, -9, 0, -2, 8, -7, -3, 4])) # Expected output: 0\nprint(sum_three_smallest_nums([1, -1, 2, -5, -4])) # Expected output: 0 ",
        "generated_testcode": "assert sum_three_smallest_nums(lst=[10, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == 6 # True\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    lst = list(s)\n    lst.sort()\n    return tuple(lst)\n\n#Example:\n# set_to_tuple({1,2,3,4}) -> (1,2,3,4)\n# set_to_tuple({\"apple\",\"banana\",\"cherry\"} -> (\"apple\",\"banana\",\"cherry\")\n# set_to_tuple({True, False, 3.14}) -> (False, 3.14, True)\n\n\n#Test the function with the following cases:\nprint(set_to_tuple({1,2,3,4})) # should print (1,2,3,4)\nprint(set_to_tuple({\"apple\",\"banana\",\"cherry\"})) # should print (\"apple\", \"banana\", \"cherry\")\nprint(set_to_tuple({True, False, 3.14})) # should print (False, 3.14, True) ",
        "generated_testcode": "assert set_to_tuple(set()) == ()\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\nclass Solution:\n    def smallestRange(self, nums: List[List[int]) -> List[List[int]:\n        pq = []\n        heapq.heappush(pq, ListNode(nums[0][0], 0, 0))\n        max_val = float('-inf')\n        min_range = [float('inf'), float('inf')]\n        for num_list in nums:\n            heapq.heappush(pq, ListNode(num_list[0], nums.index(num_list), 0))\n            max_val = max(max_val, num_list[0])\n        \n        while len(pq) > 1:\n            min_val = pq[0].value\n            if max_val - min_val < min_range[1] - min_range[0]:\n                min_range = [min_val, max_val]\n            \n            if pq[0].index == len(nums) - 1:\n                heapq.heappop(pq)\n            else:\n                curr_list = nums[pq[0].index]\n                heapq.heappush(pq, ListNode(curr_list[pq[0].index + 1], pq[0].index,",
        "generated_testcode": "assert __init__(1, [1, 2, 3, 4, 5], 0) == (1, 1)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Define variables for digits and letters count\n    digits = 0\n    letters = 0\n    # Loop through each character in the string\n    for char in s:\n        # Check if the character is a digit\n        if char.isdigit():\n            digits += 1\n        # Check if the character is a letter\n        elif char.isalpha():\n            letters += 1\n    # Return the sum of digits and letters\n    return (digits, letters)\n\n# Example usage:\nprint(dig_let(\"Python 3.8.2\")) # (2, 6) ",
        "generated_testcode": "assert dig_let(s=\"Hello World! 123\") == (3, 7)\n\n\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        if int(i**0.5)**2 == i: # checking if square root of i is an integer\n            if i**0.5%2!=0: # checking if square root is odd\n                count += 1\n    return count\n\nn = 1\nm = 10\nprint(count_Odd_Squares(n,m)) # output: 1 (4 and 9 are odd squares between 1 and 10) ",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 2 # Testing for range 1 to 10\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    diffs = []\n    for i in range(len(nums) - 1):\n        diffs.append(nums[i + 1] - nums[i])\n    return diffs\n\nprint(diff_consecutivenums([1, 2, 3, 5, 8, 9, 12]))  # Output: [1, 2, 3, 3, 3]\n\n\n# You can also use a list comprehension to achieve the same result in one line:\ndef diff_consecutivenums(nums):\n    return [nums[i + 1] - nums[i] for i in range(len(nums) - 1)]\nprint(diff_consecutives([1, 2, 3, 5, 8, 9, 12]))  # Output: [1, 2, 3, 3] ",
        "generated_testcode": "assert diff_consecutivenums(nums=[1, 2, 3, 5, 8, 9, 10]) == [1, 3, 3, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function will return the nth zigzag number for given k.\n    \"\"\"\n    if n <= k:\n        return 1\n    step = 1\n    while n > 1:\n        n -= k\n        step += 1\n        n -= 1\n    return step ",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    i=1\n    while(i**2<=m and i**2<=n):\n        count+=2*(m//i-1)+2*(n//i-1)+1\n        i+=1\n    return count-2\n# Example:\n# Input:  m = 5, n = 5\n# Output: 2\n# Explanation: The 2 squares are 1*1 and 2*2. \n\n# Example:\n# Input:  m = 10, n = 10\n# Output: 15 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    C = [[0 for i in range(r+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(r+1): \n            if j == 0 or i == j: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][r]\ndef count_sequences(values, length): \n    n = len(values) \n    total = 0\n    for i in range(n): \n        if values[i] >= 0: \n            total += bin_coff(n-i-1, length-1) \n    return total\n# Driver code \nvalues = [1, -2, 3, -4, 5, -6, 7] \nlength = 3\nprint(\"Number of sequences of length\", length, \"having non-negative prefix sums: \", count_sequences(values, length))\nvalues = [1, -1, -2, 3, 4, -3] \nlength = 2\nprint(\"Number of sequences of length\", length, \"having non-negative prefix sums: \", count_sequences(values, length)) ",
        "generated_testcode": "assert bin_coff(5, 2) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in string :\n        if i != '0' and i != '1':\n            return False\n    return True \n\n# Test the function with a sample input\nstring = \"10101010101001\"\nprint(check(string) # Output: True\n\n\nstring = \"1010101010012\"\nprint(check(string) # Output: False ",
        "generated_testcode": "assert check(None) == False\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = [0] * 256 \n    for i in s : \n        freq[ord(i)] += 1\n    n = len(s) \n    res = n \n    freq[ord(s[0])] -= 1\n    for i in range(1, n) : \n        if (freq[ord(s[i])] == 0) : \n            res = n - i \n            break\n        freq[ord(s[i])] -= 1\n    return res ",
        "generated_testcode": "assert minimum_Length(s=\"aaabbbccddeeff\") == 4\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {} \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    for i in arr: \n        if freq[i] == k: \n            return i \n    return -1\n\narr = [1,2,3,4,5,6,6,6,6,6]\nn = len(arr)\nk = 3\nprint(first_Element(arr,n,k)) ",
        "generated_testcode": "assert first_Element(arr=[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5], n=11, k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str) > 128:\n        return False\n    char_set = [False for _ in range(128)]\n    for char in str:\n        if char_set[ord(char)]:\n            return False\n        char_set[ord(char)] = True\n    return True\n\nprint(unique_Characters(\"hello\"))\nprint(unique_Characters(\"world\"))\nprint(unique_Characters(\"unique\")) ",
        "generated_testcode": "assert unique_Characters(\u201cabcde\u201d) == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Removes the specified column from the nested list\n    Parameters:\n    list1 (list): Nested list\n    n (int): Column number to remove\n    Returns:\n    A new nested list with the specified column removed\n    \"\"\"\n    new_list = []\n    for i in range(len(list1)):\n        temp_list = []\n        for j in range(len(list1[i]):\n            if j != n:\n                temp_list.append(list1[i][j])\n        new_list.append(temp_list)\n    return new_list\n\n# Test the function with a sample nested list\nsample_list = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13],[14,15,16,17]]\nprint(remove_column(sample_list, 2)) ",
        "generated_testcode": "assert remove_column(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 2) == [\n        [1, 3, 5],\n        [6, 8, 9],\n        [10, 12, 13],\n        [14, 16, 17]\n    ], \"Test 1 failed\"\n\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return a+(n-1)*d\n\n# to test the function\n# call the function with a=5, d=3 and n=10\nprint(tn_ap(5,10,3)) ",
        "generated_testcode": "assert tn_ap(1, 5, 2) == 7\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for x in range(radius):\n        for y in range(radius):\n            if x*x + y*y <= radius*radius:\n                count += 1\n    return count\n\n# Test the function\nradius = 5\nprint(\"The number of rectangles in a circle of radius\", radius, \"is\", count_Rectangles(radius)) ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    angle = 180 - (a + b)\n    return angle\n\n# Test the function with two angles of a triangle\nprint(find_angle(30, 45) == 105) # True\nprint(find_angle(45, 30) == 105) # True\nprint(find_angle(10, 70) == 1100) # True\nprint(find_angle(60, 25) == 95) # True\nprint(find_angle(90, 30) == 60) # True ",
        "generated_testcode": "assert find_angle(30, 45) == 105\n\n# Write a function to calculate the perimeter of a rectangle.\ndef calculate_perimeter(length, width):\n    pass\n\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_element = test_list[0]\n    for element in test_list:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n# Test the function with sample data\nrecords = [(1, 2, 3), (4, 5, 6, 7), (7, 8), (9, 10, 2, 11), (12, 13, 14, 15, 16)]\nprint(find_max(records))  # Output: 16 ",
        "generated_testcode": "assert find_max(()) == None\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = list(map(lambda x,y : x%y,nums1,nums2))\n    return result\n\n#Example\nnums1 = [10,20,30,40,50]\nnums2 = [3,4,6,8,10]\nprint(moddiv_list(nums1,nums2)) ",
        "generated_testcode": "assert moddiv_list(nums1=[10, 20, 30], nums2=[3, 4, 5]) == [1, 2, 0]\n\n\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0: \n        return \"Invalid input\" \n    else: \n        d = b*b - 4*a*c \n        if d > 0: \n            root1 = (-b + d**(0.5))/2*a \n            root2 = (-b - d**(0.5))/2*a \n            if root1 == 2*root2: \n                return True \n            else: \n                return False \n        elif d == 0: \n            return True \n        else: \n            return False \n\na = int(input(\"Enter the coefficient of x^2: \")) \nb = int(input(\"Enter the coefficient of x: \")) \nc = int(input(\"Enter the constant term: \")) \nprint(Check_Solution(a,b,c)) \n\n#Example \n#Input: Enter the coefficient of x^2: 1\n#       Enter the coefficient of x: 4\n#       Enter the constant term: 4\n#Output: True ",
        "generated_testcode": "assert Check_Solution(1, -6, 9) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1: \n        return \"1st carol\"\n    elif n == 2: \n        return \"2nd carol\"\n    elif n == 3: \n        return \"3rd carol\"\n    else: \n        return \"{}th carol\".format(n)\n\n# Test case \nprint(get_carol(1)) # Output: 1st carol\nprint(get_carol(2)) # Output: 2nd carol\nprint(get_carol(3)) # Output: 3rd carol\nprint(get_carol(4)) # Output: 4th carol ",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return [sublist for sublist in list1 if sublist]\n\n# Test the function\nprint(remove_empty([[1,2,3,4,[]])) # Output: [1,2,3,4]\nprint(remove_empty([[1,2,3,[],5,6,[]])) # Output: [1,2,3,5]\nprint(remove_empty([[1,2,3,[],5,[7,8],[]])) # Output: [1,2,3,5,[7,8]\nprint(remove_empty([[1,2,[],[],3,4,[],5,[7,[]]])) # Output: [1,2,3,5,[7]\n\n\n# Write a function to remove empty strings from a given list of strings.\ndef remove_empty_strings(list2):\n    return [string for string in list2 if string]\n# Test the function\nprint(remove_empty_strings([\"hello\", \"\", \"world\", \"\", \"python\", \"programming\"]) # Output: [\"hello\", \"world\", \"python\", \"programming\"]\nprint(remove_empty_strings([\"\", \"python\", \"programming\", \"\", \"is\", \"awesome\"]) # Output: [\"python\", \"programming\", \"is\", \"awesome\"]\nprint(remove_empty_strings([\"\", \"\", \"\", \"python\", \"is\", \"\", \"awesome\"]) # Output: [\"python\", \"is\", \"awesome\"] ",
        "generated_testcode": "assert remove_empty([]), []\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_count = 0\n    max_item = None\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n    return max_item\n\n\n# Test the function with an example list\nnums = [1, 2, 3, 2, 4, 4, 4, 4, 2, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7]\nprint(max_occurrences(nums))  # Output: 7 ",
        "generated_testcode": "assert max_occurrences(nums=[1, 2, 3, 2, 3, 4, 5, 2, 6, 1, 1, 1]) == 1\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(i+K for i in test_list)\n\n# Test the function with sample input\nprint(add_K_element((1, 2, 3, 4, 5, 6), 2)) # Output: (3, 4, 5, 6, 7)\nprint(add_K_element((10, 11, 12, 13, 14, 15), 5) # Output: (15, 16, 17, 18, 19)\n\n# Check if the function works for negative numbers as well\nprint(add_K_element((-1, -2, -3, -4), 4) # Output: (3, 2, 1)\n\n\n# Function to reverse the tuple\ndef reverse_tuple(test_tuple):\n    return test_tuple[::-1]\n\n# Test the function with sample input\nprint(reverse_tuple((1, 2, 3, 4, 5)) # Output: (5, 4, 3, 2, 1)\nprint(reverse_tuple((10, 20, 30, 40, 50, 60)) # Output: (60, 50, 40, 30, 20, 10)\n\n# Check if the function works for single element tuple\nprint(reverse_tuple((1,)) # Output: (1,)\n\n# Function to check if a tuple",
        "generated_testcode": "assert add_K_element(( (1, 2, 3, 4, 5), 5) == (6, 7, 8, 9)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    flip_count = 0\n    prev = ch[0]\n    for i in range(1, len(ch)):\n        if ch[i] == prev:\n            flip_count += 1\n        else:\n            prev = ch[i]\n    return flip_count\n\n#test the function\nch = \"01011101100\"\nprint(make_flip(ch)) #3 flips required\nch = \"0010110\"\nprint(make_flip(ch)) #1 flip required\nch = \"111110000\"\nprint(make_flip(ch)) #2 flips required\nch = \"000000\"\nprint(make_flip(ch)) #no flip required\nch = \"101\"\nprint(make_flip(ch)) #1 flip required ",
        "generated_testcode": "assert make_flip(1010101010101) == 2\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while n != 0:\n        count = count + 1\n        n = n // 10\n    return count\n    \n# Test the function with an example\nprint(count_Digit(123456)) # Output: 4\nprint(count_Digit(10000)) # Output: 4\nprint(count_Digit(999)) # Output: 3 ",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Example usage:\nlist_nums = [1, 2, 3, -2, -8, -1, 7, 6, -5, 4]\nprint(adjacent_num_product(list_nums)) # Output: 12 ",
        "generated_testcode": "assert adjacent_num_product(list_nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    self.data = data \n    self.left = None\n    self.right = None\n\ndef is_balanced(self):\n    if self.left and self.right:\n        if abs(self.left.height() - self.right.height()) <= 1 and self.left.is_balanced() and self.right.is_balanced():\n            return True\n        return False\n    elif self.left:\n        return self.left.is_balanced()\n    elif self.right:\n        return self.right.is_balanced()\n    else:\n        return True\n\ndef height(self):\n    if self.left and self.right:\n        return max(self.left.height(), self.right.height()) + 1\n    elif self.left:\n        return self.left.height() + 1\n    elif self.right:\n        return self.right.height() + 1\n    else:\n        return 0 ",
        "generated_testcode": "assert __init__(1) == True\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return test_tup * N\n\n# Test the function with a sample tuple and N=3\ntup = (1, 2, 3, 4)\nN = 3\nprint(repeat_tuples(tup, N)) ",
        "generated_testcode": "assert repeat_tuples((\"abc\", 3) == (\"abc\", \"abc\", \"abc\")\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    return 2*((l*w)+(l*h)+(w*h))\n\n\n#testing the function\nprint(lateralsurface_cuboid(5,4,7)) # output: 86\nprint(lateralsurface_cuboid(2,3,6)) # output: 36\n\n\n#Write a function to find the volume of cuboid\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n#testing the function\nprint(volume_cuboid(5,4,7)) # output: 140\nprint(volume_cuboid(2,3,6)) # output: 12\n\n\n#Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    return 3.14*(r**2)*h\n\n#testing the function\nprint(volume_cylinder(3,5)) # output: 157.0789999999999999998\nprint(volume_cylinder(4,7)) # output: 254.2799999999999999997\n\n#Write a function to find the total surface area of cylinder\ndef totalsurface_cylinder(r,h):\n    return (2*3.14*r*h)+(2*3.14*r**2)\n\n#testing",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 52\n\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(price)):\n        for j in range(i + 1, len(price)):\n            if price[i][1] > price[j][1]:\n                price[i], price[j] = price[j], price[i]\n    return price\n\n# Test the function with sample input\nprices = ((\"apple\", 2.00), (\"banana\", 0.50), (\"cherry\", 3.25), (\"orange\", 1.50))\nprint(float_sort(prices)) # Expected output: [('cherry', 3.25), ('apple', 2.0), ('orange', 1.5), ('banana', 0.5)] ",
        "generated_testcode": "assert float_sort(('apple', 1.5, 'banana', 2.5, 'orange', 3.5) == ('apple', 1.5, 'banana', 2.5, 'orange', 3.5)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if left_element == right_element:\n        return left_element + 1\n\n    if A[right_element] <= left_element:\n        return left_element\n    mid = (left_element + right_element) // 2\n    if A[mid] == mid + 1:\n        return smallest_missing(A, left_element, mid - 1)\n    elif A[mid] == A[right_element]:\n        return smallest_missing(A, left_element, right_element - 1)\n    else:\n        return smallest_missing(A, mid + 1, right_element)\n\n\n# test the function\nA = [0, 1, 2, 3, 4, 6, 9, 11, 15]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 5\n\n\n# test the function\nA = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 11\n\n\n# test the function\nA = [0, 1, 2, 3, 4, 8, 9, 11, 12, 13]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: ",
        "generated_testcode": "assert smallest_missing(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], left_element=0, right_element=9) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Sort the given list in ascending order using heap algorithm.\n    \"\"\"\n    build_max_heap(nums)\n    size = len(nums)\n    for i in range(size-1, 0, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    return nums\n\ndef build_max_heap(nums):\n    \"\"\"\n    Build max heap for the given list.\n    \"\"\"\n    size = len(nums)\n    for i in range(size//2-1, -1, -1, -1):\n        heapify(nums, i, size)\n\ndef heapify(nums, i, size):\n    \"\"\"\n    Heapify the given list from index i to size.\n    \"\"\"\n    largest = i\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    if left_child < size and nums[left_child] > nums[largest]:\n        largest = left_child\n    if right_child < size and nums[right_child] > nums[largest]:\n        largest = right_child\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i]\n        heapify(nums, largest, size)\n\n# Example usage:\nnums = [4",
        "generated_testcode": "assert heap_assending(nums=[4, 2, 5, 1, 3, 0, 9, 7]) == [0, 1, 2, 3, 4, 5, 7, 9]\n\n# Test case 1: Test the function with a list of integers.\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    volume = l * w * h\n    return volume\n\n# Test the function with examples\nprint(volume_cuboid(5,4,3) == 60) # True\nprint(volume_cuboid(10,2,10) == 200) # True\nprint(volume_cuboid(2.5,2,1.5) == 3.75) # True\n\n\n# Write a function to find the surface area of a cuboid\ndef surface_area_cuboid(l,w,h):\n    return 2*((l*w)+(w*h)+(h*l))\n\n# Test the function with examples\nprint(surface_area_cuboid(5,4,3) == 52) # True\nprint(surface_area_cuboid(10,2,10) == 80) # True\nprint(surface_area_cuboid(2.5,2,1.5) == 23.25) # True ",
        "generated_testcode": "assert volume_cuboid(2, 3, 4) == 24\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    pass\n\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    # convert string to list of characters\n    str = list(str)\n    # sort the list to handle duplicates\n    str.sort()\n    # generate permutations\n    generate_permutations(str, 0, len(str) - 1, result)\n    return result\n\ndef generate_permutations(str, left, right, result):\n    if left == right:\n        # convert list to string and add to result\n        result.append(''.join(str))\n    else:\n        for i in range(left, right + 1):\n            # generate permutations of each sub-string\n            str[left], str[i] = str[i], str[left]\n            generate_permutations(str, left + 1, right, result)\n            str[left], str[i] = str[i], str[left]  # backtrack\n\n# Test\nprint(permute_string(\"aab\"))\n# Output: ['aab', 'aba', 'baa', 'abb', 'bab', 'baa', 'aba', 'abb', 'bba'] ",
        "generated_testcode": "assert permute_string(None) == []\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Rounds a given number to the nearest multiple of another number.\n\n    Parameters:\n    n (float): The number to be rounded.\n    m (int): The multiple to which the number should be rounded.\n    \n    Returns:\n    An integer representing the rounded number.\n    \"\"\"\n    return m * round(n/m) ",
        "generated_testcode": "assert round_num(15, 10) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    temp_dict = {}\n    result = []\n    for item in test_tup:\n        if item not in temp_dict:\n            temp_dict[item] = True\n        else:\n            temp_dict[item] = False\n    for item in test_tup:\n        if temp_dict[item]:\n            result.append(item)\n        else:\n            result.append('duplicate')\n    return tuple(result)\n\n\n# test the function with a sample tuple\ntest_tup = (1, 2, 3, 2, 4, 3, 5, 6, 1, 7, 2, 8)\nprint(remove_replica(test_tup))  # Output: (1, 2, 'duplicate', 3, 4, 'duplicate', 5, 6, 'duplicate', 7, 8) ",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'd', 'b', 'e', 'a') == ('a', 'b', 'c', 'd', 'e', None)\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return s.replace(c,\"\")\n\n#Test the function with an example \ns = \"hello world\"\nc = \"l\"\nprint(remove_Char(s,c)) #Output: \"heo word\" ",
        "generated_testcode": "assert remove_Char(s='hello world', c='l') == 'heo word'\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_list) == 0:\n        return []\n    last_element = test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list\n\n#Example:\n#Input : [1, 2, 3, 4, 5, 6]\n#Output: [6, 1, 2, 3, 4, 5]\n#Example:\n#Input : ['python', 'java', 'c++', 'kotlin']\n#Output: ['kotlin', 'python', 'java', 'c++'] ",
        "generated_testcode": "assert move_first([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]) == [\"elderberry\", \"apple\", \"banana\", \"cherry\", \"date\"]\n\n\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2*((l*w)+(w*h)+(h*l))\n\n#Test function with some sample inputs\nprint(surfacearea_cuboid(4,2,3)==52)#True\nprint(surfacearea_cuboid(1,1,1)==6)#True\nprint(surfacearea_cuboid(3,3,3)==54)#True ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n\n# Test 1: Test with valid input\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function will generate a 2D list with the given dimensions and fill it with zeros.\n    \"\"\"\n    # Create an empty list to store the rows\n    my_list = []\n    # Use a loop to add sublists to the main list\n    for i in range(rownum):\n        # Add a sublist of zeros\n        my_list.append([0]*colnum)\n    # Return the completed list\n    return my_list\n\n# Test the function\nprint(multi_list(3,4)) # Should print [[0,0,0,0,0],[0,0,0,0],[0,0,0,0]] ",
        "generated_testcode": "assert multi_list(3,4) == [[None, None, None, None], [None, None, None], [None, None, None]]\n\n\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_list = sorted(list_data, key=lambda x: x[index_no])\n    return sorted_list\n\n\n# Test the function with sample data\nsample_list = [[4, \"hello\", \"world\"], [1, \"python\", \"programming\"], [2, \"code\", \"block\"]]\nsorted_list = index_on_inner_list(sample_list, 0)\nprint(sorted_list)\n\nsorted_list = index_on_inner_list(sample_list, 1)\nprint(sorted_list)\nsorted_list = index_on_inner_list(sample_list, 2)\nprint(sorted_list) ",
        "generated_testcode": "assert index_on_inner_list(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ],\n    1\n) == [\n    [4, 5, 6],\n    [1, 2, 3],\n    [7, 8, 9]\n]\n\n# Test case 1: Test if the function can sort a list of lists by the second element of each inner list.\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(A)\n    low, high = 0, n - 1\n    while low < high:\n        mid = (low + high) // 2\n        if high < low:\n            break\n        if mid < n - 1 and A[mid] > A[mid + 1]:\n            return mid + 1\n        elif mid > 0 and A[mid] < A[mid - 1]:\n            return mid\n        elif A[low] >= A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return 0\n\n\n# Example usage:\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A)) # Output: 3 ",
        "generated_testcode": "assert find_rotation_count(A=[1, 2, 3, 4, 5, 6, 7]) == 0\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return n ^ (n & ((1 << (len(bin(n)[3:])-1) - 1) << 1) * -1) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 -> 1001\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize frequency of smallest element to 1 \n    freq = 1\n    # Sort the array \n    arr.sort() \n    # Traverse the array from second element to last element \n    for i in range(1, n): \n        # If current element is same as the smallest element, \n        # increment count of frequency \n        if arr[i] == arr[0]: \n            freq += 1\n        else: \n            break\n    return freq ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,2,1]) == 2\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3)\n\n\n# Test the function\nfor i in range(10):\n    print(get_perrin(i))\n\n\n# Output:\n# 3\n# 0\n# 2\n# 3\n# 2\n# 3\n# 0\n# 3\n# 3\n# 3\n# 3\n# 2\n# 8\n# 3\n# 2\n# 11\n# 0\n# 11\n\n# The first 10 Perrin numbers are: 3, 0, 2, 3, 2, 3, 3, 3, 3, 2, 8, 3, 2, 11, 0, 11, ... ",
        "generated_testcode": "assert get_perrin(0) == 3\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    stack = []\n    count = 0\n    for char in s:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    return count + len(stack)\n\n# Test\ns1 = \"(()())()\"\ns2 = \"()(()())\"\ns3 = \"()))((\"\nprint(swap_count(s1)) # 1\nprint(swap_count(s2)) # 0\nprint(swap_count(s3)) # 2 ",
        "generated_testcode": "assert swap_count(s=\"([])()[]\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if int(N, 16) % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n    \n#Example:\n# Input:\n# 1AB3\n# Output:\n# Odd ",
        "generated_testcode": "assert even_or_odd(0x10) == \"Even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    power = 1\n    while (power <= n): \n        power = power * 2\n    return power/2\n  \n# example usage\nprint(highest_Power_of_2(16)) # Output: 8\nprint(highest_Power_of_2(13)) # Output: 8\nprint(highest_Power_of_2(25)) # Output: 16 ",
        "generated_testcode": "assert highest_Power_of_2(16) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n\n# Test the function\nprint(find_lucas(0))  # Output: 2\nprint(find_lucas(1))  # Output: 1\nprint(find_lucas(2))  # Output: 3\nprint(find_lucas(3))  # Output: 3\nprint(find_lucas(4))  # Output: 4\nprint(find_lucas(5))  # Output: 7\nprint(find_lucas(6))  # Output: 11\nprint(find_lucas(7))  # Output: 11\nprint(find_lucas(8))  # Output: 21\nprint(find_lucas(9))  # Output: 34\nprint(find_lucas(10)) # Output: 55\nprint(find_lucas(11)) # Output: 89\nprint(find_lucas(12)) # Output: 2333\nprint(find_lucas(13)) # Output: 3777\nprint(find_lucas(14)) # Output: 987\nprint(find_lucas(15)) # Output: 1597\n",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    for i in list:\n        res.append(string + i)\n    return res\n\n#Test the function with an example\nmy_list = ['apple','banana','orange','mango']\nnew_list = add_string(my_list,'fruit: ')\nprint(new_list) ",
        "generated_testcode": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"fruit: \") == [\"fruit: apple\", \"fruit: banana\", \"fruit: cherry\"]\n\n\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes three lists and converts them into a nested dictionary\n    :param l1: list of keys for the outer dictionary\n    :param l2: list of keys for the inner dictionary\n    :param l3: list of values for the inner dictionary\n    :return: nested dictionary\n    \"\"\"\n    my_dict = {}\n    for i in range(len(l1)):\n        my_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            my_dict[l1[i]][l2[j]] = l3[i * len(l2) + j]\n    return my_dict\n\n\n\n# Test the function with sample data\nl1 = [\"A\", \"B\"]\nl2 = [\"a\", \"b\", \"c\"]\nl3 = [1, 2, 3, 4, 5, 6, 7]\nprint(convert_list_dictionary(l1, l2, l3))  # Output: {'A': {'a': 1, 'b': 2, 'c': 3}, 'B': {'a': 4, 'b': 5, 'c': 6}}\n\n\nl1 = [\"name\", \"age\", \"city\"]\nl2 = [\"first\", \"last\"]\nl3 = [\"John\", \"Doe\", \"Doe\", \"Jane\", \"Doe\", \"New York\", \"Los Angeles\"]\nprint(convert_list_dictionary(l1, l2, l3))  # Output:",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"b\": 1, \"c\": True}, \"b\": {\"a\": 2, \"c\": False}, \"c\": {\"a\": 3, \"b\": True}}\n\n# Test case 1: Test if the function can handle empty lists\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0] * (n+1)\n    dp[1] = 1\n    dp[2] = 2\n    dp[3] = 3\n    dp[4] = 4\n    dp[5] = 6\n    for i in range(6, n+1):\n        dp[i] = max(dp[i-1], dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5])\n    return dp[n]\n\n# Test the function with sample inputs\nprint(get_max_sum(10)) # Output: 21\nprint(get_max_sum(20)) # Output: 42\nprint(get_max_sum(30)) # Output: 67\n\n\n# Explanation:\n# For n=10, f(10) = max(f(5)+f(3)+f(2)+f(2), 10) = max(6+3+2+2, 10) = 13\n# For n=20, f(20) = max(f(5)+f(6)+f(4)+f(5), 20) = max(6+6+4+6, 20) = 20\n# For n=30, f(30) = max(f(15)+f(10)+f(6)+f(6), 30)",
        "generated_testcode": "assert get_max_sum (10) == 27\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(input_list, key=lambda x: len(x))\n\n\n# Test the function with sample input\nsample_list = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\", \"date\", \"grapes\", \"orange\"]\nprint(max_length_list(sample_list)) ",
        "generated_testcode": "assert max_length_list([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"]) == \"banana\"\n\n\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    distinct_tup = set(test_tup)\n    if len(distinct_tup) == len(test_tup):\n        return True\n    else:\n        return False\n\n# Test the function with sample data\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(check_distinct(test_tup))  # Output: True\n\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 8)\nprint(check_distinct(test_tup))  # Output: False ",
        "generated_testcode": "assert check_distinct(()) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n#Test the function with an example:\nstring = \"abcdcaf\"\nprint(first_non_repeating_character(string)) ",
        "generated_testcode": "assert first_non_repeating_character(None) == None\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if re.search('^[a-zA-Z]$',string[0]) and re.search('[a-zA-Z]$',string[-1]):\n        return True\n    else:\n        return False\n\n#example\nstring = 'apple'\nprint(check_char(string)) # True ",
        "generated_testcode": "assert check_char(string) == True \n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a>b and b>c:\n        return b\n    elif b>a and a>c:\n        return a\n    else:\n        return c\n\nprint(median_numbers(3, 2, 1)) # Should print 2\nprint(median_numbers(9, 12, 7)) # Should print 9\nprint(median_numbers(13, 7, 10)) # Should print 10 ",
        "generated_testcode": "assert median_numbers(2, 4, 3) == 3\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        result.append(sum_digits)\n    return result\n\n# Test cases\nprint(sum_of_digits([123, 456, 789]))  # Output: [6, 15, 24]\nprint(sum_of_digits([100, 200, 300, 400, 500, 600, 700, 800, 900]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_of_digits([10, 20, 30, 40, 50, 60, 70, 80, 90]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert sum_of_digits(list(range(10)) == [0, 1, 3, 3, 6, 6, 10, 10, 15, 15, 21, 28, 28, 36, 45",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup1):\n        res += (test_tup1[i] ^ test_tup2[i],)\n    return res\n\n# Test the function with sample tuples\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(bitwise_xor(test_tup1, test_tup2)) ",
        "generated_testcode": "assert bitwise_xor(('10101010', '00111011') == '10011111')\n\n\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n# Test the function with a sample list\ntest_list = [(1,2), (3,4), (1,2), (5,6), (1,2), (7,8), (3,4), (5,6)]\nprint(extract_freq(test_list)) # Output: {(1, 2): 2, (3, 4): 2, (5, 6): 2, (7, 8): 1} ",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"orange\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 2}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        tup_sum = []\n        for j in range(len(tup1)):\n            tup_sum.append(tup1[j] + tup2[j])\n        result.append(tuple(tup_sum) )\n    return tuple(result)\n\n\n# Test the function with sample inputs:\ntest_tup1 = ((1,2,3), (4,5,6), (7,8,9))\ntest_tup2 = ((10,20,30), (40,50,60), (70,80,90))\nprint(add_nested_tuples(test_tup1, test_tup2)) # Output: ((11, 22, 33), (44, 55, 6), (77, 88, 99)) ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18)) ) == ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n# Test case 1:\n# Input:\n# ((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18))\n# Output:\n# ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if (r > n-r): \n        r = n-r \n    ans = 1\n    mod = 10000000000007\n    for i in range(r): \n        ans = (ans * (n-i))%mod \n        ans = (ans * pow(10000000000009 - i, mod-2, mod))%mod \n    return ans ",
        "generated_testcode": "assert ncr_modp(10, 2, 13) == 45\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(re.match(pattern, str))\n\n\n# Test cases\nprint(is_valid_URL('http://www.google.com'))  # True\nprint(is_valid_URL('https://www.google.com'))  # True\nprint(is_valid_URL('http://google.com'))  # True\nprint(is_valid_URL('google.com'))  # False\nprint(is_valid_URL('http://www.google.com:8080'))  # True\nprint(is_valid_URL('http://localhost'))  # True\nprint(is_valid_URL('192.168.0.1.1'))  # True\nprint",
        "generated_testcode": "assert is_valid_URL(r\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n# test the function\nprint(minimum(2,3))\nprint(minimum(5,4))\nprint(minimum(7,6)) ",
        "generated_testcode": "assert minimum(5,6) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in tuple1: \n        if i == tuplex: \n            return True\n    return False\n\n#Example usage\ntuple1 = (1,2,3,4,5,6,7,8)\nprint(check_tuplex(4, tuple1)) # Output: True\nprint(check_tuplex(10, tuple1)) # Output: False\n\n\n#Using in operator\ndef check_tuplex(tuplex,tuple1):\n    return tuplex in tuple1\n\n#Example usage\ntuple1 = (1,2,3,4,5,6,7,8)\nprint(check_tuplex(4, tuple1)) # Output: True\nprint(check_tuplex(10, tuple1)) # Output: False\n\n#Both functions work the same way. ",
        "generated_testcode": "assert check_tuplex((\"apple\", (\"apple\", \"banana\", \"cherry\")) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n\n# Test the function with a number \nnum = 9\nprint(find_Parity(num)) ",
        "generated_testcode": "assert find_Parity(10) == 0 # even\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    digits = list(str(n))\n    # sort digits in descending order\n    digits.sort(reverse=True)\n    # find the first digit from the left that is smaller than the one on its right\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] > digits[i-1]:\n            # swap it with the smallest digit on its right\n            swap_idx = i\n            min_idx = i\n            for j in range(i, len(digits)):\n                if digits[j] < digits[min_idx]:\n                    min_idx = j\n            digits[i-1], digits[min_idx] = digits[min_idx], digits[i-1]\n            # reverse the digits to the right of the swapped digit\n            digits[i:] = digits[i:][::-1]\n            # convert back to integer and return\n            return int(''.join(digits))\n    # if no such digit is found, the number is already the maximum\n    return -1\n\n# test cases\nprint(rearrange_bigger(123456))  # Output: 531246\nprint(rearrange_bigger(98765))  # Output: 87659\nprint(rearrange_bigger(53492))  # Output: 54329\nprint(rearrange_bigger(321))   # Output: 321\nprint",
        "generated_testcode": "assert rearrange_bigger(12345) == 5342\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    pairs = []\n    for i in nums1:\n        for j in nums2:\n            pairs.append((i, j))\n\n    pairs = sorted(pairs, key=lambda x: x[0] + x[1])\n\n    return pairs[:k]\n\n# Test the function with an example:\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k))\n# Output: [(1, 4), (2, 4), (2, 5)] ",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 7, 11], nums2=[2, 4, 6], k=3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# test the function with some examples\nprint(min_product_tuple([(5, 6), (3, 2), (1, 7), (9, 4), (8, 3)])) # output: 18\nprint(min_product_tuple([(2, 5), (12, 3), (7, 6), (4, 9), (8, 3)])) # output: 12 ",
        "generated_testcode": "assert min_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)] ) == 12\n\n\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) != type(min_val):\n            continue\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n\n# Test the function with a list of integers and a list of strings\nlist1 = [3, 5, 2, 7, 1, 8, 6]\nprint(\"The minimum value in list1 is:\", min_val(list1))  # Output: 1\nlist2 = [\"apple\", \"banana\", \"cat\", \"dog\", \"elephant\"]\nprint(\"The minimum value in list2 is:\", min_val(list2))  # Output: apple\nlist3 = [3, \"cat\", 5, \"banana\", 8, \"dog\"]\nprint(\"The minimum value in list3 is:\", min_val(list3))  # Output: 3\nlist4 = [3, 5, \"apple\", \"cat\", 1, 2.5]\nprint(\"The minimum value in list4 is:\", min_val(list4))  # Output: 2.5 ",
        "generated_testcode": "assert min_val([\"apple\", 5, 3.14, \"banana\", 7, 2.71, \"cherry\", 10, \"orange\"]) == \"apple\"\n\n\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = word.split(\"_\")\n    camel = \"\"\n    for w in words:\n        camel += w.capitalize()\n    return camel[0].lower() + camel[1:]\n\n\n# Test the function with a snake case string\nsnake_case_string = \"convert_snake_case_to_camel_case\"\nprint(snake_to_camel(snake_case_string)) # Output: convertSnakeCaseToCamelCase ",
        "generated_testcode": "assert snake_to_camel(snake_to_camel) == \"snakeToCamel\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return [num for num in l if num % 2 == 0]\n\n# Test the function with the following list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nprint(remove_odd(l))\n\n\n# Output: [2, 4, 6, 8, 10, 12, 14] ",
        "generated_testcode": "assert remove_odd(l) == [2, 4, 6, 8]\n\n\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in list1:\n        new_list.append(i[n])\n    return new_list\n\n# Test the function with sample data\nlist1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nn = 1\nresult = extract_nth_element(list1, n)\nprint(result) # Output: [2, 5, 8] ",
        "generated_testcode": "assert extract_nth_element([(1,2), (3,4), (5,6), (7,8)], 2) == 4\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\n\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9]\nprint(overlapping(list1,list2)) # False\nlist3 = [5,6,7,8]\nprint(overlapping(list1,list3)) # True ",
        "generated_testcode": "assert overlapping(list1=[1,2,3,4,5],list2=[4,5,6,7,8]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_p = arr[0] * arr[1] \n    min_p = arr[0] * arr[1] \n    max_num = max(arr[0], arr[1]) \n    min_num = min(arr[0], arr[1]) \n    for i in range(2, len(arr)): \n        if arr[i] < 0: \n            max_p, min_p = min_p, max_p \n        max_p = max(arr[i], max_p, arr[i] * max_num) \n        min_p = min(arr[i], min_p, arr[i] * min_num) \n        max_num = max(arr[i], max_num) \n        min_num = min(arr[i], min_num) \n    return max_p ",
        "generated_testcode": "assert max_Product(arr) == (3, 4) # if arr = [1, 2, 3, 4, 5, 6, 7, 2, 1, 5, 3]\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n==0: \n        return 0\n    if n==1: \n        return 1\n    if n==2: \n        return 2\n    if n==3: \n        return 4\n    if n>=4:\n        return max(n,breakSum(n-1)+breakSum(n-2)+breakSum(n-3))\n    \nn=4\nprint(breakSum(n)) ",
        "generated_testcode": "assert breakSum(10) == 18\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    output = []\n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)): \n            if Input[i][0] == Input[j][0] and Input[i][1] == Input[j][1]: \n                output.append(Input[i]) \n                break\n    return output\n#Test the function with some example \nprint(group_tuples([(1,2),(2,3),(1,2),(4,5),(6,7),(1,2)])) #Output [(1, 2)] ",
        "generated_testcode": "assert group_tuples([(1,2,3), (2,3,4), (3,4,5)] ) == 3\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_len = 0\n    result = None\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)+1): \n            sub_lst = lst[i:j] \n            if len(sub_lst) > max_len: \n                max_len = len(sub_lst) \n                result = sub_lst \n    return result ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    rounded_list = []\n    for num in list1:\n        rounded_list.append(round(num))\n    total_sum = sum(rounded_list)\n    length = len(list1)\n    return total_sum * length\n\n\nprint(round_and_sum([1.2,2.4,3.6,4.8])) # should return 24\nprint(round_and_sum([1.23,2.47,3.75,4.39,5.12,5.66])) # should return 27\nprint(round_and_sum([7.2,4.5,9.1,6.3,2.8])) # should return 30\n\n\n# Solution:\ndef round_and_sum(list1):\n    rounded_list = [round(num) for num in list1] # using list comprehension to round each number in list1\n    total_sum = sum(rounded_list)\n    length = len(list1)\n    return total_sum * length\n\n\nprint(round_and_sum([1.2,2.4,3.6,4.8])) # should return 24\nprint(round_and_sum([1.23,2.47,3.75,4.39,5.12,5.6])) # should return 27\nprint(round_and_sum([7.2,4.5,9.1,6.3,2.8",
        "generated_testcode": "assert round_and_sum(list1) == 100\n\n# The function should round each number in the list to the nearest integer and then sum them up. \n# The length of the list should be multiplied with the sum of the rounded numbers. \n# For example, if the list is [1.5, 2.3, 3.7, 4.8, 5.2], the rounded numbers would be [2, 2, 4, 5, 5] and their sum is 13. \n# The length of the list is 4, so the final result should be 13 * 4 = 52. ",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum=0\n    i=1\n    count=0\n    while count<n:\n        if i%2==0:\n            sum+=i**3\n            count+=1\n        i+=1\n    return sum\nn=int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\",n,\"even numbers is\",cube_Sum(n)) ",
        "generated_testcode": "assert cube_Sum(3) == 216\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    delimiter = input(\"Enter the delimiter: \")\n    for i in range(len(test_tup)):\n        result += str(test_tup[i]) + delimiter\n    return result[:-len(delimiter)]\n\n\n# test the function\ntest_tup = (\"apple\", \"banana\", \"cherry\", \"orange\")\nprint(concatenate_tuple(test_tup)) # output: \"apple,banana,cherry,orange\"\n\n\n# testing with a different delimiter\nprint(concatenate_tuple(test_tup, \" - \") # output: \"apple - banana - cherry - orange\" ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"!\") == \"HelloWorld!\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n    return sum_of_cubes/n  \n    \n# Test the function with an example\nn = 5\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n)) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 14.16666666666666666667\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for col in range(n-1, -1, -1, -1):\n        for row in range(m-1, -1, -1, -1):\n            if col == n-1:\n                dp[row][col] = gold[row][col]\n            elif col != n-1:\n                if row == m-1:\n                    dp[row][col] = gold[row][col] + max(dp[row][col+1], dp[row+1][col+1])\n                elif row != 0:\n                    dp[row][col] = gold[row][col] + max(dp[row+1][col], dp[row][col+1], dp[row-1][col+1])\n                else:\n                    dp[row][col] = gold[row][col] + max(dp[row+1][col], dp[row][col+1])\n            else:\n                dp[row][col] = gold[row][col] + dp[row+1][col]\n    return dp[0][0]\n\n# Testing the code\ngold = [[1, 3, 34, 10, 20], \n        [23, 2, 18, 25], \n        [18, 222, 15, 30], \n        [",
        "generated_testcode": "assert get_maxgold(\n    [\n        [1, 3, 1, 5, 2],\n        [2, 2, 4, 0],\n        [5, 0, 2, 3],\n        [0, 6, 1, 2]\n    ], 3, 4) == 12\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return [word[-1] for word in test_tuple]\n\n\n# Test the function with a sample tuple\ntest_tuple = ('cat', 'dog', 'rabbit', 'tiger', 'lion')\nprint(extract_rear(test_tuple)) ",
        "generated_testcode": "assert extract_rear((\"hello\") == \"o\"\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\nlist1 = [[1, 2, 3], [2, 4, 6], [4, 5, 6, 7], [4, 8, 9]]\nprint(count_element_in_list(list1, 4)) # Output: 2 ",
        "generated_testcode": "assert count_element_in_list([\"apple\", \"banana\", \"cherry\", \"banana\", \"date\", \"banana\"], \"banana\") == 2\n\n\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n\n# Test the function with a sample list\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_oddnumbers(numbers)\nprint(result) # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert filter_oddnumbers(range(10)) == [1, 3, 5, 7, 9]\n\n\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r\"^(\\d{4})-(\\d{2})-(\\d{2})$\"\n    match = re.match(pattern, dt)\n    if match:\n        return match.group(2) + '-' + match.group(3) + '-' + match.group(1)\n    return dt\n\n#Example usage:\n#print(change_date_format(\"2020-05-10\")) # Output: \"05-10-2020\"\n#print(change_date_format(\"2021-12-31\")) # Output: \"12-31-2021\" ",
        "generated_testcode": "assert change_date_format(2021-01-01) == \"01-01-2021\"\n\n\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n# Example usage:\nmy_list = [3, 2, 1, 4, 6, 5, 7, 8, 2]\nprint(shell_sort(my_list)) #[1, 2, 2, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert shell_sort([\"apple\", \"pear\", \"orange\", \"banana\", \"grape\", \"strawberry\"]) == [\"apple\", \"banana\", \"grape\", \"orange\", \"pear\", \"strawberry\"]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i], test_tup2[i]))\n    return res\n\n# Test the function with example tuples\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = ('a', 'b', 'c', 'd', 'e')\nprint(and_tuples(test_tup1, test_tup2)) ",
        "generated_testcode": "assert and_tuples(('apple', 'banana', 'cherry', 'date', 'elderberry'), (1, 2, 3, 4)) == ('apple', 1, 'banana', 2, 'cherry', 3, 'date', 4, 'elderberry')\n\n# The output should be ('apple', 1, 'banana', 2, 'cherry', 3, 'date', 4, 'elderberry') ",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    a, b, c are the coefficients of the quadratic equation in the form ax^2 + bx + c = 0\n    \"\"\"\n    if a == 0:\n        return None\n    return (-b/(2*a), 0)\n\n# Example usage:\n# print(parabola_directrix(1, 3, 2)) # (1.5, 0) ",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n# test the function\nprint(common_element([1, 2, 3], [4, 5, 6]) == False)\nprint(common_element([1, 2, 3], [4, 5, 6, 2]) == True)\n\n\n# or we can use set() method:\ndef common_element(list1, list2):\n    return bool(set(list1) & set(list2))\n\n# test the function\nprint(common_element([1, 2, 3], [4, 5, 6]) == False)\nprint(common_element([1, 2, 3], [4, 5, 6, 2]) == True) ",
        "generated_testcode": "assert common_element([\"apple\", \"banana\", \"cherry\"], [\"orange\", \"kiwi\", \"banana\"]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # calculate the area using the formula: (base1+base2)*height/2\n    area = (base1+base2)*height/2\n    # calculate the median using the formula: (base1+base2)/2\n    median = (base1+base2)/2\n    return median, area\n\n# get input values for base1, base2, and height\nb1 = float(input(\"Enter the length of base1: \"))\nb2 = float(input(\"Enter the length of base2: \"))\nh = float(input(\"Enter the height: \"))\n\n# call the median_trapezium function with the input values\nmedian, area = median_trapezium(b1,b2,h)\n\n# print the median and area of the trapezium\nprint(\"Median of the trapezium is: \",median)\nprint(\"Area of the trapezium is: \",area) ",
        "generated_testcode": "assert median_trapezium(4, 6, 3) == 5.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in arr:\n        if i > number:\n            return False\n    return True\n\n# Driver Code\narr = [1, 2, 3, 4, 5]\nnumber = 4\nif check_greater(arr, number):\n    print(f\"{number} is greater than all the elements of {arr}\")\nelse:\n    print(f\"{number} is not greater than all the elements of {arr}\") ",
        "generated_testcode": "assert check_greater(arr=[1, 2, 3, 4, 5], number=4) == False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return bool(re.search(r'a+b+', text)\n\n\n# Test cases\nprint(text_match_one(\"abbbbc\")) # True\nprint(text_match_one(\"aabbbbc\")) # True\nprint(text_match_one(\"abbc\")) # False\nprint(text_match_one(\"abbbb\")) # True\nprint(text_match_one(\"abb\")) # False\nprint(text_match_one(\"aabb\")) # False\nprint(text_match_one(\"ab\")) # False\nprint(text_match_one(\"acbbb\")) # False\nprint(text_match_one(\"\")) # False ",
        "generated_testcode": "assert text_match_one([\"ab\", \"abb\", \"a\", \"abbb\", \"abcd\", \"acb\", \"abbbb\"] == [\"ab\", \"abb\", \"abbb\"]\n\n\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10\n\n# Test the function with an example\nnum = 12345\nprint(last_Digit(num)) ",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for num in list1:\n        if num < 0:\n            print(num)\n\nlist1 = [-1, 2, 3, -4, 5, -6, 7, 8, -9]\nneg_nos(list1)  # output: -1, -4, -6, -9 ",
        "generated_testcode": "assert neg_nos(list1) == [-3, -5, -1, -8]\n\n# Test case 1:\nlist1 = [3, 5, 1, 8, -3, -5, -1, -8]\nprint(neg_nos(list1)) # Output: [-3, -5, -1, -8]\n\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_string = \"\"\n    for i in str1:\n        if ord(i) % 2 == 0:\n            new_string += i\n    return new_string\n\n# Test the function with sample inputs\nprint(remove_odd(\"Hello, World!\")) # Expected output: \"Hlool\"\nprint(remove_odd(\"Python\")) # Expected output: \"Pot\"\nprint(remove_odd(\"\")) # Expected output: \"\" ",
        "generated_testcode": "assert remove_odd(None) == None\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[-(j + 1):][0]:\n                pairs += 1\n    return pairs\n\n\n# Example usage:\n# test_list = [1, 2, 3, 4, 5, 6, 4, 3, 2, 1]\n# print(count_bidirectional(test_list))  # Output: 3\n\n# test_list = [1, 2, 3, 4, 5, 6, 4, 3, 2, 1, 1, 2, 3, 4]\n# print(count_bidirectional(test_list))  # Output: 6 ",
        "generated_testcode": "assert count_bidirectional([\"cat\", \"dog\", \"bird\", \"dog\", \"cat\", \"cat\", \"fish\", \"dog\", \"fish\"]) == 2\n\n\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if L == []:\n        return 0\n    else:\n        return int(\"\".join(str(i) for i in L)[:-1]) * L[-1]\n\n#test the function with some examples\nprint(multiple_to_single([1, 2, 3, 4, 5, 6]))\nprint(multiple_to_single([2, 4, 5, 6, 8]))\nprint(multiple_to_single([9, 0, 0, 0, 8, 7, 6]))\nprint(multiple_to_single([1, 0, 0, 0])) ",
        "generated_testcode": "assert multiple_to_single(1, 2, 3) == 123\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize an empty list to store the positions of adverbs\n    adverb_positions = []\n    # create a list of adverbs from the given list\n    adverb_list = [\"quickly\", \"slowly\", \"strongly\", \"silently\", \"fortunately\", \"secretly\", \"suddenly\", \"happily\", \"safely\", \"carefully\"]\n    # split the text into words\n    words = text.split()\n    # iterate through the words in the sentence\n    for i in range(len(words)):\n        # check if the word is an adverb and if it is, add its position to the list\n        if words[i] in adverb_list:\n            adverb_positions.append(i)\n    # return the list of adverb positions\n    return adverb_positions\n\n# example usage\nprint(find_adverb_position(\"The dog jumped quickly and suddenly into the car and drove safely to the secret location.\")) # output: [1, 3, 6] ",
        "generated_testcode": "assert find_adverb_position(text) == [(3, \"quickly\"), (9, \"happily\"), (15, \"well\"), (21, \"quickly\"), (26, \"happily\"), (30, \"quickly\")]\n\n# The function should return a list of tuples, where each tuple contains the position of the adverb in the sentence and the adverb itself. ",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return 6 * (l ** 2)\n\n# Test the function with a test case\nprint(surfacearea_cube(3))  # Output: 54\n\n\n# Write a function to find the volume of a cube\ndef volume_cube(l):\n    return l ** 3\n\n# Test the function with a test case\nprint(volume_cube(3))  # Output: 27\n\n\n# Write a function to find the lateral surface area of a cylinder\ndef lateral_surface_area_cylinder(r, h):\n    return 2 * 3.14 * r * h\n\n# Test the function with a test case\nprint(lateral_surface_area_cylinder(5, 7))  # Output: 214.40\n\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r, h):\n    return 3.14 * r ** 2 * h\n\n# Test the function with a test case\nprint(volume_cylinder(5, 7))  # Output: 785.00\n\n\n# Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    return 4 * 3.14 * r ** 2\n# Test the function with a test case\nprint(surface_area_sphere(5))  # Output: 150.67\n\n\n# Write a function to",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n\n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    pass\n\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n# Example usage:\nnums1 = [3, -5, 1, 0, 6, -8, 4, 2, -3, 0, 9]\nprint(positive_count(nums1))  # Output: 0.5 (4/8)\nnums2 = [0, -5, -1, -6, -8, -4, -2, -3, 0, -9]\nprint(positive_count(nums2))  # Output: 0.0\nnums3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(positive_count(nums3))  # Output: 1.0\n\n# Note that we use the `if` statement to check if the number is positive (greater than 0) and increment the count if it is. ",
        "generated_testcode": "assert positive_count(nums=[3, -5, 1, 0, 6, -2, 8, -1]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg\n\n#Example usage:\nprint(largest_neg([1,2,-5,3,4,-8,6,-2]))  # Output: -2 ",
        "generated_testcode": "assert largest_neg(list1) == -10\n\n# Test case 1:\nlist1 = [-5, -10, 0, 1, 2, -100, 5, -7, 3]\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result\n\n\n# Test the function with an example:\nmy_list = [(1, 2, 3, 4), (4, 5, 6, 7, 8), (9, 10, 11, 12, 13, 14), (15, 16)]\nprint(trim_tuple(my_list, 3)) # Output: [(1, 2, 3), (4, 5, 6), (9, 10, 11), (15, 16)] ",
        "generated_testcode": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10, 11), (12, 13, 14, 15, 16, 17, 18), (19, 20, 21)] , 2) == [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n# Test case 1: Test with a list of tuples with different lengths and k=2\n# Expected output: [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n\ntest_tup1 = (2, 4, 5, 7)\ntest_tup2 = (10, 20, 30)\nprint(index_multiplication(test_tup1, test_tup2))  # Output: (20, 80, 210) ",
        "generated_testcode": "assert index_multiplication(( (1, 2, 3, 4), (5, 6, 7) ) ) == (5, 12, 28)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # create an empty dictionary \n    dict = {} \n    for i in lst: \n        if i in dict: \n            dict[i] += 1\n        else: \n            dict[i] = 1\n    for i in tup: \n        if i in dict: \n            print(i, \":\", dict[i]) ",
        "generated_testcode": "assert count_Occurrence((\"hello\", [\"h\", \"e\", \"l\", \"o\"]) == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums)\n\n\n# Test the function with an example list\nprint(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9])) #[1, 8, 27, 64, 125, 216, 343, 512] ",
        "generated_testcode": "assert cube_nums(range(1, 5)) == [1, 8, 27, 64, 125]\n\n\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        l = [3,5]\n        for i in range(2,n):\n            l.append(l[-1]+l[-2])\n        return sum(l)\n\nprint(cal_sum(0))\nprint(cal_sum(1))\nprint(cal_sum(2))\nprint(cal_sum(3))\nprint(cal_sum(4))\nprint(cal_sum(5))\nprint(cal_sum(6))\nprint(cal_sum(7))\nprint(cal_sum(8))\nprint(cal_sum(9))\nprint(cal_sum(10)) #sum of perrin number upto n term ",
        "generated_testcode": "assert cal_sum(1) == 3\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    distance1=((x2-x1)**2+(y2-y1)**2)**0.5\n    distance2=((x3-x2)**2+(y3-y2)**2)**0.5\n    distance3=((x3-x1)**2+(y3-y1)**2)**0.5\n    if distance1+distance2>distance3 and distance2+distance3>distance1 and distance1+distance3>distance2:\n        return True\n    elif distance1+distance2<distance3 or distance2+distance3<distance1 or distance1+distance3<distance2:\n        return False\n    else:\n        return False\n#Example:\n#x1,y1,x2,y2,x3,y3=2,3,4,6,5\n#print(check_Triangle(x1,y1,x2,y2,x3,y3)\n#True\n#Explanation:\n#The points are (2,3),(4,6),(5,5). The distances between them are 4.47,5.0 and 3.16. Since the sum of any two sides is greater than the third side, it is a valid triangle. ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,0,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function extracts the first specified size of characters from each string in a list of strings.\n    \"\"\"\n    result = []\n    for i in str:\n        if len(i) >= l:\n            result.append(i[:l])\n        else:\n            result.append(i)\n    return result\n\n\n\n# Example usage:\nstring_list = ['hello', 'world', 'python', 'programming']\nsize = 2\nresult = extract_string(string_list, size)\nprint(result)  # Output: ['he', 'wo', 'py'] ",
        "generated_testcode": "assert extract_string([\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"fruit\", \"grape\"], 2) == [\"apple\", \"banana\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\s+'\n    return re.sub(pattern,'',text1)\n\ntext1 = \"  Python is a language  with  many  features. \"\nprint(remove_whitespaces(text1)) ",
        "generated_testcode": "assert remove_whitespaces(text1) == \"Thisisatoestwithmanywords\"\n\n\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return None ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, n+1) : \n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n# Test the function with an example\nn = 24\nprint(sumofFactors(n)) ",
        "generated_testcode": "assert sumofFactors(20) == 32 \n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if 'z' in word:\n            result.append(word)\n    return result\n\n# test the function\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog\")) # ['jumps']\nprint(text_match_wordz(\"He zipped up his fly and zigged away\")) # ['zipped', 'zigged']\nprint(text_match_wordz(\"He zipped up his fly and zagged away\")) # ['zipped', 'zagged'] ",
        "generated_testcode": "assert text_match_wordz([\"hello\", \"world\", \"bazaar\", \"zoo\", \"zebra\", \"car\", \"zucchini\"] == [\"zoo\", \"zebra\", \"zucchini\"]\n\n\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    elif monthnum2 == 2:\n        return \"Check whether it's a leap year or not\"\n    else:\n        return \"Invalid month number\"\n\n#Test the function\nprint(check_monthnumb_number(2))\nprint(check_monthnumb_number(6))\nprint(check_monthnumb_number(13)) ",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    reversed_strings = []\n    for string in stringlist:\n        reversed_strings.append(string[::-1])\n    return reversed_strings\n\n#test the function\nstringlist = [\"hello\", \"world\", \"python\", \"programming\"]\nprint(reverse_string_list(stringlist)) # Output: ['olleh', 'dlrow', 'nohtygnimmorp'] ",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]\n\n\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0:\n        return None\n    min_len = len(lst[0])\n    min_list = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_list = lst[i]\n    return min_list\n\n# example\nlst = [[1,2,3,4],[4,5,6,7,8],[3,4],[9,10,11,12,13,14]]\nprint(Find_Min(lst)) # Output: [3, 4] ",
        "generated_testcode": "assert Find_Min([[1,2,3], [4,5,6], [7,8,9,10,11], [12], [13,14,15,16,17,18,19]] ) == [12]\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return l * b\n\n# Test the function with some sample inputs\nprint(rectangle_area(5, 4) == 20)  # True\nprint(rectangle_area(2, 7) == 14)  # True\nprint(rectangle_area(10, 10) == 100) # True ",
        "generated_testcode": "assert rectangle_area(5, 4) == 20\n\n# Write a function to find the volume of a cube.\ndef cube_volume(side):\n    pass\n\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'[A-Z]+', '', str1)\n\n# Example usage:\n# remove_uppercase('Hello WORLD, This is a TesT') # Output: 'lo, is a t'\n\n\n# Write a function to remove all non-numeric characters from a string using regex.\ndef remove_non_numeric(str1):\n    import re\n    return re.sub(r'\\D+', '', str1)\n# Example usage:\n# remove_non_numeric('A1B2C3D4') # Output: '1234'\n# remove_non_numeric('Hello 1234 World!') # Output: '1234' ",
        "generated_testcode": "assert remove_uppercase(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello World\"\nexpected_output_string = \"hello world\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n    \n# example\nlst = [[1,2,3], [4,5,6], [7,8,9]]\nprint(Extract(lst)) # Output: [1, 4, 7] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]] ) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\nstring = input(\"Enter a string: \")\nprint(\"Number of upper case characters in the string: \", upper_ctr(string)) ",
        "generated_testcode": "assert upper_ctr(\u201cHello World\u201d) == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(1, len(list1) + 1):\n        result += list(map(list, combinations(list1, i))\n    return result\n\n# Test the function with an example list\nprint(combinations_list([1, 2, 3, 4]))\n\n# Output: [[1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]\n\n\n# Let's test it with a larger list\nprint(combinations_list(list(range(1, 5)))\n# Output: [[1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n\n\n# Now, let's write a function to find all combinations of a given length n. We will modify the function above to include a parameter n, which is the length of",
        "generated_testcode": "assert combinations_list([\"apple\", \"banana\", \"orange\"]) == [[\"apple\", \"banana\", \"orange\"], [\"banana\", \"apple\", \"orange\"], [\"orange\", \"apple\", \"banana\"], [\"apple\", \"orange\", \"banana\"], [\"banana\", \"orange\", \"apple\"], [\"orange\", \"banana\", \"apple\"]]\n\n\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n\n        result = max(result, max_product)\n\n\n    return result\n\n# Test the function with an example\narr = [-10, -10, 5, 2, 6, -10, -5, 5, -6]\nprint(max_subarray_product(arr))  # Output: 180 ",
        "generated_testcode": "assert max_subarray_product([2, 3, -2, 4, -2, 4, 4, -1, 2]) == 16\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    v = list(dict.values())[0]\n    for i in dict.values():\n        if i != v:\n            return False\n    return True\n\n# Example:\n# dict = {'a': 1, 'b': 1, 'c': 1}\n# n = 1\n# print(check_value(dict, n))  # True\n\n\n# dict = {'a': 1, 'b': 2, 'c': 1}\n# n = 1\n# print(check_value(dict, n))  # False ",
        "generated_testcode": "assert check_value(dict(a=1, b=1, c=1), 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_dict = {}\n    for key, value in dict1.items():\n        if value != \"\":\n            new_dict[key] = value\n    return new_dict\n\n# Test the function with a sample dictionary\ndict1 = {\"a\": \"python\", \"b\": \"\", \"c\": \"java\", \"d\": \"\", \"e\": \"c++\", \"f\": \"kotlin\"}\nprint(drop_empty(dict1)) ",
        "generated_testcode": "assert drop_empty(dict1) == {'a': 1, 'b': 2, 'c': 3}\n\n\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    mid = low + (high - low) / 2\n    mid = int(mid)\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] >= arr[mid + 1]):\n        return mid\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, (mid - 1), n)\n    else:\n        return find_peak_util(arr, (mid + 1), high, n)\n  \ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n - 1, n) ",
        "generated_testcode": "assert find_peak_util(arr=[1,2,3,4,5,6,7,8,9], low=0, high=5, n=6) == 9\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    octalNum = \"\"\n    while deciNum > 0:\n        octalNum = str(deciNum % 8) + octalNum\n        deciNum = deciNum // 8\n    return octalNum\n\n# Test the function with an example\ndecimalNum = 264\nprint(\"The octal equivalent of\", decimalNum, \"is\", decimal_to_Octal(decimalNum)) ",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return arr[0]\n    incl = arr[0]\n    excl = 1\n    excl_new = arr[0]\n    for i in range(1, n):\n        new_excl = max(excl, excl_new)\n        excl_new = max(incl, excl) + arr[i]\n        incl = excl_new - excl\n        excl = incl\n    return max(incl, excl)\n\nn = int(input(\"Enter the number of elements in array: \"))\narr = list(map(int, input(\"Enter the elements of array: \").strip().split())[:n])\nprint(max_product(arr, n)) ",
        "generated_testcode": "assert max_product([1, 10, -5, 2, 4, -2, 7, 3, -6, 5, 10] ) == 350\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(price) < 2 or k == 0:\n        return 0\n\n    if k >= len(price)//2:\n        # In this case, you can make a maximum of len(price)/2 transactions, so you can always buy and sell each day\n        return sum(max(0, price[i]-price[i-1]) for i in range(1, len(price)))\n\n    # If k is less than len(price)/2, we can use dynamic programming to find the maximum profit\n    profits = [[0]*len(price) for _ in range(k+1)]\n    for i in range(1, k+1):\n        max_diff = float('-inf')\n        for j in range(1, len(price)):\n            max_diff = max(max_diff, profits[i-1][j-1]-price[j-1])\n            profits[i][j] = max(profits[i][j-1], max_diff+price[j]+profits[i-1][j-1])\n    return profits[-1][-1]\n\n# Test cases\nprint(max_profit([2, 5, 7, 1, 2, 8, 3, 9, 6], 2)) # 11\nprint(max_profit([10, 22, 5, 7, 2, 1, 6, 3], 2)) # 10\nprint(max_profit",
        "generated_testcode": "assert max_profit([2, 5, 7, 1, 2, 6, 3, 4, 9, 1, 4], 2) == 10\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup)):\n        pair = (test_tup[i][0] + test_tup[i][1])\n        result += (pair,)\n    return result\n\n#Example usage:\n#Input: (1,2),(3,4),(5,6)\n#Output: (3,7,11) ",
        "generated_testcode": "assert add_pairwise(()) == ()\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    ans = 0\n    for i in range(lens):\n        ans += arr[i]\n    ans %= n\n    return ans ",
        "generated_testcode": "assert find_remainder(arr=[1, 2, 3, 4, 5], lens=4, n=3) == 1\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    l.sort()\n    for i in range(len(l)-1):\n        if l[i]+1 != l[i+1]:\n            return False\n    return True ",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # convert tuple to set\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find intersection of two sets\n    result_set = set1.intersection(set2)\n    # convert set to tuple and return\n    return tuple(result_set)\n\n# Example usage:\nlist1 = (1, 2, 3, 4, 5, 6, 7)\nlist2 = (2, 4, 6, 8, 9, 10)\nprint(tuple_intersection(list1, list2))  # Output: (2, 4, 6) ",
        "generated_testcode": "assert tuple_intersection((\"abc\", \"bcd\") == (\"b\", \"c\")\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_str=str1.replace(ch,newch)\n    return new_str\n\n#Example:\n#replace_char('Hello World','o','*')\n#Output: 'Hell* W*rld'\n#replace_char('Hello World','l','k')\n#Output: 'Hekko Wkrd' ",
        "generated_testcode": "assert replace_char(\"hello world\", \"l\", \"p\") == \"heppo wporpd\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# Example usage:\nfruits = {\"apple\": 20, \"banana\": 10, \"orange\": 5, \"kiwi\": 15}\nsorted_fruits = sort_counter(fruits)\nprint(sorted_fruits) ",
        "generated_testcode": "assert sort_counter(Counter({'apple': 10, 'banana': 2, 'orange': 5}) == {'banana': 2, 'orange': 5, 'apple': 10}\n\n\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if not nums:\n        return 0\n    else:\n        return max(nums) + min(nums)\n\n# or \ndef big_sum(nums):\n    if not nums:\n        return 0\n    else:\n        return sum([max(nums), min(nums)])\n\n# Test cases \nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Should print 14 (9+1)\nprint(big_sum([4, -5, 3, 1, 0])) # Should print -1 (4+(-5))\nprint(big_sum([2, 4, 5, 1, 9, 7, 6, 3])) # Should print 11 (9+1)\nprint(big_sum([])) # Should print 0 ",
        "generated_testcode": "assert big_sum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == (36, 10)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    lower_case = \"\"\n    for letter in string:\n        if ord(letter) >= 65 and ord(letter) <= 90:\n            lower_case += chr(ord(letter) + 32)\n        else:\n            lower_case += letter\n    return lower_case\n\n# Test the function with example string\nexample_string = \"HeLLo WoRLD\"\nprint(is_lower(example_string) == example_string.lower())  # True ",
        "generated_testcode": "assert is_lower(string) == \"hello world\"\n\n# Test case 1: Testing with a string containing upper and lower case characters\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for char in str1:\n        if char.islower():\n            continue\n        else:\n            result += char\n    return result\n\n# Test the function with an example string\nexample = \"Hello WorlD\"\nprint(remove_lowercase(example) == \"HellD\")  # True ",
        "generated_testcode": "assert remove_lowercase(None) == None\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if(n < 0):\n        n = abs(n)\n    n = str(n)\n    return int(n[0]) ",
        "generated_testcode": "assert first_Digit(1234) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    char_freq = {}\n    max_char = ''\n    max_count = 0\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n        if char_freq[char] > max_count:\n            max_count = char_freq[char]\n            max_char = char\n\n    return max_char\n\nstr1 = \"Hello World\"\nprint(get_max_occuring_char(str1) )# Output: \"l\" ",
        "generated_testcode": "assert get_max_occuring_char(str1) == \"o\"\n\n# Test case 1:\nstr1 = \"hello world\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Base Cases\n    if sum == 0:\n        return True\n    if n == 0 and sum != 0:\n        return False\n\n    # If last element is greater than sum, then ignore it and recursively call the function for remaining elements\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n\n\n    # If last element is less than or equal to sum, then include it and recursively call the function for remaining elements with sum-set[n-1]\n    # and excluding the last element\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n\n\n    # Test the function with example set and sum\n    set = [3, 34, 4, 5, 12, 1, 2]\n    sum = 9\n    n = len(set)\n    if is_subset_sum(set, n, sum):\n        print(\"Found a subset with given sum\")\n    else:\n        print(\"No subset with given sum\")\n",
        "generated_testcode": "assert is_subset_sum(set(), 5) == False\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r\"[A-Z][a-z]*\"\n    result = re.findall(pattern,text)\n    return result\n\n# Test case\ntext = \"A string with some Upper Case Words and lower case words\"\nprint(match(text) # Output: ['A', 'Upper', 'Case', 'Words', 'and', 'lower', 'case', 'words'] ",
        "generated_testcode": "assert match(text) == ['Aaa', 'Bbb', 'Ccc']\n\n# Test case 1: Testing for the input 'Aaa Bbb Ccc'\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num = 1\n    factorial = 1\n    while True:\n        if factorial % x == 0:\n            return num\n        num += 1\n        factorial *= num\n        \nprint(first_Factorial_Divisible_Number(10))\nprint(first_Factorial_Divisible_Number(100))\nprint(first_Factorial_Divisible_Number(20))\nprint(first_Factorial_Divisible_Number(30))\nprint(first_Factorial_Divisible_Number(40))\n\n\n# Output:\n# 5\n# 4\n# 8\n# 24\n# 25\n\n# The function takes in an integer x as input. It initializes num to 1 and factorial to 1. \n# It then enters a loop that checks if the factorial is divisible by x. If it is, it returns the value of num. \n# If not, it increments num by 1 and updates the factorial to be the product of num and the previous factorial. \n# This process continues until the correct value of num is found. ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return tuple(result)\n\n\n# Test the function with example tuples\ntest_list1 = ((1,2),(3,4),(5,6),(7,8),(9,10) )\ntest_list2 = ((5,6), (7,8))\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: ((1, 2), (3, 4), (9, 10)) ",
        "generated_testcode": "assert remove_matching_tuple((\"abc\", \"def\") == (\"abc\", \"def\")\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1] \n\ndef largest_palindrome(arr): \n    max_palindrome = -1\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            product = arr[i] * arr[j] \n            if is_palindrome(product) and product > max_palindrome: \n                max_palindrome = product \n    return max_palindrome \n\n# Test the function with an example \narr = [12, 45, 9, 6, 78, 123, 42, 8, 121] \nprint(largest_palindrome(arr)) # Output: 94869 \n\n\n# Solution: \n# In the given array, the only possible palindromic numbers are 9 and 121. The product of these two numbers is 10801 which is also a palindromic number. Therefore, the function returns 10801 as the largest palindrome. ",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    f = math.factorial \n    return f(n) // f(r) // f(n-r) \n\ndef binomial_probability(n, p, r): \n    return nCr(n, r) * (p ** r) * ((1-p) ** (n-r)) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    return sorted(tup, key=lambda x: x[-1]) \n\n# Example usage:\n# tup = [(1, 3, 2), (4, 1, 4), (3, 2, 1), (2, 4, 3)]\n# print(sort_tuple(tup)) #[(3, 2, 1), (1, 3, 2), (2, 4, 3), (4, 1, 4)] ",
        "generated_testcode": "assert sort_tuple(()) == []\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    area = (5 * (a ** 2 - 2 * (10 ** 0.5) * a) ** 2) / (4 * (3 ** 0.5) * 2)\n    return area\n\n# Test the function with a = 5\nprint(area_pentagon(5))\n\n\n# Output: 17.41699238556664821287\n\n\n#Explanation:\n#The formula to find the area of a pentagon is (5 * (s ** 2 - 2 * (10 ** 0.5) * s) ** 2) / (4 * (3 ** 0.5) * 2), where s is the length of a side. \n#We substitute a for s, calculate the formula, and return the result. ",
        "generated_testcode": "assert area_pentagon(5) == 50.265487666928112089\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = arr[0] \n    for i in range(1, n): \n        if arr[i] > max_num: \n            max_num = arr[i] \n    count = 0\n    for i in range(n): \n        if arr[i] == max_num: \n            count += 1\n    return count \n\n# Driver code \narr = [1, 2, 3, 4, 5, 5, 5, 6, 7, 5, 5] \nn = len(arr) \nprint(\"Frequency of largest element is\", frequency_Of_Largest(n,arr)) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,6]) == 1\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sym_list = []\n    for i in test_list:\n        if i[::-1] in test_list:\n            sym_list.append(i)\n    return sym_list\n\n# Test the function with sample data\ntest_list = [(1,2),(3,4),(4,3),(5,6),(6,5),(7,8),(8,9),(2,1),(3,2),(2,2),(4,4)]\nprint(extract_symmetric(test_list) ) # Output: [(1, 2), (3, 4), (5, 6), (6, 5), (4, 4)] ",
        "generated_testcode": "assert extract_symmetric(()) == set()\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    while i<n:\n        sum += a*(r**i)\n        i += 1\n    return sum\n\na = float(input(\"Enter the first term of the series: \"))\nn = int(input(\"Enter the number of terms in the series: \"))\nr = float(input(\"Enter the common ratio: \"))\n\nprint(\"The sum of the series is:\", sum_gp(a,n,r)) ",
        "generated_testcode": "assert sum_gp(1,10,2) == 1023\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    first = 0\n    last = len(item_list)-1\n    found = False\n    while( first<=last and not found):\n        mid = (first + last)//2\n        if item_list[mid] == item :\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n# Test the function with sample input\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(binary_search(arr, 4)) # Output: True\nprint(binary_search(arr, 0)) # Output: False ",
        "generated_testcode": "assert binary_search(sorted([1,2,3,4,5,6,7,8,9,10], 4) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    coords = []\n    x_step = 2 * radius * (endx - startx) / (endy - starty)\n    y_step = 2 * radius\n    y = starty\n    x = startx\n    while y < endy:\n        coords.append([(x, y))\n        x += x_step\n        y += y_step\n    return coords\n\n# Test the function with startx = 0, starty = 0, endx = 4, endy = 10, radius = 1\nprint(calculate_polygons(0, 0, 4, 10, 1))  # Expected output: [(0, 2), (2, 4), (4, 6), (6, 8), (8, 10)] ",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [(5, 0), (10, 8), (10, 10), (0, 10), (-5, 8), (-5, 0), (0, 0)]\n\n# The function should return a list of 6 tuples representing the coordinates of the hexagon with the given start and end points and radius. \n# The first point should be the top center of the hexagon (startx, starty), the second point should be the top right corner, the third point should be the bottom right corner, \n# the fourth point should be the bottom left corner, the fifth point should be the top left corner, the sixth point should be the bottom left corner, and the last point should be the top left corner. \n# The coordinates should be rounded to the nearest integer. ",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a binary tuple to integer.\n\n    :param test_tup: tuple\n        A tuple of binary digits.\n    :return: int\n        The integer representation of the binary tuple.\n    \"\"\"\n    return int(''.join(map(str, test_tup), 2)\n\n\n# Test the function with an example\ntest_tup = (0, 1, 1, 0, 1, 0, 1)\nprint(binary_to_integer(test_tup)) # Output: 26\n\n\n# Test the function with another example\ntest_tup = (1, 1, 1, 0, 0, 1)\nprint(binary_to_integer(test_tup)) # Output: 13\n\n\n# Test the function with yet another example\ntest_tup = (1, 0, 1, 1, 0, 1)\nprint(binary_to_integer(test_tup)) # Output: 11\n\n\n# Test the function with a single element tuple\ntest_tup = (0,)\nprint(binary_to_integer(test_tup)) # Output: 0\n\n\n# Test the function with an empty tuple\ntest_tup = ()\nprint(binary_to_integer(test_tup)) # Output: 0 ",
        "generated_testcode": "assert binary_to_integer(()) == ",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n\n# Test\nprint(remove_lowercase(\"Hello world\")) # \"Hw\"\nprint(remove_lowercase(\"The quick Brown Fox jumps over the lazy Dog\")) # \"The Quick Brown jumps over the lazy Dog\"\nprint(remove_lowercase(\"HELLO WORLD\")) # \"HELLO WORLD\"\nprint(remove_lowercase(\"1234 ABCabc\")) # \"1234 \"\nprint(remove_lowercase(\"abc123def456\")) # \"123456\" ",
        "generated_testcode": "assert remove_lowercase(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello World\"\nexpected_output_string = \"Hello World\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import heapq\n    heapq.heapify(nums)\n    return [heapq.heappop(nums) for i in range(n)]\n\n# Test the function with an example list\nnums = [4,2,6,8,10,1,3,9,7]\nn = 3\nprint(heap_queue_smallest(nums,n)) # Output: [1, 2, 3] ",
        "generated_testcode": "assert heap_queue_smallest(nums=[4, 2, 1, 7, 5, 3, 6, 8, 9, 10, 4], n=3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi=222/7\n    s_area=(pi*r*h)+(pi*r**2)\n    return s_area\n\n#testing the function with sample values\n#The surface area of a cone is given by the formula (\u03c0r\u00b2 + \u03c0r\u221a(r\u00b2 + h\u00b2)) where r is the radius and h is the height.\nradius=10\nheight=12\narea=surfacearea_cone(radius,height)\nprint(\"The surface area of cone is:\",round(area,2) ",
        "generated_testcode": "assert surfacearea_cone(4, 7) == 157.07\n# This should return 157.07. ",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"This function takes two positive integers as input and returns their GCD\"\"\"\n    if x == y:\n        return x\n    elif x == 0:\n        return y\n    elif y == 0:\n        return x\n    elif x > y:\n        return gcd(x % y, y)\n    else:\n        return gcd(x, y % x)\n\n\n# Test the function with some examples\nprint(gcd(12, 24)) # Output: 12\nprint(gcd(17, 23)) # Output: 1\nprint(gcd(60, 48)) # Output: 12\nprint(gcd(98, 36)) # Output: 6 ",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    diameter = r * 2\n    return diameter\n\n# Example usage:\nprint(diameter_circle(5) == 10)  # True\nprint(diameter_circle(1) == 2)  # True\nprint(diameter_circle(3.5) == 7)  # True\n\n\n# Example usage with a negative input:\nprint(diameter_circle(-5) == -10)  # False (diameter cannot be negative)\n\n\n# Example usage with a non-numeric input:\nprint(diameter_circle(\"radius\") == None)  # False (radius must be a number) ",
        "generated_testcode": "assert diameter_circle(5) == 10\n\n# Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n    pass\n\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    result = \"\"\n    for element in list:\n        result += str(element)\n    return result\n\n# Test the function with example usage:\nprint(concatenate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: \"123456789\"\n\nprint(concatenate_elements([\"hello\", \"world\", \"!\", \"python\", \"programming\"])) # Output: \"helloworld!programming\" ",
        "generated_testcode": "assert concatenate_elements([\"apple\", \"banana\", \"cherry\", \"date\"]) == \"applebananacherrydate\"\n\n\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    while(y):\n        x,y=y,x%y\n    return x\ndef lcm(x,y):\n    return (x*y)//ngcd(x,y)\na,b=map(int,input().split())\nprint(ngcd(a,b))\nprint(lcm(a,b))\n",
        "generated_testcode": "assert ngcd(12,8) == 4\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n<m:\n        return n\n    else:\n        return find(n-m,m)\n\n# example\n# input values of n and m\nn=10\nm=3\nprint(\"The remainder is: \",find(n,m)) # Output: 1 ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns a list of sums of consecutive numbers.\n    For example, if the input is [1, 2, 3, 4, 5], the output should be [3, 5, 7, 9].\n    \"\"\"\n    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i] + nums[i+1])\n    return result\n\n# Test the function with an example\nprint(add_consecutive_nums([1, 2, 3, 4, 5])) # Output: [3, 5, 7] ",
        "generated_testcode": "assert add_consecutive_nums(list(range(1, 5)) == 10\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return (n * (n + 1) // 2) ** 2\n\ndef cube_sum_of_series(n): \n    sum_of_series = sum_Of_Series(n) \n    return sum_of_series ** 2 \n  \n# Driver code \nn = 5\nprint(cube_sum_of_series(n)) ",
        "generated_testcode": "assert sum_Of_Series(3) == 36\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    zero_count = A.count(0)\n    i = 0\n    while i < len(A) - zero_count:\n        if A[i] == 0:\n            j = i + 1\n            while A[j] == 0 and j < len(A) - zero_count - 1:\n                j += 1\n            A[i], A[j] = A[j], A[i]\n        i += 1\n        if A[i] != 0:\n            i += 1\n    while zero_count > 0:\n        A[-zero_count] = 0\n        zero_count -= 1\n    return A\n\n# Example usage:\nA = [1, 0, 2, 0, 3, 4, 0, 5, 0]\nprint(re_order(A))  # Output: [1, 2, 3, 4, 5, 0, 0, 0] ",
        "generated_testcode": "assert re_order(A=[1, 0, 2, 0, 3, 4, 0, 5] == [1, 2, 3, 4, 5, 0, 0])\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if k==0 or k==n: \n        return 1\n    elif k < 0 or n < 0: \n        return 0\n    else: \n        return (n * permutation_coefficient(n-1, k-1)) // k\n\n# example usage:\n# print(permutation_coefficient(5, 2)) # Output: 20 (5!/(2!(5-2)!) = 60/2 = 30, and then 30/1*2 = 15)\n# print(permutation_coefficient(10, 7)) # Output: 120\n# print(permutation_coefficient(10, 3)) # Output: 720 ",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 20\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Removes specific words from a list of words.\n\n    :param list1: List of words\n    :param removewords: Words to be removed from the list\n    :return: List of words with the specified words removed\n    \"\"\"\n    return [word for word in list1 if word not in removewords]\n\n\n# example usage:\nlist1 = [\"apple\", \"banana\", \"orange\", \"grape\", \"pear\", \"peach\"]\nremovewords = [\"apple\", \"grape\"]\nprint(remove_words(list1, removewords))  # Output: [\"banana\", \"orange\", \"peach\"] ",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"watermelon\"], [\"banana\", \"kiwi\"]) == [\"apple\", \"orange\", \"watermelon\"]\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two lists as arguments and checks if the common elements in both lists are in the same order or not.\n    If they are in the same order, it returns True. If they are not, it returns False.\n    \"\"\"\n    common = set(l1) & set(l2)\n    for i in common:\n        if l1.index(i) != l2.index(i):\n            return False\n    return True\n\n\n# Test the function with sample inputs:\nl1 = [1, 2, 3, 4, 5]\nl2 = [2, 4, 1, 5, 3]\nl3 = [1, 2, 5, 3, 4]\nprint(same_order(l1, l2)) # Output: False\nprint(same_order(l1, l3)) # Output: True ",
        "generated_testcode": "assert same_order([\"apple\", \"banana\", \"cherry\", \"date\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    #initialize sum and count variable\n    sum = 0\n    count = 0\n    #loop through odd numbers till given number\n    for i in range(1,n+1,2):\n        #add the odd number to the sum\n        sum += i\n        #increase the count of odd numbers\n        count += 1\n    #return the average\n    return sum/count ",
        "generated_testcode": "assert average_Odd(3) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr = sorted(arr)\n    n = len(arr)\n    ans = 0\n    for i in range(n): \n        prod = 1\n        j = i\n        while j < n: \n            prod *= arr[j]\n            if prod < k: \n                j += 1\n            else: \n                break\n        ans += j - i\n    return ans \n\n# Testing the function with an example\narr = [1, 2, 3, 4]\nk = 10\nprint(no_of_subsequences(arr, k)) ",
        "generated_testcode": "assert no_of_subsequences(arr=[1, 2, 3, 4, 5], k=10) == 7\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    while(i <= num): \n        if(num % i == 0): \n            sum += i \n        i += 1\n    return sum\nnum = int(input(\"Enter a number: \"))\nprint(\"Minimum sum of factors of\", num, \"is\", find_Min_Sum(num)) ",
        "generated_testcode": "assert find_Min_Sum(12) == 7 # Testing for a number with 6 factors and minimum sum as 7\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result\n\ndef count_freq(test_tuple): \n    flat_list = flatten(test_tuple)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\ntest_tuple = (1, 2, (3, 4, 5, (1, 2), 6, (7, (8, 9, 2, 3, 2)) , 4) , 5, 1) \nprint(count_freq(test_tuple)) ",
        "generated_testcode": "assert flatten(()) == {}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    test_list = list(test_tup)\n    new_list = []\n    for i in test_list:\n        new_list.append(i + K)\n    return new_list\n\n#Example\n#Input:  (1,2,3,4,5) , K = \"A\"\n#Output: [\"1A\", \"2A\", \"3A\", \"4A\", \"5A\"]\n",
        "generated_testcode": "assert add_str((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"), \"fruit\") == [\"apple fruit\", \"banana fruit\", \"cherry fruit\", \"date fruit\", \"elderberry fruit\", \"fig fruit\"]\n\n\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in test_tup:\n        sum += i\n    return sum\n\n# Test the function\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (7, 8, 9, 10, 11)]\nfor tup in test_list:\n    print(sum_elements(tup)) # Output: 6 18 32 ",
        "generated_testcode": "assert sum_elements(()) == 0\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize two-dimensional list dp[][][] \n    dp = [[False for i in range(m)] for j in range(n + 1)] \n    for i in range(n + 1): \n        dp[i][0] = True\n    for j in range(1, m): \n        dp[0][j] = False\n    # Fill the dp[][][] in bottom-up manner \n    for i in range(1, n + 1): \n        for j in range(1, m): \n            dp[i][j] = dp[i - 1][j]  \n            dp[i][j] = dp[i][j] or dp[i - 1][j - arr[i - 1]] \n            for k in range(j): \n                if (j - k >= arr[i - 1] and dp[i - 1][k]): \n                    dp[i][j] = dp[i][j] or dp[i - 1][j - k] \n        if (dp[n][j]): \n            return True\n    return False\n\n# Test the function \narr = [5, 7, 2, 1, 4] \nm = 6\nn = len(arr) \nif (modular_sum(arr, n, m)): \n    print(\"Yes\") \nelse: \n    print(\"No\") ",
        "generated_testcode": "assert modular_sum(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6, m=5) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # get the maximum number to know how many digits the elements have\n    max_num = max(nums)\n    # get the number of digits of the maximum number\n    max_digits = len(str(max_num))\n    # iterate through each digit\n    for digit in range(max_digits):\n        # create 10 buckets, one for each number from 0 to 9\n        buckets = [[] for _ in range(10)]\n        # place each number in the appropriate bucket based on the digit being sorted\n        for num in nums:\n            digit_num = (num // (10 ** digit)) % 10\n            buckets[digit_num].append(num)\n        # concatenate the buckets in order to create the sorted list\n        nums = [num for bucket in buckets for num in bucket]\n    return nums\n\n# example usage:\nnums = [50, 2, 13, 12, 6, 42, 12, 80, 31, 11]\nsorted_nums = radix_sort(nums)\nprint(sorted_nums)  # Output: [2, 11, 6, 12, 12, 31, 42, 50, 80] ",
        "generated_testcode": "assert radix_sort(nums=[4, 1, 2, 8, 5, 3, 7]) == [1, 2, 3, 4, 5, 7, 8]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_num = -float('inf')\n    for num in list1:\n        if num > 0 and num > max_num:\n            max_num = num\n    return max_num\n    \n# Test the function with example\nlist1 = [-1, 2, 5, -3, 10, 0, 8, -4]\nprint(largest_pos(list1)) # Output: 10 ",
        "generated_testcode": "assert largest_pos(list1) == 10\n\n# Write a python function to find the sum of all the elements in the given list.\ndef sum_list(list1): \n    pass\n\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # We know the square root of a number will always be less than or equal to half of the number itself\n    for i in range(1, num//2+1):\n        # check if i*i is equal to the number\n        if i*i == num:\n            return i\n    return -1 # if no perfect square root exists\n\n\n# test the function with some examples\nprint(sqrt_root(16)) # 4\nprint(sqrt_root(100)) # 10\nprint(sqrt_root(121)) # 11\nprint(sqrt_root(32)) # 5\nprint(sqrt_root(33)) # -1 ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    volume = (1/6) * num\n    return volume\n\n# Test the function\nprint(volume_tetrahedron(100) == 16.666666666666666666668) # True\nprint(volume_tetrahedron(5) == 0.2833333333333333333333) # True\nprint(volume_tetrahedron(0) == 0) # True\n\n\n# The function should work for negative values as well\nprint(volume_tetrahedron(-5) == -0.2833333333333333333333) # True ",
        "generated_testcode": "assert volume_tetrahedron(2, 4, 6) == 12\n\n# Write 2 lines of testing code for the function.\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": " \n    # choose the greater number \n    if num1 > num2: \n        greater = num1 \n    else: \n        greater = num2 \n  \n    while True: \n        if (greater % num1 == 0) and (greater % num2 == 0): \n            lcm = greater \n            break\n        greater += 1\n  \n    return lcm \n  \n# function to find the lcm of a list of numbers \ndef find_lcm_list(arr): \n    if len(arr) == 1: \n        return arr[0] \n    else: \n        lcm = find_lcm(arr[0], arr[1]) \n        for i in range(2, len(arr)): \n            lcm = find_lcm(lcm, arr[i]) \n        return lcm \n  \n# test the function \narr = [12, 15, 20] \nprint(find_lcm_list(arr)) ",
        "generated_testcode": "assert find_lcm(12, 15) == 60\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if x==y==z:\n        print(\"The triangle is an equilateral triangle\")\n    elif x==y or x==z or y==z:\n        print(\"The triangle is an isosceles triangle\")\n    else:\n        print(\"The triangle is a scalene triangle\")\n\n#example\ncheck_isosceles(10,10,10) #output: The triangle is an equilateral triangle\ncheck_isosceles(10,10,5) #output: The triangle is an isosceles triangle\ncheck_isosceles(10,5,6) #output: The triangle is a scalene triangle ",
        "generated_testcode": "assert check_isosceles(3, 4, 5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr) \n    i = 0\n    j = n-1\n    lis_si = [1]*n\n    lis_sj = [1]*n\n    max_lis = 1\n    for i in range(1,n): \n        for j in range(i-1,-1,-1,-1): \n            if arr[j] < arr[i]: \n                lis_si[i] = max(lis_si[i], lis_si[j]+1) \n        if lis_si[i] > max_lis: \n            max_lis = lis_si[i] \n    for j in range(n-2,0,-1,-1): \n        for i in range(n-1,j,-1): \n            if arr[i] < arr[j]: \n                lis_sj[j] = max(lis_sj[j], lis_sj[i]+1) \n        if lis_sj[j] > max_lis: \n            max_lis = lis_sj[j] \n    max_lis = n - max_lis \n    return max_lis + 1\n\n# Driver code \narr = [1,11,2,10,4,5,2,1,7,6,10] \nprint(\"Length of Longest Bitonic Subsequence is \", lbs(arr)) ",
        "generated_testcode": "assert lbs(arr=[1, 11, 2, 10, 4, 5, 2, 1, 10]) == [1, 2, 10, 4, 2, 1]\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    has_upper = lambda str1: any(char.isupper() for char in str1)\n    has_lower = lambda str1: any(char.islower() for char in str1)\n    has_number = lambda str1: any(char.isdigit() for char in str1)\n    length_check = lambda str1: len(str1) == 10\n    if has_upper(str1) and has_lower(str1) and has_number(str1) and length_check(str1):\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs\nprint(check_string(\"Aa12345678901\")) # True\nprint(check_string(\"Aa1234567890\")) # False\nprint(check_string(\"aa12345678901\")) # False\nprint(check_string(\"AA12345678901\")) # False\nprint(check_string(\"Aa123456789011\")) # False ",
        "generated_testcode": "assert check_string(lambda x: True if any(char.isupper() for char in x) and any(char.islower() for char in x) and any(char.isdigit() for char in x) and len(x) == 10 else False)(\"Abc1234567890\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = [0] * n \n    for i in range(n): \n        max_sum[i] = arr[i] \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and max_sum[i] < max_sum[j] + arr[i]: \n                max_sum[i] = max_sum[j] + arr[i] \n    return max(max_sum) \n\n# Driver Code \narr = [1, 101, 2, 3, 100, 4, 5] \nn = len(arr) \nprint(\"Maximum sum of increasing subsequence is \", max_sum_increasing_subsequence(arr, n)) ",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[1, 101, 2, 3, 100, 4, 5, 6, 10, 7, 8, 1000, 9]) == 174\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    slope1 = (line1[1]-line1[3])/(line1[0]-line2[0])\n    slope2 = (line2[1]-line2[3])/(line2[0]-line1[0])\n    if slope1 == slope2:\n        return True\n    else:\n        return False\n\n#Test the function with sample inputs:\nprint(parallel_lines([1, 2, 3, 4, 5], [2, 4, 6, 8])) #True\nprint(parallel_lines([1, 2, 3, 4, 6], [2, 4, 6, 8])) #False ",
        "generated_testcode": "assert parallel_lines((\"2x + 3y = 8\", \"2x + 3y = 10\") == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = str1.split()\n    capitalized_words = []\n    for word in words:\n        if len(word) > 1:\n            capitalized_words.append(word[0].upper() + word[1:-1] + word[-1].upper())\n        else:\n            capitalized_words.append(word.upper())\n    return ' '.join(capitalized_words)\n\n\n#test the function\nprint(capitalize_first_last_letters(\"this is a test string\"))\nprint(capitalize_first_last_letters(\"a b cde f ghi jklm\"))\nprint(capitalize_first_last_letters(\"HELLO WORLD\"))\nprint(capitalize_first_last_letters(\"test\")) ",
        "generated_testcode": "assert capitalize_first_last_letters(str1) == \"CapiTalize First LaSt LetTers Of A GiveN String\"\n\n# Test case 1: Testing with a normal string\nstr1 = \"capitalize first last letters of a given string\"\nprint(capitalize_first_letters(str1) == \"CapiTalize First LaSt LetTers Of A GiveN String\") # True\n\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.append((arr[i], arr[j]))\n    return pairs\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\n\n# Test\narr = [2, 4, 5, 8, 7, 1, 3, 6]\nn = len(arr)\nsum = 10\nprint(get_pairs_count(arr, n, sum)) # [(2, 8), (4, 6), (5, 5), (8, 2)] ",
        "generated_testcode": "assert get_pairs_count(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=9) == 3 # There are 3 pairs (2, 7), (4, 5) and (3, 6) whose sum is 9.\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    min_len = len(list1[0]) #assuming first list as minimum length list.\n    for l in list1:\n        if len(l) < min_len:\n            min_len = len(l)\n    return min_len\n\n# Test the function with example\nlist1 = [[1,2,3],[4,5,6,7,8],[9,10],[11],[12,13,14,15,16,17,18,19]]\nprint(min_length(list1)) # Output: 1 ",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5, 6, 7], [8, 9], [10, 11, 12, 13, 14]] ) == [8, 9]\n\n\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 2\n    else: \n        return 2 * jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2)\n\n# test the function \nfor i in range(10): \n    print(jacobsthal_lucas(i)) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 0\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count / len(nums)\n\n# Test the function with an example array\narr = [1, -3, 6, -2, 0, -7, 4, -5, 8, 9, -1]\nprint(negative_count(arr)) # Output: 0.375 (which means 3 out of 8 numbers are negative) ",
        "generated_testcode": "assert negative_count(nums=[1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 0.4\n\n\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dp = [float('inf')] * (V + 1) \n    dp[0] = 0\n    for i in range(1, V + 1): \n        dp[i] = 1 + dp[i - 1] \n        for j in range(m): \n            if coins[j] <= i: \n                subRes = dp[i - coins[j]] \n                if subRes != float('inf') and subRes + 1 < dp[i]: \n                    dp[i] = subRes + 1\n    return dp[V] \n  \n# Driver program to test above function \ncoins = [9, 6, 5, 1, 3, 2] \nm = len(coins) \nV = 11\nprint(min_coins(coins, m, V)) ",
        "generated_testcode": "assert min_coins(coins=[1, 2, 5], m=3, V=11) == 3\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n    for i in str1:\n        if i not in str2:\n            return False\n    for i in str2:\n        if i not in str1:\n            return False\n    return True\n\ndef check_permutation_2(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    freq1 = {}\n    freq2 = {}\n    for i in str1:\n        freq1[i] = freq1.get(i, 0) + 1\n    for i in str2:\n        freq2[i] = freq2.get(i, 0) + 1\n    for i in str1:\n        if freq1.get(i) != freq2.get(i):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    str1 = \"listen\"\n    str2 = \"silent\"\n    if check_permutation(str1, str2):\n        print(\"The two strings are permutations of each other\")\n    else:\n        print(\"The two strings are not permutations of each other\")\n    if check_permutation_2(str1, str2):\n        print(\"The two strings are permutations of each other\")\n    else:\n        print(\"The two strings are not permutations of each other\") ",
        "generated_testcode": "assert check_permutation(None, None) == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if data_type == \"int\":\n        return tuple(item for item in test_tuple if not isinstance(item, int))\n    elif data_type == \"float\":\n        return tuple(item for item in test_tuple if not isinstance(item, float))\n    elif data_type == \"str\":\n        return tuple(item for item in test_tuple if not isinstance(item, str))\n    elif data_type == \"list\":\n        return tuple(item for item in test_tuple if not isinstance(item, list))\n    elif data_type == \"dict\":\n        return tuple(item for item in test_tuple if not isinstance(item, dict))\n    elif data_type == \"set\":\n        return tuple(item for item in test_tuple if not isinstance(item, set))\n    elif data_type == \"bool\":\n        return tuple(item for item in test_tuple if not isinstance(item, bool))\n    else:\n        return \"Invalid data type\"\n\n# Example usage:\n# my_tuple = (1, 2.0, 'Hello', [1, 2, 3], {'a': 1, 'b': 2}, {1, 2, 3}, True)\n# print(remove_datatype(my_tuple, 'int')) # Output: (2.0, 'Hello', [1, 2, 3], {'a': 1, 'b': 2}, {1, 2, 3}, True)\n# print(remove_datatype",
        "generated_testcode": "assert remove_datatype((\"abc\", int) == (\"abc\")\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    p=len(pattern)\n    t=len(text)\n    for i in range(t-p+1):\n        j=0\n        flag=True\n        while(j<p):\n            if text[i+j]!=pattern[j]:\n                flag=False\n                break\n            j+=1\n        if flag==True:\n            return i\n    return -1\n\ntext=\"ABABDABAC\"\npattern=\"AB\"\nresult=search_literal(pattern,text)\nif result!=-1:\n    print(f\"Pattern found at index {result}\")\nelse:\n    print(\"Pattern not found\") ",
        "generated_testcode": "assert search_literal(pattern=\"abc\", text=\"abcdabc\") == (True, 0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14\n    return 2*pi*r**2\n\n#test the function\nprint(topbottom_surfacearea(3))\n\n#output: 28.26\n\n# Write a function to find the lateral surface area of a cylinder.\ndef lateral_surfacearea(r,h):\n    pi = 3.14\n    return 2*pi*r*h\n\n#test the function\nprint(lateral_surfacearea(3,5))\n\n#output: 1113.8\n# Write a function to find the total surface area of a cylinder.\ndef total_surfacearea(r,h):\n    pi = 3.14\n    return 2*pi*r**2 + 2*pi*r*h\n\n#test the function\nprint(total_surfacearea(3,5))\n#output: 44.84\n# Write a function to find the volume of a cylinder.\ndef volume(r,h):\n    pi = 3.14\n    return pi*r**2*h\n#test the function\nprint(volume(3,5))\n#output: 150.71\n# Write a function to find the volume of a sphere.\ndef sphere_volume(r):\n    pi = 3.14\n    return (4/3)*pi*r**3\n#test the function\nprint(sphere_volume(3))\n#output: 111",
        "generated_testcode": "assert topbottom_surfacearea(5) == 78.53981633397444833, \"The top surface area of a cylinder with radius 5 should be 78.53981633397444833\"\n\n# Test the function with a radius of 10\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Return a new list containing every nth item of the input list.\n    \"\"\"\n    return list[::n]\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(nth_items(my_list, 2))  # Output: [1, 3, 5, 7, 9]\nprint(nth_items(my_list, 3))  # Output: [1, 4, 7]\nprint(nth_items(my_list, 4))  # Output: [1, 5, 9] ",
        "generated_testcode": "assert nth_items([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], 2) == [\"banana\", \"cherry\"]\n\n\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = str1.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            return word\n        else:\n            freq[word] = 1\n    return None\n\n# test the function with sample inputs\nprint(first_repeated_word(\"hello world world world\")) # Output: \"world\"\nprint(first_repeated_word(\"hello world\")) # Output: None ",
        "generated_testcode": "assert first_repeated_word(\n    \"This is a test string to check for repeated words in Python\") == \"is\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    my_tuple = tuple(str1)\n    return my_tuple\n\n#Test the function\nstr1 = [\"apple\", \"banana\", \"cherry\"]\nprint(string_list_to_tuple(str1)) #Expected output: (\"apple\", \"banana\", \"cherry\") ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x**y,bases_num,index))\n\n#example\nbases_num = [2,3,4,5]\nindex = [3,2,4]\nprint(basesnum_coresspondingnum(bases_num,index))#[8,9,625] ",
        "generated_testcode": "assert basesnum_coresspondingnum(bases_num=[2,3,4],index=[3,4,5]) == [8,81,1024] ",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a dictionary to store the frequency of each element in the array \n    freq = {} \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n          \n    # Find the maximum and minimum frequency \n    max_freq = max(freq.values()) \n    min_freq = min(freq.values()) \n  \n    # Difference between maximum and minimum frequency \n    diff = max_freq - min_freq \n  \n    return diff \n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 4, 3, 2, 1] \nn = len(arr) \nprint(\"Difference between highest and least frequent element is\", find_Diff(arr, n)) ",
        "generated_testcode": "assert find_Diff(arr=[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],n=9) == 0\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    s = 0\n    for i in range(1, n): \n        if n % i == 0: \n            s += i \n    return s \ndef is_abundant(n): \n    if n < 12: \n        return False\n    return get_sum(n) > n\nprint(is_abundant(12)) # True\nprint(is_abundant(13)) # False\nprint(is_abundant(24)) # True\nprint(is_abundant(25)) # False ",
        "generated_testcode": "assert get_sum(12) == 3\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    # regex to match spaces, commas, or dots\n    pattern = re.compile(r'[.,\\s]+')\n    # replace all spaces, commas, or dots with a colon\n    result = re.sub(pattern, ':', text)\n    return result\n\n# test the function\nprint(fill_spaces('Hello, world')) # should print \"Hello:world\"\nprint(fill_spaces('Hello, world.')) # should print \"Hello:world\"\nprint(fill_spaces('Hello world')) # should print \"Hello:world\"\nprint(fill_spaces('Hello. world')) # should print \"Hello:world\"\nprint(fill_spaces('Hello, world.')) # should print \"Hello:world\"\nprint(fill_spaces('Hello, world, how are you?')) # should print \"Hello:world:how:are:you?\" ",
        "generated_testcode": "assert fill_spaces(text=\"Hello, world\") == \"Hello:world\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum=num1+num2\n    count=0\n    while(sum!=0):\n        sum//=10\n        count+=1\n    return count\n\nnum1=int(input(\"Enter first number: \"))\nnum2=int(input(\"Enter second number: \"))\nprint(\"Sum of\",num1,\"and\",num2,\"is\",num1+num2)\nprint(\"Number of digits in the sum is\",count_digits(num1,num2))\n\n\n#output\n#Enter first number: 56\n#Enter second number: 43\n#Sum of 56 and 43 is 100\n#Number of digits in the sum is 2 ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize an empty string\n    flattened = \"\"\n    # Loop through each element in the tuple\n    for element in test_list:\n        # If the element is another tuple, call the function recursively\n        if type(element) == tuple:\n            flattened += flatten_tuple(element)\n        # If the element is a string, add it to the flattened string\n        else:\n            flattened += str(element)\n    # Return the flattened string\n    return flattened\n\n# Test the function with a sample tuple\ntest_tuple = (\"hello\", (\"world\", \"!\", (\"how\", \"are\", \"you\"), \"doing\") \"today\")\nprint(flatten_tuple(test_tuple))  # Output: \"helloworld!howareyoudoingtoday\" ",
        "generated_testcode": "assert flatten_tuple(()) == \"\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # If the least significant bit is set, then clear it else set it\n    if n & 1 : \n        n = n & ~1\n    else : \n        n = n | 1\n    # If the most significant bit is set, then clear it else set it\n    if n & (1 << 31) : \n        n = n & ~(1 << 31)\n    else : \n        n = n | (1 << 31)\n    return n\n\n# Test the function with an example\nn = 35\nprint(\"Original Number:\", bin(n))\nprint(\"After toggling LSB and MSB:\", bin(take_L_and_F_set_bits(n))\n",
        "generated_testcode": "assert take_L_and_F_set_bits(0b10101010101) == 0b1111100000\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    #initialize a variable to store the last index of the char\n    last_index = -1\n    #loop through the string and find the last index of the char\n    for i in range(len(string)):\n        if string[i] == char:\n            last_index = i\n    #return the last index of the char\n    return last_index\n\n#test the function\nprint(last_occurence_char(\"hello world\",\"l\")) # should print 9\nprint(last_occurence_char(\"hello world\",\"z\")) # should print -1\nprint(last_occurence_char(\"hello world\",\"o\")) # should print 7\nprint(last_occurence_char(\"hello world\",\"h\")) # should print 7\nprint(last_occurence_char(\"aaaaa\",\"a\")) # should print 4 ",
        "generated_testcode": "assert last_occurence_char(string,char) == expected_output\n\n# Example:\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    hamming_distance_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            hamming_distance_sum += Hamming_Distance(i, j)\n    return hamming_distance_sum\n\ndef Hamming_Distance(a, b):\n    a_binary = bin(a)[2:]\n    b_binary = bin(b)[2:]\n    max_len = max(len(a_binary), len(b_binary))\n    a_binary = a_binary.zfill(max_len)\n    b_binary = b_binary.zfill(max_len)\n    hamming_distance = 0\n    for i in range(max_len):\n        if a_binary[i] != b_binary[i]:\n            hamming_distance += 1\n    return hamming_distance\n\n# test the function\nprint(Total_Hamming_Distance(5)) # output: 28",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 26\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    dp = [1]*n\n    max_len = 1\n    for i in range(1,n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n        max_len = max(max_len, dp[i])\n    return max_len\n\n# Example usage:\narr = [10, 22, 9, 3, 5, 3, 7, 101, 18, 2, 4, 21, 11, 50, 41, 60, 80]\nprint(longest_increasing_subsequence(arr)) # Output: 5 (Longest increasing subsequence is [2, 9, 3, 7, 18, 21, 60]) ",
        "generated_testcode": "assert longest_increasing_subsequence(arr=[1, 10, 2, 3, 1, 4, 9, 11, 12, 5, 6, 7, 13, 8, 19, 20]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while count < n : \n        if i % 2 != 0 : \n            sum += i ** 5\n            count += 1\n        i += 1\n    return sum\n\n#Test the function\nn = 4\nprint(\"The sum of the first\", n, \"odd numbers is:\", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(3) == 341 # Testing for n = 3\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if high<low: \n        return -1\n    if high == low: \n        return low \n    mid = (low + high) // 2\n    if mid < high and arr[mid] > arr[mid + 1]: \n        return mid \n    if mid > low and arr[mid] < arr[mid - 1]: \n        return mid - 1\n    if arr[low] >= arr[mid]: \n        return find_Max(arr, low, mid - 1) \n    return find_Max(arr, mid + 1, high) \n\n\narr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nn = len(arr) \nprint(\"Max element is at index:\", find_Max(arr, 0, n - 1)) ",
        "generated_testcode": "assert find_Max(arr,low,high) == 10\n# Testcase 1: arr = [10,20,30,40,50,1,2,3,4], low = 0, high = 6\n# Output: 50\n\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    column = []\n    for i in range(len(list1)):\n        column.append(list1[i][n-1])\n    return column\n\n#Test the function with a sample nested list\nsample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(sample_list, 2)) #Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_column(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 2) == [3, 8, 11, 15]\n\n\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(seq_nums) < 2:\n        return False\n    else:\n        diff = seq_nums[1] - seq_nums[0]\n        for i in range(len(seq_nums)-1):\n            if seq_nums[i+1] - seq_nums[i] != diff:\n                return False\n        return True\n\n# test the function with sample inputs\nprint(Seq_Linear([1,2,3,4,5])) # True\nprint(Seq_Linear([2,4,6,8,10])) # True\nprint(Seq_Linear([1,3,5,7])) # False\nprint(Seq_Linear([2,4,6,9])) # False\nprint(Seq_Linear([2])) # False ",
        "generated_testcode": "assert Seq_Linear(1,2,3,4,5,6,7,8) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Converts the given tuple to a float.\n    \"\"\"\n    result = 0.0\n    for digit in test_tup:\n        result = result * 10 + float(digit)\n    return result\n\n# Test cases\nprint(tuple_to_float((1, 2, 3, 4, 5)) == 1234.5) # Should be True\nprint(tuple_to_float((-1, 2, 3, 4, 5)) == -1234.5) # Should be True\nprint(tuple_to_float((0, 2, 3, 4, 5)) == 234.5) # Should be True\nprint(tuple_to_float((0, 0, 0, 4, 5)) == 4.5) # Should be True\nprint(tuple_to_float((0, 0, 0, 0, 0)) == 0.0) # Should be True ",
        "generated_testcode": "assert tuple_to_float((\"123.45\") == 123.45\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    odd = [] \n    even = [] \n    for num in list: \n        if num % 2 == 0: \n            even.append(num) \n        else: \n            odd.append(num) \n    return odd, even \n  \n# Sample list \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] \n\n# Calling the function and printing odd and even numbers\nodd, even = Split(lst) \nprint(\"Even numbers:\", even) \nprint(\"Odd numbers:\", odd) ",
        "generated_testcode": "assert Split([\"apple\", 2, 3, \"banana\", 4, 5, \"cherry\", 7, 8, \"dog\", 10]) == [3, 5, 7]\n\n\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_of_cubes = 0  \n    sum_of_numbers = 0  \n    for i in range(1, n+1) :  \n        sum_of_cubes += i**3  \n        sum_of_numbers += i  \n    return sum_of_numbers**3 - sum_of_cubes  \n\n#Taking input from user  \nn = int(input(\"Enter a positive integer: \"))  \n#Calling the function and printing the result  \nprint(\"Difference between the sum of cubes of first\", n, \"numbers and the cube of their sum is:\", difference(n)) ",
        "generated_testcode": "assert difference(5) == 2202\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": " \n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in A:\n        freq[i] = freq.get(i,0) + 1\n  \n    # Initialize a variable to store the count of pairs with odd xor\n    odd_pairs = 0\n  \n    # Traverse through each element of the array\n    for i in A:\n        # Iterate through all the bits of the element\n        for j in range(32):\n            # Calculate the complement of the j'th bit of the element\n            comp = i ^ (1 << j)\n            # Check if the complement is present in the dictionary\n            if comp in freq:\n                # If the complement is present, add the product of frequencies of the current element and its complement to the odd_pairs count\n                odd_pairs += freq[i] * freq[comp]\n  \n    # Return the count of pairs with odd xor\n    return odd_pairs\n\n# Taking input from user\narr = list(map(int, input(\"Enter the array elements : \"))\nN = len(arr)\nprint(\"Number of pairs with odd xor : \", find_Odd_Pair(arr,N)) ",
        "generated_testcode": "assert find_Odd_Pair(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], N=6) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n\n# Test the function with a sample string\nprint(toggle_string(\"Hello World\")) ",
        "generated_testcode": "assert toggle_string(string=\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Given two integers n1 and n2, find the distance between them.\n    Distance is defined as the absolute difference between the smaller and larger number of the two.\n    Return the distance between the two integers.\n    \"\"\"\n    return abs(n1-n2)\n\n#test the function with some sample inputs\nprint(digit_distance_nums(10, 6)) #4\nprint(digit_distance_nums(100, 90)) #10\nprint(digit_distance_nums(5, 5)) #0\nprint(digit_distance_nums(23, 37)) #14\nprint(digit_distance_nums(1000, 10000)) #900 ",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    start = 0\n    end = 0\n    s = 0\n    for i in range(1, size):\n        if max_ending_here < 0:\n            max_ending_here = 0\n            start = i\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            end = i\n    return max_so_far\n\n\n# Test the function\na = [-2, -3, 4, -1, -2, 1, -5, 4, -3]\nsize = len(a)\nprint(\"Maximum subarray sum is\", max_sub_array_sum(a, size))\n\n\n# Output: Maximum subarray sum is 6 ",
        "generated_testcode": "assert max_sub_array_sum([-2, 3, 4, -1, -2, 1, 5, -3], 5) == 7\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    return tuple(union_set)\n\ntest_tup1 = (1,2,3,4,5,6)\ntest_tup2 = (4,5,6,7,8,9)\nprint(union_elements(test_tup1, test_tup2))  # Output: (1,2,3,4,5,6,7,8,9)\n\n\n# Write a function to find the intersection of elements of the given tuples\ndef intersection_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    intersection_set = set1.intersection(set2)\n    return tuple(intersection_set)\ntest_tup1 = (1,2,3,4,5,6)\ntest_tup2 = (4,5,6,7,8,9)\nprint(intersection_elements(test_tup1, test_tup2))  # Output: (4,5,6)\n\n# Write a function to find the difference of elements of the given tuples\ndef difference_elements(test_tup1, test_tup2):\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)",
        "generated_testcode": "assert union_elements(('apple', 'banana', 'orange') == ('apple', 'banana', 'orange')\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n#test the function\ntest_list = (1, 2, 3, 4, 5, 6)\nprint(assign_elements(test_list)) # Output: [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 1), (2, 3), (2, 4), (2, 5), (2, 6), (3, 1), (3, 2), (3, 4), (3, 5), (3, 6), (4, 1), (4, 2), (4, 3), (4, 5), (4, 6), (5, 1), (5, 2), (5, 3), (5, 4), (5, 6), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5)] ",
        "generated_testcode": "assert assign_elements(('abc') == {'a': 'b', 'b': 'c', 'c': 'a'}\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    length = 0\n    for i in lst:\n        if type(i) == list:\n            length = len(i)\n            if length > max_length:\n                max_length = length\n            for j in i:\n                if type(j) == list:\n                    length = len(j)\n                    if length > max_length:\n                        max_length = length\n    return max_length\n\n# Test the function with a sample test case\nsample_list = [1, [2, 3, [4, 5, 6, [7, 8, 9, 10, 11], 12], 13, [14, [15, 16, [17, 18, 19, 20]]] , 13, 21]\nprint(Find_Max_Length(sample_list)) # Output: 4 ",
        "generated_testcode": "assert Find_Max_Length([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"banana\", \"dog\", \"elephant\", \"dog\", \"cat\", \"dog\", \"mango\", \"pear\", \"pear\", \"pear\", \"orange\", \"cat\"] == 3\n\n# The output should be 3 because \"dog\", \"cat\", \"dog\" and \"pear\", \"pear\", \"pear\" are the longest sublists with length 3. ",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    start = text.find('\"')\n    end = text.rfind('\"')\n    if start == -1 or end == -1:\n        return None\n    return text[start + 1:end]\n\n\n\n# test the function with an example\nprint(extract_values('The quick brown fox said \"Hi, how are you?\" to the lazy dog.'))  # Output: Hi, how are you? ",
        "generated_testcode": "assert extract_values(text='\"Hello, World!\"') == 'Hello, World!'\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count \n\n# Driver code \narr = [1, 2, 2, 3, 4, 5, 5, 6]\nn = len(arr) \nprint(count_Pairs(arr, n))\n\n# Output: 6 ",
        "generated_testcode": "assert count_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return [char for char in word] \n\n#Example:\n#Input: 'hello'\n#Output: ['h', 'e', 'l', 'l', 'o'] ",
        "generated_testcode": "assert split(\u201chello\u201d) == [\u201ch\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Test cases\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(4567))  # Output: 16\nprint(sum_digits(89))  # Output: 17\nprint(sum_digits(0))  # Output: 0\nprint(sum_digits(5))  # Output: 5\nprint(sum_digits(9))  # Output: 9 ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n=len(list1)\n    for i in range(n-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n#test\nprint(issort_list([1,2,3,4,5,6]))\nprint(issort_list([3,4,5,1,6])) ",
        "generated_testcode": "assert issort_list([]), \"Empty list is considered sorted\"\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Creates a list of empty dictionaries based on the input length\n    \"\"\"\n    return [{} for _ in range(length)]\n\n# Test the function with an input of 5\nprint(empty_list(5)) ",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n\n# Test case 1: Test if the function returns a list of length 3 with 3 empty dictionaries\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n\n#test the function\nprint(sort_sublists([[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"cat\", \"elephant\", \"zebra\"], [\"one\", \"two\", \"three\"]])) # [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant', 'zebra'], ['one', 'three', 'two']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of strings and a list of characters or strings to remove and returns a new list without the words containing the given characters or strings\n    \"\"\"\n    new_list = []\n    for word in list1:\n        if not any(char in word for char in charlist):\n            new_list.append(word)\n    return new_list\n\n#test the function with some sample data\nlist1 = ['apple', 'banana', 'orange', 'grape', 'watermelon', 'kiwi', 'pear']\ncharlist = ['a', 'na']\nprint(remove_words(list1, charlist)) # output: ['watermelon'] ",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"], \"a\") == [\"pple\", \"bnn\", \"rge\", \"kiwi\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort() \n    i, j = 0, N-1\n    max_sum = 0\n    while i < j: \n        if arr[i] + arr[j] < K: \n            max_sum += arr[i] + arr[j]\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] >= K: \n            max_sum += arr[i] + arr[j] - K\n            j -= 1\n        else: \n            break\n    return max_sum ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], N=6, K=5) == 13\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given a list of integers, remove two duplicate numbers and return the rest of the list\n    :param nums: A list of integers\n    :return: A list of unique integers\n    \"\"\"\n    seen_nums = set()\n    unique_nums = []\n    for num in nums:\n        if num not in seen_nums:\n            seen_nums.add(num)\n            unique_nums.append(num)\n        else:\n            unique_nums.remove(num)\n    return unique_nums\n\n# Test cases\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 2, 7, 8, 1, 9]))  # Output: [3, 4, 5, 6, 7, 8, 9]\nprint(two_unique_nums([1, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9]))  # Output: [1, 2, 3, 4, 5, 6, 8]\nprint(two_unique_nums([1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 9]))  # Output: [1, 2, 4, 7, 8, 9] ",
        "generated_testcode": "assert two_unique_nums(nums=[1, 2, 3, 4, 5, 2, 6, 7, 1]) == [3, 4, 5, 6, 7]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for j in unique_list:\n        product *= j\n    return product ",
        "generated_testcode": "assert unique_product(list_data=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3628880\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi=22/7\n    return 2*pi*r*h + 2*pi*r**2\nprint(surfacearea_cylinder(5,10))\n\n\n#2*pi*r*h gives the curved surface area and 2*pi*r^2 gives the lateral surface area. \n#We add these two values to get the total surface area of the cylinder. ",
        "generated_testcode": "assert surfacearea_cylinder(5, 10) == 785.3981634\n# Test case 1: r = 5, h = 10, expected output: 785.3981634\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1): \n        if i%A != 0: \n            count += 1\n            if count == N: \n                return i \n    return -1\n\n# Driver code \nA = 2\nN = 4\nL = 1\nR = 10\nprint(count_no(A,N,L,R)) ",
        "generated_testcode": "assert count_no (2,1,100) == 6\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n-m+1): \n        j = 0 \n        k = i \n        while (j < m and A[k] == B[j]): \n            j += 1\n            k += 1\n        if j == m: \n            return True\n    return False\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \nB = [4, 5, 6] \nn = len(A) \nm = len(B) \nif is_Sub_Array(A, B, n, m): \n    print(\"B is sub-array of A\") \nelse: \n    print(\"B is not sub-array of A\") \n\n#Output: B is sub-array of A ",
        "generated_testcode": "assert is_Sub_Array(A=[1,2,3,4,5,6,7,8],B=[1,2,3],n=5,m=3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        res = 1\n        for i in range(1, n+1):\n            res = (res * i) % 10\n        return res ",
        "generated_testcode": "assert last_Digit_Factorial(5) == 2\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n    for i in range(len(list3)):\n        result.append(list3[i])\n    return result\n\n#Example usage:\nlist1 = [1, 2, 3, 4]\nlist2 = ['a', 'b', 'c']\nlist3 = ['@', '#', '$']\nprint(interleave_lists(list1, list2, list3)) #[1, 'a', '@', 2, 'b', '#', 3, 'c', '$'] ",
        "generated_testcode": "assert interleave_lists([\"a\",\"b\",\"c\"],[1,2,3],[\"x\",\"y\",\"z\"]) == [\"a\",1,\"x\",\"b\",2,\"y\",\"c\",\"z\"]\n\n# Test case 1: Test if the function works with a list of strings, a list of integers, and a list of strings\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n\ntest_tup1 = (1, 5, 3, 7, 9)\ntest_tup2 = (1, 5, 9, 7, 8)\nprint(find_dissimilar(test_tup1, test_tup2) # Output: [3, 9] ",
        "generated_testcode": "assert find_dissimilar(('abc', 'def') == ('abc', 'def')\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a nested tuple as input and returns a tuple containing all the even elements in the nested tuple. \n    even_fnc is a boolean function that returns True if a number is even, and False otherwise. \n    \"\"\"\n    result = ()\n    for i in test_tuple:\n        if type(i) == int and even_fnc(i):\n            result += (i,)\n        elif type(i) == tuple:\n            result += even_ele(i, even_fnc)\n    return result\n\ndef is_even(num):\n    return num % 2 == 0\n\n# Testing the function\ntest_tuple = (1, (2, 3, (4, 5, 6, (8, 7), 9), 10, (11, 12, 13, (14, 15, (16, 17, 18, 19, 20))) ) )\nprint(even_ele(test_tuple, is_even)) # Output: (2, 6, 8, 12, 14, 16, 20) ",
        "generated_testcode": "assert even_ele(((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (2, 4, 6, 8, 10)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return (b*s + b*s + b*s + b*s) + (4 * 1/2 * b * s ",
        "generated_testcode": "assert surface_Area(5, 10) == 140\n\n# The base and slant height of the square pyramid are 5 and 10 respectively. The surface area of the square pyramid is calculated as follows:\n# Surface area = 4*base*slant_height + area_of_the_base\n# Area of the base = base*base\n# Therefore, surface area = 4*10 + 5*5 = 40 + 25 = 65\n# Test the function with base = 5 and slant height = 10, the expected output is 65. ",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\n# Test the function with an empty dictionary\ndict1 = {}\nprint(my_dict(dict1))  # Output: True\n\n\n# Test the function with a non-empty dictionary\ndict1 = {1: 'apple', 2: 'ball', 3: 'cat'}\nprint(my_dict(dict1))  # Output: False ",
        "generated_testcode": "assert my_dict(dict()) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n    return result\n\n# Test the function\nfor i in range(10):\n    print(catalan_number(i), end=\" \")\n# Output: 1 1 2 2 5 14 42 132 429 1430 4862 16796 58786 208001 742900 2674443",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    adverbs = re.findall(pattern, text)\n    return [(adv, text.index(adv)) for adv in adverbs]\n\n# test the function\ntext = \"She walked quickly and very slowly to the market.\"\nresult = find_adverbs(text)\nprint(result) # [('quickly', 10), ('very', 19), ('slowly', 25)] ",
        "generated_testcode": "assert find_adverbs(text) == [(0, \"quickly\"), (10, \"happily\"), (20, \"well\"), (32, \"quickly\"), (42, \"quickly\"), (50, \"well\")]\n\n# The function should return a list of tuples, where each tuple contains the starting index of the adverb and the adverb itself. ",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]) # we push negative of price so that we can use heapq.nsmallest which will give highest prices first\n    )\n    result=[]\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n#test\nitems= [(\"item1\",100),(\"item2\",200),(\"item3\",50),(\"item4\",150),(\"item5\",120),(\"item6\",250),(\"item7\",175),(\"item8\",190),(\"item9\",300),(\"item10\",25)]\nprint(expensive_items(items,3)) # Output: ['item6', 'item10', 'item9'] ",
        "generated_testcode": "assert expensive_items([\"item1\", \"item2\", \"item3\", \"item4\", \"item5\"], 3) == [\"item4\", \"item5\", \"item3\"]\n\n\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < k:  \n        return a  \n    else:  \n        first_part = a[:k] \n        second_part = a[k:] \n        return second_part + first_part\n    \n# test the function with example \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nk = 3\nprint(split_Arr(arr,n,k) # Output: [4, 5, 6, 7, 8, 9, 1, 2, 3] ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8], 3, 2) == [3,4,5,1,2,6,7,8]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n\n# Test the function with a sample list\nmy_list = [1, 2, 3, 4, 5]\nprint(list_tuple(my_list))  # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert list_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        max_val = nums[0]\n        min_val = nums[0]\n        for i in nums:\n            if i > max_val:\n                max_val = i\n            elif i < min_val:\n                min_val = i\n        diff = max_val - min_val\n    return diff ",
        "generated_testcode": "assert big_diff(nums=[10, 2, 5, 7, 1, 3, 0, 9]) == 9\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    i = 1\n    while i * i < a:\n        i += 1\n    while i * i <= b:\n        result.append(i * i)\n        i += 1\n    return result\n\n# Test\nprint(perfect_squares(1, 20)) # [1, 4, 9, 16]\nprint(perfect_squares(10, 25)) # [16, 25]\nprint(perfect_squares(16, 30)) # [16, 25] ",
        "generated_testcode": "assert perfect_squares(1, 20) == [1, 4, 9, 16]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Convert polar coordinates to rectangular coordinates\n    \"\"\"\n    rect_x = x * math.cos(y)\n    rect_y = x * math.sin(y)\n    return (rect_x,rect_y)\n\n\n# Example usage:\nx = 3\ny = math.pi/2\nprint(polar_rect(x,y)) # Output: (0.0, 3.0) ",
        "generated_testcode": "assert polar_rect(1,0) == (1,0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(newList) <= 1:\n        return newList\n    else:\n        # storing the first element\n        first_element = newList[0]\n        # storing the last element\n        last_element = newList[-1]\n        # setting the last element as the first element\n        newList[0] = last_element\n        # setting the first element as the last element\n        newList[-1] = first_element\n        return newList\n\n# Sample input:\n# test_list = [2, 3, 5, 6, 7, 8, 9]\n# Output: [9, 3, 5, 6, 7, 8, 2]\nprint(swap_List([2, 3, 5, 6, 7, 8, 9]) ",
        "generated_testcode": "assert swap_List([\"python\", \"java\", \"kotlin\", \"javascript\", \"c++\"]) == [\"c++\", \"java\", \"kotlin\", \"python\"]\n\n\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(1,k+1): \n        res = res * (n-i+1) / i \n    return int(res) \n\ndef sum_of_binomial_coeff(n): \n    sum = 0\n    for k in range(n+1): \n        sum += binomial_Coeff(n,k) \n    return int(sum) \n\nn = 5\nprint(\"Sum of binomial coefficients for n =\",n,\"is\",sum_of_binomial_coeff(n)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    l = ip.split(\".\")\n    ip1 = \"\"\n    for i in l:\n        if i != \"0\":\n            ip1 += str(int(i)) + \".\"\n        else:\n            ip1 += \".\"\n    return ip1[:-1]\n\nip = \"192.168.0.0.1\"\nprint(removezero_ip(ip) )  # Output: 192.168.0.1\nip = \"0.0.1.0.0\"\nprint(removezero_ip(ip) )  # Output: 0.1.0.0\nip = \"0.00.10.255.00\"\nprint(removezero_ip(ip) )  # Output: 0.10.25.0\nip = \"0.000.0.0\"\nprint(removezero_ip(ip) )  # Output: 0\nip = \"192.168.0.1.0\"\nprint(removezero_ip(ip) )  # Output: 192.168.0.1",
        "generated_testcode": "assert removezero_ip(ip='000.0000.00.010.001') == '0.0.0.0.10.1'\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum - odd_sum\n\n\n# Test the function with a sample list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(diff_even_odd(list1))\n\n\n# Output: 15 ",
        "generated_testcode": "assert diff_even_odd(list1) == 10\n\n# The function should return 10 for the given list1. ",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(str1)) : \n        if str1[i] != str2[i] : \n            count += 1\n    return count//2 \n          \n# Driver Code \nstr1 = \"101010001\"\nstr2 = \"011000110\"\nprint(min_Swaps(str1,str2)) ",
        "generated_testcode": "assert min_Swaps(10101,00011) == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    size = 0\n    for i in tuple_list:\n        size += 1\n    return size\n\n# testing the function with an example\nmy_tuple = (\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"mango\")\nprint(tuple_size(my_tuple))  # Output: 5 ",
        "generated_testcode": "assert tuple_size(()) == 0\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k//2)\n    j = k - i\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n-j, k)\n\n\n# Driver Code\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 4\nprint(\"K'th element is \", find_kth(arr1, arr2, m, n, k)) ",
        "generated_testcode": "assert find_kth(arr1=[1, 3, 5, 7, 9], arr2=[2, 4, 6, 8, 10], m=4, n=4, k=5) == 6\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum=0\n    original_number = number\n    while number>0:\n        digit=number%10\n        sum+=digit**3\n        number//=10\n    if original_number==sum:\n        return True\n    else:\n        return False\n\n#test the function\nprint(armstrong_number(153))\nprint(armstrong_number(370))\nprint(armstrong_number(371))\nprint(armstrong_number(1634))\nprint(armstrong_number(9474))\nprint(armstrong_number(9475)) ",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return (sum, average)\n\n# Test the function\nprint(sum_average(10)) # Output: (55, 5.5)\nprint(sum_average(5)) # Output: (15, 3.0) ",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n & 1 == 0 : \n        return True\n    else : \n        return False\n\n# Test the function with an example \nprint(is_Even(10)) # Output : True ",
        "generated_testcode": "assert is_Even(10) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "       self.a = a \n        self.b = b \n  \ndef longestChain(pairs): \n    if len(pairs) == 0: \n        return [] \n    elif len(pairs) == 1: \n        return [pairs[0]] \n  \n    pairs.sort(key=lambda x: x.b-x.a) \n    maxLength = [] \n    for i in range(len(pairs)): \n        temp = [pairs[i]] \n        for j in range(i+1, len(pairs)): \n            if pairs[i].b == pairs[j].a: \n                temp += [pairs[j]] \n        if len(temp) > len(maxLength): \n            maxLength = temp \n    if len(maxLength) == 1: \n        return [pairs[0].a, pairs[0].b] \n    else: \n        return [x.a for x in maxLength] + [maxLength[-1].b] ",
        "generated_testcode": "assert __init__(1, 2) == 1\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None ",
        "generated_testcode": "assert first_repeated_char(None) == None\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n\n    index = 1\n    while(index != len(ludic)):\n        first_num = ludic[index]\n        remove_index = index + first_num\n        while(remove_index < len(ludic)):\n            ludic.remove(ludic[remove_index])\n            remove_index = remove_index + first_num - 1\n        index += 1\n        if(index == len(ludic)):\n            break\n\n    return ludic\n\n#Test\nprint(get_ludic(20)) #[1, 2, 3, 4, 6, 9, 13, 18, 21, 24, 36]\nprint(get_ludic(30)) #[1, 2, 3, 4, 6, 9, 13, 18, 21, 24, 36, 39, 48, 66, 81, 98, 120, 159, 177, 189, 216, 276]\nprint(get_ludic(40)) #[1, 2, 3, 4, 6, 9, 13, 18, 21, 24, 36, 39, 4",
        "generated_testcode": "assert get_ludic(1) == []\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    words = s.split()\n    return \" \".join(words[::-1])\n\n# Testing the function with an example string\ns = \"Hello world, I am a beginner in Python!\"\nprint(reverse_words(s)) \n\n\n# Output: \"Python! beginner a in am I world, Hello\" ",
        "generated_testcode": "assert reverse_words(s=\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function\nprint(prime_num(2))  # True\nprint(prime_num(15)) # False\nprint(prime_num(7))  # True ",
        "generated_testcode": "assert prime_num(2) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    radian = degree * 3.14 / 180\n    return radian\n\n#Test the function\nprint(radian_degree(90))\nprint(radian_degree(180))\nprint(radian_degree(360))\n\n\n#Write a function to calculate the area of a circle with given radius\ndef area_of_circle(radius):\n    area = 3.14 * (radius ** 2)\n    return area\n\n#Test the function\nprint(area_of_circle(5)\nprint(area_of_circle(7)\nprint(area_of_circle(9)\n\n\n#Write a function to calculate the circumference of a circle with given radius\ndef circumference_of_circle(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\n#Test the function\nprint(circumference_of_circle(5)\nprint(circumference_of_circle(7)\nprint(circumference_of_circle(9)\n\n\n#Write a function to check whether a number is even or odd\ndef even_or_odd(num):\n    if num % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\n#Test the function\nprint(even_or_odd(6)\nprint(even_or_odd(8)\nprint(even_or_odd(5)\nprint(even_or_odd(10",
        "generated_testcode": "assert radian_degree(180) == math.pi\n\n# Write a function to calculate the area of a circle with a given radius.\ndef circle_area(radius):\n    pass\n\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    result = re.search(pattern, text)\n    if result:\n        return True, result.start()\n    else:\n        return False, None\n\n# Testing the function with examples\nprint(find_literals(\"Hello, how are you today?\", \"how\")) # (True, 7)\nprint(find_literals(\"Hello, how are you today?\", \"world\")) # (False, None)\nprint(find_literals(\"Hello, how are you today?\", \"how are you\")) # (True, 7)\nprint(find_literals(\"Hello, how are you today?\", \"o\")) # (True, 5)\nprint(find_literals(\"Hello, how are you today?\", \" \")) # (False, None) ",
        "generated_testcode": "assert find_literals(text=\"The quick brown fox jumps over the lazy dog\", pattern=\"fox\") == (True, 16)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    bell = [[0 for j in range(n + 1)] for i in range(n + 1)] \n    for i in range(n + 1): \n        bell[i][0] = 1\n        bell[i][i] = 1\n    for i in range(1, n + 1): \n        for j in range(1, i): \n            bell[i][j] = bell[i - 1][j - 1] + bell[i - 1][j] \n        for j in range(1, n + 1): \n            bell[i][j] = bell[i][j] \n    return bell[n][0]\n  \n# Driver code to test the function\nn = 4\nprint(\"The \" + str(n) + \"th bell number is:\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    MIN = A\n    for i in range(1, N):\n        MIN = min(MIN, A+i*B)\n        if MIN < 0:\n            return MIN\n    return MIN\n\n# example usage:\n# print(floor_Min(-2, 3, 5)) # Output: -2 ",
        "generated_testcode": "assert floor_Min(10, 15, 3) == 10\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(list1) < k or k <= 0:\n        return \"Invalid input\"\n    else:\n        list1.pop(k-1)\n        return list1\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 3\nprint(remove_kth_element(list1, k))  # Output: [1, 2, 3, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert remove_kth_element(2, [1, 2, 3, 4, 5, 6, 7]) == [1, 2, 4, 5, 6, 7]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if not test_list:\n        return None\n    else:\n        max_val = test_list[0][N]\n        for i in test_list:\n            if i[N] > max_val:\n                max_val = i[N]\n        return max_val\n\n\n# Test the function with sample data\nsample_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9), (10, 11, 12, 13), (14, 15, 16, 17)]\nprint(max_of_nth(sample_list, 2))  # Output: 17\nprint(max_of_nth(sample_list, 0))  # Output: 10\nprint(max_of_nth(sample_list, 1))  # Output: 15\nprint(max_of_nth(sample_list, 3))  # Output: 5 ",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 4\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    new_lst = []  \n    for i in lst:  \n        new_lst.append([i[0],i[-1]])  \n    return new_lst \n\n#Example:\n# Input: \n# lst = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11]]\n# Output:\n# [[1, 4], [5, 8], [9, 11]] ",
        "generated_testcode": "assert merge([] ) == []\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_value = 0\n    for record in test_list:\n        if record[1] > max_value:\n            max_value = record[1]\n    return max_value\n\n\n# Test the function with a sample tuple list\nrecords = [(1, 5), (2, 10), (3, 7), (4, 3), (5, 15)]\nprint(maximum_value(records))  # Output: 15 ",
        "generated_testcode": "assert maximum_value([(1, 2), (3, 4), (5, 6)] ) == 6\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    result = []\n    for i in test_list:\n        sum += i\n        result.append(sum)\n    return result\n\ntest_list = (1, 2, 3, 4, 5, 6)\nprint(cummulative_sum(test_list)) ",
        "generated_testcode": "assert cummulative_sum(()) == 0\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    count = 0\n    for i in range(len(nums)):\n        sum += sum(nums[i])\n        count += len(nums[i])\n    return sum / count\n\n# Test the function with a sample tuple of tuples\nnums = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(average_tuple(nums)) # Output: 5.0 ",
        "generated_testcode": "assert average_tuple(()) == 0.0\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as input and returns a tuple containing the modulo of the corresponding elements of both the tuples\n    Input: Two tuples, test_tup1 and test_tup2\n    Output: A tuple containing the modulo of the corresponding elements of both the given tuples\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n\n\n# Test the function with example tuples\na = (10, 20, 30)\nb = (3, 5, 8)\nprint(tuple_modulo(a, b)) # Output: (1, 0, 2) ",
        "generated_testcode": "assert tuple_modulo(( (10, 20, 30), (3, 4, 5)) == (1, 2, 0)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if a < b: \n        a, b = b, a \n    # Swapping the values of a and b if a < b, so that we can assume that a >= b \n    # The minimum number of jumps to reach (d, 0) from (0, 0) is same as the minimum number of jumps to reach (d, 0) from (b, b) \n    # as we can always reach (b, b) from (0, 0) in d jumps, and then we can reach (d, 0) from (b, b) in b jumps. \n    # So, we need to calculate the minimum number of jumps to reach (d, 0) from (b, b) \n  \n    # If d is smaller than or equal to b, then we can reach (d, 0) directly from (b, b) in one jump \n    if d <= b: \n        return 1\n  \n    # If d is greater than b, then we can reach (b, b) and then (d, 0) in ceil(d/b) jumps \n    return 2 + min_Jumps(d - b, b, d) ",
        "generated_testcode": "assert min_Jumps(1, 1, 5) == 2\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    divide = lambda x,y: x/y\n    return list(map(divide,nums1,nums2))\n\n#Example\n#Test the function with two lists\nnums1 = [10, 20, 30, 40]\nnums2 = [2, 5, 10, 6]\nprint(div_list(nums1, nums2)) #[5.0, 4.0, 6.66666666666666666667] ",
        "generated_testcode": "assert div_list(nums1, nums2) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Test case 1: nums1 = [1, 2, 3, 4, 5, 6, 7, 8], nums2 = [2, 2, 2, 2, 2, 2, 2]\n# Expected output: [0.5, 1.0, 2.0, 2.5, 3.0, 4.0]\n\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    nums = []\n    words = []\n    for word in test_str.split():\n        if word.isdigit():\n            nums.append(word)\n        else:\n            words.append(word)\n    return ''.join(nums) + ' ' + ' '.join(words)\n\n\n# test the function with some examples\nprint(move_num(\"I have 10 apples and 20 oranges\"))\nprint(move_num(\"Hi there 3 times, how are you doing 5 today?\"))\nprint(move_num(\"10 plus 20 is equal to 30\")) ",
        "generated_testcode": "assert move_num(test_str = \"Hello 123 World 456\") == \"123 456\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    a.sort()\n    max_subset = []\n    for i in range(n-1, -1, -1, -1):\n        for j in range(i-1, -1, -1, -1):\n            if a[i] % a[j] == 0:\n                max_subset.append(a[i])\n                break\n    return max_subset\n\na = [int(x) for x in input().split()]\nn = len(a)\nprint(largest_subset(a, n))\n\n\ndef largest_subset(a, n):\n    a.sort()\n    max_subset = []\n    i = n-1\n    while i >= 0:\n        max_subset.append(a[i])\n        for j in range(i-1, -1, -1):\n            if a[i] % a[j] == 0:\n                i = j\n        i -= 1\n    return max_subset\na = [int(x) for x in input().split()]\nn = len(a)\nprint(largest_subset(a, n))\n\ndef largest_subset(a, n):\n    a.sort()\n    max_subset = []\n    i = n-1\n    while i >= 0:\n        max_subset.append(a[i])\n        while i-1 >= 0 and a[i] % a[i-1] == 0:\n            i -= 1\n        i -= 1",
        "generated_testcode": "assert largest_subset(a=[1, 2, 3, 4, 6, 8, 9, 12, 15, 16, 18], n=7) == [1, 2, 4, 6, 8]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\d+'\n    result = []\n    for string in test_list:\n        # Find all the numeric substrings in the string\n        num_substrings = re.findall(pattern, string)\n        # Iterate through each numeric substring\n        for num_substring in num_substrings:\n            # Increment the numeric substring by k and replace it in the original string\n            incremented_substring = str(int(num_substring) + K)\n            string = string.replace(num_substring, incremented_substring, 1)\n        result.append(string)\n    return result\n\n# Test cases\ntest_list = ['ab12cd34', 'ab123cd45', 'ab123cd34ef56']\nK = 5\nprint(increment_numerics(test_list, K)) # Output: ['ab17cd39', 'ab173cd50', 'ab173cd41ef61'] ",
        "generated_testcode": "assert increment_numerics([\"a123b45c\", \"x1y22z\", \"123q456\"], 5) == [\"a128b410c\", \"x6y27z\", \"128q411\"]\n\n# Test case 1:\n# Input: [\"a123b45c\", \"x1y22z\", \"123q456\"], 5\n# Output: [\"a128b410c\", \"x6y27z\", \"128q411\"]\n# Explanation: In the first string, \"a123b45c\", we replace 123 with 128, in the second string \"x1y22z\" we replace 1 with 6 and in the third string \"123q456\" we replace 123 with 128.\n\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Create a new array and merge the two arrays\n    merged_arr = []\n    i = j = 0\n    k = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        else:\n            merged_arr.append(arr2[j])\n            j += 1\n        k += 1\n\n    while i < n:\n        merged_arr.append(arr1[i])\n        i += 1\n        k += 1\n\n    while j < n:\n        merged_arr.append(arr2[j])\n        j += 1\n        k += 1\n\n\n    # Find the median of the merged array\n    if n % 2 == 0:\n        return (merged_arr[n//2] + merged_arr[n//2 - 1])/2\n    else:\n        return merged_arr[n//2]\n\n\n# Test the function with some sample test cases\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(\"Median of the two arrays is:\", get_median(arr1, arr2, n))  # Output: 5.5\n\n\narr1 = [1, 3, 5]\narr2 = [2,",
        "generated_testcode": "assert get_median(sorted([1, 3, 5, 7, 9], sorted([2, 4, 6, 8, 10], 4) == 5.5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x:x**n,nums)\n\n\n#Example:\nnums = [1,2,3,4,5]\nn=2\nprint(nth_nums(nums,n)) # Output: [1,4,9,16,25] ",
        "generated_testcode": "assert nth_nums(nums=[2,3,4,5],n=3) == [8,27,125]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return string.upper()\n\n# test the function with a sample string\nprint(is_upper(\"hello world\"))\nprint(is_upper(\"HELLO WORLD\"))\nprint(is_upper(\"123abcd\"))\nprint(is_upper(\"\")) ",
        "generated_testcode": "assert is_upper(string) == \"THIS IS A TEST STRING\"\n\n# Test case 1: Testing with a normal string\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    size = len(newList) \n    if size < 2: \n        return newList \n    else: \n        temp = newList[0] \n        newList[0] = newList[size-1] \n        newList[size-1] = temp \n        return newList \n#Testing the function with an example \nnewList = [1, 2, 3, 4, 5, 6, 7] \nprint(swap_List(newList) ",
        "generated_testcode": "assert swap_List([\"python\", \"java\", \"kotlin\", \"javascript\", \"c++\"]) == [\"c++\", \"java\", \"kotlin\", \"python\"]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\" This function takes radius of the semicircle as input and returns the area of the largest triangle that can be inscribed in it \"\"\"\n    height = r * (3 ** 0.5) / 2\n    area = 0.5 * height * r\n    return area\n\n# Test the function with radius 5\nprint(triangle_area(5)\n# Output: 6.70820393246\n\n# Test the function with radius 7.5\nprint(triangle_area(7.5)\n# Output: 14.24690778425\n\n# Test the function with radius 2.5\nprint(triangle_area(2.5)\n# Output: 6.4951902093",
        "generated_testcode": "assert triangle_area(3) == 6.0\n\n# Write a python function to find the area of a triangle given the base and height.\ndef triangle_area_bh(base, height) :  \n    pass\n\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(array) \n    for i in range(n): \n        if array[i]<0 or array[i]>=n: \n            array[i] = 0 \n    for i in range(n): \n        val = abs(array[i]) \n        if val<=n: \n            array[val-1] = -abs(array[val-1]) \n    for i in range(n): \n        if array[i]>=0: \n            return i+1 \n    return n+1\n\n# Driver code \narray = [1,2,0,3,6,4,5,6,5,2,0] \nstart = 0\nend = len(array)-1\nprint(\"The smallest missing number is:\",find_First_Missing(array,start,end)) ",
        "generated_testcode": "assert find_First_Missing(array=[1,2,3,4,5,6,7,8,9],start=1,end=9) == 10\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return \"%20\".join(string.split())\n    \n# Test the function with a sample string\ninput_string = \"Hello World\"\nprint(replace_spaces(input_string)) ",
        "generated_testcode": "assert replace_spaces(input_string) == expected_output_string\n\n# Example:\n# input_string = \"Hello world\"\n# expected_output_string = \"Hello%20world\"\n# ",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    even = [] \n    odd = [] \n    for num in list: \n        if num % 2 == 0: \n            even.append(num) \n        else: \n            odd.append(num) \n    return even, odd \n  \n# Example usage: \nlist = [1, 2, 4, 3, 6, 8, 10, 11, 13, 14] \ne, o = Split(list) \nprint(\"Even numbers: \", e) \nprint(\"Odd numbers: \", o) ",
        "generated_testcode": "assert Split([\"apple\", 23, 4, \"banana\", 56, \"orange\", 89, \"grape\", 12, 34, \"kiwi\"]) == [4, 12]\n\n\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    x, y = ele \n    for i in range(-1, 2): \n        for j in range(-1, 2): \n            sub.append((x+i,y+j)) \n    return sub \n# Test the function \n# Sample Input: \n#   coordinate = (1,2)\n#   sub = []\n# Sample Output: \n#   [(0, 2), (1, 1), (2, 2), (1, 3), (0, 1), (2, 1), (1, 2), (0, 3)] ",
        "generated_testcode": "assert adjac((1, 1) == [(0, 1), (1, 0), (2, 1), (1, 2)])\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'\\s+', '_', text)\n\n#Example:\n#Input: \"Hello, world!\"\n#Output: \"Hello,_world!\"\n#Input: \"Python is fun!\"\n#Output: \"Python_is_fun!\" ",
        "generated_testcode": "assert replace_spaces(text=\"I love Python\") == \"I_love_Python\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    zeroes = []\n    other_nums = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            other_nums.append(num)\n    return other_nums + zeroes\n\n\n#test the function with some sample inputs\nprint(move_zero([1,0,2,3,0,4,5,6,0])) #[1, 2, 3, 4, 5, 6, 0, 0]\nprint(move_zero([0,0,0,0,0,0,0,0,0])) #[0, 0, 0, 0, 0, 0, 0, 0]\nprint(move_zero([1,2,3,4,5,0,6,7,0])) #[1, 2, 3, 4, 5, 6, 7, 0]\nprint(move_zero([0,1,0,2,3,4,0,5,6])) #[1, 2, 3, 4, 5, 6, 0, 0] ",
        "generated_testcode": "assert move_zero(num_list) == [1, 3, 12, 0, 0, 15, 0, 8, 0, 10]\n\n\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Your code here\n    # Initialize a variable to store the sum of xor of all pairs\n    sum_xor = 0\n    \n    # Traverse through the array from start to end\n    for i in range(n) :\n        # Traverse from i+1 to end\n        for j in range(i+1, n) :\n            # Xor the two numbers and add it to the sum\n            sum_xor += (arr[i] ^ arr[j])\n            \n    # Return the sum_xor\n    return sum_xor\n    \n# Driver code\narr = [3, 6, 5, 8, 10]\nn = len(arr)\nprint(pair_OR_Sum(arr, n)) # Output: 31\n\narr = [5, 8, 1, 2, 4]\nn = len(arr)\nprint(pair_OR_Sum(arr, n)) # Output: 28\n\narr = [1, 3, 2, 4, 7]\nn = len(arr)\nprint(pair_OR_Sum(arr, n)) # Output: 12\n\narr = [1, 5, 3, 4, 2, 7, 9]\nn = len(arr)\nprint(pair_OR_Sum(arr, n)) # Output: 42 ",
        "generated_testcode": "assert pair_OR_Sum(arr=[1, 2, 3, 4, 5], n=4) == 18\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**4\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the fourth power of first\", n, \"even natural numbers is:\", even_Power_Sum(n))\n\n\n#output\n#Enter the value of n: 5\n#The sum of the fourth power of first 5 even natural numbers is: 1040000 ",
        "generated_testcode": "assert even_Power_Sum(4) == 1000000\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Sorts an iterable in ascending order using a heap data structure.\n    \"\"\"\n    # convert the iterable into a heap\n    heapq.heapify(iterable)\n    # pop off the smallest values one at a time and store them in a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    # return the sorted list\n    return sorted_list\n",
        "generated_testcode": "assert heap_sort(iterable=[4, 2, 5, 1, 3, 7, 6, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0: \n        return False \n    else: \n        d = b**2 - 4*a*c \n        if d < 0: \n            return False \n        else: \n            root1 = (-b + d**0.5)/(2*a) \n            root2 = (-b - d**0.5)/(2*a) \n            if root1 != 0 and root2 != 0: \n                if root1*root2 == 1/float(root2) + 1/float(root1): \n                    return True \n    return False \n\n#Taking input from user\na = float(input(\"Enter coefficient of x^2: \"))\nb = float(input(\"Enter coefficient of x: \"))\nc = float(input(\"Enter constant term: \")) \n\n#Calling function to check if roots are reciprocal of each other or not\nif Check_Solution(a,b,c) == True: \n    print(\"Roots are reciprocal of each other\") \nelse: \n    print(\"Roots are not reciprocal of each other\") ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if actual_cost == sale_amount:\n        print(\"No profit and no loss\")\n    elif actual_cost > sale_amount:\n        print(\"Loss\")\n    else:\n        print(\"Profit\") \n        \n#Example Usage:\n#noprofit_noloss(1000,120) # Output: Profit\n#noprofit_noloss(1000,100) # Output: No profit and no loss\n#noprofit_noloss(150,100) # Output: Loss ",
        "generated_testcode": "assert noprofit_noloss(1000, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    wci = 13.12 + 0.6215*t - 11.39*v + 0.3965*t*v - 0.01164*t*t - 0.00245*v*v - 0.00029*t*v*v - 0.00054*v*t\n    return round(wci,1)\n\n#Test the function with sample values\nprint(wind_chill(40,30))\n\n\n#Ask user for input and calculate wind chill index\nv = float(input(\"Enter wind speed in km/h: \"))\nt = float(input(\"Enter temperature in Celsius: \"))\nprint(\"The wind chill index is:\", wind_chill(v,t)) ",
        "generated_testcode": "assert wind_chill(5, 10) == 10.0\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n#test the function with some sample inputs\nnames = [\"Alex\", \"Betty\", \"Charlie\", \"daisy\", \"edward\", \"Fiona\"]\nprint(sample_nam(names)) # Output: 11 (Alex + Betty + Fiona = 11) ",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"dave\", \"eve\", \"Frank\"]) == 10\n# Test case 1: Testing with a list of names where the first and last names start with uppercase letters\n\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize an empty string to store the final result\n    result = \"\"\n    # initialize a stack to keep track of opening parenthesis\n    stack = []\n    # loop through the characters in the string\n    for char in items:\n        # if the character is an opening parenthesis, push it onto the stack\n        if char == \"(\":\n            stack.append(char)\n        # if the character is a closing parenthesis, pop the opening parenthesis from the stack\n        elif char == \")\":\n            if stack:\n                stack.pop()\n        # if the stack is empty, add the character to the result string\n        elif not stack:\n            result += char\n    # return the result string\n    return result\n\n# test the function\nitems = \"Hello (world)\"\nprint(remove_parenthesis(items) == \"Hello \") # True\nitems = \"Hi (there(whats up) this is a (test)\"\nprint(remove_parenthesis(items) == \"Hi this is a \") # True\nitems = \"Hi (there(whats (up) this is a (test)\"\nprint(remove_parenthesis(items) == \"Hi \") # True ",
        "generated_testcode": "assert remove_parenthesis([\"a(bc)d\", \"hello(world)\", \"def)ghi\", \"j(k(lm)n)o\"] == [\"ad\", \"helloworld\", \"dgno\", \"jkno\"]\n\n\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns True if n is a nonagonal number, False otherwise.\n    \"\"\"\n    # The formula for nonagonal numbers is n * (n + 1) / 2 or (n * (n + 1)) / 2.\n    # Solving for n gives a quadratic equation, 8n^2 + 4n - 2n = 2n^2 + 2n - 1.\n    # We can factor this as (2n - 1)(4n + 1) and see if it is divisible by 2.\n    return (n * (n + 1) * (2 * n - 1)) % 2 == 0\n\ndef find_nth_nonagonal(n):\n    \"\"\"\n    Finds the nth nonagonal number.\n    \"\"\"\n    i = 1\n    count = 0\n    while count < n:\n        if is_nonagonal(i):\n            count += 1\n        if count == n:\n            return i * (i + 1) // 2\n        i += 1\n    return None\n\n# Test cases\nprint(find_nth_nonagonal(1)) # Should print 1\nprint(find_nth_nonagonal(2)) # Should print 25\nprint(find_nth_nonagonal(3)) # Should print 35\nprint(find_nth_nonagonal(4)) # Should print 49\nprint(find_nth_nonagonal(5)) # Should print ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for row in test_list:\n        if row not in new_list:\n            new_list.append(row)\n    return tuple(new_list)\n\n# Test the function with sample inputs\ntest_list = ((1,2,3),(4,5,6),(1,2,3),(7,8,9),(4,5,6),(7,8,9))\nprint(remove_similar_row(test_list)) # Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9)) ",
        "generated_testcode": "assert remove_similar_row(()) == ()\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result\n\n# test the function\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog and the zebra disappeared\")) ",
        "generated_testcode": "assert text_match_wordz_middle([\"hello\", \"hey\", \"goodbye\", \"seven\", \"zero\", \"az\"]), [\"hey\", \"goodbye\"]\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0, k, 1): \n        j = len(input) - 1 - i \n        temp = input[i] \n        input[i] = input[j] \n        input[j] = temp\n    return input\n    \n# Driver code to test the function \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nk = 4\nprint(reverse_Array_Upto_K(arr, k)) # Output: [4, 3, 2, 1, 5, 6, 7, 8, 9] \n\n\n# Time Complexity : O(k) ",
        "generated_testcode": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 2) == [2, 1, 4, 3, 6, 5, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    prod = 1\n    for i in val:\n        prod *= i \n    return prod ",
        "generated_testcode": "assert get_product(((1,2,3,4,5,6,7,8,9,10)) == 36 # Testing for k = 3\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return (N//K)**3\n\nN = int(input(\"Enter the size of the cube: \"))\nK = int(input(\"Enter the size of the cubes to count: \"))\nif N<K:\n    print(\"Invalid input, size of the cube cannot be smaller than size of the cubes.\")\nelse:\n    print(f\"Number of cubes of size {K} in a cube of size {N} is {No_of_cubes(N,K)}\") ",
        "generated_testcode": "assert No_of_cubes(10, 2) == 6\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"Splits a string at uppercase letters and returns a list of strings.\"\"\"\n    result = []\n    start = 0\n    for i, c in enumerate(text):\n        if c.isupper() and i != 0:\n            result.append(text[start:i])\n            start = i\n    result.append(text[start:])\n    return result\n\n# Test the function with some examples\nprint(split_upperstring(\"HelloWorldAndGoodbye\")) # ['Hello', 'World', 'And', 'Goodbye']\nprint(split_upperstring(\"TheQuickBrownFoxJumpsOverTheLazyDog\")) # ['The', 'Quick', 'Brown', 'Fox', 'Jumps', 'Over', 'The', 'Lazy', 'Dog']\nprint(split_upperstring(\"TheHobbitIsAGreatMovie\")) # ['The', 'Hobbit', 'Is', 'A', 'Great', 'Movie'] ",
        "generated_testcode": "assert split_upperstring(text=\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = int(input(\"Enter the value of n: \"))\n    if n % 2 == 0 or n <= 0:\n        return \"Invalid Input\"\n    else:\n        for i in range(0, len(lst), n):\n            if i+n-1 < len(lst):\n                lst[i], lst[i+n-1] = lst[i+n-1], lst[i]\n        return lst\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(exchange_elements(lst)) # [2, 1, 4, 3, 6, 5, 8, 7, 10, 9] ",
        "generated_testcode": "assert exchange_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"b\", \"a\", \"d\", \"c\", \"f\", \"e\"]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(m, n+1):\n        sum += nums[i]\n    return sum\n\n#Example:\nsum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 4) \n# Output: 15 ",
        "generated_testcode": "assert sum_Range_list(nums=[1,2,3,4,5,6,7,8,9], m=1, n=3) == 9\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n != m:\n        return False\n    for i in range(n):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n\n#Example\narr1 = [1,2,3,4,5,6]\narr2 = [1,2,3,4,5,6]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1,arr2,n,m):\n    print(\"Both arrays are equal\")\nelse:\n    print(\"Both arrays are not equal\") ",
        "generated_testcode": "assert are_Equal(arr1=[1,2,3,4,5],arr2=[1,2,3,4,5],n=4,m=4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup1:\n        if i not in test_tup2:\n            return False\n    return True\n\n\n# example usage\ntup1 = (1, 2, 3)\ntup2 = (1, 2, 3, 4, 5)\nprint(check_subset(tup1, tup2)) # True\n\ntup3 = (4, 5, 6)\nprint(check_subset(tup3, tup2)) # False\n\n\n# OR\n\ndef check_subset(test_tup1, test_tup2):\n    return set(test_tup1).issubset(set(test_tup2))\n\n\n# example usage\ntup1 = (1, 2, 3)\ntup2 = (1, 2, 3, 4, 5)\nprint(check_subset(tup1, tup2)) # True\ntup3 = (4, 5, 6)\nprint(check_subset(tup3, tup2)) # False ",
        "generated_testcode": "assert check_subset(('apple', 'banana') == False\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a matrix as input and returns a tuple of tuples, where each tuple represents a column in the matrix.\n    \"\"\"\n    result = ()\n    for i in range(len(test_list[0])):\n        column = ()\n        for j in range(len(test_list)):\n            column += (test_list[j][i],)\n        result += (column,)\n    return result\n\n# Test the function with the sample inputs\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list)) # Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)) ",
        "generated_testcode": "assert matrix_to_list(()) == ()\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import defaultdict\n    d = defaultdict(list)\n    for key, value in l:\n        d[key].append(value)\n    return d\n# Example usage:\nlst = [('apple', 'red'), ('apple', 'green'), ('banana', 'yellow'), ('banana', 'green'), ('orange', 'orange')]\nprint(grouping_dictionary(lst)) ",
        "generated_testcode": "assert grouping_dictionary([\"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"orange\"]) == {\"apple\": [\"apple\", \"apple\", \"apple\"], \"orange\": [\"orange\", \"orange\"], \"banana\": [\"banana\", \"banana\"]}\n\n\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    perimeter = 2 * (l + b)\n    return perimeter\n\n#Test the function\nprint(rectangle_perimeter(5,4)) #18\nprint(rectangle_perimeter(7,3)) #22\nprint(rectangle_perimeter(10,10)) #40 ",
        "generated_testcode": "assert rectangle_perimeter(4, 5) == 18\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        sum += i ** 5\n    return sum\n\n# Taking input from user\nn = int(input(\"Enter the number of natural numbers: \"))\n\nprint(\"The sum of the fifth power of\",n,\"natural numbers is:\", fifth_Power_Sum(n)) ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 15125\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    a.sort() \n    b.sort() \n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < n: \n        ans += abs(a[i] - b[j]) \n        i += 1\n        j += 1\n    return ans \n\n#Example:\na = [1, 2, 3, 4]\nb = [2, 3, 4]\nn = len(a)\nprint(find_Min_Sum(a, b, n)) # Output: 1\n\n\n#Explanation:\n# The minimum sum of absolute differences is 1 by sorting the arrays and then selecting the smallest elements from both the arrays and finding their absolute difference. \n# Here, 1 is the absolute difference between 1 and 2. ",
        "generated_testcode": "assert find_Min_Sum(a,b,n) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    factorial = 1 \n    for i in range(1, n+1) : \n        factorial = factorial * i \n    # Find the first digit in factorial \n    first_digit = int(str(factorial)[0] + \"\") \n    return first_digit \n\n# Driver code \nn = 5\nprint(first_Digit(n)) ",
        "generated_testcode": "assert first_Digit(123) == 7\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function returns the item that appears most frequently in the given list.\n    If there are ties, it returns the one that appears first.\n    \"\"\"\n    # create an empty dictionary to store the count of each item\n    count_dict = {}\n    # iterate through the list and count the occurrences of each item\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    # find the item with the highest count\n    max_item = None\n    max_count = 0\n    for item in count_dict:\n        if count_dict[item] > max_count:\n            max_item = item\n            max_count = count_dict[item]\n    return max_item\n\n# test the function\nprint(max_occurrences(['a', 'b', 'c', 'd', 'a', 'a', 'b', 'c', 'd', 'd', 'd', 'a', 'b', 'c', 'a', 'a', 'a'])) # should print 'a' ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"banana\"]) == \"banana\"\n\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    dup = []\n    for i in x:\n        if x.count(i) > 1 and i not in dup:\n            dup.append(i)\n    return dup\n\n#test the function\nlist1 = [1,2,3,4,5,6,6,7,7,8,9,9,10,10,10,11,12,12,12,13,14,14,15]\nprint(\"Original list: \", list1)\nprint(\"Duplicate elements: \", Repeat(list1) ) ",
        "generated_testcode": "assert Repeat([1, 2, 3, 4, 5, 6, 2, 7, 8, 9, 3, 10, 10] ) == [2, 3, 10]\n\n\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if r1 < l2: \n        return f\"Choose any point between {l1} and {r1} or {l2} and {r2}\"\n    elif l1 > r2: \n        return f\"Choose any point between {l2} and {r2} or {l1} and {r1}\"\n    else: \n        return f\"Choose any point between {l1} and {l2} and {r1} and {r2}\" ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max1 = max2 = max3 = float('-inf')\n    for i in range(n): \n        if arr[i] > max3: \n            max1, max2, max3 = max2, max3, arr[i] \n        elif arr[i] > max2: \n            max1, max2 = max2, arr[i] \n        elif arr[i] > max1: \n            max1 = arr[i] \n    return max(max1 + max2 + max3, max1 + arr[n-1] + arr[0], arr[0] + arr[1] + arr[n-1]) ",
        "generated_testcode": "assert max_sum_of_three_consecutive(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=6) == 25\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_dict = {}\n    for key in sorted(dict1.keys()):\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\n# Example usage:\ndict1 = {'a': 10, 'b': 3, 'c': 7, 'd': 1, 'e': 5}\nprint(sorted_dict(dict1)) # Output: {'a': 10, 'b': 3, 'c': 7, 'd': 1, 'e': 5} ",
        "generated_testcode": "assert sorted_dict(dict1) == {'apple': 1, 'banana': 2, 'orange': 3, 'pear': 4}\n\n\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = 0\n    for i in range(1, n + 1): \n        if (y * i) % x == 0: \n            max_val = i \n    return max_val \n  \n# Driver code to test the function \nn = 10\nx = 2\ny = 3\nprint(find_max_val(n, x, y)) ",
        "generated_testcode": "assert find_max_val(10, 3, 4) == 2\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum=0\n    count=0\n    num=2\n    while num<=n:\n        sum+=num\n        count+=1\n        num+=2\n    return sum/count\nn=int(input(\"Enter the even number: \" )\nif n%2!=0:\n    n-=1\nprint(\"Average of even numbers till\",n,\"is\",average_Even(n)) ",
        "generated_testcode": "assert average_Even(2) == 2.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        return num_list[1:] + [num_list[0]]\n\n\n# test the function\nprint(move_last([1, 2, 3, 4, 5, 6]))\nprint(move_last([]))\nprint(move_last([1]))\nprint(move_last([1, 2])) ",
        "generated_testcode": "assert move_last(num_list) == [2, 3, 4, 5, 1]\n\n# Test case 1:\nnum_list = [1, 2, 3, 4, 5]\nmove_last(num_list)\n\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\nstring = input(\"Enter a string: \")\nchar = input(\"Enter a character to count: \")\n\nprint(f\"{char} occurs {count_char(string,char)} times in the string.\") ",
        "generated_testcode": "assert count_char(string,char) == expected_output\n\n# Example:\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for char in string:\n        if char in vowels:\n            count += 1\n    return count\n\nstring = input(\"Enter a string: \")\nvowels = \"aeiouAEIOU\"\nresult = Check_Vow(string, vowels)\nprint(\"Number of vowels in the string: \", result) ",
        "generated_testcode": "assert Check_Vow(\u201chello world\u201d, \u201caeiou\u201d) == 3\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_string = \"\" \n    i = 0 \n    while i < len(string): \n        if i == 0 or string[i] != string[i - 1]: \n            new_string += string[i] \n        i += 1\n    return new_string\n  \n# Driver code \nstring = \"aabbbccaaddddeefgh\"\nchar = \"a\"\nprint(replace(string, char) ",
        "generated_testcode": "assert replace(string=\"hello world\", char=\"l\") == \"helo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    regex = \"^([1-9][0-9]{0,2}|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])\\\\.([0-9]{1,9}|[1-9][0-9]{0,2}|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])\\\\.([0-9]{1,9}|[1-9][0-9]{0,2}|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])\\\\.([0-9]{1,9}|[1-9][0-9]{0,2}|1[0-9]{0,2}|2[0-4][0-9]|25[0-5])$\"\n    pattern = re.compile(regex) \n    if re.match(pattern, Ip): \n        return True\n    else: \n        return False \n\n#Example \n#Testing the function with sample inputs\nprint(check_IP(\"192.168.0.1\")) #True\nprint(check_IP(\"2555.255.255.255\")) #True\nprint(check_IP(\"256.255.255.255\")) #False\nprint(check_IP(\"0.1.0.1\")) #False ",
        "generated_testcode": "assert check_IP(192.168.0.1.1) == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] <= nums[i+1]:\n            return False\n    return True\n\n#test the function\nprint(decreasing_trend([5, 4, 3, 2, 1])) # True\nprint(decreasing_trend([1, 2, 3, 4, 5])) # False\nprint(decreasing_trend([10, 9, 7, 5, 3])) # True\nprint(decreasing_trend([10, 11, 12])) # False ",
        "generated_testcode": "assert decreasing_trend(1, 2, 3, 4, 5) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return n & -n \n\ndef set_Right_most_Bit(n): \n    return n | (get_Pos_Of_Right_most_Set_Bit(n)) \n\n\nn = 14 # 11110\nprint(\"Original Number:\", bin(n))\nprint(\"Set right most unset bit:\", bin(set_Right_most_Bit(n))[2:]) # output 11111 ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(15) == 3\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 >= num2 and num1 >= num3: \n        return num1 \n    elif num2 >= num1 and num2 >= num3: \n        return num2 \n    else: \n        return num3 \n\nprint(max_of_three(4, 7, 2)) # Output: 7 ",
        "generated_testcode": "assert max_of_three(5, 10, 7) == 10\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 0 \n    for digit in list: \n        result = result * 10 + digit \n    return result ",
        "generated_testcode": "assert convert(list(1,2,3,4,5)) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = string.split()\n    new_words = set(words)\n    return \" \".join(new_words)\n\n\nstring = \"apple orange apple mango orange apple grapes mango\"\nprint(remove_duplicate(string))\n\n\n# Output: \"apple mango grapes orange\"\n\n\n# Explanation:\n# We first split the string into words and convert them into a set, which automatically removes the duplicates. Then we join the words in the set back into a string and return it. ",
        "generated_testcode": "assert remove_duplicate(string) == \"this is a sample string\"\n\n# Test case 1:\nstring = \"this is a sample string\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if x+y in range(m,n+1):\n        return 20\n    else:\n        return x+y\n\n#test the function\nprint(sum_nums(5,6,10,15)) #should return 11\nprint(sum_nums(5,6,3,8)) #should return 20\nprint(sum_nums(5,6,6,8)) #should return 20\nprint(sum_nums(5,6,1,10)) #should return 11 ",
        "generated_testcode": "assert sum_nums(5, 6, 10, 15) == 11\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[^a-zA-Z0-9]')\n    text1 = re.sub(pattern, '', text1)\n    return text1\n\n#Test the function with a sample string\ntext = 'This is a sample string with 123 special characters'\nprint(remove_extra_char(text)) # Thisisasamplestringwith123specialcharacters ",
        "generated_testcode": "assert remove_extra_char(text1) == \"This is a string with only alphanumeric characters\"\n\n\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n#checking validity of a triangle\na = 3\nb = 4\nc = 5\nif validity_triangle(a,b,c):\n    print(\"Valid Triangle\")\nelse:\n    print(\"Invalid Triangle\") ",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return str1.replace(\" \", \"\")\n\n# Example:\n# Input: \"Hello world\"\n# Output: \"Helloworld\" ",
        "generated_testcode": "assert remove_spaces(str1) == \"HelloWorld\"\n\n# Test case 1:\nstr1 = \"Hello World\"\nprint(remove_spaces(str1)) # Output: \"HelloWorld\"\n\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    index = list(ditionary.keys()).index(key)\n    return list(ditionary.values())[index]\n\n# Test the function with a sample dictionary\nsample_dict = {'apple': 1, 'banana': 2, 'orange': 3, 'grapes': 4, 'mango': 5}\nprint(access_key(sample_dict,'orange')) # output: 3 ",
        "generated_testcode": "assert access_key(ditionary={'a':1,'b':2,'c':3},key='b') == 2\n\n\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\n# Example usage:\n# Test case\nprint(increasing_trend([1,2,3,4,5,6,7,8])) # True\nprint(increasing_trend([1,2,3,4,5,6,4])) # False\nprint(increasing_trend([1,2,3,4,5])) # True\nprint(increasing_trend([9,8,7,6,5])) # False ",
        "generated_testcode": "assert increasing_trend(1, 2, 3, 4, 5, 6, 7, 8) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Finds the smallest prime divisor of a number n.\n    \"\"\"\n    # we will start checking from 2 since it is the smallest prime number\n    i = 2\n    while i <= n:\n        # check if i is a divisor of n\n        if n % i == 0:\n            return i\n        i += 1\n    return n # in case n is prime\nprint(smallest_Divisor(15)) # Output: 3\nprint(smallest_Divisor(9)) # Output: 3\nprint(smallest_Divisor(12)) # Output: 2\nprint(smallest_Divisor(17)) # Output: 17 ",
        "generated_testcode": "assert smallest_Divisor(15) == 3\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x*y,nums1,nums2))\n\nnums1 = [1,2,3,4]\nnums2 = [5,6,7,8]\nprint(mul_list(nums1,nums2))\n\n\n#output [5, 12, 28] ",
        "generated_testcode": "assert mul_list([1,2,3], [4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, int(n/2)+1) : \n        j = n - i*i \n        if (j < 0) : \n            break\n        if (int(j**0.5)**2 == j) : \n            return True\n    return False \n\n# Test the function with some examples\nprint(sum_Square(101)) # True\nprint(sum_Square(11)) # True\nprint(sum_Square(21)) # True\nprint(sum_Square(8)) # True\nprint(sum_Square(17)) # False ",
        "generated_testcode": "assert sum_Square(5) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0 \n    for i in range(len(str)): \n        if str[i] == x: \n            count+=1\n    return count \n\n#Test the function \nstring=input(\"Enter a string:\") \nchar=input(\"Enter a character to count its occurences:\")\nprint(count_Char(string,char)) ",
        "generated_testcode": "assert count_Char(input(\"Enter a string: \"), input(\"Enter a character: \")) == int(input(\"Enter the expected count: \"))\n\n\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for num in range(2, n+1): \n        prime = True\n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                prime = False\n                break\n        if prime: \n            sum += num\n    return sum\n\n#test the function\nprint(sum_Of_Primes(10))\nprint(sum_Of_Primes(20))\nprint(sum_Of_Primes(30)) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17 # Sum of primes between 1 to 10 is 17 (2+3+5+7)\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_tup:\n        freq_dict[i] = test_tup.count(i)\n    return freq_dict\n\n\n# test the function with a sample input\ntest_tup = (1,2,3,4,5,6,2,3,4,7,8,9,1,1,2,4,5,6,7,8,9,1,1,1,2,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,1,1,2,3,4,5,6,7,8,9,1,1,2,3,4,5,6,7,8,9)\nprint(freq_element(test_tup))\n\n# Output: {1: 5, 2: 5, 3: 5, 4: 5, 5: 5, 6: 5, 7: 5, 8: 5, 9: 5} ",
        "generated_testcode": "assert freq_element(('hello world') == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# Test the function with some examples\nprint(recur_gcd(10, 25))  # Output: 5\nprint(recur_gcd(6, 9))   # Output: 3\nprint(recur_gcd(20, 8))  # Output: 4\nprint(recur_gcd(14, 28)) # Output: 14\nprint(recur_gcd(56, 98)) # Output: 14\nprint(recur_gcd(7, 9))   # Output: 1\nprint(recur_gcd(17, 23)) # Output: 1\nprint(recur_gcd(48, 18)) # Output: 6 ",
        "generated_testcode": "assert recur_gcd(12, 8) == 4\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    c = complex(a,b)\n    return abs(c)\n\n#test the function with some examples\nprint(len_complex(3,4))\nprint(len_complex(5,12))\nprint(len_complex(2,0))\nprint(len_complex(0,7)) ",
        "generated_testcode": "assert len_complex(3,4) == 5\n\n# Write a function to calculate the distance between two points in the Cartesian plane.\ndef distance(x1,y1,x2,y2):\n    pass\n\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n <= 1 or arr[0] == 0:\n        return n\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        jumps[i] = min(jumps[j] + 1 for j in range(i) if i <= j + arr[j] < n)\n    return jumps[-1] if jumps[-1] != float('inf') else -1\n \n# test the function\narr = [1, 3, 5, 8, 9, 2, 6, 2, 6, 8, 9]\nn = len(arr)\nprint(min_jumps(arr, n)) # Output: 3 ",
        "generated_testcode": "assert min_jumps(arr=[2, 3, 1, 1, 1, 4], n=4) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(nums)-1):\n        res.append(nums[i]*nums[i+1])\n    return res\n\n# Test the function with an example list\nprint(mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8])) #[2, 6, 12, 15, 21, 28]\nprint(mul_consecutive_nums([2, 4, 6, 8, 9, 10, 12])) #[8, 24, 72, 60, 80]\n\n\n# Time Complexity: O(n) \n# Space Complexity: O(n) ",
        "generated_testcode": "assert mul_consecutive_nums(list(range(1, 6)) == [1*2, 2*3, 3*4, 4*5]\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = {}\n    for key, val in test_list:\n        if val in result:\n            result[val].append(key)\n        else:\n            result[val] = [key]\n    return result\n\n# Test the function with an example\ntest_list = [('apple', 'B'), ('banana', 'C'), ('orange', 'A'), ('pear', 'B'), ('kiwi', 'A'), ('grape', 'C'), ('mango', 'B')]\nprint(group_element(test_list)) ",
        "generated_testcode": "assert group_element([(1, 2), (2, 3), (3, 2), (4, 3), (5, 1), (6, 2)] == {1: [5], 2: [1, 6], 3: [2, 3]} ",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if N < 0: \n        return \"Invalid Input\"\n    else:\n        if N == 0:\n            return 1\n        else:\n            last_Two_Digits = 1\n            for i in range(1, N + 1):\n                last_Two_Digits = (last_Two_Digits * i) % 100\n                if last_Two_Digits % 100 == 0:\n                    last_Two_Digits = (last_Two_Digits // 100) * 100\n            return last_Two_Digits\n        \n# Example usage:\nN = 5\nprint(last_Two_Digits(N)) # Output: 120\n\nN = 25\nprint(last_Two_Digits(N)) # Output: 20\nN = 100\nprint(last_Two_Digits(N)) # Output: 40\nN = 200\nprint(last_Two_Digits(N)) # Output: 24\nN = -5\nprint(last_Two_Digits(N)) # Output: Invalid Input ",
        "generated_testcode": "assert last_Two_Digits(5) == 120\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    text = re.sub(' +', ' ', text1)\n    return text\n\n# Test function\ntext = \"Python    is    fun\"\nprint(remove_multiple_spaces(text)) # Output: Python is fun\n\n\ntext = \"   Coding   is   fun   \"\nprint(remove_multiple_spaces(text)) # Output: Coding is fun ",
        "generated_testcode": "assert remove_multiple_spaces(text1) == \"This is a string with    multiple spaces.\"\n\n\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_values = []\n    for value in test_dict.values():\n        if value not in unique_values:\n            unique_values.append(value)\n    return unique_values\n\n# test the function with a dictionary\ntest_dict = {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3, \"e\": 2, \"f\": 4, \"g\": 1, \"h\": 3, \"i\": 4}\nprint(extract_unique(test_dict)) ",
        "generated_testcode": "assert extract_unique(\n    {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3, \"e\": 2, \"f\": 4, \"g\": 1, \"h\": 3, \"i\": 5}\n) == {1, 2, 3, 4, 5}\n\n# The output should be {1, 2, 3, 4, 5} ",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return None\n\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            result = False\n            break\n    return result\n\n# Test cases\nprint(check_greater((1, 2, 3, 4, 5), (0, 1, 2, 2)) == True)\nprint(check_greater((1, 2, 3, 4, 5), (0, 1, 2, 6) == False)\nprint(check_greater((1, 2, 3), (0, 1, 2, 2) == None) ",
        "generated_testcode": "assert check_greater(('abc', (1, 2, 3, 4, 5)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    zipped_list = zip(list1,list2) #zipping the two lists\n    return list(zipped_list) #converting the zipped object to a list and returning it\n\n#Example:\n#list1 = [[1,2,3],[4,5,6],[7,8,9]]\n#list2 = [['a','b','c']]\n#print(zip_list(list1,list2)) #output: [(1, 'a'), (2, 'b'), (3, 'c')]\n#here, the function takes two lists as input arguments, zips them using the zip() function and returns the zipped list. ",
        "generated_testcode": "assert zip_list([\"a\", \"b\", \"c\"], [1, 2, 3]) == [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n\n\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x % 2 == 0, array_nums))\n\n\n# Test the function with an example\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_even(numbers))  # Output: 5 ",
        "generated_testcode": "assert count_even([]), 0\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    sorted_dict = sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n    return sorted_dict\n\n# Example usage:\ntest_dict = {(3, 2): 1, (1, 4): 2, (4, 5): 3, (1, 1): 4}\nsorted_dict = sort_dict_item(test_dict)\nprint(sorted_dict) # Output: [((1, 1), 4), (1, 4), (3, 2), (4, 5)]\n\n\n# Example 2:\ntest_dict2 = {(1, 2): 5, (3, 4): 6, (4, 5): 9, (2, 3): 7}\nsorted_dict2 = sort_dict_item(test_dict2)\nprint(sorted_dict2) # Output: [(1, 2), (2, 3), (3, 4), (4, 5)] ",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            count+=1\n    return count//2\n\n#driver code\nif __name__ == \"__main__\":\n    str1 = \"10101\"\n    str2 = \"01101\"\n    print(min_Swaps(str1,str2))\n",
        "generated_testcode": "assert min_Swaps(10101,00011) == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in li:\n        if i >= min and i <= max:\n            count += 1\n    return count\n\n# test the function\nli = [1, 3, 5, 7, 9, 12, 15, 18, 21, 24, 27]\nprint(count_range_in_list(li, 10, 20))  # Output: 2\nprint(count_range_in_list(li, 15, 30))  # Output: 2\nprint(count_range_in_list(li, 1, 25))  # Output: 4 ",
        "generated_testcode": "assert count_range_in_list(range(10), 3, 7) == 5\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    left_sum = [0] * n\n    right_sum = [0] * n\n    for i in range(1, n):\n        left_sum[i] = left_sum[i - 1] + arr[i - 1]\n    for i in range(n - 2, -1, -1):\n        right_sum[i] = right_sum[i + 1] + arr[i + 1]\n    for i in range(n):\n        if left_sum[i] == right_sum[i]:\n            return i\n    return -1\n\n# Test the function with sample inputs\narr = [-7, 1, 5, 2, -4, 3, 0]\nprint(equilibrium_index(arr))  # Output: 3\n\narr = [-10, 2, 5, 3, 3, -1, 6, -6, 7, 2]\nprint(equilibrium_index(arr))  # Output: 2\narr = [1, 2, 3, 4, 5]\nprint(equilibrium_index(arr))  # Output: -1 ",
        "generated_testcode": "assert equilibrium_index(arr=[-1, 2, 3, -4, 5, 6, 7, -8, 9]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "            arr):\n    if i == n:\n        return -1\n    for j in range(i, n):\n        if arr[j] != key:\n            return j\n    return -1\n\ndef min_elements_to_remove(arr, n, k):\n    if n == 1:\n        return 0\n\n    if k >= max(arr) - min(arr):\n        return 0\n\n    arr.sort()\n    count = 0\n    i = 0\n    while i < n and k >= arr[i + 1] - arr[0]:\n        key = arr[i]\n        j = find_ind(key, i + 1, n)\n        if j == -1:\n            return count\n        count += 1\n        i = j\n    return count + n - i - 1\n\n# Example usage:\narr = [4, 1, 5, 6, 2, 4, 7, 7, 2, 4]\nn = len(arr)\nk = 3\nprint(min_elements_to_remove(arr, n, k)) # Output: 2\n\n\n# Time Complexity: O(NlogN)\n# Auxiliary Space: O(N) ",
        "generated_testcode": "assert find_ind(5, [1, 3, 7, 9, 11, 15, 21], 6) == 1\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n    \n#Testing the function with a dictionary and a key\nd = {1:'apple', 2:'banana', 3:'orange', 4:'mango'}\nprint(is_key_present(d,3)) #True\nprint(is_key_present(d,5)) #False ",
        "generated_testcode": "assert is_key_present(d, 'apple') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Calculate the harmonic sum of n-1\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\n# Test the function with n=6\nprint(harmonic_sum(6)) # Output: 2.450138888888888888888\n\n\n# Write a function to calculate the factorial of n recursively\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of n recursively\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function with n=5\nprint(factorial(5)) # Output: 120\n\n# Write a function to calculate the factorial of n iteratively\ndef factorial_iter(n):\n    \"\"\"\n    Calculate the factorial of n iteratively\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n# Test the function with n=5\nprint(factorial_iter(5)) # Output: 120\n\n# Write a function to calculate the sum of squares of first n numbers\ndef sum_of_squares(n):\n    \"\"\"\n    Calculate the sum of squares of first n numbers\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: (len(x), x)\n    return list1\n\n# Test case:\n# Input: [[1, 2, 3], [3, 1, 2, 4, 5], [2, 5, 6, 7], [3, 4]]\n# Output: [[1, 2, 3], [3, 4], [2, 5, 6, 7], [3, 1, 2, 4, 5]]\nprint(sort_sublists([[1, 2, 3], [3, 1, 2, 4, 5], [2, 5, 6, 7], [3, 4]]) # Output: [[1, 2, 3], [3, 4], [2, 5, 6, 7], [3, 1, 2, 4, 5]] ",
        "generated_testcode": "assert sort_sublists([]), []\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a hash set for the second array \n    s = set(arr2) \n    # Traverse through the first array and check if each element is present in set or not \n    for i in range(m): \n        if arr1[i] not in s: \n            return False\n    return True\n# Test the function with example arrays \narr1 = [11, 5, 3, 1, 1, 5] \narr2 = [11, 5, 3, 3, 1, 1, 5, 2] \nm = len(arr1) \nn = len(arr2) \nif is_subset(arr1, m, arr2, n): \n    print(\"arr1 is subset of arr2\") \nelse: \n    print(\"arr1 is not subset of arr2\") ",
        "generated_testcode": "assert is_subset(arr1=[1, 2, 3, 4], m=3, arr2=[1, 2, 4, 3, 5, 6], n=4) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):  \n        count += bin(i).count('1') \n    return count \n\n# Driver code \nn = 10\nprint(count_Set_Bits(n)) # Output: 26\n\n\n# https://www.geeksforgeeks.org/count-total-set-bits-in-a-number-from-1-to-n/ ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    li = list(string.split()) \n    return li\nstring = 'I love Python Programming'\nprint(Convert(string)\n\n\nOutput: ['I', 'love', 'Python', 'Programming'] ",
        "generated_testcode": "assert Convert(\u201chello\u201d) == [\u2018h\u2019, \u2018e\u2019, \u2018l\u2019, \u2018l\u2019, \u2018o\u2019]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dict = {}\n    for i in range(len(test_list)):\n        if test_list[i] not in dict:\n            dict[test_list[i]] = 1\n        else:\n            dict[test_list[i]] += 1\n    return dict\n\ntest_list = (1, 2, 3, 2, 4, 3, 5, 6, 6, 7, 1, 8, 2, 3, 9, 0, 1)\nprint(get_unique(test_list))\n\n\n# Output: {1: 2, 2: 3, 3: 3, 4: 1, 5: 1, 6: 2, 7: 1, 8: 1, 9: 1, 0: 1} ",
        "generated_testcode": "assert get_unique((\"apple\", \"banana\", \"cherry\", \"apple\", \"date\", \"cherry\") == {\"apple\": 2, \"banana\": 1, \"cherry\": 2, \"date\": 1}\n\n\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return test_tup[0],test_tup[-1]\n\n#testing the function with a sample tuple\nmy_tup = (1,2,3,4,5,6,7,8,9)\nprint(front_and_rear(my_tup)) #output: (1, 9) ",
        "generated_testcode": "assert front_and_rear(('apple', 'banana', 'cherry', 'date', 'elderberry') == ('apple', 'elderberry')\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    product_even = 1\n    product_odd = 1\n    even_digit = 0\n    odd_digit = 0\n    n = str(n)\n    for i in range(len(n): \n        if int(n[i]) % 2 == 0: \n            product_even = product_even * int(n[i])\n        else: \n            product_odd = product_odd * int(n[i])\n    if product_even == product_odd: \n        return True\n    else: \n        return False\n\n#Test the function\nprint(product_Equal(12345621)) #True ",
        "generated_testcode": "assert product_Equal(123456) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\nlist1 = [[1,2,3], [4,5,6], [1,2,3], [7,8,9], [1,2,3], [4,5,6]]\nprint(remove_duplicate(list1) # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\", \"kiwi\"] == [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup:\n        if not isinstance(i, (int, float, str, bool):\n            return False\n    return True\n\n# Test the function\ntest_tup = (3, 5.7, \"hello\", True, False, \"world\", 2)\nprint(check_valid(test_tup)) # True\n\n\ntest_tup = (3, 5.7, \"hello\", False, 2, {})\nprint(check_valid(test_tup)) # False ",
        "generated_testcode": "assert check_valid((\"Hello\", 2, 3, 4) == False\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while n % 2 == 0:  \n        count += 1  \n        n >>= 1\n    for i in range(3, int(n**0.5) + 1, 2):  \n        while n % i == 0:  \n            count += 1\n            n = n / i  \n    if n > 2:  \n        count += 1 \n    return count \n\ndef count_Distinct_Power_of_Prime_factors(n):  \n    count = 0\n    for i in range(2, int(n**0.5) + 1):  \n        if count_Fac(i) % 2 == 1 and n % i == 0:  \n            count += 1\n    return count + 1  \n\nn = int(input(\"Enter the number: \")\nprint(\"Number of distinct power of prime factors: \", count_Distinct_Power_of_Prime_factors(n)) ",
        "generated_testcode": "assert count_Fac(12) == 2 # Testing for n=12, output should be 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    tup = tuple(map(int, test_str.split()))\n    return tup\n\n#Test the function with an example string\ntest_str = \"1 2 3 4 5 6 7\"\nprint(str_to_tuple(test_str)) # Output: (1, 2, 3, 4, 5, 6, 7) ",
        "generated_testcode": "assert str_to_tuple(test_str) == (1, 2, 3, 4, 5)\n\n\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    p = 4 * a\n    return p\n\n# Test the function with a value of 5\nprint(rombus_perimeter(5) == 20) # True\n\n\n# Test the function with a value of 10\nprint(rombus_perimeter(10) == 40) # True ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n\n# Write a function to find the area of a rombus.\ndef rombus_area(d):\n    pass\n\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(data)\n    avg = sum(data) / n\n    deviations = [(x - avg) ** 2 for x in data]\n    variance = sum(deviations) / (n - 1)\n    sd = variance ** 0.5\n    return sd\n\n# test the function with some data\ndata = [2, 4, 6, 8, 12, 14, 16]\nprint(sd_calc(data))\n\n\n# output: 4.0824732669272256731 ",
        "generated_testcode": "assert sd_calc(data=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2.0, \"Test 1 failed\"\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list1[::2]\n\n# Test the function with an example list\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(alternate_elements(my_list)) # Output: [1, 3, 5, 7] ",
        "generated_testcode": "assert alternate_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]) == [\"apple\", \"date\", \"fig\"]\n\n\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = \"ab*\"\n    import re\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function\nprint(text_match(\"ab\"))  # True\nprint(text_match(\"a\"))  # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"abbc\")) # False ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a new empty list to store the updated tuple\n    updated_list = []\n    # loop through the tuple and add each element to the list\n    for i in test_tup:\n        updated_list.append(i)\n    # add the dictionary to the list\n    updated_list.append(test_dict)\n    # convert the list back to a tuple and return it\n    return tuple(updated_list)\n\n\n# test the function with sample inputs\ntest_tup = (1, 2, 3, 4)\ntest_dict = {'name': 'John', 'age': 25}\nprint(add_dict_to_tuple(test_tup, test_dict)) ",
        "generated_testcode": "assert add_dict_to_tuple((\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"}) == (\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"})\n\n\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0 for i in range(N)] for j in range(N)] \n    dp[0][0] = cost[0][0] \n  \n    # Filling the first column \n    for i in range(1, N): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n  \n    # Filling the first row \n    for j in range(1, N): \n        dp[0][j] = dp[0][j-1] + cost[0][j] \n  \n    # Filling rest of the dp[][][] \n    for i in range(1, N): \n        for j in range(1, N): \n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1]) \n  \n    return dp[N-1][N-1] / (N)\n  \n# Driver code \nif __name__ == '__main__': \n    cost = [[1, 2, 3], \n           [4, 5, 6], \n           [7, 8, 9]] \n    N = 3\n    print(maxAverageOfPath(cost, N)) ",
        "generated_testcode": "assert maxAverageOfPath(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n) == 12.666666666666666666667\n\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    filtered_data = {}\n    for key,value in students.items():\n        if value[\"height\"] > h and value[\"weight\"] > w:\n            filtered_data[key] = value\n    return filtered_data\n\n# Sample dictionary\nstudents = {\n    \"Alice\": {\"height\": 165, \"weight\": 65},\n    \"Bob\": {\"height\": 174, \"weight\": 74},\n    \"Charlie\": {\"height\": 172, \"weight\": 68},\n    \"David\": {\"height\": 169, \"weight\": 69},\n    \"Eva\": {\"height\": 171, \"weight\": 62}\n}\n\n# Sample values\nh = 170\nw = 65\n\n# Call the function\nresult = filter_data(students,h,w)\nprint(result) # Output: {'Bob': {'height': 174, 'weight': 74}, 'Charlie': {'height': 172, 'weight': 68}, 'David': {'height': 169, 'weight': 69}} ",
        "generated_testcode": "assert filter_data(\n    {\n        \"Alice\": {\"height\": 160, \"weight\": 50},\n        \"Bob\": {\"height\": 170, \"weight\": 60},\n        \"Charlie\": {\"height\": 180, \"weight\": 70},\n        \"David\": {\"height\": 165, \"weight\": 45},\n        \"Eva\": {\"height\": 175, \"weight\": 55}\n    },\n    165,\n    50\n) == {\"Alice\": {\"height\": 160, \"weight\": 50}, \"David\": {\"height\": 165, \"weight\": 45}}\n\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Counts the number of common pairs in two lists of integers.\n    \"\"\"\n    count = 0\n    for num in set(nums1) & set(nums2):\n        count += min(nums1.count(num), nums2.count(num))\n    return count\n\n# Test cases\nprint(count_same_pair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))  # Output: 3\nprint(count_same_pair([1, 2, 3, 4], [2, 3, 4, 5, 6]))  # Output: 2\nprint(count_same_pair([1, 2, 3, 4], [5, 6, 7, 8]))  # Output: 0 ",
        "generated_testcode": "assert count_same_pair([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\", \"apple\"]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(int(digit) ** power for digit in str(base))\n\n# test the function\nprint(power_base_sum(15, 2)) # 16\nprint(power_base_sum(1234, 3)) # 150\nprint(power_base_sum(9876, 4)) # 11463\n\n\n# this function takes a base and a power as input parameters and returns the sum of all digits of the base raised to the power.\n# We convert the base to a string, then iterate through each character in the string and convert it back to an integer and raise it to the power. \n# We use a generator expression to apply the power to each digit, then use the sum function to add up all the values. ",
        "generated_testcode": "assert power_base_sum(2, 10) == 1024\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\\"(.*?)\\\"\"\n    result = re.findall(pattern, text1)\n    return result\n\ntext1 = \"He said, \\\"Hello, how are you?\\\"\"\nprint(extract_quotation(text1) ) # ['Hello, how are you?'] ",
        "generated_testcode": "assert extract_quotation(text1) == \"Hello, World!\"\n\n# Test case 1:\ntext1 = 'He said \"Hello, World!\" to me.'\nprint(extract_quotation(text1)) # Output: \"Hello, World!\"\n\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i]*test_tup[i+1])\n    return tuple(res)\n\ntest_list = (1, 2, 3, 4, 5, 6, 7)\nprint(multiply_elements(test_list))\n\n\n# Output: (2, 6, 12, 20, 35) ",
        "generated_testcode": "assert multiply_elements(()) == ()\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    import re\n    return re.sub('[^A-Za-z0-9]+', '', S)\n\n\n# Test the function with a sample input\nS = \"Hello World! 123\"\nprint(remove_char(S)) # Output: \"HelloWorld123\" ",
        "generated_testcode": "assert remove_char(S) == \"HelloWorld123\"\n\n# Test case 1:\nS = \"Hello World! 123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n\n#test the function\nlst1 = [1,2,3,4,5]\nlst2 = [4,5,6,7,8]\nprint(sum_list(lst1,lst2)) # [5,7,10,11,13] ",
        "generated_testcode": "assert sum_list(lst1=[1,2,3], lst2=[4,5,6]) == [5,7,9]\n\n\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y : x+y,nums1,nums2))\n\nnums1 = [1,2,3,4,5,6,7,8]\nnums2 = [10,20,30,40,50,60,70]\nprint(add_list(nums1,nums2))\n\n\n#Output [11, 22, 3, 4, 5, 6, 7, 8, 10, 20, 30, 40, 50, 60, 70]\n\n\n#Solution:\ndef add_list(nums1,nums2):\n    return list(map(lambda x,y : x+y,nums1,nums2))\nnums1 = [1,2,3,4,5,6,7,8]\nnums2 = [10,20,30,40,50,60,70]\nprint(add_list(nums1,nums2))\n#Output: [11, 22, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert add_list(list(range(1,5), list(range(4,7)) == [1, 5, 7, 9]\n\n\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(nums) == 0:\n        return []\n    res = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] != nums[i - 1]:\n            res.append(nums[i])\n    return res\n\n# Test cases\nprint(consecutive_duplicates([1, 1, 1, 2, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7])) # Output: [1, 2, 3, 4, 5, 6, 7]\nprint(consecutive_duplicates([1, 1, 1, 1, 1, 1])) # Output: [1]\nprint(consecutive_duplicates([])) # Output: []\nprint(consecutive_duplicates([1, 2, 3, 4, 4, 5, 5, 6, 7, 7])) # Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert consecutive_duplicates([\"a\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"e\"]), [\"a\", \"b\", \"c\", \"d\", \"e\"]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pi=22/7\n    slant_height=((r**2+h**2)**0.5)\n    lateral_surface_area= pi*r*slant_height\n    return lateral_surface_area\n\n#testing the function with an example\n#Example:\nr=5\nh=10\nprint(\"The lateral surface area of the cone is:\",lateralsurface_cone(r,h)) ",
        "generated_testcode": "assert lateralsurface_cone(3, 5) == 29.289370185853405394, \"Test 1 failed\"\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n# Test function with some examples\nprint(replace_specialchar(\"Hello, World\")) # Expected output: \"Hello:World\"\nprint(replace_specialchar(\"Hello, World.\")) # Expected output: \"Hello:World:\"\nprint(replace_specialchar(\"Hello World\")) # Expected output: \"Hello:World\"\nprint(replace_specialchar(\"Hello.World\")) # Expected output: \"Hello:World\"\nprint(replace_specialchar(\"Hello World.\")) # Expected output: \"Hello:World:\"\nprint(replace_specialchar(\"Hello, World, how are you?\")) # Expected output: \"Hello:World:how:are:you?\" ",
        "generated_testcode": "assert replace_specialchar(input_string) == expected_output\n\n# Replace the input_string and expected_output with appropriate values to test the function. ",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the index of the first occurrence of x in A, or -1 if not found\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# test the function with an example\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nx = 4\nprint(find_first_occurrence(A, x)) # Output: 2\n\n\n# example of the function being used in a program\ndef binary_search_first(A, x):\n    \"\"\"\n    Returns True if x is present in A, and False otherwise\n    \"\"\"\n    index = find_first_occurrence(A, x)\n    return index != -1\n\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(binary_search_first(A, 4)) # Output: True ",
        "generated_testcode": "assert find_first_occurrence(A=[1, 2, 3, 4, 4, 4, 4, 5, 6, 7], x=4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    res=0\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n        res += prod\n    return res\n\n# Driver code\narr = [2, 3, -1, 4, -2, -1]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr, n))\n\n\n# Output: 30 ",
        "generated_testcode": "assert sum_Of_Subarray_Prod(arr=[1, 2, 3, 4, 5], n=4) == 1180\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Toggle all bits except the first and last bits.\n    \"\"\"\n    return (n & 3) ^ (n >> 1) ",
        "generated_testcode": "assert set_middle_bits(0b101010101010) == 0b10000100010\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n\n\n# Test\na = [1, 3, 5, 7, 9, 11, 13, 15]\nx = 9\nprint(left_insertion(a, x)) # Output: 3 ",
        "generated_testcode": "assert left_insertion([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], \"cherry\") == 2\n\n\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    # using regex to check whether the first character is a vowel\n    # if yes, then return True, else return False\n    pattern = r'^[aeiouAEIOU]'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n# Test the function with a few examples\nprint(check_str('apple')) # True\nprint(check_str('banana')) # False\nprint(check_str('Ice cream')) # True\nprint(check_str('Umbrella')) # True\nprint(check_str('Hello World')) # False ",
        "generated_testcode": "assert check_str(string=\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the sum of the first n-1 terms of the geometric series.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n\n# Test the function\nprint(geometric_sum(4)) # Should print 1.94166\nprint(geometric_sum(5)) # Should print 2.08333 ",
        "generated_testcode": "assert geometric_sum(1) == 1\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    i = 1\n    while True:\n        sum += i\n        count += 1\n        if len(str(sum)) == n:\n            return count\n        i += 1\n\n#test the function\nprint(find_Index(3)) #output: 8\nprint(find_Index(5)) #output: 105 ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 <= len(test_tup) - 1:\n            test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n\n# Example usage:\ntest_tup = ('apple', 1, 'banana', 2, 'cherry', 3)\nprint(tuple_to_dict(test_tup)) # Output: {'apple': 1, 'banana': 2, 'cherry': 3} ",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"red\", \"banana\", \"yellow\", \"cherry\", \"red\") == {\"apple\": \"red\", \"banana\": \"yellow\", \"cherry\": \"red\"}\n\n\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return len(set(s)) == 1\n\n# Test the function with some examples\nprint(all_Characters_Same('aaaaa')) # True\nprint(all_Characters_Same('abcaa')) # False\nprint(all_Characters_Same('abcd')) # False\nprint(all_Characters_Same('abababababab')) # True\nprint(all_Characters_Same('abcabcabc')) # False ",
        "generated_testcode": "assert all_Characters_Same(s=\"abccba\") == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    area = (3 ** 0.5) / 4 * (side ** 2)\n    return area\n\n# Test the function with a side length of 5\nprint(area_tetrahedron(5))\n\n\n# Define a function to calculate the volume of a tetrahedron\ndef volume_tetrahedron(side):\n    volume = (1/6) * (side ** 3)\n    return volume\n\n# Test the function with a side length of 5\nprint(volume_tetrahedron(5))\n\n# Define a function to calculate the surface area of a cube\ndef surface_area_cube(side):\n    surface_area = 6 * (side ** 2)\n    return surface_area\n\n# Test the function with a side length of 5\nprint(surface_area_cube(5))\n\n# Define a function to calculate the volume of a cube\ndef volume_cube(side):\n    volume = side ** 3\n    return volume\n\n# Test the function with a side length of 5\nprint(volume_cube(5)) ",
        "generated_testcode": "assert area_tetrahedron(5) == 10.8253176645825317665\n\n# The testing code should include at least 2 different test cases, one where the input is a positive integer and one where the input is a float. \n# The function should return the area of a regular tetrahedron with the given side length. ",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(list1) == 0:\n        return list1\n    m = m % len(list1)\n    rotated_list = list1[-m:] + list1[:len(list1)-m]\n    return rotated_list\n# Test the function with an example\nlist1 = [1,2,3,4,5,6,7]\nm = 2\nn = 3\nprint(rotate_right(list1, m, n))\n# Output: [5, 6, 7, 1, 2, 3, 4] ",
        "generated_testcode": "assert rotate_right([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],2,1) == [\"f\",\"g\",\"a\",\"b\",\"c\",\"d\",\"e\"]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return not any(test_tup)\n\n# Test the function with an example\nmy_tup = (1, None, 2, \"hello\", None)\nprint(check_none(my_tup)) # True\n\n\nmy_tup = (1, \"hello\", \"world\")\nprint(check_none(my_tup)) # False ",
        "generated_testcode": "assert check_none(()) == True\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\n# Test case\nprint(divisible_by_digits(10, 20))  # Output: [12, 153] ",
        "generated_testcode": "assert divisible_by_digits(10, 20) == []\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    area = (r**2 * a * (360/3.1415926) / 360)\n    return area\n\n#Test the function with r=5 and a=90\nprint(sector_area(5,90)) # Should be 12.566636\n\n\n#Test the function with r=10 and a=45\nprint(sector_area(10,45)) # Should be 28.27431\n\n\n#Test the function with r=2.5 and a=75\nprint(sector_area(2.5,75)) # Should be 29.35414\n\n\n#Test the function with r=9 and a=120\nprint(sector_area(9,120)) # Should be 282.74310\n\n\n#Test the function with r=110 and a=360\nprint(sector_area(10,360)) # Should be 1000.00000 ",
        "generated_testcode": "assert sector_area(5, 45) == 141.3716691669645880567\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "     \n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n      \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n  \n    index = L[m][n][o] \n      \n    common_subsequence = [\"\"] * (index+1) \n    common_subsequence[index] = \"\\0\"\n      \n    i = m \n    j = n \n    k = o \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            common_subsequence[index-1] = X[i-1",
        "generated_testcode": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AFRDXC\" ) == \"ADH\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    # pattern to match capital letters at the start of a word\n    pattern = r'(?<=\\s)([A-Z])'\n    # replace with a space and the matched capital letter\n    result = re.sub(pattern, r' \\1', str1)\n    return result\n\n# test the function\nprint(capital_words_spaces(\"HelloWorld, IAmAString.TestingThisFunction\"))\n# Output: \"Hello World, I Am A String. Testing This Function\" ",
        "generated_testcode": "assert capital_words_spaces(str1) == \"Hello World\"\n\n# Test case 1:\nstr1 = \"HelloWorld\"\nprint(capital_words_spaces(str1)) # Output: \"Hello World\"\n\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # convert each string to integer\n    nums = [int(num_str) for num_str in nums_str]\n    # sort the list of integers\n    nums.sort()\n    # convert the sorted integers back to strings and return the result\n    return [str(num) for num in nums]\n\n\n# Example usage:\nnums_str = ['1', '5', '10', '2', '100', '23', '55', '21']\nprint(sort_numeric_strings(nums_str))  # output: ['1', '2', '5', '10', '21', '23', '55', '100'] ",
        "generated_testcode": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"10\", \"5\", \"6\"]) == [\"1\", \"2\", \"3\", \"5\", \"6\", \"10\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in test_tup:\n        test_list.append(i)\n    return test_list\n\n#Example\n#Input\n#test_list = [1,2,3,4]\n#test_tup = (5,6,7)\n#Output\n#[1, 2, 3, 4, 5, 6, 7]\n#Example\n#Input\n#test_list = [1,2,3,4]\n#test_tup = (5,6)\n#Output\n#[1, 2, 3, 4, 5, 6]\n#Example\n#test_list = []\n#test_tup = (5,7,8,9)\n#Output\n#[5, 7, 8, 9] ",
        "generated_testcode": "assert add_tuple([\"apple\", \"banana\", \"cherry\"], (\"orange\", \"grape\")) == [\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\"]\n\n\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    if i >= n:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[i] > arr[left]:\n        return False\n    if right < n and arr[i] > arr[right]:\n        return False\n    return check_min_heap(arr, left) and check_min_heap(arr, right)\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(check_min_heap(arr, 0))  # Output: True\n\n# Checking if the given array represents min heap\n# The root node is the minimum element of the heap and each node is less than or equal to its children\n# For the above example, the root node (arr[0]) is the minimum and each node is less than its children, hence the output is True.\n\n\n# The time complexity of this algorithm is O(n) where n is the number of nodes in the binary tree. ",
        "generated_testcode": "assert check_min_heap(arr=[4, 10, 3, 15, 12, 11, 13, 7, 17], i=0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n==0 or n==1:\n        return n\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n\n\n#test the function\nprint(jacobsthal_num(0)) #0\nprint(jacobsthal_num(1)) #1\nprint(jacobsthal_num(2)) #1\nprint(jacobsthal_num(3)) #2\nprint(jacobsthal_num(4)) #3\nprint(jacobsthal_num(5)) #5\nprint(jacobsthal_num(6)) #8\nprint(jacobsthal_num(7)) #13\nprint(jacobsthal_num(8)) #21\nprint(jacobsthal_num(9)) #34\nprint(jacobsthal_num(10)) #55\nprint(jacobsthal_num(11)) #89\n\n\n#using memoization to optimize the function\ndef jacobsthal_num(n, memo={}): \n    if n==0 or n==1:\n        return n\n    if n not in memo:\n        memo[n] = 2*jacobsthal_num(n-1, memo) + jacobsthal_num(n-2, memo)\n    return memo[n]\n\n#",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function finds the minimum k records from a tuple list.\n    :param test_list: list of tuples\n    :param K: integer value of k\n    :return: returns the k minimum records from the tuple list\n    \"\"\"\n    return sorted(test_list, key=lambda x: x[1])[:K]\n\n\n# Testing the function\ntest_list = [(1, 2), (3, 4), (5, 1), (6, 5), (7, 3), (8, 8), (9, 0)]\nK = 3\nprint(min_k(test_list, K))  # Output: [(9, 0), (7, 3), (1, 2)] ",
        "generated_testcode": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16)], 3) == [(1, 2), (3, 4), (5, 6)]\n\n# Test case 1: Test for normal input\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    common_set = l1_set & l2_set & l3_set\n    return list(common_set)\n\n\ndef find_common_index(l1, l2, l3):\n    common_list = extract_index_list(l1, l2, l3)\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in common_list:\n            index_list.append(i)\n    return index_list\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nl2 = [2, 3, 4, 5, 6, 7, 8, 9]\nl3 = [3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(find_common_index(l1, l2, l3) # Output: [2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert extract_index_list([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"], [\"banana\", \"orange\", \"strawberry\", \"kiwi\", \"mango\"], [\"orange\", \"kiwi\", \"grapes\", \"blueberry\"]) == [1, 3]\n# Test case 1: The common elements in all three lists are \"orange\" and \"kiwi\". Their indices are 1 and 3, respectively. ",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(numbers) < 2:\n        return None\n    first_smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif num < second_smallest and num != first_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None ",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = \"ab?\"\n    import re\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(text_match_zero_one(\"a\"))  # Should be True\nprint(text_match_zero_one(\"ab\"))  # Should be True\nprint(text_match_zero_one(\"abb\"))  # Should be False\nprint(text_match_zero_one(\"abbb\"))  # Should be False\nprint(text_match_zero_one(\"abab\"))  # Should be True\nprint(text_match_zero_one(\"ababc\"))  # Should be False\nprint(text_match_zero_one(\"abc\"))  # Should be False ",
        "generated_testcode": "assert text_match_zero_one(\"ab\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n# Test the function with a sample list\ntest_list = ['abc', 'cba', 'xyz', 'aba', 'bac', 'bca', 'xyz']\nprint(count_reverse_pairs(test_list))  # Output: 2\n",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"xyz\", \"aba\", \"xyz\", \"aba\"]) == 2\n\n\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list as input and returns the count of unique sublists in it.\n    \"\"\"\n    unique_list = []\n    for sublist in list1:\n        if sublist not in unique_list:\n            unique_list.append(sublist)\n    return len(unique_list)\n\n# test the function\nlist1 = [[1,2,3],[1,2,3],[4,5,6],[1,2,3],[7,8,9],[7,8,9],[4,5,6]]\nprint(unique_sublists(list1)) # Output: 2\n\n\n# Another way to solve the same problem using sets\ndef unique_sublists_set(list1):\n    \"\"\"\n    This function takes a list as input and returns the count of unique sublists in it.\n    \"\"\"\n    unique_list = set(tuple(sublist) for sublist in list1)\n    return len(unique_list)\n# test the function\nlist1 = [[1,2,3],[1,2,3],[4,5,6],[1,2,3],[7,8,9],[7,8,9],[4,5,6]]\nprint(unique_sublists_set(list1)) # Output: 2 ",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if type(num) != float:\n        return False\n    if round(num, 2) == num:\n        return True\n    else:\n        return False\n\ndef check_decimal(nums):\n    for num in nums:\n        if is_decimal(num):\n            print(num, \"is a decimal with a precision of 2.\")\n        else:\n            print(num, \"is not a decimal with a precision of 2.\")\n\n# Example usage:\ncheck_decimal([3.14, 3.142, 3.1421, 3.1, 15.00])\n# Output: \n# 3.14 is not a decimal with a precision of 2.\n# 3.14 is a decimal with a precision of 2.\n# 3.142 is not a decimal with a precision of 2.\n# 3.1 is a decimal with a precision of 2.\n# 15.0 is a decimal with a precision of 2. ",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arr) == 1:\n        return True\n    else:\n        for i in range(1,n):\n            if arr[i] != arr[0]:\n                return False\n    return True\n\n#example\narr = [1,1,1,1,1,1,1]\nn = len(arr)\nif(unique_Element(arr,n)):\n    print(\"Array contains only one distinct element\")\nelse:\n    print(\"Array does not contain only one distinct element\") ",
        "generated_testcode": "assert unique_Element(arr=[1,2,3,4,5],n=4) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    r=d/2\n    theta=radians(a)\n    arc_length=theta*r\n    return arc_length\n\n#test the function\nprint(arc_length(5, 30)\nprint(arc_length(10, 45)\nprint(arc_length(12, 60) ",
        "generated_testcode": "assert arc_length(10, 30) == 50\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return True\n#test the function\nprint(check_monthnumber_number(2))#True\nprint(check_monthnumber_number(3))#True\nprint(check_monthnumber_number(4))#False\nprint(check_monthnumber_number(11))#False\nprint(check_monthnumber_number(12))#True ",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort() \n    min_diff = 10**20 \n    for i in range(1, n): \n        if arr[i] - arr[i-1] < min_diff: \n            min_diff = arr[i] - arr[i-1] \n    return min_diff \nn = int(input(\"Enter the size of array: \"))\narr = []\nprint(\"Enter array elements: \")\nfor i in range(n):\n    arr.append(int(input())\n    min_diff = find_Min_Diff(arr, n) \n    print(\"Minimum difference between any two elements in given array is:\", min_diff) ",
        "generated_testcode": "assert find_Min_Diff(arr,n) == 3\n# Testcase 1: arr = [1, 5, 3, 19, 18, 25, 6], n = 5\n# Output: 3 (The minimum difference is between 5 and 8) ",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for ch in str:\n        if ch.isdigit():\n            count += 1\n    return count\n\n#test the function\nprint(number_ctr(\"Hello, I am 22 years old\")) # 2\nprint(number_ctr(\"My phone number is 987654321256\")) # 9\nprint(number_ctr(\"1,234,567,890 is a big number\")) # 7\nprint(number_ctr(\"There are 3 numbers in this function\")) # 1 ",
        "generated_testcode": "assert number_ctr(\u201cHello 123, World 456\u201d) == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    temp = n*(n+1)/2\n    sum = 0\n    for i in range(1,n): \n        if temp%i == 0: \n            sum += i \n        if sum == 2*n: \n            return True\n    return False\n\ndef nth_polite_number(n):\n    count = 1\n    while True:\n        if is_polite(count):\n            if n == 1:\n                return count\n            else:\n                n -= 1\n        count += 1\n\nprint(nth_polite_number(10)) # 28 ",
        "generated_testcode": "assert is_polite(12) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    \"\"\"\n    Returns a list of tuples containing pairs of consecutive elements in the input list l1\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]));\n    return result\n\n# test the function\nprint(pair_wise([1, 2, 3, 4, 5, 6, 7])) # [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]\n\n\n\n# Alternatively, we can use a list comprehension to achieve the same result\ndef pair_wise(l1):\n    \"\"\"\n    Returns a list of tuples containing pairs of consecutive elements in the input list l1\n    \"\"\"\n    return [(l1[i], l1[i+1]) for i in range(len(l1) - 1)]\n\n# test the function\nprint(pair_wise([1, 2, 3, 4, 5, 6, 7])) # [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)] ",
        "generated_testcode": "assert pair_wise([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [(\"apple\", \"banana\"), (\"banana\", \"cherry\"), (\"cherry\", \"date\"), (\"date\", \"elderberry\")]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n\narr = list(map(int,input().split())\nn = len(arr)\nsum = int(input(\"Enter the sum: \")\nprint(\"Pairs Count: \",get_Pairs_Count(arr,n,sum)) ",
        "generated_testcode": "assert get_Pairs_Count(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6, sum=10) == 2 # Returns 2 because (2, 8) and (3, 7) are the pairs whose sum is 10. ",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    set_bit_count = 0 \n    while (x): \n        set_bit_count += x & 1 \n        x >>= 1\n    return set_bit_count % 2 == 1\n  \n# Example usage: \nx = 10\nif(check_Odd_Parity(x)): \n    print(x,\"has odd parity\") \nelse: \n    print(x,\"has even parity\") ",
        "generated_testcode": "assert check_Odd_Parity(10) == False\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    li_dif=[]\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    return li_dif\n\nli1=list(map(int,input().split())\nli2=list(map(int,input().split())\nprint(Diff(li1,li2))\n\n#Sample Input:\n#[1,2,3,4,5,6,7]\n#[3,4,5,8]\n#Output:[1,2,6,7] ",
        "generated_testcode": "assert Diff([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\", \"kiwi\"]) == [\"apple\", \"cherry\", \"kiwi\"]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    count = 0\n    while count < n : \n        sum = sum + (2 * i + 1) ** 4 \n        count += 1\n        i += 1\n    return sum \n  \n# Taking input from user \nn = int(input(\"Enter the value of n : \")) \n  \n# Calling the function and printing the sum of fourth power of first n odd numbers \nprint(\"The sum of the fourth power of first\", n, \"odd numbers is : \", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(3) == 35 \n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    brackets = {')':'(', ']':'[', '}':'{'}\n    for i in exp:\n        if i in brackets.values():\n            stack.append(i)\n        elif i in brackets.keys():\n            if not stack or brackets[i] != stack.pop():\n                return False\n    return len(stack) == 0\n    \n#test the function with some examples\nprint(check_expression('(a+(b*c)')) # False\nprint(check_expression('(a+b)+c*d')) # True\nprint(check_expression('(a*b-c/d)')) # True\nprint(check_expression('{a*(b+(c-d)')) # False\nprint(check_expression('(a*b+c)/d*[e*(f-g+h)')) # False\nprint(check_expression('[a*b+c*(d-e)+g]')) # True\nprint(check_expression('[a*b+c*(d-e)+g]/(f-h)')) # True\nprint(check_expression('[a*b+c*(d-e)+g]{f-h}')) # False ",
        "generated_testcode": "assert check_expression([\"(\", \"2\", \"+\", \"3\", \")\"]), \"Expression is balanced\"\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = \"\"\n    for word in words:\n        if len(word) != K:\n            result += word + \" \"\n    return result\n\nprint(remove_length(\"Hello World ProgrammingLanguagePython\", 5)) # \"Hello Programming Python\" ",
        "generated_testcode": "assert remove_length(test_str=\"Hello World\", K=2) == \"Hello\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    position = []\n    i = 0\n    while i < len(text):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n            position.append(i+1)\n            i += len(pattern)\n        else:\n            i += 1\n    return count,position\n\n\n# test the function\ntext = \"ABCDCDABCDABCD\"\npattern = \"ABCD\"\nprint(occurance_substring(text,pattern))  # Output: (2, [1, 5]) ",
        "generated_testcode": "assert occurance_substring(text=\"hello world\", pattern=\"llo\") == {\"count\": 1, \"positions\": [2]}\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    \n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.match(pattern, email): \n        return True\n    else: \n        return False\n    \n# testing the function with some examples\nprint(check_email('user@example.com')) # True\nprint(check_email('user.name@example.com')) # True\nprint(check_email('user_name@example.com')) # True\nprint(check_email('user.name@example.co.in')) # True\nprint(check_email('user.name@example.com.np')) # True\nprint(check_email('user.name@.com')) # False\nprint(check_email('example.com')) # False\nprint(check_email('user..name@example.com')) # False\nprint(check_email('user.@example.com')) # False\nprint(check_email('user_name@example..com')) # False\nprint(check_email('user@example.com.')) # False \nprint(check_email('user_name@example.com@extra.com')) # False ",
        "generated_testcode": "assert check_email(email='example@example.com') == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n#test the function\nprint(odd_position([1, 2, 3, 4, 6, 5, 8, 9])) # True\nprint(odd_position([1, 2, 4, 3, 6, 5, 8, 9])) # False ",
        "generated_testcode": "assert odd_position(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count\n\n# test the function with some examples\nprint(count_vowels(\"abstemious\")) # 1\nprint(count_vowels(\"facetiously\")) # 2\nprint(count_vowels(\"bootcamp\")) # 0\nprint(count_vowels(\"aioueou123\")) # 2 ",
        "generated_testcode": "assert count_vowels(test_str=\"hello\") == 2\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort() \n    res = 0\n    i = 0\n    while (i < n): \n        if (i + 1 < n and arr[i] != arr[i + 1]): \n            res += arr[i] \n            i += 2\n        else: \n            i += 1\n    return res \n#driver code \narr = [4,2,7,2,5,9,9,6,7,4,3,8,5] \nn = len(arr) \nprint(find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum(arr=[1,2,3,4,5,6,7,8,9,10],n=7) == 55\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    i = 0\n    while i < len(list1):\n        j = i + 1\n        while j < len(list1) and list1[i] == list1[j]:\n            j += 1\n        result.append(list1[i:j])\n        i = j\n    return result\n\n# example usage:\nprint(pack_consecutive_duplicates([1, 1, 1, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7])) # output: [[1, 1], [2], [3], [4, 4, 4], [5], [6, 6, 6], [7, 7, 7]]\n\n\n# Write a function to pack consecutive duplicates of a given list elements into sublists but also considering non-consecutive duplicates\ndef pack_duplicates(list1):\n    result = []\n    i = 0\n    while i < len(list1):\n        j = i + 1\n        while j < len(list1) and list1[i] == list1[j]:\n            j += 1\n        result.append(list1[i:j])\n        i = j\n        while j < len(list1) and list1[i] != list1[j]:\n            i += 1\n            j = i + 1\n    return result\n\n# example usage:",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == [[\"a\", \"a\"], [\"b\", \"b\", \"b\"], [\"c\", \"c\", \"c\"]]\n",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list as an input and returns the number of unique sublists within the list.\n    A sublist is considered unique if it has unique elements and the sequence of the elements matters.\n    For example, given the input [1, 2, 2, 3, 2, 1] the unique sublists are [1, 2], [2], [3], [2, 1], [1, 2, 2], [2, 2, 1], and [1, 2, 3].\n    \"\"\"\n    # Create an empty list to store the unique sublists\n    unique_sublists = []\n    # Loop through the list and create all possible sublists\n    for i in range(len(list1)):\n        for j in range(i, len(list1)+1):\n            # Add the sublist to the unique_sublists list if it is not already in the list\n            if list1[i:j] not in unique_sublists:\n                unique_sublists.append(list1[i:j])\n    # Return the length of the unique_sublists list\n    return len(unique_sublists)\n\n\n# Test the function with an example list\nprint(unique_sublists([1, 2, 2, 3, 2, 1])) ",
        "generated_testcode": "assert unique_sublists([\"apple\", \"banana\", \"cherry\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(1, len(test_list)+1):\n        for j in range(len(test_list) - i + 1):\n            result.append(sum(test_list[j:j+i])\n    return result\n\n# test the function with a sample tuple\ntest_list = (1, 2, 3, 4, 5)\ncombinations = find_combinations(test_list)\nprint(combinations) # should print [6, 5, 9, 3, 7, 4, 2, 9, 6, 3, 12, 10, 12, 14, 9, 5] ",
        "generated_testcode": "assert find_combinations(()) == set()\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    cnt = 0 \n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            cnt += 1\n    return cnt \n  \n# Taking input from user \nnum = int(input(\"Enter a number: \")) \n  \n# Calling the function count_Divisors \nresult = count_Divisors(num) \n  \n# Displaying the output \nif result % 2 == 0: \n    print(\"The count of divisors of\", num, \"is even\") \nelse: \n    print(\"The count of divisors of\", num, \"is odd\") ",
        "generated_testcode": "assert count_Divisors(12) == 0\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2 != 0:\n                for k in range(i, j+1):\n                    sum += arr[k]\n    return sum\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(\"Original Array:\", arr)\nprint(\"Sum of all odd length subarrays:\", Odd_Length_Sum(arr)) ",
        "generated_testcode": "assert Odd_Length_Sum(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 105 ",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    r = float(r)\n    g = float(g)\n    b = float(b)\n    high = max(r, g, b)\n    low = min(r, g, b)\n    h, s, v = high, high, high\n\n    d = high - low\n    if high == low:\n        h = 0.0\n    elif high == r:\n        h = (g - b) / d + (6 if g < b else 0)\n    elif high == g:\n        h = (b - r) / d + 2\n    else:\n        h = (r - g) / d + 4\n\n    h = h / 6\n    if high == 0:\n        s = 0.0\n    else:\n        s = d / high\n    return int(h*360), s, v\n\n# Test the function with example values\nprint(rgb_to_hsv(128, 2555, 212)) # Should print (62, 1.0, 1.0) ",
        "generated_testcode": "assert rgb_to_hsv(1, 1, 1) == (0, 0, 1)\n\n# Test case 1: Test the case when all the values are equal. Expected output: h=0, s=0, v=1\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return (even_product, odd_product)\n\n\n#Test the function with an example list\nlist1 = [2, 3, 4, 6, 8, 10, 12, 15, 17, 20]\nprint(mul_even_odd(list1))  # Output: (3840, 405) ",
        "generated_testcode": "assert mul_even_odd(list1) == (2*4*6*8) # Testing for even numbers\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    try:\n        test_str = test_str.replace('(', '')\n        test_str = test_str.replace(')', '')\n        test_str = test_str.replace(' ', '')\n        test_list = test_str.split(',')\n        test_list = [int(i) for i in test_list]\n        return tuple(test_list)\n    except ValueError:\n        return None\n\nprint(tuple_str_int(\"(1, 2, 3, 4, 5)\" )==(1, 2, 3, 4, 5)) # True\nprint(tuple_str_int(\"(1, 2, 3, 4, 5, )\")==(1, 2, 3, 4, 5)) # True\nprint(tuple_str_int(\"(1, 2, 3, 4, 5, 6\")==(1, 2, 3, 4, 5, 6)) # False\nprint(tuple_str_int(\"(1, 2, 3, 4, '5')\")==None) # True\nprint(tuple_str_int(\"(1, 2, 3, 4, '5')\")==None) # True ",
        "generated_testcode": "assert tuple_str_int((\"(1, 2, 3)\") == (1, 2, 3)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the index where x should be inserted into a to maintain sorted order.\n    a: list\n    x: element to be inserted\n    \"\"\"\n    if not a:\n        return 0\n    i = 0\n    while i < len(a) and a[i] <= x:\n        i += 1\n    return i\n\n# Example usage:\na = [1, 3, 5, 7, 9]\nx = 4\nprint(right_insertion(a, x)) # Output: 1 (between 3 and 5)\n\n\n# Write a function to perform insertion sort.\ndef insertion_sort(a):\n    \"\"\"\n    Sorts the list a in non-descending order using insertion sort algorithm.\n    a: list\n    \"\"\"\n    for i in range(1, len(a)):\n        x = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = x\n\n# Example usage:\na = [64, 34, 25, 12, 22, 11, 223, 67, 8, 90, 13]\ninsertion_sort(a)\nprint(a) # Output: [1, 11, 12, 13, 22, 223",
        "generated_testcode": "assert right_insertion([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], \"grape\") == 3\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = 'a'\n    i = 0\n    while i < len(text) - 2:\n        if text[i] == 'a' and text[i+1] == 'b' and text[i+2] == 'b' and text[i+3] == 'b':\n            return True\n        i += 1\n    return False\n\n# Test cases\nprint(text_match_three('abbb')) # True\nprint(text_match_three('ab')) # False\nprint(text_match_three('abb')) # False\nprint(text_match_three('abbabbb')) # True\nprint(text_match_three('ababbb')) # False\nprint(text_match_three('aabb')) # False ",
        "generated_testcode": "assert text_match_three([\"abbb\", \"abb\", \"abbbb\", \"abbbbb\", \"abbbbbb\", \"abbbbbbb\"] == [\"abbb\", \"abbbb\", \"abbbbb\"]\n\n\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    tpl = tuple(test_list)\n    return tpl + (test_str,)\n\n\n# Test the function with sample inputs\ntest_list = [1, 2, 3, 4]\ntest_str = \"hello\"\nprint(new_tuple(test_list, test_str)) # Output: (1, 2, 3, 4, 'hello') ",
        "generated_testcode": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"fruit\") == (\"fruit\", \"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Calculates the perimeter of a regular polygon\n    :param s: length of one side of the polygon\n    :param l: number of sides of the polygon\n    :return: perimeter of the polygon\n    \"\"\"\n    return s * l\n\n#Write a function to calculate the area of a triangle given the base and height\ndef area_triangle(b,h):\n    \"\"\"\n    Calculates the area of a triangle\n    :param b: base of the triangle\n    :param h: height of the triangle\n    :return: area of the triangle\n    \"\"\"\n    return 0.5 * b * h\n\n#Write a function to calculate the area of a square given the length of one side\ndef area_square(a):\n    \"\"\"\n    Calculates the area of a square\n    :param a: length of one side of the square\n    :return: area of the square\n    \"\"\"\n    return a ** 2\n\n#Write a function to calculate the area of a rectangle given the length and width\ndef area_rectangle(l,w):\n    \"\"\"\n    Calculates the area of a rectangle\n    :param l: length of the rectangle\n    :param w: width of the rectangle\n    :return: area of the rectangle\n    \"\"\"\n    return l * w\n\n#Write a function to calculate the volume of a sphere given its radius\ndef volume_sphere(r):\n    \"\"\"\n    Calculates the volume of a sphere\n    :param r: radius of the sphere\n    :return: volume of the sphere\n    \"\"\"\n",
        "generated_testcode": "assert perimeter_polygon(5, 3) == 15\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1,len(nums),2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n# Example:\n# >> even_position([2, 3, 4, 6, 8, 10, 11, 12])\n# False\n# >> even_position([2, 4, 6, 8, 10])\n# True ",
        "generated_testcode": "assert even_position([]), \"Empty list\"\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result.extend(i)\n        else:\n            result.append(i)\n    return tuple(result)\n\ntest_tup = (1, 2, 3, (4, 5, 6), 7, (8, 9, (10, 11, 12), 13))\nprint(remove_nested(test_tup)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) ",
        "generated_testcode": "assert remove_nested(('test', (1, 2, 3, ('hello', 'world', (4, 5, 6), 'goodbye')) == (1, 2, 3, 'hello', 'world', 4, 5, 6, 'goodbye')\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n            count += count_list(element)\n    return count\n\n# Test the function with sample inputs\nlists = [1, [2, 3, [4, 5, [6, 7], 8], 9] , [10, [11, 12]]]\nprint(count_list(lists)) # Output: 3 ",
        "generated_testcode": "assert count_list([] ) == 0\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n==0:\n        return -1\n    if arr[n-1]==x:\n        return n-1\n    if arr[n-1]>x:\n        return last(arr,x,n-1)\n    return -1\n\n#testing the function\narr=[1,2,3,4,5,5,6,7,8,9,10]\nx=5\nn=len(arr)\nprint(last(arr,x,n)) #4\narr=[1,2,3,4,5,5,6,7,8,9]\nx=5\nn=len(arr)\nprint(last(arr,x,n)) #4\narr=[1,2,3,4,5,5,6,7,8,9]\nx=10\nn=len(arr)\nprint(last(arr,x,n) #-1\narr=[1,2,3,4,5,6,7,8,9]\nx=1\nn=len(arr)\nprint(last(arr,x,n)) #-1 ",
        "generated_testcode": "assert last(arr=[1,2,3,4,5,6,7,8,9],x=6,n=9) == 6\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    start_a = text.startswith('a')\n    end_b = text.endswith('b')\n    if start_a and end_b:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_starta_endb(\"aab\")) # Should return True\nprint(text_starta_endb(\"abb\")) # Should return False\nprint(text_starta_endb(\"a\")) # Should return False\nprint(text_starta_endb(\"ab\")) # Should return False\nprint(text_starta_endb(\"helloab\")) # Should return False\nprint(text_starta_endb(\"aacb\")) # Should return True\nprint(text_starta_endb(\"a234b\")) # Should return True ",
        "generated_testcode": "assert text_starta_endb(r\"a string that starts with a and ends with b\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return sorted(heap)\n\n\n# Example usage:\nitems = [10, 20, 30, 5, 17, 18, 25, 3, 12, 8, 220, 21]\nn = 3\ncheap_items(items, n) # returns [3, 5, 8] ",
        "generated_testcode": "assert cheap_items([\"item1\": 10, \"item2\": 20, \"item3\": 5, \"item4\": 15, \"item5\": 25, \"item6\": 30, \"item7\": 3, \"item8\": 22, \"item9\": 27, \"item10\": 18}, 3) == [\"item3\", \"item7\", \"item10\"]\n\n# The output should be [\"item3\", \"item7\", \"item10\"] because these are the 3 cheapest items in the dataset. ",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n\n# Test the function with sample data\ndict = {'item1': 10, 'item2': 20, 'item3': 5}\nprint(return_sum(dict)) # Output: 35 ",
        "generated_testcode": "assert return_sum({1: 10, 2: 20, 3: 30, 4: 40, 5: 50}) == 150\n\n\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 2): \n        sum += i \n    return sum\n\n# testing the function with some examples\nprint(sum_Odd(5))  # Output: 9\nprint(sum_Odd(10)) # Output: 25\nprint(sum_Odd(11)) # Output: 25\nprint(sum_Odd(110)) # Output: 100\nprint(sum_Odd(111)) # Output: 100 ",
        "generated_testcode": "assert sum_Odd(1, 10) == 25\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(arr) == 0:  \n        return 0  #if array is empty return 0\n    else:  \n        return arr[0] + _sum(arr[1:])  #recursive call\n\narr = [1,2,3,4,5,6,7,8,9]\nprint(\"Original array:\")\nprint(arr)\nprint(\"Sum of the array:\")\nprint(_sum(arr))  #calling the function with the given array",
        "generated_testcode": "assert _sum([1,2,3,4,5,6,7,8,9]) == 35\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    #d is the number of rotations   \n    #n is the given number\n    #we need to rotate the bits d times to the left\n    #for d rotations, we need to shift the bits d positions to the left and then move the bits that are lost on the left side to the right side\n    #for example \n    #let n = 10100 and d = 2, we need to shift the bits 2 positions to the left\n    #1010 << 2 means shifting the bits 2 positions to the left and filling the lost bits with 0's from the right side\n    #so 1010 becomes 1010000, but we need to move the first two bits(01) to the right side, so we use the bitwise OR operator with (1010 << 2) | (1010 >> (4-2)) where 4 is the number of bits in 1010\n    #1010 >> (4-2) will shift the bits 2 positions to the right, which is equal to 00010, so the final result is 1010000 | 0010 = 101000 | 0010 = 101000\n    #the complete formula is (n << d) | (n >> (32-d)) where 32 is the number of bits in a 32 bit integer\n    #here 32 is used to handle the edge case where d can",
        "generated_testcode": "assert left_Rotate(1234, 2) == 486\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function removes all whitespaces from a given string\n    \"\"\"\n    return text.replace(\" \", \"\")\n\ndef remove_all_spaces2(text):\n    \"\"\"\n    Another way to remove all whitespaces from a given string\n    \"\"\"\n    return \"\".join(text.split())\n\n\n# Test cases\nprint(remove_all_spaces(\"Hello World\")) # Output: \"HelloWorld\"\nprint(remove_all_spaces(\"This is a test\")) # Output: \"Thisisate\"\nprint(remove_all_spaces(\"   Hello   World   \")) # Output: \"Helloworld\"\n\nprint(remove_all_spaces2(\"Hello World\")) # Output: \"HelloWorld\"\nprint(remove_all_spaces2(\"This is a test\")) # Output: \"Thisisate\"\nprint(remove_all_spaces2(\"   Hello   World   \")) # Output: \"Helloworld\" ",
        "generated_testcode": "assert remove_all_spaces(text) == \"Thisisatextwithnospaces\"\n\n# Test case 1:\ntext = \"This is a text with spaces\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n#test the function\nprint(test_three_equal(1,2,3)) #0\nprint(test_three_equal(1,2,1)) #2\nprint(test_three_equal(1,1,1)) #3 ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[mid-1]:\n            return mid\n        if arr[mid] < arr[high]:\n            high = mid-1\n        else:\n            low = mid+1\n    return 0 ",
        "generated_testcode": "assert count_Rotation(arr=[4, 5, 6, 7, 8, 9, 10, 1, 2, 3], n=7) == 3\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return (sqrt_n * sqrt_n == n)\n\n# Test the function with an example\nprint(is_Perfect_Square(25)) # Output: True\nprint(is_Perfect_Square(24)) # Output: False ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    product = 1\n    for i in range(0,n): \n        product = product * arr[i] \n    if(product % 2 == 0): \n        return True\n    else: \n        return False\n# Driver Code \narr = [2, 3, 4, 6] \nn = len(arr) \nif(is_Product_Even(arr,n)): \n    print(\"Even\") \nelse: \n    print(\"Odd\") ",
        "generated_testcode": "assert is_Product_Even(arr=[2,4,6,8],n=3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n\n# Test case\nprint(max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])) #[10, 11, 12]\nprint(max_sum_list([[1, -2, 3], [4, 5, 6, -8], [10, 11, 12], [7, 8, 9]])) #[10, 11, 12]\nprint(max_sum_list([[1, -100, 3], [-4, 5, 6], [100, 11, 12], [7, 8, -9]])) #[100, 11, 12] ",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12, 13], [7, 8, 9]] ) == [10, 11, 12, 13]\n\n# Test case 1: Test with a list of lists with positive integers\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max(max_run, current_run)\n\n\n# Test the function with some examples\nprint(max_run_uppercase(\"Hello Worlld\"))  # Output: 2\nprint(max_run_uppercase(\"AaAaBbCDde\"))    # Output: 2\nprint(max_run_uppercase(\"Python\"))      # Output: 1\nprint(max_run_uppercase(\"CodEWaRriOr\"))  # Output: 3 ",
        "generated_testcode": "assert max_run_uppercase(test_str=\"HeLLoWorLd\") == 2\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# test the function\nprint(first_odd([2, 4, 6, 8, 10, 3, 12, 14])) # Output: 3\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None ",
        "generated_testcode": "assert first_odd(nums=[2, 4, 6, 8, 10, 3, 5, 7, 11]) == 3\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if K in test_tup:\n        print(\"True\")\n    else:\n        print(\"False\")\n\ntest_tup = (1, 5, 6, 7, 8, 9, 10)\nK = 6\ncheck_K(test_tup, K)\n\n# Output: True ",
        "generated_testcode": "assert check_K(('hello', 'K') == True)\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            result = False\n            break\n    return result\n\n# Example usage:\ntup1 = (4, 5, 6, 7, 8)\ntup2 = (3, 2, 5, 6, 7)\nprint(check_smaller(tup1, tup2))  # Output: False ",
        "generated_testcode": "assert check_smaller((('a', 'b', 'c', 'd', 'e'), (1, 2, 3, 4)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = \"\"\n    for i in [a,b,c,d]:\n        result += i * i\n    return result\n\nprint(count_variable(\"a\",2,\"b\",3))\n\n\n# Output: \"aaaabbbbbcccccc\" ",
        "generated_testcode": "assert count_variable(1,2,3,4) == [1,2,2,3,3,3,3,4,4,4,4,4]\n\n# Test case 1: Test the function with arguments 1,2,3,4. The expected output is [1,2,2,3,3,3,4,4,4,4,4]\n# Test case 2: Test the function with arguments 2,3,4,1. The expected output is [2,2,3,3,3,3,4,4,4,4]\n# Test case 3: Test the function with arguments 0,3,5. The expected output is [3,3,3,3,3,3,3,5,5,5,5,5,5,5]\n# Test case 4: Test the function with arguments 1,1,1. The expected output is [1,1]\n# Test case 5: Test the function with arguments 0,0,0. The expected output is [] ",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n# Example usage:\ntest_list1 = [(1,2), (2,3), (3,4), (4,5)]\ntest_list2 = [(1,2), (3,4), (2,3), (4,5)]\nprint(check_identical(test_list1, test_list2)) # Output: False\n\n\ntest_list3 = [(1,2), (2,3), (3,4), (4,5)]\ntest_list4 = [(1,2), (2,3), (3,4), (4,5)]\nprint(check_identical(test_list3, test_list4)) # Output: True\n\ntest_list5 = [(1,2), (2,3), (3,4), (4,5)]\ntest_list6 = [(1,2), (2,3), (4,5)]\nprint(check_identical(test_list5, test_list6)) # Output: False ",
        "generated_testcode": "assert check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4), (5,6)] ) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    street = street.lower()\n    if 'road' in street:\n        street = street.replace('road', 'rd.')\n    return street\n\n# Testing the function with example inputs\nprint(road_rd('Washington Road'))  # Output: 'Washington Rd.'\nprint(road_rd('Park Road'))     # Output: 'Park Rd.'\nprint(road_rd('Timber Road'))    # Output: 'Timber Rd.'\nprint(road_rd('John Doe'))      # Output: 'John Doe'\n\n\n# Another approach could be:\ndef road_rd(street):\n    return street.replace('Road', 'Rd.').replace('road', 'Rd.') ",
        "generated_testcode": "assert road_rd(street=\"Park Road\") == \"Park Rd.\"\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for _ in str1:\n        count += 1\n    return count\n\n# Test the function with sample input\nstring = \"Hello, World!\"\nprint(string_length(string) == len(string)) # Output: True\n\n\n# Test the function with empty string\nstring = \"\"\nprint(string_length(string) == len(string)) # Output: True ",
        "generated_testcode": "assert string_length(None) == 0\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return p*q\n\n#test the function with different values of p and q\nprint(rombus_area(4,5)) #should return 20\nprint(rombus_area(10,5)) #should return 50\nprint(rombus_area(3.5,8.5)) #should return 32.5\nprint(rombus_area(11.5,2.5)) #should return 34.0\nprint(rombus_area(2.5,2.5)) #should return 6.25\n\n\n#test the function with strings as input\nprint(rombus_area(\"4\",\"5\")) #should return TypeError: unsupported operand type(s) for *: 'str' and 'str'\nprint(rombus_area(4,\"q\")) #should return TypeError: unsupported operand type(s) for *: 'int' and 'str'\nprint(rombus_area(\"p\",5)) #should return TypeError: unsupported operand type(s) for *: 'str' and 'int'\nprint(rombus_area(\"p\",\"q\")) #should return TypeError: unsupported operand type(s) for *: 'str' and 'str' ",
        "generated_testcode": "assert rombus_area(4, 5) == 12\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n\n    for num in arr:\n        if num == 0:\n            count_0 += 1\n        elif num == 1:\n            count_1 += 1\n        else:\n            count_2 += 1\n\n    sorted_arr = [0] * count_0 + [1] * count_1 + [2] * count_2\n    return sorted_arr\n\n\n# Test\narr = [0, 1, 2, 0, 1, 2, 0, 1, 2, 1, 0, 2, 0]\nn = len(arr)\nprint(sort_by_dnf(arr, n))  # Output: [0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 1, 0] ",
        "generated_testcode": "assert sort_by_dnf(arr, n) == sorted(arr)\n\n# The function should work for the following test cases:\narr = [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]\nn = len(arr)\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    temp_list = list(test_tup) # convert the tuple to list to remove the values\n    for i in range(len(temp_list)):\n        temp_list[i] = None # set all the values to None\n    return tuple(temp_list) # convert the list back to tuple and return it\n\n\n# example usage:\nmy_tuple = (1, 2, 3, 4, 5)\nprint(\"Original tuple:\", my_tuple)\ncleared_tuple = clear_tuple(my_tuple)\nprint(\"Cleared tuple:\", cleared_tuple) ",
        "generated_testcode": "assert clear_tuple((\"hello\") == None, \"Input is not a tuple\")\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0, nums))\n\n#Example\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10],2,3)) #[2, 3, 4, 6, 8, 9] ",
        "generated_testcode": "assert div_of_nums(nums=[1,2,3,4,5,6,7,8,9,10],m=3,n=5) == [3,6,9]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for letter in str:\n        if letter.islower():\n            count += 1\n    return count\n\n# test the function\nprint(lower_ctr(\"Hello World\"))\nprint(lower_ctr(\"HELLO WORLD\"))\nprint(lower_ctr(\"HeLLo wOrLD\"))\nprint(lower_ctr(\"Python 123\"))\nprint(lower_ctr(\"\"))  # empty string\nprint(lower_ctr(\"Lowercase Letter Count is 10\")) ",
        "generated_testcode": "assert lower_ctr(\u201cHello World\u201d) == 8\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            count += 1\n    return count\n\n# Test the function with a sample list\nlists = [1, 2, 2, 3, 3, 4, 4, 4, 5, 6, 6, 7, 7, 7, 7, 8, 8]\nprint(count_duplic(lists))  # Output: 3 ",
        "generated_testcode": "assert count_duplic([]), 0\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    else:\n        return False\nprint(check_monthnum_number(2)) #True\nprint(check_monthnum_number(4)) #False ",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    return merged_dict\n    \n# Example usage:\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'d': 4, 'e': 5, 'f': 6}\nmerged_dict = merge_dictionaries(dict1, dict2)\nprint(merged_dict) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} ",
        "generated_testcode": "assert merge_dictionaries(\n    {\"a\": 1, \"b\": 2, \"c\": 3},\n    {\"c\": 4, \"d\": 5, \"e\": 6}\n) == {\"a\": 1, \"b\": 2, \"c\": 4, \"d\": 5, \"e\": 6}\n\n\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(p) >= 8 and p.isalnum() == True and p.islower() == False and p.isupper() == False and p.isdigit() == False:\n        return True\n    else:\n        return False\n\ndef main():\n    password = input(\"Enter a password: \")\n    if pass_validity(password):\n        print(\"Valid Password\")\n    else:\n        print(\"Invalid Password\")\n\nif __name__ == '__main__':\n    main()\n",
        "generated_testcode": "assert pass_validity(123456) == False\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = re.compile(r'^' + sample)\n    return bool(pattern.search(string))\n\n# Example usage:\nstring = 'hello world'\nsample = 'hello'\nif check_substring(string, sample):\n    print(f'{string} starts with {sample}')\nelse:\n    print(f'{string} does not start with {sample}') ",
        "generated_testcode": "assert check_substring(string=\"hello world\", sample=\"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return [i for i in l if i%2!=0]\n\n#test the function\nprint(remove_even([1,2,3,4,5,6,7,8,9,10])) # [1, 3, 5, 7, 9]\nprint(remove_even([2,4,6,8])) # []\nprint(remove_even([1,3,5,7])) # [1, 3, 5, 7]\n\n\n#Write a python function to remove all occurrences of a specified element from a given list.\ndef remove_element(l, e):\n    return [i for i in l if i!=e]\n\n#test the function\nprint(remove_element([1,2,3,4,5,6,7,8,9], 2)) # [1,3,4,5,6,7,8,9]\nprint(remove_element([1,2,3,4,2,5,6,2,7,8,2,9], 2)) # [1,3,4,5,6,7,8,9]\nprint(remove_element([1,2,3,4,5,6,7,8,9], 10)) # [1,2,3,4,5,6,7,8,9]\n\n#Write a python function to remove all duplicates from a given list.\ndef remove_duplicates(l):\n    return list(set(l))\n#test the function\nprint",
        "generated_testcode": "assert remove_even(l) == [1, 3, 5]\n\n# Test case 1: Test with a list of odd numbers\nl = [1, 3, 5, 7, 9]\nremove_even(l)\n\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two arguments, a list of integers and a list of indices. It returns a list of elements present at the given indices.\n    \"\"\"\n    result = []\n    for i in list_index:\n        result.append(nums[i])\n    return result\n\n# example usage\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [1, 3, 4, 5]\nprint(access_elements(nums, list_index)) # Output: [2, 4, 5] ",
        "generated_testcode": "assert access_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], [1, 3]) == [\"banana\", \"elderberry\"]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if a==b==c: \n        return \"Equilateral Triangle\"\n    elif a==b or b==c or c==a: \n        return \"Isosceles Triangle\"\n    else: \n        return \"Scalene Triangle\"\na=int(input(\"Enter the first side: \"))\nb=int(input(\"Enter the second side: \"))\nc=int(input(\"Enter the third side: \"))\nprint(check_Type_Of_Triangle(a,b,c)) \n\n#testing the function with different inputs\nprint(check_Type_Of_Triangle(4,5,5)) #output: Isosceles Triangle\nprint(check_Type_Of_Triangle(4,5,6)) #output: Scalene Triangle\nprint(check_Type_Of_Triangle(4,4,4)) #output: Equilateral Triangle ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    col_sum = 0\n    for i in range(len(list1)):\n        col_sum += list1[i][C]\n    return col_sum\n\n#test the function with the example input\nlist1 = [[1,2,3],[4,5,6],[7,8,9]]\nC = 2\nprint(sum_column(list1, C)) #should return 18 ",
        "generated_testcode": "assert sum_column(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ], 2) == 15\n\n# The function should return the sum of the 2nd column, which is 15. ",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    alpha_count = 0\n    dig_count = 0\n    spl_count = 0\n    for char in string:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            dig_count += 1\n        else:\n            spl_count += 1\n    return alpha_count, dig_count, spl_count\n\n\n\nstring = input(\"Enter a string: \")\nalpha, dig, spl = count_alpha_dig_spl(string)\nprint(\"No. of alphabets:\", alpha)\nprint(\"No. of digits:\", dig)\nprint(\"No. of special characters:\", spl) ",
        "generated_testcode": "assert count_alpha_dig_spl(string) == (alpha_count, digit_count, special_count) # add the string and expected output ",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    for i in input:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    \n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    return sorted_count[1][0] if len(sorted_count) > 1 else None\n\n\n#Test the function\ninput = [\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\", \"cherry\", \"banana\"]\nprint(second_frequent(input)) # Output: \"banana\" ",
        "generated_testcode": "assert second_frequent([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"orange\", \"grape\", \"orange\"]) == \"grape\"\n\n\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    round_up = \"{:.{}f}\".format(a, digits)\n    return float(round_up)\n\n# Example usage:\n# round_up(2.7555, 2) -> 2.76\n# round_up(3.215, 1) -> 3.3\n# round_up(1.23456, 2) -> 1.24\n# round_up(5, 0) -> 5.00\n# round_up(0.9876, 3) -> 0.987\n\n# The function takes two arguments:\n# a - the number to round up (a float or int)\n# digits - the number of digits to round up to (an int)\n# The function should return the rounded up number (a float)\n\n# To round up a number to specific digits, we can use the string formatting method with the format() function. We first convert the number to a string with the desired number of digits, and then convert it back to a float. ",
        "generated_testcode": "assert round_up(123.4567, 1) == 123.5\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort()\n    count=0\n    i=0\n    j=1\n    while(i<n-1):\n        if arr[i]==arr[j]:\n            count+=1\n            j+=1\n        else:\n            i=j\n            j=i+1\n    return count\nn=int(input(\"Enter the size of the array: \"))\narr=[]\nprint(\"Enter the elements of the array: \")\nfor i in range(n):\n    arr.append(int(input()))\nprint(\"Number of equal pairs are: \",count_Pairs(arr,n))\n    ",
        "generated_testcode": "assert count_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]\nn = len(arr)\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    #extract digits from string using regex\n    nums = re.findall(r'\\d+', input)\n    #convert list of strings to int\n    nums = [int(num) for num in nums]\n    #return maximum value from list of ints\n    return max(nums) if nums else None\n\n\n#Example usage:\ninput = \"The maximum value is 15\"\nprint(extract_max(input)) #Output: 15\n\ninput = \"There are 5 apples and 10 oranges\"\nprint(extract_max(input)) #Output: 10\ninput = \"I have no numbers\"\nprint(extract_max(input)) #Output: None ",
        "generated_testcode": "assert extract_max(input=\"a12bc34d56\") == 56\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n#Example:\nmy_dict = {'name': 'John', 'age': 30, 'city': 'New York'}\nprint(get_key(my_dict))  # Output: ['name', 'age', 'city'] ",
        "generated_testcode": "assert get_key(dict()) == []\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    matrix = [[0 for j in range(n)] for i in range(n)]\n    count = 1\n    start_row = 0\n    end_row = n - 1\n    start_col = 0\n    end_col = n - 1\n    while count <= n * n:\n        for i in range(start_col, end_col + 1):\n            matrix[start_row][i] = count\n            count += 1\n        for i in range(start_row + 1, end_row + 1):\n            matrix[i][end_col] = count\n            count += 1\n        for i in range(end_col - 1, start_col - 1, -1):\n            matrix[end_row][i] = count\n            count += 1\n        for i in range(end_row - 1, start_row, -1):\n            matrix[i][start_col] = count\n            count += 1\n        start_row += 1\n        end_row -= 1\n        start_col += 1\n        end_col -= 1\n    return matrix\n\n# test the function\nn = 4\nmatrix = generate_matrix(n)\nfor i in range(n):\n    for j in range(n):\n        print(matrix[i][j], end=' ')\n    print() ",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return (y2-y1)/(x2-x1) ",
        "generated_testcode": "assert slope(0,0,1,1) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_so_far = a[0] \n    max_ending_here = a[0] \n    start = 0 \n    end = 0\n    s = 0 \n      \n    for i in range(1, size): \n        max_ending_here += a[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n            start = i + 1 \n        if max_ending_here > max_so_far: \n            max_so_far = max_ending_here \n            s = start \n            end = i \n    return end - s + 1\n    \n# Driven code to test the function\na = [-2, 3, 4, -1, -2, 1, 5, -3] \nsize = len(a) \nprint(max_sub_array_sum(a,size)) # Output: 3\n\n\na = [-2, -3, 4, -1, -2, 1, -5, -3] \nsize = len(a) \nprint(max_sub_array_sum(a,size)) # Output: 1\n\na = [-2, 3, 4, -1, -2, 1, 5, -3, 6] \nsize = len(a) \nprint(max_sub_array_sum(a,size)) # Output: 4\n\na = [-2, -3",
        "generated_testcode": "assert max_sub_array_sum([-2, 3, 4, -1, -2, 1, 5, -3], 5) == 7\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while count < n: \n        if i % 2 != 0: \n            sum = sum + i**3\n            count += 1\n        i += 1\n    return sum\n# Example usage:\nn = 5\nprint(cube_Sum(n)) # Output: 228\nn = 3\nprint(cube_Sum(n)) # Output: 9\nn = 10\nprint(cube_Sum(n)) # Output: 2810000 ",
        "generated_testcode": "assert cube_Sum(3) == 35 ",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    if len(s1) != len(s2):\n        return -1\n    s1 = [int(i) for i in s1]\n    s2 = [int(i) for i in s2]\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            count += 1\n    return count//2\n# Test the function\nprint(min_Swaps(\"101010\",\"11011\")) # 2\nprint(min_Swaps(\"10101\",\"1101\")) # -1 ",
        "generated_testcode": "assert min_Swaps(s1 = \"0100\", s2 = \"1110\") == 1\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    tup.sort(key=lambda x: x[0]) \n    return tup\n\n#Example\n# Input: \n# tup = [('banana', 2), ('apple', 4), ('cherry', 1), ('grape', 3)]\n# Output: \n# [('apple', 4), ('banana', 2), ('cherry', 1), ('grape', 3)] ",
        "generated_testcode": "assert sort_tuple(()) == ()\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0: \n        return \"Invalid Input\"\n    else:\n        d = b**2 - 4*a*c \n        if d < 0: \n            return \"No real solutions\" \n        elif d == 0: \n            return \"One solution\" \n        else: \n            x1 = (-b + d**0.5) / (2*a) \n            x2 = (-b - d**0.5) / (2*a) \n            if x1*x2 < 0: \n                return \"Roots are numerically equal and opposite in sign\" \n            else: \n                return \"Roots are not numerically equal and opposite in sign\" \n\n#Example \nprint(Check_Solution(1,-5,6)) #Output: Roots are numerically equal and opposite in sign \nprint(Check_Solution(1,2,3)) #Output: Roots are not numerically equal and opposite in sign \nprint(Check_Solution(1,4,4)) #Output: One solution \nprint(Check_Solution(2,-4,2)) #Output: Roots are numerically equal and opposite in sign \nprint(Check_Solution(0,2,3)) #Output: Invalid Input ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n  \n    return inv_count \n\n# Driver Code \narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are\", get_inv_count(arr, n)) \n\n\n\n# Merge Sort based solutio for counting inversions\ndef merge(arr, temp, left, mid, right):\n    i, j, k, inv_count = left, mid, left\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid-i+1)\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n    for i in range(left, right+1):\n        arr[i] = temp[i]\n    return inv_count\n\ndef merge_sort(arr, temp, left, right):",
        "generated_testcode": "assert get_inv_count(arr=[1, 20, 6, 4, 5]) == 2\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    mp = {}\n    for i in range(arr_size):\n        if arr[i] in mp:\n            mp[arr[i]] += 1\n        else:\n            mp[arr[i]] = 1\n    for key, value in mp.items():\n        if value % 2 != 0:\n            return key\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 4, 5, 2, 1, 7, 8, 7, 9, 9, 9]\narr_size = len(arr)\nprint(\"Odd Occurrence Element:\", get_odd_occurence(arr, arr_size))\n\n",
        "generated_testcode": "assert get_odd_occurence(arr=[1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9], arr_size=9) == 1\n\n# Test case 1: Test the function with an array of length 9, where 1 occurs odd number of times.\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    uglies = [1]\n    indices = [0] * len(primes)\n    pq = []\n    for i, p in enumerate(primes):\n        heapq.heappush(pq, (p, i))\n\n    for _ in range(n-1):\n        next_ugly, index = heapq.heappop(pq)\n        uglies.append(next_ugly)\n        indices[index] += 1\n        heapq.heappush(pq, (primes[index] * uglies[indices[index], index))\n\n    return uglies[-1]\n\n# time: O(nk log k) space: O(k)\n\n\n# explanation:\n# use heap to keep track of the smallest product of prime and index\n# each time we pop the smallest product, we append it to uglies and update the index of the prime\n# then push the next product of prime and index to the heap\n# return the last element in uglies which is the nth super ugly number ",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    odd = []\n    even = []\n    for i in range(1, n + 1):\n        if i % 2 != 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    if k <= len(odd):\n        return odd[k-1]\n    else:\n        return even[k-len(odd)-1]\nn = 7\nk = 3\nprint(get_Number(n, k)) ",
        "generated_testcode": "assert get_Number(10, 1) == 1\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    factorial = 1\n    for i in range(1, n + 1): \n        factorial *= i\n    while (factorial > 0): \n        count += 1\n        factorial //= 10\n    return count \n  \n# Driver Code \nn = 5\nprint(\"The number of digits in the factorial of\", n, \"is\", find_Digits(n)) ",
        "generated_testcode": "assert find_Digits(0) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if(n == 0): \n        return 0\n    if(n == 1): \n        return 1\n    arr.sort() \n    dep.sort() \n    platforms = 1\n    i = 1\n    j = 0\n    max_p = 1\n    while(i < n and j < n): \n        if(arr[i] <= dep[j]): \n            platforms += 1\n            i += 1\n        elif(arr[i] > dep[j]): \n            platforms -= 1\n            j += 1\n        max_p = max(max_p, platforms)\n    return max_p ",
        "generated_testcode": "assert find_platform([\"9:00\", \"9:40\", \"9:50\", \"11:00\", \"15:00\", \"18:00\"], [\"9:10\", \"12:00\", \"11:20\", \"11:30\", \"12:10\", \"16:00\"], 5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return [x for x in xs]\n\n#Test the function with an example:\nt = (1,)\nprint(lcopy(t)) #[1] ",
        "generated_testcode": "assert lcopy(('hello') == ['hello']\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    area = 0.5*(base1+base2)*height\n    return area\n#test the function\na = area_trapezium(10,20,30)\nprint(a)\n\ndef area_triangle(base,height):\n    area = 0.5*base*height\n    return area\n#test the function\na = area_triangle(10,20)\nprint(a)\n\ndef area_square(side):\n    area = side**2\n    return area\n#test the function\na = area_square(10)\nprint(a)\n\ndef area_rectangle(length,width):\n    area = length*width\n    return area\n#test the function\na = area_rectangle(10,20)\nprint(a)\n\ndef area_circle(radius):\n    area = 3.14*radius**2\n    return area\n#test the function\na = area_circle(10)\nprint(a)\n\ndef circumference_circle(radius):\n    circumference = 2*3.14*radius\n    return circumference\n#test the function\nc = circumference_circle(10)\nprint(c)\n\ndef pythagoras(a,b):\n    c = (a**2 + b**2)**0.5\n    return c\n#test the function\nc = pythagoras(3,4)\nprint(c)\n\ndef average(a,b,c,d):",
        "generated_testcode": "assert area_trapezium(4,6,5) == 7.5\n\n# Write a function to find the area of a triangle using Heron's formula.\ndef area_triangle(a,b,c):\n    pass\n\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(2, N + 1): \n        if N % i == 0: \n            for j in range(2, i + 1): \n                if (i % j == 0 and N % j == 0): \n                    # If i is a factor of N and j is a factor of i, then j is a prime factor of N\n                    if (i // j == 1 or i == j): \n                        sum += j\n                        break\n    return sum\n\n# Driver code\nN = 120\nprint(\"Sum of prime divisors of\", N, \"is:\", Sum(N)) ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    angles = sorted([a,b,c])\n    if angles[0] + angles[1] > angles[2]:\n        return True\n    else:\n        return False\na = float(input(\"Enter the first angle: \"))\nb = float(input(\"Enter the second angle: \"))\nc = float(input(\"Enter the third angle: \"))\nif is_triangleexists(a,b,c):\n    print(\"A triangle can be formed with the given angles.\")\nelse:\n    print(\"A triangle cannot be formed with the given angles.\") ",
        "generated_testcode": "assert is_triangleexists(30, 60, 1120) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(2,N+1):\n        if N % i == 0:\n            Sum += 1/i\n    return Sum\n\n# Test the function with example\nprint(Sum_of_Inverse_Divisors(12,0)) # Output: 4.25\nprint(Sum_of_Inverse_Divisors(6,0)) # Output: 2.5\nprint(Sum_of_Inverse_Divisors(10,0)) # Output: 2.4\nprint(Sum_of_Inverse_Divisors(15,0)) # Output: 3.333333333333333333335\n\n\n# Explanation:\n# The function takes two arguments, one is the number and the other is the sum of inverse of divisors. It uses a for loop to iterate through all the divisors of the given number starting from 2 to the number itself. \n# If the number is divisible by the current number, it adds 1/current number to the sum. Finally, it returns the sum. ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12) == 28 \n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and removes all negative numbers from it.\n    \"\"\"\n    return [num for num in num_list if num >= 0]\n\n#Test the function\nprint(remove_negs([-5, -3, 0, 10, -2, 4, -7, 8, -12, 15])) # Output: [0, 10, 4, 8, 15]\nprint(remove_negs([5, -3, 2, -10, 6, -8, 7, 0, -12])) # Output: [5, 2, 6, 7, 0]\nprint(remove_negs([1, 2, 3, 4, 5, -6, -7, -8, 9])) # Output: [1, 2, 3, 4, 5, 9]\nprint(remove_negs([])) # Output: [] ",
        "generated_testcode": "assert remove_negs(num_list) == [1, 2, 3, 4, 5]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n + 1, 1): \n        if n % i == 0 and i % 2 != 0: \n            sum += i \n    return sum\n\n#test the function\nn = 10\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 11\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    for i in range(len(rawheap)//2-1, -1, -1, -1):\n        heapify(rawheap, len(rawheap), i)\n    return rawheap\n\ndef heapify(heap, n, i):\n    largest = i\n    left = 2*i+1\n    right = 2*i+2\n    if left < n and heap[left] > heap[largest]:\n        largest = left\n    if right < n and heap[right] > heap[largest]:\n        largest = right\n    if largest != i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        heapify(heap, n, largest)\n\n# test the function\nprint(raw_heap([3, 1, 6, 2, 5, 7, 8, 4])) # [8, 7, 6, 5, 3, 2, 1] ",
        "generated_testcode": "assert raw_heap([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]) == [\"elderberry\", \"cherry\", \"grape\", \"banana\", \"apple\", \"date\", \"fig\"]\n\n\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x%2 == 0: \n        return True \n    else: \n        return False\n\n#Test the function with some examples \nprint(check_Even_Parity(6)) # True \nprint(check_Even_Parity(5)) # False ",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    count = 0\n    while i < n - 1: \n        if arr[i] == 0: \n            j = i + 1\n            while j < n: \n                if arr[j] == 1: \n                    arr[i], arr[j] = arr[j], arr[i] \n                    count += 1\n                    break\n                j += 1\n            i += 1\n        else: \n            i += 1\n    return count ",
        "generated_testcode": "assert find_Min_Swaps(arr,n) == min_swaps_required\n\n# Example:\narr = [0,1,0,1,1,0,1,0,1,1,0,1,1,0]\nn = len(arr)\nmin_swaps_required = 2\n# Explanation: \n# We can sort the array by making 2 adjacent swaps:\n# 0 1 0 1 1 0 1 1 0 1 1 0 1 -> 0 1 0 1 1 0 1 1 0 1 1 0 1\n#    ^           ^\n# The array can be sorted in 2 swaps. ",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(str, list1))\n\n\n# Test the function\nlist1 = [1,2,3,4,5]\nprint(listify_list(list1))  # Output: ['1', '2', '3', '4', '5']\n\n\n# Example 2\ndef square(x):\n    return x**2\n\n\n# Test the function\nlist2 = [1,2,3,4,5]\nsquared_list = list(map(square, list2))\nprint(squared_list) # Output: [1, 4, 9, 16, 25] ",
        "generated_testcode": "assert listify_list([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n\n\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n            count += count_list(element)\n    return count**2\n\n#test the function with example\nmy_list = [1, [2, 3, [4, [5, 6], 7], 8, [9, [10, [11, 12, [13, 14, [15]]]]]]]\nprint(count_list(my_list)) # Output: 49 ",
        "generated_testcode": "assert count_list([]), 0\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(my_list) == 0:\n        return []\n    else:\n        sub_list = []\n        for i in range(1, len(my_list) + 1):\n            sub_list.extend([my_list[j:k] for j in range(len(my_list) - i + 1) for k in range(j + 1, len(my_list) + 1)])\n        return sub_list\n\n\n# Example usage:\nmy_list = [1, 2, 3, 4]\nprint(sub_lists(my_list))  # Output: [[1], [2], [3], [4], [1, 2], [2, 3], [3, 4], [1, 2, 3], [2, 3, 4], [1, 2, 3, 4]] ",
        "generated_testcode": "assert sub_lists([\"apple\", \"banana\", \"cherry\"]) == [[], [\"apple\"], [\"banana\"], [\"cherry\"], [\"apple\", \"banana\"], [\"banana\", \"cherry\"], [\"apple\", \"banana\", \"cherry\"]]\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re \n    pattern = r\"\\w+$\"\n    return bool(re.search(pattern,string)) ",
        "generated_testcode": "assert check_alphanumeric(string) == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    anagrams = []\n    key = sorted(str)\n    for i in texts:\n        if sorted(i) == key:\n            anagrams.append(i)\n    return anagrams\n\n#Test the function with sample inputs\ntexts = ['cat', 'dog', 'tac', 'god', 'act', 'port', 'car', 'otp', 'poor']\nstr = 'tac'\nprint(anagram_lambda(texts,str)) #Output: ['tac', 'cat', 'act'] ",
        "generated_testcode": "assert anagram_lambda([\"listen\", \"silent\", \"enlist\", \"apple\", \"papel\", \"leppa\"], \"silent\") == [\"listen\", \"silent\", \"enlist\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    text = text.lower()\n    words = text.split()\n    word_dict = {}\n    for word in words:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    sorted_words = sorted(word_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_words[:n]\n\n\n# test the function with a sample text and n=10\ntext = \"Python is a high-level, general-purpose programming language created by Guido van Rossum and first released in 1991. Its design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects. Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured (particularly, procedural), object-oriented, and functional programming. Python is often described as a \"batteries included\" language due to its comprehensive standard library.\"\nprint(n_common_words(text, 10)) ",
        "generated_testcode": "assert n_common_words([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"grape\", \"orange\", \"orange\", \"orange\"], 2) == [\"orange\", \"apple\"]\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    # create an empty hash set \n    s = set() \n    ans = 0\n      \n    # traverse the array \n    for i in range(n): \n        # insert the element in the set \n        s.add(arr[i]) \n          \n    # traverse the array again and find the length of the longest subsequence \n    for i in range(n): \n        if (arr[i]-1) not in s: \n            # check if the element is the starting element of the subsequence\n            temp = arr[i] \n            while temp in s: \n                # increment the temp and check if it is in set\n                temp += 1\n            # update the length of the subsequence\n            ans = max(ans, temp-arr[i]) \n              \n    return ans ",
        "generated_testcode": "assert find_longest_conseq_subseq(arr=[1, 9, 3, 10, 4, 20, 2, 1, 2, 3, 7, 5, 11, 6], n=9) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of strings and returns a filtered list containing only the palindromes.\n    It uses a lambda function to check if a string is a palindrome.\n    \"\"\"\n    palindromes = list(filter(lambda x: x == x[::-1], texts)\n    return palindromes\n\n# example usage:\nprint(palindrome_lambda(['racecar', 'apple', 'deified', 'civic', 'python', 'rotor', 'kayak', 'python'])) # ['racecar', 'civic', 'rotor', 'kayak'] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"madam\", \"level\", \"rotor\", \"python\", \"hello\", \"wasitacatisaw\"]) == [\"racecar\", \"madam\", \"level\", \"rotor\", \"wasitacatisaw\"]\n\n\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: n*[x],nums) )\n\n#Example:\nnums = [1,2,3,4,5]\nn=2\nprint(ntimes_list(nums,n)) ",
        "generated_testcode": "assert ntimes_list([\"a\",\"b\",\"c\"],3) == [\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthname2 in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return True\n    elif monthname2 in ['April', 'June', 'September', 'November']:\n        return False\n    elif monthname2 in ['February']:\n        return 'This month has either 28 or 29 days. Please enter the year to find the number of days.'\n    else:\n        return False\n    \n# Test the function\nprint(check_monthnumb('January')) # True\nprint(check_monthnumb('February')) # This month has either 28 or 29 days. Please enter the year to find the number of days.\nprint(check_monthnumb('August')) # True\nprint(check_monthnumb('June')) # False ",
        "generated_testcode": "assert check_monthnumb(monthname2=\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    countOdd = 0\n    countEven = 0\n    for i in range(n): \n        if(arr[i] % 2 != 0): \n            countOdd += 1\n        else: \n            countEven += 1\n    if(countOdd == 0 or countOdd == n): \n        return 0\n    elif(countOdd % 2 == 0): \n        return countOdd\n    else: \n        return countOdd-1\n    \narr = [3, 4, 7, 2, 5, 8, 9, 10, 5, 3] \nn = len(arr)\nprint(min_Num(arr, n)) ",
        "generated_testcode": "assert min_Num(arr=[1,2,3,4,5,6],n=4) == 2\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    words = a.split() \n    if len(words) == 0: \n        return 0\n    else: \n        return len(words[-1]) \n\n#Example\nstring = \"Python Exercises\"\nprint(length_Of_Last_Word(string)) ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return [[i for i in sublist if leftrange<=i<=rigthrange] for sublist in list1]\n\n#Example:\n#Input: list1=[[1,2,3,4,5,6], [4,5,6,7,8,9,10,11,12,13,14], [15,16,17,18,19,20], [21,22,3,24]]\n#       leftrange=4\n#       rigthrange=16\n#Output: [[4,5,6],[15,16]]\n\n#Explanation: Only the elements within the range [4,16] are kept in the sublists, so the other sublists are removed. ",
        "generated_testcode": "assert remove_list_range(list1, 2, 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x > 0, nums))\n\n# Test the function with a sample list of numbers\nnumbers = [1, -2, 3, 4, -5, 6, -7, 8, -9, 10]\nprint(sum_positivenum(numbers))  # Output: 19\n\n\n#---------------------------------------------------------------------------------------------------------------\n# Write a lambda function to check if a given string is a palindrome (i.e. reads the same forwards and backwards)\nis_palindrome = lambda x: x == x[::-1]\nprint(is_palindrome(\"racecar\")) # Output: True\nprint(is_palindrome(\"hello\")) # Output: False\n\n#---------------------------------------------------------------------------------------------------------------\n# Write a lambda function to find the square of a number\nsquare = lambda x: x ** 2\nprint(square(5)) # Output: 25\n#---------------------------------------------------------------------------------------------------------------\n# Write a lambda function to check if a number is divisible by 3\nis_divisible_by_3 = lambda x: x % 3 == 0\nprint(is_divisible_by_3(9)) # Output: True\nprint(is_divisible_by_3(10)) # Output: False\n#---------------------------------------------------------------------------------------------------------------\n# Write a lambda function to calculate the factorial of a number (product of all positive integers less than or equal to n)\nfactorial = lambda n",
        "generated_testcode": "assert sum_positivenum(nums=[1, 2, 3, 4, -5, 6, -7, 8, 9, 0, -1]) == 20\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n1=len(string1) \n    n2=len(string2) \n    if n1!=n2: \n        return False\n    temp=\"\" \n    temp=string1+string1 \n    if string2 in temp: \n        return True\n    else: \n        return False\n# Driver code \nstring1=\"ABCDEF\" \nstring2=\"FABCDE\"\nif are_Rotations(string1,string2): \n    print(\"Strings are rotations of each other\") \nelse: \n    print(\"Strings are not rotations of each other\") ",
        "generated_testcode": "assert are_Rotations(\"abcde\", \"cdeab\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1: \n        if i not in list2: \n            return False\n        index = list2.index(i) \n        if isinstance(i, list) and isinstance(list2[index], list): \n            if not check_subset(i, list2[index]): \n                return False\n    return True \n  \n# Test the function with sample inputs: \nlist1 = [[1,2], [3,4], [5,6]] \nlist2 = [[1,2], [3,4], [5,6], [7,8], [9,10]] \nif check_subset(list1, list2): \n    print(\"list1 is a subset of list2\") \nelse: \n    print(\"list1 is not a subset of list2\") \n  \nlist1 = [[1,2], [3,4], [5,6]] \nlist2 = [[1,2], [3,4], [7,8], [9,10]] \nif check_subset(list1, list2): \n    print(\"list1 is a subset of list2\") \nelse: \n    print(\"list1 is not a subset of list2\") ",
        "generated_testcode": "assert check_subset([\"apple\", \"banana\", \"cherry\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n\n#print(fibonacci(6))  # Output: 8\n\n\n# Let's optimize the function using memoization\nfib_cache = {}  # Create an empty dictionary to store previously calculated values\ndef fibonacci_memo(n):\n    if n in fib_cache:\n        return fib_cache[n]\n    if n <= 1:\n        return n\n    else:\n        value = fibonacci_memo(n-1) + fibonacci_memo(n-2)\n        fib_cache[n] = value\n        return value\n\n#print(fibonacci_memo(100))  # Output: 354222484777778290619153221589147465340736675412231854159762825574013993918037292984236093444261155574862226459779317666\n#print(fib_cache)  # Output: {0: 0, 1: 1, 2: 1, 3: 2",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1)!=len(str2):\n        return False\n    else:\n        for i in range(len(str1)//2):\n            if str1[i]==str2[0]:\n                if str1[i:len(str1)-i]==str2 or str1[i+1:len(str1)]==str2:\n                    return True\n        return False\n\nprint(check_Concat(\"catcat\",\"tca\"))\nprint(check_Concat(\"catcatg\",\"tcta\"))\nprint(check_Concat(\"cat\",\"tc\")) ",
        "generated_testcode": "assert check_Concat(str1=\"hello\", str2=\"he\") == False\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            min_diff = min(min_diff, diff)\n    return min_diff\n\n# Test the function with sample inputs\ntest_list = [(1,2), (4,3), (5,6), (10,9)]\nprint(min_difference(test_list)) # Output: 2 ",
        "generated_testcode": "assert min_difference([(1, 2), (2, 3), (4, 5), (6, 7), (8, 9)] ) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        greater = x\n    else:\n        greater = y\n\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\n# test the function\nprint(lcm(12, 14))\nprint(lcm(16, 24)) ",
        "generated_testcode": "assert lcm(12, 15) == 60\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return ''.join(sorted(str)\n  \n# Example usage: \nstr = \"Hello\"\nprint(sort_String(str)) # Output: 'eHllo'\nstr = \"GeeksForGeeks\"\nprint(sort_String(str)) # Output: 'FGGeeksForGeeks' ",
        "generated_testcode": "assert sort_String(None) == None\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n# Test the function with different tuples and K values\nprint(check_tuples((1, 2, 3, 4), 3)) # Should print True\nprint(check_tuples((1, 2, 3, 4), 2) # Should print False\nprint(check_tuples((\"abc\", 3)) # Should print True\nprint(check_tuples((\"hello\", 5)) # Should print False ",
        "generated_testcode": "assert check_tuples((\"hello\", 2) == False\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'a.*b$')\n    if pattern.search(text):\n        return True\n    return False\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abc\")) # True\nprint(text_match(\"acb\")) # False\nprint(text_match(\"abbc\")) # False\nprint(text_match(\"abcd\")) # False\nprint(text_match(\"aabbc\")) # False\nprint(text_match(\"aabbb\")) # True ",
        "generated_testcode": "assert text_match(r\"a string with ab\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    D = b**2 - 4*a*c \n    if D < 0 : \n        return 0 # no real solution \n    elif D == 0 : \n        return 1 # one solution \n    else : \n        return 2 # two solutions \n\n# test the function \na = 10\nb = 20\nc = 10\nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1, 2, 3) == 0\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum, odd_sum\n\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_sum, odd_sum = sum_even_odd(list1)\nprint(\"Sum of even numbers in the list:\", even_sum)\nprint(\"Sum of odd numbers in the list:\", odd_sum)\n\n\n# Output\n# Sum of even numbers in the list: 30\n# Sum of odd numbers in the list: 21 ",
        "generated_testcode": "assert sum_even_odd(list1) == (10, 15) # Testing for a list with even and odd numbers\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    perimeter = 2*(b+h)\n    return perimeter\n\n#b = float(input(\"Enter the length of the base of the parallelogram: \"))\n#h = float(input(\"Enter the height of the parallelogram: \"))\n#print(\"The perimeter of the parallelogram is:\", parallelogram_perimeter(b,h))\n\n\n#Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n    area = b*h\n    return area\n\n#b = float(input(\"Enter the length of the base of the parallelogram: \")\n#h = float(input(\"Enter the height of the parallelogram: \")\n#print(\"The area of the parallelogram is:\", parallelogram_area(b,h))\n\n#Write a function to calculate the volume of a cylinder.\ndef cylinder_volume(r,h):\n    pi = 3.14\n    volume = pi*r*r*h\n    return volume\n\n#r = float(input(\"Enter the radius of the cylinder: \")\n#h = float(input(\"Enter the height of the cylinder: \")\n#print(\"The volume of the cylinder is:\", cylinder_volume(r,h))\n\n#Write a function to calculate the surface area of a cylinder.\ndef cylinder_surface_area(r,h):\n    pi = 3.14\n    surface_area =",
        "generated_testcode": "assert parallelogram_perimeter(6, 7) == 20\n\n# Write a function to calculate the area of a parallelogram.\ndef parallelogram_area(b,h):\n    pass\n\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers and two divisors m and n as input and returns a list of numbers which are divisible by m and n.\n    \"\"\"\n    divisible_nums = list(filter(lambda x: x%m==0 and x%n==0, nums))\n    return divisible_nums\n\n#Example usage:\nnums = [2, 4, 6, 8, 9, 10, 12, 14, 16, 18, 20, 22, 21, 24, 28, 30, 36]\nm = 2\nn = 3\nresult = div_of_nums(nums, m, n)\nprint(result) #[6, 12, 18, 24, 30] ",
        "generated_testcode": "assert div_of_nums(nums=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],m=3,n=5) == [15,30]\n\n# The output should be [15,30] because 15 and 30 are the only numbers in the list that are divisible by both 3 and 5. ",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # convert the given number n to binary\n    binary_representation = bin(n)[2:] \n    # iterate through each bit in the binary representation\n    for i in range(len(binary_representation)): \n        # check if the bit is within the given range\n        if int(binary_representation[i]) >= l and int(binary_representation[i]) <= r: \n            continue\n        else: \n            return False\n    return True\n# example usage\nprint(all_Bits_Set_In_The_Given_Range(7,0,1)) # True\nprint(all_Bits_Set_In_The_Given_Range(10,0,1)) # False ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(12,2,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n    dictionary = {}\n    for i in range(len(str1):\n        if str1[i] not in dictionary:\n            dictionary[str1[i] = str2[i]\n        elif dictionary[str1[i] != str2[i]:\n            return False\n    return len(set(str2)) == len(dictionary)\n\n#Test the function with example strings\nstr1 = \"egg\"\nstr2 = \"add\"\nif is_Isomorphic(str1,str2):\n    print(str1,\"and\",str2,\"are isomorphic\")\nelse:\n    print(str1,\"and\",str2,\"are not isomorphic\")\n\nstr1 = \"foo\"\nstr2 = \"bar\"\nif is_Isomorphic(str1,str2):\n    print(str1,\"and\",str2,\"are isomorphic\")\nelse:\n    print(str1,\"and\",str2,\"are not isomorphic\") ",
        "generated_testcode": "assert is_Isomorphic(str1,str2) == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # add all the numbers in the list\n    total = sum(numbers)\n    # find the length of the list\n    length = len(numbers)\n    # divide the total by the length\n    average = total / length\n    return average\n\n# example usage\nprint(sum_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # output: 5.5 ",
        "generated_testcode": "assert sum_num(1,2,3,4,5) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & 1\n\n#Let's test the function with some examples\nprint(is_odd(5)) #Output: 1\nprint(is_odd(10)) #Output: 0 ",
        "generated_testcode": "assert is_odd(5) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function will subtract the elements of two tuples and return the result as a new tuple.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (4, 5, 6, 7, 8, 9)\nresult_tup = substract_elements(test_tup1, test_tup2)\nprint(result_tup) ",
        "generated_testcode": "assert substract_elements(('(1, 2, 3)', '(4, 5, 6)') == (-3, -3, -3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    reversed_lists = []\n    for lst in lists:\n        reversed_lst = lst[::-1]\n        reversed_lists.append(reversed_lst)\n    return reversed_lists\n\n# Test the function with an example:\nmy_lists = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\nprint(reverse_list_lists(my_lists))  # Output: [[3, 2, 1], [7, 6, 5, 4], [9, 8]] ",
        "generated_testcode": "assert reverse_list_lists([]), []\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    while (i < n and j < n): \n        if (arr1[i] != arr2[j]): \n            return arr1[i] \n        i += 1\n        j += 1\n    return -1\n    return -1\n\n# Driver code \narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5, 5] \nn = len(arr1) \nprint(\"Extra element is \", find_Extra(arr1, arr2, n)) ",
        "generated_testcode": "assert find_Extra(arr1 = [1,2,3,4,5,6,7], arr2 = [1,2,3,4,5,6,7,8], n = 6) == 6\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str(A)) == len(str(B)): \n        return True\n    else: \n        return False\n  \n#Example:\n#Testcase 1:\nA = 12345\nB = 8765\nprint(same_Length(A,B)) #Output: True\n#Testcase 2:\nA = 123\nB = 45678\nprint(same_Length(A,B)) #Output: False\n#Testcase 3:\nA = 0\nB = 10000\nprint(same_Length(A,B)) #Output: False ",
        "generated_testcode": "assert same_Length(1234,5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return \" \".join(text.split())\n\n# Test the function with an example string\nexample = \"   Hello     world  how are   you?    \"\nprint(remove_spaces(example))  # Output: \"Hello world how are you?\"\n\n\n# Solution 2: Using regular expression\nimport re\n\ndef remove_spaces(text):\n    return re.sub('\\s+', ' ', text).strip()\n\n# Test the function with an example string\nexample = \"   Hello     world  how are   you?    \"\nprint(remove_spaces(example))  # Output: \"Hello world how are you?\" ",
        "generated_testcode": "assert remove_spaces(text) == \"This is a string with multiple spaces.\"\n\n# Test case 1:\ntext = \"This is a string with    multiple    spaces.\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for sublist in lst:\n        result.append(sublist[-1])\n    return result\n# example usage:\n# sample_list = [[1,2,3,4],[5,6,7,8],[9,10,11]]\n# print(Extract(sample_list))  # Output: [4, 8, 11] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]] ) == [3, 6, 9]\n\n\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # removing the parentheses and splitting the string to two parts\n    temp = test_str.replace(\"(\",\"\").replace(\")\",\"\").split(\",\")\n    # converting the parts to float type\n    temp = [float(i) for i in temp]\n    # converting the list to tuple\n    temp = tuple(temp)\n    return temp\n\n# Test the function with sample input\nprint(float_to_tuple(\"(2.5, 3.5)\")) # Output: (2.5, 3.5) ",
        "generated_testcode": "assert float_to_tuple(1.23) == (1, 23)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if not A:\n        return 0\n    n = len(A)\n    if n == 1:\n        return A[0]\n    if n == 2:\n        return max(A)\n    incl = A[0]\n    excl = A[1]\n    for i in range(2, n):\n        new_excl = max(excl, excl + A[i - 1])\n        incl, excl = excl, max(incl, new_excl)\n    return max(incl, excl)\n\n# Example usage:\nA = [1, 2, 3, 5, 1, 2, 4]\nprint(max_sum_subseq(A))  # Output: 6 (by choosing 2 and 4) ",
        "generated_testcode": "assert max_sum_subseq(A=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return n[-1]\n\ndef sort_by_last_element(tuples):\n    return sorted(tuples, key=last)\n\n\n# Example usage:\ntuples = [(2, 3, 4), (1, 2, 1), (4, 0, 5), (2, 3, 1)]\nprint(sort_by_last_element(tuples))  # Output: [(4, 0, 5), (2, 3, 1), (2, 3, 4), (1, 2, 1)]\n\n\n# This function takes a list of non-empty tuples and returns a new list with the tuples sorted in increasing order by their last element. It does this by using the `sorted()` function and passing in a `key` argument that specifies the `last()` function as the key to use for sorting. The `last()` function takes a tuple and returns its last element, so `sorted()` will use the last element of each tuple to compare and sort the tuples. ",
        "generated_testcode": "assert last([(1, 3, 2), (3, 1, 4), (2, 4, 1)] ) == [(2, 4, 1), (1, 3, 2), (3, 1, 4)]\n\n\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    words = sentence.split() \n    if word in words: \n        return True \n    else: \n        return False \n  \n# testing the function with sample inputs \nsentence = \"The quick brown fox jumps over the lazy dog\"\nword = \"fox\"\nif is_Word_Present(sentence, word): \n    print(\"Word is present in the sentence\") \nelse: \n    print(\"Word is not present in the sentence\") \n    \nword = \"cat\"\nif is_Word_Present(sentence, word): \n    print(\"Word is present in the sentence\") \nelse: \n    print(\"Word is not present in the sentence\") ",
        "generated_testcode": "assert is_Word_Present(sentence = \"I am a Python Programmer\", word = \"Python\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 1:\n        return []\n    return numbers[:n]\n\n# Test the function with an example\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(extract_elements(numbers, 3)) #[1, 2, 3]\n\nprint(extract_elements(numbers, 5)) #[1, 2, 3, 4, 5, 6, 7]\nprint(extract_elements(numbers, 1)) #[1]\nprint(extract_elements(numbers, 0)) #[]\nprint(extract_elements(numbers, len(numbers)) ) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert extract_elements(list(range(10), 3) == [0, 1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    for i in range(1,n-1): \n        if arr[i]>arr[i+1]: \n            return False\n    return True\n\n# Driver code \narr = [3, 2, 1, 1, 4, 5, 6] \nn = len(arr) \nif check(arr,n): \n    print(\"Sorted\") \nelse: \n    print(\"Not Sorted\") ",
        "generated_testcode": "assert check(arr=[1, 3, 2, 5, 4, 6, 7, 2, 8], n=6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return string[0].isdigit()\n\n# Test the function\nprint(match_num(\"123abc\")) # True\nprint(match_num(\"abc123\")) # False\nprint(match_num(\"123 456\")) # True\nprint(match_num(\"123def\")) # True\nprint(match_num(\"abc def 123\")) # False\nprint(match_num(\"123 456 def\")) # True\nprint(match_num(\"1234\")) # True\nprint(match_num(\"123\")) # True ",
        "generated_testcode": "assert match_num(string) == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = n\n    while True:\n        found = True\n        for j in range(1, n+1):\n            if i % j != 0:\n                found = False\n                break\n        if found:\n            return i\n        i += 1\n\nprint(smallest_multiple(10)) ",
        "generated_testcode": "assert smallest_multiple(1) == 1\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for key in d2.keys():\n        if key in d1:\n            d1[key] += d2[key]\n        else:\n            d1[key] = d2[key]\n    return d1\n            \n# example usage:\nd1 = {'a': 1, 'b': 2, 'c': 3}\nd2 = {'b': 4, 'c': 6, 'd': 5}\nresult = add_dict(d1,d2)\nprint(result) # should print {'a': 1, 'b': 6, 'c': 9, 'd': 5} ",
        "generated_testcode": "assert add_dict({'a':1, 'b':2, 'c':3}, {'b':4, 'c':5, 'd':6}) == {'a':1, 'b':6, 'c':8, 'd':6}\n\n\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(1, n+1): \n        # Convert the decimal number to binary \n        # string and count the occurrence of 0 \n        bin_str = bin(i)[2:] \n        #print(bin_str) \n        count += bin_str.count('0') \n    return count \n  \n# Driver code \nn = 10\nprint(count_Unset_Bits(n)) ",
        "generated_testcode": "assert count_Unset_Bits(10) == 8\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n\n# Test the function with different values\nprint(even_num(2) == True)\nprint(even_num(3) == False)\nprint(even_num(0) == True)\nprint(even_num(1000000000) == True)\nprint(even_num(10000001) == False)\nprint(even_num(1000000011) == True) ",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    fact=1\n    for i in range(start,end+1):\n        fact=fact*i\n    return fact\ndef sum_of_squares(n):\n    sum=0\n    for i in range(n+1):\n        for j in range(i+1):\n            sum+=((factorial(2*i,2*j)*factorial(2*i-2*j,i-j))//(factorial(i,j))**2)\n    return sum\nn=int(input(\"Enter n: \"))\nprint(\"Sum of squares of binomial coefficients upto n terms is: \",sum_of_squares(n)) ",
        "generated_testcode": "assert factorial(0, 5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'^https?://(?P<subdomain>\\w+)\\.telegraph\\.co\\.uk/.*?/(?P<year>\\d{4})/(?P<month>\\d{2})/(?P<day>\\d{2})/'\n    match = re.match(pattern, url)\n    if match:\n        return {\n            'year': match.group('year'),\n            'month': match.group('month'),\n            'day': match.group('day')\n        }\n    else:\n        return None\n\n# Example usage:\nurl = 'https://www.telegraph.co.uk/news/2019/08/05/paris-rips-giroud-crystal-palace-arsenal-hands-dropped-trophy/'\nprint(extract_date(url))  # Output: {'year': '2019', 'month': '08', 'day': '05'} ",
        "generated_testcode": "assert extract_date(r'https://www.example.com/2021/01/31/') == ('2021', '01', '31')\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    num = 1\n    while n > 0:\n        if is_lucky(num):\n            print(num)\n            n -= 1\n        num += 1\n\ndef is_lucky(num):\n    digits = [int(d) for d in str(num)]\n    return sum(digits) == 7 or sum(digits) == 11\n\n\n# Example usage:\nlucky_num(3)  # Output: 7 11 10\n\n\n# Test cases\nprint(is_lucky(7))  # True\nprint(is_lucky(13)) # False\nprint(is_lucky(123)) # False\nprint(is_lucky(2020)) # False\nprint(is_lucky(11))  # True\nprint(is_lucky(12))  # False\nprint(is_lucky(1343)) # True ",
        "generated_testcode": "assert lucky_num(1) == [1]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    low = 0\n    high = n - 1\n    while low <= high: \n        mid = (low + high) // 2\n        if arr[mid] == mid: \n            return mid \n        elif arr[mid] < mid: \n            low = mid + 1\n        else: \n            high = mid - 1\n    return -1\n\n#Testing the code with sample input\narr = [0, 1, 2, 3, 4, 5, 6, 6, 7, 8] \nn = len(arr) \nprint(find_fixed_point(arr, n)) ",
        "generated_testcode": "assert find_fixed_point(arr=[1, 2, 3, 4, 5, 3], n=5) == 3\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    num_str = str(num)\n    mid = len(num_str) // 2\n    for i in range(mid):\n        if num_str[i] != '9':\n            if num_str[len(num_str)-i-1] == num_str[i]:\n                # find the first digit that can be decreased\n                j = i\n                while j >= 0:\n                    if num_str[j] == '0':\n                        j -= 1\n                    else:\n                        num_str = num_str[:i] + str(int(num_str[i]) - 1) * (j+1) + num_str[len(num_str)-j-1:]\n                        break\n                else:\n                    num_str = num_str[:i] + '9' * (j+1) + num_str[len(num_str)-j-1:]\n            else:\n                num_str = num_str[:i] + num_str[i] * (len(num_str)-i)\n    else:\n        num_str = '9' * (len(num_str) - 1) + '0' + '9' * (len(num_str) - 1)\n    return int(num_str)\n\n\n# test the function\nprint(previous_palindrome(12345)) # output: 1221\nprint(previous_palindrome(1221)) # output: 1",
        "generated_testcode": "assert previous_palindrome(12321) == 12121\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 1 or m > 12 or y < 1 or y > 999999:\n        return False\n    if m in [4, 6, 9, 11, 11]:\n        if d < 1 or d > 30:\n            return False\n    elif m == 2:\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            if d < 1 or d > 29:\n                return False\n        else:\n            if d < 1 or d > 28:\n                return False\n    else:\n        if d < 1 or d > 31:\n            return False\n    return True\n\n# Test cases\nprint(check_date(2, 30, 2021)) # Should return False\nprint(check_date(2, 29, 2021)) # Should return False\nprint(check_date(2, 29, 2020)) # Should return True\nprint(check_date(4, 31, 2021)) # Should return False\nprint(check_date(4, 30, 2021)) # Should return True\nprint(check_date(13, 5, 2021)) # Should return False\nprint(check_date(11, 31, 2021)) # Should return True ",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_heap = []\n    min_heap = []\n    for num in nums:\n        if not max_heap or num <= -max_heap[0]:\n            heapq.heappush(max_heap, -num)\n        else:\n            heapq.heappush(min_heap, num)\n        if len(max_heap) - len(min_heap) > 1:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        elif len(min_heap) > len(max_heap):\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n    return max(nums[0] * nums[1] * nums[2], max_heap[0] * min_heap[0] * nums[-1]) if len(max_heap) == len(min_heap) else max_heap[0] * min_heap[0] * max_heap[1] ",
        "generated_testcode": "assert maximum_product(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    res = 1\n    if (k > n - k): \n        k = n - k \n    for i in range(k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res \ndef find_combinations(n, k): \n    return binomial_coeff(n, k) \ndef find_lnm(n): \n    l = 0\n    m = 0\n    for k in range(0, n+1): \n        if find_combinations(n, k) % 2 != 0: \n            l = k \n            m = n - k \n            return l, m \n    return l, m \n  \nn = 5\nl, m = find_lnm(n) \nprint(\"l =\", l, \", m =\", m) ",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        num = int(string[-1])\n        return True\n    except ValueError:\n        return False\n\n# Test the function with some examples\nprint(end_num(\"hello5\"))  # Should return True\nprint(end_num(\"hello world\"))  # Should return False\nprint(end_num(\"12345\"))  # Should return True\nprint(end_num(\"hello\"))  # Should return False\nprint(end_num(\"12hello\"))  # Should return False ",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(s)  \n    if n < 2:  # if string length is less than two, it is not possible to have alternating characters \n        return False \n    for i in range(n-1): \n        if s[i] == s[i+1]:  # if adjacent characters are same \n            return False\n    return True \n  \n# test the function with sample inputs \nprint(is_Two_Alter(\"abcde\"))   # True\nprint(is_Two_Alter(\"abccba\"))  # True\nprint(is_Two_Alter(\"abba\"))   # False\nprint(is_Two_Alter(\"abbaa\"))  # False\nprint(is_Two_Alter(\"abc\"))   # True\nprint(is_Two_Alter(\"ab\"))    # True ",
        "generated_testcode": "assert is_Two_Alter(s=\"abab\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    positive_nums = []\n    negative_nums = []\n    zero_count = 0\n    for num in array_nums:\n        if num > 0:\n            positive_nums.append(num)\n        elif num < 0:\n            negative_nums.append(num)\n        else:\n            zero_count += 1\n    \n    negative_nums.sort(key=lambda x: abs(x))\n    result = negative_nums + positive_nums + [0] * zero_count\n    return result\n\n# Test the function with an example array\narr = [2, -3, 0, 1, -5, 4, 0, -2, -1, 5, 0, 7, -8]\nprint(rearrange_numbs(arr)) ",
        "generated_testcode": "assert rearrange_numbs(array_nums=[-1, 2, -3, 4, 5, 6, -7, 8, 9, -10]) == [9, -1, 4, -3, 5, 2, -7, 8, -10]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    found = False\n    for i in range(0, arr_size-2): \n        # Fix the first element \n        for j in range(i+1, arr_size-1): \n            # Fix the second element \n            for k in range(j+1, arr_size): \n                # Find the third element \n                if A[i] + A[j] + A[k] == sum: \n                    # Print the triplet \n                    print(A[i], A[j], A[k]) \n                    found = True\n                    break\n            if found: \n                break\n    return found\n\n# Driver code \nA = [1, 2, 4, 3, 5, 7, 6, 8] \nsum = 14\narr_size = len(A) \nif find_triplet_array(A, arr_size, sum): \n    print(\"Triplet found\") \nelse: \n    print(\"Triplet not found\") ",
        "generated_testcode": "assert find_triplet_array(A, arr_size, sum) == True or False\n\n# Test case 1:\nA = [1, 2, 4, 3, 6, 5, 7]\narr_size = 5\nsum = 10\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    uppercase_lowercase = []\n    uppercase = False\n    current = \"\"\n    for i in range(len(text) - 1):\n        if text[i].isupper() and not text[i+1].isupper():\n            current += text[i]\n            uppercase = True\n        elif uppercase and text[i].islower():\n            current += text[i]\n        else:\n            if current != \"\":\n                uppercase_lowercase.append(current)\n                current = \"\"\n                uppercase = False\n    \n    if current != \"\":\n        uppercase_lowercase.append(current)\n        \n    result.append(uppercase_lowercase)\n    return result\n\n# Test cases\nprint(text_uppercase_lowercase(\"PythonExercises\")) # [\"Python\"]\nprint(text_uppercase_lowercase(\"PHPExercises\")) # [\"PHP\"]\nprint(text_uppercase_lowercase(\"JavaScriptExercises\")) # [\"JavaScript\"]\nprint(text_uppercase_lowercase(\"HTMLExercises\")) # [\"HTML\"]\nprint(text_uppercase_lowercase(\"CSSExercises\")) # [\"CSS\"] ",
        "generated_testcode": "assert text_uppercase_lowercase([\"Hello, World!\", \"Python is fun\", \"Java is also fun\", \"I love Python\", \"Java is not Python\"] == [\"Python is\", \"Java is\"]\n\n\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # create a table to store the results of subproblems \n    count = [0] * (n + 1)  \n    count[0] = 1  \n    # iterate through all the coins \n    for i in range(m):  \n        for j in range(S[i], n + 1):  \n            # add the number of ways to get the change using the previous coin \n            count[j] += count[j - S[i]]  \n    return count[n] ",
        "generated_testcode": "assert coin_change(5, [1, 2, 3], 4) == 2 # There are 2 ways to make change for 4 using the coins [1, 2, 3]\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for item in items:\n        result *= item\n    return result\n\n#test the function\nprint(multiply_list([1,2,3,4,5])) # Output: 120\nprint(multiply_list([10,20,30])) # Output: 60000\nprint(multiply_list([1,2,3,4,5,6,7,8])) # Output: 3628880 ",
        "generated_testcode": "assert multiply_list([] ) == 1\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = [t for t in test_list if not all(x is None for x in t)]\n    return tuple(result)\n\n# Test the function with the following code:\ntest_list = (('a', None, 3, 'None'), (None, None, None), ('b', 'None', 'c'), (None, 'd'))\nprint(remove_tuple(test_list)) # Output: (('a', None, '3', 'None'), ('b', 'None', 'c')) ",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Splits a tuple into smaller chunks of size N.\n    \"\"\"\n    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\n\n# Test the function with sample input\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nN = 2\nprint(chunk_tuples(test_tup, N))  # Output: [(1, 2), (3, 4), (5, 6), (7, 8), (9,)] ",
        "generated_testcode": "assert chunk_tuples(('abcd', 2) == [('a', 'b'), ('c', 'd')]\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(arr) < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    max_num = max(arr[0], arr[1])\n    min_num = min(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        current_max = max_num * arr[i]\n        current_min = min_num * arr[i]\n        \n        max_num = max(arr[i], current_max, current_min)\n        min_num = min(arr[i], current_max, current_min)\n        \n        max_product = max(max_product, max_num)\n        \n    return max_product\n\n\n# Test the function with an example array\narr = [1, 10, -5, -3, 7, 6, -2]\nprint(max_product(arr)) # Output: 350\n\n\n# Test the function with an array containing negative numbers and zero\narr = [-4, -2, 0, 5, -1, -6]\nprint(max_product(arr)) # Output: 20 ",
        "generated_testcode": "assert max_product(arr=[1, 2, 3, 4, 5, 6, 7]) == 21\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return m+n-dp[m][n]\n\n# Function to find shortest string that has both str1 and str2 as subsequences\ndef shortest_common_supersequence(str1, str2, n, m):\n    # Length of the shortest string that has both str1 and str2 as subsequences\n    l = super_seq(str1, str2, n, m)\n    # Initialize the shortest string with blank string\n    shortest_str = [''] * (l+1)\n    shortest_str[l] = ''\n    # Start filling the shortest string from the last character\n    i = m\n    j = n\n    idx = l\n    while i > 0 and j > 0:\n        # If the characters in str1 and str2 are same, the character goes to the shortest string\n        if str1[i-1] == str2",
        "generated_testcode": "assert super_seq([\"abc\", \"abd\", 3, 3] == 4\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with different values\nprint(max_of_two(4, 7))  # Output: 7\nprint(max_of_two(9, 12)) # Output: 12\nprint(max_of_two(11, 1)) # Output: 11\n\nprint(max_of_two(0, -2))  # Output: 0\n\n\n# Function to find the maximum of three numbers\ndef max_of_three( x, y, z ):\n    if x > y and x > z:\n        return x\n    elif y > z:\n        return y\n    else:\n        return z\n\n# Test the function with different values\nprint(max_of_three(4, 7, 9))    # Output: 9\nprint(max_of_three(0, -2, 11))  # Output: 11\nprint(max_of_three(0, 0, 0))   # Output: 0\n\n# Create a function to find the maximum of any number of arguments\ndef max_of_args(*args):\n    max_num = args[0]\n    for num in args[1:]:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n# Test the function with different values\nprint(max_of_args(4, 7, 9))         # Output: 9",
        "generated_testcode": "assert max_of_two(10, 20 ) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n#Test the function\nprint(mutiple_tuple((1,2,3,4,5)) # Output: 120 ",
        "generated_testcode": "assert mutiple_tuple(()) == 1\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1 \n    for i in range(k): \n        res = res * (n-i) / (k-i) \n    return int(res) \ndef rencontres(n): \n    return binomial_coeffi(n, 2) + binomial_coeffi(n, 4) + binomial_coeffi(n, 6) + binomial_coeffi(n, 8) + binomial_coeffi(n, 10) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "\t    self.data = data \n\t    self.left = None\n\t    self.right = None\n\ndef height(root):\n    if root is None:\n        return 0\n    else:\n        return 1 + max(height(root.left), height(root.right)) ",
        "generated_testcode": "assert __init__(1) == 0\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dd, mm, yyyy = map(int, dt.split(\"-\"))\n    return f\"{dd:02}-{mm:02}-{yyyy}\"\n\n# Test the function\nprint(change_date_format(\"20221-12-05\"))  # Should print \"05-12-2021\"\nprint(change_date_format(\"1995-09-10\"))  # Should print \"10-09-1995\"\n\n# Output\n# 05-12-2021\n# 10-09-1995 ",
        "generated_testcode": "assert change_date_format(2021-01-01) == \"01-01-2021\"\n\n# The function should work for any date in the format yyyy-mm-dd. ",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in tuplex:\n        if i == value:\n            count += 1\n    return count\n\n#test the function\nmy_tuple = (1,2,3,4,5,2,6,2,7,1,2,3,8,2,9,2)\nprint(count_tuplex(my_tuple,2))  # Output: 4 ",
        "generated_testcode": "assert count_tuplex((\"abcaaabbbac\", \"a\") == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r\"^[a-z]*[a-z]b*$\"\n    result = re.search(pattern, text)\n    return result != None\n\nprint(text_match(\"aabbbbc\"))  # True\nprint(text_match(\"aabAbbbc\")) # False\nprint(text_match(\"ab\"))     # True\nprint(text_match(\"bbb\"))    # False\nprint(text_match(\"abc\"))    # False\nprint(text_match(\"\"))      # True ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**3\n    return sum\n\n# Test the function with some examples\nprint(sum_series(1)) # 1\nprint(sum_series(2)) # 9\nprint(sum_series(3)) # 36\nprint(sum_series(4)) # 100\nprint(sum_series(5)) # 2255\nprint(sum_series(6)) # 315\nprint(sum_series(7)) # 4441\nprint(sum_series(8)) # 686\nprint(sum_series(9)) # 987\nprint(sum_series(10)) # 19446 ",
        "generated_testcode": "assert sum_series(1) == 1\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in l:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n\n# Test the function with sample data\nl = ['apple', 'banana', 'apple', 'cherry', 'banana', 'cherry', 'orange', 'orange']\nprint(remove_duplic_list(l))  # Output: ['apple', 'banana', 'cherry', 'orange'] ",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"apple\", \"banana\", \"orange\", \"apple\"]) == [\"apple\", \"banana\", \"orange\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n\n# Test the function with an example\nprint(camel_to_snake(\"camelCaseStringConversion\"))  # Output: camel_case_string_conversion\nprint(camel_to_snake(\"helloWorld\"))  # Output: hello_world\nprint(camel_to_snake(\"helloWorldOneTwoThree\"))  # Output: hello_world_one_two_three\nprint(camel_to_snake(\"helloWorld123\"))  # Output: hello_world123\nprint(camel_to_snake(\"hello123World\"))  # Output: hello123_world ",
        "generated_testcode": "assert camel_to_snake(text) == expected_output\n\n# Test case 1\ntext = \"helloWorld\"\nexpected_output = \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dp = [[0 for x in range(m+1)] for y in range(n+1)] \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                dp[i][j] = 1\n            elif i == 1 or j == 1: \n                dp[i][j] = 1\n            else: \n                dp[i][j] = dp[i-1][j]+dp[i][j-1]+dp[i-1][j-1]\n    return dp[n][m] ",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\n    \n# testing the function\nprint(series_sum(4)) # Output: 30\nprint(series_sum(5)) # Output: 55\nprint(series_sum(10)) # Output: 385\n\n\n# Using lambda function\nseries_sum = lambda n: sum([i**2 for i in range(1,n+1)] )\nprint(series_sum(4)) # Output: 30\nprint(series_sum(5)) # Output: 55\nprint(series_sum(10)) # Output: 385 ",
        "generated_testcode": "assert series_sum(1) == 1\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    sorted_list = []\n    for i in ord_list:\n        for j in test_list:\n            if j[0] == i:\n                sorted_list.append(j)\n                test_list.remove(j)\n    return sorted_list\n\n# Example usage:\ntest_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\nord_list = ['e', 'b', 'd', 'a', 'c']\nresult = re_arrange_tuples(test_list, ord_list)\nprint(result) # Output: [('e', 5), ('b', 2), ('d', 4), ('a', 1), ('c', 3)] ",
        "generated_testcode": "assert re_arrange_tuples(\n    [(\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5), (\"kiwi\", 3, 1)],\n    [3, 1, 2, 5]\n) == [(\"kiwi\", 3, 1), (\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5)]\n\n# The output should be [(\"kiwi\", 3, 1), (\"apple\", 2, 3), (\"banana\", 4, 2), (\"orange\", 1, 5)] ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char = ''\n    max_count = 0\n    for key, value in char_count.items():\n        if value > max_count:\n            max_count = value\n            max_char = key\n    return max_char, max_count\n\n\n# Test the function with an example\nstr1 = \"Hello World\"\nchar, count = max_char(str1)\nprint(\"Most common character in\", str1, \"is\", char, \"with\", count, \"times\") ",
        "generated_testcode": "assert max_char(input(\"Enter a string: \") == 'e'\n\n# Test case 1:\n# Input: \"Hello, World!\"\n# Output: 'l'\n\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    i = p\n    j = p\n    k = p\n    min_diff = float('inf')\n    while i < q and j < q and k < r:\n        diff = abs(A[i] - B[j]) + abs(B[j] - C[k]) + abs(C[k] - A[i])\n        if diff < min_diff:\n            min_diff = diff\n            result = (A[i], B[j], C[k])\n        if A[i] < B[j]:\n            i += 1\n        elif B[j] < C[k]:\n            j += 1\n        else:\n            k += 1\n    return result\n\n# Test cases\nA = [1, 3, 15, 17, 25, 30, 35]\nB = [2, 6, 12, 19, 28, 32, 40]\nC = [4, 8, 14, 23, 26, 33, 42]\nprint(find_closet(A, B, C, 0, len(A), len(B))) # Output: (12, 14, 14) ",
        "generated_testcode": "assert find_closet(A, B, C, p, q, r) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(models, key=lambda x: x['age'])\n\n# Example usage:\n# models = [\n#     {'make': 'Nissan', 'model': 'Sentra', 'year': 2016, 'age': 3},\n#     {'make': 'Ford', 'model': 'Fusion', 'year': 2015, 'age': 5},\n#     {'make': 'Tesla', 'model': 'S', 'year': 2020, 'age': 2},\n#     {'make': 'Honda', 'model': 'Civic', 'year': 2019, 'age': 1},\n# ]\n\n# sorted_models(models) ",
        "generated_testcode": "assert sorted_models(models) == [{'name': 'iPhone 11', 'year': 2020, 'price': 9999}, {'name': 'Samsung S20', 'year': 2020, 'price': 749}, {'name': 'iPhone 12', 'year': 2020, 'price': 10999}, {'name': 'Samsung S20 Ultra', 'year': 2020, 'price': 8999}]\n\n# The testing code should ",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\ndef heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n# Test the code\narr = [4, 2, 1, 6, 5, 3, 7, 8, 9]\nheap_sort(arr)\nn = len(arr)\nprint(\"Sorted array is:\", arr) ",
        "generated_testcode": "assert heap_sort(arr) == sorted(arr)\n\n# The testing code should create an array of at least 5 elements, call the heap_sort function on it, and ",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in num:\n        if type(i) != tuple:\n            count += 1\n        else:\n            return count\n    return count\n\n# Test the function\nmy_list = [1, 2, 3, 4, (1, 2, 3), 5, 6, 7, 8, (4, 5), 9, 10]\nprint(count_elim(my_list)) # Output: 4 ",
        "generated_testcode": "assert count_elim([1, 2, 3, (4, 5, 6)] ) == 3\n\n\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Checks if any element of the tuple is present in the list.\n\n\n    Args:\n    test_tup: tuple of elements to be checked\n    check_list: list to check against\n\n\n    Returns:\n    True if any element of the tuple is present in the list, else False\n    \"\"\"\n    return any(elem in check_list for elem in test_tup) ",
        "generated_testcode": "assert check_element(('apple', ['apple', 'banana', 'cherry']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    combined = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            heapq.heappush(combined,num1[i])\n            i+=1\n        else:\n            heapq.heappush(combined,num2[j])\n            j+=1\n    while i < len(num1):\n        heapq.heappush(combined,num1[i])\n        i+=1\n    while j < len(num2):\n        heapq.heappush(combined,num2[j])\n        j+=1\n    return combined\n\n#Testing\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8,10]\nprint(combine_lists(num1,num2)) #[1,2,3,4,5,6,7,8,9,10]\n\nnum3 = [1,3,5,7,9]\nnum4 = [10,12,14,16]\nprint(combine_lists(num3,num4)) #[1,3,5,7,9,10,12,14,16]\n\nnum5 = [1,3,5,7,9]\nnum6 = [2,4,6,8,10]\nprint(combine_lists(num5,",
        "generated_testcode": "assert combine_lists(sorted([1,3,5,7,9],sorted([2,4,6,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n\n\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    numbers = [int(s) for s in text.split() if s.isdigit()]\n    for i, num in enumerate(numbers):\n        print(f\"Number: {num} at position {i+1}\")\n\n\ntext = input(\"Enter a string: \")\nnum_position(text)\n\n\n# example usage\n# Enter a string: Hello 123 world 456\n# Number: 123 at position 1\n# Number: 456 at position 3 ",
        "generated_testcode": "assert num_position(text=\"Hello 123 world 456\") == [(123, 6), (456, 13)]\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    my_set = set(t)\n    return my_set\n\n# Example usage:\nmy_tuple = (4, 5, 6, 7, 8, 4, 5, 9, 10, 10, 10)\nresult_set = tuple_to_set(my_tuple)\nprint(result_set)  # Output: {4, 5, 6, 7, 8, 9, 10}\n\n\n# The set() constructor can be used to convert a tuple into a set. It removes duplicates and the order is not preserved. ",
        "generated_testcode": "assert tuple_to_set(()) == set()\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    from collections import Counter\n    c = Counter(s.split())\n    return c.most_common(a)\n\n# Example usage:\ntext = \"apple apple apple orange orange apple grape apple banana orange grape grape grape grape\"\na = 2\nprint(most_common_elem(text,a)) # Output: [('grape', 3), ('apple', 2)]\n# In the given text, \"grape\" and \"apple\" are the most common elements and they appear 3 and 2 times respectively. ",
        "generated_testcode": "assert most_common_elem([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"date\", \"cherry\", \"date\", \"date\"] , 2) == [(\"cherry\", 3), (\"apple\", 2)]\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # create a variable to store the length of the shortest word\n    shortest_word_length = len(list1[0])\n    \n    # loop through the list of words and compare their length to the current shortest word length\n    for word in list1:\n        if len(word) < shortest_word_length:\n            shortest_word_length = len(word)\n    \n    return shortest_word_length\n\n\n# example usage\nprint(len_log([\"apple\", \"banana\", \"orange\", \"cat\", \"dog\", \"elephant\"]) == 3) # should return True\nprint(len_log([\"hi\", \"hello\", \"goodbye\", \"nihao\", \"hey\"]) == 2) # should return True\nprint(len_log([\"python\", \"is\", \"awesome\"]) == 2) # should return True ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"elephant\", \"eggplant\"]) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return tup1[index]\n\n#example\ntup1 = (1, 2, 3, 4, 5)\nprint(get_item(tup1,2))\n\n\n#write a function to get the length of a tuple\ndef get_length(tup1):\n    return len(tup1)\n\n#example\ntup1 = (1, 2, 3, 4, 5)\nprint(get_length(tup1))\n\n#write a function to check whether an item is present in a tuple or not\ndef is_present(tup1,item):\n    return item in tup1\n#example\ntup1 = (1, 2, 3, 4, 5)\nprint(is_present(tup1,3))\n#example 2\ntup1 = (1, 2, 3, 4, 5)\nprint(is_present(tup1,6))\n\n#write a function to get the index of an item in a tuple\ndef get_index(tup1,item):\n    return tup1.index(item)\n#example\ntup1 = (1, 2, 3, 4, 5)\nprint(get_index(tup1,3))\n#example 2\ntup1 = (1, 2, 3, 4, 5)\nprint(get_index(tup1,6)) #this will result in an error because 6 is not",
        "generated_testcode": "assert get_item((\"hello\", 1) == \"e\"\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(len(str(i)) for i in tup)\n\ndef sort_tuple(tup):\n    tup.sort(key=count_digs)\n    return tup\n\n# Example usage:\ntup = (12, 3, 7, 5678, 5, 9, 8, 100, 23, 34)\nprint(sort_tuple(tup)) # Output: (3, 5, 9, 12, 10, 8, 23, 7, 5678) ",
        "generated_testcode": "assert count_digs(()) == 0\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    # Chinese Zodiac signs and their years\n    zodiac_signs = {\n        \"Ox\": range(19000, 1924),\n        \"Tiger\": range(1925, 1941),\n        \"Rabbit\": range(1942, 1958),\n        \"Dragon\": range(1959, 1976),\n        \"Snake\": range(1977, 1990),\n        \"Horse\": range(1991, 2008),\n        \"Goat\": range(2009, 2022),\n        \"Monkey\": range(2023, 2035),\n        \"Rooster\": range(2036, 2049),\n        \"Dog\": range(2050, 2061),\n        \"Pig\": range(2062, 2074),\n        \"Rat\": range(2075, 2086),\n        \"Ox\": range(2087, 2099)\n    }\n    # Loop through each sign and see if the year is in the range\n    for sign, years in zodiac_signs.items():\n        if year in years:\n            return sign\n    return \"Unknown sign\" ",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Finds the maximum similar indices of two lists of tuples.\n\n    :param test_list1: list of tuples\n    :param test_list2: list of tuples\n    :return: a list of maximum similar indices\n    \"\"\"\n    max_similar = []\n    max_similar_val = 0\n    max_similar_indices = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            similar = 0\n            for k in range(min(len(test_list1[i]), len(test_list2[j]))):\n                if test_list1[i][k] == test_list2[j][k]:\n                    similar += 1\n            if similar == max_similar_val:\n                max_similar.append((i, j))\n            elif similar > max_similar_val:\n                max_similar_val = similar\n                max_similar = [(i, j)]\n    return max_similar\n\n# Example usage:\ntest_list1 = [(1,2,3,4,5), (2,3,4,5,6), (3,4,5,6,7)]\ntest_list2 = [(1,2,4,5,6), (2,3,4,5,6), (1,2,3,4)]\nprint(max_similar_indices(test_list1, test_list2))  # Output: [(1, 1), (2",
        "generated_testcode": "assert max_similar_indices([(1, 2), (3, 4), (5, 6), (7, 8)], [(2, 3), (4, 5), (6, 7), (8, 9)] ) == [(1, 0), (2, 2)]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return (fac[n]*modinverse(fac[r]*fac[n-r]%p, p) % p) % p \n  \n# Function to calculate modular inverse of a number \ndef modinverse(a, p): \n    return pow(a, p-2, p) \n  \n# Function to calculate factorials of all numbers less than or equal to n \ndef factorial(n): \n    f = [0]*(n+1) \n    f[0] = 1\n    for i in range(1, n+1): \n        f[i] = (f[i-1] * i) % p \n    return f \n  \n# Driver code to test the above functions \nn = 10\nr = 2\np = 13\nfac = factorial(n) \nprint(\"Value of nCr mod p is:\", nCr_mod_p(n, r, p)) ",
        "generated_testcode": "assert nCr_mod_p(10, 2, 13) == 6\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    ar.sort()\n    res = [] \n    for i in range(n): \n        res.append([ar[i]])\n    ans = n\n    for i in range(n): \n        for j in range(i+1, n): \n            for k in range(i, n): \n                if ar[i] != ar[k]: \n                    res.append(res[i] + [ar[k]])\n    for i in range(1, len(res)): \n        for j in range(i+1, len(res)): \n            if set(res[i]) == set(res[j]): \n                ans -= 1\n    return ans ",
        "generated_testcode": "assert subset([\"apple\", \"banana\", \"orange\", \"grape\", \"apple\", \"banana\", \"orange\", \"apple\", \"orange\"], 3) == 2\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if(actual_cost < sale_amount):\n        profit = sale_amount - actual_cost\n        return profit\n    else:\n        return None\n\nactual_cost = float(input(\"Enter the actual cost: \"))\nsale_amount = float(input(\"Enter the sale amount: \"))\n\nprofit = profit_amount(actual_cost,sale_amount)\nif(profit != None):\n    print(\"Profit:\",profit)\nelse:\n    print(\"No profit\") ",
        "generated_testcode": "assert profit_amount(1000, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) > n:\n        return True\n    else:\n        return False\n\nprint(is_abundant(12)) # True\nprint(is_abundant(18)) # True\nprint(is_abundant(24)) # False ",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    return re.findall('[A-Z][^A-Z]*', text)\n    \n# Test\nprint(split_list(\"HelloWorld, IAmAString\")) # ['Hello', 'World', ', ', ', 'I', 'Am', 'A', 'String'] ",
        "generated_testcode": "assert split_list(text) == expected_output\n\n# Test case 1\ntext = \"HelloWorld\"\nexpected_output = [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pos = 0\n    while n:\n        pos += 1\n        n >>= 1\n    return pos - 1\n\n# Example usage:\n# n = 10\n# print(get_First_Set_Bit_Pos(n))  # Output: 3 (Binary 1010, so rightmost set bit is at position 3) ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(15) == 3\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    val = [10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n# Test cases\nprint(int_to_roman(3))  # Should be \"III\"\nprint(int_to_roman(9))  # Should be \"IX\"\nprint(int_to_roman(21))  # Should be \"XXI\"\nprint(int_to_roman(444))  # Should be \"XLIV\"\nprint(int_to_roman(789))  # Should be \"DXXVIII\"\nprint(int_to_roman(12234))  # Should be \"MCCXXXIV\" ",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    n = len(lst)\n    for i in lst:\n        sum += i\n    avg = sum/n\n    return avg\n\nlst = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Original list:\",lst)\nprint(\"Average of the list:\",Average(lst)) ",
        "generated_testcode": "assert Average(lst=[1,2,3,4,5,6,7,8,9]) == 5\n\n\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + 1\n    return dp[n]\n\n# Testing the function\nn = 4\nprint(get_noOfways(n)) ",
        "generated_testcode": "assert get_noOfways(2) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 5000, 'M': 10000}\n    total = 0\n    prev_value = 0\n    for c in s:\n        value = roman_dict[c]\n        if value > prev_value:\n            total += value - 2 * prev_value\n        else:\n            total += value\n        prev_value = value\n    return total\n\n# Test cases\nprint(roman_to_int('III')) # 3\nprint(roman_to_int('IV')) # 4\nprint(roman_to_int('IX')) # 9\nprint(roman_to_int('LVIII')) # 58\nprint(roman_to_int('MCMXCIV')) # 1994\n",
        "generated_testcode": "assert roman_to_int(s) == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": " sum = 0 \n  for i in range(n+1): \n    sum += i\n  return sum\n\ndef sum_Even(l, r): \n  sum_even = 0\n  for i in range(l, r+1):\n    if i % 2 == 0:\n      sum_even += i\n  return sum_even\n\nl = 1\nr = 10\nprint(\"Sum of Natural Numbers between\", l, \"and\", r, \"is\", sum_Natural(r))\nprint(\"Sum of Even Numbers between\", l, \"and\", r, \"is\", sum_Even(l, r)) ",
        "generated_testcode": "assert sum_Natural(2, 10) == 30 # Test case 1\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return (18*x**2+14*x*y+4*y**2+2*x+y)\n#Test the function with some values\nprint(discriminant_value(1,2))\nprint(discriminant_value(2,3))\nprint(discriminant_value(1,0))\nprint(discriminant_value(3,4))\n\n#Define a function to find the roots of the quadratic equation\ndef roots(a,b,c):\n    d = discriminant_value(a,b,c)\n    if d < 0:\n        return \"No real roots\"\n    elif d == 0:\n        x = (-b+cmath.sqrt(d))/2\n        return \"One root: \",x\n    else:\n        x1 = (-b+cmath.sqrt(d))/2\n        x2 = (-b-cmath.sqrt(d))/2\n        return \"Two roots: \",x1,\" and \",x2\n#Test the function with some values\nprint(roots(1,2))\nprint(roots(2,3))\nprint(roots(1,0))\nprint(roots(3,4)) ",
        "generated_testcode": "assert discriminant_value(1, 2, 1) == 0\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n\n#test the function with some examples\nprint(word_len(\"Hello\"))\nprint(word_len(\"Python\"))\nprint(word_len(\"Time\"))\nprint(word_len(\"Even\")) ",
        "generated_testcode": "assert word_len(\u201chello\u201d) == False\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return ''.join(['_'+i.lower() if i.isupper() else i for i in text]).lstrip('_')\n\n\n# Test the function with a sample camel case string\ncamel_string = \"helloWorld\"\nprint(camel_to_snake(camel_string)) ",
        "generated_testcode": "assert camel_to_snake(text) == expected_output\n\n# Test case 1\ntext = \"helloWorld\"\nexpected_output = \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    L = list(filter(lambda x: x, tuple1))\n    return tuple(L)\n# test the function\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]))\n\n# output: (('a', 'b'), ('a', 'b', 'c'), 'd')\n\n\n# Alternatively, you can also use list comprehension to achieve the same result:\ndef remove_empty(tuple1):\n    return tuple(x for x in tuple1 if x)\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])\n# output: (('a', 'b'), ('a', 'b', 'c'), 'd') ",
        "generated_testcode": "assert remove_empty(L) == [('a', 'b'), ('a', 'b', 'c'), 'd']\n\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in string:\n        if i in vowels:\n            return True\n    return False\n\nstring = input(\"Enter a string: \")\nif check(string.lower()):\n    print(\"Contains all vowels\")\nelse:\n    print(\"Doesn't contain all vowels\") ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    max_val=[]\n    for i in range(1,N+1):\n        val=A+(B-1)*(i-1)\n        max_val.append(val)\n    return max(max_val)\n\n#Example:\n#Input: A=3, B=2, N=5\n#Output: 17\n#Explanation: After 5 iterations, we can obtain the values {3, 5, 7, 9, 11, 13, 15}, and the maximum value is 17. ",
        "generated_testcode": "assert floor_Max(2, 5, 10) == 10\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][0]:\n                test_list[i] = tuple(list(test_list[i]) + list(test_list[j][1:]))\n                test_list[j] = ()\n        result.append(test_list[i])\n    return tuple(result)\n\n\n# Test the function with example\ntest_list = ((1, 'apple', 'red'), (1, 'ball', 'yellow'), (2, 'cat', 'green'), (1, 'dog', 'white'), (2, 'elephant', 'gray'), (3, 'fan', 'blue'))\nprint(join_tuples(test_list)) # Output: ((1, 'apple', 'red', 'ball', 'yellow', 'dog', 'white'), (2, 'cat', 'green', 'elephant', 'gray'), (3, 'fan', 'blue')) ",
        "generated_testcode": "assert join_tuples([(1, 2), (1, 3), (1, 4)] ) == [(1, 2, 3, 4)]\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\n# Test the function with different values of x and y\nprint(min_of_two(2, 3)) # Output: 2\nprint(min_of_two(7, 4)) # Output: 4\nprint(min_of_two(1, 1)) # Output: 1 ",
        "generated_testcode": "assert min_of_two(2, 3) == 2\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return n // a + n // b - (n // (a+b) + n // c) + n // (a+b+c) ",
        "generated_testcode": "assert maximum_segments(10, 3, 5) == 2\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    return (test_tup1 + test_tup2)\n\n\n#Test the function with example tuples\ntest_tup1 = ((1, 2, 3), (4, 5, 6))\ntest_tup2 = ((7, 8, 9), (10, 11, 12))\nprint(concatenate_nested(test_tup1, test_tup2)) #Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)) ",
        "generated_testcode": "assert concatenate_nested((\"abc\", (1, 2, 3)) == (\"abc\", (1, 2, 3))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) == 0:\n        return s\n    else:\n        s = s[d:] + s[:d]\n        return s\n\ns = input(\"Enter a string: \")\nd = int(input(\"Enter the number of rotations: \"))\nprint(\"Left rotated string is: \", left_rotate(s,d)) ",
        "generated_testcode": "assert left_rotate(s,d) == \"hello\"\n# Test case 1:\ns = \"hello\"\nd = 2\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    for i in range(1, n):\n        for j in range(len(A[i])):\n            if j == 0:\n                A[i][j] += A[i-1][j]\n            elif j == n-1:\n                A[i][j] += A[i-1][j-1]\n            else:\n                A[i][j] += min(A[i-1][j-1], A[i-1][j])\n    return min(A[-1])\n\n\n# Example usage:\nA = [[2], [3, 4], [6, 5, 7], [9, 2, 8, 10]]\nprint(min_sum_path(A))  # Output: 11 (3 + 5 + 2 + 7 + 1) ",
        "generated_testcode": "assert min_sum_path(\n    [\n        [1],\n        [2, 3],\n        [4, 5, 6],\n        [7, 8, 9, 10]\n    ]) == 11 # Explanation: The minimum sum path is 1 -> 3 -> 5 -> 7\n\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]