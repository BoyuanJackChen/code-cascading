[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        dp[i][0] = float('inf') \n    for j in range(n+1): \n        dp[0][j] = float('inf') \n    dp[0][0] = 0\n    \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = cost[i-1][j-1] + min(dp[i-1][j], dp[i][j-1], dp[i-1][j]) \n            if dp[i][j] != float('inf'): \n                dp[i][j] = min(dp[i][j], dp[i-1][j-1]) \n    \n    return dp[m][n] ",
        "generated_testcode": "assert min_cost(\n    [\n        [1, 2, 3],\n        [4, 8, 2],\n        [1, 5, 3]\n    ], 2, 2) == 6\n\n# The output should be 6. ",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return tuple(result)\n\ntest_tup1 = ('apple', 'banana', 'cherry', 'kiwi', 'orange', 'pear')\ntest_tup2 = ('banana', 'cherry', ' dates', 'fig', 'orange', 'grape', 'kiwi', 'mango')\nprint(similar_elements(test_tup1, test_tup2)) # Output: ('banana', 'kiwi', 'orange')\n\n\n# Using set intersection method\ndef similar_elements_set(test_tup1, test_tup2):\n    return tuple(set(test_tup1).intersection(test_tup2))\n\nprint(similar_elements_set(test_tup1, test_tup2)) # Output: ('banana', 'kiwi', 'orange') ",
        "generated_testcode": "assert similar_elements(('apple', 'banana', 'orange', 'pear', 'grape'), ('banana', 'orange', 'grape', 'kiwi')) == ('banana', 'orange', 'grape')\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# test the function\nprint(is_not_prime(15))  # True\nprint(is_not_prime(10)) # False\nprint(is_not_prime(11)) # False ",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import heapq\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, -num)\n    return [-heapq.heappop(heap) for i in range(n)]\n\n\n# Testing the function\nnums = [4, 10, 100, 6, 5, 80, 25, 3, 25, 1, 30, 25, 100, 100]\nn = 3\nprint(heap_queue_largest(nums,n)) # Output: [100, 100, 80] ",
        "generated_testcode": "assert heap_queue_largest(nums=[4, 10, 8, 2, 5, 1, 6, 3, 9], n=3) == [10, 9, 8]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 1: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1 \n    else: \n        return (count_ways(n-1) + count_ways(n-2)) * 2 \n        # Fill ith position with a vertical domino, then remaining n-1 board can be filled in count_ways(n-1) ways \n        # Fill ith position with a horizontal domino, then remaining n-2 board can be filled in count_ways(n-2) ways \n        # Total ways = count_ways(n-1) + count_ways(n-2) \n\n# Testing the function with sample inputs\nprint(count_ways(3))  # Output: 2 \nprint(count_ways(4))  # Output: 3 \nprint(count_ways(5))  # Output: 5 \nprint(count_ways(6))  # Output: 8 \nprint(count_ways(7))  # Output: 13 \nprint(count_ways(8))  # Output: 21 \nprint(count_ways(9))  # Output: 34 ",
        "generated_testcode": "assert count_ways(0) == 0\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0: \n        return False\n    return (x & (x - 1)) == 0\n    \ndef differ_by_one_bit(num1, num2):\n    if abs(num1 - num2) == 1:\n        return True\n    diff = num1 ^ num2\n    return is_Power_Of_Two(diff)\n\n# Test cases\nprint(differ_by_one_bit(10, 10))  # False\nprint(differ_by_one_bit(10, 11))  # True\nprint(differ_by_one_bit(10, 6))   # False\nprint(differ_by_one_bit(10, 9))   # True\nprint(differ_by_one_bit(10, 11))  # True ",
        "generated_testcode": "assert is_Power_Of_Two (8) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\n# Example usage:\ntext = \"I love programming. It is so much fun.\"\nresult = find_char_long(text)\nprint(result) # ['programming', 'much'] ",
        "generated_testcode": "assert find_char_long(text) == ['Python', 'Programming', 'Pandas', 'DataFrame', 'Series', 'Numpy', 'Scikit-learn', 'Algorithms']\n\n\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x**2, nums)\n\n\n# Test the function with a sample list\nnum_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(square_nums(num_list)) # Output: [1, 4, 9, 16, 25, 36, 49, 64, 81] ",
        "generated_testcode": "assert square_nums(list(range(1, 6)) == [1, 4, 9, 16, 25, 36, 49]\n\n\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "34B",
        "pass": 6,
        "correct": true,
        "answer": "    n = len(str) \n    str += str \n    for i in range(n): \n        if str[i:i+n] == str[n:2*n]: \n            return i \n    return None\n\n# Test the function with example\nstr = \"geeks\"\nprint(\"Minimum number of rotations required: \", find_Rotations(str)) # Output: 1\n\nstr = \"geeksforgeeks\"\nprint(\"Minimum number of rotations required: \", find_Rotations(str)) # Output: 3\nstr = \"ABCABC\"\nprint(\"Minimum number of rotations required: \", find_Rotations(str)) # Output: 2\nstr = \"ABABD\"\nprint(\"Minimum number of rotations required: \", find_Rotations(str)) # Output: None ",
        "generated_testcode": "assert find_Rotations(str) == 0 # Test case 1\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.sort()\n    return list1[:n]\n#example\nlist1 = [4,2,1,6,9,7,5,3,8]\nn=3\nprint(small_nnum(list1,n)) #[1, 2, 3] ",
        "generated_testcode": "assert small_nnum(list1,n) == expected_output\n\n# Write a function to get the n largest items from a dataset.\ndef large_nnum(list1,n):\n    pass\n\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s[::-1]\n        s = s.replace(ch, '', 1)\n        s = s[::-1]\n        return s\n    else:\n        return s\n\n#Test the function with example\ns = \"hello world\"\nch = 'l'\nprint(remove_Occ(s,ch)) #helo worod\n\n\ns = \"hello world\"\nch = 'h'\nprint(remove_Occ(s,ch)) #ello word\n\n\ns = \"hello world\"\nch = 'z'\nprint(remove_Occ(s,ch)) #hello world ",
        "generated_testcode": "assert remove_Occ(s,ch) == \"hello world\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n\n# Test\nmatrix = [[3, 2, 5], [1, 4, 6], [7, 8, 9]]\nprint(sort_matrix(matrix)) # Output: [[1, 4, 6], [3, 2, 5], [7, 8, 9]] ",
        "generated_testcode": "assert sort_matrix(\n    [\n        [3, 2, 1],\n        [6, 5, 4],\n        [9, 8, 7]\n    ]) == [\n        [9, 8, 7],\n        [6, 5, 4],\n        [3, 2, 1]\n    ], \"Example 1\"\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    counts = {}\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n    return counts\n\n# test the function\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\", \"banana\"]\nprint(count_common(words))\n\n\n# output: {'apple': 3, 'banana': 3, 'orange': 2}\n\n\n# Using a dictionary comprehension\ndef count_common(words):\n    return {word: words.count(word) for word in set(words)}\n\n\n# test the function\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"orange\"]\nprint(count_common(words))\n\n# output: {'apple': 3, 'banana': 3, 'orange': 2} ",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 2}\n\n\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    vol = 0.5 * l * b * h\n    return vol\n\n# Test the function with some examples\nprint(find_Volume(10,5,10)) # Should be 250\nprint(find_Volume(2,3,4) ) # Should be 12\nprint(find_Volume(5,6,7) ) # Should be 105 ",
        "generated_testcode": "assert find_Volume(2,3,4) == 12\n\n# Test case 1:\n# Input: \n#   l = 2, b = 3, h = 4\n# Output:\n#   12.0\n\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    current = \"\"\n    for char in text:\n        if char.islower():\n            result.append(current + char)\n            current = \"\"\n        else:\n            current += char\n    if current:\n        result.append(current)\n    return result\n\n# Test the function\nprint(split_lowerstring(\"helloWorld\"))  # Should print [\"hello\", \"World\"]\nprint(split_lowerstring(\"helloWORLD\"))  # Should print [\"hello\", \"WORLD\"]\nprint(split_lowerstring(\"helloWorl123d\"))  # Should print [\"hello\", \"Worl\", \"123\", \"d\"]\nprint(split_lowerstring(\"1234abcDEF\"))  # Should print [\"1234\", \"abc\", \"DEF\"]\nprint(split_lowerstring(\"abc123def\"))  # Should print [\"abc\", \"123\", \"def\"]\nprint(split_lowerstring(\"1234def\"))  # Should print [\"1234\", \"def\"]\nprint(split_lowerstring(\"aBc123DeF\"))  # Should print [\"a\", \"Bc\", \"123\", \"De\", \"F\"] ",
        "generated_testcode": "assert split_lowerstring(text) == expected_output\n\n# Example:\n# text = \"HelloWorld\"\n# expected_output = [\"Hello\", \"World\"]\n# ",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    >>> text_lowercase_underscore(\"A_quick_brown_fox_jumps_over_the_lazy_dog\")\n    ['a', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n    >>> text_lowercase_underscore(\"This_is_a_test_for_underscore_sequences\")\n    ['this', 'is', 'a', 'test', 'for', 'underscore', 'sequences']\n    >>> text_lowercase_underscore(\"There_should_be_no_underscores_at_the_ends_\")\n    ['there', 'should', 'be', 'no', 'underscores', 'at', 'the', 'ends']\n    >>> text_lowercase_underscore(\"_Starting_with_an_underscore\")\n    ['starting', 'with', 'an', 'underscore']\n    \"\"\"\n    words = text.split(\"_\")\n    lower_words = []\n    for word in words:\n        if word != \"\":\n            lower_words.append(word.lower())\n    return lower_words\n\n# Test cases\nprint(text_lowercase_underscore(\"A_quick_brown_fox_jumps_over_the_lazy_dog\"))\nprint(text_lowercase_underscore(\"This_is_a_test_for_underscore_sequences\"))\nprint(text_lowercase",
        "generated_testcode": "assert text_lowercase_underscore([\"a_b_c\", \"d_E_f\", \"g_H_i\", \"J_k_l\", \"m_n_o\"] == [\"a_b_c\", \"J_k_l\"]\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    perimeter = a * 4\n    return perimeter\n\n# or\ndef square_perimeter(a):\n    return a * 4\n\n# Test the function with a=5\nprint(square_perimeter(5)) # Output: 20 ",
        "generated_testcode": "assert square_perimeter(5) == 20\n\n# Write a function to find the area of a square.\ndef square_area(a):\n    pass\n\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(string)\n\ndef remove_chars(string1, string2):\n    list_str1 = str_to_list(string1)\n    list_str2 = str_to_list(string2)\n    for i in list_str2:\n        if i in list_str1:\n            list_str1.remove(i)\n    return ''.join(list_str1)\n\n\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\nresult = remove_chars(string1, string2)\nprint(result)\n\n#Example:\n# Enter the first string: hello\n# Enter the second string: el\n# output: hlo ",
        "generated_testcode": "assert str_to_list(string1, string2) == expected_output\n\n# Test case 1\nstring1 = \"hello\"\nstring2 = \"le\"\nexpected_output = \"ho\"\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num_dict = {}\n    for num in arraynums:\n        if num in num_dict:\n            return True\n        else:\n            num_dict[num] = 1\n    return False\n\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10,10])) #True\nprint(test_duplicate([1,2,3,4,5,6,7,8,9])) #False ",
        "generated_testcode": "assert test_duplicate(arraynums=[1,2,3,4,5,6,7]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "34B",
        "pass": 9,
        "correct": true,
        "answer": "    if x <= 0:\n        return False\n    while x > 1:\n        if x % 2 == 0:\n            x = x / 2\n        else:\n            x = x * 3 + 1\n    return x == 1\n\n# Test the function with a few examples\nprint(is_woodall(9)) # True\nprint(is_woodall(15)) # True\nprint(is_woodall(16)) # True\nprint(is_woodall(10)) # False\nprint(is_woodall(20)) # True\nprint(is_woodall(25)) # True\nprint(is_woodall(28)) # False ",
        "generated_testcode": "assert is_woodall(1) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(1,m+1):\n        print(n*i)\n#Example - multiples_of_num(10,5)\n\n\n#Write a function to find the sum of n natural numbers using recursion\ndef sum_n_natural_numbers(n):\n    if n==0:\n        return 0\n    else:\n        return n+sum_n_natural_numbers(n-1)\n#Example - sum_n_natural_numbers(5)\n\n#Write a function to find the sum of n even numbers using recursion\ndef sum_n_even_numbers(n):\n    if n==0:\n        return 0\n    else:\n        return n+sum_n_even_numbers(n-2)\n#Example - sum_n_even_numbers(10)\n\n#Write a function to find the sum of n odd numbers using recursion\ndef sum_n_odd_numbers(n):\n    if n==0:\n        return 0\n    else:\n        return n+sum_n_odd_numbers(n-2)\n#Example - sum_n_odd_numbers(5)\n\n#Write a function to find the sum of n numbers using recursion\ndef sum_n_numbers(n):\n    if n==0:\n        return 0\n    else:\n        return n+sum_n_numbers(n-1)\n#Example - sum_n_numbers(10)\n\n#Write a function to find the sum of squares of n numbers using recursion\n",
        "generated_testcode": "assert multiples_of_num(5, 10) == [10, 20, 30, 40, 50, 60]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num_dict = {}\n    for num in nums:\n        if num in num_dict:\n            return num\n        else:\n            num_dict[num] = True\n    return -1\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 4, 5, 6, 6])) # 4\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6])) # -1 ",
        "generated_testcode": "assert find_first_duplicate(nums=[1, 2, 3, 4, 5, 6, 2, 1, 7]) == 2\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0 \n    for i in list1: \n        sum = 0\n        for j in i: \n            sum += j \n        if sum > max_sum: \n            max_sum = sum \n    return max_sum ",
        "generated_testcode": "assert maximum_Sum(list1) == 100\n\n# The list1 is defined as follows:\nlist1 = [[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]]\n# The maximum sum of elements in the list of lists is 100, which is the sum of the last sublist [14, 15, 16, 17]. ",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n    \nbinary = input(\"Enter a binary number: \")\ndecimal = binary_to_decimal(binary)\nprint(\"The decimal equivalent of\", binary, \"is\", decimal) ",
        "generated_testcode": "assert binary_to_decimal(10101010) == 42\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    prod = 1\n    for i in range(n): \n        count = 1\n        for j in range(n): \n            if(i != j): \n                if(arr[i] == arr[j]): \n                    count += 1\n        if(count == 1): \n            prod *= arr[i] \n    return prod \n\narr = [1, 2, 3, 4, 5, 6, 1, 2, 3]\nn = len(arr)\nresult = find_Product(arr, n)\nprint(\"Product of non-repeated elements in the given array is:\", result) ",
        "generated_testcode": "assert find_Product(arr=[1,2,3,4,5,6,7,8],n=5) == 280\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a list and an integer k as parameters and returns True if the list has all k elements, else False\n    \"\"\"\n    return len(set(test_list)) == K\n\n\n# Test the function with some examples\nprint(check_k_elements([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10)) # Should return False\nprint(check_k_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)) # Should return True\nprint(check_k_elements([1, 2, 3, 3, 4, 5, 6, 7, 8], 8)) # Should return True\nprint(check_k_elements([1, 2, 3, 3, 4, 5, 5, 6, 7], 8)) # Should return False\nprint(check_k_elements([], 0)) # Should return True\nprint(check_k_elements([], 1)) # Should return False ",
        "generated_testcode": "assert check_k_elements(('abc', 2) == False)\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = [] \n    for string in list: \n        # removing digits from string using regular expression \n        string = ''.join(letter for letter in string if not letter.isdigit()) \n        result.append(string) \n    return result\n\n# Example usage: \ninput_list = ['hello123', 'world456', 'python987', 'programming756'] \nprint(remove(input_list) # Output: ['hello', 'world', 'python', 'programming'] ",
        "generated_testcode": "assert remove([\"hello\", \"world\", \"123\", \"python\", \"12345\", \"123abc\", \"abc456\"]) == [\"hello\", \"world\", \"\", \"python\", \"\", \"abc\"]\n\n\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if k<0 or k>n: \n        return \"Invalid input\"\n    res = 1\n    for i in range(k): \n        res *= n-i\n        res //= i+1\n    return res \n\n#Example: \n#Input: n=5 and k=2\n#Output: 10\n#Explanation: C(5,2) is 10 ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": true,
        "answer": "    # Create a dictionary to store the count of each element in the array\n    mp = {}\n    for i in range(arr_size):\n        if arr[i] in mp:\n            mp[arr[i]] += 1\n        else:\n            mp[arr[i] ] = 1\n          \n    # Traverse the dictionary to find if there is any element with odd count\n    for key, value in mp.items():\n        if value % 2 != 0:\n            return key\n    return -1 ",
        "generated_testcode": "assert get_Odd_Occurrence(arr=[1,2,3,2,3,4,5,4,5,4],arr_size=6) == 1 # Test case 1\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(s) \n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            if s[i] == s[j] and (j-i)%2 == 0: \n                count += 1\n    return count\n\ns = input()\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(s) == 5 # Testing for the string \"abba\"\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "34B",
        "pass": 8,
        "correct": true,
        "answer": "    from collections import Counter\n    import heapq\n    count = Counter(nums)\n    return heapq.nlargest(k, count.keys(), key=count.get)\n\n# Example usage:\n# nums = [1, 2, 3, 4, 5, 6, 7, 2, 3, 4, 5, 8, 9, 10, 3, 4, 5, 11, 12, 2, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# k = 3\n# print(func(nums, k)) # Output: [5, 3, 2] ",
        "generated_testcode": "assert func(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 2\n    while i * i <= n : \n        if n % i : \n            i += 1\n        else: \n            n //= i \n    return n ",
        "generated_testcode": "assert max_Prime_Factors (100) == 5\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\" \n    while(N > 0): \n        binary = str(N % 2) + binary \n        N = N // 2\n    return binary\n  \n# Driver code \ndec = 10\nbinary = decimal_To_Binary(dec) \nprint(\"Binary representation of\", dec, \"is\", binary) ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    total = (N * (N + 1)) / 2\n    sum_of_arr = 0\n    for i in range(N): \n        sum_of_arr += ar[i]\n    missing_num = total - sum_of_arr\n    return missing_num\n\nif __name__ == \"__main__\":\n    N = int(input(\"Enter the length of the array: \"))\n    ar = []\n    print(\"Enter the elements of the array: \")\n    for i in range(N):\n        ar.append(int(input())\n    print(\"The missing number is: \", find_missing(ar,N)) ",
        "generated_testcode": "assert find_missing(ar,N) == 4\n# Test case 1:\nar = [1,2,3,5,6,7,8,9,10]\nN = 6\nprint(find_missing(ar,N)) # Output: 4\n\n\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    i = 1\n    num = 0\n    while n > 0:\n        num += i\n        i += 1\n        n -= 1\n    return num\n\n# Test cases\nprint(find_rect_num(1)) # 1\nprint(find_rect_num(2)) # 36\nprint(find_rect_num(3)) # 660\nprint(find_rect_num(4)) # 120\nprint(find_rect_num(5)) # 204\nprint(find_rect_num(6)) # 306\nprint(find_rect_num(7)) # 420\nprint(find_rect_num(8)) # 576\nprint(find_rect_num(9)) # 784\nprint(find_rect_num(10)) # 1080 ",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    p1=p\n    q1=q\n    decimal = p/q\n    #counting number of digits before decimal point\n    count_int = 0\n    while (q1!=0) :  \n        count_int += 1\n        q1 //= 10\n    #counting number of digits after decimal point\n    count_dec = 0\n    temp = decimal - int(decimal)\n    while (temp!=0) :  \n        count_dec += 1\n        temp *= 10\n    #converting to proper fraction\n    while (q1!=0) :  \n        q1 //= 10\n        p //= 10\n    #finding nth digit\n    nth_digit = 0\n    if N < count_int :  \n        p *= (10**(N-1))\n        q *= (10**(N-1))\n        nth_digit = p//q\n    else :  \n        N -= count_int\n        p *= (10**(count_dec+N) - 1)//10**(count_dec-1)\n        q *= (10**(count_dec+N) - 1)//10**(count_dec-1)\n        nth_digit = p//q\n    return nth_digit\n  \n    #testing the function\np = 4\nq = 7\nN = 2\nprint(find_Nth_Digit(p,",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Sorts the given list of integers and strings in ascending order\n\n    :param mixed_list: list containing integers and strings\n    :return: sorted list of integers and strings\n    \"\"\"\n    # Separate the integers and strings into two different lists\n    int_list = []\n    str_list = []\n    for element in mixed_list:\n        if isinstance(element, int):\n            int_list.append(element)\n        else:\n            str_list.append(element)\n\n    # Sort the integer and string lists\n    int_list.sort()\n    str_list.sort()\n\n    # Combine the sorted integer and string lists\n    sorted_list = int_list + str_list\n    return sorted_list\n\n# Test the function with an example mixed list\nmixed_list = [3, \"apple\", 1, \"banana\", 2, \"orange\", \"grape\", 4, \"kiwi\"]\nprint(sort_mixed_list(mixed_list))  # Output: [1, 2, 3, 4, 'apple', 'banana', 'grape', 'kiwi'] ",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 3, \"banana\", 1, \"orange\", 5, \"grape\", 2, \"kiwi\", 4]) == [1, 2, 3, 4, 5, \"apple\", \"banana\", \"grape\", \"kiwi\"]\n\n# Test case 1: Test the function with a mixed list of integers and strings.\n# Expected output: [1, 2, 3, 4, 5, \"apple\", \"banana\", \"grape\", \"kiwi\"]\n\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\neven_list, odd_list = div_even_odd(list1)\nprint(\"Even numbers in the list are: \", even_list)\nprint(\"Odd numbers in the list are: \", odd_list)\n\n\n\n# Output\n# Even numbers in the list are:  [2, 4, 6, 8, 10, 12, 14, 16, 18]\n# Odd numbers in the list are:  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] ",
        "generated_testcode": "assert div_even_odd(list1) == (2, 3)\n\n# The output should be (2, 3) because 2 is the first even number and 3 is the first odd number in the list. ",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for char in S:\n        freq[char] = freq.get(char, 0) + 1\n    odd_count = 0\n    for count in freq.values():\n        if count % 2 != 0:\n            odd_count += 1\n    if odd_count > 1:\n        return False\n    return True\n\n\n# test the function\nprint(rearange_string(\"aabbc\")) # True\nprint(rearange_string(\"aabbcc\")) # False\nprint(rearange_string(\"aabbccc\")) # True\nprint(rearange_string(\"abcde\")) # True\nprint(rearange_string(\"abccba\")) # False ",
        "generated_testcode": "assert rearange_string(S=\"aabbc\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    from collections import Counter\n    count = Counter(nums)\n    return count\n\n# example usage:\nlst = [1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7]\nprint(freq_element(lst)) # Counter({7: 3, 6: 3, 5: 3, 4: 3, 1: 2, 2: 1, 3: 2}) ",
        "generated_testcode": "assert freq_element(nums=[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [2, 3, 4, 5]]) == {1: 1, 5: 2, 6: 1}\n\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n#test the function with sample inputs\nprint(filter_evennumbers([1,2,3,4,5,6,7,8,9,10])) #[2, 4, 6, 8, 10]\nprint(filter_evennumbers([2,4,6,8])) #[2, 4, 6, 8]\nprint(filter_evennumbers([])) #[]\nprint(filter_evennumbers([1,3,5,7,9])) #[] ",
        "generated_testcode": "assert filter_evennumbers(list(range(10)) == [0, 2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum=0\n    for i in range(n): \n        sum += arr.count(arr[i]) * arr[i] \n    return sum-sum(arr)\n# Driver code \narr = [1,2,3,4,2,5,4,6,3,4] \nn=len(arr) \nprint(find_Sum(arr,n)) # Output: 15 ",
        "generated_testcode": "assert find_Sum(arr,n) == 10 # if arr = [1,2,3,4,2,5,6,3] and n = 6\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r\"^[a-z]+_[a-z]+$\"\n    result = re.search(pattern, text)\n    return result is not None\n\n# Test cases\nprint(text_match(\"a_b\")) # True\nprint(text_match(\"a_B\")) # False\nprint(text_match(\"a_b_c\")) # True\nprint(text_match(\"a_b_c_d\")) # True\nprint(text_match(\"a_b_c_d_e\")) # True\nprint(text_match(\"a_B_c\")) # False\nprint(text_match(\"a_b_C\")) # False\nprint(text_match(\"a_1_c\")) # False\nprint(text_match(\"A_b\")) # False ",
        "generated_testcode": "assert text_match([\"_a_b_c_d_\", \"a_bc_d\", \"ABC_def\", \"hello_world\", \"a_b_c_d_e\"]), [\"_a_b_c_d_\"]\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'^\\b[A-Za-z]+'\n    return re.findall(pattern, text)\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog.\"\nresult = text_match_string(text)\nprint(result) # Output: ['The'] ",
        "generated_testcode": "assert text_match_string(\u201cHello world\u201d) == \u201cHello\u201d\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y): \n        x, y = y, x % y \n    return x \n  \ndef gcd_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n  \narr = [2, 4, 6, 8, 16] \nprint(\"GCD of the array is\", gcd_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 8) == 4\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns True if all numbers in the list are distinct, False otherwise.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    set_data = set(data)\n    # If the length of the set is the same as the length of the list, all elements are distinct\n    return len(set_data) == len(data)\n\n\n# Test cases\nprint(test_distinct([1, 2, 3, 4, 5])) # True\nprint(test_distinct([1, 2, 2, 3, 4])) # False\nprint(test_distinct([1, 2, 3, 4, 5, 1])) # False\nprint(test_distinct([])) # True\nprint(test_distinct([1])) # True ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5, 6, 7]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "34B",
        "pass": 6,
        "correct": true,
        "answer": "    def last_Digit(n):\n        if n%2==0:\n            return 2\n        else:\n            return 1\n    def factorial(n):\n        if n==1:\n            return 1\n        else:\n            return n*factorial(n-1)\n    if A>B:\n        A,B=B,A\n    return last_Digit(factorial(B)//factorial(A))\n# Test the function with some examples\nprint(compute_Last_Digit(5,10)) # Output: 2\nprint(compute_Last_Digit(2,10)) # Output: 2\nprint(compute_Last_Digit(3,20)) # Output: 6\nprint(compute_Last_Digit(10,20)) # Output: 2\nprint(compute_Last_Digit(25,50)) # Output: 2 ",
        "generated_testcode": "assert compute_Last_Digit(5, 10) == 2\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return n | 0x55555555555\n\n# OR operation with the binary representation of the number 0x55555555555 will set all the odd bits to 1. \n# Explanation:\n# The binary representation of the number 0x55555555555 is 10101010101010101010101010101010101010101 in binary. \n# So, when we perform OR operation with this number, all the odd bits of the given number will be set to 1.\n\n# Example:\n# Input: 12 (binary representation: 11000)\n#       0x5555555555: 101010101010101010101010101010101010101\n# Output: 29 (binary representation: 111101)\n# Here, the odd bits of 12 are 100, and after performing OR operation with 0x5555555555, they are set to 1, resulting in 111101. ",
        "generated_testcode": "assert odd_bit_set_number(0) == 0\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N])\n    return result\n\n# Test Cases\nnums = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13]]\nprint(specified_element(nums, 1)) # [2,7,11]\nprint(specified_element(nums, 0)) # [1,6,10]\n\n\n# Time Complexity: O(N) since we are iterating through each list in the list of lists and appending the Nth element to the result list. ",
        "generated_testcode": "assert specified_element(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 0) == [1, 6, 10, 14]\n\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return min(input_list, key=lambda x: len(x))\n\n#Example:\nprint(min_length_list([[1, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11, 12, 13, 14], [15, 16], [17, 18, 19, 20, 21, 222, 23]])  #[15, 16]\n\n\n#Solution:\n#The lambda function will iterate over each list in the input_list and return its length. Then the min() function will return the list with the minimum length. ",
        "generated_testcode": "assert min_length_list([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"grape\"]) == \"apple\"\n\n\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    if x==y==z:\n        return True\n    else:\n        return False\n\n#Test the function with examples\nprint(check_equilateral(3,4,5))#False\nprint(check_equilateral(6,6,6))#True\nprint(check_equilateral(10,10,10))#True\nprint(check_equilateral(5,5,10))#False ",
        "generated_testcode": "assert check_equilateral(3, 3, 3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "34B",
        "pass": 6,
        "correct": true,
        "answer": "    area = b*h\n    return area\n\n# Test the function with values\nprint(parallelogram_area(10,20) == 200) # True\nprint(parallelogram_area(5,4) == 20)   # True\nprint(parallelogram_area(7,8) == 56)   # True\n\n\n# Write a function to calculate area of a triangle\ndef triangle_area(base,height):\n    area = (base*height)/2\n    return area\n\n# Test the function with values\nprint(triangle_area(10,5) == 25)   # True\nprint(triangle_area(8,6) == 48)   # True \nprint(triangle_area(12,4) == 24)   # True ",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n\n# Write a function to calculate the area of a triangle given its base and height.\ndef triangle_area(b,h):\n    pass\n\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\nstring = input(\"Enter a string: \")\nif check_Equality(string):\n    print(\"The first and last characters of the string are equal\")\nelse:\n    print(\"The first and last characters of the string are not equal\") ",
        "generated_testcode": "assert check_Equality(\u201cabc\u201d) == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_elements = max_val - min_val + 1\n    count = [0] * range_of_elements\n    output = [0] * len(my_list)\n\n\n    for i in range(len(my_list)):\n        count[my_list[i] - min_val] += 1\n\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n\n    for i in my_list:\n        output[count[i - min_val] - 1] = i\n        count[i - min_val] -= 1\n\n\n    return output\n\n# Example usage:\nmy_list = [4, 2, 2, 8, 5, 3, 1, 1]\nsorted_list = counting_sort(my_list)\nprint(sorted_list)\n",
        "generated_testcode": "assert counting_sort([\"apple\", \"banana\", \"orange\", \"pear\", \"grape\", \"apple\"]) == [\"apple\", \"apple\", \"banana\", \"grape\", \"orange\", \"pear\"]\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return a * (1 - (r ** n) ** (1/n)) / (1 - r)\na=float(input(\"Enter the first term of GP: \"))\nr=float(input(\"Enter the common ratio: \"))\nn=int(input(\"Enter the term number: \"))\nprint(\"The t-th term of GP is: \",tn_gp(a,n,r)) ",
        "generated_testcode": "assert tn_gp(1, 5, 2) == 32\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    rev=0    \n    while num>0:    \n        rem=num%10    \n        rev=rev*10+rem    \n        num=num//10    \n    return rev    \ndef checkOneLess(num):    \n    return num-rev(num)==1\nnum=int(input(\"Enter a number: \")    \nif(checkOneLess(num)):    \n    print(num,\" is one less than twice its reverse\")    \nelse:    \n    print(num,\" is not one less than twice its reverse\") ",
        "generated_testcode": "assert rev(123) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    arr = sorted(arr, reverse = True) \n    res = '' \n    for i in range(n) : \n        res += arr[i] \n    return int(res) \n\n# Driver code \narr = [1, 5, 5, 3, 9, 8, 3] \nn = len(arr) \nprint(find_Max_Num(arr, n)) ",
        "generated_testcode": "assert find_Max_Num(arr,n) == expected_output\n\n# Example:\narr = [1, 4, 3, 5, 8, 7]\nn = len(arr)\nprint(find_Max_Num(arr, n)) # Output: 87541 ",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if(x<0 and y>0) or (x>0 and y<0): \n        return True \n    else: \n        return False \n# Test the function with some examples \nprint(opposite_Signs(-5,6)) # True \nprint(opposite_Signs(3,-6)) # True \nprint(opposite_Signs(4,10)) # False \nprint(opposite_Signs(0,-3)) # False \nprint(opposite_Signs(-8,-2)) # False \nprint(opposite_Signs(2,-5)) # True ",
        "generated_testcode": "assert opposite_Signs(5, -6) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    i = 1\n    while True:\n        octagonal = (i*(3*i-2))/2\n        if octagonal == n:\n            return True\n        elif octagonal < n:\n            count += 1\n        else:\n            return False\n        i += 1\n\ndef nth_octagonal(n):\n    return (n*(3*n-2))/2",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0 \n    for i in range(n): \n        j = i + 1\n        while j < n and arr[j] - arr[i] <= 1: \n            j += 1\n        if j == n: \n            max_len = max(max_len, j - i) \n        else: \n            max_len = max(max_len, j - i - 1) \n    return max_len \n\n# Driver code \narr = [1, 10, 20, 30, 40, 41, 50, 60, 70, 80] \nn = len(arr) \nprint(\"Length of maximum length subsequence:\", max_len_sub(arr, n)) ",
        "generated_testcode": "assert max_len_sub([1, 5, 3, 10, 2, 16, 2, 7, 14, 5, 3, 12] ) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            if sum(int(k) for k in sub_str) == len(sub_str):\n                count += 1\n    return count\n\n# Driver code\ns = \"12345\"\nn = len(s)\nprint(\"Number of substrings with sum of digits equal to length:\", count_Substrings(s,n))\n\n\n#Output: \n# Number of substrings with sum of digits equal to length: 2 ",
        "generated_testcode": "assert count_Substrings(123, 3) == 2 # Explanation: 1+2+3 = 6 and 12+3 = 15 are the only substrings with this property. ",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest\n\n# Test cases\nprint(smallest_num([3, 4, 5, 1, 2, 9, 7]) == 1)\nprint(smallest_num([4, -5, 1, 0, 9, 100, -3, 8]) == -5)\nprint(smallest_num([]) == None) ",
        "generated_testcode": "assert smallest_num([3, 5, 2, 1, 8, 6, 4]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1] - test_list[0]\n    min_val = test_list[0]\n    for i in range(1, len(test_list)):\n        diff = test_list[i] - min_val\n        if diff < 0:\n            min_val = test_list[i]\n        else:\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n# Example usage:\n# test_list = (4, 2, 10, 8, 6, 7)\n# print(max_difference(test_list))  # Output: 8\n\n\n# Using the max() and min() functions, we can write a one-liner for the same:\ndef max_difference_one_liner(test_list):\n    return max(test_list) - min(test_list) if len(test_list) > 1 else None\n\n# Example usage:\n# test_list = (4, 2, 10, 8, 6, 7)\n# print(max_difference_one_liner(test_list))  # Output: 8 ",
        "generated_testcode": "assert max_difference(()) == None\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\n\n# Test the function with sample input\nmarks = [('maths', 90), ('science', 87), ('english', 92), ('history', 85)]\nprint(subject_marks(marks)) # Output: [('english', 92), ('maths', 90), ('history', 85), ('science', 87)] ",
        "generated_testcode": "assert subject_marks([('Maths', 90), ('Science', 80), ('English', 85), ('Social', 95)] ) == [('Social', 95), ('Maths', 90), ('English', 85), ('Science', 80)]\n\n\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n\n# test the function\ndata_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(recursive_list_sum(data_list)) # Output: 25\n\n\n# test empty list\nempty_list = []\nprint(recursive_list_sum(empty_list)) # Output: 0 ",
        "generated_testcode": "assert recursive_list_sum([] ) == 0\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n# test the function\nlist1 = [1, -2, 3, 4, -5, 6, -7, 8, 9, -10]\nlist2 = [0, -4, -3, -2, -1, 0, 1, 2, 3]\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(pos_count(list1))\nprint(pos_count(list2))\nprint(pos_count(list3)) ",
        "generated_testcode": "assert pos_count([]), 0\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    bell = [[0 for j in range(n+1)] for i in range(n+1)]   \n    bell[0][0] = 1\n    for i in range(n+1): \n        bell[i][0] = 1\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i] * (j-1)\n    return bell[n][0] ",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not A: \n        return True\n    elif len(A) == 1: \n        return True\n    else:\n        i = 1\n        while i < len(A):\n            if A[i] < A[i-1]:\n                break\n            i += 1\n        if i == len(A): \n            return True\n        i = 1\n        while i < len(A):\n            if A[i] > A[i-1]:\n                break\n            i += 1\n        if i == len(A): \n            return True\n        return False\n    return False \n# Test cases \nprint(is_Monotonic([1,2,3,4,4,5])) # True \nprint(is_Monotonic([1,2,3,3,4])) # True \nprint(is_Monotonic([1,2,3,4,5,3])) # False \nprint(is_Monotonic([5,4,3,2,1])) # True \nprint(is_Monotonic([1,2,2,3,4,5])) # True \nprint(is_Monotonic([1,2,3,2,4,5])) # False ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sub_str = ''.join([str(i) for i in s])\n    full_str = ''.join([str(i) for i in l])\n    if sub_str in full_str:\n        return True\n    return False\n\n# Test Cases\nprint(is_sublist([1,2,3,4,5,6,7,8], [1,2,3])) # True\nprint(is_sublist([1,2,3,4,5,6,7,8], [1,3,5])) # False\nprint(is_sublist([1,2,3,4,5,6,7,8], [1,8])) # True\nprint(is_sublist([1,2,3,4,5,6,7,8], [2,4,6,8])) # False\nprint(is_sublist([1,2,3,4,5,6,7,8], [7,8,9])) # False ",
        "generated_testcode": "assert is_sublist([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", \"kiwi\"], [\"banana\", \"cherry\"]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize a list to store the lengths of all tuples\n    length_list = []\n    for i in Input:\n        length_list.append(len(i))\n    # Check if all lengths are equal to k\n    for j in length_list:\n        if j != k:\n            return False\n    return True\n\n# Test the function with some examples\nprint(find_equal_tuple([(1,2,3),(4,5,6),(7,8,9),(\"a\",\"b\",\"c\")])) # True\nprint(find_equal_tuple([(1,2,3),(4,5,6),(7,8,9),(\"a\",\"b\",\"c\",\"d\")])) # False ",
        "generated_testcode": "assert find_equal_tuple(({(1, 2, 3), (4, 5, 6), (7, 8, 9)}, 3) == True)\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    gap = len(nums)\n    shrink = 1.3\n    is_sorted = False\n\n    while not is_sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            is_sorted = True\n            gap = 1\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                is_sorted = False\n            i += 1\n\n    return nums\n\n# Example usage:\nnums = [3, 2, 1, 5, 4, 6, 7, 8, 2, 4, 9]\nsorted_nums = comb_sort(nums)\nprint(sorted_nums)  # Output: [1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert comb_sort(nums=[4, 2, 6, 1, 9, 7, 3, 8, 5, 0, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n < 0:\n        return False\n    i = 0\n    while i*i < n:\n        j = (n - i*i)**0.5\n        if j == int(j):\n            return True\n        i += 1\n    return False\n\n# example usage:\nprint(dif_Square(121))  # True  (11^2 - 10^2 = 1)\nprint(dif_Square(4))   # True  (2^2 - 2^2 = 0)\nprint(dif_Square(10))  # False ",
        "generated_testcode": "assert dif_Square(121) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[;:,.-]')\n    result = pattern.split(text)\n    return result\n\n# Test the function with an example string\ntext = \"hello;world,welcome-to-the;jungle!have,a,nice;day\"\nprint(multiple_split(text) ) # Output: ['hello', 'world', 'welcome', 'to', 'the', 'jungle', 'have', 'a', 'nice', 'day'] ",
        "generated_testcode": "assert multiple_split(text=\"Hello, world! This is a test string.\") == [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\", \"string\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        else:\n            if pattern_dict[patterns[i]] != colors[i]:\n                return False\n    return True\n\n# Test the function with examples\nprint(is_samepatterns(['red', 'green', 'blue'], ['A', 'B', 'C'])) # True\nprint(is_samepatterns(['red', 'green', 'blue', 'red'], ['A', 'B', 'C', 'A'])) # False\nprint(is_samepatterns(['red', 'green', 'blue'], ['A', 'A', 'B'])) # False\nprint(is_samepatterns(['red', 'green', 'blue', 'red'], ['A', 'B', 'C', 'A'])) # False\nprint(is_samepatterns(['red', 'green', 'blue', 'red'], ['A', 'B', 'C', 'A'])) # False ",
        "generated_testcode": "assert is_samepatterns([\"red\", \"green\", \"blue\", \"yellow\"], [\"a\", \"b\", \"c\"]) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(i%K==0 for i in tup):\n            result.append(tup)\n    return result\n\n#Testing the function with an example\ntest_list = [(1,2,3), (4,5,6), (12,15,18), (10,20,30), (8,12,16)]\nK = 6\nprint(find_tuples(test_list, K) ) # Output: [(12, 15, 18), (10, 20, 30)] ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (12, 15, 18), (21, 24, 27), (10, 20, 30)], 6) == [(12, 15, 18), (24, 30, 36)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    if m == 0 or n == 0:\n        return 0\n    else:\n        return (m*n)\n\n#test the function with some example inputs\nprint(count_Squares(0,0)) #0\nprint(count_Squares(5,0)) #0\nprint(count_Squares(3,4)) #12\nprint(count_Squares(7,5)) #35\nprint(count_Squares(8,8)) #64 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in str(n): \n        if int(i)%2 == 0: \n            even_sum += int(i)\n        else: \n            odd_sum += int(i)\n    return even_sum - odd_sum\n# testing the function \nn = 123456\nprint(\"Sum of even digits:\", is_Diff(n)) ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n + 1): \n        # Count set bits in binary representation of i \n        set_bits = bin(i).count('1') \n        # If count is odd, increment the count variable \n        if set_bits % 2 != 0: \n            count += 1\n    return count \n\n# Test the function with n = 10\nn = 10\nprint(\"The number of integers with odd number of set bits in range (1 to\", n, \"is\", \n        count_With_Odd_SetBits(n)) ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 4\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s) % 2 == 0: \n        print(\"Length of the word is even\") \n    else: \n        print(\"Length of the word is odd\") \n\n#Example: \n#Input: 'hello' \n#Output: Length of the word is odd ",
        "generated_testcode": "assert word_len(\u201chello\u201d) == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (n+1) * (n+2) // 6\n\n# Test the function\nprint(tetrahedral_number(1)) # 1\nprint(tetrahedral_number(2)) # 3\nprint(tetrahedral_number(3)) # 6\nprint(tetrahedral_number(4)) # 10\nprint(tetrahedral_number(5)) # 15\nprint(tetrahedral_number(6)) # 21\nprint(tetrahedral_number(7)) # 28\nprint(tetrahedral_number(8)) # 36\n\n# The first few tetrahedral numbers are: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, ... ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as input and returns a tuple of tuples, where each inner tuple contains corresponding elements of the input tuples.\n    \"\"\"\n    zipped_tuple = tuple(zip(test_tup1, test_tup2))\n    return zipped_tuple\n\n#Example\n#test_tup1 = (\"apple\", \"banana\", \"cherry\", \"date\")\n#test_tup2 = (1, 2, 3, 4)\n#print(zip_tuples(test_tup1, test_tup2)) #Output: ((\"apple\", 1), (\"banana\", 2), (\"cherry\", 3), (\"date\", 4)) ",
        "generated_testcode": "assert zip_tuples((\"abc\", (1, 2, 3)) == ((\"a\", 1), (\"b\", 2), (\"c\", 3))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14\n    volume = (4/3) * pi * r**3\n    return volume\n\n# Test the function with a radius of 5\nprint(volume_sphere(5)\n\n# Output: 523.6\n\n# The formula for the volume of a sphere is (4/3) * pi * r^3, where r is the radius. We first define pi as 3.14 and then calculate the volume by plugging in the given radius (5) into the formula. ",
        "generated_testcode": "assert volume_sphere(5) == 523.6\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    pass\n\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0  \n    for i in strr:  \n        sum += ord(i)  \n    return chr(sum) \n\n# Example usage:\nstring = \"hello\"\nprint(get_Char(string)) # Output: \u0187 (character with ASCII value 508) ",
        "generated_testcode": "assert get_Char(\u201cabc\u201d) == \u201cabcd\u201d\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Create a list to store the sequence\n        sequence = [0, 1]\n        for i in range(2, n):\n            # The next number is the sum of the previous two numbers in the sequence\n            next_num = sequence[sequence[i-1]] + sequence[i-2]\n            # Append the next number to the sequence\n            sequence.append(next_num)\n        return sequence[n-1] ",
        "generated_testcode": "assert sequence(1) == 1\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14\n    surfacearea = 4 * pi * r ** 2\n    return surfacearea\n\n#testing the function\nprint(surfacearea_sphere(5)\nprint(surfacearea_sphere(7)\nprint(surfacearea_sphere(10) ",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1592653589793\n\n# The testing code should include at least 2 different test cases. ",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (2 * n - 1)) if n > 0 else 0\n\n# Test the function\nprint(centered_hexagonal_number(3)) # Output: 15\nprint(centered_hexagonal_number(7)) # Output: 55\n\nprint(centered_hexagonal_number(1)) # Output: 1\nprint(centered_hexagonal_number(0)) # Output: 0\n\n\n# Write a function to find the side length of a centered hexagon given its nth centered hexagonal number\ndef find_side_length(num):\n    if num == 0:\n        return 0\n    else:\n        return int(((2 * num / (2 * (2 * (int(num ** 0.5) - 1) + 1)) + 1) + 1) / 2)\n# Test the function\nprint(find_side_length(15)) # Output: 5\nprint(find_side_length(55)) # Output: 8\nprint(find_side_length(0)) # Output: 0\n\n# Write a function to find the nth centered hexagonal number given its side length\ndef find_centered_hexagonal_number(side):\n    return (side * (2 * side - 1) * (2 * side - 1) - side) if side > 0 else 0\n# Test the function\nprint(find_centered_hexagonal_number(5))",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n    \n# Example usage:\ndict1 = {\"a\": 1, \"b\": 2, \"c\": 3}\ndict2 = {\"d\": 4, \"e\": 5, \"f\": 6}\ndict3 = {\"g\": 7, \"h\": 8, \"i\": 9}\n\nresult = merge_dictionaries_three(dict1, dict2, dict3)\nprint(result) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9} ",
        "generated_testcode": "assert merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'c': 4, 'd': 5, 'e': 6},\n    {'b': 3, 'f': 6}\n) == {'a': 1, 'b': 3, 'c': 4, 'd': 5, 'e': 6, 'f': 6}\n\n# Test case 1: Three dictionaries with common keys\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for elem in list1:\n        freq[elem] = freq.get(elem, 0) + 1\n    return freq\n\n# test the function\nlist1 = [1,2,3,4,2,3,4,5,6,1,1,7,3,2,8,6,9,0,0,8]\nprint(freq_count(list1)) # Output: {0: 2, 1: 3, 2: 3, 3: 3, 4: 2, 5: 1, 6: 2, 7: 1, 8: 2, 9: 1} ",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"orange\", \"banana\", \"apple\", \"cherry\", \"date\", \"date\"]) == {\"apple\": 3, \"banana\": 3, \"cherry\": 2, \"orange\": 1, \"date\": 2}\n\n\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    n = N\n    while N>0:\n        N-=1\n        if N<n:\n            return N\n    return None\n\n# Test case\nprint(closest_num(10)) # Output: 9\nprint(closest_num(100)) # Output: 99\nprint(closest_num(10000)) # Output: 999\nprint(closest_num(100000)) # Output: 9999\nprint(closest_num(1000000)) # Output: 99999\nprint(closest_num(5)) # Output: 4\nprint(closest_num(1234)) # Output: 123\nprint(closest_num(999)) # Output: 888\nprint(closest_num(1001)) # Output: None ",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\nlist2 = ['apple', 'banana', 'cherry', 'grape', 'kiwi', 'orange', 'strawberry']\nprint(len_log(list2) # output: 10 ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"watermelon\"]) == 9\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    flag = False\n    for string in str1:\n        if sub_str in string:\n            flag = True\n            break\n    return flag\n\n#Test the function\nstr1 = [\"hello world\", \"hi python\", \"java\", \"python programming\"]\nsub_str = \"python\"\nprint(find_substring(str1, sub_str)) #True ",
        "generated_testcode": "assert find_substring([\"hello\", \"world\", \"hi\", \"python\"], \"py\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "34B",
        "pass": 6,
        "correct": true,
        "answer": "    str_n = str(n)\n    n = len(str_n)\n    for i in range(1,n-1):\n        if int(str_n[i]) < int(str_n[i-1]) and int(str_n[i]) < int(str_n[i+1]):\n            return True\n        if int(str_n[i]) > int(str_n[i-1]) and int(str_n[i]) > int(str_n[i+1]):\n            return True\n    return False\n\n# Test the function with examples\nprint(is_undulating(12321)) # True\nprint(is_undulating(12123)) # True\nprint(is_undulating(12334)) # False\nprint(is_undulating(423543)) # True\nprint(is_undulating(54321)) # False ",
        "generated_testcode": "assert is_undulating(123235321) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return 1\n    elif b%2==0:\n        return power(a,b//2)**2\n    else:\n        return a*power(a,b-1)\n\n#example\n#power(2,4) will return 16\n#power(2,3) will return 8\n#power(5,2) will return 25\n#power(10,0) will return 1 \n#power(10,1) will return 10 \n#power(10,5) will return 10000000 ",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    min_value = min(test_list, key=lambda x: x[1])\n    return test_list.index(min_value)\n\n\n# Test the function with sample data\ntest_list = [(1, 4), (2, 3), (3, 2), (4, 1), (5, 5), (6, 6)]\nprint(index_minimum(test_list))  # Output: 2 ",
        "generated_testcode": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8)] ) == (1, 4)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n  \n#Example:\n# Test the function with an example\nlst = [[1, 2, 3], [4, 5, 6, 7], [8], [9, 10, 11, 12, 13, 14], [15, 16, 17]]\nprint(Find_Min_Length(lst)) \n# Output: 1 ",
        "generated_testcode": "assert Find_Min_Length([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"grape\"]) == 5\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n#Test the function with some examples\nprint(divisor(12)) # Output: 6 (1, 2, 3, 4, 6, 12)\nprint(divisor(15)) # Output: 4 (1, 3, 5, 15)\nprint(divisor(20)) # Output: 6 (1, 2, 4, 5, 10, 20) ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    count = {}\n    for item in list1:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    return count\n\n# Test the function\nlist1 = [1, 2, 3, 4, 2, 3, 4, 3, 2, 5, 6, 7, 1, 1, 1, 1, 7, 8, 8, 8, 8, 9, 9]\nprint(frequency_lists(list1)) # Output: {1: 4, 2: 3, 3: 3, 4: 2, 5: 1, 6: 1, 7: 2, 8: 3, 9: 3} ",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"cherry\", \"date\", \"cherry\"]) == {\"apple\": 2, \"banana\": 2, \"cherry\": 3, \"date\": 1}\n\n\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)\n\n# Test the function with a list of numbers\nprint(multiply_num([2, 3, 4, 5, 6, 8, 9])) # Output: 27.0\n\n\n# This function multiplies all the numbers in the list and divides it by the length of the list to get the average\n\n\n# There are many ways to calculate the average of a list of numbers in Python, but here's one way to do it using a loop and a variable to keep track of the sum of the numbers:\n\ndef calculate_average(numbers):\n    total = 0\n    count = 0\n    for number in numbers:\n        total += number\n        count += 1\n    return total / count\n\n# Test the function with a list of numbers\nprint(calculate_average([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 5.0\n\n# This function uses a for loop to iterate through the numbers and add them up, and then divides the sum by the count of numbers to get the average. ",
        "generated_testcode": "assert multiply_num(list(range(1, 6)) == 120\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    binary = \"\"\n    while n != 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function with an example decimal number\nprint(decimal_to_binary(42)) # Output: 10101010 ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n\n# Test the function with an example\nprint(next_smallest_palindrome(123))  # Output: 124\nprint(next_smallest_palindrome(1221))  # Output: 131\nprint(next_smallest_palindrome(1345))  # Output: 1441\nprint(next_smallest_palindrome(999))  # Output: 10111\n\n\n# Solution:\n# We can solve this problem by iterating from the given number till we find the next palindrome. \n# If a number is not palindrome, we simply increment it by 1 and check again. If it is palindrome, we return it.\n# We can use the is_palindrome function to check if a given number is palindrome or not. It works by converting the number to a string \n# and comparing it with its reverse. If they are equal, it is a palindrome.\n# Time Complexity: O(n) where n is the difference between the given number and the next palindrome. In the worst case, it can be O(n). ",
        "generated_testcode": "assert next_smallest_palindrome(123) == 131\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Sort the array in ascending order\n    arr.sort()\n    # Return the kth element\n    return arr[k-1]\n\n# Test the function with an example\narr = [7, 10, 4, 3, 20, 15]\nn = len(arr)\nk = 3\nprint(kth_element(arr, n, k)) ",
        "generated_testcode": "assert kth_element(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=9, k=3) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    words = word.split('_')\n    if len(words) == 1:\n        return words[0]\n    else:\n        return words[0] + ''.join(w.capitalize() for w in words[1:])\n\n\n# Test cases\nprint(snake_to_camel('hello_world')) # Output: helloWorld\nprint(snake_to_camel('this_is_a_long_string')) # Output: thisIsALongString\nprint(snake_to_camel('this_is_the_longest_string_ever')) # Output: thisIsTheLongestStringEver ",
        "generated_testcode": "assert snake_to_camel(snake_to_camel) == \"snakeToCamel\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if m == 0 or n == 0:\n        return 1\n    if m >= 2*n:\n        return eulerian_num(n, n)\n    if m <= n:\n        return (m+1) * eulerian_num(n-1, m) + (n-m) * eulerian_num(n-1, m-1)\n    else:\n        return 0\n\n# Test the function with example usage:\nn = 3\nm = 2\nprint(eulerian_num(n, m)) # Output: 5\n\nn = 5\nm = 3\nprint(eulerian_num(n, m)) # Output: 32",
        "generated_testcode": "assert eulerian_num(2, 2) == 6\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of lists as input and applies a lambda function to sort each sublist\n    \"\"\"\n    sorted_list = list(map(lambda sublist: sorted(sublist), input_list)\n    return sorted_list\n\n# Example usage:\ninput_list = [['banana', 'apple', 'cherry'], ['dog', 'cat', 'elephant'], ['three', 'one', 'two']]\nsorted_list = sort_sublists(input_list)\nprint(sorted_list) # [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant'], ['one', 'three', 'two']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"aebdg\", \"aeppl\", \"aeerr\", \"aepph\", \"aeppt\"]\n# Test case 1: Test the function with a list of strings.\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n#test the function with some sample test cases\nprint(count([True, False, True, 0, 2, \"hello\", \"\", [], None, True, 1, \"world\", True]) == 3) #should return True\nprint(count([False, False, 0, 0, \"\", None, [], False, False, False]) == 0) #should return True\nprint(count([True, True, 1, \"hello\", True, [1,2,3], True]) == 3) #should return True\nprint(count([]) == 0) #should return True ",
        "generated_testcode": "assert count([]), 0\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = list(test_tup) + test_list\n    return tuple(result)\n\n#Test the function with the following values:\ntest_list = [4, 5, 6]\ntest_tup = (1, 2, 3)\nprint(add_lists(test_list, test_tup)) # Output: (1, 2, 3, 4, 5, 6) ",
        "generated_testcode": "assert add_lists([\"apple\", \"banana\", \"cherry\"], (\"kiwi\", \"mango\", \"grapes\")) == (\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\", \"grapes\")\n\n# Test case 1: Testing with a list of strings and a tuple of strings\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1):\n        s = hex(i)[2:]\n        flag = 1\n        for j in s:\n            if j.isdigit() and int(j) % 2 == 1:\n                flag = 0\n                break\n        if flag:\n            count += 1\n    return count\n\nL = 1\nR = 10\nprint(count_Hexadecimal(L,R)) ",
        "generated_testcode": "assert count_Hexadecimal(1, 10) == 2\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Merge multiple sorted input into a single sorted iterator\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    return merged_list\n\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8,10]\nnum3 = [0,3,5,7,11,12]\nprint(merge_sorted_list(num1,num2,num3)) # Output: [0, 1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 11, 12] ",
        "generated_testcode": "assert merge_sorted_list(num1=[1,3,5,7],num2=[2,4,6],num3=[0,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n\n# Test case 1: Test the function with 3 sorted lists of integers.\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if s[i] == '0' and s[n-i-1] == '1':\n            count += 1\n    return count\n        \ndef even_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if s[i] == '1' and s[n-i-1] == '0':\n            count += 1\n    return count\n\ndef count_rotations_with_odd_value(s):\n    n = len(s)\n    if n <= 1:\n        return 0\n    else:\n        count_odd = odd_Equivalent(s,n)\n        count_even = even_Equivalent(s,n)\n        total_rotations = 2**(n-1)\n        return (count_odd*count_even)%1000000000007\n        \n# test the function\ns = '10101'\nprint(count_rotations_with_odd_value(s)) # Output: 2 ",
        "generated_testcode": "assert odd_Equivalent(1010101,5) == 3 # Testing for even length string\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a set of all the numbers in the given range\n    all_nums = set(range(strt_val, stop_val+1))\n    # Create a set of the given list\n    given_set = set(test_list)\n    # Find the missing numbers by subtracting the given set from the set of all numbers\n    missing_nums = all_nums - given_set\n    # Convert the set to a list and sort it\n    missing_list = sorted(list(missing_nums))\n    # Create an empty list to store the ranges\n    missing_ranges = []\n    # Initialize variables to keep track of the start and end of a range\n    start_range = None\n    end_range = None\n    # Loop through the list of missing numbers\n    for num in missing_list:\n        # If start_range is None, start a new range\n        if not start_range:\n            start_range = num\n        # If the current number is not consecutive to the previous number, start a new range\n        elif num - 1 != end_range:\n            missing_ranges.append((start_range, end_range))\n            start_range = num\n        # Update the end of the range\n        end_range = num\n    # Add the last range to the list\n    missing_ranges.append((start_range, end_range))\n    # Return the list of ranges\n    return missing_ranges[1:]\n\n# Example usage:\n# extract_missing([1, 3, 4",
        "generated_testcode": "assert extract_missing([\"1-3\", \"5-8\", \"10-11\"], 1, 11) == [\"4\", \"9\"]\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements = common_elements.intersection(set(nestedlist[i]))\n    return list(common_elements)\n\n\n\n# Test Case\nnestedlist = [[1, 2, 3, 4, 5, 6], [2, 4, 6, 7, 8], [3, 4, 5, 7, 9], [4, 5, 6, 10, 11]]\nprint(common_in_nested_lists(nestedlist)) # Output: [4, 5]\n\n\nnestedlist = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\nprint(common_in_nested_lists(nestedlist)) # Output: [3, 4] ",
        "generated_testcode": "assert common_in_nested_lists(\n    [\n        [1, 2, 3, 4, 5],\n        [2, 3, 4, 5, 6],\n        [3, 4, 5, 6, 7],\n        [4, 5, 6, 7, 8]\n    ]) == [4, 5]\n\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return (2*3.14*diameter/2)+(2*3.14*diameter/2) + (2*height)\n\nprint(perimeter(5,10))  #Should print 47.12  \nprint(perimeter(10,2))  #Should print 62.80 \nprint(perimeter(8,12))  #Should print 94.25 \n\n\n# Write a python function to find the area of a cylinder\ndef area(diameter,height) : \n    return (3.14*(diameter/2)**2)+(3.14*(diameter/2)*height)\nprint(area(5,10))  #Should print 94.25\nprint(area(10,2))  #Should print 157.08\nprint(area(8,12))  #Should print 1537.1 \n\n#Write a python function to find the volume of a cylinder\ndef volume(diameter,height) : \n    return (3.14*(diameter/2)**2)*height\nprint(volume(5,10))  #Should print 157.08\nprint(volume(10,2))  #Should print 314.20\nprint(volume(8,12))  #Should print 22356.7\n\n#Write a python function to find the lateral surface area",
        "generated_testcode": "assert perimeter(5,10) == 78.139797567248060692\n\n# The perimeter of a cylinder with diameter 5 and height 10 is approximately 78.1398 (rounded to 8 decimal places). ",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n\n# Example usage:\nprint(check_integer(\"123\"))  # True\nprint(check_integer(\"-123\"))  # True\nprint(check_integer(\"+123\"))  # True\nprint(check_integer(\"123.5\"))  # False\nprint(check_integer(\"123a\"))  # False\nprint(check_integer(\"123,5\"))  # False\nprint(check_integer(\"abc\"))  # False\nprint(check_integer(\"\"))  # False\nprint(check_integer(\" \"))  # False\nprint(check_integer(\" \"))  # False\nprint(check_integer(\"12 3\"))  # False\nprint(check_integer(\" 123 \"))  # False ",
        "generated_testcode": "assert check_integer(123) == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n# Example usage:\ntest_list = [('apple', 'banana', 'orange'), ('banana', 'apple', 'orange'), ('apple', 'orange', 'banana'), ('orange', 'banana', 'apple')]\nprint(assign_freq(test_list)) ",
        "generated_testcode": "assert assign_freq(()) == {}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for dict in list1:\n        if dict:\n            return False\n    return True\n\nlist1 = [{}, {}, {}]\nlist2 = [{}, {'a': 1}, {}]\nlist3 = [{}, {'a': 1, 'b': 2}, {}]\nlist4 = [{}, {}, {}]\nprint(empty_dit(list1)) # True\nprint(empty_dit(list2)) # False\nprint(empty_dit(list3)) # False\nprint(empty_dit(list4)) # True ",
        "generated_testcode": "assert empty_dit([]), \"Empty list should return True\"\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "34B",
        "pass": 6,
        "correct": true,
        "answer": "    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n\n# Test the function with a sample tuple\nprint(tuple_to_int((1, 2, 3, 4, 5)) == 12345)  # Should print True\nprint(tuple_to_int((9, 9, 9)) == 99)  # Should print True\nprint(tuple_to_int((1, 0, 0, 1)) == 101)  # Should print True\nprint(tuple_to_int((1, 2, 3, 4, 0, 5)) == 123405)  # Should print True ",
        "generated_testcode": "assert tuple_to_int(()) == 0\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for element in test_list:\n        try:\n            result.append(float(element))\n        except ValueError:\n            result.append(element)\n    return result\n\n# Test the function\ntest_list = [1, '2', '3.5', 'four', 5, '6.0']\nprint(list_to_float(test_list)) # Output: [1.0, 2.0, '3.5', 'four', 5.0] ",
        "generated_testcode": "assert list_to_float([\"1\", \"2.5\", \"3\", \"hello\", \"4.2\", \"world\"]) == [1.0, 2.5, \"hello\", 4.2, \"world\"]\n\n\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(string) ",
        "generated_testcode": "assert string_to_list(\u201chello\u201d) == [\u201ch\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return arr[0]\n    for i in range(1,n-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[0] if arr[0] != arr[n-1] else arr[n-1]\n\n#Test the code \narr = [1,1,2,2,3,3,4,5,5,6,6,7,7,8,8]\nn = len(arr)\nprint(search(arr, n)) # Output: 4 ",
        "generated_testcode": "assert search(arr,n) == 4\n# Testcase 1:\narr = [1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9]\nn = len(arr)\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n#Example:\n#Input: [(1,2), (3,4), (5,6), (7,8)]\n#Output: 34 (From (5,6) and (7,8)) ",
        "generated_testcode": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8)] ) == 56\n\n\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    A.sort()\n    found = False\n    for i in range(n-2):\n        left = i+1\n        right = n-1\n        while left < right:\n            curr_sum = A[i] + A[left] + A[right]\n            if curr_sum == sum:\n                count += 1\n                print(\"Triplet found\", A[i], A[left], A[right])\n                found = True\n                left += 1\n                right -= 1\n            elif curr_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\n\ndef find_triplets(A, sum):\n    count = 0\n    count = check_triplet(A, len(A), count)\n    return count\n\n# Test the code\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5]\nsum = 24\ncount = 0\nprint(find_triplets(A, sum))  # Output: Triplet found 1 2 5, Triplet found 1 3 4, Triplet found 1 6 5, Triplet found 2 3 4, Triplet found 3 4 5, 4\nprint(count)  # Output: 4\n\n",
        "generated_testcode": "assert check_triplet(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=20, count=0) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "34B",
        "pass": 9,
        "correct": true,
        "answer": "    num = 1\n    count = 0\n    while n > 0:\n        x = str(num)\n        x = set(x)\n        if len(x) == len(x):\n            n -= 1\n            if n == 0:\n                return num\n        num += 1\n\nprint(smartNumber(4)) # Output: 4\nprint(smartNumber(10)) # Output: 10\nprint(smartNumber(15)) # Output: 16\nprint(smartNumber(30)) # Output: 30\n\n# In the above code, we have initialized a variable num with 1. We then check if the set of digits in the number is unique or not using set() function. \n# If it is unique, we decrement n by 1. If n becomes 0, we return the current number. If not, we increment num by 1 and check again. ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize an empty dictionary to store the sums of proper divisors\n    divisor_sums = {}\n    # Loop through the range of numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Calculate the sum of proper divisors for each number\n        divisor_sum = sum([i for i in range(1, num // 2 + 1) if num % i == 0])\n        divisor_sums[num] = divisor_sum\n    # Initialize the sum of amicable numbers\n    total = 0\n    # Loop through the range of numbers from 1 to the limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num in divisor_sums and divisor_sums[num] <= limit and divisor_sums[divisor_sums[num]] == num and num != divisor_sums[num]:\n            # Add the amicable number to the total\n            total += num\n    # Return the sum of all amicable numbers\n    return total\n\n# Test the function with a limit of 1000000\nprint(amicable_numbers_sum(1000000)\n# Output: 316285\n\n\n# Time complexity: O(n^2) due to the nested loop in calculating the divisor sums ",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 392282\n\n# The sum of all amicable numbers from 1 to 100000 is 39282. ",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    angle = math.atan2(b,a)\n    return math.degrees(angle)\n\n# Example usage:\n# print(angle_complex(3, 4))  # Output: 63.434948923526562256\n\n\n# You can test the function with the following test cases:\n# print(angle_complex(3, 4)) # Output: 63.43494892352656256\n# print(angle_complex(5, 5)) # Output: 45.0\n# print(angle_complex(1, 1)) # Output: 45.0\n# print(angle_complex(-5, 12)) # Output: 75.53175934079379121",
        "generated_testcode": "assert angle_complex(1,1) == 45.0\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    zero = [] \n    one = [] \n    k = 0\n    for i in range(n): \n        if string[i] == \"0\": \n            zero.append(i) \n        else: \n            one.append(i) \n    if len(zero) == 0 or len(one) == 0: \n        return n \n    if len(zero) == 1: \n        return 1\n    if len(one) == 1: \n        return n \n    if zero[0] > one[0]: \n        k += one[0] + 1\n    else: \n        k += zero[0] + 1\n    for i in range(1, len(zero)-1): \n        k += zero[i] - zero[i-1] - 1\n    k += n - one[-1] - 1\n    return k ",
        "generated_testcode": "assert find_length(10101100111) == 2\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,a+1):\n        if a%i==0 and b%i==0:\n            sum += i\n    return sum\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(\"The sum of common divisors of\",a,\"and\",b,\"is:\",sum(a,b))\n\n\n#test case\n#Enter first number: 12 \n#Enter second number: 15\n#The sum of common divisors of 12 and 15 is: 30 ",
        "generated_testcode": "assert sum(12,15) == 30 # True\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x = x << 1\n        y = y >> 1\n    return result\n\n# Test the function with sample inputs\nprint(multiply_int(5, 6)) # Output: 30\nprint(multiply_int(10, 15)) # Output: 150\nprint(multiply_int(15, 15)) # Output: 2255\nprint(multiply_int(10, 0)) # Output: 0\nprint(multiply_int(-5, 2)) # Output: -10 ",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n\n# test the function\nprint(long_words(4, \"The quick brown fox jumps over the lazy dog\")) # should return ['jumps']\nprint(long_words(2, \"The quick brown fox jumps over the lazy dog\")) # should return ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy']\nprint(long_words(5, \"The quick brown fox jumps over the lazy dog\")) # should return ['quick', 'brown', 'jumps'] ",
        "generated_testcode": "assert long_words(5, ['apple', 'banana', 'orange', 'pear', 'pineapple', 'watermelon', 'kiwi', 'grape', 'strawberry']) == ['banana', 'orange', 'pear', 'pineapple', 'watermelon']\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    row_sum = [0, 0, 0]\n    col_sum = [0, 0, 0]\n    diag_sum = [0, 0]\n\n    for i in range(3):\n        for j in range(3):\n            row_sum[i] += my_matrix[i][j]\n            col_sum[i] += my_matrix[j][i]\n            if i == j:\n                diag_sum[0] += my_matrix[i][j]\n            if i == 2 - j:\n                diag_sum[1] += my_matrix[i][j]\n\n    return row_sum[0] == row_sum[1] == row_sum[2] == col_sum[0] == col_sum[1] == col_sum[2] == diag_sum[0] == diag_sum[1]\n\n# Testing the function\nmy_matrix = [\n    [2, 7, 6],\n    [9, 5, 1],\n    [4, 3, 8]\n]\n\nprint(magic_square_test(my_matrix))  # True\n\n\nmy_matrix = [\n    [1, 5, 9],\n    [7, 5, 3],\n    [6, 1, 2]\n]\nprint(magic_square_test(my_matrix))  # False ",
        "generated_testcode": "assert magic_square_test(\n    [\n        [2, 7, 6],\n        [9, 5, 1],\n        [4, 3, 8]\n    ]) == True, \"Should return True\"\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = nums[0]\n    max_freq = 1\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num\n\n# Test the function with an example usage:\nnums = [1, 2, 3, 4, 5, 2, 2, 3, 4, 2, 2, 6, 2, 7, 2, 8, 2]\nprint(max_occurrences(nums))  # Output: 2\n",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"apple\", \"cherry\", \"banana\"]) == \"banana\"\n\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    vowels_list = vowels_list[::-1]\n    result = \"\"\n    vowels_count = 0\n    for char in str1:\n        if char in vowels:\n            result += vowels_list[vowels_count]\n            vowels_count += 1\n        else:\n            result += char\n    return result\n\n\n#test the function\nprint(reverse_vowels(\"hello world\")) # Output: \"holle wrld\" ",
        "generated_testcode": "assert reverse_vowels(\"hello world\" ) == \"holle wrold\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    str1 = \" \".join(tup1)\n    return str1\n#Test the function\ntup2 = (\"Hello\", \"How\", \"are\", \"you?\")\nprint(tup_string(tup2)) ",
        "generated_testcode": "assert tup_string(()) == \"\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns the sum of negative numbers in it using lambda function.\n    If the list is empty or doesn't have any negative numbers, it returns 0.\n    \"\"\"\n    # Using lambda function to filter the negative numbers\n    negative_nums = list(filter(lambda x: x < 0, nums))\n    # Using lambda function to calculate the sum of negative numbers\n    sum_neg = sum(negative_nums) if negative_nums else 0\n    return sum_neg\n\n# Test the function with an example\nnums = [1, -2, 3, -4, 5, -6, 7, -8, 9]\nprint(sum_negativenum(nums)) # Output: -13 ",
        "generated_testcode": "assert sum_negativenum(nums=[1, 2, 3, -4, 5, -6, 7, -8, 9]) == -13\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if p%2==0: \n        return True \n    else: \n        return arr[n-1]%2==0\n\n# example\n# Input: arr=[1,3,5,7,9], n=4, p=4\n# Output: True\n# Explanation: The given array after performing 4 operations would be [2,6,10,12,18]. \n# The last element is even, so the function returns True. ",
        "generated_testcode": "assert check_last ([1,2,3,4,5,6],4,2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (2 * n - 1)\n\n# Test cases\nprint(hexagonal_num(1))  # Output: 1\nprint(hexagonal_num(2))  # Output: 6\nprint(hexagonal_num(5))  # Output: 30\nprint(hexagonal_num(10)) # Output: 190\n\n\n# Solution: \n# A hexagonal number is a figurate number that represents a hexagon with n sides. It can be calculated by the formula: n * (2 * n - 1). \n# We can define a function hexagonal_num(n) that takes an integer n as input and returns the nth hexagonal number. ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if units <= 500:\n        return units * 0.5\n    elif 500 < units <= 10000:\n        return 250 + (units - 500) * 0.75\n    else:\n        return 250 + 200 + (units - 1000) * 1.2\n\n\n# test the function\nprint(cal_electbill(250))\nprint(cal_electbill(800))\nprint(cal_electbill(1200))\n\n\n# function to calculate electricity bill with user input\ndef cal_electbill():\n    units = int(input(\"Enter the number of units: \"))\n    if units <= 500:\n        return units * 0.5\n    elif 50 < units <= 10000:\n        return 250 + (units - 50) * 0.75\n    else:\n        return 250 + 200 + (units - 100) * 1.2\n\nprint(cal_electbill()) ",
        "generated_testcode": "assert cal_electbill(100) == 5.5\n\n# Write 2 lines of testing code for the function.\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n\n# Example usage:\nnums = [1, 0, 3, 0, 4, 0, 6, 0, 0, 7, 8, 0, 9]\nprint(zero_count(nums))  # Output: 0.4\n\n\n# Test the function with some more inputs\nprint(zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 0.0\nprint(zero_count([0, 0, 0, 0, 0, 0, 0]))     # Output: 1.0\nprint(zero_count([0, 1, 2, 3, 0, 4, 5]))     # Output: 0.4\n\n\n# Test the function with an empty list\nprint(zero_count([])) # Output: 0.0 ",
        "generated_testcode": "assert zero_count(nums=[1, 0, 3, 2, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9]) == 3/9\n\n\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return True\n    while n > 0:\n        if n & 1:\n            return is_Sum_Of_Powers_Of_Two(n - 1)\n        n >>= 1\n    return False\n\n#Test the function with some examples\nprint(is_Sum_Of_Powers_Of_Two(4)) # True\nprint(is_Sum_Of_Powers_Of_Two(10)) # True\nprint(is_Sum_Of_Powers_Of_Two(11)) # False ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference\n\n# Test the function with a radius of 5\nprint(circle_circumference(5)\n\n# Output: 31.4\n\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    pi = 3.14\n    area = pi * r**2\n    return area\n\n# Test the function with a radius of 5\nprint(circle_area(5)\n# Output: 78.5",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # create an empty list to store singly elements\n    singly_list = []\n    # loop through each element in the list\n    for i in test_list:\n        # check if the element occurs only once in the list\n        if test_list.count(i) == 1:\n            # append the element to singly list\n            singly_list.append(i)\n    # return singly list\n    return singly_list\n\n\n# test the function with a sample tuple\ntest_list = (1, 2, 3, 4, 5, 6, 7, 1, 2, 5, 3, 8, 9, 10, 10)\nprint(extract_singly(test_list))  # Output: [4, 6, 7, 8, 9] ",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'a', 'b', 'c', 'd', 'h', 'i', 'e') == ('f', 'g', 'h', 'i')\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    arr_len = len(nums)\n    while arr_len > 1:\n        max_index = 0\n        for i in range(arr_len):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        flip(nums, max_index)\n        flip(nums, arr_len-1)\n        arr_len -= 1\n    return nums\n\ndef flip(arr, i):\n    start = 0\n    while start < i:\n        arr[start], arr[i] = arr[i], arr[start]\n        start += 1\n        i -= 1\n    return arr\n\n# Example usage:\nnums = [4, 2, 5, 3, 1, 6, 7]\nprint(pancake_sort(nums))  # Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert pancake_sort(nums=[4, 2, 5, 1, 3, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count ",
        "generated_testcode": "assert count_samepair([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"cherry\", \"date\"], [\"cherry\", \"date\", \"elderberry\"]) == 2\n# Test case 1: The output should be 2 because \"banana\" and \"cherry\" appear in all three lists. ",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count \n\n#Test the function\nInput = (1,2,[1,2,3],(4,5,6),[],{},\"python\",(1,2),[3,4])\nprint(find_lists(Input)) # Output: 2 ",
        "generated_testcode": "assert find_lists(()) == 0\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    ans = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            ans += abs(arr[i]-arr[j])\n    return ans \n\n# Driver code \narr = [1,2,3,4,5,6]\nn = len(arr)\nprint(sum_Pairs(arr,n)) ",
        "generated_testcode": "assert sum_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1,2,3,4,5]\nn = len(arr)\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_diff = arr[1] - arr[0] \n    min_element = arr[0] \n    max_element = arr[0] \n    for i in range( 1, n): \n        if arr[i] < min_element: \n            min_element = arr[i] \n        else: \n            if arr[i] - min_element > max_diff: \n                max_diff = arr[i] - min_element \n        if arr[i] > max_element: \n            max_element = arr[i] \n        elif arr[i] - max_element > max_diff: \n            max_diff = arr[i] - max_element \n    return max_diff ",
        "generated_testcode": "assert max_Abs_Diff(arr,n) == 4\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in str1:\n        sum += ord(i)\n    return sum\n\n#test the function\nprint(ascii_value_string(\"hello\"))\nprint(ascii_value_string(\"python\"))\nprint(ascii_value_string(\"345\"))\nprint(ascii_value_string(\" \" * 5)) #prints 20 for 5 spaces\nprint(ascii_value_string(\"\")) #prints 0 for empty string ",
        "generated_testcode": "assert ascii_value_string(\u201chello\u201d) == 532\n# Test case 1: Testing with a small string\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(m-2, -1, -1, -1): \n        for j in range(i+1): \n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n    return tri[0][0] \n# Example usage: \n# triangle = [[1], [2, 3], [4, 5, 6], [10, 7, 9, 8]] \n# m = len(triangle) \n# n = len(triangle[-1]) \n# print(max_path_sum(triangle, m, n))  # Output: 23\n\n\n# To find the maximum path sum of the given triangle, we start from the bottom of the triangle and recursively add the maximum of the adjacent elements in the next row, until we reach the top.\n# The maximum sum is stored in the first element of the first row. ",
        "generated_testcode": "assert max_path_sum(\n    [\n        [1],\n        [2, 3],\n        [4, 5, 6],\n        [7, 8, 9, 10],\n        [11, 12, 13, 14]\n    ]) == 30\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # convert integer to string to iterate over its digits\n    str_x = str(x)\n    # initialize variables to store the maximum sum of digits and current sum\n    max_sum = 0\n    curr_sum = 0\n    # iterate over the digits of the number\n    for digit in str_x:\n        curr_sum += int(digit)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n\n# test the function with an example\nprint(sum_digits_single(25898723)) # output: 22 ",
        "generated_testcode": "assert sum_digits_single(123) == (1, 23)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 2: \n        return n \n    maxlen = 1 \n    for i in range(n): \n        curr_len = 1 \n        for j in range(i+1, n): \n            if arr[j] - arr[i] == 1: \n                curr_len += 1 \n            else: \n                maxlen = max(maxlen, curr_len) \n                curr_len = 1 \n        maxlen = max(maxlen, curr_len) \n    return maxlen + 1\n\n\n# Test the function with sample inputs\narr = [1, 2, 3, 5, 7, 9, 10, 11, 13] \nprint(longest_subseq_with_diff_one(arr, len(arr)))  # Output: 3 ",
        "generated_testcode": "assert longest_subseq_with_diff_one(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if(a==b and a==c): \n        return True \n    elif(a==b): \n        return False \n    else: \n        return True \n# Test the function with example inputs: \nprint(does_Contain_B(1,1,2)) # True \nprint(does_Contain_B(1,1,1)) # False \nprint(does_Contain_B(1,2,3)) # True ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if(p==0):\n        return q\n    elif(q==0):\n        return p\n    else:\n        return gcd(q,p%q)\ndef is_coprime(p,q):\n    if(gcd(p,q)==1):\n        return True\n    else:\n        return False\n#Example\n#print(is_coprime(25,4)) #False\n#print(is_coprime(25,9)) #False\n#print(is_coprime(5,15)) #False\n#print(is_coprime(17,23)) #True ",
        "generated_testcode": "assert gcd(12,8) == 4\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    i=j=0\n    merged=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            merged.append(a[i])\n            i+=1\n        else:\n            merged.append(b[j])\n            j+=1\n    merged+=a[i:]\n    merged+=b[j:]\n    return merged\n\ndef merge_sort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    left=arr[:mid]\n    right=arr[mid:]\n    left=merge_sort(left)\n    right=merge_sort(right)\n    return merge(left,right)\n    \n#Test the function with sample input\narr=[64,34,25,12,22,11,21,13,7,5,2,15,8,10,30]\nprint(\"Original array:\",arr)\narr=merge_sort(arr)\nprint(\"Sorted array:\",arr) ",
        "generated_testcode": "assert merge([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\"], [\"peach\", \"pear\", \"plum\", \"kiwi\", \"orange\"]) == [\"apple\", \"banana\", \"grape\", \"kiwi\", \"kiwi\", \"orange\", \"orange\", \"peach\", \"pear\", \"pear\", \"plum\"]\n\n\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    a, b, c are the coefficients of the parabola equation y=ax^2+bx+c\n    \"\"\"\n    if a == 0:\n        return \"The equation is not a parabola.\"\n    else:\n        x = -b / (2 * a)\n        y = a * (x ** 2) + b * x + c\n        return (x, y)\n\n#test the function with an example\nprint(parabola_vertex(1, 2, 3)) # (-1, -3) ",
        "generated_testcode": "assert parabola_vertex(1, -14, 10) == (-3, 0)\n\n\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    extracted = []\n    for row in nums:\n        extracted.append(row[N])\n    return extracted\n\n# Test the function with a sample two dimensional list and a specified element index\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = 1\nprint(specified_element(nums, N)) # Output: [2, 5, 8] ",
        "generated_testcode": "assert specified_element(nums, 1) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    #Function to toggle all even bits of a given number \n    #Iterate through all bits and check if ith bit is set or not\n    for i in range(0,32):\n        #If i is even and set then toggle it\n        if (i & 1) == 0 and (n & (1 << i):\n            #Toggle the bit\n            n = n ^ (1 << i)\n    return n\n\n#Testing the function with an example\nnum = 10\nprint(\"Original Number:\", bin(num))\nprint(\"After toggling even bits:\", bin(even_bit_toggle_number(num))\n\n#Original Number: 0b1010\n#After toggling even bits: 0b1010101010 ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 is 10 in binary, and after toggling the even bits, it becomes 1010, which is 10 in decimal.\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for item in tuple_str:\n        result.append(int(item))\n    return tuple(result)\n\n# Example usage:\ntup_str = (\"1\", \"2\", \"3\", \"4\", \"5\")\nprint(tuple_int_str(tup_str)) # Output: (1, 2, 3, 4, 5)\n\n\n\ndef tuple_str_to_int(tup_str):\n    return tuple(map(int, tup_str)\n# Example usage:\ntup_str = (\"1\", \"2\", \"3\", \"4\", \"5\")\nprint(tuple_str_to_int(tup_str)) # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if not list1:\n        return []\n    result = [[1, list1[0]]]\n    for i in range(1, len(list1)):\n        if list1[i] == result[-1][1]:\n            result[-1][0] += 1\n        else:\n            result.append([1, list1[i]])\n    return result\n\n# Test the function with an example\nprint(encode_list([1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5])) #[ [2, 1], [1, 2], [3, 3], [2, 5]] ",
        "generated_testcode": "assert encode_list([\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\",\"c\",\"d\",\"d\",\"d\",\"d\",\"d\"]) == [(\"a\",1),(\"b\",2),(\"c\",3),(\"d\",3)]\n\n\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    count=0\n    for i in range(n): \n        if arr[i]!=arr[0]:\n            count+=(arr[i]-arr[0])//k\n            if (arr[i]-arr[0])%k!=0:\n                count+=1\n    return count\n\n# Test the function with an example\narr=[2,5,7,12,15] \nn=len(arr)\nk=3\nprint(min_Ops(arr,n,k)) ",
        "generated_testcode": "assert min_Ops(arr=[1, 5, 7, 2, 4, 8, 3], n=5, k=3) == 5\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if month in [\"March\",\"April\",\"May\",\"June\"]:\n        return \"Spring\"\n    elif month in [\"June\",\"July\",\"August\"]:\n        return \"Summer\"\n    elif month in [\"September\",\"October\",\"November\"]:\n        return \"Autumn\"\n    elif month in [\"December\",\"January\",\"February\"]:\n        if days >= 21:\n            return \"Spring\"\n        else:\n            return \"Winter\"\n    elif month in [\"March\",\"April\",\"May\"]:\n        if days >= 21:\n            return \"Summer\"\n        else:\n            return \"Autumn\"\n    else:\n        return \"Winter\"\n\n#Test the function with some examples\nprint(month_season(\"April\",21))  # Should print \"Spring\"\nprint(month_season(\"January\",31))  # Should print \"Winter\"\nprint(month_season(\"September\",1))  # Should print \"Autumn\"\nprint(month_season(\"March\",20))  # Should print \"Autumn\" ",
        "generated_testcode": "assert month_season(1,1) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    x = (n % b) * gcd_inverse(a,b) % b\n    y = (n - x * a) / b\n    return (x,y)\n\ndef gcd_inverse(a, b):\n    if b == 0:\n        return 1\n    return gcd_inverse(b, a % b) * a // b\n\n\n# Example usage:\n# a = 2\n# b = 3\n# n = 5\n# x, y = solution(a, b, n)\n# print(f\"{x}x + {y}y = {n}\") ",
        "generated_testcode": "assert solution (2, 3, 5) == (1, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # create a new empty list to store the final result\n    result = []\n    # loop through each element in the first list\n    for element in list1:\n        # check if the element is not present in the second list\n        if element not in list2:\n            # add the element to the result list\n            result.append(element)\n    return result\n\n# test the function with some sample inputs\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [2, 4, 6, 8, 10]\nprint(remove_elements(list1, list2))  # Output: [1, 3, 5] ",
        "generated_testcode": "assert remove_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"orange\"], [\"apple\", \"orange\"]) == [\"banana\", \"cherry\"]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n\n#test the function\nprint(sum_series(10)) #should print 30 (10 + 8 + 6 + 4 + 2 = 20, but 0 + 1 is also counted)\nprint(sum_series(20)) #should print 1100 (20 + 18 + 16 + ... + 2 = 100) ",
        "generated_testcode": "assert sum_series(4) == 4\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    area = (l**2)*(s-2*l*(math.sin(math.pi/n))/math.tan(math.pi/n))\n    return area\n\n# The input values are the length of each side (l) and the number of sides (n). \n# Use the formula: s = (n*l**2)/(4*tan(pi/n)) where s is the area of the polygon and pi = 3.14159. \n# Use math.sin() and math.tan() functions to calculate the value of sin(pi/n) and tan(pi/n) respectively.\n# Round the result to 2 decimal places.\nimport math\n\n# test function\nprint(area_polygon(5,3)) # output should be 10.83\nprint(area_polygon(7,4)) # output should be 25.13 ",
        "generated_testcode": "assert area_polygon(5, 3) == 7.0740778276386, \"The area of a regular pentagon with side length 3 should be approximately 7.07\"\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    m = int(input(\"Enter another number: \"))\n\n    if divSum(n) == divSum(m):\n        print(\"The sum of divisors are same.\")\n    else:\n        print(\"The sum of divisors are not same.\")\n\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(i+97):\n            count += 1\n        elif str1[i] == chr(i+65):\n            count += 1\n    return count\n\n#test the function with example\nprint(count_char_position(\"The quick brown fox jumps over the lazy dog\")) #output: 4 ",
        "generated_testcode": "assert count_char_position(\u201cHello\u201d) == 2 # Testcase 1\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i] ^ A[j]) % 2 == 0: \n                count += 1\n    return count \n  \n# Driver code \nA = [1,2,3,4,5,6,7,8,9] \nN = len(A) \nprint(find_even_Pair(A,N)) ",
        "generated_testcode": "assert find_even_Pair(A=[1,2,3,4,5,6,7,8],N=4) == 2 # Returns 2 because (1^3) and (5^7) are the only pairs with xor as an even number. ",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 1\n    p = 1\n    while p < n: \n        p <<= 1\n    return p ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count=0 \n    for i in range(len(a)): \n        if a[i]==x: \n            count=count+1\n    return count\na=[2,4,5,6,2,3,2,2,7,2,9,3] \nx=2\nprint(frequency(a,x)) \n\n#output: 3 ",
        "generated_testcode": "assert frequency(a,x) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        p = [0, 1]\n        for i in range(2, n+1): \n            p.append(2*p[i-1] + p[i-2])\n        return p[n]\n        \n# Test the function\nprint(get_pell(0)) # Expected output: 0\nprint(get_pell(1)) # Expected output: 1\nprint(get_pell(2)) # Expected output: 1\nprint(get_pell(3)) # Expected output: 2\nprint(get_pell(4)) # Expected output: 5\nprint(get_pell(5)) # Expected output: 12\nprint(get_pell(6)) # Expected output: 29\nprint(get_pell(7)) # Expected output: 70\nprint(get_pell(8)) # Expected output: 169\nprint(get_pell(9)) # Expected output: 408\nprint(get_pell(10)) # Expected output: 985\nprint(get_pell(11)) # Expected output: 2378\nprint(get_pell(12)) # Expected output: 5741\nprint(get_pell(13)) # Expected output: 144",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n\n# testing the function\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 1\nn = 3\nprint(sum_range_list(list1, m, n))                                                                                                                                                                                   # Output: 9\n\n\n# If the range is invalid, it should return 0\ndef sum_range_list(list1, m, n):                                                                                                                                                                                \n    if m > n or m < 0 or n > len(list1)-1:\n        return 0\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            sum += list1[i]\n        return sum\n\n# testing the function with invalid range\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 10\nn = 20\nprint(sum_range_list(list1, m, n))                                                                                                                                                                   # Output: 0 ",
        "generated_testcode": "assert sum_range_list(list1, 1, 3) == 10\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # a is the length of one side of the pentagon\n    # use the formula: perimeter = 5 * a\n    return 5 * a\n\n# Test the function with some examples\nprint(perimeter_pentagon(3))   # should print 15\nprint(perimeter_pentagon(7))   # should print 35\nprint(perimeter_pentagon(10))  # should print 50 ",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n\n# Write a function to find the area of a triangle given the base and height.\ndef area_triangle(base, height):\n    pass\n\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n\n# test the function\ns = 'study this string to find the occurence of std'\nprint(count_occurance(s))  # Output: 1\n\n\ns = 'std std std std std'\nprint(count_occurance(s))  # Output: 3\n\ns = 'std'\nprint(count_occurance(s))  # Output: 1\n\ns = 'standard'\nprint(count_occurance(s))  # Output: 0 ",
        "generated_testcode": "assert count_occurance(s) == 2 # Test case 1\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return ''.join(e for e in text if e.isalnum()) \n\n#Example \ntext = \"Hello, World! How are you? 123\" \nprint(remove_splchar(text)) # Output: HelloWorld123 ",
        "generated_testcode": "assert remove_splchar(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello, World! 123\"\nexpected_output_string = \"HelloWorld123\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    d = {}\n    for i in l:\n        key, value = i\n        if key not in d:\n            d[key] = []\n        d[key].append(value)\n    return d\n\n# Test Cases\nprint(group_keyvalue([(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"b\", 4), (\"c\", 5)]) == {\"a\":[1,3], \"b\":[2,4], \"c\":[5]})\nprint(group_keyvalue([(1, \"a\"), (2, \"b\"), (1, \"c\")]) == {1:[\"a\", \"c\"], 2:[\"b\"]})\nprint(group_keyvalue([]) == {}) ",
        "generated_testcode": "assert group_keyvalue([\"apple:3\", \"banana:2\", \"orange:4\", \"apple:1\", \"orange:3\"]) == {\"apple\": [\"3\", \"1\"], \"banana\": [\"2\"], \"orange\": [\"4\", \"3\"]}\n\n\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for char in str1:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\nprint(is_valid_parenthese('()')) #True\nprint(is_valid_parenthese('(())')) #True\nprint(is_valid_parenthese('()()()')) #True\nprint(is_valid_parenthese('(()')) #False\nprint(is_valid_parenthese('(()(')) #False ",
        "generated_testcode": "assert is_valid_parenthese(\"()\" ) == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    p = a + b + c\n    return p\n\n# Test the function with examples\nprint(perimeter_triangle(3, 4, 5) )# Output: 12\nprint(perimeter_triangle(7, 8, 10) )# Output: 25\nprint(perimeter_triangle(2, 7, 7) )# Output: 16 ",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n\n# Write a function to find the area of a triangle given the base and height.\ndef area_triangle(base, height):\n    pass\n\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            lcm=i*j\n            if lcm<L:\n                continue\n            if L<=lcm<=R:\n                return [i,j]\n    return [-1,-1]\n\n#test the function with sample inputs\nprint(answer(2,20))#output: [4,6]\nprint(answer(3,100))#output: [4,12]\nprint(answer(10,30))#output: [12,15] ",
        "generated_testcode": "assert answer(1, 10) == (1, 10)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    found = []\n    for pattern in patterns:\n        if pattern in text:\n            found.append(pattern)\n    return found\n\n# Example usage:\npatterns = ['cat', 'dog', 'bat', 'rat', 'elephant']\ntext = 'The cat and dog were playing with the rat and elephant'\nprint(string_literals(patterns, text)) # Output: ['cat', 'dog', 'rat', 'elephant'] ",
        "generated_testcode": "assert string_literals([\"apple\", \"banana\", \"orange\"], \"I love apples and bananas but not oranges\") == [\"apple\", \"banana\"]\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    keith_num = [1, 3]   # initializing the first two keith numbers\n    i = 2               # starting with the third keith number\n    while keith_num[i-1] <= x:\n        keith_num.append(keith_num[i-1]+keith_num[i-2])   # calculating the next keith number\n        if keith_num[i] == x:                   # if the current keith number is the number to be checked, return True\n            return True\n        elif keith_num[i] > x:            # if the current keith number is greater than the number to be checked, return False\n            return False\n        i += 1                     # else move to the next number\n    return False\n\n# Testing the function with some examples\nprint(is_num_keith(7))   # True\nprint(is_num_keith(10))  # True\nprint(is_num_keith(20))  # False\nprint(is_num_keith(40))  # True\nprint(is_num_keith(50))  # False\nprint(is_num_keith(70))  # False\nprint(is_num_keith(100)) # True\nprint(is_num_keith(101)) # False ",
        "generated_testcode": "assert is_num_keith(19) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    slat, slon, elat, elon = map(math.radians, [slat, slon, elat, elon])\n    R = 63713.0\n    dlat = elat-slat\n    dlon = elon-slon\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(slat) * math.cos(elat) * math.sin(dlon/2) * math.sin(dlon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return R * c\n\n#Test the function\nprint(distance_lat_long(40.7128, -74.0060, 34.0974, -118.4103)) #should return 6764.3 km\n\n\n#Function to find distance between two points given their latitude and longitude in degrees\ndef distance_points(point1, point2):\n    return distance_lat_long(point1[0], point1[1], point2[0], point2[1])\n\n#Test the function\nprint(distance_points((40.7128, -74.060), (34.0974, -118.4103)) #should return 6764.3 km\n\n\n#Function to find the closest point",
        "generated_testcode": "assert distance_lat_long(40, -80, 50, -120) == 47.34\n\n# Write a function to calculate the area of a triangle given the base and height.\ndef triangle_area(base, height):\n    pass\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n1 = len(str1) \n    n2 = len(str2) \n    j = 0\n    for i in range(min(n1, n2): \n        if (str1[i] != str2[i]): \n            break\n        j += 1\n    return str1[:j] \n\ndef longest_common_prefix(strs): \n    if not strs: \n        return \"\"\n    prefix = strs[0] \n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i]) \n        if not prefix: \n            return \"\"\n    return prefix \n  \n# Test the code with sample inputs\nstrs = [\"geeksforgeeks\", \"geeks\", \"geek\", \"geezer\"]\nprint(longest_common_prefix(strs)) # Output: \"gee\" ",
        "generated_testcode": "assert common_prefix_util([\"abcdef\", \"abcef\", \"abxyz\"]), \"abc\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    uppercase = re.findall(r'[A-Z]', string)\n    lowercase = re.findall(r'[a-z]', string)\n    special = re.findall(r'[^0-9a-zA-Z]', string)\n    numeric = re.findall(r'[0-9]', string)\n    print(\"Uppercase Characters: \", uppercase)\n    print(\"Lowercase Characters: \", lowercase)\n    print(\"Special Characters: \", special)\n    print(\"Numeric Characters: \", numeric)\n    print(\"Total Characters: \", len(uppercase+lowercase+special+numeric))\n\n#Example\nfind_character(\"Hello@123\")\n# Output: \n# Uppercase Characters:  []\n# Lowercase Characters:  ['e', 'l', 'l', 'o']\n# Special Characters:  ['@']\n# Numeric Characters:  ['1', '2', '3']\n# Total Characters:  7 ",
        "generated_testcode": "assert find_character(string) == (2, 3, 1, 4) # Test case 1\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] == k:\n                count += 1\n    return count\n\n# Driver code\narr = [1,5,3,2,4,7,9,8,6]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k)) ",
        "generated_testcode": "assert count_pairs(arr=[1, 5, 9, 3, 6, 8, 12, 4, 10], n=6, k=3) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in list:\n        if i>num:\n            result.append(i)\n    return result\n\n#Testing the function with sample inputs\nmylist = [2, 4, 5, 8, 9, 10, 12, 15, 17, 21, 33]\nprint(greater_specificnum(mylist,10)) #[12, 15, 17, 21] ",
        "generated_testcode": "assert greater_specificnum(list(range(10), 5) == [6, 7, 8, 9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if a == 0:\n        return \"Invalid Input\"\n    else:\n        x = (-c) / (2 * b)\n        y = (a * x ** 2) + (b * x) + c\n        return (x, y)\n\n# Test the function with some examples\nprint(parabola_focus(1, 2, 3))\nprint(parabola_focus(2, -3, 1))\nprint(parabola_focus(2, 0, -2)) # Invalid Input ",
        "generated_testcode": "assert parabola_focus(1, -14, 10) == (3, 0)\n\n\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    results = []\n    for pattern in patterns:\n        if re.search(pattern, text):\n            results.append(pattern)\n    return results\n\n# Example usage:\ntext = \"hello world, how are you today?\"\npatterns = [\"hello\", \"world\", \"how\", \"are you\"]\nprint(check_literals(text, patterns)) # Output: ['hello', 'world', 'how', 'are you'] ",
        "generated_testcode": "assert check_literals(\n    \"The quick brown fox jumps over the lazy dog.\",\n    [\"the\", \"fox\", \"dog\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    L = [[0] * (n + 1) for i in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n    index = L[m][n] \n    lcs = [\"\"] * (index + 1) \n    lcs[index] = \"\" \n    i, j = m, n \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs[index - 1] = X[i - 1] \n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1\n        else: \n            j -= 1\n    return ''.join(lcs)\n  \nif __name__ == '__main__': \n    X = \"ABCDGH\"\n    Y = \"AED",
        "generated_testcode": "assert longest_common_subsequence([\"ABCDGH\", \"AEDFHR\"], 4, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    i = 1\n    while n % 2 == 0:\n        n = n // 2\n    if n % 8 == 7:\n        return True\n    while i * i <= n:\n        j = 1\n        while j * j <= n:\n            if i * j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n#Test the function\nprint(prod_Square(12))\nprint(prod_Square(9))\nprint(prod_Square(15))\nprint(prod_Square(16))\nprint(prod_Square(20)) ",
        "generated_testcode": "assert prod_Square(16) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n): \n        if arr[i]<=0: \n            arr[i]=n+2 #Assigning arr[i]=n+2 for those elements which are less than or equal to 0 and greater than n.\n            \n    for i in range(n): \n        if arr[i]>0 and arr[i]<=n: \n            val=abs(arr[i])-1\n            if arr[val]>0: \n                arr[val]=-arr[val] #If arr[val] is already negative, then it means the number val+1 is present in the array\n            elif arr[val]==0: \n                arr[val]=-arr[val]-n-1 #If arr[val] is 0, then it means the number val+1 is not present in the array\n                \n    for i in range(n): \n        if arr[i]>0: \n            return i+1\n    return n+1 #If all numbers are present, then the first missing positive number is n+1 ",
        "generated_testcode": "assert first_Missing_Positive(arr=[1,2,0],n=3) == 3\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 9,
        "correct": true,
        "answer": "    count=0\n    for i in range(x1,x2+1): \n        for j in range(y1,y2+1): \n            if(i==x1 or i==x2 or j==y1 or j==y2): \n                count+=1\n    return count \n#Example \n# Input: x1=2, y1=3, x2=5, y2=7\n# Output: 12 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,4,4) == 16\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if monthname3 in ['April', 'June', 'September', 'November']:\n        return True\n    else:\n        return False\n\nmonthname3 = input(\"Enter a month name: \")\nif check_monthnumber(monthname3):\n    print(\"The month has 30 days.\")\nelse:\n    print(\"The month doesn't have 30 days.\") ",
        "generated_testcode": "assert check_monthnumber(monthname3) == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in str: \n        if i.isalpha(): \n            flag1 = True\n        if i.isnumeric(): \n            flag2 = True\n            \n    if flag1 and flag2: \n        return True\n    else: \n        return False\n\n#Test the function with sample test cases\nprint(check_String(\"Hello\")) #False\nprint(check_String(\"12345\")) #False\nprint(check_String(\"Hello123\")) #True\nprint(check_String(\"Hello World1\")) #True ",
        "generated_testcode": "assert check_String(\u201cHello123\u201d) == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tup = ()\n    for item in test_tup:\n        if item not in new_tup:\n            new_tup += (item,)\n    return new_tup\n\ntest_tup = (1,2,3,4,1,2,5,6,7,8,5,8)\nprint(remove_tuple(test_tup))\n\n\n# Output: (1,2,3,4,5,6,7,8) ",
        "generated_testcode": "assert remove_tuple(('apple', 'banana', 'apple', 'orange', 'apple', 'grapes', 'orange') == ('apple', 'banana', 'orange', 'grapes')\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal_number = 0  \n    base = 1\n    while (n > 0): \n        decimal_number += (n % 10) * base\n        n = n // 10\n        base = base * 8\n    return decimal_number\n\n#Test the function with example\nprint(octal_To_Decimal(123))  # Output: 83\nprint(octal_To_Decimal(107)) # Output: 63",
        "generated_testcode": "assert octal_To_Decimal(123) == 83\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    low = 0\n    high = n-1\n    mid = 0\n    res = -1\n    while low <= high: \n        mid = (low + high) // 2\n        if (mid == 0 and arr[mid] == x) or (arr[mid] == x and arr[mid-1] < x): \n            res = mid \n            return res \n        elif arr[mid] >= x: \n            high = mid - 1\n        else: \n            low = mid + 1\n    return res \n\n#test the function with an example\narr = [1,2,3,4,5,5,5,5,6,7,8,9]\nx = 5\nn = len(arr)\nprint(first(arr, x, n)) ",
        "generated_testcode": "assert first(arr,x,n) == 4\n# Test case 1: arr = [1,2,3,4,4,4,4,5,6,7], x = 4, n = 7\n# Output: 2\n\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of tuples and a value K, remove all tuples with length K.\n\n    \"\"\"\n    return [t for t in test_list if len(t) != K]\n\n\n# Test cases\nprint(remove_tuples([(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13), (14, 15, 16), (17,)], 3))\n# Output: [(4, 5), (14, 15, 16), (17,)]\n\nprint(remove_tuples([(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13), (14, 15, 16), (17,)], 2))\n# Output: [(6, 7, 8, 9), (10, 11, 12, 13)]\nprint(remove_tuples([(1, 2, 3), (4, 5), (6, 7, 8, 9), (10, 11, 12, 13), (14, 15, 16), (17,)], 4))\n# Output: [(1, 2, 3), (4, 5), (6,",
        "generated_testcode": "assert remove_tuples([(1, 2, 3), (4, 5, 6, 7), (9, 10), (11, 12, 13, 14), (15, 16, 17, 18)], 2) == [(4, 5, 6, 7), (11, 12, 13, 14)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup1)):\n        res += (test_tup1[i] ** test_tup2[i],)\n    return res\n\n\n# Test the function with sample tuples\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (3, 2, 2)\nprint(find_exponentio(test_tup1, test_tup2)) # Output: (8, 9, 16) ",
        "generated_testcode": "assert find_exponentio((2, 3) == 8\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    #calculate semi-major axis and semi-minor axis\n    c=((a+b)/2)\n    s=(a*b)\n    area=(1/4)*((3**0.5)*s)\n    return area\n\n#Example usage:\n#print(largest_triangle(5,3) #output: 6.928203230275550828 ",
        "generated_testcode": "assert largest_triangle(2,3) == 3.6, \"Test 1 failed\"\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 0\n    #traverse till log2(n)\n    while (n > 0): \n        n >>= 1\n        power += 1\n    return 1 << power - 1\n\n#Example\n#Input: n = 16\n#Output: 16\n#Input: n = 13\n#Output: 8 ",
        "generated_testcode": "assert highest_Power_of_2(16) == 16\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_val = max(list1)\n    max_positions = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            max_positions.append(i)\n    return max_positions\n\nlist1 = [2,3,4,6,5,4,6,7,8,9,6,2,5]\nprint(position_max(list1) #[4, 5, 6]\n\n\n#alternatively, we can use the built-in function index() method\ndef position_max(list1):\n    max_val = max(list1)\n    max_positions = []\n    for i in range(len(list1)):\n        if list1[i] == max_val:\n            max_positions.append(i)\n    return max_positions\nlist1 = [2,3,4,6,5,4,6,7,8,9,6,2,5]\nprint(position_max(list1) #[4, 5, 6]\n\n#or\ndef position_max(list1):\n    max_val = max(list1)\n    return [i for i in range(len(list1)) if list1[i] == max_val]\nlist1 = [2,3,4,6,5,4,6,7,8,9,6,2,5]\nprint(position_max(list1) #[4, 5, 6",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [3, 4]\n\n\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0:\n        return True\n    else:\n        for i in range(len(lst)-1):\n            if lst[i] != lst[i+1]:\n                return False\n        return True\n    \n#test the function with an example\nprint(chkList([1,2,3,4,4,5,5,6,6,7,7,8,8,9,9])) #True \nprint(chkList([1,2,3,4,5,6,7,8,9])) #False\nprint(chkList([])) #True ",
        "generated_testcode": "assert chkList([\"apple\", \"apple\", \"apple\", \"apple\"]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\n#Test\nprint(remove_even(\"hello\"))\nprint(remove_even(\"Python\"))\nprint(remove_even(\"abcdefg\"))\nprint(remove_even(\"\")) # empty string\nprint(remove_even(\"123456789\")) # only even characters\nprint(remove_even(\"12345678abcdefghijklmnopqrstuvwxyz\")) # mix of characters and digits\n",
        "generated_testcode": "assert remove_even(None) == None\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    xor = bin(n1 ^ n2) \n    set_bits = [ones for ones in xor if ones == '1'] \n    return len(set_bits)\n\n#Sample input \nn1 = 3 \nn2 = 5 \nprint(\"Hamming Distance: \",hamming_Distance(n1,n2)) # Output: 2 ",
        "generated_testcode": "assert hamming_Distance(12, 23) == 3\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": true,
        "answer": "    count = 0 \n    for i in s : \n        if i == c : \n            count += 1\n    return count \n# Test the function \ns = \"Hello World\"\nc = \"l\"\nprint(count(s,c)) # Output: 3 ",
        "generated_testcode": "assert count(s,c) == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    inversion_list = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_list.append((test_tup[i],test_tup[j]))\n    return inversion_list\n\n#Test the function\ntest_tup = (3, 5, 2, 6, 1, 7, 8, 4)\nprint(inversion_elements(test_tup))\n\n#Output: [(3, 2), (5, 2), (5, 1), (5, 4), (6, 1), (6, 4), (6, 2), (7, 1), (7, 2), (7, 4), (8, 1), (8, 2), (8, 4)] ",
        "generated_testcode": "assert inversion_elements(()) == []\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup)):\n        if i != len(test_tup)-1:\n            res += (test_tup[i] + test_tup[i+1],)\n    return res\n\n# Test the function with a sample input\ntest_tup = ('Hello', 'World', 'Python', 'Programming')\nprint(concatenate_elements(test_tup))  # Output: ('HelloWorld', 'PythonProgramming') ",
        "generated_testcode": "assert concatenate_elements(('abc') == 'abcabc'\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    res = 0\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            res = max(res, dp[i][j])\n                \n    return res\n\n# Test the function\nstr = \"AABEBCDDCE\"\nprint(find_longest_repeating_subseq(str)) ",
        "generated_testcode": "assert find_longest_repeating_subseq(\u201cabcabc\u201d) == 2\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r\"^[+-]?\\d+(\\.\\d{1,2})?$\"\n    if re.match(pattern, num):\n        return True\n    else:\n        return False\n\nimport re\ndef check_decimal_precision(decimal_list):\n    for decimal in decimal_list:\n        if is_decimal(decimal):\n            print(f\"{decimal} is correct decimal with precision 2\")\n        else:\n            print(f\"{decimal} is not a correct decimal with precision 2\")\n\n# Example usage:\ndecimal_list = [\"3.15\", \"0.7\", \"-2.45\", \"12.456\", \"+4.2\", \"6.789\", \"-5\", \"2.3333\", \"2.4567\", \"-5.6789\"]\ncheck_decimal_precision(decimal_list) ",
        "generated_testcode": "assert is_decimal(12.34) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if not heap:\n        return []\n    if a>=heap[0]:\n        return heap\n    else:\n        heap[0] = a\n        i = 0\n        while i*2+1<len(heap):\n            if i*2+2<len(heap):\n                if heap[i*2+1]<heap[i*2+2]:\n                    child = i*2+1\n                else:\n                    child = i*2+2\n            else:\n                child = i*2+1\n            if heap[i]>heap[child]:\n                heap[i],heap[child] = heap[child],heap[i]\n                i = child\n            else:\n                break\n        return heap",
        "generated_testcode": "assert heap_replace(heap,a) == expected_output\n# Test case 1\nheap = [5, 3, 8, 1, 6, 2, 7]\na = 4\nexpected_output = [5, 4, 8, 1, 6, 2, 7, 3]\nheap_replace(heap,a)\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(\"^[a-zA-Z0-9]+$\")\n    return pattern.match(string)\n\n#Example:\n#>>> is_allowed_specific_char(\"Hello123\")\n#<_sre.SRE_Match object; span=(0, 8), match='Hello123'>\n#>>> is_allowed_specific_char(\"Hello!@#\")\n#None\n\n#Explanation:\n#The function takes a string as an input and uses the re.compile() method to create a regular expression that matches any string that contains only alphabets and digits. The pattern \"^[a-zA-Z0-9]+$\" means that the string should only contain characters between a to z and A to Z and digits 0 to 9 and nothing else. The match() method is used to check if the input string matches the given pattern. If it matches, it returns a match object else it returns None. ",
        "generated_testcode": "assert is_allowed_specific_char(string) == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(1,n+1): \n        if (i & (1 << 1) and i & (1 << 3)): \n            count += 1 \n    return count\n# Test the function with n = 10 \nprint(count_Num(10)) ",
        "generated_testcode": "assert count_Num(10) == 2 # 1010 in binary is 5, so there are two numbers whose 1st and 3rd bits are set. ",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return (n*(n+1)*1*(n+1)*(2*n+1)*(3*n+1))/30\n\n#Example:\n#Input: 5\n#Output: 2225 ",
        "generated_testcode": "assert fourth_Power_Sum(4) == 100\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Concatenate two tuples of strings\n    :param test_tup1: tuple of strings\n    :param test_tup2: tuple of strings\n    :return: tuple of concatenated strings\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n\n# Test the function with sample data\ntup1 = (\"apple\", \"banana\", \"cherry\")\ntup2 = (\"123\", \"456\", \"789\")\nprint(concatenate_strings(tup1, tup2)) # Expected output: (\"apple123\", \"banana456\", \"cherry789\") ",
        "generated_testcode": "assert concatenate_strings((\"Hello\", \"World\") == \"HelloWorld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    degree = radian * 180 / 3.14159\n    return degree\n\n# Test the function with an example\nprint(degree_radian(3.14159))\n\n\n# Write a function to format a number into currency format\ndef format_currency(num):\n    return '${:,.2f}'.format(num)\n\n\n# Test the function with an example\nprint(format_currency(23456789.123)) ",
        "generated_testcode": "assert degree_radian(3.14159) == 176.72\n\n\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Given a run-length code list, return the original list. \n    \"\"\"\n    decoded_list = []\n    for i in range(0, len(alist), 2):\n        freq = alist[i]\n        value = alist[i+1]\n        decoded_list.extend([value]*freq)\n    return decoded_list\n\n\n#Example usage:\n#decode_list([1,2,3,2,4,5,1,6]) => [2, 4, 4, 6] ",
        "generated_testcode": "assert decode_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\nlist1 = [[1, 2], [2, 3], [3, 4]]\nlist2 = [[4, 5], [2, 3], [1, 2]]\nlist3 = [[5, 6], [2, 3], [1, 2]]\n\nprint(check_subset_list(list1, list2))  # True\nprint(check_subset_list(list2, list1))  # False\nprint(check_subset_list(list1, list3))  # False ",
        "generated_testcode": "assert check_subset_list([\"apple\", \"banana\", \"cherry\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    char_list = []\n    for i in str:\n        if i in char_list:\n            return i\n        else:\n            char_list.append(i)\n    return None\n\n#test the function with example\nprint(first_Repeated_Char(\"helloh\")) # output: 'h' ",
        "generated_testcode": "assert first_Repeated_Char(\"abcabc\") == \"a\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": true,
        "answer": "    return abs(A-B)  \nA = 6\nB = 9\nprint(min_Operations(A,B))  # output: 3\n\n# Explanation:\n# We need to make A equal to B, and the only operation we can perform is subtraction, so we subtract the difference between A and B (A-B) which is 3. \n# Therefore, the minimum number of operations required is 3. ",
        "generated_testcode": "assert min_Operations(10, 15) == 5\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple as input and extracts maximum and minimum k elements from it.\n    :param test_tup: tuple\n    :param K: integer\n    :return: tuple of k maximum and k minimum elements.\n    \"\"\"\n    # converting tuple to list\n    test_list = list(test_tup)\n\n    # sorting the list in ascending order\n    test_list.sort()\n    # finding minimum k elements\n    min_k = test_list[:K]\n    # finding maximum k elements\n    max_k = test_list[-K:]\n    # converting lists back to tuple\n    min_k = tuple(min_k)\n    max_k = tuple(max_k)\n    # returning the result tuple\n    return min_k, max_k\n\n# testing the function\ntest_tup = (1, 5, 3, 9, 7, 4, 2, 8, 6, 10)\nK = 3\nprint(\"Original Tuple:\", test_tup)\nprint(\"Minimum K Elements:\", extract_min_max(test_tup, K)[0])\nprint(\"Maximum K Elements:\", extract_min_max(test_tup, K)[1]) ",
        "generated_testcode": "assert extract_min_max(('apple', 2) == None\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    while count < n:\n        if '.' in text:\n            text = text.replace('.', ':', 1)\n            count += 1\n        elif ',' in text:\n            text = text.replace(',', ':', 1)\n            count += 1\n        elif ' ' in text:\n            text = text.replace(' ', ':', 1)\n            count += 1\n        else:\n            break\n    return text\n\n# Test the function with an example text and n=2\ntext = \"Hello, World. This is a sample text.\"\nn = 2\nprint(replace_max_specialchar(text,n)) # Output: \"Hello: World: is a sample text.\" ",
        "generated_testcode": "assert replace_max_specialchar(text=\"Hello, world!\", n=1) == \"Hello: world!\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n# Example usage:\nprint(first_even([3, 6, 1, 2, 8, 11, 5, 4])) # Output: 6 ",
        "generated_testcode": "assert first_even(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a tuple as input and checks if all its elements have same data type or not.\n    If all the elements have same data type, it returns True, else False.\n    \"\"\"\n    data_type = type(test_tuple[0]\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n\n# Example usage:\n# test_tuple = (1, 2, 3, 4, 5)\n# print(check_type(test_tuple))  # Output: True\n# test_tuple = (\"hello\", \"world\", \"python\")\n# print(check_type(test_tuple))  # Output: True\n# test_tuple = (1, \"python\", \"hello\")\n# print(check_type(test_tuple))  # Output: False ",
        "generated_testcode": "assert check_type(()) == True\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n\n# Testing the function with an example\narr = [1, 2, 3, 3, 3, 4, 3, 3, 3, 3, 5, 6, 3, 7, 3]\nn = len(arr)\nx = 3\nif is_majority(arr, n, x):\n    print(\"Majority element present\")\nelse:\n    print(\"Majority element not present\") ",
        "generated_testcode": "assert is_majority(arr=[1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6], n=7, x=4) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1\n    return count \n    \n# example \nprint(count_Set_Bits(13)) # Output: 3 ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    while high > low: \n        mid = (low + high) // 2\n        if arr[mid] < arr[high]: \n            high = mid \n        else: \n            low = mid + 1\n    return arr[low] \n  \ndef min_in_rotated(arr): \n    n = len(arr) \n    if n == 0: \n        return None\n    if n == 1 or arr[0] < arr[n-1]: \n        return arr[0] \n    return find_Min(arr,0,n-1) \n\n# Example usage: \narr = [4, 5, 6, 7, 0, 1, 2, 3]\nprint(min_in_rotated(arr)) # Output: 0 ",
        "generated_testcode": "assert find_Min(arr=[4,5,6,7,0,1,2,3],low=0,high=4) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# Test the function with some examples\nprint(odd_values_string(\"hello\"))\nprint(odd_values_string(\"python\"))\nprint(odd_values_string(\"abcdef\"))\nprint(odd_values_string(\"racecar\")) ",
        "generated_testcode": "assert odd_values_string(input_string) == expected_output_string\n\n# For example, if input_string is \"Hello World\", the expected output is \"HloWrd\"\n# The first character \"H\" has index 0, the second character \"e\" has index 1, the third character \"l\" has index 2, and so on. \n# Since 1 and 3 are odd indices, they are removed from the string. ",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if a < b and a < c: \n        return a \n    elif b < c: \n        return b \n    else: \n        return c \n\nprint(min_of_three(8, 3, 7)) \n# Output: 3 \nprint(min_of_three(8, 9, 7)) \n# Output: 7 \nprint(min_of_three(1, 2, 3)) \n# Output: 1 ",
        "generated_testcode": "assert min_of_three(5, 10, 15) == 5\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    m = (1 << l) - 1   # creates a binary number with all bits set to 1 from l to 0 and all bits set to 0 from l+1 to r-1\n    if (n & m == m): \n        return True\n    else:\n        return False\n# example\n# n = 8 #binary 10000\n# l = 2\n# r = 4\n# print(all_Bits_Set_In_The_Given_Range(n,l,r)) #True ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    i, j = 0, n-1\n    while i < j:\n        if arr[i] < 0 and arr[j] < 0:\n            i += 1\n        elif arr[i] > 0 and arr[j] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] < 0 and arr[j] > 0:\n            j -= 1\n        else:\n            i += 1\n    return arr\n\n# Test the code\narr = [-12, 11, -13, -5, 6, -7, 5, -3, -6]\nn = len(arr)\nprint(re_arrange_array(arr, n)) # Output: [-12, -13, -5, -7, -3, 11, 5, 6] ",
        "generated_testcode": "assert re_arrange_array(arr=[-1, 2, -3, 4, 5, 6, -2, 8, -7, 0, 9], n=7) == [-1, -3, -2, -7, 0, 2, 4, 5, 6, 8, 9]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1.replace(' ',char)\n\n#test the function\nprint(replace_blank('I am a    student','%'))\nprint(replace_blank('Hello World','$'))\nprint(replace_blank('Python is fun','_'))\n\n\n#output\n#I%am%a______student\n#Hello$World\n#Python_is_fun ",
        "generated_testcode": "assert replace_blank(\"I am a    string with    blank spaces\",'*') == \"I*am*a****string*with****blank*spaces\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n <= 1:\n        return tri[0][0]\n    else:\n        # calculate the maximum sum for the last row\n        # starting from the bottom\n        for i in range(n-1, 0, -1):\n            for j in range(i):\n                if tri[i][j] != 0:\n                    tri[i][j] += max(tri[i+1][j], tri[i+1][j+1])\n        return tri[0][0]\n\n# Example usage:\ntri = [\n    [0, 0, 0, 0, 0, 0, 0, 0],\n    [3, 0, 0, 0, 0, 0, 0],\n    [7, 4, 0, 0, 0, 0, 0],\n    [2, 4, 6, 0, 0, 0, 0],\n    [8, 5, 9, 3, 0, 0, 0],\n    [2, 6, 4, 3, 8, 0, 0]\n]\nn = 4\nprint(max_sum(tri, n)) # Output: 23\n\n# Explanation: 3 + 7 + 4 + 9 + 3 + 8 = 23 is the maximum sum in the given triangle\n\n# We start from the bottom and check each node if it is not 0, we add the maximum",
        "generated_testcode": "assert max_sum(\n    [\n        [1, 2, 3],\n        [4, 5, 6, 7],\n        [8, 9, 10, 11, 12],\n        [13, 14, 15, 16, 17]\n    ], 3) == 30\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.sort(reverse=True)\n    return list1[:n]\n\nlist1=[2,5,7,9,3,8,6,4,5,1,0]\nn=3\nprint(larg_nnum(list1,n)) # output [9,8,7]\n\n\n# Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n    list1.sort()\n    return list1[:n]\n\nlist1=[2,5,7,9,3,8,6,4,5,1,0]\nn=3\nprint(small_nnum(list1,n)) # output [0,1,2] ",
        "generated_testcode": "assert larg_nnum(list1,n) == expected_output\n\n# Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n    pass\n\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi=22/7\n    return 2*pi*r*h\n\n#testing the function\nradius=int(input(\"Enter the radius of cylinder: \"))\nheight=int(input(\"Enter the height of cylinder: \"))\n\nprint(\"The lateral surface area of cylinder is: \", lateralsuface_cylinder(radius,height))\n\n\n#output:\n#Enter the radius of cylinder: 5\n#Enter the height of cylinder: 10\n#The lateral surface area of cylinder is:  62.831828182845905783 ",
        "generated_testcode": "assert lateralsuface_cylinder(5, 10) == 78.53981634\n\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function calculates the volume of a cube with a given length.\n    \"\"\"\n    volume = l ** 3\n    return volume\n\n# Test the function with a length of 5\nprint(volume_cube(5) == 125) # True\n\n\n# Test the function with a length of 10\nprint(volume_cube(10) == 10000) # True ",
        "generated_testcode": "assert volume_cube(3) == 27\n\n# Write a function to find the volume of a rectangular prism.\ndef volume_rectangular_prism(l, w, h):\n    pass\n\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return n | 0x55555555555\n\n#Example: \n#Input: n = 26(110010 in binary) \n#Output: 30(1111110 in binary) \n#Explanation: \n#All even positions are set to 1, so 11010 becomes 11110. ",
        "generated_testcode": "assert even_bit_set_number(10) == 10 # 1010 is 1010 in binary, so all even bits are set\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    n = (N-1)//K\n    return n*(n+1)*(n+2)//6\n\n#Example:\n# Input: N = 8, K = 2\n# Output: 3\n# Explanation:\n# There are 8 points and each pair of points can form a triangle. But, there are 2 points on the boundary, so we can only choose 6 points from the inside to form equilateral triangles. \n# Therefore, the number of triangles is (6/3) = 2. (Every set of 3 points forms exactly one equilateral triangle)\n\nprint(No_of_Triangle(8,2)) ",
        "generated_testcode": "assert No_of_Triangle(5,3) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    dict = {}\n    for i in range(len(test_list)):\n        if test_list[i] not in dict:\n            dict[test_list[i]] = 1\n        else:\n            dict[test_list[i]] += 1\n\n    return dict\n\n#Test the function with sample data\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (1, 2), (7, 8), (3, 4), (5, 6)]\nprint(check_occurences(test_list)) ",
        "generated_testcode": "assert check_occurences(test_list) == True\n\n# Test case 1: All records are unique\ntest_list = [('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50)]\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str) \n    return n * (n + 1) // 2 # Using the formula n(n+1)/2 as the total number of substrings for a string of length n is n(n+1)/2. ",
        "generated_testcode": "assert number_of_substrings(\u201cabc\u201d) == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    def count(m,n,dp,i):\n        if n==0:\n            return 1\n        if i>=m or n<0:\n            return 0\n        if dp[n][i]!=-1:\n            return dp[n][i]\n        dp[n][i]=(count(m,n-1,dp,i+1)+count(m,n-1,i*2+1))%1000000000007\n        return dp[n][i]\n    \n    dp=[[-1 for i in range(m+1)] for j in range(n+1)]\n    return count(m,n,0)\n        \n        \nm=3\nn=3\nprint(get_total_number_of_sequences(m,n))\n\n\n# Example:\n# m=3, n=3\n# Then possible sequences are 1,2,4 and 1,2,6.\n# So, the function will return 2. ",
        "generated_testcode": "assert get_total_number_of_sequences(5, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    list1.pop()\n    list1.extend(list2)\n    return list1\n\n#Test the function with example\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9]\nprint(replace_list(list1,list2)) # Output: [1,2,3,6,7,8,9] ",
        "generated_testcode": "assert replace_list([\"a\",\"b\",\"c\"],[\"d\",\"e\"]) == [\"a\",\"b\",\"d\",\"e\"]\n\n# Test case 1: Test if the function replaces the last element of the list with another list\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    arr = []\n    for i in range(m):\n        arr.append([])\n        for j in range(n):\n            arr[i].append([])\n            for k in range(o):\n                arr[i][j].append('*')\n    return arr\n\n# test the function\narr = array_3d(3,4,2)\nprint(arr)\n# output: [\n#          [['*', '*'],\n#          ['*', '*'],\n#          ['*', '*'],\n#          ['*', '*']\n#         ]\n#        ]\n\n#----------- 2nd approach -----------\ndef array_3d(m,n,o):\n    return [['*' for j in range(n)] for i in range(m) for k in range(o)]\n\n# test the function\narr = array_3d(3,4,2)\nprint(arr)\n# output: [\n#          [['*', '*'],\n#          ['*', '*'],\n#          ['*', '*'],\n#          ['*', '*']\n#         ] ",
        "generated_testcode": "assert array_3d(2,3,4) == [\n                        [\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ],\n                            [\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*'],\n                                ['*', '*', '*', '*']\n                            ]\n                        ]\n                    ]\n\n# Write a function to print the above 3d array in a matrix form.\ndef print_3d_array(arr):\n    pass\n\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n#Test the function\nstring = \"Hello World\"\nprint(\"Total characters in the string:\", count_charac(string)) ",
        "generated_testcode": "assert count_charac(\u201chello\u201d) == 5\n\n# Write a function to count the number of vowels in a string.\ndef count_vowels(str1):\n    pass\n\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    lst.sort(key=lambda x: x[0], reverse=True)\n    return lst \n\n# Test the function with an example list \nlst = [(3, 'apple'), (2, 'banana'), (5, 'orange'), (3, 'grapes'), (1, 'kiwi'), (2, 'mango')] \nprint(sort_on_occurence(lst)) # Output: [(5, 'orange'), (3, 'apple'), (3, 'grapes'), (2, 'banana'), (2, 'mango'), (1, 'kiwi')] \n\n\n# Explanation: \n# The function takes a list of tuples as input and sorts it based on the first element of each tuple in descending order. \n# It uses the `sort()` method of list with a lambda function as the `key` parameter. The lambda function takes each tuple as input and returns its first element. \n# So, the list is sorted based on the first element of each tuple in descending order. ",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (2, 1), (2, 3), (1, 1), (3, 2)] == [(1, 2), (1, 1), (2, 3), (3, 4), (2, 1)]\n\n# Test case 1: Test the function with a list of tuples with positive integers\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = N\n    while True:\n        i += 1\n        root = int(i**(1/2) + 0.5)\n        if root*root == i:\n            return i\n\n# test the function\nprint(next_Perfect_Square(4))\nprint(next_Perfect_Square(12))\nprint(next_Perfect_Square(23)) ",
        "generated_testcode": "assert next_Perfect_Square(121) == 144\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    dp = [arr[0], max(arr[0], arr[1])]\n    for i in range(2, n):\n        dp.append(max(dp[i-1], dp[i-2] + arr[i]) if i%2 == 0 else dp[i-1] + arr[i])\n    return dp[-1]\n\narr = [1, 4, 2, 3, 6, 7, 1, 8, 9, 2, 4]\nn = len(arr)\nprint(max_sum(arr, n))\n\n\n# Output: 18 ",
        "generated_testcode": "assert max_sum(arr=[1, 2, 3, 4, -10, 5, 7, 6, 8, -3, 4]) == 15\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Function to compute square roots using babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Negative numbers have no square roots.\")\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(guess - new_guess) < 0.0000001:\n            return new_guess\n        guess = new_guess\n\n# Example usage:\nprint(babylonian_squareroot(10))  # Output: 3.16222777666016837943\nprint(babylonian_squareroot(14.5))  # Output: 3.8000577875635310023\nprint(babylonian_squareroot(2))  # Output: 1.414213562373095049\nprint(babylonian_squareroot(9))  # Output: 3.0000000000000000003\n",
        "generated_testcode": "assert babylonian_squareroot(4) == 2\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(str) \n    # Create a table to store lengths of longest palindromic subsequence of substring \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n  \n    for sub_len in range(2, n+1): \n        for start in range(n-sub_len+1): \n            end = start + sub_len - 1\n            if sub_len == 2 and str[start] == str[end]: \n                L[start][end] = 2\n            elif str[start] == str[end]: \n                L[start][end] = L[start+1][end-1] + 2\n            else: \n                L[start][end] = max(L[start+1][end], L[start][end-1]) \n  \n    return L[0][n-1] ",
        "generated_testcode": "assert lps(\"BBABCBCAB\" ) == 7\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    sum = 0\n    for i in range(1, n + 1):\n        sum += 1/i\n    return sum\n\n# Test cases\nprint(harmonic_sum(0)) # Should print 0\nprint(harmonic_sum(1)) # Should print 1\nprint(harmonic_sum(2)) # Should print 1.5\nprint(harmonic_sum(3)) # Should print 1.5 + 1/2 = 1.75\nprint(harmonic_sum(4)) # Should print 1.5 + 1/2 + 1/3 = 1.83333\nprint(harmonic_sum(7)) # Should print 1.5 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 = 2.4622\nprint(harmonic_sum(10)) # Should print 1.5 + 1/2 + 1/3 + 1/4 + 1/5 + 1/6 + 1/7 + 1/8 + 1/9 + 1/10 = 2.49333\nprint(harmonic_sum(20)) # Should print 1.5 + 1/2 + 1/3 + 1/4 + ... + 1/20 = 6.0037",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # using lambda function to find the intersection of two arrays\n    intersection = list(filter(lambda x: x in array_nums1, array_nums2))\n    return intersection\n# testing the function\narray_nums1 = [1,2,3,4,5,6]\narray_nums2 = [4,5,6,7,8,9]\nprint(intersection_array(array_nums1,array_nums2)) # Output: [4, 5, 6]\n\n\n# Using lambda function to find the even numbers in a list\nlst = [1,2,3,4,5,6,7,8,9,10]\neven_nums = list(filter(lambda x: x%2==0, lst))\nprint(even_nums) # Output: [2, 4, 6, 8, 10]\n\n# Using lambda function to square all elements in a list\nlst = [1,2,3,4,5,6,7,8,9]\nsquare_lst = list(map(lambda x: x**2, lst))\nprint(square_lst) # Output: [1, 4, 9, 16, 25, 36, 49, 64, 81] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5], [4,5,6,7]) == [4,5]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    c = 0\n    for i in tup:\n        if i == x:\n            c += 1\n    return c \n\n#Example:\ntup = (1,2,3,4,5,3,6,7,3,8,9,3) \nx = 3\nprint(count_X(tup, x)) #3\n\n\ntup = (1,2,3,4,5,6,7,8,9) \nx = 3\nprint(count_X(tup, x)) #1 ",
        "generated_testcode": "assert count_X((\"abracadabra\", \"a\") == 5)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n\n# Test the function\nmy_list = [1, 2, 3, 4, 5, 6, 7]\nelement = 0\nprint(insert_element(my_list, element)) #[0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7] ",
        "generated_testcode": "assert insert_element([\"apple\", \"banana\", \"cherry\"], \"orange\") == [\"orange\", \"apple\", \"orange\", \"banana\", \"orange\", \"cherry\"]\n\n\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    real_part = numbers.real\n    imag_part = numbers.imag\n    r = (real_part**2 + imag_part**2)**0.5\n    theta = (180/3.14)*np.arctan(imag_part/real_part)\n    return r, theta ",
        "generated_testcode": "assert convert(2+3j) == (2.236, 1.107)\n\n# The output should be (2.236, 1.107)\n\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\n# test the function\nlist1 = [1, 2, 'apple', 'banana', 3, 'cherry', 4, 'dog', 5]\nprint(count_integer(list1)) # Output: 3 ",
        "generated_testcode": "assert count_integer([]), 0\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n# Test the function with a sample string\nstring = \"apple banana elephant grape pear orange\"\nprint(words_ae(string) == ['apple', 'elephant']) # Output: True ",
        "generated_testcode": "assert words_ae([\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"pear\", \"orange\"]) == [\"apple\", \"banana\", \"elephant\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return [p for p in itertools.product(l, repeat=n)]\n\nl = ['Red', 'Green', 'Blue']\nn = 2\nresult = combinations_colors(l, n)\nprint(result)\n\n# [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')] ",
        "generated_testcode": "assert combinations_colors([\"red\", \"green\", \"blue\"], 2) == [(\"red\", \"red\"), (\"red\", \"green\"), (\"red\", \"blue\"), (\"green\", \"green\"), (\"green\", \"blue\"), (\"blue\", \"blue\")]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(2, n):\n        if all(i % j != 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count\n\n# test the function\nprint(count_Primes_nums(10)) # Output: 3\nprint(count_Primes_nums(20)) # Output: 7\nprint(count_Primes_nums(30)) # Output: 10 ",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return (a,b)\na = 5\nb = 7\nprint(\"Before swapping a = \",a,\" b = \",b)\na,b = swap_numbers(a,b)\nprint(\"After swapping a = \",a,\" b = \",b) ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n\n# The function should return a tuple with the two numbers in reverse order. ",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x%2!=0, array_nums))\n\n\n# test the function with an example array\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_odd(array_nums))  # Output: 4\n\n\n# test the function with an empty array\narray_nums = []\nprint(count_odd(array_nums))  # Output: 0\n\n\n# test the function with a array containing only even numbers\narray_nums = [2, 4, 6, 8, 10]\nprint(count_odd(array_nums))  # Output: 0 ",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n\n\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return None\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        max_tuple += (max(test_tup1[i], test_tup2[i]),)\n    return max_tuple\n\n# Test the function with two tuples\ntup1 = (2, 5, 9, 3, 7)\ntup2 = (7, 8, 5, 4, 6)\nprint(maximize_elements(tup1, tup2)) # Output: (7, 8, 9, 5, 7) ",
        "generated_testcode": "assert maximize_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9) ) == (5, 6, 7, 8, 9)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "34B",
        "pass": 8,
        "correct": true,
        "answer": "    \"\"\"\n    Finds the nth Newman-Shanks Prime number using recursion.\n    \"\"\"\n    def newman_shanks(n, a=2, b=3, count=1):\n        if n == count:\n            return b\n        if is_prime(b):\n            count += 1\n            return newman_shanks(n, 2*b + 1, count)\n        return newman_shanks(n, 2*b + 1, count) if is_prime(2*b + 1) else newman_shanks(n, 3*b + 1, count)\n    \n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i*i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    return newman_shanks(n)\n\n# Example usage:\n# >>> newman_prime(1)\n# 2\n# >>> newman_prime(2)\n# 3\n# >>> newman_prime(3)\n# 7\n# >>> newman_prime(4)\n# 17\n# >>> newman_prime(5)\n# 41\n# >>> newman_",
        "generated_testcode": "assert newman_prime(1) == 3\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    try:\n        result = []\n        for i in range(len(test_tup1):\n            result.append(test_tup1[i]/test_tup2[i])\n        return tuple(result)\n    except ZeroDivisionError:\n        return \"Division by zero\"\n    except TypeError:\n        return \"Unsupported operation\"\n    except:\n        return \"Something went wrong\"\n\n# Example usage:\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (2, 4, 3)\nresult = division_elements(test_tup1, test_tup2)\nprint(result) # Output: (5, 5, 10) ",
        "generated_testcode": "assert division_elements((10, 2, 5, 6, 4) , (2, 4, 3, 2) ) == (5.0, 1.25, 3.0)\n\n# The output should be (5.0, 1.25, 3.0) ",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n\n# example usage:\nprint(split_two_parts([1,2,3,4,5,6,7,8,9], 3)) # returns ([1, 2, 3], [4, 5, 6, 7, 8, 9]) ",
        "generated_testcode": "assert split_two_parts([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], 2) == ([\"apple\", \"banana\"], [\"cherry\", \"date\", \"elderberry\", \"fig\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**d1, **d2}\n\n# Test the function with two dictionaries\nd1 = {'a':1,'b':2,'c':3}\nd2 = {'d':4,'e':5,'f':6}\nprint(merge_dict(d1,d2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n\n\n\n# Write a function to reverse a string.\ndef reverse_string(s):\n    return s[::-1]\n# Test the function with a string\nprint(reverse_string('hello')) # Output: olleh\n\n\n# Write a function to check whether a string is palindrome or not.\ndef is_palindrome(s):\n    return s == s[::-1]\n# Test the function with a string\nprint(is_palindrome('racecar')) # Output: True\nprint(is_palindrome('hello')) # Output: False\n\n\n# Write a function to check whether a number is prime or not.\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n# Test the function with a number\nprint(is_prime(11)) # Output: True\nprint(is_prime(12)) # Output: False\n",
        "generated_testcode": "assert merge_dict(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'c': 4, 'd': 5, 'e': 6}\n) == {'a': 1, 'b': 2, 'c': 4, 'd': 5, 'e': 6}\n\n\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    #A dog's first year is equal to 15 years in human years\n    #After that, each year for a dog is equal to 15 years for a human\n    if h_age <= 1:\n        return 15\n    else:\n        return 15 + (h_age - 1) * 5\n\n#Test the function\nprint(dog_age(1))\nprint(dog_age(2))\nprint(dog_age(3))\nprint(dog_age(6))\nprint(dog_age(10))\nprint(dog_age(15))\nprint(dog_age(20))\nprint(dog_age(21))\n",
        "generated_testcode": "assert dog_age(1) == 15\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return [S[i:i+step] for i in range(0, len(S), step)]\n\n# Example usage:\n# >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n# [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n# >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n# [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n# [[1, 2, 3, 4, 5], [6, 7, 8, 9]] ",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"], 2) == [[\"a\", \"c\", \"e\", \"g\"], [\"b\", \"d\", \"f\", \"h\"], [\"i\", \"j\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return 4 * (l * l)\n\n# Test the function with a valid input\nprint(lateralsurface_cube(5))\n\n# Test the function with an invalid input\nprint(lateralsurface_cube(\"hello\")) ",
        "generated_testcode": "assert lateralsurface_cube(3) == 54\n\n# The testing code should include at least 2 different test cases. ",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    i = 1\n    count = 0\n    while count < n:\n        if i % 2 != 0:\n            sum += i*i\n            count += 1\n        i += 1\n    return sum\n\n# test the function\nprint(square_Sum(5))  # Output: 45 (1^2 + 3^2 + 5^2 + 7^2 + 9^2 + 11^2 = 45) ",
        "generated_testcode": "assert square_Sum(3) == 35\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize variables\n    num_count = 0\n    current_num = 0\n    current_row = 0\n    # iterate until we have found the n'th number\n    while num_count < n:\n        # increment current_row and reset current_num\n        current_row += 1\n        current_num = 0\n        # iterate through the current row\n        for i in range(current_row):\n            current_num += 1\n            # check if current_num is a star number\n            if is_star_num(current_num):\n                num_count += 1\n        # if we have found the n'th number, return it\n        if num_count == n:\n            return current_num\n    # if n is not found, return -1\n    return -1\n\ndef is_star_num(num):\n    # convert num to string and split into list of digits\n    num_str = str(num)\n    digits = list(num_str)\n    # check if all digits are the same\n    if len(set(digits)) == 1:\n        return True\n    # check if adjacent digits are the same\n    for i in range(len(digits) - 1):\n        if digits[i] != digits[i + 1]:\n            if int(digits[i]) > int(digits[i + 1]):\n                return False\n    return True\n\n# test the function with sample inputs\nprint(find_star_num(1)) # ",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return ord(k)\n\n# test the function\nprint(ascii_value('a')) # 97\nprint(ascii_value('A')) # 65\nprint(ascii_value('!')) # 33\nprint(ascii_value(' ')) # 32\nprint(ascii_value('0')) # 48\nprint(ascii_value('@')) # 64\nprint(ascii_value('*')) # 42\nprint(ascii_value('('')) # TypeError: ord() expected a character, but string of length 0 found\nprint(ascii_value('abc')) # TypeError: ord() expected a character, but string of length 3 found ",
        "generated_testcode": "assert ascii_value(a) == 97\n\n# Write a function to find the length of a string.\ndef string_length(s):\n    pass\n\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum=0\n    for i in range(n):\n        if arr[i]%2==0 and i%2==0:\n            sum+=arr[i]\n    return sum\n\narr=list(map(int,input(\"Enter the elements of the list: \".split()))\nn=len(arr)\nprint(\"The sum of even numbers at even positions is: \",sum_even_and_even_index(arr,n)) ",
        "generated_testcode": "assert sum_even_and_even_index(arr=[1,2,3,4,5,6,7,8,9,10],n=6) == 20 # Testing with a sample input\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    count = 0\n    i = 1\n    while (count < n):\n        sum += i**5\n        count += 1\n        i += 2\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of first\", n, \"even numbers raised to the power of 5 is:\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(3) == 220\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty list to hold the extracted values\n    extracted_values = []\n    # iterate over each tuple in the input list\n    for tup in test_list:\n        # extract the last element of the tuple and append it to the extracted_values list\n        extracted_values.append(tup[-1])\n    # return the extracted_values list\n    return extracted_values\n\n\n# test the function with a sample list of tuples\ntest_list = [(1, 2, 3, 4), ('a', 'b', 'c', 'd'), ('ii', 'iii', 'iv')]\nprint(rear_extract(test_list)) # Output: [4, 'd', 'iv'] ",
        "generated_testcode": "assert rear_extract([(1,2), (3,4), (5,6)] ) == [2, 4, 6]\n\n\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n#test function\nprint(substract_elements((4, 7, 5), (2, 3, 6)) ) # Output: (2, 4, -1) ",
        "generated_testcode": "assert substract_elements(('abc', (1, 2, 3, 4)) == ('a', 1, 1, 1)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    a = 10**9 + 7\n    b = 2\n    res = 1\n    for i in range(1, n+1): \n        res = (res * b) % a \n        b = (b * (n - i + 1) * (i // b)) % a \n    return res % a \n  \n# Driver program to test the function \nn = 10\nprint(\"Sum of even index binomial coefficients upto n =\", n, \"is\", even_binomial_Coeff_Sum(n)) \n",
        "generated_testcode": "assert even_binomial_Coeff_Sum(4) == 10 # Testing for n = 4\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize a set to store unique elements of the array \n    s = set(a) \n    # Initialize an empty dictionary to store the position of the element \n    d = {} \n    for i in range(n): \n        if a[i] in s: \n            # If the element is present in the set, add it's position to the dictionary \n            d[a[i]] = i \n            # Remove the element from the set \n            s.remove(a[i]) \n        else: \n            # If the element is not in the set, it is the last removed element, return it's position \n            return i \n    # If all elements are unique, return -1 \n    return -1 ",
        "generated_testcode": "assert get_Position(a,n,m) == 2 # Testing for the example given in the question.\n# Testing for edge cases\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi=222/7\n    volume=pi*r*r*h\n    return volume\n\n#Test the function with some sample inputs\nprint(volume_cylinder(5,10))\nprint(volume_cylinder(7,12))\nprint(volume_cylinder(2,8)) ",
        "generated_testcode": "assert volume_cylinder(5, 10) == 785.398163397444830002\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    new_dict={}\n    for key, value in dict.items():\n        if value>n:\n            new_dict[key]=value\n    return new_dict\n\n#Test the function with the sample data\nsample_dict={'apple':10,'banana':20,'orange':15,'kiwi':8,'mango':30}\nprint(dict_filter(sample_dict,15)) #Output {'apple': 10, 'mango': 30} ",
        "generated_testcode": "assert dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 4) == {3: 4, 9: 10}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = {}\n    for i in test_tup:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count\n\n\ntest_tup = (1,2,3,4,5,6,6,6,7,8,9,10,11,11,11,11,12,3)\nprint(count_first_elements(test_tup))\n\n\n#output: {1: 1, 2: 1, 3: 2, 4: 1, 5: 1, 6: 2, 7: 1, 8: 1, 9: 1, 10: 1, 11: 3, 12: 1} ",
        "generated_testcode": "assert count_first_elements(('a', ('a', 'b', 'c', 'd', 'a', 'e', 'a', 'f')) == 2\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    for i in range(1,n+1):\n        if n == i*(i+9)//2:\n            return True\n    return False\n\ndef nth_decagonal(n):\n    if is_num_decagonal(n):\n        return n\n    else:\n        return None\n\n#test the function\nprint(nth_decagonal(5)) # None\nprint(nth_decagonal(36)) # 55\nprint(nth_decagonal(55)) # 86\nprint(nth_decagonal(53)) # 120\nprint(nth_decagonal(165)) # 231\nprint(nth_decagonal(286)) # 365\nprint(nth_decagonal(340)) # None ",
        "generated_testcode": "assert is_num_decagonal(5) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"Returns the position of the item in the list if found, else return None\"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return None\n\n# Example usage:\nmy_list = [2, 4, 6, 7, 8, 3, 1, 5, 9]\nprint(sequential_search(my_list, 8)) # Output: 2\nprint(sequential_search(my_list, 10)) # Output: None ",
        "generated_testcode": "assert sequential_search([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"pear\"], \"kiwi\") == 3\n\n\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list as input and returns True if all elements in the list are unique, False otherwise.\n    \"\"\"\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n\n# Test the function with some sample inputs:\nprint(all_unique([1,2,3,4,5,6,7,8])) # True\nprint(all_unique([1,2,3,4,5,6,7,7])) # False\nprint(all_unique([\"apple\", \"banana\", \"cherry\", \"orange\"])) # True\nprint(all_unique([\"apple\", \"banana\", \"cherry\", \"banana\"])) # False ",
        "generated_testcode": "assert all_unique([\"apple\", \"banana\", \"cherry\", \"orange\"]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sub_list = list(map(lambda x,y: x-y, nums1,nums2))\n    return sub_list\n\nnums1 = [1,2,3,4,5,6]\nnums2 = [4,5,6,7,8,9]\nprint(sub_list(nums1,nums2)) # [-3,-3,-3,-3,-3]\n\n\n# Explanation:\n# We are using the map function to iterate over two lists nums1 and nums2 element-wise and then applying lambda function to subtract each element of nums2 from nums1. ",
        "generated_testcode": "assert sub_list(list(range(1,5), list(range(2,4)) == [1, 5]\n\n\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    freq = [0]*10\n    for i in str(n):\n        freq[int(i)] += 1\n    for i in range(1,10):\n        if freq[i] > i:\n            return False\n    return True\n\n# Test the function with some examples\nprint(validate(212233456)) # True\nprint(validate(9999999999)) # True\nprint(validate(1111111111)) # False ",
        "generated_testcode": "assert validate(123456) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list:\n        if i != element:\n            return False\n    return True\n\n# Test the function with sample data\nlist1 = ['apple','apple','apple','apple','apple']\nprint(check_element(list1,'apple')) # True\n\nlist2 = ['apple','banana','apple','apple']\nprint(check_element(list2,'apple')) # False ",
        "generated_testcode": "assert check_element([\"apple\",\"apple\",\"apple\",\"apple\"],\"apple\") == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'a[b]{2,3}')\n    result = pattern.search(text)\n    return result != None\n\nprint(text_match_two_three(\"ab\"))  # True\nprint(text_match_two_three(\"abbb\")) # True\nprint(text_match_two_three(\"abbbb\")) # True\nprint(text_match_two_three(\"abb\"))  # False\nprint(text_match_two_three(\"abcd\")) # False\nprint(text_match_two_three(\"a\"))   # False\nprint(text_match_two_three(\"abcbb\")) # True ",
        "generated_testcode": "assert text_match_two_three([\"ab\", \"abb\", \"aabb\", \"abbb\", \"abbbb\", \"abcd\", \"abbbcd\"] == [\"abbb\", \"aabb\", \"abbb\"]\n\n\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0  \n    for i in range(k): \n        max_sum += max_sub_array_sum(a, n) \n        for j in range(n): \n            a[j] += a[j-1] \n    return max_sum % 1000000000007\n\ndef max_sub_array_sum(a, n): \n    max_so_far = -10000000000001\n    max_ending_here = 0\n    for i in range(n): \n        max_ending_here += a[i] \n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n        if (max_ending_here < 0): \n            max_ending_here = 0\n    return max_so_far ",
        "generated_testcode": "assert max_sub_array_sum_repeated(a, n, k) == 100\n# Test case 1: a = [1, -2, 3, 4, -1, 5, 2, -3], n = 6, k = 3\n# Repeating the array 3 times will give [1, -2, 3, 4, -1, 5, 2, -3, 1, -2, 3, 4, -1, 5, 2, -3, 1, -2, 3, 4, -1, 5, 2, -3]\n# The largest sum of contiguous subarray is 10 (starting from index 2, ending at index 6)\n\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    sum = 0  \n    for i in range(1, n+1):  \n        if i % 2 == 0: \n            sum += i**2\n    return sum\n\n#test the function \nprint(square_Sum(10)) # Output: 220 (2^2 + 4^2 + 6^2 + 8^2 + 10^2 = 4 + 16 + 36 + 100 = 120) ",
        "generated_testcode": "assert square_Sum(4) == 20 # Testing for n = 4\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    inv = [0] * (N + 1)\n    for i in range(1, N + 1):\n        inv[i] = i\n    for i in range(2, N + 1):\n        for j in range(2 * i, N + 1, i):\n            inv[j] = P - P // i + inv[P % i]\n    return inv[arr]\n\n\n# Driver code to test the above function\narr = [2, 3, 4, 5, 6, 7, 8, 9]\nP = 10\nN = len(arr)\nprint(modular_inverse(arr, N, P))\n ",
        "generated_testcode": "assert modular_inverse(arr=[2, 3, 4, 5, 6, 7, 8, 9], N=10, P=5) == 2\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # year represented by N \n    count = 0\n    for i in range(1, N+1): \n        # checking if the year is a leap year or not \n        if(i % 4 == 0): \n            if(i % 100 == 0): \n                if(i % 400 == 0): \n                    # leap year \n                    count += 366 \n                else: \n                    # not a leap year \n                    count += 365 \n            else: \n                # leap year \n                count += 366 \n        else: \n            # not a leap year \n            count += 365 \n    return count \n  \n# Driver Code \nyear = int(input(\"Enter the year: \") \nprint(\"Number of odd days in\", year, \"is:\", odd_Days(year)) ",
        "generated_testcode": "assert odd_Days(2021) == 243\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return [sublist for sublist in list1 if len(sublist) == max_len]\n\n\n# Test the function\nlist1 = [[1,2,3], [4,5,6,7,8], [9,10], [11,12,13,14,15,16], [17,18], [19,20,21]]\nprint(max_length(list1)) # Output: [[11, 12, 13, 14, 15, 16]] ",
        "generated_testcode": "assert max_length([\"cat\", \"dog\", \"bird\", \"lion\", \"tiger\"] == \"tiger\"\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 2:\n        return k\n    \n    MOD = 10**9 + 7\n    same = k\n    diff = k * (k - 1)\n    for i in range(3, n + 1):\n        same, diff = (diff, (same * (k - 1) + diff) % MOD)\n    \n    return (same + diff) % MOD\n\n\nprint(count_no_of_ways(3, 2)) # Output: 6\nprint(count_no_of_ways(4, 2)) # Output: 18\nprint(count_no_of_ways(6, 3)) # Output: 108\nprint(count_no_of_ways(7, 2)) # Output: 56\nprint(count_no_of_ways(10, 3)) # Output: 996\nprint(count_no_of_ways(100, 2)) # Output: 7585915105679589213852\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 18\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    try:  \n        if(m == 0):  \n            return \"Cannot divide by zero.\"  \n    except ArithmeticError:  \n        print(\"Error: Division by zero\")  \n    else:  \n        return n/m ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes in two parameters:\n    w: width of the right angled triangle\n    h: height of the right angled triangle\n    and returns the length of the third side (c) of the right angled triangle.\n    \"\"\"\n    c = (w**2 + h**2)**0.5\n    return c\n\n#Test the function\nprint(otherside_rightangle(3,4)) \nprint(otherside_rightangle(5,12)) \nprint(otherside_rightangle(8,10)) \n\n#Output\n#5.0\n#13.0\n#12.65\n\n#Note: The function uses the Pythagorean theorem to calculate the third side of the right angled triangle. ",
        "generated_testcode": "assert otherside_rightangle(3, 4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n\n\n#Test the function with an example list\nlist1 = [3, 'hello', 5.7, True, 'world', 5, 'Python', 2.5]\nprint(max_val(list1)) # Output: 'world'\n\n\n#Solution: \n#The above function iterates over the list and compares each element with the current maximum value, which initially is set to the first element of the list. If an element is greater than the current maximum value, it becomes the new maximum value. \n#Since string 'world' is greater than all the other elements in the list, the function returns 'world' as the maximum value. ",
        "generated_testcode": "assert max_val([\"apple\", 5, 3.14, 7, 2.71, \"banana\", 8, \"cherry\", 3.14159, 10, \"2.71828\"] == 10\n\n\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n\nprint(sum_div(12)) #should return 28 (1+2+3+4+6+12)\nprint(sum_div(15)) #should return 36 (1+3+5+15) ",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    inv_count = 0 \n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count \n\narr = [1, 20, 6, 4, 5] \nn = len(arr) \nprint(\"Number of inversions are:\", get_Inv_Count(arr, n)) ",
        "generated_testcode": "assert get_Inv_Count(arr=[1,2,3,4,5,6,7,8],n=5) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function will flatten a nested list\n    :param list1: a nested list\n    :return: a flattened list\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n\n#Test the function with a nested list\nnested_list = [1, [2, [3, [4, 5, [6, 7, [8, 9, 10]], 11], 12], 13, [14, 15]]\nprint(flatten_list(nested_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] ",
        "generated_testcode": "assert flatten_list([\"apple\", \"banana\", [\"orange\", \"grape\", [\"lemon\", \"pineapple\", \"pear\"]]) == [\"apple\", \"banana\", \"orange\", \"grape\", \"lemon\", \"pineapple\", \"pear\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Finds the intersection of two nested lists\n    \"\"\"\n    result = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                result.append(i)\n                break\n    return result\n\n# Test the function with sample inputs\nl1 = [[1, 2, 3], [2, 4, 5], [3, 6, 7]]\nl2 = [[2, 4, 6], [3, 5, 7], [8, 9, 10]]\nprint(intersection_nested_lists(l1, l2)) # Output: [[2, 3]] ",
        "generated_testcode": "assert intersection_nested_lists(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 10]], [[2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]\n) == [[2, 3], [5, 6], [8, 9], [1]]\n\n# The output should be [[2, 3], [5, 6], [8, 9], [1]]\n\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = 0\n    for tup in stdata:\n        total = sum(tup)\n        if total > max_val:\n            max_val = total\n    return max_val\n    \n# Example usage:\nstdata = [(1,2,3), (4,5,6), (7,8,9)]\nprint(max_aggregate(stdata)) # Output: 18 ",
        "generated_testcode": "assert max_aggregate([(1,2), (3,4), (5,6)] ) == 11\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(n+1):\n            if i==0 and j==0:\n                dp[i][j] = 1\n            elif i == j:\n                dp[i][j] = 1\n            elif i < j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[n][n]\n\n# test the function\nn = 3\nprint(count_binary_seq(n)) ",
        "generated_testcode": "assert count_binary_seq(1) == 1\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for k, v in d.items()) if d else 0)\n    return 0\n\n# Example usage:\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': {\n                'e': 2\n            }\n        }\n    }\n}\nprint(dict_depth(d))  # Output: 3 ",
        "generated_testcode": "assert dict_depth(d) == 3\n\n# The dictionary d is defined as follows:\nd = {\n    'a': 1,\n    'b': {\n        'c': {\n            'd': 2,\n            'e': 3\n        },\n        'f': 4\n    },\n    'g': [1, 2, 3]\n}\n\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return -1\n    max_pow = 0\n    while n: \n        n >>= 1\n        max_pow += 1\n    return max_pow ",
        "generated_testcode": "assert set_Bit_Number(15) == 4\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    c=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]>a[j]:\n                c+=1\n    if c%2==0:\n        return 'YES'\n    else:\n        return 'NO'\n\n#taking input\nt=int(input())\nfor _ in range(t):\n    n=int(input())\n    a=[int(x) for x in input().split()]\n    print(solve(a,n)) ",
        "generated_testcode": "assert solve([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"],5) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr) \n    # Find the index of the smallest element in the rotated array  \n    start = 0\n    end = n - 1\n    while (start <= end): \n        mid = (start + end) // 2\n        if (mid < end and arr[mid] > arr[mid + 1]): \n            return mid \n        if (mid > 0 and arr[mid] < arr[mid - 1]): \n            return mid - 1\n        if (arr[mid] <= arr[0]): \n            end = mid - 1\n        else: \n            start = mid + 1\n    return n - 1\n    # If index is less than number of rotations \n    if (index < ranges): \n        return arr[index] \n    # Else return element at (index-ranges)th index \n    else: \n        return arr[index - ranges] \n# Driver code \narr = [15, 16, 19, 20, 5, 1, 3, 12, 21] \nrotations = 2\nindex = 3\nn = len(arr) \nprint(\"Element at index\",index,\"is\",find_Element(arr,rotations,index)) ",
        "generated_testcode": "assert find_Element(arr,ranges,rotations,index) == expected_output\n\n# Example:\narr = [1,2,3,4,5,6,7,8,9]\nranges = [0,6]\nrotations = 2\nindex = 6\nexpected_output = 7\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n\n\nprint(start_withp(['python', 'java', 'apple', 'pen', 'dog', 'pear']))  # ['python', 'pen']\nprint(start_withp(['cat', 'dog', 'pear', 'banana']))  # []\nprint(start_withp(['python', 'peach', 'pear', 'pepper']))  # ['python', 'peach', 'pear', 'pepper']\n\n\n\n# This function takes a list of words and returns a list of words that start with letter 'p'. We first initialize an empty list p_words, then iterate over each word in the input list. If the first letter of the word is 'p', we append it to the p_words list. Finally, we return the p_words list. ",
        "generated_testcode": "assert start_withp([\"python\", \"java\", \"c++\", \"kotlin\", \"sql\", \"pascal\"]) == [\"python\", \"pascal\"]\n\n\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a list to store the maximum sum including each element at every index\n    max_sum = [0] * n\n    max_sum[0] = a[0]\n    # Loop through the array and calculate the maximum sum including each element\n    for i in range(1, n):\n        if i <= k:\n            max_sum[i] = max(max_sum[i - 1] + a[i], a[i])\n        else:\n            max_sum[i] = max(max_sum[i - 1], a[i] + a[i - k] + max_sum[i - k])\n    return max_sum[n - 1]\n\n# Example usage:\na = [1, 2, 3, 4, -1, 5, 7, 6, 8, -2, 9]\nn = len(a)\nk = 3\nprint(max_sum_increasing_subseq(a, n, k))  # Output: 22 (2, 3, 4, -1, 5, 7, 6, 8) or (1, 2, 3, 4, 5, 7, 6, 8, 9) ",
        "generated_testcode": "assert max_sum_increasing_subseq(a, n, index, k) == expected_output\n\n# where a is a list of integers, n is the length of the list, index is the index till which we need to find the maximum sum of increasing subsequence and k is the index of the element to be included in the subsequence. ",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if m>=0 and n>=0 and m<len(tuplex):\n        return tuplex[m:n]\n    else:\n        return \"Invalid\"\n\n#test the function with sample inputs\nprint(colon_tuplex((\"Python\",2,4)) # should return \"th\"\nprint(colon_tuplex(\"Python\",4,2)) # should return \"Invalid\"\nprint(colon_tuplex((\"Python\",0,-1)) # should return \"Invalid\"\nprint(colon_tuplex(\"Python\",2,10)) # should return \"ython\"\nprint(colon_tuplex(\"Python\",2,2)) # should return \"\" ",
        "generated_testcode": "assert colon_tuplex((\"apple\",1,2) == \"apple:apple:apple\"\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Combine the two lists into one\n    nums3 = nums1 + nums2\n    # Sort the combined list in descending order\n    nums3.sort(reverse=True)\n    # Initialize a counter variable\n    count = 0\n    # Initialize an empty list to store the largest products\n    largest_products = []\n    # Loop through the sorted list and multiply adjacent elements\n    for i in range(len(nums3) - 1):\n        # Check if we have found the required number of products\n        if count == N:\n            break\n        # Check if the current element and the next element will make a valid product\n        if isinstance(nums3[i], int) and isinstance(nums3[i+1], int):\n            # Multiply the two elements and append to the list\n            product = nums3[i] * nums3[i+1]\n            largest_products.append(product)\n            count += 1\n    return largest_products\n\n# Test the function with sample inputs\nprint(large_product([1, 3, 5, 7], [2, 4, 6], 2)) # Output: [14, 12] ",
        "generated_testcode": "assert large_product(nums1=[1, 2, 3, 4, 5], nums2=[10, 20, 30, 40, 50], N=2) == [50, 40]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a>=b:  \n        return a  \n    else:  \n        return b \n      \n#Example usage: \nprint(maximum(2, 4))   # Output: 4 \nprint(maximum(7, 3))   # Output: 7 ",
        "generated_testcode": "assert maximum(5,10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    str1 = str1.replace(\"(\", \"\")\n    str1 = str1.replace(\")\", \"\")\n    str1 = str1.replace(\" \", \"\")\n    my_list = str1.split(\",\")\n    my_tuple = tuple(my_list)\n    return my_tuple\n\n# Test the function with an example\nstring1 = \"('apple', 'banana', 'cherry')\"\nprint(string_to_tuple(string1)) # Output: ('apple', 'banana', 'cherry') ",
        "generated_testcode": "assert string_to_tuple(str1) == ('a', 'b', 'c', 'd', 'e')\n\n\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0: \n        return 1\n    count = 0\n    while n & 1: \n        n >>= 1\n        count += 1\n    return 1 << count ",
        "generated_testcode": "assert set_left_most_unset_bit(0b10101010) == 0b11101111 # 0b1101111 is the binary representation of the expected output\n\n# Explanation:\n# The left most unset bit in 0b10101010 is the 2^4 bit, which is 1000000 in binary. Adding it to the number will give 0b1101010 + 0b100000 = 0b1101010 + 0b100000 = 0b1101010 + 16 = 0b1101010 + 0b100000 = 0b1110110 = 0b1101111. ",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159\n    volume = (1/3) * pi * r * r * h\n    return volume\n\n#Test the function with examples\nprint(volume_cone(5, 10))\nprint(volume_cone(7, 12))\n\nprint(volume_cone(2.5, 10)) ",
        "generated_testcode": "assert volume_cone(3, 5) == 141.371666941729868158\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result=[]\n    for i in list1:\n        if i>0:\n            result.append(i)\n    return result\nlist1=[-4,-2,3,5,0,6,-8,9,-10,-12,11]\nprint(pos_nos(list1))  # Output: [5, 6, 9, 11]\n\n\n\n# Use list comprehension to print positive numbers in a list.\ndef pos_nos(list1):\n    return [i for i in list1 if i>0]\nlist1=[-4,-2,3,5,0,6,-8,9,-10,-12,11]\nprint(pos_nos(list1))  # Output: [5, 6, 9, 11] ",
        "generated_testcode": "assert pos_nos(list1) == [1, 3, 5, 7, 9]\n\n\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0]*n\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if j==0:\n                dp[j] = max(dp[j],grid[i][j])\n            else:\n                dp[j] = max(dp[j],grid[i][j]+dp[j-1])\n        for j in range(n):\n            if i==0:\n                ans = max(ans, dp[j])\n            else:\n                ans = max(ans,dp[j]+grid[i][j])\n    return ans\nn=int(input())\ngrid=[]\nfor i in range(n):\n    row = list(map(int,input().split())\n    grid.append(row)\nprint(max_sum_rectangular_grid(grid,n)) \n\n#Example:\n# Input:\n# 3\n# 5 2 7 1 3 8\n# 1 6 3 9 6 4\n# 2 4 8 1 2 4\n# Output: 20\n# Explanation:\n# The maximum sum such that no two chosen numbers are adjacent is 20. \n# The numbers are 5 and 9. ",
        "generated_testcode": "assert max_sum_rectangular_grid(\n    [\n        [1, 2, 3, 4, 5, 6],\n        [7, 8, 9, 10, 11],\n        [12, 13, 14, 15, 16],\n        [17, 18, 19, 20, 21],\n        [22, 23, 24, 25, 26]\n    ], 4) == 65\n\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    for word in str.split():\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n#Example:\n#Input: \"The quick brown fox jumps over the lazy dog\"\n#Output: 6\n#Explanation: The even word with maximum length is \"brow\" with length 4. ",
        "generated_testcode": "assert find_Max_Len_Even([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"pear\", \"peach\", \"grapes\"] == 6\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    A: input array sorted in ascending order\n    x: target number to find last occurrence of\n    return: index of last occurrence of x in A, or -1 if x not in A\n    \"\"\"\n    if not A:\n        return -1\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == len(A) - 1 or A[mid + 1] > x:\n                return mid\n            else:\n                left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# test cases\nA = [1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nprint(find_last_occurrence(A, 4))  # output: 3\nprint(find_last_occurrence(A, 5))  # output: 4\nprint(find_last_occurrence(A, 10)) # output: -1\n\n\n# time complexity: O(log n) since it's a binary search algorithm\n# space complexity: O(1) ",
        "generated_testcode": "assert find_last_occurrence(A=[1, 2, 3, 4, 4, 5, 5, 5, 6, 7, 8, 9], x=5) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of integers, returns the modified run-length encoding of the list.\n    Modified run-length encoding is a way of compressing a list by replacing any\n    streak of repeated values with a single copy of the value and the number of times it\n    occurs in a row.\n    For example:\n    >>> modified_encode([1, 1, 1, 1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 6, 6])\n    [(1, 3), 2, 3, (4, 3), 5, (6, 2)]\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(alist):\n        count = 1\n        while i < len(alist)-1 and alist[i] == alist[i+1]:\n            count += 1\n            i += 1\n        if count > 1:\n            result.append((alist[i], count))\n        else:\n            result.append(alist[i])\n        i += 1\n    return result\n\n# Test cases\nprint(modified_encode([1, 1, 1, 1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 6, 6])) # Should print [(1, 3), 2, 3, (4, 3), 5, (6, ",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\", \"c\", \"d\", \"e\", \"e\", \"e\", \"e\", \"e\"]) == [(\"a\", 1), (\"b\", 1), (\"c\", 3), (\"d\", 1), (\"e\", 4)]\n\n# Test case 1: Test with a list of characters with no repetition\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sides = []\n    for i in range(1, s):\n        for j in range(1, s):\n            for k in range(1, s):\n                if i + j + k <= s:\n                    if i*j*k not in sides:\n                        sides.append(i*j*k)\n    sides.sort()\n    return sides[-1]\n\n#Test the function\nprint(max_volume(10)) # Output: 36\nprint(max_volume(15)) # Output: 360 ",
        "generated_testcode": "assert max_volume (12) == (2, 2, 2)\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w{5}\\b'\n    long_word = re.findall(pattern, text)\n    return long_word\n\n# Test the function with an example string\nexample_text = \"Hello, I am a beginner in Python programming. I like to learn more.\"\nprint(find_long_word(example_text) # Output: ['Hello', 'beginner', 'Python', 'program', 'learn'] ",
        "generated_testcode": "assert find_long_word(text=\"The quick brown fox jumps over the lazy dog.\") == \"quick\"\n\n# Test case 1: Test with a normal sentence\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sq_sum = 0\n    sum = 0\n    for i in range(1,n+1):\n        sq_sum += i**2\n        sum += i\n    return abs(sum**2 - sq_sum)\n\n\n#Test the function\nprint(sum_difference(5)) #220\nprint(sum_difference(10)) #2640\nprint(sum_difference(100)) #25162\nprint(sum_difference(1000)) #2516350\nprint(sum_difference(200)) #249691060 ",
        "generated_testcode": "assert sum_difference(10) == 2640\n\n# The function should return 2640 for n = 10, as the sum of squares of first 10 natural numbers is 385 and the square of the sum is 3025. The difference is 2640. ",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    demlo_num = ''\n    num = s\n    for i in range(len(s)):\n        if s[i] == '0':\n            demlo_num += '9'\n        else:\n            demlo_num += '0'\n            break\n    return demlo_num if demlo_num else 'No 0 found'\n\n\n#Example: \n#Input: \"9999\"\n#Output: \"0000\"\n#Input: \"12345605\"\n#Output: \"00000000\"\n#Input: \"1001\"\n#Output: \"No 0 found\" ",
        "generated_testcode": "assert find_demlo(1) == 1\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    min_value = min(list1)\n    indices = []\n    for i in range(len(list1)):\n        if list1[i] == min_value:\n            indices.append(i)\n    return indices\n\n# Test the function with an example list\nlist1 = [2, 3, 5, 1, 7, 2, 4, 1, 9, 1, 5]\nprint(position_min(list1))  # Output: [2, 5] ",
        "generated_testcode": "assert position_min([3, 5, 2, 9, 1, 5, 7, 6, 2, 5] ) == [2, 5]\n\n\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if cur < n-1:\n        if arr[cur+1] < 0:\n            arr[cur], arr[cur+1] = arr[cur+1], arr[cur]\n            return True\n        else:\n            return right_rotate(arr, n, out_of_place, cur+1)\n    else:\n        return False\n\ndef left_rotate(arr, n, out_of_place, cur):\n    if cur >= 0:\n        if arr[cur] < 0:\n            arr[cur], arr[cur-1] = arr[cur-1], arr[cur]\n            return True\n        else:\n            return left_rotate(arr, n, out_of_place, cur-1)\n    else:\n        return False\n\ndef alternate(arr, n):\n    out_of_place = 0\n    for i in range(n):\n        if arr[i] >= 0 and (i % 2 == 0):\n            out_of_place += 1\n        elif arr[i] < 0 and (i % 2 == 1):\n            out_of_place += 1\n    cur = 0\n    while out_of_place > 0:\n        if arr[cur] < 0 and cur % 2 == 0:\n            if right_rotate(arr, n, out_of_place, cur+1):\n                out_of_place -= 1\n        elif arr[cur] >= 0 and cur % 2",
        "generated_testcode": "assert right_rotate(arr=[1, 2, 3, -4, -1, 5, -6, 7, 8], n=6, out_of_place=3, cur=0) == [3, -4, 1, 5, -6, 2, -1, 7, 8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize sum variable to 0\n    sum = 0\n    # Loop through the given tuple and sum up every alternate element\n    for i in range(0, len(test_tuple), 2):\n        sum += test_tuple[i]\n    # Return the sum\n    return sum\n\n# Test the function with a sample tuple\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_of_alternates(test_tuple)) # Output: 10\n\n\n# The above function will sum up the first, third, fifth, and so on elements of the tuple. \n# If you want to sum up the second, fourth, and so on elements, change the range to range(1, len(test_tuple), 2) ",
        "generated_testcode": "assert sum_of_alternates(()) == 0\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n\n    min_squares = [0] * (n + 1)\n    min_squares[0] = 0\n\n    for i in range(1, n + 1):\n        min_squares[i] = float('inf')\n        for j in squares:\n            if i < j:\n                break\n            if min_squares[i - j] != float('inf'):\n                min_squares[i] = min(min_squares[i], min_squares[i - j] + 1)\n\n        for j in squares:\n            if i - j == 0:\n                break\n            if min_squares[i - j] != float('inf'):\n                min_squares[i] = min(min_squares[i], min_squares[i - j] + 1)\n\n    return min_squares[n]\n\n# Example usage:\nn = 13\nprint(get_Min_Squares(n)) # Output: 2\n# 13 can be represented as 9 + 4 ",
        "generated_testcode": "assert get_Min_Squares(17) == 4\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    word_count = {}\n    max_word = \"\"\n    max_count = 0\n    for word in test_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n        if word_count[word] > max_count:\n            max_count = word_count[word]\n            max_word = word\n    return max_word\n\n# Test the function with sample inputs\ntest_list = [\"apple\", \"banana\", \"cherry\", \"apple\", \"banana\", \"cherry\", \"date\", \"date\", \"date\", \"date\", \"cherry\", \"apple\"]\nprint(most_occurrences(test_list)) # Output: \"date\" ",
        "generated_testcode": "assert most_occurrences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"grape\", \"orange\", \"orange\"]) == \"apple\"\n\n\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x==y==z:\n        return True\n    elif x==y or y==z or x==z:\n        return True\n    else:\n        return False\n#Test the function with different values\nprint(check_isosceles(5,6,7))\nprint(check_isosceles(6,6,6))\nprint(check_isosceles(4,5,5))\nprint(check_isosceles(4,4,6)) ",
        "generated_testcode": "assert check_isosceles(5, 6, 7) == False\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if m>len(list1):\n        return \"Invalid input\"\n    else:\n        return list1[m:]+list1[:m]\n        \n#Example:\n#input: [1,2,3,4,5,6,7],2,3\n#output:[4,5,6,7,1,2,3]\n#input: [1,2,3,4,5,6,7],2,8\n#output: [5,6,7,1,2,3,4] ",
        "generated_testcode": "assert rotate_left([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],2,2) == [\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\"]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n# Test the function with a sample list\nlst = [-1, 5, 8, -3, 0, -6, 4, -2, 3]\nprint(neg_count(lst)) # Output: 3 ",
        "generated_testcode": "assert neg_count(list()) == 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b\\w{3,5}\\b'\n    result = re.findall(pattern, text)\n    return result\n\n# Test the function with example string\ntext = \"Hello, I am Anupam. I love programming in Python.\"\nprint(find_char(text) # Output: ['Hello', 'Anupam', 'Python'] ",
        "generated_testcode": "assert find_char(text=\"Hello world! This is a test string.\") == [\"Hello\", \"test\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1 if n & 1 == 0 else 0\n        n >>= 1\n    return count ",
        "generated_testcode": "assert count_unset_bits(0b1111) == 0\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq\n\n# Test the function with a sample string\nstring = \"Hello, World!\"\nprint(char_frequency(string)) ",
        "generated_testcode": "assert char_frequency(str1) == {'a': 2, 'b': 3, 'c': 1, 'd': 2, 'e': 1, 'f': 1}\n\n\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    l = len(sub_li) \n    for i in range(0, l): \n        for j in range(0, l-i-1): \n            if (sub_li[j][1] > sub_li[j + 1][1]): \n                temp = sub_li[j] \n                sub_li[j] = sub_li[j + 1] \n                sub_li[j + 1] = temp\n    return sub_li \n\n    \n# Example \nsub_li = [['g', 2], ['a', 4], ['b', 1], ['c', 3], ['d', 5], ['f', 6]] \nprint(Sort(sub_li)) ",
        "generated_testcode": "assert Sort(sub_li) == sorted(sub_li, key=lambda x: x[1])\n\n# Test case 1:\nsub_li = [[1, 3], [2, 2], [3, 1]]\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:  \n        return True\n    else:  \n        return False\n#Test the function with some examples\nprint(check_Validity(3,4,5))  # True\nprint(check_Validity(1,2,3))  # False\nprint(check_Validity(7,8,10)) # True\nprint(check_Validity(5,6,7))  # False ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = (n/2)*(2*a + (n-1)*d)\n    return sum\n\n#Taking input from user\na = int(input(\"Enter the first term of the series: \"))\nn = int(input(\"Enter the number of terms: \"))\nd = int(input(\"Enter the common difference: \"))\n\n#Calling the function\nresult = ap_sum(a,n,d)\n#Printing the result\nprint(\"The sum of arithmetic progression is:\",result) ",
        "generated_testcode": "assert ap_sum(1, 5, 2) == 15\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if monthname1 == \"February\":\n        return 28\n    elif monthname1 in [\"April\", \"June\", \"September\", \"November\"]:\n        return 30\n    elif monthname1 in [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]:\n        return 31\n    else:\n        return 31\n\nprint(check_monthnum(\"February\"))  # output: 28\nprint(check_monthnum(\"April\"))   # output: 30\nprint(check_monthnum(\"January\"))  # output: 31 ",
        "generated_testcode": "assert check_monthnum(February) == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    regex = r\"[a-zA-Z]+[.,?!]*$\"\n    return re.search(regex, text)\n\n# Test cases\nprint(text_match_word(\"Hello, world!\")) # Should return \"world!\"\nprint(text_match_word(\"Hi there!\")) # Should return \"there!\"\nprint(text_match_word(\"No way!\")) # Should return \"way!\"\nprint(text_match_word(\"Python is cool.\")) # Should return \"cool.\"\nprint(text_match_word(\"Aren't you sure?\")) # Should return \"you sure?\"\nprint(text_match_word(\"Let's go.\")) # Should return \"go.\"\nprint(text_match_word(\"Yes, I think so..\")) # Should return \"so..\" ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\" ) == \"world\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(s): \n        if s[i] == s[0] or s[i] == s[-1]: \n            count += 1\n    return count\n# Test the function with a sample input\ns = \"ababa\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(s) == 1\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res = -1 \n    for i in range(y,x-1,-1):\n        if x%i==0 and y%i==0:\n            res = i\n            break\n    return res\n\n#example\nprint(find_Divisor(12,16)) #output: 4 ",
        "generated_testcode": "assert find_Divisor(10, 20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(lst) < 3:\n        return None\n    lst.sort()\n    return lst[0] + lst[1] + lst[2]\n\n# Example usage:\nprint(sum_three_smallest_nums([3, 5, 8, 1, 2, 10, 100, 2, 4, 5, 100, 6])) # Output: 6\nprint(sum_three_smallest_nums([2, 9, 0, -3, -1, 4, -2, 5])) # Output: -6\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5])) # Output: 6 ",
        "generated_testcode": "assert sum_three_smallest_nums(lst=[10, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == 6 # True\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Converting set to list\n    s_list = list(s)\n    # Sorting the list in ascending order\n    s_list.sort()\n    # Converting the sorted list to tuple\n    s_tuple = tuple(s_list)\n    return s_tuple\n\n# Test the function with an example set\ns = {4, 7, 2, 1, 5}\nprint(set_to_tuple(s)) # Output: (1, 2, 4, 5, 7) ",
        "generated_testcode": "assert set_to_tuple(set()) == ()\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\ndef smallest_range(arr):\n    min_range = float('inf')\n    max_range = float('-inf')\n    pq = []\n    for i in range(len(arr)):\n        heapq.heappush(pq, Element(arr[i][0], i, 0))\n        max_range = max(max_range, arr[i][0])\n\n    min_range = max_range\n    while pq:\n        top = heapq.heappop(pq)\n        if top.index + 1 < len(arr[top.list_num]):\n            heapq.heappush(pq, Element(arr[top.list_num][top.index + 1], top.list_num, top.index + 1))\n            max_range = max(max_range, arr[top.list_num][top.index + 1])\n            min_range = min(min_range, max_range)\n        else:\n            min_range = max_range\n\n    return min_range\n\n# Example usage:\narr = [[1, 5, 8], [20, 30, 40], [3, 4, 50]]\nprint(smallest_range(arr))  # Output: 3\n\n#",
        "generated_testcode": "assert __init__(1, [1, 2, 3, 4, 5], 0) == (1, 1)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (digits, letters)\n\n#test the function\nprint(dig_let(\"hello world 123\")) # (3, 8)\nprint(dig_let(\"python123\")) # (3, 5)\nprint(dig_let(\"1234abc\")) # (3, 3) ",
        "generated_testcode": "assert dig_let(s=\"Hello World! 123\") == (3, 7)\n\n\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        if (int(i**0.5)**2 == i and i%2!=0): #checking for odd squares\n            count+=1\n    return count\n\n#Example\n#n=1,m=20\n#Output:2\n#Explanation: 1 and 9 are odd squares in the range 1 to 20 ",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 2 # Testing for range 1 to 10\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    diffs = []\n    for i in range(1, len(nums)):\n        diffs.append(nums[i] - nums[i-1])\n    return diffs\n\nprint(diff_consecutivenums([1, 5, 2, 9, 10, 15, 23]))  # [4, 4, 7, 5, 13]\nprint(diff_consecutivenums([3, 9, 6, 12, 18, 22, 15]))  # [6, 3, 6, -6, -3]\n\n\n# Alternatively, you can use list comprehension:\ndef diff_consecutivenums(nums):\n    return [nums[i] - nums[i-1] for i in range(1, len(nums)]\nprint(diff_consecutives([1, 5, 2, 9, 10, 15, 23]))  # [4, 4, 7, 5, 13]\nprint(diff_consecutives([3, 9, 6, 12, 18, 22, 15]))  # [6, 3, 6, -6, -3]\n\n\n# If you want to calculate the average difference:\ndef avg_diff(nums):\n    diffs = diff_consecutives(nums)\n    return sum(diff",
        "generated_testcode": "assert diff_consecutivenums(nums=[1, 2, 3, 5, 8, 9, 10]) == [1, 3, 3, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return ((k-1) + abs(n-(2*(n-1))**2)) % k ",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    if m == 0 or n == 0: \n        return 0\n    if m == 1 or n == 1: \n        return 1\n    return (m*n) \n\n# Example usage:\nm = 5\nn = 5\nprint(count_Squares(m,n)) # Output: 25 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if r > n:  \n        return 0 \n    if r == 0: \n        return 1\n    if r < 0: \n        return 0 \n    return bin_coff(n-1, r-1) + bin_coff(n-1, r) \n  \ndef count_seq(arr, k): \n    n = len(arr) \n    count = 0\n    for i in range(n): \n        if arr[i] >= 0: \n            count += bin_coff(n-1, k-1) \n            for j in range(i+1, n): \n                if arr[j] >= 0: \n                    count += bin_coff(n-j-1, k-1) \n                else: \n                    break\n    return count \n\narr = [1, -1, 2, 3, 4, -1, 5, 6] \nk = 3\nprint(count_seq(arr, k)) ",
        "generated_testcode": "assert bin_coff(5, 2) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in string:\n        if i!='0' and i!='1':\n            return False\n    return True\n\nstring = input(\"Enter a string: \")\nif check(string):\n    print(\"The given string is a binary string.\")\nelse:\n    print(\"The given string is not a binary string.\") ",
        "generated_testcode": "assert check(None) == False\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    char_freq = {}\n    for char in s : \n        if char in char_freq : \n            char_freq[char] += 1\n        else : \n            char_freq[char] = 1\n    \n    max_freq = max(char_freq, key = char_freq.get)\n    return len(s) - char_freq[max_freq] + 1\n\n\ns = input(\"Enter a string: \")\nprint(minimum_Length(s)) ",
        "generated_testcode": "assert minimum_Length(s=\"aaabbbccddeeff\") == 4\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    freq = {} \n    for i in arr: \n        if i not in freq: \n            freq[i] = 1\n        else: \n            freq[i] += 1\n    for i in arr: \n        if freq[i] == k: \n            return i\n    return -1\n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 1, 2, 1] \nn = len(arr) \nk = 3\nprint(first_Element(arr,n,k)) ",
        "generated_testcode": "assert first_Element(arr=[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5], n=11, k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    char_set = set(str)\n    if len(char_set) == len(str):\n        return True\n    else:\n        return False\n\n# Test the function with a sample string\nstr = \"hello\"\nprint(unique_Characters(str))  # Output: False\nstr = \"world\"\nprint(unique_Characters(str))  # Output: True ",
        "generated_testcode": "assert unique_Characters(\u201cabcde\u201d) == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(len(list1)):\n        row = []\n        for j in range(len(list1[i]):\n            if j != n:\n                row.append(list1[i][j])\n        new_list.append(row)\n    return new_list\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nremove_column(list1, 2) ",
        "generated_testcode": "assert remove_column(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 2) == [\n        [1, 3, 5],\n        [6, 8, 9],\n        [10, 12, 13],\n        [14, 16, 17]\n    ], \"Test 1 failed\"\n\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return a+(n-1)*d\n\nprint(\"Enter the first term of the arithmetic progression: \")\na = int(input())\nprint(\"Enter the common difference: \")\nd = int(input())\nprint(\"Enter the value of n(term to find: \")\nn = int(input())\n\nprint(\"The term is: \",tn_ap(a,n,d)) ",
        "generated_testcode": "assert tn_ap(1, 5, 2) == 7\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0  \n    for i in range(1, radius+1):  \n        for j in range(1, radius+1):  \n            for k in range(i, radius+1):  \n                if (i*i + j*j == k*k) and i < j + k:  \n                    count += 1  \n    return count  \n  \n# Test the function  \nradius = 5  \nprint(\"Number of rectangles in a circle of radius\", radius, \"are\", count_Rectangles(radius)) ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    #c = 180 - (a + b)\n    c = 180 - a - b\n    return c\n\n# Test the function with some sample inputs\nprint(find_angle(45, 35)) # Should print 1105\nprint(find_angle(30, 70)) # Should print 60\nprint(find_angle(20, 45)) # Should print 105\nprint(find_angle(80, 60)) # Should print 40 ",
        "generated_testcode": "assert find_angle(30, 45) == 105\n\n# Write a function to calculate the perimeter of a rectangle.\ndef calculate_perimeter(length, width):\n    pass\n\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    max_element = None\n    for i in test_list:\n        if max_element is None or i[1] > max_element:\n            max_element = i[1]\n    return max_element\n\n# test the function\ntest_list = ((\"A\", 2, 3), (\"B\", 5), (\"C\", 1), (\"D\", 8), (\"E\", 10))\nprint(find_max(test_list))  # Output: 10 ",
        "generated_testcode": "assert find_max(()) == None\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    mod = lambda x, y: x % y\n    result = list(map(lambda x, y: mod(x, y), nums1, nums2))\n    return result\n\n#example usage:\nnums1 = [5, 8, 13, 17, 21, 33, 44, 55, 66]\nnums2 = [3, 4, 7, 5, 8, 2, 11, 9, 6]\nprint(moddiv_list(nums1, nums2)) # Output: [2, 2, 1, 2, 5, 1, 4, 0, 0] ",
        "generated_testcode": "assert moddiv_list(nums1=[10, 20, 30], nums2=[3, 4, 5]) == [1, 2, 0]\n\n\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 8,
        "correct": true,
        "answer": "    if a == 0: \n        return False \n    else: \n        d = b**2 - 4*a*c \n        if d == 0: \n            return True \n        else: \n            return False \n    \n#Example \n# Input: a = 1, b = 3, c = 2 \n# Output: True \n# Input: a = 2, b = 4, c = 4 \n# Output: False \n\na = 1 \nb = 3 \nc = 2 \nif(Check_Solution(a,b,c) == True): \n    print(\"One root is twice of other\") \nelse: \n    print(\"Both roots are different\") \n\n\na = 2 \nb = 4 \nc = 4 \nif(Check_Solution(a,b,c) == True): \n    print(\"One root is twice of other\") \nelse: \n    print(\"Both roots are different\") ",
        "generated_testcode": "assert Check_Solution(1, -6, 9) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return get_carol(n-1) + get_carol(n-2) * 3\n\n# test the function\nprint(get_carol(1)) # 1\nprint(get_carol(2)) # 2\nprint(get_carol(3)) # 5\nprint(get_carol(4)) # 13\nprint(get_carol(5)) # 41\nprint(get_carol(6)) # 125\nprint(get_carol(7)) # 402\nprint(get_carol(8)) # 12237\n\n\ndef get_carol(n, memo = {}): \n    if n in memo: \n        return memo[n]\n    if n == 1: \n        memo[n] = 1\n        return memo[n]\n    elif n == 2: \n        memo[n] = 2\n        return memo[n]\n    else: \n        memo[n] = get_carol(n-1, memo) + get_carol(n-2, memo) * 3\n        return memo[n]\n# test the function with memoization\nprint(get_carol(1)) # 1\nprint(get_carol(2)) # 2\n",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return [i for i in list1 if i]\n\n# Example:\n# input: [[1,2,3],[], [],[4,5,6], [[], [7,8], [],[9]]]\n# output: [[1,2,3], [4,5,6], [[], [7,8],[]]\n# Explanation: The empty list [] and [9] will be removed ",
        "generated_testcode": "assert remove_empty([]), []\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Finds the item with maximum occurrences in a given list.\n    \"\"\"\n    from collections import Counter\n    count = Counter(nums)\n    max_count = max(count.values())\n    max_num = None\n    for num, freq in count.items():\n        if freq == max_count:\n            max_num = num\n            break\n    return max_num\n\n# Example usage:\nnums = [1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]\nprint(max_occurrences(nums))  # Output: 6 ",
        "generated_testcode": "assert max_occurrences(nums=[1, 2, 3, 2, 3, 4, 5, 2, 6, 1, 1, 1]) == 1\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in test_list:\n        result += (i + K,)\n    return result\n\n# test the function with an example\ntest_list = (2, 4, 6, 8, 10)\nK = 3\nprint(add_K_element(test_list, K)) # Output: (5, 7, 9, 11, 13) ",
        "generated_testcode": "assert add_K_element(( (1, 2, 3, 4, 5), 5) == (6, 7, 8, 9)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if ch == '0': \n        return 1\n    else: \n        return 0\n\ndef min_flips(s): \n    n = len(s) \n    flips_req = [0]*n \n    for i in range(n): \n        if s[i] == '1': \n            flips_req[i] = 0\n        else: \n            flips_req[i] = float('inf') \n\n    for i in range(1, n): \n        if s[i] == '1': \n            flips_req[i] = min(flips_req[i-1], 1+flips_req[i]) \n        else: \n            flips_req[i] = min(flips_req[i-1], flips_req[i]) \n            if i > 1: \n                flips_req[i] = min(flips_req[i], flips_req[i-2]+1) \n        if i > 1 and s[i] == s[i-1]: \n            flips_req[i] = min(flips_req[i], flips_req[i-1]) \n        elif i > 2 and s[i] == s[i-2]: \n            flips_req[i] = min(flips_req[i], flips_req[i-2]+1",
        "generated_testcode": "assert make_flip(1010101010101) == 2\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count\n\n#test the function\nprint(count_Digit(123456)) #Output: 4\nprint(count_Digit(999)) #Output: 3\nprint(count_Digit(123)) #Output: 3\nprint(count_Digit(10000)) #Output: 4 ",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    largest = float('-inf')\n    for i in range(len(list_nums)-1):\n        product = list_nums[i]*list_nums[i+1]\n        if product > largest:\n            largest = product\n    return largest\n\n# Test the function with an example list of integers\nlist_nums = [-10, -10, 5, 2, -4, 7, 3, -6]\nprint(adjacent_num_product(list_nums))  # Output: 70 ",
        "generated_testcode": "assert adjacent_num_product(list_nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "       self.data = data \n        self.left = None\n        self.right = None\n\ndef height(root):\n    if root is None:\n        return 0\n    left_height = height(root.left)\n    right_height = height(root.right)\n    return max(left_height, right_height) + 1\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    left_height = height(root.left)\n    right_height = height(root.right)\n    if abs(left_height - right_height) <= 1 and is_balanced(root.left) is True and is_balanced(root.right) is True:\n        return True\n    return False\n\n# Usage:\n# root = Node(1)\n# root.left = Node(2)\n# root.right = Node(3)\n# root.left.left = Node(4)\n# root.left.right = Node(5)\n# root.right.left = Node(6)\n# root.right.right = Node(7)\n# root.left.left.left = Node(8)\n# root.left.right.left = Node(9)\n# root.left.right.left = Node(10)\n# root.left.right.right = Node(11)\n\n# print(is_balanced(root))  # Output: True ",
        "generated_testcode": "assert __init__(1) == True\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return test_tup * N\n\n# Example usage:\n# test_tup = (1, 2, 3)\n# print(repeat_tuples(test_tup, 3)) # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)\n\n\n#----------------------------------------------------------\n# Write a function to find the maximum element in a tuple.\ndef max_element(tup):\n    return max(tup)\n\n# Example usage:\n# test_tup = (4, 5, 1, 7, 9, 3, 2)\n# print(max_element(test_tup)) # Output: 9\n\n\n#----------------------------------------------------------\n# Write a function to find the minimum element in a tuple.\ndef min_element(tup):\n    return min(tup)\n\n# Example usage:\n# test_tup = (4, 5, 1, 7, 9, 3, 2)\n# print(min_element(test_tup)) # Output: 1\n\n\n#----------------------------------------------------------\n# Write a function to check if a given element is present in a tuple.\ndef is_present(test_tup, element):\n    return element in test_tup\n\n# Example usage:\n# test_tup = (4, 5, 1, 7, 9, 3, 2)\n# print(is_present(test_",
        "generated_testcode": "assert repeat_tuples((\"abc\", 3) == (\"abc\", \"abc\", \"abc\")\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return 2*(l*w+l*h+w*h)\n\n#test function\nprint(lateralsurface_cuboid(5,4,3) == 52)\n\nprint(lateralsurface_cuboid(10,2,4) == 104)\nprint(lateralsurface_cuboid(1,1,1) == 6) ",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 52\n\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return float(price[1])\n\n# example usage:\n\nbooks = ((\"Book A\", \"19.99\"), (\"Book B\", \"9.99\"), (\"Book C\", \"21.99\"), (\"Book D\", \"15.99\")\n\nsorted_books = sorted(books, key=float_sort)\nprint(sorted_books)\n# Output: [('Book B', '9.99'), ('Book A', '19.99'), ('Book D', '15.99'), ('Book C', '21.99')] ",
        "generated_testcode": "assert float_sort(('apple', 1.5, 'banana', 2.5, 'orange', 3.5) == ('apple', 1.5, 'banana', 2.5, 'orange', 3.5)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if left_element > right_element:\n        return left_element\n\n    mid_element = (left_element + right_element) // 2\n\n    if A[mid_element] == mid_element + 1:\n        return smallest_missing(A, left_element, mid_element - 1)\n    else:\n        return smallest_missing(A, mid_element + 1, right_element)\n\n\n\n# Test the function with an example array\narr = [0, 1, 2, 3, 4, 6, 7, 9, 10, 11]\nn = len(arr)\nprint(smallest_missing(arr, 0, n - 1))  # Output: 5\n",
        "generated_testcode": "assert smallest_missing(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], left_element=0, right_element=9) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    heapify(nums)\n    n = len(nums)\n    end = n - 1\n    while end > 0:\n        nums[end], nums[0] = nums[0], nums[end]\n        end -= 1\n        sift_down(nums, 0, end)\n    return nums\n\ndef heapify(nums):\n    start = (len(nums) - 2) // 2\n    while start >= 0:\n        sift_down(nums, start, len(nums) - 1)\n        start -= 1\n\ndef sift_down(nums, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        swap = root\n        if nums[swap] < nums[child]:\n            swap = child\n        if child + 1 <= end and nums[swap] < nums[child + 1]:\n            swap = child + 1\n        if swap != root:\n            nums[root], nums[swap] = nums[swap], nums[root]\n            root = swap\n        else:\n            return\n\nnums = [3, 2, 1, 5, 7, 6, 4, 8]\nprint(heap_assending(nums)) # [1, 2, 3, 4, 5, 6, 7, 8]",
        "generated_testcode": "assert heap_assending(nums=[4, 2, 5, 1, 3, 0, 9, 7]) == [0, 1, 2, 3, 4, 5, 7, 9]\n\n# Test case 1: Test the function with a list of integers.\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    vol = l * w * h\n    return vol\n\n#Test the function with some sample inputs\nprint(volume_cuboid(10, 5, 4) == 200)\nprint(volume_cuboid(2, 2, 2) == 8)\nprint(volume_cuboid(5, 2, 3) == 30) ",
        "generated_testcode": "assert volume_cuboid(2, 3, 4) == 24\n\n# Write a function to find the area of a circle.\ndef area_circle(r):\n    pass\n\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    # convert string to list and sort it\n    str = sorted(list(str))\n    # recursive function to generate permutations\n    def generate_permutations(data, i, length, current_str):\n        if i == length:\n            result.append(\"\".join(current_str))\n            return\n        for j in range(length):\n            # skip duplicate characters\n            if j > 0 and str[j] == str[j - 1] and j != i:\n                continue\n            current_str[i] = str[j]\n            generate_permutations(data, i + 1, length, current_str)\n    # check if string is empty or not\n    if str:\n        generate_permutations(str, 0, len(str), [None] * len(str))\n    return result\n# test the function\nstring = \"aabc\"\nprint(permute_string(string)) ",
        "generated_testcode": "assert permute_string(None) == []\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return int(n/m)*m + m*int(n%m>m/2)\n\nprint(round_num(13, 5)) # 15\nprint(round_num(17, 5)) # 20\nprint(round_num(23, 7)) # 21\nprint(round_num(28, 7)) # 28\n\n\n#Explanation:\n#We first calculate the quotient (n//m) and multiply it by m to get the nearest lower multiple of m that is less than or equal to n. \n#We then add m if the remainder when n is divided by m is greater than or equal to half of m. \n#This ensures that the number is rounded up or down to the nearest multiple of m depending on whether it is closer to the lower or upper multiple. \n#For example, if n = 13 and m = 5, then n//m = 2 (since 2*5 = 10 which is less than 13) and n%m = 3, which is less than 5/2 = 2.5. Therefore, we round up to 2*5 + 5 = 10. \n#If n = 17 and m = 5, then n//m = 3 (since 3*5 = 15 which is less than 17) and n%m = 2, which is greater than 5/2. Therefore, we round up to 3*5 + 5 = 15",
        "generated_testcode": "assert round_num(15, 10) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup += (i,)\n        else:\n            new_tup += (\"_duplicate_\",)\n    return new_tup\n\n# Example usage:\ntest_tup = (1, 2, 3, 1, 4, 3, 5, 6, 1, 2, 7)\nresult = remove_replica(test_tup) # (1, 2, \"_duplicate_\", 3, \"_duplicate_\", 4, 5, 6, \"_duplicate_\", 7) ",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'd', 'b', 'e', 'a') == ('a', 'b', 'c', 'd', 'e', None)\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return s.replace(c,\"\")\n    \n# Example usage:\ns = \"hello world\"\nc = \"l\"\nprint(remove_Char(s,c)) # Output: \"heo word\" ",
        "generated_testcode": "assert remove_Char(s='hello world', c='l') == 'heo word'\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    last_element = test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list\n\n#Test the function\ntest_list = [1, 2, 3, 4, 5, 6, 7]\nprint(move_first(test_list)) #Output [7, 1, 2, 3, 4, 5, 6] ",
        "generated_testcode": "assert move_first([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"]) == [\"elderberry\", \"apple\", \"banana\", \"cherry\", \"date\"]\n\n\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return 2*((l*h)+(w*h)+(l*w))\n\nprint(surfacearea_cuboid(2,3,4))\n\n# Output: 52\n\n# Test.assert_equals(surfacearea_cuboid(2,3,4), 52)\n# Test.assert_equals(surfacearea_cuboid(1,1,1), 6)\n# Test.assert_equals(surfacearea_cuboid(1,1,2), 10)\n# Test.assert_equals(surfacearea_cuboid(3,3,3), 54) ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n\n# Test 1: Test with valid input\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    mylist = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(i*j)\n        mylist.append(row)\n    return mylist\n\n#test the function\nprint(multi_list(3,5))\nprint(multi_list(4,2)) ",
        "generated_testcode": "assert multi_list(3,4) == [[None, None, None, None], [None, None, None], [None, None, None]]\n\n\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of lists as input and sorts the list based on the values of the inner list at the given index.\n    For example:\n    If we have a list of lists as follows:\n    list_data = [[1, 'apple'], [2, 'banana'], [3, 'orange'], [4, 'pear']]\n    and we want to sort this list based on the second index of each inner list (the name of the fruit), we can call the function as:\n    index_on_inner_list(list_data, 1)\n    The output will be:\n    [['banana', 2], ['apple', 1], ['orange', 3], ['pear', 4]]\n\n    \"\"\"\n    return sorted(list_data, key=lambda x: x[index_no])\n\n\nlist_data = [[1, 'apple'], [2, 'banana'], [3, 'orange'], [4, 'pear']]\nprint(index_on_inner_list(list_data, 1)) # Output: [['banana', 2], ['apple', 1], ['orange', 3], ['pear', 4]] ",
        "generated_testcode": "assert index_on_inner_list(\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ],\n    1\n) == [\n    [4, 5, 6],\n    [1, 2, 3],\n    [7, 8, 9]\n]\n\n# Test case 1: Test if the function can sort a list of lists by the second element of each inner list.\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    n = len(A)\n    low = 0\n    high = n - 1\n    while low < high:\n        mid = (low + high) // 2\n        if A[mid] < A[high]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\n# Example usage:\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A))  # Output: 4\n# In the above array, the number of rotations are 4, as 2 to 10 are the elements that are rotated. ",
        "generated_testcode": "assert find_rotation_count(A=[1, 2, 3, 4, 5, 6, 7]) == 0\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    mask = 0xAAAAAAAA \n    return (n ^ mask) \n\n# Drivers code \nn = int(input(\"Enter the number: \")) \nprint(\"Number after toggling odd bits: \", even_bit_toggle_number(n)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 -> 1001\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    # creating a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # finding the smallest element in the array\n    smallest = min(arr)\n\n    # returning the frequency of the smallest element\n    return freq[smallest]\n\n# test the function with an example\narr = [1, 2, 3, 2, 3, 4, 5, 1, 1, 1]\nn = len(arr)\nprint(\"Frequency of the smallest element in the array is:\",frequency_Of_Smallest(n,arr)) ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,2,1]) == 2\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n-1) + get_perrin(n-2) + get_perrin(n-3)\n\n# Test the function\nfor i in range(10):\n    print(get_perrin(i))\n\n# Output: 3 0 2 3 2 3 0 5 5 8 3 13 8 21 12\n\n\n# Time Complexity: O(3^n) because we are making recursive calls for each number\n# Space Complexity: O(n) because we are using the call stack ",
        "generated_testcode": "assert get_perrin(0) == 3\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    count = 0\n    for i in s:\n        if i == '[':\n            stack.append(i)\n        elif i == ']':\n            if not stack:\n                count += 1\n            else:\n                stack.pop()\n    count += len(stack)\n    return count\n\n# Testing the code\ns = '[][][][]'\nprint(swap_count(s))  # 0\n\ns = '][[]][]['\nprint(swap_count(s))  # 2\ns = '[[][][]]'\nprint(swap_count(s))  # 0\ns = '[][[][]]['\nprint(swap_count(s))  # 1\ns = '[[][]][]]['\nprint(swap_count(s))  # 1\ns = '[]][[[]'\nprint(swap_count(s))  # 3\ns = '][][[]['\nprint(swap_count(s))  # 1\ns = '[[]]['\nprint(swap_count(s))  # 1 ",
        "generated_testcode": "assert swap_count(s=\"([])()[]\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if N[0] in ['1', '3', '5', '7', '9', 'b', 'd', 'f']:\n        return \"Odd\"\n    else:\n        return \"Even\"\n\n#Example:\n#Input:\n#N = \"123\"\n#Output:\n#Even\n#Input:\n#N = \"102d\"\n#Output:\n#Odd ",
        "generated_testcode": "assert even_or_odd(0x10) == \"Even\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    p = 1 \n    while (p < n): \n        p <<= 1\n    return p >> 1 \n  \n# testing the function with sample inputs \nprint(highest_Power_of_2(16))   # Output: 8\nprint(highest_Power_of_2(15))   # Output: 8\nprint(highest_Power_of_2(20))   # Output: 16 ",
        "generated_testcode": "assert highest_Power_of_2(16) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n\n# Test the function with n = 0\nprint(find_lucas(0)) # Output: 2\n\n# Test the function with n = 1\nprint(find_lucas(1)) # Output: 1\n# Test the function with n = 2\nprint(find_lucas(2)) # Output: 3\n# Test the function with n = 3\nprint(find_lucas(3)) # Output: 3\n# Test the function with n = 4\nprint(find_lucas(4)) # Output: 4\n# Test the function with n = 5\nprint(find_lucas(5)) # Output: 7\n# Test the function with n = 6\nprint(find_lucas(6)) # Output: 11\n# Test the function with n = 7\nprint(find_lucas(7)) # Output: 18 \n# Test the function with n = 8\nprint(find_lucas(8)) # Output: 29 \n# Test the function with n = 9\nprint(find_lucas(9)) # Output: 47 ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(list)):\n        list[i] = string+list[i]\n    return list\n\n#Example:\n#input: ['python','java','c++']\n#output: ['hi_python','hi_java','hi_c++'] ",
        "generated_testcode": "assert add_string([\"apple\", \"banana\", \"cherry\"], \"fruit: \") == [\"fruit: apple\", \"fruit: banana\", \"fruit: cherry\"]\n\n\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    dict = {}\n    for i in range(len(l1)):\n        dict[l1[i]] = {}\n        for j in range(len(l2)):\n            dict[l1[i]][l2[j]] = l3[i][j]\n    return dict\n\nl1 = ['A', 'B', 'C']\nl2 = ['one', 'two', 'three']\nl3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(convert_list_dictionary(l1, l2, l3)) ",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"b\": 1, \"c\": True}, \"b\": {\"a\": 2, \"c\": False}, \"c\": {\"a\": 3, \"b\": True}}\n\n# Test case 1: Test if the function can handle empty lists\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + n, n)\n\n\ndef get_max_sum_memo (n, memo = {}):\n    if n in memo:\n        return memo[n]\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        memo[n] = max(get_max_sum_memo(n/2, memo) + get_max_sum_memo(n/3, memo) + get_max_sum_memo(n/4, memo) + n, n)\n        return memo[n]\n\n#print(get_max_sum(10))\nprint(get_max_sum_memo(10))",
        "generated_testcode": "assert get_max_sum (10) == 27\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(input_list, key=lambda x: len(x))\n\n\n#Test the function with sample input\ninput_list = [\"apple\", \"banana\", \"cherry\", \"banana\", \"kiwi\", \"mango\", \"kiwi\", \"kiwi\", \"kiwi\"]\nprint(max_length_list(input_list)) # Output: \"banana\" ",
        "generated_testcode": "assert max_length_list([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"mango\"]) == \"banana\"\n\n\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    # Converting the tuple into set and checking if the length of the set is same as the length of tuple\n    # If both are same, then all the elements in the tuple are distinct, otherwise there are duplicates\n    return len(set(test_tup)) == len(test_tup)\n\n\n# Test the function with some inputs\ntup1 = (1,2,3,4,5)\ntup2 = (1,2,3,4,5,5)\nprint(check_distinct(tup1)) # True\nprint(check_distinct(tup2)) # False ",
        "generated_testcode": "assert check_distinct(()) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n\nprint(first_non_repeating_character(\"abcdabcde\"))  # Output: 'e'\nprint(first_non_repeating_character(\"abcabcdef\"))  # Output: None ",
        "generated_testcode": "assert first_non_repeating_character(None) == None\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = \"^(.)(.*)\\1$\"\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n# Importing the necessary library\nimport re\n\n# Reading input string from user\nstring = input(\"Enter a string: \")\n\n# Calling the function and printing the result\nif check_char(string):\n    print(\"The given string starts and ends with the same character.\")\nelse:\n    print(\"The given string does not start and end with the same character.\") ",
        "generated_testcode": "assert check_char(string) == True \n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n\n#Example usage:\nprint(median_numbers(3, 5, 4)) #Output: 4\nprint(median_numbers(2, 7, 9)) #Output: 7\nprint(median_numbers(1, 5, 3)) #Output: 3 ",
        "generated_testcode": "assert median_numbers(2, 4, 3) == 3\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns a list of the sum of digits of each number.\n    \"\"\"\n    sum_list = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sum_list.append(sum)\n    return sum_list\n\n# Test the function\nprint(sum_of_digits([123, 456, 789, 10000000])) # Output: [6, 15, 24] ",
        "generated_testcode": "assert sum_of_digits(list(range(10)) == [0, 1, 3, 3, 6, 6, 10, 10, 15, 15, 21, 28, 28, 36, 45",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # convert tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # loop through each element of the tuples and perform xor operation\n    for i in range(len(list1)):\n        list1[i] = list1[i] ^ list2[i]\n    \n    # convert the list back to a tuple and return it\n    return tuple(list1)\n\n# test the function\nprint(bitwise_xor((1, 2, 3, 4), (5, 6, 7)) #(6, 2, 3) ",
        "generated_testcode": "assert bitwise_xor(('10101010', '00111011') == '10011111')\n\n\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for tup in test_list:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n\n# Test the function with a sample list\ntest_list = [(1,2),(3,4),(1,2),(5,6),(1,2),(7,8),(1,2)]\nprint(extract_freq(test_list)) # Output: {(1, 2): 3, (3, 4): 1, (5, 6): 1, (7, 8): 1} ",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"orange\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 2}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    res_tup = ()\n    for i in range(len(test_tup1)):\n        sum_tup = ()\n        for j in range(len(test_tup1[i])):\n            sum_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        res_tup += (sum_tup,)\n    return res_tup\n\n# Test the function with sample inputs:\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nprint(add_nested_tuples(test_tup1, test_tup2)) # Output: ((11, 22, 33), (44, 55, 66), (77, 88, 99)) ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18)) ) == ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n# Test case 1:\n# Input:\n# ((1,2,3), (4,5,6), (7,8,9)) , ((10,11,12), (13,14,15), (16,17,18))\n# Output:\n# ((11, 13, 15), (17, 19, 21), (23, 25, 27))\n\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if r > n: \n        return 0\n    num = 1\n    den = 1\n    for i in range(1, r+1): \n        num = (num * (n-r+i)) % p \n        den = (den * i) % p \n    return (num * pow(den, p-2, p)) % p \n\n#Example usage: \n#n = 10, r = 2, p = 13\n#Output: 10\nprint(ncr_modp(10, 2, 13)) ",
        "generated_testcode": "assert ncr_modp(10, 2, 13) == 45\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n# Test Cases:\nprint(is_valid_URL('http://www.google.com')) # True\nprint(is_valid_URL('https://www.google.com')) # True\nprint(is_valid_URL('www.google.com')) # False\nprint(is_valid_URL('http://google.com')) # True\nprint(is_valid_URL('http://google.com:8080')) # True\nprint(is_valid_URL('http://localhost')) # True\nprint(is_valid_URL('http://127.0.0.0.1:80000')) # True\n",
        "generated_testcode": "assert is_valid_URL(r\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if a<b:\n        return a\n    else:\n        return b\n\nprint(minimum(4,5)==4) # True\nprint(minimum(5,4)==4) # True\nprint(minimum(7,3)==3) # True\nprint(minimum(0,-2)==-2) # True\nprint(minimum(8,8)==8) # True ",
        "generated_testcode": "assert minimum(5,6) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if tuplex in tuple1: \n        print(f\"{tuplex} is present in {tuple1} at {tuple1.index(tuplex)} index.\") \n    else: \n        print(f\"{tuplex} is not present in {tuple1}.\") \n\n#Test the function with sample inputs: \ntuple1 = (1,2,3,4,5,6,7,8) \ncheck_tuplex(4,tuple1) #Output: 4 is present in (1, 2, 3, 4, 5, 6, 7, 8) at 2 index. \ncheck_tuplex(10,tuple1) #Output: 10 is not present in (1, 2, 3, 4, 5, 6, 7, 8) \n ",
        "generated_testcode": "assert check_tuplex((\"apple\", (\"apple\", \"banana\", \"cherry\")) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x & 1 == 0: \n        return 0 # Even \n    else: \n        return 1 # Odd ",
        "generated_testcode": "assert find_Parity(10) == 0 # even\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = str(n)\n    sorted_n = sorted(n, reverse=True)\n    max_n = int(''.join(sorted_n))\n    min_n = int(n)\n    while int(n) >= max_n:\n        n = int(n) + 1\n        sorted_n = sorted(str(n), reverse=True)\n        max_n = int(''.join(sorted_n))\n        if n == min_n:\n            return -1\n    return int(''.join(sorted_n))\n\n# Test cases\nprint(rearrange_bigger(123456)) # Output: 65432\nprint(rearrange_bigger(99999)) # Output: -1\nprint(rearrange_bigger(123)) # Output: 321\nprint(rearrange_bigger(156823)) # Output: 86532\nprint(rearrange_bigger(5349876)) # Output: 876543 ",
        "generated_testcode": "assert rearrange_bigger(12345) == 5342\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :type k: int\n    :rtype: List[List[int]\n    \"\"\"\n    pairs = []\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2) and k > 0:\n        pairs.append([nums1[i], nums2[j]])\n        i += 1\n        j += 1\n        k -= 1\n    return pairs\n\n# Time: O(klogk) for sorting the arrays + O(k) for iterating through them\n# Space: O(k) to store the result pairs",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 7, 11], nums2=[2, 4, 6], k=3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n# test the function\nlist1 = [(2, 5), (3, 6), (9, 4), (7, 3), (8, 2)]\nprint(min_product_tuple(list1)) # Output: 12 ",
        "generated_testcode": "assert min_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)] ) == 12\n\n\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n\nlist_val = [5, 'hello', 3.14, True, 'world', 8, 10, False, 'python']\nprint(min_val(list_val)) # Output: 3.14 ",
        "generated_testcode": "assert min_val([\"apple\", 5, 3.14, \"banana\", 7, 2.71, \"cherry\", 10, \"orange\"]) == \"apple\"\n\n\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    words = word.split(\"_\")\n    camel = \"\"\n    for w in words:\n        camel += w.capitalize()\n    return camel\n\n# test the function\nprint(snake_to_camel(\"hello_world\")) # output: \"HelloWorld\" ",
        "generated_testcode": "assert snake_to_camel(snake_to_camel) == \"snakeToCamel\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of integers as input and removes all the odd numbers from it.\n    \"\"\"\n    return [i for i in l if i%2==0]\n\n#Test the function with some examples\nprint(remove_odd([1,2,3,4,5,6,7,8,9])) # Should print [2, 4, 6, 8]\nprint(remove_odd([2,4,6,8])) # Should print [2, 4, 6, 8]\nprint(remove_odd([1,3,5,7])) # Should print []\nprint(remove_odd([])) # Should print [] ",
        "generated_testcode": "assert remove_odd(l) == [2, 4, 6, 8]\n\n\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return [tup[n-1] for tup in list1]\n\n# Test the function with an example\nlist1 = [(1,2,3), (4,5,6), (7,8,9)]\nn = 2\nprint(extract_nth_element(list1, n)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_nth_element([(1,2), (3,4), (5,6), (7,8)], 2) == 4\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\nlist1 = [1,2,3,4,5]\nlist2 = [3,4,5,6]\nlist3 = [7,8,9]\nprint(overlapping(list1,list2)) # True\nprint(overlapping(list1,list3)) # False\n\n\n#Another way to solve the same problem using sets:\ndef overlapping_sets(list1,list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))\nlist1 = [1,2,3,4,5]\nlist2 = [3,4,5,6]\nlist3 = [7,8,9]\nprint(overlapping_sets(list1,list2)) # True\nprint(overlapping_sets(list1,list3)) # False ",
        "generated_testcode": "assert overlapping(list1=[1,2,3,4,5],list2=[4,5,6,7,8]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(arr) < 2: \n        return None\n    max_product = arr[0] * arr[1] \n    min_product = arr[0] * arr[1] \n    max_num = max(arr[0], arr[1]) \n    min_num = min(arr[0], arr[1]) \n    for i in range(2, len(arr)): \n        curr_max = max_product \n        curr_min = min_product \n        max_product = max(max(arr[i], max_num) * max(arr[i], min_num) * max(arr[i], min_num), min(arr[i], max_num) * min(arr[i], min_num)) \n        min_product = min(min(arr[i], max_num) * min(arr[i], min_num), max(arr[i], min_num) * min_num) \n        max_num = max(arr[i], max_num) \n        min_num = min(arr[i], min_num) \n        if max_product > curr_max: \n            max_product = curr_max \n        if min_product < curr_min: \n            min_product = curr_min \n    return max_product ",
        "generated_testcode": "assert max_Product(arr) == (3, 4) # if arr = [1, 2, 3, 4, 5, 6, 7, 2, 1, 5, 3]\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 3: \n        return 0\n    elif n == 3: \n        return 1\n    else: \n        return max(n-(n-1), breakSum(n-2)) + 1\n\ndef maxSum(n):\n    return n * (n - 1) // 3\n\ndef findMaxSum(n):\n    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        return max(breakSum(n), maxSum(n))\n\n# Driver code \nn = 10\nprint(\"Maximum sum using breakSum: \", findMaxSum(n)) ",
        "generated_testcode": "assert breakSum(10) == 18\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res = set(Input[0]) \n    for i in range(1, len(Input)): \n        res = res.intersection(set(Input[i])) \n    return tuple(res) \n\n# Test the function with sample input \nInput = [('1', '2', '3', '4'), ('2', '3', '4', '5'), ('3', '4', '5', '6')] \nprint(group_tuples(Input)) ",
        "generated_testcode": "assert group_tuples([(1,2,3), (2,3,4), (3,4,5)] ) == 3\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    max_len = 0\n    start = 0\n    end = 0\n    temp_start = 0\n    curr_start = 0\n    for i in range(1, len(lst)): \n        if lst[i] < lst[i - 1]: \n            if i - curr_start > max_len: \n                max_len = i - curr_start \n                start = temp_start \n                end = i - 1\n            curr_start = i \n        elif lst[i] > lst[i - 1]: \n            if i - curr_start == 1: \n                temp_start = curr_start \n    if i - curr_start > max_len: \n        start = temp_start \n        end = i\n    return lst[start:end+1] ",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    rounded = [round(num) for num in list1]\n    total = sum(rounded)\n    length = len(list1)\n    result = total * length\n    return result\n\n#Example usage:\nlist1 = [1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9]\nprint(round_and_sum(list1)) # Output: 42 ",
        "generated_testcode": "assert round_and_sum(list1) == 100\n\n# The function should round each number in the list to the nearest integer and then sum them up. \n# The length of the list should be multiplied with the sum of the rounded numbers. \n# For example, if the list is [1.5, 2.3, 3.7, 4.8, 5.2], the rounded numbers would be [2, 2, 4, 5, 5] and their sum is 13. \n# The length of the list is 4, so the final result should be 13 * 4 = 52. ",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    count = 0\n    while count < n:\n        i += 1\n        if i % 2 == 0:\n            sum += i**3\n            count += 1\n    return sum\n\n#testing the function with an example\nprint(cube_Sum(5)) # Output: 162 ",
        "generated_testcode": "assert cube_Sum(3) == 216\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    delimiter = input(\"Enter delimiter: \")\n    return delimiter.join(test_tup)\n\n# testing the function\ntest_tup = (\"apple\", \"banana\", \"cherry\", \"date\")\nprint(concatenate_tuple(test_tup)) # output: apple,banana,cherry,date ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"!\") == \"HelloWorld!\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    return sum/n  \n  \n# Taking input from user  \nn = int(input(\"Enter n: \"))  \n  \n# Function call to find average of cubes of first n natural numbers  \nprint(\"The average of cubes of first\",n,\"natural numbers is:\", find_Average_Of_Cube(n)) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 14.16666666666666666667\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    gold_table = [[0 for j in range(n)] for i in range(m)] \n    gold_table[0][0] = gold[0][0] \n    for i in range(1, m): \n        gold_table[i][0] = gold_table[i-1][0] + gold[i][0] \n    for j in range(1, n): \n        gold_table[0][j] = gold_table[0][j-1] + gold[0][j] \n    for i in range(1, m): \n        for j in range(1, n): \n            gold_table[i][j] = max(gold_table[i-1][j], gold_table[i][j-1]) + gold[i][j] \n    return gold_table[m-1][n-1] ",
        "generated_testcode": "assert get_maxgold(\n    [\n        [1, 3, 1, 5, 2],\n        [2, 2, 4, 0],\n        [5, 0, 2, 3],\n        [0, 6, 1, 2]\n    ], 3, 4) == 12\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x[-1], test_tuple)\n\n\n# Example usage:\n# test_tuple = ('cat', 'doggo', 'david', 'hamster', 'python', 'snake')\n# print(extract_rear(test_tuple))  # Output: ['t', 'g', 'd', 'n', 'e']\n\n\n#=====================================================================\n\n# Write a function to calculate the sum of all elements in a tuple if they are numeric.\ndef sum_numeric_elements(test_tuple):\n    return sum(filter(lambda x: isinstance(x, (int, float), test_tuple))\n\n\n# Example usage:\n# test_tuple = (2, 'cat', 3.14, 7, True, 'dog', '8', 3, 0.2, '12')\n# print(sum_numeric_elements(test_tuple))  # Output: 12.14\n\n\n#=====================================================================\n# Write a function to capitalize the first and last characters of each element in a tuple of strings.\ndef capitalize_first_last(test_tuple):\n    return tuple(map(lambda x: x[0].upper() + x[1:-1] + x[-1].upper(), test_tuple)\n\n\n# Example usage:\n# test_tuple = ('hello', 'world', 'python', 'programming', 'is', 'fun')\n# print(capitalize_first_last(test_tuple)) ",
        "generated_testcode": "assert extract_rear((\"hello\") == \"o\"\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1): \n        if list1[i] == x: \n            count += 1\n    return count ",
        "generated_testcode": "assert count_element_in_list([\"apple\", \"banana\", \"cherry\", \"banana\", \"date\", \"banana\"], \"banana\") == 2\n\n\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n\n#test the function\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = filter_oddnumbers(numbers)\nprint(result) # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert filter_oddnumbers(range(10)) == [1, 3, 5, 7, 9]\n\n\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\2-\\3-\\1\", dt)\n\n#testing the function\nprint(change_date_format(\"2021-04-01\"))\n\n\n#output: \"04-01-2021\" ",
        "generated_testcode": "assert change_date_format(2021-01-01) == \"01-01-2021\"\n\n\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n# Example usage:\nmy_list = [3, 2, 1, 5, 4, 6, 7, 8, 2]\nprint(shell_sort(my_list)) #[1, 2, 2, 3, 4, 5, 6, 7, 8] ",
        "generated_testcode": "assert shell_sort([\"apple\", \"pear\", \"orange\", \"banana\", \"grape\", \"strawberry\"]) == [\"apple\", \"banana\", \"grape\", \"orange\", \"pear\", \"strawberry\"]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res_list = []\n    for i in range(len(test_tup1)):\n        res_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(res_list)\n\ndef or_tuples(test_tup1, test_tup2):\n    res_list = []\n    for i in range(len(test_tup1)):\n        res_list.append(test_tup1[i] | test_tup2[i])\n    return tuple(res_list)\ndef xor_tuples(test_tup1, test_tup2):\n    res_list = []\n    for i in range(len(test_tup1):\n        res_list.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(res_list) ",
        "generated_testcode": "assert and_tuples(('apple', 'banana', 'cherry', 'date', 'elderberry'), (1, 2, 3, 4)) == ('apple', 1, 'banana', 2, 'cherry', 3, 'date', 4, 'elderberry')\n\n# The output should be ('apple', 1, 'banana', 2, 'cherry', 3, 'date', 4, 'elderberry') ",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    a, b, c are the coefficients of the parabola in the form y^2 = 4ax + 2by + c\n    Return the directrix in the form y = mx + k\n    \"\"\"\n    if a == 0:\n        return None\n    m = -1 / a\n    k = c / b\n    return m, k\n\n# Test the function with some sample inputs\nprint(parabola_directrix(1, 2, 3)) # Output: (2.0, 1.5)\nprint(parabola_directrix(2, 4, 6)) # Output: (1.0, 1.5)\nprint(parabola_directrix(1, 0, 3)) # Output: None ",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n# Example usage:\nprint(common_element([1, 2, 3, 4], [4, 5, 6]) == True) # True\nprint(common_element([1, 2, 3], [4, 5, 6]) == False) # False ",
        "generated_testcode": "assert common_element([\"apple\", \"banana\", \"cherry\"], [\"orange\", \"kiwi\", \"banana\"]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    '''\n    Returns the median of a trapezium\n    '''\n    #Calculate the area of trapezium\n    area = ((base1+base2)*height)/2\n    \n    #Calculate the median\n    median = (base1+base2)/2\n    \n    return median\n\n#Test the function\nprint(median_trapezium(4,6,5)\nprint(median_trapezium(10,8,3)\nprint(median_trapezium(12,14,6)\nprint(median_trapezium(8,12,4) ",
        "generated_testcode": "assert median_trapezium(4, 6, 3) == 5.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    greater = True\n    for i in arr:\n        if i > number:\n            pass\n        else:\n            greater = False\n            break\n    return greater\n\n# Test the function with an example array and a number\narr = [10, 20, 30, 40, 50, 60]\nnumber = 25\nprint(check_greater(arr, number))  # Output: True ",
        "generated_testcode": "assert check_greater(arr=[1, 2, 3, 4, 5], number=4) == False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'ab+'\n    result = re.search(pattern, text)\n    return result != None\n\n# Test the function\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"abbb\")) # True\nprint(text_match_one(\"acb\")) # False\nprint(text_match_one(\"abbbc\")) # True\nprint(text_match_one(\"aabb\")) # True\nprint(text_match_one(\"abbc\")) # True\n\n\n# Write a function that matches a string that has a followed by two or more b's\ndef text_match_two(text):\n    pattern = r'ab{2,}'\n    result = re.search(pattern, text)\n    return result != None\n\n# Test the function\nprint(text_match_two(\"ab\")) # False\nprint(text_match_two(\"abb\")) # False\nprint(text_match_two(\"abbb\")) # True\nprint(text_match_two(\"acb\")) # False\nprint(text_match_two(\"abbbc\")) # True\nprint(text_match_two(\"aabb\")) # False\nprint(text_match_two(\"abbc\")) # False\nprint(text_match_two(\"abbbbbc\")) # True ",
        "generated_testcode": "assert text_match_one([\"ab\", \"abb\", \"a\", \"abbb\", \"abcd\", \"acb\", \"abbbb\"] == [\"ab\", \"abb\", \"abbb\"]\n\n\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return n % 10\n\n#Example:\n#Input: 123454\n#Output: 4 ",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in list1:\n        if i<0:\n            print(i,end=\" \")\nlist1=[1,-2,3,-4,-5,6,-7,8,9,-10]\nneg_nos(list1) #calling the function\n\n# Output: -2 -4 -7 -10 ",
        "generated_testcode": "assert neg_nos(list1) == [-3, -5, -1, -8]\n\n# Test case 1:\nlist1 = [3, 5, 1, 8, -3, -5, -1, -8]\nprint(neg_nos(list1)) # Output: [-3, -5, -1, -8]\n\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return ''.join([str1[i] for i in range(len(str1) if i % 2 == 0])\n\n\n# Test the function with some examples\nprint(remove_odd('HelloWorld'))\nprint(remove_odd('Python'))\nprint(remove_odd('Hi123World456'))\nprint(remove_odd('ThisisAstring'))\n\n\n# Output:\n# HloWrd\n# Pno\n# Hi12rng\n# iAstrng\n\n\n# Explanation: \n# In the first example, the even characters are 'H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l' and 'd', so the output is 'HloWrd'. \n# In the second example, the even characters are 'P' and 'n', so the output is 'Pno'. \n# In the third example, the even characters are 'Th', 's', 'i', 's', 't', 's', 'r', 'n', 'g', so the output is 'iAstrng'. ",
        "generated_testcode": "assert remove_odd(None) == None\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n\n# test the function\ntest_list = [1, 2, 3, 4, 5, 2, 1, 4, 5, 6, 3, 2, 5]\nprint(count_bidirectional(test_list)) # Output: 5\n\n\n# Write a function to check if a list has repeated elements\ndef check_repeated(test_list):\n    return len(test_list) != len(set(test_list))\n\n# test the function\ntest_list = [1, 2, 3, 4, 5, 2, 1, 4, 5, 6, 3, 2, 5]\nprint(check_repeated(test_list)) # Output: True\n\n# test_list = [1, 2, 3, 4, 5, 6, 7, 8]\n# print(check_repeated(test_list)) # Output: False\n\n\n# Write a function to find the missing number in a sequence\ndef find_missing(seq):\n    n = len(seq)\n    total_sum = (n+1) * (n+2) // 2\n    return total_sum - sum(",
        "generated_testcode": "assert count_bidirectional([\"cat\", \"dog\", \"bird\", \"dog\", \"cat\", \"cat\", \"fish\", \"dog\", \"fish\"]) == 2\n\n\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n\n# test the function\nprint(multiple_to_single([1, 2, 3, 4, 5]) ) # Output: 12345 ",
        "generated_testcode": "assert multiple_to_single(1, 2, 3) == 123\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # split the sentence into words\n    words = text.split()\n    adverb_positions = []\n    for i in range(len(words):\n        # check if the word is an adverb\n        if words[i][-2:] in ['ly'] and words[i] not in ['not', 'very', 'much', 'most', 'many', 'much', 'well', 'very', 'also', 'just', 'instead', 'either', 'neither', 'whether', 'rather', 'however', 'already', 'quite', 'mostly', 'very', 'indeed', 'least']:\n            adverb_positions.append(i)\n    return adverb_positions\n\n# test the function\ntext = \"He works quickly and very efficiently.\"\nprint(find_adverb_position(text))  # output: [2, 3] ",
        "generated_testcode": "assert find_adverb_position(text) == [(3, \"quickly\"), (9, \"happily\"), (15, \"well\"), (21, \"quickly\"), (26, \"happily\"), (30, \"quickly\")]\n\n# The function should return a list of tuples, where each tuple contains the position of the adverb in the sentence and the adverb itself. ",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return 6 * l**2\n\n# Test the function\nprint(surfacearea_cube(3)) # Output: 54\n\nprint(surfacearea_cube(4)) # Output: 96\n\nprint(surfacearea_cube(5)) # Output: 150\n\n\n# Write a function to find the surface area of a sphere\nimport math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * r**2\n\n# Test the function\nprint(surfacearea_sphere(3)) # Output: 1138.198621545494149004\nprint(surfacearea_sphere(4)) # Output: 254.467152335205028205\nprint(surfacearea_sphere(5)) # Output: 341.46020617298245563\n\n# Write a function to find the volume of a cube\ndef volume_cube(l):\n    return l**3\n\n# Test the function\nprint(volume_cube(3)) # Output: 27\nprint(volume_cube(4)) # Output: 64\nprint(volume_cube(5)) # Output: 125\n\n# Write a function to find the volume of a sphere\nimport math\ndef volume_sphere(r):\n    return (4/3) * math",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n\n# Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n    pass\n\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n# Example usage:\nnums = [2, 3, -5, -1, 0, 6, -8, 4, -9, 3]\nprint(positive_count(nums)) # Output: 0.5\n\n\n# This function takes an array of integers as an input and returns the ratio of positive numbers in the array. ",
        "generated_testcode": "assert positive_count(nums=[3, -5, 1, 0, 6, -2, 8, -1]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    neg_list = [] # create an empty list\n    for i in list1:   # iterate through the elements of the list\n        if i < 0:   # check if the element is negative\n            neg_list.append(i)   # if it is negative add it to neg_list\n    if len(neg_list) == 0:  # if neg_list is empty, there are no negative numbers\n        return \"No negative numbers in the list\"\n    else:\n        return max(neg_list)  # if neg_list is not empty, return the maximum element in the list\n\n\n# Test the function with a sample list\nprint(largest_neg([1, -5, 3, -7, 2, -3, 8, -10, 4]))  # output: -10 ",
        "generated_testcode": "assert largest_neg(list1) == -10\n\n# Test case 1:\nlist1 = [-5, -10, 0, 1, 2, -100, 5, -7, 3]\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a list of tuples and an integer k and returns a new list with each tuple trimmed by k.\n    Trimming a tuple means to return a new tuple containing only the first k elements of the original tuple.\n    If the original tuple has less than k elements, return the original tuple.\n    \"\"\"\n    new_list = []\n    for tup in test_list:\n        if len(tup) >= k:\n            new_list.append(tup[:k])\n        else:\n            new_list.append(tup)\n    return new_list\n\n# Test the function with some sample inputs\ntuples = [(1,2,3,4,5), (1,2), (3,4,5,6,7,8), (4,5,6)]\nprint(trim_tuple(tuples, 2)) #[(1, 2), (1, 2), (3, 4), (4, 5)]\nprint(trim_tuple(tuples, 4)) #[(1, 2, 3, 4), (1, 2, 3, 4), (3, 4, 5, 6), (4, 5, 6)]\nprint(trim_tuple(tuples, 5)) #[(1, 2, 3, 4, 5), (1, 2), (3, 4, 5, 6), (4, 5, 6)] ",
        "generated_testcode": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10, 11), (12, 13, 14, 15, 16, 17, 18), (19, 20, 21)] , 2) == [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n# Test case 1: Test with a list of tuples with different lengths and k=2\n# Expected output: [(3, 4), (8, 9), (14, 15), (20, 21)]\n\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res_tup = tuple(x*y for x,y in zip(test_tup1, test_tup2))\n    return res_tup\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(index_multiplication(test_tup1, test_tup2)) # Output: (2, 8, 24, 40) ",
        "generated_testcode": "assert index_multiplication(( (1, 2, 3, 4), (5, 6, 7) ) ) == (5, 12, 28)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = {}\n    for i in lst: \n        count[i] = lst.count(i) \n    for i in tup: \n        if i in count: \n            print(i, \":\", count[i]) ",
        "generated_testcode": "assert count_Occurrence((\"hello\", [\"h\", \"e\", \"l\", \"o\"]) == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x ** 3, nums)\n\n\n# example usage:\nnums = [1, 2, 3, 4, 5]\nresult = cube_nums(nums)\nprint(result)  # Output: [1, 8, 27, 64, 125]\n\n\n# the lambda function used in the above code is x ** 3, which means cube of each element in the list will be calculated and returned as a new list. ",
        "generated_testcode": "assert cube_nums(range(1, 5)) == [1, 8, 27, 64, 125]\n\n\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 0: \n        return 0 \n    elif n == 1: \n        return 3 \n    elif n == 2: \n        return 5 \n    else: \n        a = 3\n        b = 5\n        c = 0\n        for i in range(3,n+1): \n            c = a+b \n            a = b \n            b = c \n        return c \n\n# Test the function \nprint(cal_sum(0)) # 0 \nprint(cal_sum(1)) # 3 \nprint(cal_sum(2)) # 5 \nprint(cal_sum(3)) # 8 \nprint(cal_sum(4)) # 13 \nprint(cal_sum(5)) # 22 \nprint(cal_sum(6)) # 31 \nprint(cal_sum(7)) # 55 \nprint(cal_sum(8)) # 89 \nprint(cal_sum(9)) # 144 \nprint(cal_sum(10)) # 233 \nprint(cal_sum(11)) # 37 ",
        "generated_testcode": "assert cal_sum(1) == 3\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    distance1 = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    distance2 = ((x3-x2)**2 + (y3-y2)**2)**0.5\n    distance3 = ((x3-x1)**2 + (y3-y1)**2)**0.5\n    if distance1 + distance2 <= distance3 or distance2 + distance3 <= distance1 or distance1 + distance3 <= distance2:\n        return False\n    elif distance1 + distance2 + distance3 == 0:\n        return False\n    else:\n        return True\n\n#Test the function with some examples\nprint(check_Triangle(0,0,0,0,3,4)) #True\nprint(check_Triangle(0,0,3,0,0,4)) #True\nprint(check_Triangle(0,0,4,3,0,5)) #False\nprint(check_Triangle(0,0,2,0,4,4)) #False\nprint(check_Triangle(0,0,4,2,0,4)) #False ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,0,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "34B",
        "pass": 7,
        "correct": true,
        "answer": "    if len(str) < l:\n        return str\n    else:\n        return str[:l]\n\n# Test the function with sample inputs\nprint(extract_string(\"Hello\", 3))\nprint(extract_string(\"World\", 2))\nprint(extract_string(\"Python\", 6))\nprint(extract_string(\"This is a sentence\", 4)) ",
        "generated_testcode": "assert extract_string([\"apple\", \"banana\", \"cherry\", \"dog\", \"elephant\", \"fruit\", \"grape\"], 2) == [\"apple\", \"banana\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    return re.sub('\\s+', '', text1)\n\n# Example usage:\ntext1 = 'Python is a language with lot of features'\nprint(remove_whitespaces(text1))\n# Output: 'Pythonisalanguagewithlotoffeatures' ",
        "generated_testcode": "assert remove_whitespaces(text1) == \"Thisisatoestwithmanywords\"\n\n\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": " if actual_cost < sale_amount:\n    return None\n  else:\n    return actual_cost - sale_amount\n\n# Test cases\nprint(loss_amount(10000, 800)) # Should return 200\nprint(loss_amount(800, 1000)) # Should return None\nprint(loss_amount(500, 400)) # Should return None\nprint(loss_amount(400, 500)) # Should return 100 ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        if n % i == 0 and i % 2 == 0: \n            sum += i \n    return sum\n\n# Taking input from user \nn = int(input(\"Enter a number: \")) \n\n\n# Calling the function to find the sum of even factors of n \nprint(\"Sum of even factors of\", n, \"is:\", sumofFactors(n)) ",
        "generated_testcode": "assert sumofFactors(20) == 32 \n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return '\\w*z\\w*' in text\n\n# test function with examples\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog.\")) # True\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog\")) # False\nprint(text_match_wordz(\"He likes pie\")) # True\nprint(text_match_wordz(\"He likes pizza\")) # False\nprint(text_match_wordz(\"He likes aztec\")) # True\nprint(text_match_wordz(\"The quick brown fox jumps over the laziest dog.\")) # True ",
        "generated_testcode": "assert text_match_wordz([\"hello\", \"world\", \"bazaar\", \"zoo\", \"zebra\", \"car\", \"zucchini\"] == [\"zoo\", \"zebra\", \"zucchini\"]\n\n\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False\n\n#test the function\nprint(check_monthnumb_number(2)) #False\nprint(check_monthnumb_number(7)) #True ",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Test the function with an example list of strings\nstring_list = [\"hello\", \"world\", \"python\", \"programming\"]\nprint(reverse_string_list(string_list)) ",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]\n\n\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    # Initialize the minimum length \n    min_length = float('inf')\n    # Initialize the index of the sublist with minimum length\n    index = -1\n    # Traverse through the list of lists \n    for i in range(len(lst)): \n        # Find the length of each sublist \n        length = len(lst[i]) \n        # Update the minimum length and index if a smaller length is found \n        if length < min_length: \n            min_length = length \n            index = i \n    return lst[index] ",
        "generated_testcode": "assert Find_Min([[1,2,3], [4,5,6], [7,8,9,10,11], [12], [13,14,15,16,17,18,19]] ) == [12]\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    area = l * b\n    return area\n\n#Test the function\nprint(rectangle_area(5,4) == 20) # True\nprint(rectangle_area(10,10) == 100) # True ",
        "generated_testcode": "assert rectangle_area(5, 4) == 20\n\n# Write a function to find the volume of a cube.\ndef cube_volume(side):\n    pass\n\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r\"[A-Z]+\"\n    return re.sub(pattern, \"\", str1)\n\n# Example usage:\nstr1 = \"HeLLo WorLD\"\nprint(remove_uppercase(str1))  # Output: \"o rLD\"\n\n\n# Explanation:\n# The regex pattern `[A-Z]+` matches one or more uppercase letters.\n# `re.sub()` function replaces all matched substrings with an empty string, effectively removing them from the original string. ",
        "generated_testcode": "assert remove_uppercase(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello World\"\nexpected_output_string = \"hello world\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist[0] for sublist in lst]\n\n# example\nlst = [[1,2,3], [4,5,6], [7,8,9]]\nprint(Extract(lst)) # Output: [1, 4, 7]\n\n\n# Another example\nlst1 = [[9,8,7], [6,5,4], [3,2,1]]\nprint(Extract(lst1)) # Output: [9, 6, 3] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]] ) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n#test the function\nstr = \"Hello, World! This is a Test String for Upper Case Counter Function.\"\nprint(\"Number of upper case characters in the string: \", upper_ctr(str)) ",
        "generated_testcode": "assert upper_ctr(\u201cHello World\u201d) == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(list1) == 0:\n        return [[]]\n    else:\n        rest_comb = combinations_list(list1[1:])\n        return rest_comb + [[list1[0]] + c for c in rest_comb] + [[list1[0]] + c for c in rest_comb]\n\n\n# Test the function with example\nlist1 = [1,2,3]\nprint(combinations_list(list1)) #[ [1, 2], [1, 3], [2], [3], []] ",
        "generated_testcode": "assert combinations_list([\"apple\", \"banana\", \"orange\"]) == [[\"apple\", \"banana\", \"orange\"], [\"banana\", \"apple\", \"orange\"], [\"orange\", \"apple\", \"banana\"], [\"apple\", \"orange\", \"banana\"], [\"banana\", \"orange\", \"apple\"], [\"orange\", \"banana\", \"apple\"]]\n\n\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n\n    return result\n\n\n\n# Test the function with an example array\narr = [2, 3, -2, -1, 4, -5, 6, -1, 2, -8, -10]\nprint(max_subarray_product(arr))  # Output: 60\n\n",
        "generated_testcode": "assert max_subarray_product([2, 3, -2, 4, -2, 4, 4, -1, 2]) == 16\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    values = list(dict.values())\n    return len(set(values)) == 1 and values[0] == n\n\n# test the function\ndict1 = {'a': 1, 'b': 1, 'c': 1}\ndict2 = {'a': 1, 'b': 1, 'c': 1, 'd': 1}\ndict3 = {'a': 1, 'b': 1, 'c': 2}\ndict4 = {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nprint(check_value(dict1, 1))  # True\nprint(check_value(dict2, 1))  # True\nprint(check_value(dict3, 1))  # False\nprint(check_value(dict4, 1))  # True\nprint(check_value({}, 1))    # True\nprint(check_value({'a': 1}, 1)) # True\nprint(check_value({'a': 1, 'b': 2}, 1)) # False ",
        "generated_testcode": "assert check_value(dict(a=1, b=1, c=1), 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n\n# Test the function with a dictionary containing empty values\ndict1 = {'a': 1, 'b': None, 'c': [], 'd': 'hello', 'e': 0, 'f': '', 'g': 23, 'h': {}, 'i': None, 'j': 'world'}\nprint(drop_empty(dict1)) ",
        "generated_testcode": "assert drop_empty(dict1) == {'a': 1, 'b': 2, 'c': 3}\n\n\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    mid = low + (high - low) // 2\n    mid = (low + high) // 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] >= arr[mid + 1]): \n        return mid \n    elif mid > 0 and arr[mid - 1] > arr[mid]: \n        return find_peak_util(arr, low, (mid - 1), n) \n    else: \n        return find_peak_util(arr, (mid + 1), high, n) \n\n  \ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n - 1, n) \n  \n# Example usage: \narr = [1, 3, 20, 4, 1, 5, 6, 2] \nn = len(arr) \nprint(\"Index of peak element is\", find_peak(arr, n)) ",
        "generated_testcode": "assert find_peak_util(arr=[1,2,3,4,5,6,7,8,9], low=0, high=5, n=6) == 9\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    octalNum = \"\"\n    while deciNum > 0:\n        rem = deciNum % 8\n        octalNum = str(rem) + octalNum\n        deciNum = deciNum // 8\n    return octalNum\n\n# Test the function with an example\ndeciNum = 25\nprint(decimal_to_Octal(deciNum))  # Output: 31 ",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 2:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n\n# Test the function with an example array\narr = [2, 3, -2, 4, -1, -6, 5, -12]\nn = len(arr)\nprint(\"Maximum product is:\", max_product(arr, n)) ",
        "generated_testcode": "assert max_product([1, 10, -5, 2, 4, -2, 7, 3, -6, 5, 10] ) == 350\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if k >= len(price)//2:\n        return max_profit_infi_transactions(price)\n    profits = []\n    i = 0\n    while i < len(price):\n        j = i+1\n        max_profit = 0\n        while j < len(price):\n            max_profit += max(price[j]-price[i], 0)\n            j += 1\n        profits.append(max_profit)\n        i += 1\n    return max(profits)\n\n\ndef max_profit_infi_transactions(price):\n    profit = 0\n    for i in range(1, len(price)):\n        profit += max(price[i]-price[i-1], 0)\n    return profit\n\n# Testing the code\nprice = [2, 3, 5, 7, 1, 4, 8, 10, 15, 3, 11]\nk = 3\nprint(max_profit(price, k)) # Output: 16\n\n\nprice = [2, 30, 10, 12, 1, 4]\nk = 2\nprint(max_profit(price, k)) # Output: 33\n\nprice = [10, 22, 5, 75, 60, 40, 15]\nk = 2\nprint(max_profit(price,",
        "generated_testcode": "assert max_profit([2, 5, 7, 1, 2, 6, 3, 4, 9, 1, 4], 2) == 10\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "34B",
        "pass": 6,
        "correct": true,
        "answer": "    tup_len = len(test_tup)\n    result = ()\n    for i in range(tup_len - 1):\n        sum = test_tup[i] + test_tup[i + 1]\n        result += (sum, )\n    return result\n\n# Test the function with a sample tuple\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(add_pairwise(test_tup)) ",
        "generated_testcode": "assert add_pairwise(()) == ()\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort() \n    mod = 0\n    for i in range(lens): \n        mod = (mod * 10 + arr[i]) % n \n    return mod ",
        "generated_testcode": "assert find_remainder(arr=[1, 2, 3, 4, 5], lens=4, n=3) == 1\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(l)-1): \n        if l[i+1] - l[i] == 1: \n            continue\n        else: \n            return False\n    return True \n        \nl = [1, 2, 3, 4, 5, 6, 7] \nprint(check_Consecutive(l)) # True \n\nl = [1, 2, 3, 4, 6, 7] \nprint(check_Consecutive(l)) # False \nl = [10, 11, 12, 13, 14] \nprint(check_Consecutive(l)) # True \nl = [1, 2, 3, 4, 6, 7, 8, 9, 10] \nprint(check_Consecutive(l)) # False \nl = [1, 2, 3, 4, 5, 5, 6] \nprint(check_Consecutive(l)) # False ",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Find the intersection of tuples in given list\n    \"\"\"\n    result = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                result.append(i)\n    return tuple(result)\n\n# Test the function with example\ntest_list1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_list2 = [(2, 3, 1), (9, 8, 7), (5, 6, 4)]\nprint(tuple_intersection(test_list1, test_list2)) # Output: ((1, 2, 3), (4, 5, 6), (7, 8, 9)) ",
        "generated_testcode": "assert tuple_intersection((\"abc\", \"bcd\") == (\"b\", \"c\")\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": " result = \"\"\n  for i in range(len(str1):\n    if str1[i] == ch:\n      result += newch\n    else:\n      result += str1[i]\n  return result\n\n# Test the function\nprint(replace_char(\"hello\", \"l\", \"p\")) # hpepo\nprint(replace_char(\"hello world\", \"l\", \"z\")) #hezzo worzd\nprint(replace_char(\"abcdefgh\", \"z\", \"x\")) # abcdefgh\nprint(replace_char(\"1234\", \"1\", \"5\")) # 5234\n\n\n# Function to replace characters in a string using a dictionary\ndef replace_chars(str1, dic):\n  result = \"\"\n  for i in range(len(str1):\n    if str1[i] in dic:\n      result += dic[str1[i]]\n    else:\n      result += str1[i]\n  return result\n\n# Test the function\nprint(replace_chars(\"hello\", {\"l\": \"p\", \"o\": \"r\"}) # heppo\nprint(replace_chars(\"hello world\", {\"l\": \"z\", \"o\": \"d\", \" \": \"g\"}) #hezgwzd\nprint(replace_chars(\"abcdefgh\", {\"z\": \"x\", \"d\": \"f\"}) # abcdefgh\nprint(replace_chars(\"1234\", {\"1\": \"5\", \"2\": \"6\", \"3\": \"7\",",
        "generated_testcode": "assert replace_char(\"hello world\", \"l\", \"p\") == \"heppo wporpd\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n\n\n\n# Test the function with a sample dictionary.\nmy_dict = {'apple': 10, 'banana': 2, 'orange': 5, 'kiwi': 10, 'grape': 7}\nprint(sort_counter(my_dict)) # {'banana': 2, 'orange': 5, 'kiwi': 10, 'apple': 10} ",
        "generated_testcode": "assert sort_counter(Counter({'apple': 10, 'banana': 2, 'orange': 5}) == {'banana': 2, 'orange': 5, 'apple': 10}\n\n\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    return max(nums) + min(nums)\n\n#example usage:\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])) # 15\nprint(big_sum([4, 9, 2, 7, 1, 8, 10, 3])) # 13\nprint(big_sum([2, 2, 2, 2])) # 4 ",
        "generated_testcode": "assert big_sum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == (36, 10)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return string.lower()\n# example usage:\n# print(is_lower(\"HeLLo WOrld\")) # heLLo wOrld\n\n\n# Write a python function to convert the given string to upper case.\ndef is_upper(string):\n    return string.upper()\n# example usage:\n# print(is_upper(\"HeLLo WOrld\")) # HELLO WORLD\n\n\n# Write a python function to check if the given string is in upper case or not.\ndef is_uppercase(string):\n    return string.isupper()\n# example usage:\n# print(is_uppercase(\"HeLLo WOrld\")) # False\n# print(is_uppercase(\"HELLO WORLD\")) # True\n\n\n# Write a python function to check if the given string is in lower case or not.\ndef is_lowercase(string):\n    return string.islower()\n# example usage:\n# print(is_lowercase(\"HeLLo WOrld\")) # False\n# print(is_lowercase(\"hello world\")) # True\n\n\n# Write a python function to reverse the given string.\ndef reverse_string(string):\n    return string[::-1]\n# example usage:\n# print(reverse_string(\"Hello World\")) # dlroW olleH\n\n\n# Write a python function to remove spaces from the given string.\ndef remove_spaces(string):\n    return string.replace(\" \",\"\")\n# example usage:\n# print(remove_spaces(\"Hello World\"))",
        "generated_testcode": "assert is_lower(string) == \"hello world\"\n\n# Test case 1: Testing with a string containing upper and lower case characters\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i.isupper():\n            new_str += i\n    return new_str\n\nstr1 = input(\"Enter a string: \")\nprint(remove_lowercase(str1))\n\n\n#Output\n#Enter a string: Hello World!\n#HW ",
        "generated_testcode": "assert remove_lowercase(None) == None\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0: \n        n = abs(n) \n    while n >= 10: \n        n //= 10\n    return n ",
        "generated_testcode": "assert first_Digit(1234) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    char_freq = {}\n    max_char = ''\n    max_count = 0\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n        if char_freq[char] > max_count:\n            max_count = char_freq[char]\n            max_char = char\n    return max_char\n\n# Test the function with sample inputs\nprint(get_max_occuring_char(\"hello world\"))  # Output: l\nprint(get_max_occuring_char(\"python\"))  # Output: o\nprint(get_max_occuring_char(\"geeksforgeeks\"))  # Output: e ",
        "generated_testcode": "assert get_max_occuring_char(str1) == \"o\"\n\n# Test case 1:\nstr1 = \"hello world\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a 2D table to store results of subproblems\n    dp = [[False for x in range(sum + 1)] for y in range(n + 1)]\n\n\n    # Initialize the top row as True\n    for i in range(n + 1):\n        dp[i][0] = True\n\n\n    # Initialize the leftmost column, except dp[0][0], as 0 is not a subset sum\n    for j in range(1, sum + 1):\n        dp[0][j] = False\n\n\n    # Fill the table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= set[i - 1]:\n                dp[i][j] |= dp[i - 1][j - set[i - 1]]\n\n\n    return dp[n][sum]\n\n\n\n# Test the function\nset = [3, 34, 4, 5, 12, 1, 3]\nsum = 9\nn = len(set)\nif is_subset_sum(set, n, sum):\n    print(\"Found a subset with sum\", sum)\nelse:\n    print(\"No subset with sum\", sum)\n\n\nset = [3, 34, 4, 5, 12,",
        "generated_testcode": "assert is_subset_sum(set(), 5) == False\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[A-Z][a-z]+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match.group()) ",
        "generated_testcode": "assert match(text) == ['Aaa', 'Bbb', 'Ccc']\n\n# Test case 1: Testing for the input 'Aaa Bbb Ccc'\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while(True):\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        if(factorial % x == 0):\n            return i\n        i += 1\n        \n# Example usage:\nx = 10\nprint(first_Factorial_Divisible_Number(x))  # Output: 5 ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res = []\n    for i in test_list1:\n        if i not in test_list2:\n            res.append(i)\n    return res\n\n#test the function with sample test cases\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\ntest_list2 = [(1, 2), (3, 4), (9, 10), (11, 12)]\nprint(remove_matching_tuple(test_list1, test_list2)) # output: [(5, 6), (7, 8)]\n\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\ntest_list2 = [(10, 9), (11, 12), (3, 4)]\nprint(remove_matching_tuple(test_list1, test_list2)) # output: [(1, 2), (5, 6), (7, 8)]\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\ntest_list2 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(remove_matching_tuple(test_list1, test",
        "generated_testcode": "assert remove_matching_tuple((\"abc\", \"def\") == (\"abc\", \"def\")\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1] \n    # Returns True if the given integer n is a palindrome, else False.\n\ndef largest_palindrome(arr) : \n    arr = sorted(arr, reverse=True)\n    for i in arr : \n        if is_palindrome(i) : \n            return i\n    return None ",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return int(fact(n) / (fact(r) * fact(n-r))) \n  \ndef fact(n): \n    res = 1\n    for i in range(2, n+1): \n        res = res * i \n    return res \n    \ndef binomial_probability(n, r, p):\n    q = 1 - p\n    return nCr(n, r) * (p**r) * (q**(n-r)) \n  \n# Driver code to test the function \nn = 10\nr = 2\np = 0.5\nprint(binomial_probability(n, r, p)) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return sorted(tup, key=lambda x: x[-1]) ",
        "generated_testcode": "assert sort_tuple(()) == []\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    area = (5*a**2 - 10 * (10**0.5)) / 4\n    return area\n\n# Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n    perimeter = 5 * a\n    return perimeter\n\n# Write a function to find the volume of a right circular cylinder.\ndef volume_circular_cylinder(r, h):\n    volume = (3.14159265359 * r**2 * h)\n    return volume\n\n# Write a function to find the surface area of a right circular cylinder.\ndef surface_area_circular_cylinder(r, h):\n    surface_area = (2 * 3.14159265359 * r * h) + (2 * 3.14159265359 * r**2)\n    return surface_area\n\n# Write a function to find the volume of a right circular cone.\ndef volume_circular_cone(r, h):\n    volume = (1/3 * 3.14159265359 * r**2 * h)\n    return volume\n\n# Write a function to find the surface area of a right circular cone.\ndef surface_area_circular_cone(r, h):\n    surface_area = (3.14159265359 * r * (r + (3**0.",
        "generated_testcode": "assert area_pentagon(5) == 50.265487666928112089\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    # creating an empty dictionary \n    freq = {} \n    for i in arr: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n  \n    # finding the maximum value \n    max_val = max(arr) \n  \n    # finding the frequency of the maximum value \n    count = 0\n    for i in arr: \n        if i == max_val: \n            count += 1\n  \n    return count \n  \n# testing the function with an example  \narr = [2, 3, 4, 5, 6, 7, 2, 4, 5, 6, 7, 8, 9, 2, 4, 5, 6, 7, 8, 9, 8, 9] \nn = len(arr) \nprint(frequency_Of_Largest(n,arr)) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,6]) == 1\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                result.append((test_list[i],test_list[j]))\n    return result\n\n\n# Test the function with a sample input\ntest_list = (1, 2, 3, 4, 5, 2, 4, 6, 1, 5)\nprint(extract_symmetric(test_list)) # Output: [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)] ",
        "generated_testcode": "assert extract_symmetric(()) == set()\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    i = 0\n    while i<n:\n        sum += a * (r**i)\n        i += 1\n    return sum\n\n#test the function with example values\na = 2\nr = 2\nn = 10\nprint(\"The sum of the GP series is:\", sum_gp(a,n,r))\n\n\n#output: The sum of the GP series is: 1023.0 ",
        "generated_testcode": "assert sum_gp(1,10,2) == 1023\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    first = 0\n    last = len(item_list)-1\n    found = False\n    while( first<=last and not found):\n        mid = (first + last)//2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n    return found\n\n#Test the function with an example array\narr = [2,4,6,8,12,14,20,35,56,78]\nprint(binary_search(arr,20))  # True ",
        "generated_testcode": "assert binary_search(sorted([1,2,3,4,5,6,7,8,9,10], 4) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    hexagon_coords = []\n    points = [\n        (startx, starty - radius),\n        (startx + radius / 2, starty - (3 ** 0.5) / 2 * radius),\n        (endx - radius / 2, starty - (3 ** 0.5) / 2 * radius),\n        (endx, starty),\n        (endx - radius / 2, starty + (3 ** 0.5) / 2 * radius),\n        (startx + radius / 2, starty + (3 ** 0.5) / 2 * radius),\n        (startx, starty + radius)\n    ]\n    for i in range(int(endy / (2 * radius + (3 ** 0.5) * radius)):\n        row = []\n        for point in points:\n            x, y = point\n            row.append((x, y + i * 2 * (2 * radius + (3 ** 0.5) * radius))\n        hexagon_coords.append(row)\n        points = [(x, y + (2 * radius + (3 ** 0.5) * radius)) for x, y in points]\n    return hexagon_coords\n\n# Example usage:\n# calculate_polygons(0, 0, 10, 10, 1)\n# Output: \n# [\n# [(0, -1.0), (5.0, -0.86660254037844), (10.0, -0.0), (5.0, 0.86660254037844), (0, 1.0), (0.0, 2.8666025403784), (5.0, 3.8666025403784), (10.0, 2.8666025403784)], \n# [(2.5, -0.57773502691896), (7.5, -0.28867513548855), (12.5, -0.0), (7.5, 0.286751354885",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [(5, 0), (10, 8), (10, 10), (0, 10), (-5, 8), (-5, 0), (0, 0)]\n\n# The function should return a list of 6 tuples representing the coordinates of the hexagon with the given start and end points and radius. \n# The first point should be the top center of the hexagon (startx, starty), the second point should be the top right corner, the third point should be the bottom right corner, \n# the fourth point should be the bottom left corner, the fifth point should be the top left corner, the sixth point should be the bottom left corner, and the last point should be the top left corner. \n# The coordinates should be rounded to the nearest integer. ",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    test_list = list(test_tup)\n    test_list.reverse()\n    str_bin = \"\".join(map(str, test_list))\n    return int(str_bin, 2)\n\n\n# Test the function with a sample binary tuple\ntest_tup = (0, 1, 0, 1, 0, 1, 1)\nprint(binary_to_integer(test_tup)) # Output: 11",
        "generated_testcode": "assert binary_to_integer(()) == ",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n\n# Example usage:\n# remove_lowercase(\"A lowercase sentence with no uppercase letters\") \u279e \" sentence with \"\n# remove_lowercase(\"A sentence with 1 number\") \u279e \"A sentence with  number\"\n# remove_lowercase(\"A Sentence With Mixedcase\") \u279e \"A Sentence With Mixedcase\"\n\n# Example solution:\r\ndef remove_lowercase(str1):\r\n    import re\r\n    return re.sub(r'\\b[a-z]+\\b', '', str1) ",
        "generated_testcode": "assert remove_lowercase(input_string) == expected_output_string\n\n# Test case 1\ninput_string = \"Hello World\"\nexpected_output_string = \"Hello World\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    import heapq\n    heap = []\n    for num in nums:\n        heapq.heappush(heap,num)\n    return [heapq.heappop(heap) for i in range(n)]\n\n#testing\nprint(heap_queue_smallest([3,5,1,2,6,7,4,8,9],3)) #[1, 2, 3] ",
        "generated_testcode": "assert heap_queue_smallest(nums=[4, 2, 1, 7, 5, 3, 6, 8, 9, 10, 4], n=3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159\n    s = (pi*r*h) + (pi*r*r)\n    return s\n\n#Test the function with a radius of 5 and height of 10\nprint(surfacearea_cone(5,10)\n\n\n#Test the function with a radius of 3 and height of 20\nprint(surfacearea_cone(3,20)\n\n\n#Test the function with a radius of 8 and height of 7\nprint(surfacearea_cone(8,7) ",
        "generated_testcode": "assert surfacearea_cone(4, 7) == 157.07\n# This should return 157.07. ",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    while y != 0:\n        x, y = y, x % y\n    return x\n\n# Test the function with examples\nprint(gcd(12, 8))  # Output: 4\nprint(gcd(16, 24)) # Output: 8\nprint(gcd(17, 23)) # Output: 1\nprint(gcd(6, 9))  # Output: 3 ",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return r * 2\n\n# Test the function with a radius of 3\ndiam = diameter_circle(3)\nprint(diam)\n\n# Output: 6\n\n\n# Calculate the circumference of a circle\nimport math\ndef circumference_circle(r):\n    return 2 * math.pi * r\n\n# Test the function with a radius of 3\ncirc = circumference_circle(3)\nprint(circ)\n\n# Output: 18.849555592153821434\n\n\n# Calculate the area of a circle\ndef area_circle(r):\n    return math.pi * r ** 2\n\n# Test the function with a radius of 3\narea = area_circle(3)\nprint(area)\n\n# Output: 28.27433333888230813833 ",
        "generated_testcode": "assert diameter_circle(5) == 10\n\n# Write a function to find the circumference of a circle.\ndef circumference_circle(r):\n    pass\n\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    string = \"\"\n    for element in list:\n        string += str(element)\n    return string\n\n# Test the function with an example list\nmy_list = [1, \"hello\", True, 3.14, \"world\"]\nprint(concatenate_elements(my_list)) # Output: \"1hello3.14world\" ",
        "generated_testcode": "assert concatenate_elements([\"apple\", \"banana\", \"cherry\", \"date\"]) == \"applebananacherrydate\"\n\n\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    i=1\n    gcd=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i==0):\n            gcd=i\n        i+=1\n    return gcd\nprint(ngcd(12,16)) # example",
        "generated_testcode": "assert ngcd(12,8) == 4\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if m == 0:\n        return n\n    else:\n        return find(m, n % m)\n\nn = 12\nm = 4\nprint(f\"The remainder of {n} and {m} is {find(n,m)}\")\n\n\n# Output: The remainder of 12 and 4 is 0\n\n\n# Example 2\nn = 1234\nm = 7\nprint(f\"The remainder of {n} and {m} is {find(n,m)}\")\n\n# Output: The remainder of 1234 and 7 is 3 ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i]+nums[i+1])\n    return result\n\n# test the function\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8])) # [3, 5, 7, 9, 11, 13]\nprint(add_consecutive_nums([5, 2, 6, 9, 1, 8])) # [7, 15, 15, 17]\n\n\n# Using List comprehension\ndef add_consecutive_nums(nums):\n    return [nums[i]+nums[i+1] for i in range(len(nums)-1)]\n\n# test the function\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8])) # [3, 5, 7, 9, 11, 13]\nprint(add_consecutive_nums([5, 2, 6, 9, 1, 8])) # [7, 15, 15, 17] ",
        "generated_testcode": "assert add_consecutive_nums(list(range(1, 5)) == 10\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = (n * (n + 1) / 2) ** 2\n    return int(sum)\n  \n# Driver Code \nn = 5\nprint(\"The sum of first\", n, \"cubes of natural numbers is:\", sum_Of_Series(n)**3) ",
        "generated_testcode": "assert sum_Of_Series(3) == 36\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    zero_count = 0\n    for i in range(len(A)):\n        if A[i] == 0:\n            zero_count += 1\n    j = 0\n    for i in range(len(A)):\n        if A[i] != 0:\n            A[i-j], A[i] = A[i], A[i-j]\n            j += 1\n    for i in range(len(A)-zero_count, len(A)):\n        A[i] = 0\n    return A\n\nA = [0, 1, 9, 0, 0, 2, 8, 0, 4, 0, 6, 5, 0]\nprint(re_order(A)) # [1, 9, 2, 8, 4, 6, 5, 0, 0, 0, 0, 0, 0] ",
        "generated_testcode": "assert re_order(A=[1, 0, 2, 0, 3, 4, 0, 5] == [1, 2, 3, 4, 5, 0, 0])\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    fact = [1]*(n+1) \n    for i in range(1,n+1): \n        fact[i] = fact[i-1] * i \n    return fact[n]//fact[n-k] ",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 20\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return [word for word in list1 if word not in removewords]\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\"]\nremovewords = [\"apple\", \"banana\"]\nprint(remove_words(list1, removewords))  # Output: [\"cherry\", \"orange\", \"kiwi\"]\n\n\n# Solution:\ndef remove_words(list1, removewords):\n    return [word for word in list1 if word not in removewords]\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"kiwi\"]\nremovewords = [\"apple\", \"banana\"]\nprint(remove_words(list1, removewords)) # Output: [\"cherry\", \"orange\", \"kiwi\"] ",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"watermelon\"], [\"banana\", \"kiwi\"]) == [\"apple\", \"orange\", \"watermelon\"]\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(l1) != len(l2):\n        return False\n\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n\n    return True\n\n# Test the function with some examples\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4])) # True\nprint(same_order([1, 2, 3, 4], [4, 3, 2, 1])) # False\nprint(same_order([1, 2, 3, 4], [1, 3, 2])) # False\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 5])) # False\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 4, 4])) # False ",
        "generated_testcode": "assert same_order([\"apple\", \"banana\", \"cherry\", \"date\"], [\"apple\", \"banana\", \"cherry\", \"date\"]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    count = 0\n    num = 1\n    while(num <= n):\n        sum += num\n        count += 1\n        num += 2\n    return sum/count\n\n#testing the function\nprint(average_Odd(11))\nprint(average_Odd(21))\nprint(average_Odd(33))\nprint(average_Odd(49)) ",
        "generated_testcode": "assert average_Odd(3) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr)\n    mod = 10**9 + 7\n    ans = 0\n    dp = [0] * (k+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k, 0, -1, -1):\n            if j - arr[i] >= 0:\n                dp[j] += dp[j - arr[i]]\n            dp[j] %= mod\n    for i in range(1, k+1):\n        ans += dp[i]\n        ans %= mod\n    return ans\n\n# Test\narr = [1, 2, 3]\nk = 6\nprint(no_of_subsequences(arr, k)) # Output: 8 ",
        "generated_testcode": "assert no_of_subsequences(arr=[1, 2, 3, 4, 5], k=10) == 7\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    while i <= num: \n        if num % i == 0: \n            sum += i\n        i += 1\n    return sum\n  \n# Driver Code \nnum = int(input(\"Enter the number: \"))\nprint(\"Minimum sum of factors is:\", find_Min_Sum(num)) ",
        "generated_testcode": "assert find_Min_Sum(12) == 7 # Testing for a number with 6 factors and minimum sum as 7\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    flat_list = [] \n    for i in test_tuple: \n        if isinstance(i, tuple): \n            flat_list.extend(flatten(i)) \n        else: \n            flat_list.append(i) \n    return flat_list \n  \ndef count_frequency(test_tuple): \n    flat_list = flatten(test_tuple) \n    freq_dict = {} \n    for element in flat_list: \n        freq_dict[element] = freq_dict.get(element, 0) + 1\n    return freq_dict ",
        "generated_testcode": "assert flatten(()) == {}\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result_list = []\n    for i in test_tup:\n        result_list.append(str(i)+K)\n    return result_list\n\n# Test the function\nprint(add_str((1,2,3,4,5,6,7),\"Hi\")) # Output: ['1Hi', '2Hi', '3Hi', '4Hi', '5Hi', '6Hi', '7Hi'] ",
        "generated_testcode": "assert add_str((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"), \"fruit\") == [\"apple fruit\", \"banana fruit\", \"cherry fruit\", \"date fruit\", \"elderberry fruit\", \"fig fruit\"]\n\n\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            sum += sum_elements(element)\n        else:\n            sum += element\n    return sum\n\n# Test the function\ntest_list = (1, 2, (3, 4, 5), 6, (7, (8, 9, (10, 11), 12), 13) )\nprint(\"The summation of elements in the tuple is:\", sum_elements(test_list)) ",
        "generated_testcode": "assert sum_elements(()) == 0\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return True\n    elif m == 0: \n        return False\n    elif m == 1: \n        return True\n    elif m < 0: \n        return False\n    for i in range(n): \n        if (m - arr[i] >= 0): \n            if (modular_sum(arr, n-1, m - arr[i]) or modular_sum(arr, n-1, m)): \n                return True\n    return False\n\n# Testing the function with example\narr = [2, 4, 3, 6, 8, 9] \nm = 10\nn = len(arr) \nif modular_sum(arr, n, m): \n    print(\"There exists a subset with sum divisible by\", m) \nelse: \n    print(\"No subset with sum divisible by\", m) ",
        "generated_testcode": "assert modular_sum(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=6, m=5) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not nums:\n        return []\n    max_num = max(nums)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    return nums\n\ndef counting_sort(nums, exp):\n    n = len(nums)\n    count = [0] * 10\n    output = [0] * n\n    for num in nums:\n        index = num // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    for num in reversed(nums):\n        index = num // exp\n        output[count[index % 10] - 1] = num\n        count[index % 10] -= 1\n    for i in range(n):\n        nums[i] = output[i]\n\n# Example usage:\nnums = [170, 45, 75, 90, 802, 24, 2, 666, 12, 8, 80]\nprint(radix_sort(nums)) # Output: [2, 12, 24, 45, 666, 8, 75, 80, 170, 802] ",
        "generated_testcode": "assert radix_sort(nums=[4, 1, 2, 8, 5, 3, 7]) == [1, 2, 3, 4, 5, 7, 8]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_num = 0 \n    for num in list1: \n        if num > 0:\n            if num > max_num: \n                max_num = num \n    return max_num \n    \nlist1 = [5, -1, 2, -3, 10, -8, 0, 7] \nprint(\"Original list:\", list1) \nprint(\"Largest positive number in the list:\", largest_pos(list1) )\n\n\n#Output: \n#Original list: [5, -1, 2, -3, 10, -8, 0, 7] \n#Largest positive number in the list: 10 ",
        "generated_testcode": "assert largest_pos(list1) == 10\n\n# Write a python function to find the sum of all the elements in the given list.\ndef sum_list(list1): \n    pass\n\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return num**0.5\n\n#Test the function with an example\nprint(sqrt_root(16))\n\n#Output: 4.0\n\n\n#Implement the function to find the square root of a number using binary search.\ndef binary_sqrt(num):\n    epsilon = 0.01\n    low = 0\n    high = num\n    mid = (low + high) / 2\n    while abs(mid**2 - num) > epsilon:\n        if mid**2 < num:\n            low = mid\n        else:\n            high = mid\n        mid = (low + high) / 2\n    return mid\n\n#Test the function with the same example\nprint(binary_sqrt(16))\n#Output: 4.00000934578432821875\n\n#The output is not accurate because binary search finds an approximation of the square root. ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    area_base = 12\n    height = 5\n    volume = (1/3) * area_base * height\n    return volume\n\n# Test the function with a sample input\nprint(volume_tetrahedron(5)\n\n# Output: 20.0\n\n\n# Use the function to calculate the volume of a tetrahedron with base area 15 and height 7\nprint(volume_tetrahedron(15 * 7)\n# Output: 100.0\n\n\n# Use the function to calculate the volume of a tetrahedron with base area 8 and height 12\nprint(volume_tetrahedron(8 * 12)\n# Output: 24.0 ",
        "generated_testcode": "assert volume_tetrahedron(2, 4, 6) == 12\n\n# Write 2 lines of testing code for the function.\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 > num2: \n        greater = num1 \n    else: \n        greater = num2 \n    while True: \n        if (greater % num1 == 0) and (greater % num2 == 0): \n            lcm = greater \n            break \n        greater += 1\n    return lcm \n\ndef find_lcm_arr(arr): \n    lcm = arr[0] \n    for i in range(1, len(arr)): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n\narr = [12, 24, 16] \nprint(\"LCM of\", arr, \"is\", find_lcm_arr(arr)) ",
        "generated_testcode": "assert find_lcm(12, 15) == 60\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if x==y or y==z or x==z:\n        return False\n    else:\n        return True\n\ndef check_equilateral(x,y,z):\n    if x==y and x==z and y==z:\n        return True\n    else:\n        return False\n\ndef check_right_angled(x,y,z):\n    a,b,c = sorted([x,y,z])\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\ndef check_triangle(x,y,z):\n    if x+y>z and x+z>y and y+z>x:\n        return True\n    else:\n        return False\n\ndef triangle_type(x,y,z):\n    if check_isosceles(x,y,z) and check_right_angled(x,y,z) and check_triangle(x,y,z):\n        return \"Scalene right-angled triangle\"\n    elif check_equilateral(x,y,z) and check_triangle(x,y,z):\n        return \"Equilateral triangle\"\n    elif check_isosceles(x,y,z) and check_triangle(x,y,z):\n        return \"Isosceles triangle\"\n    elif check_triangle(x,y,z",
        "generated_testcode": "assert check_isosceles(3, 4, 5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr) \n    i = 0\n    j = n - 1\n    max_len = 1\n    # initialize two lists, one for the increasing sequence and one for the decreasing sequence\n    inc = [1]*n \n    dec = [1]*n \n    # loop through the array and check if each element is greater than the previous one\n    # if it is, then we increment the increasing counter\n    while i < n-1: \n        if arr[i] < arr[i+1]: \n            inc[i+1] = inc[i]+1\n        i += 1\n    # loop through the array in reverse and check if each element is greater than the next one\n    # if it is, then we increment the decreasing counter\n    while j > 0: \n        if arr[j] > arr[j-1]: \n            dec[j-1] = dec[j]+1\n        j -= 1\n    # loop through the inc and dec lists and find the maximum sum of the two counters\n    # since the longest bitonic subsequence should include the max increasing and max decreasing subsequence\n    i = 0\n    while i < n: \n        max_len = max(max_len, inc[i]+dec[i]-1)\n        i += 1\n    return max_len ",
        "generated_testcode": "assert lbs(arr=[1, 11, 2, 10, 4, 5, 2, 1, 10]) == [1, 2, 10, 4, 2, 1]\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    check = lambda s: any(c.isupper() for c in s) and any(c.islower() for c in s) and any(c.isdigit() for c in s) and len(s) == 10\n    return check(str1)\n\nprint(check_string(\"Aa123456789012\")) # True\nprint(check_string(\"Aaa12345678901\")) # False\nprint(check_string(\"Aa1234567890\")) # False\nprint(check_string(\"aa123456789012\")) # False\nprint(check_string(\"1234567890123\")) # False\nprint(check_string(\"Aa1234567890\")) # False\n\n\n# Alternate solution:\nimport re\ndef check_string(str1):\n    return bool(re.search('[A-Z]', str1) and re.search('[a-z]', str1) and re.search('\\d', str1) and len(str1) == 10) ",
        "generated_testcode": "assert check_string(lambda x: True if any(char.isupper() for char in x) and any(char.islower() for char in x) and any(char.isdigit() for char in x) and len(x) == 10 else False)(\"Abc1234567890\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n): \n        max_so_far = 0\n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]: \n                dp[i] = dp[j] + arr[i]\n        if dp[i] == 0: \n            dp[i] = arr[i]\n    return max(dp)\n  \narr = [10, 22, 1, 11, 3, 25, 36, 8, 22, 50] \nn = len(arr) \nprint(\"Maximum sum of increasing subsequence is\", max_sum_increasing_subsequence(arr, n)) ",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[1, 101, 2, 3, 100, 4, 5, 6, 10, 7, 8, 1000, 9]) == 174\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if line1.slope == line2.slope:\n        return True\n    else:\n        return False\n\n# Definition of Line class\nclass Line:\n    def __init__(self, coeffs, constant):\n        self.coefficients = coeffs\n        self.constant = constant\n    @property\n    def slope(self):\n        return self.coefficients[0]/self.coefficients[1]\n    @property\n    def intercept(self):\n        return self.constant/self.coefficients[1]\n\n# Example usage:\nl1 = Line([1,2], 3) # y = 1/2x + 3\nl2 = Line([2,3], 6) # y = 2/3x + 2\nl3 = Line([3,4], 9) # y = 2x + 3\nl4 = Line([4,5], 12) # y = 1/2x + 3\n\nprint(parallel_lines(l1, l2)) # True\nprint(parallel_lines(l1, l3)) # False\nprint(parallel_lines(l1, l4)) # True ",
        "generated_testcode": "assert parallel_lines((\"2x + 3y = 8\", \"2x + 3y = 10\") == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    words = str1.split()\n    new_words = []\n    for word in words:\n        if len(word) > 1:\n            new_word = word[0].upper() + word[1:-1] + word[-1].upper()\n        else:\n            new_word = word.upper()\n        new_words.append(new_word)\n    return \" \".join(new_words)\n\n\n# Test the function with an example string\nexample_string = \"hello world python world is awesome\"\nprint(capitalize_first_last_letters(example_string)) ",
        "generated_testcode": "assert capitalize_first_last_letters(str1) == \"CapiTalize First LaSt LetTers Of A GiveN String\"\n\n# Test case 1: Testing with a normal string\nstr1 = \"capitalize first last letters of a given string\"\nprint(capitalize_first_letters(str1) == \"CapiTalize First LaSt LetTers Of A GiveN String\") # True\n\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pairs = []\n    num_dict = {}\n    for i in range(n):\n        if sum - arr[i] in num_dict:\n            pairs.append((arr[i], sum - arr[i]))\n        else:\n            num_dict[arr[i]] = i\n    return pairs\n\n# Test\narr = [1, 3, 2, 4, 5, 6, 5, 8, 9]\nn = len(arr)\nsum = 10\nprint(get_pairs_count(arr, n, sum)) # Output: [(1, 9), (2, 8), (3, 7), (4, 6), (5, 5)] ",
        "generated_testcode": "assert get_pairs_count(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=9) == 3 # There are 3 pairs (2, 7), (4, 5) and (3, 6) whose sum is 9.\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize a variable to store the minimum length\n    min_len = float('inf')\n    # Traverse through the list of lists\n    for sublist in list1:\n        # Update the minimum length if the current sublist's length is less than the current minimum length\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    # Create an empty list to store the sublists with minimum length\n    min_len_lists = []\n    # Traverse through the list of lists\n    for sublist in list1:\n        # If the length of the sublist is equal to the minimum length, append it to the min_len_lists\n        if len(sublist) == min_len:\n            min_len_lists.append(sublist)\n    return min_len_lists\n\n\n# Test the function with an example\nlist1 = [[1, 2, 3], [4, 5, 6, 7], [8], [9, 10], [11, 12, 13, 14, 15]]\nprint(min_length(list1)) # Output: [[8]] ",
        "generated_testcode": "assert min_length([[1, 2, 3], [4, 5, 6, 7], [8, 9], [10, 11, 12, 13, 14]] ) == [8, 9]\n\n\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0 \n    elif n == 1: \n        return 2\n    else: \n        a, b = 0, 2\n        for i in range(2, n+1): \n            c = a + b \n            a, b = b, c \n        return c ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 0\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count / len(nums)\n\n# Test cases\nprint(negative_count([-4, 3, 2, -1, 0, 4, -3]))  # Should print 0.4\nprint(negative_count([1, 2, 3, 1, 0, -1, -3]))  # Should print 0.2\nprint(negative_count([-6, -2, 1, 0, 4, -3]))  # Should print 0.5\nprint(negative_count([0, 0, 0, 0, 0, 0]))    # Should print 0.0\nprint(negative_count([-2, -5, 10, 0, -3, 4])) # Should print 0.25\n\n\n# Example usage:\n# negative_count([-4, 3, 2, -1, 0, 4, -3]) ",
        "generated_testcode": "assert negative_count(nums=[1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 0.4\n\n\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dp = [float('inf')] * (V+1) \n    dp[0] = 0\n    for i in range(1, V+1): \n        dp[i] = 1000000000000\n        for j in range(m): \n            if coins[j] <= i: \n                sub_res = dp[i-coins[j]] \n                if sub_res != float('inf') and sub_res + 1 < dp[i]: \n                    dp[i] = sub_res + 1\n    return dp[V] if dp[V] != float('inf') else -1\n    \ncoins = [1, 2, 5, 3, 6]\nm = len(coins) \nV = 11\nprint(min_coins(coins, m, V)) # Output: 2 (We need minimum of two coins to make V=11, i.e. 6 + 5) ",
        "generated_testcode": "assert min_coins(coins=[1, 2, 5], m=3, V=11) == 3\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str2:\n        if char not in char_count:\n            return False\n        char_count[char] -= 1\n        if char_count[char] == 0:\n            del char_count[char]\n    return len(char_count) == 0\n\n\n\n# Test cases\nprint(check_permutation(\"listen\", \"silent\"))  # True\nprint(check_permutation(\"hello\", \"world\"))  # False\nprint(check_permutation(\"llohe\", \"world\"))  # False\nprint(check_permutation(\"llohe\", \"lleow\"))  # True\nprint(check_permutation(\"python\", \"onpyth\"))  # True\nprint(check_permutation(\"python\", \"onpyths\"))  # False\nprint(check_permutation(\"python\", \"oops\"))  # False\nprint(check_permutation(\"\", \"\"))  # True\nprint(check_permutation(\"abcdefg\", \"gfedcba\"))  # True\nprint(check_permutation(\"abcdefg\", \"gfedcbaa\"))  # False\nprint(check_permutation(\"abcdefg\", \"gfedcb\"))  # False\nprint(check_per",
        "generated_testcode": "assert check_permutation(None, None) == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        if type(i) != data_type:\n            result.append(i)\n    return tuple(result)\n\n\n# Example usage:\ntest_tuple = (1, \"hello\", True, 3.5, \"world\", False, 4)\ndata_type = int\nprint(remove_datatype(test_tuple, data_type)) # Output: (\"hello\", True, 3.5, \"world\", False) ",
        "generated_testcode": "assert remove_datatype((\"abc\", int) == (\"abc\")\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern_len = len(pattern)\n    text_len = len(text)\n    for i in range(text_len - pattern_len + 1):\n        if text[i:i+pattern_len] == pattern:\n            return i\n    return -1\n\n# Test the function with example\ntext = \"Hello, how are you? I hope everything is going well.\"\npattern = \"hope\"\nresult = search_literal(pattern,text)\nprint(result)  # Output: 22\n\n\n# Time Complexity: O(n*m) where n is the length of text and m is the length of pattern\n# Space Complexity: O(1) since we are not using any extra space",
        "generated_testcode": "assert search_literal(pattern=\"abc\", text=\"abcdabc\") == (True, 0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 22/7\n    return 2*pi*r**2\n\n#Test the function with a radius of 5\nprint(topbottom_surfacearea(5))\n\n#Test the function with a radius of 10\nprint(topbottom_surfacearea(10))\n\n\n#Write a function to find the lateral surface area of a cylinder\ndef lateral_surfacearea(h,r):\n    pi = 22/7\n    return 2*pi*r*h\n\n#Test the function with a height of 10 and radius of 5\nprint(lateral_surfacearea(10,5))\n\n#Test the function with a height of 20 and radius of 10\nprint(lateral_surfacearea(20,10))\n\n#Write a function to find the volume of a cylinder\ndef volume(r,h):\n    pi = 22/7\n    return pi*r**2*h\n\n#Test the function with a height of 10 and radius of 5\nprint(volume(5,10))\n\n#Test the function with a height of 20 and radius of 10\nprint(volume(10,20)\n\n#Write a function to find the total surface area of a cylinder\ndef total_surfacearea(r,h):\n    pi = 22/7\n    return (2*pi*r**2) + 2*pi*r*h\n\n#",
        "generated_testcode": "assert topbottom_surfacearea(5) == 78.53981633397444833, \"The top surface area of a cylinder with radius 5 should be 78.53981633397444833\"\n\n# Test the function with a radius of 10\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"Return a list of every nth item of a list starting at the first item. If n is negative, return every -nth item instead.\"\"\"\n    if n == 0:\n        raise ValueError(\"n cannot be zero\")\n    if n > 0:\n        return list[n-1::n]\n    else:\n        return list[::n]\n\n# example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(nth_items(my_list, 3))  # Output: [1, 4, 7]\nprint(nth_items(my_list, -2)) # Output: [2, 4, 6, 8] ",
        "generated_testcode": "assert nth_items([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\"], 2) == [\"banana\", \"cherry\"]\n\n\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    words = str1.split()\n    word_set = set()\n    for word in words:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    return None ",
        "generated_testcode": "assert first_repeated_word(\n    \"This is a test string to check for repeated words in Python\") == \"is\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    tpl = tuple(str1)\n    return tpl\n\n#Test the function with a sample input\nprint(string_list_to_tuple(\"Hello\")) # Expected Output: ('H', 'e', 'l', 'l', 'o')\nprint(string_list_to_tuple(\"Python\")) # Expected Output: ('P', 'y', 't', 'h', 'o', 'n')\nprint(string_list_to_tuple(\"12345\")) # Expected Output: ('1', '2', '3', '4', '5') ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    #using map function to calculate the power of each element in the bases_num list and index list\n    result = list(map(lambda x,y: x**y,bases_num,index))\n    return result\n\n#example\nbases_num = [2,3,4,5]\nindex = [3,4,5]\nprint(basesnum_coresspondingnum(bases_num,index)) #output:[8, 81, 1024] ",
        "generated_testcode": "assert basesnum_coresspondingnum(bases_num=[2,3,4],index=[3,4,5]) == [8,81,1024] ",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a dictionary to store frequencies of each element in the array \n    freq = {}\n    # Traverse through the array elements and count frequencies of each element using dictionary \n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    # Find the maximum and minimum frequencies\n    max_freq = 0\n    min_freq = n\n    for i in freq: \n        if freq[i] > max_freq: \n            max_freq = freq[i]\n        if freq[i] < min_freq: \n            min_freq = freq[i]\n    return max_freq - min_freq ",
        "generated_testcode": "assert find_Diff(arr=[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],n=9) == 0\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef is_abundant(n):\n    if n < 12:\n        return False\n    else:\n        sum = get_sum(n)\n        if sum > n:\n            return True\n        else:\n            return False\n\n# Test the function with some examples\nprint(is_abundant(12)) # False\nprint(is_abundant(18)) # True\nprint(is_abundant(24)) # False\nprint(is_abundant(30)) # True ",
        "generated_testcode": "assert get_sum(12) == 3\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'[.,\\s]+', ':', text)\n\n# Example usage:\ntext = \"My name is John, I am from New York. I work in a company.\"\nprint(fill_spaces(text))  # Output: \"My:name:is:John:I:am:from:New:York:I:work:in:a:company.\" ",
        "generated_testcode": "assert fill_spaces(text=\"Hello, world\") == \"Hello:world\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = num1 + num2\n    count = len(str(sum))\n    return count\n\n# Test the function\nnum1 = 100\nnum2 = 250\nprint(\"Sum of\", num1, \"and\", num2, \"is:\", count_digits(num1, num2)) ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    for item in test_list:\n        if isinstance(item, tuple):\n            result += flatten_tuple(item)\n        else:\n            result += str(item)\n    return result\n\n# Test the function with sample data\nsample_list = (1, 2, (3, 4, 5, (6, 7), 8) )\nprint(flatten_tuple(sample_list)) ",
        "generated_testcode": "assert flatten_tuple(()) == \"\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return ((n & 1) ^ ((n & 2) << 1) ^ ((n & 4) >> 1))\n  \n#test the function with some examples \nprint(bin(take_L_and_F_set_bits(10))  # Output: 10 (01010) => 11 (11110)\nprint(bin(take_L_and_F_set_bits(11))  # Output: 11 (01011) => 10 (01100) ",
        "generated_testcode": "assert take_L_and_F_set_bits(0b10101010101) == 0b1111100000\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # convert the string to lowercase for case insensitive search\n    string = string.lower()\n    # convert the char to lowercase\n    char = char.lower()\n    # initialize a variable to store the last index of the character\n    last_index = -1\n    # iterate over the string\n    for i in range(len(string)):\n        # if the character matches, update the last index\n        if string[i] == char:\n            last_index = i\n    # return the last index\n    return last_index\n\n# test the function\nprint(last_occurence_char(\"hello world\", \"l\")) # Output: 9\nprint(last_occurence_char(\"hello world\", \"z\")) # Output: -1 ",
        "generated_testcode": "assert last_occurence_char(string,char) == expected_output\n\n# Example:\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    hamming_distance = 0\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            hamming_distance += Hamming_Distance(i,j)\n    return hamming_distance\n\ndef Hamming_Distance(a,b):\n    a_bin = bin(a)[2:]\n    b_bin = bin(b)[2:]\n    max_len = max(len(a_bin),len(b_bin))\n    a_bin = a_bin.zfill(max_len)\n    b_bin = b_bin.zfill(max_len)\n    distance = 0\n    for i in range(max_len):\n        if a_bin[i] != b_bin[i]:\n            distance += 1\n    return distance\n\nprint(Total_Hamming_Distance(5))\nprint(Total_Hamming_Distance(10)) ",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 26\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr) \n    lis = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j]+1) \n    return max(lis) \n\narr = [10, 222, 9, 33, 1, 3, 5, 56, 65, 67, 6, 41, 55, 12] \nprint(\"Length of Longest Increasing Subsequence is \", longest_increasing_subsequence(arr))\n\n\n#Time Complexity: O(n*n) \n#Test case 1: arr = [3, 10, 22, 21, 11, 13, 3, 40, 3, 80, 23, 70, 22, 50, 60, 100] => Output: 5\n#Test case 2: arr = [3, 3, 3, 3, 3, 3] => Output: 1\n#Test case 3: arr = [10, 22, 9, 3, 1, 2, 56, 65, 67, 6, 41, 55, 12] => Output: 4 \n",
        "generated_testcode": "assert longest_increasing_subsequence(arr=[1, 10, 2, 3, 1, 4, 9, 11, 12, 5, 6, 7, 13, 8, 19, 20]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes an integer n as input and returns the sum of first n odd natural numbers raised to the power of 5.\n    \"\"\"\n    #initialize sum and the count to zero\n    sum = count = 0\n    i = 1\n    #loop through n odd numbers and add their fifth power to sum\n    while count < n :\n        sum += i ** 5\n        i += 2\n        count += 1\n    return sum\n\n#test the function\nprint(odd_Num_Sum(5)) #125\nprint(odd_Num_Sum(10)) #225267520\nprint(odd_Num_Sum(15)) #1718124150000\nprint(odd_Num_Sum(3)) #41\nprint(odd_Num_Sum(1)) #1",
        "generated_testcode": "assert odd_Num_Sum(3) == 341 # Testing for n = 3\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if high < low: \n        return -1\n    if high == low: \n        return low \n    if high == low + 1: \n        if arr[low] > arr[high]: \n            return low \n        else: \n            return high \n    mid = int((low + high) / 2) \n    if mid < high and arr[mid] < arr[mid + 1]: \n        return mid \n    if mid > low and arr[mid] < arr[mid - 1]: \n        return mid - 1 \n    if arr[low] >= arr[mid]: \n        return find_Max(arr, mid + 1, high) \n    return find_Max(arr, low, mid - 1) ",
        "generated_testcode": "assert find_Max(arr,low,high) == 10\n# Testcase 1: arr = [10,20,30,40,50,1,2,3,4], low = 0, high = 6\n# Output: 50\n\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # return the nth column of the list1\n    column = []\n    for row in list1:\n        column.append(row[n])\n    return column\n\n# Test the function with some sample data\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(my_list, 1)) # Output: [2, 5, 8]\n\nprint(extract_column(my_list, 2)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_column(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9],\n        [10, 11, 12, 13],\n        [14, 15, 16, 17]\n    ], 2) == [3, 8, 11, 15]\n\n\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    diff = seq_nums[1] - seq_nums[0]\n    for i in range(len(seq_nums) - 1):\n        if seq_nums[i + 1] - seq_nums[i] != diff:\n            return False\n    return True\n\n# Test the function with some examples\nprint(Seq_Linear([1, 3, 5, 7, 9, 11, 13])) # True\nprint(Seq_Linear([2, 6, 10, 14, 18])) # True\nprint(Seq_Linear([1, 3, 5, 7, 9, 12])) # False ",
        "generated_testcode": "assert Seq_Linear(1,2,3,4,5,6,7,8) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Converts a tuple to a floating-point number.\n    :param test_tup: A tuple with two integers, where the first number is the whole number and the second number is the decimal.\n    :return: A floating-point number.\n    \"\"\"\n    whole_num, decimal = test_tup\n    decimal_places = len(str(decimal))\n    num = float(whole_num) + float(decimal)/(10**decimal_places)\n    return num\n\n# Test the function with the following code:\nprint(tuple_to_float((12, 5)) == 12.5) # True\nprint(tuple_to_float((-6, 2)) == -6.2) # True\nprint(tuple_to_float((3, 0)) == 3) # True\nprint(tuple_to_float((0, 12345)) == 0.12345) # True ",
        "generated_testcode": "assert tuple_to_float((\"123.45\") == 123.45\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    odd_list = [] \n    for num in list: \n        if num % 2 != 0: \n            odd_list.append(num) \n    return odd_list \n\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20] \nprint(Split(mixed_list) ) # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19] ",
        "generated_testcode": "assert Split([\"apple\", 2, 3, \"banana\", 4, 5, \"cherry\", 7, 8, \"dog\", 10]) == [3, 5, 7]\n\n\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    for i in range(1, n+1) :  \n        sum_of_cubes += i ** 3 \n        sum_of_numbers += i \n        \n    return sum_of_numbers ** 2 - sum_of_cubes ",
        "generated_testcode": "assert difference(5) == 2202\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count=0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i]^A[j])%2!=0: \n                count+=1\n    return count\n# Taking input the number of test cases\nt = int(input())\nfor i in range(t):\n    # Taking input the size of the array and the array elements\n    n = int(input())\n    arr = list(map(int, input().strip().split())\n    print(find_Odd_Pair(arr,n)) ",
        "generated_testcode": "assert find_Odd_Pair(A=[1, 2, 3, 4, 5, 6, 7, 8, 9], N=6) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for i in string:\n        if i.islower():\n            result += i.upper()\n        else:\n            result += i.lower()\n    return result\n\n# Test the function with some examples\nprint(toggle_string(\"Hello World\"))\nprint(toggle_string(\"hEllO wOrld\"))\nprint(toggle_string(\"HeLLo WORLD\")) ",
        "generated_testcode": "assert toggle_string(string=\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n1_str = str(n1)\n    n2_str = str(n2)\n    total_distance = 0\n    for i in range(len(n1_str)):\n        for j in range(len(n2_str)):\n            total_distance += abs(int(n1_str[i]) - int(n2_str[j]))\n        return total_distance\n\n# Test the function with some examples\nprint(digit_distance_nums(123, 256)) # 9\nprint(digit_distance_nums(89, 147)) # 10\nprint(digit_distance_nums(1234, 456)) # 10\nprint(digit_distance_nums(55, 55)) # 0 ",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\na = [-2, -3, 4, -1, -2, -1, 5, -3]\nsize = len(a)\nprint(\"Maximum sum of contiguous subarray is\", max_sub_array_sum(a, size))\n\n\n# Output: Maximum sum of contiguous subarray is 7 ",
        "generated_testcode": "assert max_sub_array_sum([-2, 3, 4, -1, -2, 1, 5, -3], 5) == 7\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # create an empty set to store the union elements\n    union_set = set()\n    # iterate over the first tuple and add each element to the set\n    for i in test_tup1:\n        union_set.add(i)\n    # iterate over the second tuple and add each element to the set\n    for i in test_tup2:\n        union_set.add(i)\n    # return the union set\n    return tuple(union_set)\n\n# test the function with two tuples\ntup1 = (1,2,3,4,5,6)\ntup2 = (4,5,6,7,8,9)\nprint(union_elements(tup1, tup2)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9) ",
        "generated_testcode": "assert union_elements(('apple', 'banana', 'orange') == ('apple', 'banana', 'orange')\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                print(test_list[i], test_list[j])\n\n\n# test the function\ntest_list = ('apple', 'orange', 'banana', 'grapes', 'kiwi', 'watermelon')\nassign_elements(test_list) ",
        "generated_testcode": "assert assign_elements(('abc') == {'a': 'b', 'b': 'c', 'c': 'a'}\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_length = 0\n    for i in lst:\n        if type(i) == list:\n            max_length = max(max_length, Find_Max_Length(i))\n        else:\n            max_length += 1\n    return max_length\n\n\n# Test the function with an example\nlst = [1, [2, 3, 4, [5, 6, 7], 8, [9, [10, 11, 12, [13, 14, [15, 16, 17, [18, 19, 20]]]]]]]\nprint(Find_Max_Length(lst)) # Output: 6 ",
        "generated_testcode": "assert Find_Max_Length([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"banana\", \"dog\", \"elephant\", \"dog\", \"cat\", \"dog\", \"mango\", \"pear\", \"pear\", \"pear\", \"orange\", \"cat\"] == 3\n\n# The output should be 3 because \"dog\", \"cat\", \"dog\" and \"pear\", \"pear\", \"pear\" are the longest sublists with length 3. ",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    start = text.find('\"') + 1\n    end = text.find('\"', start)\n    return text[start:end]\n\n\ntext = 'The rabbit said \"hi\" to the carrot.'\nprint(extract_values(text)) # Output: 'hi' ",
        "generated_testcode": "assert extract_values(text='\"Hello, World!\"') == 'Hello, World!'\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] != arr[j]: \n                count += 1\n    return count \n# Driver Code \narr = [2, 2, 4, 4, 6, 6, 8, 8] \nn = len(arr) \nprint(count_Pairs(arr,n)) # Output: 6 ",
        "generated_testcode": "assert count_Pairs(arr,n) == expected_output\n\n# Example:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(word) ",
        "generated_testcode": "assert split(\u201chello\u201d) == [\u201ch\u201d, \u201ce\u201d, \u201cl\u201d, \u201cl\u201d, \u201co\u201d]\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Example usage:\nprint(sum_digits(123))  # Output: 6\nprint(sum_digits(456))  # Output: 15\nprint(sum_digits(789))  # Output: 24\nprint(sum_digits(0))   # Output: 0 ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [1, 3, 5, 2, 7, 8, 9]\nprint(issort_list(list1)) # True\nprint(issort_list(list2)) # False ",
        "generated_testcode": "assert issort_list([]), \"Empty list is considered sorted\"\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [{} for i in range(length)]\n\n# Example usage:\nempty_list(3) # Output: [{}, {}, {}]\n\n# Write a function to create a list of dictionaries where each dictionary has the same key-value pairs as the input dictionary.\ndef create_list_of_dict(dictionary, length):\n    return [dictionary.copy() for i in range(length)]\n\n# Example usage:\ninput_dict = {\"a\": 1, \"b\": 2, \"c\": 3}\ncreate_list_of_dict(input_dict, 3) # Output: [{\"a\": 1, \"b\": 2, \"c\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}, {\"a\": 1, \"b\": 2, \"c\": 3}]\n\n# Write a function to flatten a list of lists.\ndef flatten_list(lst):\n    return [item for sublist in lst for item in sublist]\n# Example usage:\nlst = [[1, 2], [3, 4], [5, 6]]\nflatten_list(lst) # Output: [1, 2, 3, 4, 5, 6]\n\n# Write a function to check if a number is prime.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n\n# Test case 1: Test if the function returns a list of length 3 with 3 empty dictionaries\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n\n# test the function with an example\nprint(sort_sublists([['banana', 'apple', 'cherry', 'date'], ['pear', 'orange', 'grape', 'strawberry'], ['zebra', 'lion', 'tiger', 'giraffe', 'ostrich']]))\n\n\n# Output: [['apple', 'banana', 'cherry', 'date'], ['grape', 'orange', 'pear', 'strawberry'], ['giraffe', 'lion', 'ostrich', 'tiger']] ",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in list1:\n        flag = 0\n        for j in charlist:\n            if j in i:\n                flag = 1\n                break\n        if flag == 0:\n            result.append(i)\n    return result\n\n#Example:\nlist1 = ['hello', 'world', 'welcome', 'to', 'python']\ncharlist = ['o', 'e']\nprint(remove_words(list1, charlist))  # Output: ['world', 'to'] ",
        "generated_testcode": "assert remove_words([\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"], \"a\") == [\"pple\", \"bnn\", \"rge\", \"kiwi\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort() \n    max_sum = 0\n    for i in range(N): \n        for j in range(i+1, N): \n            if arr[j] - arr[i] < K: \n                max_sum += (arr[i] + arr[j]) \n            else: \n                break\n    return max_sum \n\n# Driver code \narr = [3, 5, 1, 2, 9, 8, 4, 6] \nK = 4\nN = len(arr) \nprint(max_sum_pair_diff_lessthan_K(arr, N, K)) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], N=6, K=5) == 13\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        else:\n            unique_nums.remove(num)\n    return unique_nums\n\n# Test the function with sample input\nprint(two_unique_nums([1, 2, 3, 2, 4, 5, 6, 5, 7, 8, 9, 10]))\n# Output: [1, 3, 4, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert two_unique_nums(nums=[1, 2, 3, 4, 5, 2, 6, 7, 1]) == [3, 4, 5, 6, 7]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n\n# test the function with a sample list\nsample_list = [1,2,2,3,3,4,5,5,6,6,7,8,9,10,10]\nprint(unique_product(sample_list)) # Output: 3628880 ",
        "generated_testcode": "assert unique_product(list_data=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3628880\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 22/7\n    return (2*pi*r*h)+(2*pi*r**2)\n\n# test the function\nprint(surfacearea_cylinder(5,10)) # output: 157.64\n\n\n# or\n\nimport math\ndef surfacearea_cylinder(r,h):\n    return (2*math.pi*r*h)+(2*math.pi*r**2)\nprint(surfacearea_cylinder(5,10)) # output: 157.64\n\n\n# or\ndef surfacearea_cylinder(r,h):\n    return (2*3.14*r*h)+(2*3.14*r**2)\nprint(surfacearea_cylinder(5,10)) # output: 157.64 ",
        "generated_testcode": "assert surfacearea_cylinder(5, 10) == 785.3981634\n# Test case 1: r = 5, h = 10, expected output: 785.3981634\n\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(L,R+1): \n        if i%A != 0: \n            count += 1\n            if count == N: \n                return i \n    return -1\n  \n# Taking input from user \nA = int(input(\"Enter the number: \"))\nN = int(input(\"Enter the position: \" )\nL = int(input(\"Enter the lower bound: \")\nR = int(input(\"Enter the upper bound: \")\nprint(count_no(A,N,L,R)) ",
        "generated_testcode": "assert count_no (2,1,100) == 6\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(n-m+1):\n        j = 0\n        k = i\n        while j < m and A[k] == B[j]:\n            j += 1\n            k += 1\n        if j == m:\n            return True\n    return False\n\n# Driver code\nA = [1,2,3,4,5,6,7,8]\nB = [4,5,6]\nn = len(A)\nm = len(B)\n\nif is_Sub_Array(A,B,n,m):\n    print(\"B is subarray of A\")\nelse:\n    print(\"B is not subarray of A\") ",
        "generated_testcode": "assert is_Sub_Array(A=[1,2,3,4,5,6,7,8],B=[1,2,3],n=5,m=3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 0: \n        return 0\n    elif n == 0: \n        return 1\n    else: \n        return factorial(n) % 10\n        \ndef factorial(n):\n    fact = 1\n    for i in range(1, n+1): \n        fact = fact * i \n    return fact \n\n# Test the function with some example values \nprint(last_Digit_Factorial(10))  # Output: 0\nprint(last_Digit_Factorial(12))  # Output: 0\nprint(last_Digit_Factorial(15))  # Output: 0\nprint(last_Digit_Factorial(20))  # Output: 0\nprint(last_Digit_Factorial(25))  # Output: 0\nprint(last_Digit_Factorial(30))  # Output: 0\nprint(last_Digit_Factorial(35))  # Output: 0 ",
        "generated_testcode": "assert last_Digit_Factorial(5) == 2\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n    return list3\n\n# Test the function with example lists\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = ['a', 'b', 'c', 'd', 'e']\nlist3 = []\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 'a', 2, 'b', 3, 'c', 4, 'd', 5, 'e']\n\n\n# Test the function with lists of different lengths\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c', 'd']\nlist3 = []\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 'a', 2, 'b', 3, 'c'] ",
        "generated_testcode": "assert interleave_lists([\"a\",\"b\",\"c\"],[1,2,3],[\"x\",\"y\",\"z\"]) == [\"a\",1,\"x\",\"b\",2,\"y\",\"c\",\"z\"]\n\n# Test case 1: Test if the function works with a list of strings, a list of integers, and a list of strings\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            result += (test_tup1[i],)\n    return result\n\ntest_tup1 = ('apple', 'banana', 'cherry', 'date', 'grape', 'kiwi')\ntest_tup2 = ('banana', 'date', 'fig', 'grape', 'orange', 'pear')\nprint(find_dissimilar(test_tup1, test_tup2)) # ('apple', 'cherry', 'fig', 'orange') ",
        "generated_testcode": "assert find_dissimilar(('abc', 'def') == ('abc', 'def')\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = [] \n    for i in test_tuple: \n        if isinstance(i, tuple): \n            even_ele(i, even_fnc) \n        elif even_fnc(i): \n            result.append(i) \n    return result \n\ndef is_even(num): \n    return num%2 == 0 \n\ndef get_nested_even_elements(t): \n    return even_ele(t, is_even) \n\n#test the function with example\ntest_tuple = (1, 2, (3, 4, 5, (6, 7, 8, 9, (10, 11, 12, (13, 14, 15), 16), 17), 18) )\nprint(get_nested_even_elements(test_tuple) ) # Output: [2, 4, 6, 8, 10, 12, 14] ",
        "generated_testcode": "assert even_ele(((1,2,3,4,5,6,7,8,9,10), lambda x: x%2 == 0) == (2, 4, 6, 8, 10)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return (b**2 + b*s + s**2) * 2\n\n#b = base side of the square at the base of the pyramid\n#s = slant height of the square pyramid\nprint(\"Enter the base of the square: \")\nb = float(input())\nprint(\"Enter the slant height of the pyramid: \")\ns = float(input())\n\n#calling the function\nsa = surface_Area(b,s)\n\n#rounding off the result to two decimal places\nsa = round(sa,2)\n\nprint(\"Surface area of the square pyramid is:\",sa) ",
        "generated_testcode": "assert surface_Area(5, 10) == 140\n\n# The base and slant height of the square pyramid are 5 and 10 respectively. The surface area of the square pyramid is calculated as follows:\n# Surface area = 4*base*slant_height + area_of_the_base\n# Area of the base = base*base\n# Therefore, surface area = 4*10 + 5*5 = 40 + 25 = 65\n# Test the function with base = 5 and slant height = 10, the expected output is 65. ",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\n# Test the function with an empty dictionary\ndict1 = {}\nprint(my_dict(dict1)) # True\n\n\n# Test the function with a non-empty dictionary\ndict2 = {'name': 'John', 'age': 30}\nprint(my_dict(dict2)) # False\n\n\n# Test the function with another non-empty dictionary\ndict3 = {'city': 'New York', 'country': 'USA'}\nprint(my_dict(dict3)) # False ",
        "generated_testcode": "assert my_dict(dict()) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num-i-1)\n    return res\n\n# The above function uses recursion to calculate the nth catalan number. ",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b[a-zA-Z]*(?:ly)\\b'\n    adverbs = re.findall(pattern, text)\n    adverb_positions = []\n    for adverb in adverbs:\n        adverb_positions.append((adverb, text.find(adverb)))\n    return adverb_positions\n\n# Example usage:\ntext = \"She walked quickly and happily to the park.\"\nprint(find_adverbs(text)) # [('quickly', 10), ('happily', 19)] ",
        "generated_testcode": "assert find_adverbs(text) == [(0, \"quickly\"), (10, \"happily\"), (20, \"well\"), (32, \"quickly\"), (42, \"quickly\"), (50, \"well\")]\n\n# The function should return a list of tuples, where each tuple contains the starting index of the adverb and the adverb itself. ",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    expensive_items = []\n    while heap:\n        price = -heapq.heappop(heap)\n        expensive_items.append((price, items[price])\n    return expensive_items\n\n# example usage:\nitems = [(\"item1\", 20), (\"item2\", 30), (\"item3\", 50), (\"item4\", 10), (\"item5\", 100), (\"item6\", 40)]\nprint(expensive_items(items,2)) # output: [(\"item5\", 100), (\"item2\", 30)] ",
        "generated_testcode": "assert expensive_items([\"item1\", \"item2\", \"item3\", \"item4\", \"item5\"], 3) == [\"item4\", \"item5\", \"item3\"]\n\n\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    b = a[:k] #slicing the first k elements \n    return a[k:] + b #concatenating the remaining elements to the first k elements \n\n#Test the function with sample inputs\na = [1,2,3,4,5,6,7,8,9]\nn = len(a)\nk = 3\nprint(split_Arr(a,n,k) # Output: [4, 5, 6, 7, 8, 9, 1, 2, 3]\n\na = [1,2,3,4,5,6,7,8,9,10]\nn = len(a)\nk = 2\nprint(split_Arr(a,n,k) # Output: [3, 4, 1, 2]\na = [1,2,3,4,5,6,7,8,9,10]\nn = len(a)\nk = 4\nprint(split_Arr(a,n,k) # Output: [5, 6, 7, 8, 9, 10, 1, 2, 3, 4] ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8], 3, 2) == [3,4,5,1,2,6,7,8]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    my_tuple = tuple(listx)\n    return my_tuple\n\n# Test the function\nmy_list = [1,2,3,4,5]\nprint(list_tuple(my_list)) # Output: (1,2,3,4,5) ",
        "generated_testcode": "assert list_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the difference between the largest and smallest values in a given array.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)\n\n# Example usage:\nprint(big_diff([5, 2, 10, 15, 3, 7]))  # Output: 13 ",
        "generated_testcode": "assert big_diff(nums=[10, 2, 5, 7, 1, 3, 0, 9]) == 9\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    i = 1\n    while i**2 <= a:\n        i += 1\n    i -= 1\n    while i**2 <= b:\n        res.append(i**2)\n        i += 1\n    return res\n\n# test the function\na = 10\nb = 30\nprint(perfect_squares(a, b))  # output: [16, 25, 36] ",
        "generated_testcode": "assert perfect_squares(1, 20) == [1, 4, 9, 16]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    x = float(x)\n    y = float(y)\n    r = (x**2+y**2)**0.5\n    theta = math.atan(y/x)\n    return r*math.cos(theta), r*math.sin(theta)\n\n\n#Example usage:\n#polar_rect(3,4)\n# Output: (2.98456913742724341436, 4.0) ",
        "generated_testcode": "assert polar_rect(1,0) == (1,0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(newList) < 2:\n        return newList\n    else:\n        return [newList[-1], *newList[1:-1], newList[0]] ",
        "generated_testcode": "assert swap_List([\"python\", \"java\", \"kotlin\", \"javascript\", \"c++\"]) == [\"c++\", \"java\", \"kotlin\", \"python\"]\n\n\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    res = 1\n    for i in range(1,k+1):\n        res = res*(n-i+1)//i \n    return res\n\ndef sum_of_product_of_binomial_coefficients(n,m):\n    result = 0\n    for i in range(m+1):\n        result+= binomial_Coeff(n,i)**2\n    return result\n\n#test the function with sample inputs\nprint(sum_of_product_of_binomial_coefficients(5,3)) #output: 61",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res = \"\"\n    for i in ip.split(\".\"):\n        if i == \"0\":\n            continue\n        else:\n            res += \".\" + i\n    return res[1:]\n\n\n\n# Test the function with an example\nprint(removezero_ip(\"192.0.1.0000.01\"))  # Output: \"192.1.0.1\" ",
        "generated_testcode": "assert removezero_ip(ip='000.0000.00.010.001') == '0.0.0.0.10.1'\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum - odd_sum\n\n\n# Test the function with sample test cases\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(diff_even_odd([1, 3, 5, 7, 9]))\nprint(diff_even_odd([2, 4, 6, 8, 10])) ",
        "generated_testcode": "assert diff_even_odd(list1) == 10\n\n# The function should return 10 for the given list1. ",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(str1)) :\n        if str1[i]!=str2[i] :\n            count+=1\n    return count ",
        "generated_testcode": "assert min_Swaps(10101,00011) == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(tuple_list)\n\n#Example usage:\nmy_tuple = (1, 2, 3, 4, 5, 6, 7)\nprint(tuple_size(my_tuple)) # Output: 5 ",
        "generated_testcode": "assert tuple_size(()) == 0\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k // 2) - 1\n    j = k - i - 2\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i:], arr2, m-i, n, k-i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n-j, k-j)\n\n# Test the function with an example\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 5\nprint(find_kth(arr1, arr2, m, n, k)) # Output: 5 ",
        "generated_testcode": "assert find_kth(arr1=[1, 3, 5, 7, 9], arr2=[2, 4, 6, 8, 10], m=4, n=4, k=5) == 6\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    n = len(str(number))\n    for digit in str(number):\n        sum += int(digit) ** n\n    return number == sum\n\n#test the function\nprint(armstrong_number(153))  #True\nprint(armstrong_number(370)) #True\nprint(armstrong_number(371)) #True\nprint(armstrong_number(407)) #True\nprint(armstrong_number(1634)) #True\nprint(armstrong_number(9474)) #True\nprint(armstrong_number(9475)) #False ",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n\n# Test the function\nprint(sum_average(5)) # Output: (15, 3.0)\nprint(sum_average(10)) # Output: (55, 5.0) ",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n & 1: \n        return False\n    else: \n        return True\n\n# Driver code to test the above function \nn = 10\nif is_Even(n): \n    print(n, 'is Even') \nelse: \n    print(n, 'is Odd') ",
        "generated_testcode": "assert is_Even(10) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "\t    self.a = a \n\t    self.b = b \n\n\tdef __lt__(self, other): \n\t    return self.b - self.a < other.b - other.a \n\ndef findLongestChain(pairs): \n    pairs.sort() \n    max_chain = [] \n    i = 0\n    for j in range(1, len(pairs)): \n        if pairs[j].a > pairs[i].b: \n            if len(max_chain) == 0 or pairs[j].a - pairs[i].a < pairs[j].b - pairs[i-1].b: \n                max_chain.append((pairs[i].a, pairs[j].b)) \n            i = j \n    if len(max_chain) == 0 or pairs[-1].a - max_chain[-1][1] < pairs[-1].b - max_chain[-1][0]: \n        max_chain.append((max_chain[-1][1], pairs[-1].b)) \n    return max_chain \n\n# Example usage: \npairs = [Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8), Pair(9, 10), Pair(2, 3), Pair(4, 5), Pair(6, 7)] \nprint(findLongestChain(pairs) # Output: [(1, 2",
        "generated_testcode": "assert __init__(1, 2) == 1\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n\n# test the function\nprint(first_repeated_char(\"hello\"))\nprint(first_repeated_char(\"abcdabcd\"))\nprint(first_repeated_char(\"xyz\"))\nprint(first_repeated_char(\"abcdef\")) ",
        "generated_testcode": "assert first_repeated_char(None) == None\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    ludics = []\n    for i in range(1, n + 1):\n        ludics.append(i)\n\n    index = 1\n\n    while index != len(ludics):\n        first_ludic = ludics[index]\n        remove_index = index + first_ludic\n\n\n        while remove_index < len(ludics):\n            ludics.remove(ludics[remove_index])\n            remove_index = remove_index + first_ludic - 1\n\n\n        index += 1\n\n    return ludics\n\n# Test the function\nn = 20\nludic_numbers = get_lucid(n)\nprint(ludic_numbers)  # Output: [1, 2, 3, 4, 6, 9, 13, 18] ",
        "generated_testcode": "assert get_ludic(1) == []\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    words = s.split()\n    return \" \".join(words[::-1])\n\ns = \"Hello world! This is a test string.\"\nprint(reverse_words(s)) # Expected output: \"string. a test is This world! Hello\"\n\n\n# Another solution\ndef reverse_words(s):\n    return \" \".join(reversed(s.split()))\n\ns = \"Hello world! This is a test string.\"\nprint(reverse_words(s)) # Expected output: \"string. a test is This world! Hello\" ",
        "generated_testcode": "assert reverse_words(s=\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n# Example usage:\nprint(prime_num(7))  # Output: True\nprint(prime_num(10)) # Output: False\nprint(prime_num(1))  # Output: False ",
        "generated_testcode": "assert prime_num(2) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    rad = degree * (3.14159/180)\n    return rad\n\n# Test the function with a degree value\ndegree = 90\nrad = radian_degree(degree)\nprint(rad) ",
        "generated_testcode": "assert radian_degree(180) == math.pi\n\n# Write a function to calculate the area of a circle with a given radius.\ndef circle_area(radius):\n    pass\n\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    matches = re.finditer(pattern, text)\n    locations = []\n    for match in matches:\n        locations.append(match.start())\n    return locations\n\n#Example usage:\ntext = \"Hello, how are you? I hope everything is well.\"\npattern = r\"you\"\nprint(find_literals(text, pattern)) #[14] ",
        "generated_testcode": "assert find_literals(text=\"The quick brown fox jumps over the lazy dog\", pattern=\"fox\") == (True, 16)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    bell = [[0 for j in range(n+1)] for i in range(n+1)] \n    for i in range(n+1): \n        bell[i][0] = 1\n        bell[i][i] = 1\n    for i in range(1, n+1): \n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i-1][j] \n    return bell[n][0]\n\n#test the function with n=4\nprint(bell_Number(4)) #output: 15 ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    minimum = float('inf')\n    for i in range(N):\n        val = A + i * B\n        if val < minimum:\n            minimum = val\n    return minimum\n\n#test the function with some sample test cases\nprint(floor_Min(10, 3, 5)) # Output: 10\nprint(floor_Min(1, 2, 3)) # Output: 1\nprint(floor_Min(5, 10, 3)) # Output: 5\nprint(floor_Min(13, 5, 7)) # Output: 13 ",
        "generated_testcode": "assert floor_Min(10, 15, 3) == 10\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if L == []:\n        return []\n    elif k == 0:\n        return list1[1:]\n    else:\n        return [list1[0]] + remove_kth_element(list1[1:], k-1)\n\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nk = 2\nnew_list = remove_kth_element(list1, k)\nprint(new_list)  # Output: [1, 2, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "assert remove_kth_element(2, [1, 2, 3, 4, 5, 6, 7]) == [1, 2, 4, 5, 6, 7]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return max(test_list, key=lambda x: x[N])\n\n# example usage:\n# test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n# print(max_of_nth(test_list, 2)) # Output: (7, 8, 9)\n\n\n# Write a function to convert the given list into a tuple.\ndef list_to_tuple(lst):\n    return tuple(lst)\n# example usage:\n# lst = [1, 2, 3, 4, 5, 6, 7]\n# print(list_to_tuple(lst)) # Output: (1, 2, 3, 4, 5, 6, 7)\n\n# Write a function to check if a given tuple contains a specific element.\ndef check_element_in_tuple(tup, elem):\n    return elem in tup\n# example usage:\n# tup = (1, 2, 3, 4, 5, 6, 7)\n# print(check_element_in_tuple(tup, 3)) # Output: True\n# print(check_element_in_tuple(tup, 8)) # Output: False\n\n# Write a function to find the length of a tuple.\ndef find_tuple_length(tup):\n    return len(tup)\n# example usage:\n#",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 4\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "34B",
        "pass": 6,
        "correct": true,
        "answer": "    first = [sublist[0] for sublist in lst]  \n    last = [sublist[-1] for sublist in lst]  \n    return first + last \n\n# Test the function with an example\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(merge(lst)) # Output: [1, 3, 7, 9] ",
        "generated_testcode": "assert merge([] ) == []\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "34B",
        "pass": 5,
        "correct": true,
        "answer": "    max_value = None\n    for record in test_list:\n        if max_value is None or record[1] > max_value:\n            max_value = record[1]\n    return max_value\n\n\n# test the function\ntest_list = [('a', 4), ('b', 20), ('c', 10), ('d', 15)]\nprint(maximum_value(test_list)) # Output: 20\n\n\n# test the function\ntest_list = [('x', 90), ('y', 5), ('z', 25)]\nprint(maximum_value(test_list)) # Output: 90 ",
        "generated_testcode": "assert maximum_value([(1, 2), (3, 4), (5, 6)] ) == 6\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a tuple of numbers as input and returns the cumulative sum of all the values in the tuple.\n    \"\"\"\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum\n\n# Test the function with a sample tuple\nmy_tuple = (1, 2, 3, 4, 5, 6, 7)\nprint(cummulative_sum(my_tuple)) # Output: 21\n\n\n# Test the function with another tuple\nmy_tuple = (10, 20, 30, 40, 50)\nprint(cummulative_sum(my_tuple)) # Output: 150 ",
        "generated_testcode": "assert cummulative_sum(()) == 0\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for tup in nums:\n        for num in tup:\n            total += num\n            count += 1\n    return total / count\n\n# Test the function with a sample tuple of tuples\ntuples = ((1, 2, 3), (4, 5, 6, 7), (8, 9))\nprint(average_tuple(tuples)) # Output: 5.0 ",
        "generated_testcode": "assert average_tuple(()) == 0.0\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return \"Invalid tuples. Both tuples should have the same length.\"\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n\n\n# Test the function with example tuples\ntup1 = (12, 15, 19, 21)\ntup2 = (3, 4, 6, 7)\nprint(tuple_modulo(tup1, tup2)) # Output: (0, 3, 1, 0) ",
        "generated_testcode": "assert tuple_modulo(( (10, 20, 30), (3, 4, 5)) == (1, 2, 0)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if (a == 0 and b == 0): \n        return 0\n    if (d == 0 or d < abs(a) + abs(b)): \n        return -1\n    else: \n        return abs(a) + abs(b) ",
        "generated_testcode": "assert min_Jumps(1, 1, 5) == 2\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x/y, nums1, nums2))\n\n\n# Test the function with two lists of integers\nnums1 = [10, 20, 30, 40]\nnums2 = [2, 5, 10, 6]\nprint(div_list(nums1, nums2)) #[5.0, 4.0, 6.666666666666666666665]\n\n\n# Test the function with two lists of floats\nnums1 = [3.0, 5.5, 7.5, 8.0]\nnums2 = [1.5, 2.0, 2.5]\nprint(div_list(nums1, nums2)) #[2.0, 2.75, 3.0]\n\n# Test the function with an integer and a float list\nnums1 = [10, 20, 30, 40]\nnums2 = [2.5, 5.0, 7.5, 8.0]\nprint(div_list(nums1, nums2)) #[4.0, 4.0, 5.33333333333333333333] ",
        "generated_testcode": "assert div_list(nums1, nums2) == [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Test case 1: nums1 = [1, 2, 3, 4, 5, 6, 7, 8], nums2 = [2, 2, 2, 2, 2, 2, 2]\n# Expected output: [0.5, 1.0, 2.0, 2.5, 3.0, 4.0]\n\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in test_str:\n        if i.isdigit():\n            result += i\n    return result\n\n# Test the function with an example string\ntest_str = \"Hello world 123 I am 45 a 67 string with 89 numbers!\"\nprint(move_num(test_str) == \"123456789\") ",
        "generated_testcode": "assert move_num(test_str = \"Hello 123 World 456\") == \"123 456\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    max_subset = []\n    max_length = 0\n    for i in range(1 << n):\n        subset = []\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(a[j])\n        for x in subset:\n            is_divisible = True\n            for y in subset:\n                if x != y and x % y != 0:\n                    is_divisible = False\n                    break\n            if not is_divisible:\n                break\n        else:\n            subset_length = len(subset)\n            if subset_length > max_length:\n                max_subset = subset\n                max_length = subset_length\n    return max_subset\n\n\n\n# test the function\na = [1, 2, 3, 4, 8, 9, 27, 81]\nn = len(a)\nprint(largest_subset(a, n))\n",
        "generated_testcode": "assert largest_subset(a=[1, 2, 3, 4, 6, 8, 9, 12, 15, 16, 18], n=7) == [1, 2, 4, 6, 8]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    result = []\n    for string in test_list:\n        nums = re.findall('\\d+', string)\n        for i in range(len(nums)):\n            nums[i] = str(int(nums[i]) + K)\n        result.append(re.sub('\\d+', lambda m, nums=nums: nums.pop(0), string))\n    return result\n\n# Test\ntest_list = [\"a1b2c3d4e5\", \"f6g7h8i9\", \"j10k11l12\"]\nK = 3\nprint(increment_numerics(test_list, K)) # Output: ['a4b5c6d7e8', 'm9n10o11', 's13t14u15'] ",
        "generated_testcode": "assert increment_numerics([\"a123b45c\", \"x1y22z\", \"123q456\"], 5) == [\"a128b410c\", \"x6y27z\", \"128q411\"]\n\n# Test case 1:\n# Input: [\"a123b45c\", \"x1y22z\", \"123q456\"], 5\n# Output: [\"a128b410c\", \"x6y27z\", \"128q411\"]\n# Explanation: In the first string, \"a123b45c\", we replace 123 with 128, in the second string \"x1y22z\" we replace 1 with 6 and in the third string \"123q456\" we replace 123 with 128.\n\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    i = j = k = 0\n    median = [0]\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n    while i < n:\n        median.append(arr1[i])\n        i += 1\n        k += 1\n    while j < n:\n        median.append(arr2[j])\n        j += 1\n        k += 1\n    if n % 2 == 0:\n        return (median[n // 2] + median[n // 2 - 1]) / 2\n    else:\n        return median[n // 2]\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(\"Median of the two arrays is:\", get_median(arr1, arr2, n))\n\n\n# Output:\n# Median of the two arrays is: 6 ",
        "generated_testcode": "assert get_median(sorted([1, 3, 5, 7, 9], sorted([2, 4, 6, 8, 10], 4) == 5.5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x**n,nums)\n    \n#Example:\n#nums = [1,2,3,4,5]\n#n=2\n#print(nth_nums(nums,n)) # [1,4,9,16,25] ",
        "generated_testcode": "assert nth_nums(nums=[2,3,4,5],n=3) == [8,27,125]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if string.isupper():\n        return \"The given string is already in upper case.\"\n    else:\n        return string.upper()\n\n#Test the function with some examples\nprint(is_upper(\"HELLO\")) #The given string is already in upper case.\nprint(is_upper(\"hello\")) #HELLO\nprint(is_upper(\"Hello World\")) #HELLO WORLD ",
        "generated_testcode": "assert is_upper(string) == \"THIS IS A TEST STRING\"\n\n# Test case 1: Testing with a normal string\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    size=len(newList)\n    if size>1:\n        first=newList[0]\n        newList[0]=newList[size-1]\n        newList[size-1]=first\n        return newList\n    else:\n        return newList\n#testing the function with some examples\nprint(swap_List([1,2,3,4,5,6]))\nprint(swap_List([100,200,300,400,500,600]))\nprint(swap_List([\"python\",\"java\",\"c++\",\"kotlin\"]))\nprint(swap_List([\"hello\",\"interchange\",\"first\",\"last\"]) )\nprint(swap_List([\"a\"])) #if list has only one element ",
        "generated_testcode": "assert swap_List([\"python\", \"java\", \"kotlin\", \"javascript\", \"c++\"]) == [\"c++\", \"java\", \"kotlin\", \"python\"]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "  #Calculate the area of the semicircle\n    semicircle_area = 0.5 * 3.14 * r ** 2\n    #Calculate the height of the largest triangle that can be inscribed in the semicircle\n    height = r / (2 ** 0.5)\n    #Calculate the base of the triangle\n    base = 2 * r\n    #Calculate the area of the triangle\n    triangle_area = 0.5 * base * height\n    #Return the area of the triangle\n    return triangle_area\n#Test the function with different radii values\nprint(triangle_area(5)\nprint(triangle_area(10) ",
        "generated_testcode": "assert triangle_area(3) == 6.0\n\n# Write a python function to find the area of a triangle given the base and height.\ndef triangle_area_bh(base, height) :  \n    pass\n\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    # Create an empty hashset \n    s = set() \n    # Traverse through the array from start to end \n    for i in range(start, end + 1): \n        s.add(i) \n    # Find the first missing number by traversing the array \n    for i in range(start, end + 1): \n        if i not in s: \n            return i \n    # If no missing number is found, return end + 1 \n    return end + 1\n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nn = len(arr) \nprint(find_First_Missing(arr, 1, n)) ",
        "generated_testcode": "assert find_First_Missing(array=[1,2,3,4,5,6,7,8,9],start=1,end=9) == 10\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return string.replace(\" \", \"%20\")\n\n\n# Test the function with sample input\nprint(replace_spaces(\"Hello World\")) # Output: \"Hello%20World\"\nprint(replace_spaces(\"Hello  World \")) # Output: \"Hello%20%20World\"\nprint(replace_spaces(\"Hello   World\")) # Output: \"Hello%20%20%20World\"\n\n\n# Solution:\ndef replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n\n\n# Test the function with sample input\nprint(replace_spaces(\"Hello World\")) # Output: \"Hello%20World\"\nprint(replace_spaces(\"Hello  World \")) # Output: \"Hello%20%20World\"\nprint(replace_spaces(\"Hello   World\")) # Output: \"Hello%20%20%20World\" ",
        "generated_testcode": "assert replace_spaces(input_string) == expected_output_string\n\n# Example:\n# input_string = \"Hello world\"\n# expected_output_string = \"Hello%20world\"\n# ",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    even_nums = []\n    odd_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return (even_nums, odd_nums)\n\n\nprint(Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])) ",
        "generated_testcode": "assert Split([\"apple\", 23, 4, \"banana\", 56, \"orange\", 89, \"grape\", 12, 34, \"kiwi\"]) == [4, 12]\n\n\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    x, y = ele\n    for i in [-1, 0, 1]:\n        for j in [-1, 0, 1]:\n            if i == 0 and j == 0: \n                continue\n            else:\n                sub.append((x+i, y+j))\n    return sub \n\n# Test case \ncoord = (1, 2) \nprint(adjac(coord)) ",
        "generated_testcode": "assert adjac((1, 1) == [(0, 1), (1, 0), (2, 1), (1, 2)])\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'\\s', '_', text)\n\n# Example usage:\n# text = \"Hello world\"\n# print(replace_spaces(text) # Output: \"Hello_world\" ",
        "generated_testcode": "assert replace_spaces(text=\"I love Python\") == \"I_love_Python\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            zero_count += 1\n    for i in range(zero_count):\n        num_list.remove(0)\n    num_list.extend([0]*zero_count)\n    return num_list\n\n# Test the function with an example\nnum_list = [0, 2, 3, 0, 4, 6, 0, 7, 0, 9]\nprint(move_zero(num_list)) #[2, 3, 4, 6, 7, 9, 0, 0, 0] ",
        "generated_testcode": "assert move_zero(num_list) == [1, 3, 12, 0, 0, 15, 0, 8, 0, 10]\n\n\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    ans = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            ans += arr[i] ^ arr[j]\n    return ans ",
        "generated_testcode": "assert pair_OR_Sum(arr=[1, 2, 3, 4, 5], n=4) == 18\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        sum += (2*i)**4 \n    return sum \n\n# Driver Code \nn = int(input(\"Enter the value of n: \")\nprint(\"The sum of the fourth power of first\",n,\"even numbers is:\",even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(4) == 1000000\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    def _heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[left] < arr[largest]:\n            largest = left\n        if right < n and arr[right] < arr[largest]:\n            largest = right\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            _heapify(arr, n, largest)\n\n\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1, -1):\n        _heapify(iterable, n, i)\n    for i in range(n - 1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        _heapify(iterable, i, 0)\n    return iterable\n\n\n\n# Example usage:\nlst = [4, 2, 7, 1, 9, 3, 6, 5, 10, 22, 8]\nprint(heap_sort(lst))  # Output: [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "generated_testcode": "assert heap_sort(iterable=[4, 2, 5, 1, 3, 7, 6, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": " if a == 0: \n    return \"a cannot be 0\"\n  else: \n    d = b**2 - 4*a*c \n    if d < 0: \n      return \"No real solutions\" \n    else: \n      root1 = (-b + d**0.5)/(2*a) \n      root2 = (-b - d**0.5)/(2*a) \n      if abs(1/root1) == root2 or abs(1/root2) == root1: \n        return \"Reciprocal\" \n      else: \n        return \"Not reciprocal\" \na = int(input(\"Enter coefficient of x^2: \")) \nb = int(input(\"Enter coefficient of x: \")) \nc = int(input(\"Enter constant term: \")) \nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if actual_cost == sale_amount: \n        return True\n    else: \n        return False\n\n# Test the function \nprint(noprofit_noloss(100, 100)) # True \nprint(noprofit_noloss(100, 120)) # False \nprint(noprofit_noloss(120, 100)) # False \nprint(noprofit_noloss(200, 200)) # True \nprint(noprofit_noloss(200, 150)) # False ",
        "generated_testcode": "assert noprofit_noloss(1000, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Calculates wind chill index given wind speed and temperature.\n    :param v: wind speed in km/h\n    :param t: temperature in degrees Celsius\n    :return: wind chill index\n    \"\"\"\n    wc_index = 13.12 + 0.6215*t - 11.39*v**0.16 + 0.4863*t*v**0.16\n    return wc_index\n\n# Example usage:\n#print(wind_chill(50, -10)) # expected output: 22.955\n#print(wind_chill(100, 5)) # expected output: 1.64\n#print(wind_chill(30, 10)) # expected output: 6.76 ",
        "generated_testcode": "assert wind_chill(5, 10) == 10.0\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length\n\n# Test the function with the sample data\nsample_data = [\"Joe\", \"Sarah\", \"abc\", \"Mark\", \"john\", \"Mike\", \"Kate\"]\nprint(sample_nam(sample_data)) # Output: 11 ",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"dave\", \"eve\", \"Frank\"]) == 10\n# Test case 1: Testing with a list of names where the first and last names start with uppercase letters\n\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for item in items:\n        if '(' in item:\n            start = item.find('(')\n            end = item.find(')')\n            result.append(item[:start] + item[end+1:])\n        else:\n            result.append(item)\n    return result\n\n# Test cases\nprint(remove_parenthesis(['a(bc)d', 'e(fg)hi', 'j(k)lm', 'no)pqr(stu', 'vw(xy)z'])) # ['ad', 'ehi', 'jlm', 'nopqstu', 'vwz'] ",
        "generated_testcode": "assert remove_parenthesis([\"a(bc)d\", \"hello(world)\", \"def)ghi\", \"j(k(lm)n)o\"] == [\"ad\", \"helloworld\", \"dgno\", \"jkno\"]\n\n\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1,1000000000):\n        nonag = (i*(7*i-5))/2\n        if nonag == n:\n            return True\n        elif nonag > n:\n            return False\n    return False\n\ndef find_nth_nonagonal(n):\n    count = 0\n    for i in range(1,100000000):\n        nonag = (i*(7*i-5))/2\n        count += 1\n        if count == n:\n            return nonag\n    return None ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    res = []\n    for i in test_list:\n        if i not in res:\n            res.append(i)\n    return tuple(res)\n\n# Test the function with the sample data\ndata = ((1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (4, 5, 6))\nprint(remove_similar_row(data)) ",
        "generated_testcode": "assert remove_similar_row(()) == ()\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return r'\\b\\w*z\\w*\\b'\n\n# Example usage:\ntext = 'The quick brown fox jumps over the lazy dog.'\npattern = text_match_wordz_middle(text)\nresult = re.findall(pattern, text)\nprint(result) # Output: ['quick', 'fox']\n\n# The pattern \\b\\w*z\\w*\\b matches any word that contains the letter 'z' and has word boundaries on both sides to ensure that it is not at the start or end of the word. ",
        "generated_testcode": "assert text_match_wordz_middle([\"hello\", \"hey\", \"goodbye\", \"seven\", \"zero\", \"az\"]), [\"hey\", \"goodbye\"]\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 0\n    while i < k: \n        j = k - i - 1\n        input[i], input[j] = input[j], input[i] \n        i += 1\n    return input\n\ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 4\nresult = reverse_Array_Upto_K(input, k)\nprint(result) ",
        "generated_testcode": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 2) == [2, 1, 4, 3, 6, 5, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(val) \n    product = 1\n    for i in range(1,n) : \n        product *= val[i-1][i-1] \n    return product\n\ndef get_kth_index(arr, k) : \n    n = len(arr) \n    # Multiply the elements to the left and right of kth index \n    left_product = get_product(arr[:k]) \n    right_product = get_product(arr[k+1:]) \n    return left_product * right_product \n\n# Driver code \narr = (5, 10, 3, 15, 6, 20) \nk = 2\nprint(get_kth_index(arr, k)) ",
        "generated_testcode": "assert get_product(((1,2,3,4,5,6,7,8,9,10)) == 36 # Testing for k = 3\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if N % K == 0:\n        return (N//K)**3\n    else:\n        return ((N//K) + 1)**3\n    \nN = 10\nK = 2\nprint(No_of_cubes(N,K))  # Output: 27 (2^3)\n\n\nN = 12\nK = 3\nprint(No_of_cubes(N,K))  # Output: 125 (5^3)\n\n\nN = 16\nK = 4\nprint(No_of_cubes(N,K))  # Output: 64 (4^3) ",
        "generated_testcode": "assert No_of_cubes(10, 2) == 6\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Splits the text at uppercase letters\n    \"\"\"\n    result = []\n    word = \"\"\n    for char in text:\n        if char.isupper() and word != \"\":\n            result.append(word)\n            word = char\n        else:\n            word += char\n    result.append(word)\n    return result\n\n# Example usage:\ntext = \"HelloWorld, IAmSplitter\"\nprint(split_upperstring(text)) # Output: ['Hello', 'World', ', I', 'Am', 'Splitter'] ",
        "generated_testcode": "assert split_upperstring(text=\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "34B",
        "pass": 8,
        "correct": true,
        "answer": "    if len(lst) % 2 != 0:\n        return \"List should have even number of elements.\"\n    for i in range(0, len(lst), 2):\n        if i != len(lst) - 1:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n\n\n# Test the function with an example\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(exchange_elements(lst))  # Output: [2, 1, 4, 3, 6, 5, 8, 7, 10, 9] ",
        "generated_testcode": "assert exchange_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [\"b\", \"a\", \"d\", \"c\", \"f\", \"e\"]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 0 or n >= len(nums):                                                                                                                                                                          # Checking for invalid range values\n        return 0\n    return sum(nums[m:n+1])                                                                                                                                                                        # sum of the list between m and n indices\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_Range_list(nums, 2, 5))                                                                                                                                                           # Example usage: sum of nums[2:6] = 21\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_Range_list(nums, 0, 3))                                                                                                                                                           # Example usage: sum of nums[0:4] = 10\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_Range_list(nums, 5, 10))                                                                                                                                                          # Example usage: sum of nums[5:10] = 0 (invalid range) ",
        "generated_testcode": "assert sum_Range_list(nums=[1,2,3,4,5,6,7,8,9], m=1, n=3) == 9\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n!=m:\n        return False\n    for i in range(n):\n        if arr1[i]!=arr2[i]:\n            return False\n    return True\n# Example usage:\narr1 = [1,2,3,4,5,6]\narr2 = [1,2,3,4,5,6]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1,arr2,n,m):\n    print(\"Both arrays are equal\")\nelse:\n    print(\"Both arrays are not equal\") ",
        "generated_testcode": "assert are_Equal(arr1=[1,2,3,4,5],arr2=[1,2,3,4,5],n=4,m=4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # converting the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # using the issubset() method to check if all the elements of the first set are present in the second set\n    return set1.issubset(set2)\n\n# creating two tuples\ntup1 = (1,2,3,4)\ntup2 = (1,2,3,4,5)\n# calling the function and printing the result\nprint(check_subset(tup1, tup2)) # True\n# calling the function and printing the result\nprint(check_subset(tup2, tup1)) # False ",
        "generated_testcode": "assert check_subset(('apple', 'banana') == False\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Given a matrix, represented as a tuple of tuples, this function flattens the matrix into a list of tuples,\n    where each tuple represents a column of the matrix.\n    \"\"\"\n    num_columns = len(test_list[0])\n    num_rows = len(test_list)\n    result = [tuple([test_list[row][col] for row in range(num_rows)] for col in range(num_columns)]\n    return result\n\n# Test the function with an example matrix\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list))  # Output: ((1, 4, 7), (2, 5, 8), (3, 6, 9)) ",
        "generated_testcode": "assert matrix_to_list(()) == ()\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Group a sequence of key-value pairs into a dictionary of lists.\n    \"\"\"\n    from collections import defaultdict\n    d = defaultdict(list)\n    for key, value in l:\n        d[key].append(value)\n    return d\n\n# Example usage:\nl = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('a', 6)]\nprint(grouping_dictionary(l))  # Output: defaultdict(<class 'list'>, {'a': [1, 3, 6], 'b': [2, 4], 'c': [5]})\n\n\n# You can convert the defaultdict to a regular dictionary using the `dict()` function. ",
        "generated_testcode": "assert grouping_dictionary([\"apple\", \"orange\", \"banana\", \"apple\", \"banana\", \"apple\", \"orange\"]) == {\"apple\": [\"apple\", \"apple\", \"apple\"], \"orange\": [\"orange\", \"orange\"], \"banana\": [\"banana\", \"banana\"]}\n\n\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if l<=0 or b<=0:\n        return \"Invalid length or breadth\"\n    else:\n        return 2*(l+b)\n\n#Test the function\nprint(rectangle_perimeter(10,4)) # 28\nprint(rectangle_perimeter(0,4)) # Invalid length or breadth\nprint(rectangle_perimeter(10,-4)) # Invalid length or breadth\nprint(rectangle_perimeter(7,8)) # 30\nprint(rectangle_perimeter(8.5,3.5)) # 26.0\nprint(rectangle_perimeter(-1,-6)) # Invalid length or breadth\n\n\n#The function first checks if either length or breadth is less than or equal to zero. If it is, it returns \"Invalid length or breadth\". If not, it calculates and returns the perimeter by adding the length and breadth twice. ",
        "generated_testcode": "assert rectangle_perimeter(4, 5) == 18\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1) : \n        sum += i**5\n    return sum \n\n#Example\n#Input:\nn=5\nprint(fifth_Power_Sum(n))\n#Output: 2255\n\n#Input:\nn=4\nprint(fifth_Power_Sum(n))\n#Output: 100",
        "generated_testcode": "assert fifth_Power_Sum(5) == 15125\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    a.sort() \n    b.sort() \n    i = 0\n    j = 0\n    min_sum = 0\n    while i < n and j < n: \n        min_sum += abs(a[i] - b[j]) \n        i += 1\n        j += 1\n    return min_sum \n\n# Taking input from user \nn = int(input(\"Enter the size of the array: \")) \na = list(map(int, input(\"Enter the elements of the first array: \").strip().split()))[:n] \nb = list(map(int, input(\"Enter the elements of the second array: \").strip().split())[:n] \nprint(\"Minimum sum of absolute differences: \", find_Min_Sum(a,b,n))\n\n# Example:\n# Input: Enter the size of the array: 5\n# Enter the elements of the first array: 1 3 4 5 7 9\n# Enter the elements of the second array: 2 3 5 8 10 12 \n# Output: Minimum sum of absolute differences: 7 ",
        "generated_testcode": "assert find_Min_Sum(a,b,n) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    factorial = 1\n    for i in range(1, n + 1) : \n        factorial = factorial * i \n    while (factorial % 10 == 0) : \n        factorial = factorial // 10\n    return factorial % 10\n\n# Taking an input from the user\nnum = int(input(\"Enter a number: \"))\n# Calling the function to find the first digit of the factorial\nprint(\"The first digit in the factorial of\", num, \"is:\", first_Digit(num)) ",
        "generated_testcode": "assert first_Digit(123) == 7\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {}\n    for item in list1:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    max_item = None\n    max_count = 0\n    for key, value in count_dict.items():\n        if value > max_count:\n            max_count = value\n            max_item = key\n\n    return max_item\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 2, 6, 7, 2, 8, 3, 2, 9, 2, 10, 11, 2, 12, 2]\nprint(max_occurrences(list1)) # Output: 2 ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"date\", \"banana\"]) == \"banana\"\n\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dup = [] \n    for i in x: \n        if x.count(i) > 1 and i not in dup: \n            dup.append(i) \n    return dup \nx = [1, 2, 3, 4, 5, 1, 2, 6, 7, 2, 8, 3, 1] \nprint(Repeat(x)) ",
        "generated_testcode": "assert Repeat([1, 2, 3, 4, 5, 6, 2, 7, 8, 9, 3, 10, 10] ) == [2, 3, 10]\n\n\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function chooses the points from two ranges such that no point lies in both the ranges.\n    :param l1: lower limit of range 1\n    :param r1: upper limit of range 1\n    :param l2: lower limit of range 2\n    :param r2: upper limit of range 2\n    :return: two points, p1 and p2, where p1 belongs to range 1 and p2 belongs to range 2.\n    \"\"\"\n    p1 = p2 = None\n    if l1 <= l2:\n        p1 = l1\n        p2 = r2\n    else:\n        p1 = l2\n        p2 = r1\n    return p1, p2 ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 3: \n        return 0\n    if n == 3: \n        return max(arr[0], max(arr[1], arr[2], arr[0] + arr[1], arr[1] + arr[2], arr[0] + arr[2])\n    max_sum = float('-inf')\n    prev_prev_sum = arr[0]\n    prev_sum = max(arr[1], arr[0] + arr[1]) \n    curr_sum = max(prev_prev_sum, prev_sum, arr[2] + arr[0] + arr[1]) \n    for i in range(3, n): \n        new_sum = max(prev_sum, prev_prev_sum + arr[i], curr_sum) \n        max_sum = max(max_sum, new_sum) \n        prev_prev_sum = prev_sum \n        prev_sum = curr_sum \n        curr_sum = new_sum \n    return max_sum ",
        "generated_testcode": "assert max_sum_of_three_consecutive(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=6) == 25\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function sorts a dictionary by values in ascending order and returns the sorted dictionary\n    \"\"\"\n    sorted_dict = {}\n    sorted_keys = sorted(dict1, key=dict1.get)\n    for key in sorted_keys:\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\n\n# Example usage:\ndict1 = {'apple': 10, 'banana': 20, 'orange': 5, 'kiwi': 15}\nsorted_dict(dict1) # Output: {'kiwi': 15, 'apple': 10, 'banana': 20} ",
        "generated_testcode": "assert sorted_dict(dict1) == {'apple': 1, 'banana': 2, 'orange': 3, 'pear': 4}\n\n\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if y == 0:\n        return None\n    return n - (n//x) * y - 1\n\n# Example usage:\n# n = 10\n# x = 3\n# y = 2\n# print(find_max_val(n, x, y)) # Output: 2 ",
        "generated_testcode": "assert find_max_val(10, 3, 4) == 2\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize sum and count variable \n    sum = 0\n    count = 0\n    # traverse from 2 to n \n    for i in range(2, n+1, 2) : \n        sum += i \n        count += 1\n    # calculate the average and return \n    return sum / count ",
        "generated_testcode": "assert average_Even(2) == 2.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        return num_list[1:] + [num_list[0]]\n\n\n# Example usage:\nnum_list = [1, 2, 3, 4, 5]\nresult = move_last(num_list)\nprint(result)  # Output: [2, 3, 4, 5, 1] ",
        "generated_testcode": "assert move_last(num_list) == [2, 3, 4, 5, 1]\n\n# Test case 1:\nnum_list = [1, 2, 3, 4, 5]\nmove_last(num_list)\n\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n#Test the function with an example\nstring = \"Hello World\"\nchar = \"l\"\nprint(count_char(string,char)) # Output: 3 ",
        "generated_testcode": "assert count_char(string,char) == expected_output\n\n# Example:\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for char in string: \n        if char in vowels: \n            count += 1\n    return count \n\nstring = input(\"Enter a string: \")\nvowels = \"aeiouAEIOU\"\nresult = Check_Vow(string, vowels) \nprint(\"Number of vowels in the string: \", result) ",
        "generated_testcode": "assert Check_Vow(\u201chello world\u201d, \u201caeiou\u201d) == 3\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(char) != 1: \n        return \"Length of the character should be 1\"\n    new_str = \"\" \n    for i in string: \n        if i == char: \n            if i not in new_str: \n                new_str += i \n        else: \n            new_str += i \n    return new_str \n\nstring = \"mississippi\"\nchar = \"s\"\nprint(replace(string, char)) ",
        "generated_testcode": "assert replace(string=\"hello world\", char=\"l\") == \"helo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": " pattern = re.compile(\"^([0-9]{1,3}.){3}[0-9]{1,3}$\")\n  return pattern.match(Ip)\n  \n#Example:\n#Input:\n#Ip = \"192.168.0.1\"\n#Output:True\n#Input:\n#Ip = \"2555.255.255.256\"\n#Output:False ",
        "generated_testcode": "assert check_IP(192.168.0.1.1) == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of numbers, return True if the sequence is in decreasing order, False otherwise.\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]:\n            return False\n    return True\n\n# test the function with some examples\nprint(decreasing_trend([5, 4, 3, 2, 1])) # True\nprint(decreasing_trend([10, 5, 2, -3, -5])) # True\nprint(decreasing_trend([1, 2, 3, 4, 5])) # False\nprint(decreasing_trend([10, 8, 6, 4, 2])) # False ",
        "generated_testcode": "assert decreasing_trend(1, 2, 3, 4, 5) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    pos = 0 \n    if (n == 0):  \n        return -1\n    while (n != 0): \n        n >>= 1\n        pos += 1\n    return pos - 1\n\ndef set_Right_most_unset_bit(n): \n    pos = get_Pos_Of_Right_most_Set_Bit(n) + 1\n    if (pos == 0): \n        return n | 1\n    else: \n        return n | (1 << pos) \n\n# Driver code \nn = 7 \nprint(set_Right_most_unset_bit(n))\n\n# Output: \n# 8\n\nn = 10 \nprint(set_Right_most_unset_bit(n)) \n# Output: 16 ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(15) == 3\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if num1>=num2 and num1>=num3: \n        return num1 \n    elif num2>=num1 and num2>=num3: \n        return num2 \n    else: \n        return num3 ",
        "generated_testcode": "assert max_of_three(5, 10, 7) == 10\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i in list:\n        result = result * 10 + i\n    return result ",
        "generated_testcode": "assert convert(list(1,2,3,4,5)) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    words = string.split()\n    unique_words = set(words)\n    new_string = \"\"\n    for word in unique_words:\n        new_string += word + \" \"\n    return new_string[:-1]\n\nstring = \"I am a developer and I love coding\"\nprint(remove_duplicate(string)) ",
        "generated_testcode": "assert remove_duplicate(string) == \"this is a sample string\"\n\n# Test case 1:\nstring = \"this is a sample string\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    s = x + y\n    if m <= s <= n:\n        return 20\n    else:\n        return s\n#test the function\nprint(sum_nums(10, 5, 15, 20))\nprint(sum_nums(10, 5, 10, 20))\nprint(sum_nums(10, 5, 1, 10))\nprint(sum_nums(10, 5, 20, 30)) ",
        "generated_testcode": "assert sum_nums(5, 6, 10, 15) == 11\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'[^a-zA-Z0-9]+'\n    return re.sub(pattern, '', text1)\n\ntext = \"Hello, World! 123 #codefundo. I am @codefundo.\"\nprint(remove_extra_char(text))  # Output: HelloWorld123codefundoIamcodefundo ",
        "generated_testcode": "assert remove_extra_char(text1) == \"This is a string with only alphanumeric characters\"\n\n\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\n#testing the function\nprint(validity_triangle(5,10,12))\nprint(validity_triangle(12,10,5))\nprint(validity_triangle(10,12,5))\nprint(validity_triangle(3,4,8)) ",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    str1 = str1.replace(\" \", \"\")\n    return str1\n\n# test the function\nprint(remove_spaces(\"Hello world\"))  # output: \"Helloworld\"\nprint(remove_spaces(\"I love Python\")) # output: \"ILovePython\"\nprint(remove_spaces(\"My name is John\")) # output: \"MynameisJohn\"\n\n\n\n# The function replaces the spaces in the string with an empty string \"\" using the replace() method and returns the modified string. ",
        "generated_testcode": "assert remove_spaces(str1) == \"HelloWorld\"\n\n# Test case 1:\nstr1 = \"Hello World\"\nprint(remove_spaces(str1)) # Output: \"HelloWorld\"\n\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return ditionary[key]\n#Example\n\nmy_dict = {\"apple\":2,\"banana\":3,\"orange\":5,\"kiwi\":8}\nprint(access_key(my_dict,\"banana\"))\n\n\n#Explanation:\n#Here, we have created a function named access_key which takes two arguments, dictionary and key. We are returning the value of the key in the dictionary by using square bracket notation. ",
        "generated_testcode": "assert access_key(ditionary={'a':1,'b':2,'c':3},key='b') == 2\n\n\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(nums) < 2:\n        return False\n    for i in range(len(nums)-1):\n        if nums[i] >= nums[i+1]:\n            return False\n    return True\n# example usage:\nprint(increasing_trend([1,2,3,4,5,6,7,8])) # True\nprint(increasing_trend([1,3,2,4,5,6,7])) # False\nprint(increasing_trend([1,2])) # True\nprint(increasing_trend([1])) # False ",
        "generated_testcode": "assert increasing_trend(1, 2, 3, 4, 5, 6, 7, 8) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an argument n and returns the smallest prime divisor of n.\n    It does this by iterating through all numbers from 2 to n/2 and checks if they divide n.\n    If a number divides n, it returns that number as the smallest prime divisor. If none of them divide n,\n    it returns n itself as n is prime.\n    \"\"\"\n    for i in range(2, n//2+1): \n        if n % i == 0: \n            return i \n    return n ",
        "generated_testcode": "assert smallest_Divisor(15) == 3\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x*y,nums1,nums2))\n\n#Example:\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8,10]\nprint(mul_list(nums1,nums2)) #[2, 8, 24, 40]\n\n\n#Solution:The above function multiplies two lists using map and lambda function. It takes two lists as input parameters nums1 and nums2. It returns a new list with the product of corresponding elements of both the lists.\n# The lambda function multiplies the elements of both the lists and returns the result. The map() function applies this lambda function to corresponding elements of both the lists and returns the new list. ",
        "generated_testcode": "assert mul_list([1,2,3], [4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, int(n/2)+1) : \n        j = n - i*i \n        if (j < 0) : \n            break\n        if (isPerfectSquare(i) and isPerfectSquare(j)) : \n            return True\n    return False\n\ndef isPerfectSquare(n) : \n    return int(n**0.5)**2 == n ",
        "generated_testcode": "assert sum_Square(5) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i == x:\n            count += 1\n    return count \n\n#Example usage\nstring = \"hello world\"\nchar = \"l\"\nprint(count_Char(string,char)) #Output: 3\n\n\n#Explanation:\n#In the above example, the function takes a string and a character as input. It then iterates through each character of the string and checks if it is equal to the given character. If it is, then it increments the count. Finally, it returns the count of occurrences of the character in the string. ",
        "generated_testcode": "assert count_Char(input(\"Enter a string: \"), input(\"Enter a character: \")) == int(input(\"Enter the expected count: \"))\n\n\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5)+1): \n            if num%i == 0: \n                return False\n        return True\n    prime_sum = 0\n    for i in range(2, n+1): \n        if is_prime(i): \n            prime_sum += i\n    return prime_sum ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17 # Sum of primes between 1 to 10 is 17 (2+3+5+7)\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for element in test_tup:\n        if element in result:\n            result[element] += 1\n        else:\n            result[element] = 1\n    return result\n\ntest_list = (1, 2, 3, 4, 2, 5, 6, 1, 3, 2, 3, 4, 7, 8, 2, 3, 4, 6, 3, 2)\nprint(freq_element(test_list)) ",
        "generated_testcode": "assert freq_element(('hello world') == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# Test the function with some examples\nprint(recur_gcd(20, 12)) # Output: 4\nprint(recur_gcd(17, 28)) # Output: 17\nprint(recur_gcd(60, 48)) # Output: 12\nprint(recur_gcd(15, 25)) # Output: 5 ",
        "generated_testcode": "assert recur_gcd(12, 8) == 4\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Test the function\nprint(len_complex(3,4)) # Expected output: 5.0\nprint(len_complex(5,12)) # Expected output: 13.0\nprint(len_complex(0,6)) # Expected output: 6.0\nprint(len_complex(0,-6)) # Expected output: 6.0\nprint(len_complex(-5,-12)) # Expected output: 13.0 ",
        "generated_testcode": "assert len_complex(3,4) == 5\n\n# Write a function to calculate the distance between two points in the Cartesian plane.\ndef distance(x1,y1,x2,y2):\n    pass\n\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return float('inf')\n    jumps = [float('inf')] * n\n    jumps[0] = 0\n    for i in range(1, n):\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j] != float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    return jumps[n-1]\n\ndef min_jumps_dp(arr, n):\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return float('inf')\n    jumps = [0] * n\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if i <= j + arr[j]:\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n    return jumps[n-1]\n\narr = [1, 3, 5, 8, 9, 2, 6, 2, 6, 8, 9]\nn = len(arr)\nprint(min_jumps(arr, n))\nprint(min_jumps_dp(arr, n)) ",
        "generated_testcode": "assert min_jumps(arr=[2, 3, 1, 1, 1, 4], n=4) == 2\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if not nums:\n        return []\n    res = []\n    for i in range(len(nums)-1):\n        res.append(nums[i]*nums[i+1])\n    return res\n\nprint(mul_consecutive_nums([1,2,3,4,5])) #[2, 6, 12]\n\nprint(mul_consecutive_nums([1,2,3,4,5,6])) #[2, 6, 12, 20]\nprint(mul_consecutive_nums([])) #[]\nprint(mul_consecutive_nums([1])) #[] ",
        "generated_testcode": "assert mul_consecutive_nums(list(range(1, 6)) == [1*2, 2*3, 3*4, 4*5]\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    result = {}\n    for key, value in test_list:\n        if value not in result:\n            result[value] = [key]\n        else:\n            result[value].append(key)\n    return result\n\n\n# Test the function with an example\ntest_list = [('a', 1), ('b', 2), ('c', 1), ('d', 3), ('e', 2), ('f', 1)]\nprint(group_element(test_list)) ",
        "generated_testcode": "assert group_element([(1, 2), (2, 3), (3, 2), (4, 3), (5, 1), (6, 2)] == {1: [5], 2: [1, 6], 3: [2, 3]} ",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    if N < 0: \n        return \"Invalid Input\"\n    elif N == 0: \n        return 1\n    else: \n        factorial = 1\n        for i in range(1, N + 1): \n            factorial = factorial * i % 100\n        return factorial \n    return factorial ",
        "generated_testcode": "assert last_Two_Digits(5) == 120\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    text1 = re.sub('\\s+', ' ', text1)\n    return text1.strip()\n\n# Testing the function with example\ntext1 = \"Hello,   this    is     an    example    of    remove    multiple   spaces  in a string.\"\nprint(remove_multiple_spaces(text1) ) # Output: \"Hello, this is an example of remove multiple spaces in a string.\" ",
        "generated_testcode": "assert remove_multiple_spaces(text1) == \"This is a string with    multiple spaces.\"\n\n\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_values = []\n    for key in test_dict:\n        if test_dict[key] not in unique_values:\n            unique_values.append(test_dict[key])\n    return unique_values\n\n# Example usage:\ntest_dict = {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3, \"e\": 2, \"f\": 4, \"g\": 1}\nprint(extract_unique(test_dict)) # Output: [1, 2, 3, 4] ",
        "generated_testcode": "assert extract_unique(\n    {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3, \"e\": 2, \"f\": 4, \"g\": 1, \"h\": 3, \"i\": 5}\n) == {1, 2, 3, 4, 5}\n\n# The output should be {1, 2, 3, 4, 5} ",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Compares each element of test_tup2 with its corresponding index in test_tup1. If the element is greater, it returns True, else False.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return tuple(result)\n\n# Test the function with the following tuples:\ntup1 = (1, 2, 3, 4, 5, 6)\ntup2 = (5, 2, 3, 2, 6, 7)\nprint(check_greater(tup1, tup2)) # Output: (False, True, True, False, True) ",
        "generated_testcode": "assert check_greater(('abc', (1, 2, 3, 4, 5)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    res = [] \n    for i in range(len(list1): \n        res.append((list1[i],list2[i])  \n    return res\n    \n#testing\nlist1 = [[1,2,3],[4,5,6],[7,8,9]]\nlist2 = [['a','b','c']]\nprint(zip_list(list1,list2)) ",
        "generated_testcode": "assert zip_list([\"a\", \"b\", \"c\"], [1, 2, 3]) == [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n\n\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of integers as input and returns the count of even numbers in the list using lambda function.\n    \"\"\"\n    return len(list(filter(lambda x: x%2==0, array_nums))\n\n\n# Example usage:\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_even(array_nums)) # Output: 5\n\n\narray_nums = [2, 4, 3, 6, 8, 10]\nprint(count_even(array_nums)) # Output: 4 ",
        "generated_testcode": "assert count_even([]), 0\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "34B",
        "pass": 8,
        "correct": true,
        "answer": "    return sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\n#Example\ntest_dict = {(4,3): 1, (1,2): 5, (4,1): 2, (2,4): 3, (2,3): 4, (1,5): 6}\nsorted_dict = sort_dict_item(test_dict)\nprint(sorted_dict) # [(1, 2), 5), (1, 5), (2, 4), (4, 3), (4, 1)]\n\n\n# Time complexity: O(nlogn) where n is the number of items in the dictionary. We are using the built-in sorted function which has a time complexity of O(nlogn). ",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted(test_dict.items(), key=lambda x: x[0][0]*x[0][1])\n\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str1) \n    count = 0 \n    for i in range(n): \n        if str1[i] != str2[i]: \n            count += 1\n    return count \n  \n# Driver code \nif __name__ == \"__main__\" : \n    str1 = \"10101\"\n    str2 = \"01110\"\n    print(min_Swaps(str1, str2)) ",
        "generated_testcode": "assert min_Swaps(10101,00011) == 2\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in li:\n        if i >= min and i <= max:\n            count += 1\n    return count\n\n# Example usage:\nli = [1, 3, 5, 7, 9, 12, 15, 18, 21]\nprint(count_range_in_list(li, 7, 15))  # Output: 2\n\nprint(count_range_in_list(li, 10, 20))  # Output: 3\nprint(count_range_in_list(li, 25, 30))  # Output: 0 ",
        "generated_testcode": "assert count_range_in_list(range(10), 3, 7) == 5\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        total_sum -= num\n        if left_sum == total_sum:\n            return i\n        left_sum += num\n    return -1\n\n# Test\narr = [-1, 2, 3, 4, -4, 5, 6, 7, 0]\nprint(equilibrium_index(arr)) # Output: 3 ",
        "generated_testcode": "assert equilibrium_index(arr=[-1, 2, 3, -4, 5, 6, 7, -8, 9]) == 3\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "                   arr):\n    if i == n:\n        return n\n    if arr[i] < key:\n        return i\n    return find_ind(key, i+1, n, arr)\n\ndef min_remove(arr, n, k):\n    arr.sort()\n    i = 0\n    ans = 0\n    while i < n:\n        key = arr[i] + k\n        j = find_ind(key, i+1, n)\n        if j == n:\n            return -1\n        i = j\n        ans += 1\n    return ans\n\n# Driver code\narr = [4, 8, 10, 12, 14]\nn = len(arr)\nk = 4\nprint(min_remove(arr, n, k)) ",
        "generated_testcode": "assert find_ind(5, [1, 3, 7, 9, 11, 15, 21], 6) == 1\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if x in d.keys():\n        return True\n    else:\n        return False\n\n#Testing the function\nd = {\"apple\": 5, \"banana\": 6, \"cherry\": 7, \"date\": 8}\nprint(is_key_present(d,\"banana\")) # True\nprint(is_key_present(d,\"orange\")) # False ",
        "generated_testcode": "assert is_key_present(d, 'apple') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"Return the harmonic sum of n-1.\"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\n# Test the function with n=5:\nprint(harmonic_sum(5))  # Output: 2.283333333333333333334\n\n\n# Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n    \"\"\"Return the geometric sum of n-1.\"\"\"\n    total = 1/2\n    for i in range(2, n):\n        total += 1/(2*i)\n    return total\n\n# Test the function with n=5:\nprint(geometric_sum(5))  # Output: 0.9375\n\n# Write a function to calculate the alternating harmonic sum of n-1.\ndef alternating_harmonic_sum(n):\n    \"\"\"Return the alternating harmonic sum of n-1.\"\"\"\n    total = 0\n    sign = 1\n    for i in range(1, n):\n        total += sign/(i*2)\n        sign *= -1\n    return total\n\n# Test the function with n=5:\nprint(alternating_harmonic_sum(5))  # Output: -0.25\n\n# Write a function to calculate the alternating geometric sum of n-1.\ndef alternating_geometric_sum(n):\n",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Sort a list of lists by length and value.\n\n    Args:\n        list1: A list of lists.\n\n    Returns:\n        A sorted list of lists, first by length and then by value.\n    \"\"\"\n    list1.sort(key=lambda x: (len(x), x)\n    return list1\n\n# Test case\nprint(sort_sublists([[4, 2, 1], [2, 3, 1], [5, 3, 2], [3, 1, 2, 4], [6, 4, 2, 1], [4, 1, 5, 3, 2], [1, 2, 3, 4, 5], [5, 2, 3, 1], [3, 4, 2, 1, 5], [1, 3, 2, 5, 4, 6]])\n# Output: [[1, 2], [2, 3, 1], [2, 1, 4], [1, 2, 3, 4, 5], [3, 1, 2, 4], [3, 4, 2, 1, 5], [4, 2, 1], [5, 3, 1], [4, 1, 5, 3, 2], [5, 2, 3, 1]] ",
        "generated_testcode": "assert sort_sublists([]), []\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": " \n    # Create two hash sets for the arrays. \n    set1 = set(arr1) \n    set2 = set(arr2) \n  \n    # Return True if every element of set1 is present in set2 \n    return set1.issubset(set2) ",
        "generated_testcode": "assert is_subset(arr1=[1, 2, 3, 4], m=3, arr2=[1, 2, 4, 3, 5, 6], n=4) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # function to count the number of set bits in binary  \n    # representation of a number  \n    def count_bits(n) : \n        count = 0\n        while (n) : \n            count += n & 1\n            n >>= 1\n        return count \n    # driver code  \n    total_bits = 0\n    for i in range(1, n + 1) : \n        total_bits += count_bits(i)\n    return total_bits ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    #initializing an empty list to store characters of the string \n    lst = [] \n  \n    # iterating through each character of the string and appending it to the list \n    for i in string: \n        lst.append(i) \n  \n    # returning the list \n    return lst ",
        "generated_testcode": "assert Convert(\u201chello\u201d) == [\u2018h\u2019, \u2018e\u2019, \u2018l\u2019, \u2018l\u2019, \u2018o\u2019]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_keys = {}\n    for i in test_list:\n        if i[1] not in unique_keys:\n            unique_keys[i[1]] = 1\n        else:\n            unique_keys[i[1]] += 1\n    return unique_keys\n\n#Example\ntest_list = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'a'), (5, 'b'), (6, 'c'), (7, 'd'), (8, 'b')]\nprint(get_unique(test_list)) # Output: {'a': 2, 'b': 3, 'c': 2, 'd': 1} ",
        "generated_testcode": "assert get_unique((\"apple\", \"banana\", \"cherry\", \"apple\", \"date\", \"cherry\") == {\"apple\": 2, \"banana\": 1, \"cherry\": 2, \"date\": 1}\n\n\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    return (test_tup[0],test_tup[-1])\n\n#Test the function\ntest_tuple = ('python', 'django', 'numpy', 'data science')\nprint(front_and_rear(test_tuple)) # ('python', 'data science')\n\n\n#Another solution could be:\ndef front_and_rear(test_tup):\n    return test_tup[0], test_tup[-1] ",
        "generated_testcode": "assert front_and_rear(('apple', 'banana', 'cherry', 'date', 'elderberry') == ('apple', 'elderberry')\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    even_product = 1\n    odd_product = 1\n    for i in range(0,len(n),2): \n        even_product *= int(n[i]) \n    for i in range(1,len(n),2): \n        odd_product *= int(n[i]) \n    return even_product == odd_product ",
        "generated_testcode": "assert product_Equal(123456) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    list1 = [list(t) for t in set(tuple(element) for element in list1)]\n    return list1\n\nlist1 = [[1, 2], [2, 3, 4], [3, 4], [5, 6, 7], [4, 8], [1, 2], [7, 6]]\nprint(remove_duplicate(list1))\n\n# Output: [[1, 2], [2, 3, 4], [3, 4], [5, 6, 7], [4, 8], [7, 6]] ",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"cherry\", \"apple\", \"orange\", \"banana\", \"kiwi\"] == [\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    valid_values = (\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\")\n    for item in test_tup:\n        if item not in valid_values:\n            return False\n    return True\n\n# test the function\nprint(check_valid((\"apple\", \"banana\", \"kiwi\", \"orange\")) # False\nprint(check_valid(\"banana\", \"kiwi\", \"date\")) # True ",
        "generated_testcode": "assert check_valid((\"Hello\", 2, 3, 4) == False\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    while n % 2 == 0:  \n        count += 1\n        n >>= 1\n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            count += 1\n            n = n/i  \n    if n > 2: \n        count += 1\n    return count ",
        "generated_testcode": "assert count_Fac(12) == 2 # Testing for n=12, output should be 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    # remove the parentheses from the string\n    test_str = test_str[1:-1]\n    # split the string by comma and convert each element to an integer\n    str_list = [int(x) for x in test_str.split(\",\")]\n    # convert the list to a tuple\n    tup = tuple(str_list)\n    return tup\n\n# test the function with an example string\nprint(str_to_tuple(\"(1, 2, 3, 4, 5, 6)\" ) ) # Output: (1, 2, 3, 4, 5, 6) ",
        "generated_testcode": "assert str_to_tuple(test_str) == (1, 2, 3, 4, 5)\n\n\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return 4 * a\n#Test the function with a=5\nprint(rombus_perimeter(5) == 20) # Output: True\n\n#Test the function with a=2.5\nprint(rombus_perimeter(2.5) == 10) # Output: True ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n\n# Write a function to find the area of a rombus.\ndef rombus_area(d):\n    pass\n\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "34B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(data)\n    avg = sum(data) / n\n    deviations = [(x - avg) ** 2 for x in data]\n    variance = sum(deviations) / n\n    return variance ** 0.5\n\n# Test the function with a list of numbers\ndata = [2, 4, 6, 8, 10, 12]\nprint(sd_calc(data))  # Output: 4.0\n\n\n# Test the function with a different list of numbers\ndata = [2, 4, 6, 8, 10, 12, 14]\nprint(sd_calc(data))  # Output: 4.0",
        "generated_testcode": "assert sd_calc(data=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2.0, \"Test 1 failed\"\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    }
]