[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        dp[i][0] = float('inf') \n    for j in range(n+1): \n        dp[0][j] = float('inf') \n    dp[0][0] = 0\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if i==1: \n                dp[i][j] = dp[i-1][j] + cost[i-1][j] \n            elif j==1: \n                dp[i][j] = dp[i][j-1] + cost[i][j-1] \n            else: \n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i-1][j-1] \n    return dp[m][n] ",
        "generated_testcode": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 6\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return tuple(result)\n\n# Test the function with sample tuple data\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (2, 4, 6, 8, 9, 10)\nprint(similar_elements(test_tup1, test_tup2))  # Output: (2, 4, 6) ",
        "generated_testcode": "assert similar_elements(('apple', 'banana', 'orange', 'pear', 'grape'), ('banana', 'orange', 'grape', 'kiwi')) == ('banana', 'orange', 'grape')\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes an integer as input and returns True if it's not a prime number, and False if it is.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test the function with some examples\nprint(is_not_prime(15)) # True\nprint(is_not_prime(17)) # False\nprint(is_not_prime(10)) # True\nprint(is_not_prime(7)) # False ",
        "generated_testcode": "assert is_not_prime(1) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    heapq.heapify(nums)\n    return [heapq.heappop(nums) for i in range(n)]\n\nimport heapq\n\nnums = [9, 1, 3, 5, 7, 4, 8, 6, 2, 6]\nn = 3\nprint(heap_queue_largest(nums, n)) # Output: [9, 8, 7] ",
        "generated_testcode": "assert heap_queue_largest([4, 10, 8, 2, 6, 12, 9, 15, 11], 3) == [15, 12, 11]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n < 1: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 1 \n    elif n == 3: \n        return 2 \n    else: \n        a, b = 1, 2\n        for i in range(4, n+1): \n            c = (a+b)%1000000000007 \n            a, b = b, c \n        return b ",
        "generated_testcode": "assert count_ways(0) == 0\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0: \n        return False\n    return (x & (x - 1)) == 0\n\ndef differ_by_one_bit(n, m):\n    if n == m: \n        return False\n    if not is_Power_Of_Two(n ^ m): \n        return True\n    return False\n    \n# Test the Function\nprint(differ_by_one_bit(8, 10)) # True\nprint(differ_by_one_bit(16, 10)) # False\nprint(differ_by_one_bit(16, 24)) # True\nprint(differ_by_one_bit(32, 24)) # False\nprint(differ_by_one_bit(20, 19)) # True\nprint(differ_by_one_bit(1024, 1023)) # True \nprint(differ_by_one_bit(1024, 512)) # False ",
        "generated_testcode": "assert is_Power_Of_Two(16) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Use regex to find all words at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    words = pattern.findall(text)\n    return words\n\n# Test the function\ntest_text = \"Python is a great language to learn, but it can be challenging at times.\"\nprint(find_char_long(test_text) # Output: ['Python', 'great', 'language', 'learn', 'challenging'] ",
        "generated_testcode": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'dog.']\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x ** 2, nums))\n\n# Example usage:\n# print(square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n# Output: [1, 4, 9, 16, 36, 49, 64, 81] ",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(str) \n    str += str \n    for i in range(n): \n        if str[i:i+n] == str[0:n]: \n            return i\n    return None\n\n# Driver code \nstr = \"geeks\"\nprint(find_Rotations(str)) ",
        "generated_testcode": "assert find_Rotations(\"hello\") == 0\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list of integers and an integer n as arguments and returns a list of n smallest elements in the list1\n    \"\"\"\n    list1.sort()\n    return list1[:n]\n\n# Test the function with an example\nlist1 = [4, 2, 1, 6, 8, 10, 3, 20, 15, 5]\nn = 3\nprint(small_nnum(list1, n)) # Output: [2, 3, 4] ",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if ch in s:\n        s = s.replace(ch,\"\",1)\n        s = s[::-1]\n        s = s.replace(ch,\"\",1)\n        s = s[::-1]\n        return s\n    else:\n        return s\n    \n#Example: \n#Input: \ns = \"geeksforgeeks@@\"\nch = \"@\"\nprint(remove_Occ(s,ch))\n\n#Output:\n#geeksforgeeks\n\n#Explanation:\n#In the given string, '@' is the first and last character. After removing the first and last occurrence of '@', the string becomes \"geeksforgeeks\"\n\n\n#Input:\ns = \"geeksforgeeks@sdnc@@\"\nch = \"@\"\nprint(remove_Occ(s,ch))\n#Output:\n#geeksforgeeks@sdnc\n#Explanation:\n#In the given string, '@' is present only at the first and last index. After removing the first and last occurrence of '@', the string becomes \"geeksforgeeks@sdnc\" ",
        "generated_testcode": "assert (remove_Occ(\"abcbc\",\"b\") == \"ac\")\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Step 1: create a list of tuples where each tuple contains the row and its sum\n    row_sums = [(sum(row), row) for row in M]\n    # Step 2: sort the list of tuples in ascending order based on the sums\n    row_sums.sort()\n    # Step 3: extract the sorted rows back from the tuples\n    sorted_M = [row for sum, row in row_sums]\n    return sorted_M\n\n# example usage:\nM = [[3, 1, 4], [1, 5, 6], [2, 7, 3]]\nprint(sort_matrix(M))  # should print [[3, 1, 4], [2, 7, 3], [1, 5, 6]] ",
        "generated_testcode": "",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count_dict = {}\n    for word in words:\n        if word not in count_dict:\n            count_dict[word] = 1\n        else:\n            count_dict[word] += 1\n    return count_dict\n\n\nwords = ['apple', 'banana', 'apple', 'orange', 'apple', 'apple', 'orange', 'banana', 'orange', 'grape']\nprint(count_common(words))  # Output: {'apple': 3, 'banana': 2, 'orange': 2, 'grape': 1} ",
        "generated_testcode": "assert count_common(['apple', 'banana', 'apple', 'orange', 'apple', 'banana', 'apple', 'orange']) == {'apple': 3, 'banana': 2, 'orange': 2}\n\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    volume = 0.5 * l * b * h \n    return volume \n  \n# Test the function with sample test cases \nprint(find_Volume(2,3,4) ) # Should be 6 \nprint(find_Volume(10,5,7) # Should be 350 \nprint(find_Volume(12,4,8) # Should be 384 ",
        "generated_testcode": "assert find_Volume(2,3,4) == 12\n\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # start by initializing an empty list to store the results\n    result = []\n    # initialize a temporary variable to store the current word\n    current_word = \"\"\n    # iterate through each character in the input string\n    for char in text:\n        # if the character is lowercase, add it to the current word\n        if char.islower():\n            current_word += char\n        # if the character is uppercase, add the current word to the result list and reset the current word\n        else:\n            result.append(current_word)\n            current_word = \"\"\n    # add the last word to the result list\n    result.append(current_word)\n    # return the result list\n    return result\n\n# test the function\nprint(split_lowerstring(\"helloWorldandAnotherWord\")) # [\"hello\", \"World\", \"and\", \"Another\", \"Word\"] ",
        "generated_testcode": "assert split_lowerstring(\"helloWorld\") == [\"hello\", \"World\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    current = \"\"\n    for c in text:\n        if c.islower() or c == \"_\":\n            current += c\n        else:\n            if current:\n                result.append(current)\n                current = \"\"\n    if current:\n        result.append(current)\n    return result\n\n# Test cases\nprint(text_lowercase_underscore(\"Hello_World\")) # [\"hello\", \"world\"]\nprint(text_lowercase_underscore(\"__Hello_Worl_d___\")) # [\"hello\", \"worl\", \"d\"]\nprint(text_lowercase_underscore(\"\")) # []\nprint(text_lowercase_underscore(\"a_b_c_d\")) # [\"a\", \"b\", \"c\", \"d\"]\nprint(text_lowercase_underscore(\"abc\")) # []\nprint(text_lowercase_underscore(\"1_2_3_4_5\")) # [\"1\", \"2\", \"3\", \"4\", \"5\"]\nprint(text_lowercase_underscore(\"a__b___c\")) # [\"a\", \"b\", \"c\"] ",
        "generated_testcode": "assert text_lowercase_underscore(\"hello_world\") == True\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    perimeter = 4 * a\n    return perimeter\n\n#Write a function to find the area of a square.\ndef square_area(a):\n    area = a * a\n    return area\n\n#Write a function to find the length of a square's diagonal.\ndef square_diagonal(a):\n    diagonal = (a * 2) ** 0.5\n    return diagonal ",
        "generated_testcode": "assert square_perimeter(5) == 20\n\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(string)\n\ndef remove_chars(str1, str2): \n    str1_list = str_to_list(str1) \n    str2_list = str_to_list(str2) \n    for char in str2_list: \n        if char in str1_list: \n            str1_list.remove(char) \n    return ''.join(str1_list) \n\n# Test the function with example \nstr1 = \"hello\"\nstr2 = \"l\"\nprint(remove_chars(str1, str2)) # Output: \"heo\" ",
        "generated_testcode": "assert str_to_list(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True\n\n# Example usage:\narraynums = [1,2,3,4,5,6,7,1,8,9]\nprint(test_duplicate(arraynums)) # True\narraynums = [1,2,3,4,5,6,7,8,9]\nprint(test_duplicate(arraynums)) # False ",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 4, 5, 6, 7]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if x < 1: \n        return False \n    while x > 1: \n        if x % 2 == 0: \n            x = x // 2 \n        elif x % 3 == 0: \n            x = x // 3 \n        elif x % 5 == 0: \n            x = x // 5 \n        elif x % 7 == 0: \n            x = x // 7 \n        else: \n            return False \n    return True ",
        "generated_testcode": "assert is_woodall(1) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    l = []\n    for i in range(1,m+1):\n        l.append(n*i)\n    return l\n\n#taking input from user\nm = int(input(\"Enter the value of m: \"))\nn = int(input(\"Enter the value of n: \"))\n#calling the function\nprint(multiples_of_num(m,n)) \n\n\n#Testing the function\n#Output:\n#Enter the value of m: 10\n#Enter the value of n: 5\n#[5, 10, 15, 20, 25, 30, 35, 40, 45, 50] ",
        "generated_testcode": "assert multiples_of_num(5, 10) == [10, 20, 30, 40, 50, 60]\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize an empty dictionary\n    seen = {}\n    # loop through each element in the array\n    for num in nums:\n        # if the element is in the dictionary, return the current element\n        if num in seen:\n            return num\n        # otherwise, add the element to the dictionary\n        else:\n            seen[num] = True\n    # if no duplicates are found, return -1\n    return -1\n\n# Test cases\nprint(find_first_duplicate([1, 2, 3, 4, 5, 2, 6, 1]))  # Output: 2\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6, 7]))  # Output: -1\nprint(find_first_duplicate([1, 1, 2, 3, 4, 5, 6]))  # Output: 1\nprint(find_first_duplicate([1, 1, 1, 2, 3, 4, 5]))  # Output: 1 ",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == None\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_sum = 0 \n    for i in list1: \n        sum = 0\n        for j in i: \n            sum += j \n        if sum > max_sum: \n            max_sum = sum \n    return max_sum\n\n#Test the function with example\nlist1 = [[1,2,3,4,5],[6,7,8,9],[10,11,12,13],[14,15,16,17]]\nprint(maximum_Sum(list1)) #Output: 45 ",
        "generated_testcode": "assert maximum_Sum([[1,2,3],[4,5,6],[7,8,9]]) == 25\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    decimal = 0\n    for digit in binary:\n        decimal = decimal*2 + int(digit)\n    return decimal\n\n#example usage:\nprint(binary_to_decimal('1101010')) #22 ",
        "generated_testcode": "assert binary_to_decimal(\"101010\") == 10\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr = sorted(set(arr)) \n    product = 1\n    for i in range(len(arr)): \n        product *= arr[i]\n    return product \n    \n# Test the function with sample inputs\narr = [2, 2, 3, 3, 4, 5, 5, 6, 6]\nn = len(arr)\nprint(find_Product(arr,n)) ",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9]) == 36 # Testing for a normal array\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(test_list) == K:\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs\n# Sample Input 1:\n# (1, 2, 3, 4, 5, 6, 7, 8, 9)\n# 5\n# Output: False\nprint(check_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 5) == False)\n\n# Sample Input 2:\n# (1, 2, 3, 4, 5, 6, 7, 8, 9)\n# 6\n# Output: True\nprint(check_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 6) == True) ",
        "generated_testcode": "assert check_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 9) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of strings as input and returns a list of strings with all digits removed.\n    \"\"\"\n    # use a loop to iterate over each string in the list\n    for i in range(len(list)):\n        # use a while loop to remove all digits from each string\n        while any(char.isdigit() for char in list[i]):\n            # use a loop to iterate over each character in the string\n            for char in list[i]:\n                # if the character is a digit, remove it from the string\n                if char.isdigit():\n                    list[i] = list[i].replace(char, \"\")\n    return list\n\n# Example usage:\nmy_list = [\"a1b2c3\", \"d4e5f6\", \"7g8h9i0\"]\nprint(remove(my_list)) # Output: ['abc', 'def', 'ghi'] ",
        "generated_testcode": "assert remove([\"hello\", \"world\", \"123\", \"python\", \"12345\", \"123abc\", \"abc456\"]) == [\"hello\", \"world\", \"\", \"python\", \"\", \"abc\"]\n\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if k < 0 or k > n:\n        return \"Invalid Value of k\"\n    else:\n        res = 1\n    for i in range(k):\n        res *= (n-i) \n        res //= (i+1)\n    return res\n# Test the function with example\nn = 5\nk = 2\nprint(binomial_Coeff(n,k)) \nn = 7\nk = 3\nprint(binomial_Coeff(n,k)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize a variable to store the result \n    result = 0\n      \n    # Traverse the array \n    for i in range(0, arr_size): \n        # XOR the element with the result \n        result = result ^ arr[i] \n      \n    return result ",
        "generated_testcode": "assert get_Odd_Occurrence([1,2,3,2,3,4,5,4,5,6,6,7,7,8,8,9,9,10,10]) == 1 ",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(s) \n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if s[i] == s[j]: \n                count += 1\n    return count \n# Driver program to test the function \ns = \"ababa\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(\"abcba\") == 4\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if not nums or k == 0:\n        return []\n    from collections import Counter\n    count = Counter(nums)\n    import heapq\n    heap = [(-freq, num) for num, freq in count.items()]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(k)]\n\n# Time: O(nlogn) + O(klogn) = O(nlogn)\n\n# Space:O(n)\n\n# Test cases:\n# nums = [1,1,1,1,2,2,3,3,3,3,4,4,4,4,4], k = 2 => [4,3]\n# nums = [1,2,3,4,4,4,4,4,4,4,4,4,5,5,5,5,6,6,6,6,6,7,7,7,8,8,9,9,9,9], k = 3 => [4,5,6]\n# nums = [1,2,3,4], k = 2 => [1,2] ",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    i = 2\n    max_Prime = -1\n    while n % i == 0: \n        max_Prime = i \n        n /= i \n    i += 1\n    while i * i <= n: \n        while n % i == 0: \n            max_Prime = i \n            n /= i \n        i += 1\n    if n > 1: \n        max_Prime = n \n    return int(max_Prime) ",
        "generated_testcode": "assert max_Prime_Factors(100) == 5\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = \"\"\n    while N > 0: \n        binary += str(N % 2) \n        N = N // 2\n    return binary[::-1] ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    total_sum = (N * (N + 1)) / 2  #sum of first N natural numbers \n    sum_of_ar = sum(ar)\n    missing_num = total_sum - sum_of_ar\n    return missing_num\n    \n# Driver code \nar = [1,2,3,4,5,6,7,8,9,10,11,12,13,15] \nN = 13\nprint(find_missing(ar,N))  # Output: 14 ",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10], 10) == None\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    i = 1\n    while n > 0:\n        n -= i\n        i += 1\n    return (i-1)**2\n\n# Test cases\nprint(find_rect_num(1)) # Output: 1\nprint(find_rect_num(2)) # Output: 4\nprint(find_rect_num(3)) # Output: 9\nprint(find_rect_num(4)) # Output: 16\nprint(find_rect_num(5)) # Output: 25\nprint(find_rect_num(6)) # Output: 36\nprint(find_rect_num(7)) # Output: 49\nprint(find_rect_num(8)) # Output: 64\nprint(find_rect_num(9)) # Output: 81\nprint(find_rect_num(10)) # Output: 100\nprint(find_rect_num(11)) # Output: 121\nprint(find_rect_num(12)) # Output: 144\nprint(find_rect_num(13)) # Output: 169\nprint(find_rect_num(14)) # Output: 196\nprint(find_rect_num(15)) # Output: 2225\nprint(find_rect_num(16)) # Output: 256\nprint(find_rect_num(17)) # Output",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if q == 0 :  \n        return -1 \n    nth_digit = -1\n    decimal = []  \n    result = p//q \n    p = p%q \n    decimal.append(result)\n    while p*10 >= q : \n        p = p*10\n        decimal.append(p//q) \n        p = p%q\n        if len(decimal) == N : \n            nth_digit = decimal[N-1] \n            break\n    return nth_digit \np = 4\nq = 7\nN = 3\nprint(\"The Nth digit of the proper fraction is :\",find_Nth_Digit(p,q,N)) ",
        "generated_testcode": "assert find_Nth_Digit(3, 7, 1) == 3\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ints = []\n    strings = []\n    for element in mixed_list:\n        if isinstance(element, int):\n            ints.append(element)\n        else:\n            strings.append(element)\n    \n    sorted_ints = sorted(ints)\n    sorted_strings = sorted(strings)\n    \n    return sorted_ints + sorted_strings\n\n\n# Example usage:\nmixed_list = [3, \"apple\", 1, \"banana\", 4, \"orange\", 2, \"grape\", \"kiwi\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 4, \"apple\", \"banana\", \"grape\", \"kiwi\"] ",
        "generated_testcode": "assert sort_mixed_list([3, 'apple', 1, 'banana', 4, 'orange', 2, 'pear']) == [1, 2, 3, 4, 'apple', 'banana', 'orange']\n\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_list = []\n    odd_list = []\n    for num in list1:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n\n\n# Test the function\nprint(div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))  #[2, 4, 6, 8, 10, 12], [1, 3, 5, 7, 9, 11, 13, 15] ",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (4, 5)\n\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for char in S:\n        freq[char] = freq.get(char, 0) + 1\n    \n    odd_count = 0\n    for char, count in freq.items():\n        if count % 2 != 0:\n            odd_count += 1\n        if odd_count > 1:\n            return False\n    return True\n\n# Test cases\nprint(rearange_string('aabbc')) # True\nprint(rearange_string('aabbcc')) # True\nprint(rearange_string('aabbccc')) # False ",
        "generated_testcode": "assert rearange_string(\"aaabbbcc\") == False\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    from collections import Counter\n    count = Counter(nums)\n    freq = {}\n    for num in count:\n        if count[num] > 1:\n            freq[num] = count[num]\n    return freq\n\n#Example\nnums = [1,2,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,7]\nprint(freq_element(nums)) ",
        "generated_testcode": "",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # use filter and lambda function to return a list of even numbers in nums\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Test the function with a sample list of numbers\nprint(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) #[2, 4, 6, 8, 10] ",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty dictionary \n    dict = {} \n    sum = 0\n    for i in range(n): \n        if arr[i] in dict: \n            dict[arr[i]] += arr[i] \n        else: \n            dict[arr[i] ] = arr[i] \n    for i in dict: \n        sum += dict[i] \n    return sum \n\n# Driver Code \narr = [1,2,3,4,2,5,6,1,8,4,9] \nn = len(arr) \nprint(find_Sum(arr, n)) # Output: 30\n",
        "generated_testcode": "",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\\b[a-z]+(_[a-z]+)+\\b')\n    result = pattern.findall(text)\n    return result\n\nprint(text_match(\"a_bc_def_ghj_klm_nop\"))\n\nprint(text_match(\"a1_bc_def2_gh3_jklm_nop\"))\nprint(text_match(\"abc_def_ghi_jklmnop_opqrstu_ghijklmn\"))\nprint(text_match(\"abcdef_ghijklmnop_opqrstu_ghijklmn\"))\nprint(text_match(\"a_bcdef_ghijklmnop_opqrstu_ghijklmn\"))\nprint(text_match(\"abc_defghijklmnop_opqrstu_ghijklmn\"))\nprint(text_match(\"a_bcdefghijklmnop_opqrstu_ghijklmn\")) ",
        "generated_testcode": "assert text_match(\"a_b_c\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    match = \"\"\n    for i in range(len(text)):\n        if text[i].isalpha():\n            match += text[i]\n        else:\n            break\n    return match\n\n# test the function with some examples\nprint(text_match_string(\"Hello world!\")) # should return \"Hello\"\nprint(text_match_string(\"123abc456\")) # should return \"\"\nprint(text_match_string(\"abc123def\")) # should return \"abc\"\nprint(text_match_string(\"A sentence with spaces\")) # should return \"A\" ",
        "generated_testcode": "assert text_match_string(\"Hello world!\") == \"Hello\"\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y): \n        x, y = y, x % y \n    return x \n  \ndef gcd_arr(arr, n): \n    result = arr[0] \n    for i in range(1, n): \n        result = find_gcd(result, arr[i]) \n    return result \n  \narr = [2, 4, 6, 8, 16] \nn = len(arr) \n  \nprint(gcd_arr(arr, n)) # Output: 2\n\n\n\ndef find_gcd(a,b):\n    if(b==0):\n        return a\n    else:\n        return find_gcd(b,a%b)\ndef gcd_arr(arr):\n    result=arr[0]\n    for i in range(1,len(arr)):\n        result=find_gcd(result,arr[i])\n    return result\narr=[2,4,8,12]\nprint(gcd_arr(arr))# Output:2 ",
        "generated_testcode": "assert find_gcd(12, 8) == 4\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(data) == len(set(data)):\n        return True\n    else:\n        return False\n\n# test the function with a list of distinct integers\nprint(test_distinct([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True)\n\n\n# test the function with a list of non-distinct integers\nprint(test_distinct([1, 2, 3, 4, 5, 6, 6, 7, 8, 9]) == False) ",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    def findLastDigit(n): \n        n = n%10\n        if(n<=1): \n            return n \n        else: \n            return 10 if n%2 == 0 else 2*findLastDigit(n//2) + n%2\n          \n    if(B > A): \n        A,B = B,A \n  \n    res = 1\n    for i in range(A,B+1): \n        res *= findLastDigit(i) \n        res = res%10\n          \n    return res ",
        "generated_testcode": "assert compute_Last_Digit(5, 10) == 2\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    # Convert integer to binary representation\n    binary_representation = bin(n)\n    # Convert to string and replace all 0's with 1's in odd positions (i.e. index 1, 3, 5, 7, ...)\n    binary_representation_odd_bits_set = ''.join(['1' if index % 2 == 1 and bit == '0' else bit for index, bit in enumerate(binary_representation[2:])])\n    # Convert back to integer\n    result = int(binary_representation[0:2] + binary_representation_odd_bits_set, 2)\n    return result\n\n# Test cases\nprint(odd_bit_set_number(12))  # Should print 23 (0b11000 -> 0b1101, which is 5 + 8)\nprint(odd_bit_set_number(35))  # Should print 47 (0b1000011 -> 0b101011, which is 32 + 16 + 2 + 1)\nprint(odd_bit_set_number(25))  # Should print 31 (0b110001 -> 0b11011, which is 32 + 8 + 1)\nprint(odd_bit_set_number(0))  # Should print 0\nprint(odd_bit_set_number(1))  # Should print 1 (",
        "generated_testcode": "assert odd_bit_set_number(0) == 0\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return [row[N] for row in nums]\n\n# Test the function with the sample input\ntwo_d_list = [[1,2,3],[4,5,6],[7,8,9]]\nprint(specified_element(two_d_list, 1)) # Output: [2, 5, 8] ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return min(input_list, key=lambda x: len(x))\n\n\n# Test the function with an example\nmy_list = [\"apple\", \"banana\", \"cherry\", \"banana\", \"orange\", \"date\", \"grape\", \"cherry\", \"orange\"]\nprint(min_length_list(my_list))  # Output: \"date\" ",
        "generated_testcode": "",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if x == y == z:\n        print(\"It's an equilateral triangle\")\n    else:\n        print(\"It's not an equilateral triangle\")\n\n\ncheck_equilateral(5,5,5)\ncheck_equilateral(3,4,5)\ncheck_equilateral(6,6,6)\ncheck_equilateral(10,10,10)\ncheck_equilateral(12,12,12)\ncheck_equilateral(10,10,8)\n\n\n# OR\n\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        return True\n    else:\n        return False\n\nprint(check_equilateral(5,5,5))\nprint(check_equilateral(3,4,5))\nprint(check_equilateral(6,6,6))\nprint(check_equilateral(10,10,10))\nprint(check_equilateral(12,12,12))\nprint(check_equilateral(10,10,8)) ",
        "generated_testcode": "assert check_equilateral(3, 3, 3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    area = b*h\n    return area\n\n# test the function with some examples\nprint(parallelogram_area(8,10)) # 80\nprint(parallelogram_area(12,4)) # 48\nprint(parallelogram_area(2.5,6)) # 15.0\nprint(parallelogram_area(7,0.5)) # 3.5\nprint(parallelogram_area(0,10)) # 0\nprint(parallelogram_area(-2,5)) # 0\nprint(parallelogram_area(3.5,7.5)) # 26.25\nprint(parallelogram_area(-3,-5)) # 0\nprint(parallelogram_area(5.5,-6)) # 0 ",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(check_Equality(\"python\"))  # True\nprint(check_Equality(\"apple\"))  # False\nprint(check_Equality(\"racecar\")) # True\nprint(check_Equality(\"Airport\")) # False\nprint(check_Equality(\"hello\"))  # False ",
        "generated_testcode": "assert (check_Equality(\"hello\") == True)\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = max(my_list)\n    min_val = min(my_list)\n    range_of_elements = max_val - min_val + 1\n    count = [0] * range_of_elements\n    output = [0] * len(my_list)\n\n\n    for i in my_list:\n        count[i - min_val] += 1\n\n\n    for i in range(1, len(count)):\n        count[i] += count[i - 1]\n\n\n    for i in my_list:\n        output[count[i - min_val] - 1] = i\n        count[i - min_val] -= 1\n\n\n    return output\n\n\nmy_list = [5, 3, 8, 1, 6, 9, 2, 4, 7, 0]\nprint(\"Original List:\", my_list)\nsorted_list = counting_sort(my_list)\nprint(\"Sorted List:\", sorted_list) ",
        "generated_testcode": "",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    tn = a * (1 - (r**n)) / (1 - r)\n    return tn\n\na = 2\nr = 0.5\nn = 5\ntn = tn_gp(a,n,r)\nprint(\"The tnth term of geometric series is:\", tn)\n\n#Output: The tnth term of geometric series is: 2.9702\n\n#Explanation: a=2, r=0.5, n=5\n#The tnth term of the geometric series can be found by the formula a/(1-r^n), where a is the first term and r is the common ratio. \n#Therefore, tn = 2 / (1-0.5^5) = 2.9702. ",
        "generated_testcode": "assert tn_gp(1, 5, 2) == 32\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    temp=num\n    rev=0\n    while temp>0:\n        rem=temp%10\n        rev=(rev*10)+rem\n        temp=temp//10\n    return rev\n\ndef is_less_than_twice_rev(num):\n    rev_num=rev(num)\n    if num==rev_num:\n        return False\n    return num-1==rev_num or num-2==rev_num\n\nnum=int(input(\"Enter a number: \"))\nif is_less_than_twice_rev(num):\n    print(f\"{num} is one less than twice its reverse\")\nelse:\n    print(f\"{num} is not one less than twice its reverse\") ",
        "generated_testcode": "assert rev(123) == False\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #Function to find the largest number that can be formed with the given digits\n    #Sort the array in descending order\n    arr.sort(reverse=True)\n    #Initialize a string to store the largest number\n    str_num=\"\"\n    #Iterate through the array and append each element to the string str_num\n    for i in range(n) : \n        str_num+=str(arr[i])\n    #Return the integer value of the string\n    return int(str_num)\n# Test the function with an example\narr= [1, 4, 2, 3, 5, 6, 7] \nn=len(arr) \nprint(find_Max_Num(arr,n) # Output: 7654321 ",
        "generated_testcode": "assert find_Max_Num([1, 3, 4, 5, 8, 7]) == 85431\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x<0:\n        if y>0:\n            return True\n    elif y<0:\n        return True\n    else:\n        return False\nprint(opposite_Signs(-5,-6)) #True\nprint(opposite_Signs(5,-6)) #False\nprint(opposite_Signs(0,-6)) #False\nprint(opposite_Signs(5,6)) #False\nprint(opposite_Signs(5,0)) #False\nprint(opposite_Signs(0,6)) #False ",
        "generated_testcode": "assert opposite_Signs(5, -6) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # octagonal number is a number of the form n * (3 * n - 2) \n    # where n is a positive integer\n    i = 1\n    while True:\n        octagonal = i * (3 * i - 2)\n        if octagonal == n:\n            return True\n        elif octagonal > n:\n            return False\n        i += 1\n\ndef nth_octagonal(n):\n    if n < 1:\n        return None\n    else:\n        return (n * (3 * n - 2))",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_len = 1\n    # Create a hash table to store the last seen position of each element in the array\n    last_seen = {}\n    for i in range(n): \n        # For each element in the array, calculate its required difference \n        # and check if it is present in the hash table or not\n        diff = arr[i] - i \n        # If the required difference is not present in the hash table, update max_len\n        if diff not in last_seen: \n            last_seen[diff] = i \n            max_len = max(max_len, i + 1)\n        else: \n            # If the required difference is present in the hash table, update max_len \n            max_len = max(max_len, i - last_seen[diff]) \n    return max_len \n  \n# Driver code \narr = [1, 5, 3, 2, 7, 9, 8] \nn = len(arr) \nprint(max_len_sub(arr, n)) # Output: 4 ",
        "generated_testcode": "",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(n):\n        for j in range(i,n):\n            sub=s[i:j+1]\n            if sum(int(k) for k in sub)==len(sub):\n                count+=1\n    return count\nn=int(input())\ns=input()\nprint(count_Substrings(s,n)) ",
        "generated_testcode": "assert count_Substrings(\"123\") == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if not xs:\n        return None\n    else:\n        return min(xs)\n\n# Test cases\nprint(smallest_num([3, 4, 5, 1, 6, 2, -2, 0]) == -2)\nprint(smallest_num([]) == None)\nprint(smallest_num([5, 4, 3, 2, 1]) == 1)\nprint(smallest_num([-5, 0, 5, 10, 100, -1000, 10000]) == -100) ",
        "generated_testcode": "assert smallest_num([3, 5, 1, 2, 8, 4]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of tuples containing the time period and its usage, find the maximum difference between the usage over all pairs of tuples\n    :param test_list: List of tuples containing the time period and its usage\n    :return: Maximum difference between any two tuples\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j][1] - test_list[i][1])\n            max_diff = max(max_diff, diff)\n    return max_diff\n\n# Test the function with sample input\nprint(max_difference([(('00:00', 10), ('01:00', 20), ('02:00', 30), ('03:00', 40), ('04:00', 60), ('05:00', 10), ('06:00', 5)]))  # Output: 50\nprint(max_difference([('00:00', 10), ('01:00', 20), ('02:00', 30)]))  # Output: 20\nprint(max_difference([]))  # Output: None\nprint(max_difference([('00:00', 10",
        "generated_testcode": "assert max_difference((1, 2, 3, 10, 4, 7, 6, 9, 11, 5) == 8\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1])\n\n\nsubjects = [('Maths', 90), ('Science', 80), ('Social', 95), ('English', 85), ('Hindi', 92)]\nprint(subject_marks(subjects)) ",
        "generated_testcode": "",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"Return the sum of a list using recursion\"\"\"\n    if not data_list:  # base case\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n# test the function\nprint(recursive_list_sum([1, 2, 3, 4, 5]))  # Output: 15\nprint(recursive_list_sum([10, -2, 5, 1.5, 8, 7]))  # Output: 20.5\nprint(recursive_list_sum([]))  # Output: 0 ",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n#Test the function\nlist1 = [1, -2, 3, 4, -5, 6, -7, 8, 9, 0]\nlist2 = [0, -1, -2, -3, -4, -5]\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(pos_count(list1))\nprint(pos_count(list2))\nprint(pos_count(list3)) ",
        "generated_testcode": "assert pos_count([1, -2, 3, 4, -5, 6, -7, 8, 0, -9, 10]) == 4\n\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    bell = [[0 for i in range(n+1)] for j in range(n+1)]   \n    bell[0][0] = 1\n    for i in range(n+1):  \n        bell[i][0] = 1\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i] * j\n    return bell[n][0] ",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(A)<=2:\n        return True\n    i=1\n    j=1\n    while i<len(A) and j<len(A):\n        if A[i]>A[i-1]:\n            while j<len(A) and A[j]>=A[j-1]:\n                j+=1\n        elif A[i]<A[i-1]:\n            while j<len(A) and A[j]<=A[j-1]:\n                j+=1\n        else:\n            return False\n        i=j\n    return True\n\nA = [1,2,3,4,4,4,5]\nprint(is_Monotonic(A)) #True\nA = [1,2,3,4,5,4,5]\nprint(is_Monotonic(A)) #True\nA = [1,2,3,3,2,1]\nprint(is_Monotonic(A)) #False\nA = [1,2,2,2,2,3]\nprint(is_Monotonic(A)) #True ",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sub_list = True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n\n\n# test the function with sample inputs\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ns1 = [2, 3, 4]\ns2 = [7, 8]\ns3 = [1, 2]\ns4 = [8, 9, 10, 11]\nprint(is_sublist(l, s1))  # True\nprint(is_sublist(l, s2))  # True\nprint(is_sublist(l, s3))  # False\nprint(is_sublist(l, s4))  # False ",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = all(len(i) == len(Input[0]) for i in Input)\n    return result\n\n#Example\nInput = [(1, 2, 3), (4, 5, 6, 7), (6, 7), (8, 9, 10, 11)]\nk = 2\nOutput:False \n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nk = 3\nOutput:True ",
        "generated_testcode": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n            i += 1\n            gap_i = i + gap\n            while gap_i < n:\n                if nums[gap_i] < nums[gap_i - gap]:\n                    swap(gap_i, gap_i - gap)\n                    sorted = False\n                gap_i += 1\n\n    return nums\n\n# Example usage:\nnums = [5, 2, 9, 1, 4, 7, 6, 3, 8, 0]\nsorted_nums = comb_sort(nums)\nprint(sorted_nums)  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "generated_testcode": "",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if(n == 0):\n        return True\n    for i in range(int(n/2)+1):\n        x = i*i\n        y = n-x\n        if(y < 0):\n            break\n        if((int(y**(0.5))**2) == y):\n            return True\n    return False\n\n#Test the function with example\nn = 100\nif(dif_Square(n) == True):\n    print(\"The number\", n, \"can be represented as difference of two squares\")\nelse:\n    print(\"The number\", n, \"cannot be represented as difference of two squares\")\n\nn = 13\nif(dif_Square(n) == True):\n    print(\"The number\", n, \"can be represented as difference of two squares\")\nelse:\n    print(\"The number\", n, \"cannot be represented as difference of two squares\") ",
        "generated_testcode": "assert (dif_Square(121)) # True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    # define the delimiters\n    delimiters = [\";\", \",\" \"|\", \"/\"]\n    # create an empty list to store the result\n    result = []\n    # use regex to split the string\n    for delimiter in delimiters:\n        # remove the delimiter\n        text = re.sub(delimiter, \"\", text)\n        # split the string based on the delimiter\n        splitted_text = re.split(delimiter, text)\n        # add the splitted text to the result list\n        result.extend(splitted_text)\n    return result\n\n# test the function\ntext = \"apple,banana;orange|grape/mango\"\nprint(multiple_split(text)) # should print [\"apple\", \"banana\", \"orange\", \"grape\", \"mango\"] ",
        "generated_testcode": "assert multiple_split(\"Hello, world! This is a test string.\") == [\"Hello\", \"world\", \"This\", \"is\", \"a\", \"test\", \"string\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == \"C\":\n            if colors[i] != colors[0]:\n                return False\n        elif patterns[i] == \"N\":\n            if colors[i] == colors[0]:\n                return False\n    return True\n\n# test the function\ncolors = [\"red\", \"green\", \"red\", \"green\", \"red\"]\npatterns = [\"N\", \"C\", \"C\", \"C\"]\nprint(is_samepatterns(colors, patterns)) # True\n\n\ncolors = [\"red\", \"green\", \"blue\", \"red\", \"green\"]\npatterns = [\"N\", \"C\", \"C\", \"C\"]\nprint(is_samepatterns(colors, patterns)) # False\n\n\ncolors = [\"red\", \"green\", \"red\", \"green\"]\npatterns = [\"C\", \"C\", \"C\", \"C\"]\nprint(is_samepatterns(colors, patterns)) # False ",
        "generated_testcode": "assert is_samepatterns(['red', 'green', 'blue', 'yellow'], ['a', 'b', 'c']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [t for t in test_list if all(i%K==0 for i in t)]\n\n# example usage:\ntuples_list = [(1,2,3), (2,4,6), (4,8,12), (6,12,18), (1,3,5)]\nk = 3\nresult = find_tuples(tuples_list, k)\nprint(result) # [(6, 12, 18)] ",
        "generated_testcode": "",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i==j:\n                count+=1\n            elif i>j:\n                count+=1\n                break\n    return count\n\n#test the function\nprint(count_Squares(4,5)) #output: 2\nprint(count_Squares(6,6)) #output: 6 ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_odd = 0\n    sum_even = 0\n    for i in str(n):\n        if int(i) % 2 != 0:\n            sum_odd += int(i)\n        else:\n            sum_even += int(i)\n    return abs(sum_odd - sum_even)\n\nn = input(\"Enter a number: \")\nprint(\"Difference between sum of even and odd digits: \", is_Diff(n)) ",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n+1): \n        # Count the number of set bits in binary representation of i \n        set_bits = bin(i).count('1') \n        # If set bits are odd, increment count \n        if(set_bits % 2 != 0): \n            count += 1\n    return count \n\n# Driver code to test the function \nn = 10\nprint(count_With_Odd_SetBits(n)) ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 4\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n# Example usage:\nprint(word_len(\"Python\")) # Output: Odd\nprint(word_len(\"Hello\")) # Output: Even ",
        "generated_testcode": "assert word_len(\"hello\") == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (n + 1) * (n + 2) // 6 ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    zipped_tup = tuple(zip(test_tup1, test_tup2))\n    return zipped_tup\n\n\n# Test the function with some sample tuples\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7)\nprint(zip_tuples(test_tup1, test_tup2))\n# Output: ((1, 5), (2, 6), (3, 7))\n\n\ntest_tup3 = ('a', 'b', 'c')\ntest_tup4 = ('d', 'e', 'f', 'g', 'h')\nprint(zip_tuples(test_tup3, test_tup4))\n# Output: (('a', 'd'), ('b', 'e'), ('c', 'f')) ",
        "generated_testcode": "assert zip_tuples((1, 2, 3), (4, 5, 6)) == ((1, 4), (2, 5), (3, 6))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14159\n    vol = (4/3) * pi * r ** 3\n    return vol\n\n# Test the function\nprint(volume_sphere(5)\n# Output: 523.6\nprint(volume_sphere(3)\n# Output: 1133.1\nprint(volume_sphere(10)\n# Output: 41888.7",
        "generated_testcode": "assert volume_sphere(5) == 523.6\n\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0  \n    for i in strr:  \n        sum += ord(i)  \n    return chr(sum)  \n  \n# Example usage: \nstring = \"MNE\"\nprint(\"The character made by adding all the characters of the string:\", get_Char(string) ) ",
        "generated_testcode": "assert get_Char(\"Hello\") == \"H\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n):\n            sequence.append(sequence[-1] + sequence[-2])\n        return sequence[-1] + sequence[-2]\n\ndef newman_conway(n):\n    if n == 0:\n        return \"Invalid\"\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = [0, 1]\n        for i in range(2, n+1):\n            sequence.append(sequence[-1] + sequence[-2])\n        return \" \".join(str(x) for x in sequence)\n        ",
        "generated_testcode": "assert sequence(1) == 1\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    return 4 * pi * r**2\n\n#Test the function\nprint(surfacearea_sphere(5)\nprint(surfacearea_sphere(7)\nprint(surfacearea_sphere(10) ",
        "generated_testcode": "assert surfacearea_sphere(5) == 314.1592653589793\n\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * ((2 * n) - 1)) if n > 0 else 1\n\n# Test the function\nprint(centered_hexagonal_number(1)) # 1\nprint(centered_hexagonal_number(2)) # 5\nprint(centered_hexagonal_number(3)) # 15\nprint(centered_hexagonal_number(4)) # 33\nprint(centered_hexagonal_number(5)) # 61\nprint(centered_hexagonal_number(6)) # 91\nprint(centered_hexagonal_number(7)) # 145\nprint(centered_hexagonal_number(8)) # 207\nprint(centered_hexagonal_number(9)) # 281 ",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n\n#Example usage:\ndict1 = {'a':1, 'b':2, 'c':3}\ndict2 = {'d':4, 'e':5}\ndict3 = {'f':6, 'g':7, 'h':8}\n\nprint(merge_dictionaries_three(dict1, dict2, dict3)) #Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8} ",
        "generated_testcode": "",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n#Example usage:\nlist1 = [1,2,3,4,2,5,6,3,7,8,9,1,2,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,0]\nprint(freq_count(list1)) ",
        "generated_testcode": "",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    res = []\n    for i in range(1,N):\n        res.append(i)\n    res.sort(key=lambda x: abs(x-N))\n    return res[0]\n\n# Test the function with an example:\nprint(closest_num(8)) # Output: 7 ",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# Test the function with a list of words\nlist_of_words = [\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\", \"watermelon\", \"kiwifruit\", \"strawberry\"]\nprint(len_log(list_of_words) # Output: 9 ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"grape\", \"orange\", \"watermelon\"]) == 9\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # converting the string into lower case to avoid case mismatch\n    str1 = str1.lower()\n    # converting the sub string into lower case to avoid case mismatch\n    sub_str = sub_str.lower()\n    # using the split function to split the string into words\n    str_list = str1.split()\n    # loop through the list to check if the sub string is present in any word\n    for i in str_list:\n        if sub_str in i:\n            return True\n    # return False if the sub string is not present in any word\n    return False\n\n# Testing the function with sample inputs\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"the\")) # True\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"fox\")) # True\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"foxjumps\")) # False\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"dog\")) # True\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"lazy dog\")) # True\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"fox dog\")) # False\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"Lazy\")) # True\nprint(find_substring(\"The quick brown fox jumps over the lazy dog\", \"fox1\")) # False ",
        "generated_testcode": "assert find_substring(['hello', 'world', 'hi', 'python', 'pythonista'], 'py') == ['python', 'pythonista']\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    num_str = str(n)\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] != '0' and num_str[i] == num_str[i - 1] and num_str[i] == num_str[i + 1]:\n            return False\n    return True\n\ndef is_undulating(n):\n    prev_digit = ''\n    for digit in str(n):\n        if digit == prev_digit:\n            return False\n        prev_digit = digit\n    return True\n\n# Test cases\nprint(is_undulating(12321045321)) # True\nprint(is_undulating(123221045321)) # False\nprint(is_undulating(123456789)) # False\nprint(is_undulating(10101010101)) # True\nprint(is_undulating(9887654321)) # False ",
        "generated_testcode": "assert is_undulating(123235321) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n\n#Test the function with some examples\nprint(power(2,3)) #output:8\nprint(power(10,2)) #output:100\nprint(power(5,4)) #output:625\nprint(power(3,0)) #output:1\nprint(power(0,5)) #output:0 (Because anything raised to 0 is 1, except when the number is 0. In this case, 0 raised to any power is 0) ",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    index, value = min(enumerate(test_list), key=lambda x: x[1])\n    return index\n\n#test the function with a sample list\ntest_list = [5, 3, 1, 7, 2, 8, 4]\nprint(index_minimum(test_list)) # Output: 2 ",
        "generated_testcode": "assert index_minimum([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]) == (0, 1)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not lst:  # Check if list is empty\n        return None\n    return min(len(lst) for lst in lst)  # Use min() function to find the minimum length of sublist\n\n# Test the function with an example\nprint(Find_Min_Length([[1, 2, 3, 4], [5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 222, 23, 24, 25, 26], [27, 28, 29, 30, 31, 32, 33, 34], [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]))  # Output: 2\n\n\n\n# Time Complexity: O(n) where n is the number of sublists\n# Space Complexity: O(1) as we are only using a constant amount of space to store the minimum length found so far. ",
        "generated_testcode": "assert Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(10)) # 4\nprint(divisor(12)) # 6\nprint(divisor(15)) # 4\nprint(divisor(20)) # 5 ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\nlist1 = [1, 2, 3, 4, 2, 5, 6, 3, 2, 7, 8, 9, 1, 2, 4, 5, 6, 3, 2, 5, 6, 7, 8, 9, 3]\nprint(frequency_lists(list1))\n\n\n# Output: {1: 2, 2: 4, 3: 3, 4: 3, 5: 3, 6: 3, 7: 2, 8: 2, 9: 2} ",
        "generated_testcode": "",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    product = 1\n    for num in numbers:  \n        product *= num  \n    return product/len(numbers)  \n\n#Example Usage:  \nlist1 = [1,2,3,4,5]  \nprint(multiply_num(list1) # Output: 6.0 ",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 30\n\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    binary = \"\" \n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n\n# Test the function with an example\nprint(decimal_to_binary(10)) ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    num = str(num)\n    n = len(num)\n    if n == 1:\n        return int(num) + 1\n    mid = n//2\n    left = num[:mid]\n    right = num[mid:n] if n%2 == 0 else num[mid+1:n]\n    if left == right:\n        return next_smallest_palindrome(int(num)+1)\n    next_num = int(left)\n    next_num += 1\n    return int(left[:-1] + str(next_num) + left[::-1]) if next_num > int(right) else int(left[:-1] + str(next_num) + left[:-1]) + str(next_num) ",
        "generated_testcode": "assert next_smallest_palindrome(123) == 131\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    return arr[k-1]\n\n\n# Example usage:\narr = [7, 10, 4, 20, 3, 23, 2, 11]\nn = len(arr)\nk = 3\nprint(kth_element(arr, n, k)) # Output: 7\n\n\n# Time Complexity: O(nlogn) (due to sorting)\n# Space Complexity: O(1) (sorting is done in-place) ",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9], 6, 3) == 6\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    words = word.split('_')\n    camel = words[0]\n    for w in words[1:]:\n        camel += w.capitalize()\n    return camel\n\n# test case\nprint(snake_to_camel('hello_world')) # helloWorld\nprint(snake_to_camel('this_is_a_test')) # thisIsATest\nprint(snake_to_camel('longer_example')) # longerExample ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or m == 0:\n        return 1\n    if n < 0 or m < 0:\n        return 0\n    if m >= 2*n - 1:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-2*n+2)\n    else:\n        return 0\n\n# test the function\nprint(eulerian_num(5, 3)) # should be 1\nprint(eulerian_num(3, 4)) # should be 0\nprint(eulerian_num(10, 10)) # should be 55\nprint(eulerian_num(7, 13)) # should be 1284",
        "generated_testcode": "assert eulerian_num(2, 2) == 6\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sorted(sublist, key=lambda x: x[1]) for sublist in input_list]\n\n# Test the function with an example:\nexample_list = [['apple', 'orange', 'banana'], ['car', 'jeep', 'boat'], ['hello', 'world', 'python']]\nprint(sort_sublists(example_list)) # Output: [['apple', 'banana', 'orange'], ['boat', 'car', 'jeep'], ['hello', 'python', 'world']] ",
        "generated_testcode": "",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count ",
        "generated_testcode": "assert count([True, False, True, True, False, True]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return tuple(list(test_list) + list(test_tup))\n\n\n# testing the function with sample data\ntest_list = [2, 3, 4]\ntest_tup = (1, 2, 3)\nprint(add_lists(test_list, test_tup)) # Output: (2, 3, 4, 1, 2, 3) ",
        "generated_testcode": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in range(L,R+1):\n        hex_num = hex(num)\n        hex_num = hex_num[2:]\n        if all(c in '0123456789ABCDEF' for c in hex_num):\n            count += 1\n    return count\n\n# Example usage :\nL = 1\nR = 1000\nprint(count_Hexadecimal(L,R)) \n# Output : 220 \n# The numbers in the range 1 to 100 (both inclusive) which have hexadecimal representation are 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1A, 1B, 1C, 1D, 1E, 1F, 20, 21, 23, 24, 25, 26, 27, 28, 29, 2A, 2B, 2C, 2D, 2E, 2F, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 3A, 3B, 3",
        "generated_testcode": "assert count_Hexadecimal(1, 10) == 2\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Merge multiple sorted iterators into a single sorted iterator.\n    \n    Args:\n    num1(iterator): sorted iterator 1\n    num2(iterator): sorted iterator 2\n    num3(iterator): sorted iterator 3\n    \n    Returns:\n    iterator: sorted iterator with elements from all input iterators\n    \"\"\"\n    num1 = iter(num1)\n    num2 = iter(num2)\n    num3 = iter(num3)\n    output = []\n    i1, i2, i3 = None, None, None\n    while True:\n        i1 = next(num1, None) if i1 is None else i1\n        i2 = next(num2, None) if i2 is None else i2\n        i3 = next(num3, None) if i3 is None else i3\n        if i1 is None and i2 is None and i3 is None:\n            break\n        min_val = min(i1, i2, i3) if i1 and i2 and i3 else i1 or i2 or i3\n        output.append(min_val)\n        if min_val == i1:\n            i1 = None\n        elif min_val == i2:\n            i2 = None\n        else:\n            i3 = None\n    return iter(output)\n\n# Test Cases\nlist1 = [1,3,5,7,9]\nlist2 = [2,4,6,8,10]\nlist3 =",
        "generated_testcode": "",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in range(n): \n        if s[i]=='1': \n            count+=1\n    return count\n\ndef binary_rotation(s): \n    n=len(s) \n    ans=0\n    for i in range(n): \n        s=s[1:]+s[0] \n        ans+=odd_Equivalent(s,n) \n    return ans\nprint(binary_rotation('101010')) ",
        "generated_testcode": "",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    all_ranges = set(range(strt_val, stop_val+1))\n    return sorted(list(all_ranges - set(test_list)) if test_list else [])\n\n\n#Example:\n#extract_missing([1, 2, 3, 4, 5], 1, 10) will return [6, 7, 8, 9, 10]\n#extract_missing([1, 3, 5, 7, 9], 1, 10) will return [2, 4, 6, 8, 10]\n#extract_missing([], 1, 5) will return [1, 2, 3, 4, 5]\n#extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 10], 1, 9) will return [9]\n#extract_missing([1, 3, 5, 7, 9], 0, 12) will return [0, 2, 4, 6, 8, 10, 11, 12] ",
        "generated_testcode": "",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create an empty list to store the common elements\n    common_elements = []\n    # Create a set for each sublist in the nestedlist\n    sets = [set(sublist) for sublist in nestedlist]\n    # Find the intersection of all sets and add it to the common_elements list\n    common_elements = list(set.intersection(*sets))\n    # Return the common_elements list\n    return common_elements ",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {3}\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #Calculate the circumference of the cylinder\n    circumference = math.pi * diameter\n    #Calculate the height of the cylinder\n    height = height\n    #Calculate the slant height\n    slant_height = math.sqrt(diameter**2/2)\n    #Calculate the perimeter of lateral surface\n    lateral_surface = 2*math.pi*slant_height\n    #Calculate the perimeter of top and bottom surface\n    end_surface = diameter * math.pi\n    #Return the total perimeter\n    return 2*circumference + 2*lateral_surface + end_surface ",
        "generated_testcode": "assert perimeter(5,10) == 78.139797567248060692\n\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if text.startswith('-'):\n        return text[1:].isdigit()\n    else:\n        return text.isdigit()\n\n# example usage:\nprint(check_integer(\"-123\")) # True\nprint(check_integer(\"123\")) # True\nprint(check_integer(\"12.3\")) # False\nprint(check_integer(\"12a\")) # False ",
        "generated_testcode": "assert check_integer(\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict\n\n# test the function\ntest_list = [('apple', 'orange', 'banana', 'apple', 'orange', 'apple', 'banana', 'orange', 'apple')]\nprint(assign_freq(test_list))\n\n\n# Output: {'apple': 3, 'orange': 2, 'banana': 2} ",
        "generated_testcode": "",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:\n        if i:\n            return False\n    return True\n\n#Example:\n#Input:\n#list1 = [{},{},{},{}]\n#Output: True\n#Input:\n#list1 = [{1:2},{},{},{}]\n#Output: False ",
        "generated_testcode": "assert empty_dit([{}, {}, {}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        return int(\"\".join(str(i) for i in nums))\n\n# Example usage:\n# print(tuple_to_int((1, 2, 3, 4))  # Output: 1234\n# print(tuple_to_int((9, 0, 9, 9))  # Output: 909\n# print(tuple_to_int((1, 0, 0, 0))  # Output: 100\n\n\n# Or, using a one-liner:\ndef tuple_to_int(nums):\n    return int(\"\".join(str(i) for i in nums)) if nums else 0 ",
        "generated_testcode": "assert tuple_to_int((1, 2, 3, 4, 5)) == 12345\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_list:\n        try:\n            result.append(float(i))\n        except ValueError:\n            result.append(i)\n    return result\n\ndef main():\n    test_list = [\"1\", \"2.5\", \"3\", \"hello\", \"4.2\", \"world\", \"5.5\"]\n    print(list_to_float(test_list))\n\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(string)\n# test the function\nprint(string_to_list('hello world')) ",
        "generated_testcode": "assert string_to_list(\"hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\n\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    low=0\n    high=n-1\n    while low<=high:\n        mid=(low+high)//2\n        if low<high and (arr[low]==arr[low+1]==arr[high]==arr[mid] or arr[mid]==arr[mid+1]):\n            if arr[mid]==arr[low]:\n                low=mid+1\n            elif arr[mid]==arr[high]:\n                high=mid-1\n            else:\n                return mid\n        elif low<high and arr[low]==arr[low+1] and arr[mid]==arr[mid+1] and high==low+1:\n            return low\n        elif low<high and arr[low]==arr[low+1] and arr[mid]==arr[mid+1] and high==low:\n            return high\n        elif arr[mid]==arr[low] and arr[mid]==arr[high]:\n            return high\n        else:\n            return mid\n    return -1\n\narr=[1,1,2,2,3,3,4,4,5,5,6,6]\nn=len(arr)\nprint(search(arr,n)) ",
        "generated_testcode": "assert search([1,1,2,2,3,3,4,5,5,6,6,7,7,8,8,9,9,10,10,11]) == 4\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# test the function with a sample input\nprint(max_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) # output: 70 ",
        "generated_testcode": "assert max_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)]) == 63\n\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(0, n-2):\n        # Initialize two pointers\n        left = i+1\n        right = n-1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                count += 1\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return count\n\n\n# Driver code\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nn = len(A)\nsum = 23\ncount = 0\nresult = check_triplet(A, n, sum, count)\nif count == 0:\n    print(\"No triplet found with the given sum\")\nelse:\n    print(\"Triplet found\") ",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, 0) == (1, 6, 8)\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i=1\n    count=0\n    while True:\n        for j in range(1,i+1):\n            if i%j==0:\n                count+=1\n        if count==n:\n            return i\n            break\n        else:\n            i+=1\n            count=0\nprint(smartNumber(2)) ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize the sum\n    total = 0\n    # Iterate through the range from 1 to the limit\n    for i in range(1, limit + 1):\n        # Find the sum of divisors of i\n        div_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                div_sum += j\n        # Check if i and div_sum are amicable\n        if i != div_sum:\n            div_sum_of_div_sum = 0\n            for k in range(1, div_sum):\n                if div_sum % k == 0:\n                    div_sum_of_div_sum += k\n            if i == div_sum_of_div_sum and div_sum_of_div_sum != i:\n                total += i\n    # Return the sum\n    return total\n\n# Test the function with a limit of 1000000\nprint(amicable_numbers_sum(1000000)) ",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 392282\n\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import math\n    return round(math.degrees(math.atan2(b,a)) % 360, 2)\n\n# test the function\nprint(angle_complex(4,3)) # 63.43\nprint(angle_complex(-3,4)) # -48.18\nprint(angle_complex(-3,-4)) # -138.18\nprint(angle_complex(0,5)) # 90.00\nprint(angle_complex(5,0)) # 0.00\nprint(angle_complex(-5,0)) # 180.00\nprint(angle_complex(0,-5)) # -90.00\nprint(angle_complex(1,1)) # 45.00\nprint(angle_complex(-1,1)) # -45.00 ",
        "generated_testcode": "assert angle_complex(1,1) == 45.0\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    curr_diff = 0\n    for i in range(n): \n        if string[i] == '0': \n            zero_count += 1\n        else: \n            one_count += 1\n        curr_diff = abs(zero_count - one_count)\n        if curr_diff > max_diff: \n            max_diff = curr_diff\n    zero_count = 0\n    one_count = 0\n    for i in range(n): \n        if string[i] == '1': \n            one_count += 1\n        else: \n            zero_count += 1\n        curr_diff = abs(zero_count - one_count)\n        if curr_diff > max_diff: \n            max_diff = curr_diff\n    return max_diff ",
        "generated_testcode": "",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a>b: \n        smaller=b \n    else: \n        smaller=a \n    sum=0 \n    for i in range(1, smaller+1): \n        if a%i==0 and b%i==0: \n            sum+=i \n    return sum \na=int(input(\"Enter the first number: \")) \nb=int(input(\"Enter the second number: \")) \nprint(\"The sum of common divisors of\", a,\"and\", b, \"is:\", sum(a,b)) ",
        "generated_testcode": "assert sum(12,15) == 30 # True\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(y):\n        result += x\n    return result\n\n# Example usage:\nprint(multiply_int(3, 4)) # Output: 12 ",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    words = str.split()\n    return [word for word in words if len(word) > n]\n\n# test the function\nprint(long_words(4, \"The quick brown fox jumps over the lazy dog\")) # ['jumps', 'over']\nprint(long_words(2, \"The quick brown fox jumps over the lazy dog\")) # ['quick', 'brown', 'jumps', 'over', 'lazy'] ",
        "generated_testcode": "",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(my_matrix)\n    sum_list = []\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if i == 0:\n            diag_sum1 = my_matrix[i][i]\n            diag_sum2 = my_matrix[n-i-1][i]\n        row_sum_list.append(row_sum)\n        col_sum_list.append(col_sum)\n        diag_sum1 += my_matrix[i][i]\n        diag_sum2 += my_matrix[i][n-i-1]\n    if len(set(row_sum_list)) != 1 or len(set(col_sum_list)) != 1 or diag_sum1 != diag_sum2:\n        return False\n    else:\n        return True\n\n# Test case\nmatrix = [[2, 7, 6], [9, 5, 1], [4, 3, 8]]\nprint(magic_square_test(matrix)) # True\n\nmatrix = [[2, 7, 6], [9, 5, 1], [4, 3, 9]]\nprint(magic_square_test(matrix)) # False ",
        "generated_testcode": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    max_freq = 0\n    max_num = None\n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_num = key\n    return max_num\n\n# Test cases\nprint(max_occurrences([1, 2, 3, 3, 2, 1, 2, 1, 1, 4, 4, 4, 4, 4])) # Output: 4\nprint(max_occurrences([4, 4, 4, 4, 4, 1, 2, 2, 3, 3, 1, 1, 1])) # Output: 4\nprint(max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 1\nprint(max_occurrences([1, 1, 1, 1, 1, 1, 1, 1, 1])) # Output: 1 ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 3, 4, 5, 2, 6, 1, 1, 1]) == 1\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result += vowels_list.pop()\n        else:\n            result += char\n    return result\n\n# test the function with an example\nprint(reverse_vowels(\"hello world\")) ",
        "generated_testcode": "assert reverse_vowels(\"hello\") == \"holle\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \",\"\n    return str1[:-1]\n\n# Test the function\ntup1 = (1,2,3,4,5)\nprint(tup_string(tup1)) # Output: 1,2,3,4,5\n\n\n# Convert tuple to a string and replace the delimiter\ndef tup_string_delimiter(tup1, delimiter):\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + delimiter\n    return str1[:-1]\n\n# Test the function\ntup1 = (1,2,3,4,5)\nprint(tup_string_delimiter(tup1, \"-\")) # Output: 1-2-3-4-5\n\nprint(tup_string_delimiter(tup1, \":\")) # Output: 1:2:3:4:5\nprint(tup_string_delimiter(tup1, \", \")) # Output: 1, 2, 3, 4, 5 ",
        "generated_testcode": "assert tup_string((1,2,3,4,5,6)) == \"1,2,3,4,5,6\"\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list of numbers as input and returns the sum of negative numbers using lambda function.\n    \"\"\"\n    return sum(filter(lambda x: x < 0, nums))\n\n# Test the function with a sample list\nsample_list = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\nprint(\"Sum of negative numbers in the list is:\", sum_negativenum(sample_list)) ",
        "generated_testcode": "assert sum_negativenum([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == -30\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if p%2==0:\n        return \"Even\"\n    else:\n        for i in range(p):\n            if len(arr)%2!=0:\n                arr.pop()\n            else:\n                arr.pop(0)\n        if len(arr)>0 and arr[-1]%2==0:\n            return \"Even\"\n        else:\n            return \"Odd\"\nn,p=map(int,input().split())\narr=list(map(int,input().split())\nprint(check_last(arr,n,p)) ",
        "generated_testcode": "assert (check_last([1,2,3,4,5,6],4,2) == True)\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return (n * (2 * n - 1)) if n > 0 else 0\n\n# Test cases\nprint(hexagonal_num(1))  # 1\nprint(hexagonal_num(2))  # 6\nprint(hexagonal_num(3))  # 15\nprint(hexagonal_num(4))  # 28\nprint(hexagonal_num(5))  # 45\nprint(hexagonal_num(6))  # 66\nprint(hexagonal_num(7))  # 91\nprint(hexagonal_num(8))  # 120\nprint(hexagonal_num(9))  # 153\nprint(hexagonal_num(10)) # 190 ",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if units<=100:\n        return units*0.4\n    elif units>100 and units<=300:\n        return (100*0.4)+(units-100)*0.5\n    elif units>300 and units<=500:\n        return (100*0.4)+(200*0.5)+(units-300)*0.6\n    else:\n        return (100*0.4)+(200*0.5)+(200*0.6)+(units-500)*0.7\n\nunits=int(input(\"Enter the number of units of electricity consumed: \"))\nbill=cal_electbill(units)\nprint(\"The electricity bill is: \",bill)\n\n#print(cal_electbill(350)) ",
        "generated_testcode": "assert cal_electbill(100) == 5.5\n\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n\n#Example usage:\nnums = [1, 0, 3, 0, 4, 0, 6, 0, 7, 8, 0, 9]\nprint(zero_count(nums)) # Output: 0.4\n\n\n# Test case:\nprint(zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 0\nprint(zero_count([0, 0, 0, 0, 0, 0, 0, 0])) # Output: 1\nprint(zero_count([0, 1, 0, 2, 0, 3, 0, 4])) # Output: 0.5\n\nprint(zero_count([])) # Output: 0\nprint(zero_count([0, 0, 0, 0])) # Output: 1\nprint(zero_count([1, 0, 2, 0, 3, 0, 0, 4, 0, 0])) # Output: 0.5\n",
        "generated_testcode": "assert zero_count([1, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 8, 0, 9]) == 0.5\n\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return False\n    while n: \n        if n & 1: \n            n -= 1\n        n >>= 1\n    return n == 0\n\n# Test the function with some examples \nprint(is_Sum_Of_Powers_Of_Two(12)) # True \nprint(is_Sum_Of_Powers_Of_Two(13)) # False \nprint(is_Sum_Of_Powers_Of_Two(27)) # True \nprint(is_Sum_Of_Powers_Of_Two(15)) # False \nprint(is_Sum_Of_Powers_Of_Two(16)) # True \nprint(is_Sum_Of_Powers_Of_Two(32)) # True ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22 / 7\n    return 2 * pi * r\n\n#Test the function with a radius of 3\nprint(circle_circumference(3)) #Output: 18.859\n\n\n#Write a function to find the area of a circle\ndef circle_area(r):\n    pi = 22 / 7\n    return pi * r ** 2\n\n#Test the function with a radius of 3\nprint(circle_area(3)) #Output: 28.27",
        "generated_testcode": "assert circle_circumference(5) == 31.41592653589793\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    singly_list = []\n    for i in test_list:\n        if test_list.count(i) == 1:\n            singly_list.append(i)\n    return singly_list\n\n\n# test the function\ntest_list = (1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8)\nprint(extract_singly(test_list) ) # Output: [9, 10] ",
        "generated_testcode": "",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    def flip(nums, k):\n        return nums[:k+1][::-1] + nums[k+1:]\n\n    def find_max(nums):\n        return nums.index(max(nums[:len(nums)-1])+1)\n\n    def pancake_sort_helper(nums, k):\n        if k==1:\n            return nums\n        else:\n            max_index = find_max(nums)\n            nums = flip(flip(nums, max_index), k-1)\n            nums = flip(nums, max_index)\n            return pancake_sort_helper(nums[:k-1], k-1) + [nums[k-1]] + pancake_sort_helper(nums[k:], k-1)\n    return pancake_sort_helper(nums, len(nums))\n\n# Example usage:\nnums = [12, 3, 2, 1, 5, 6, 4, 8, 9]\nprint(pancake_sort(nums)) # Output: [1, 2, 3, 4, 5, 6, 8, 9, 12] ",
        "generated_testcode": "assert pancake_sort([4, 2, 5, 1, 3, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j] and list1[i] in list3:\n                count+=1\n    return count\nlist1=[1,2,3,4,5,6]\nlist2=[2,3,5,7,8]\nlist3=[2,5,9,6]\nprint(count_samepair(list1,list2,list3)) ",
        "generated_testcode": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 1\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n# Test the function with an example\ntup = (1,2,[3,4,5],[6,7,8],(9,10,['a', 'b'],(11,12))\nprint(find_lists(tup))  # Output: 2 ",
        "generated_testcode": "assert find_lists((1,2,3,4,5,6,7,8,9,10) == 0\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize a variable to store the sum of absolute differences \n    sum = 0\n    \n    # Loop through the array and find the absolute difference of all pairs\n    for i in range(n): \n        for j in range(i+1, n): \n            sum += abs(arr[i] - arr[j]) \n            \n    # Return the sum \n    return sum \n\n# Test the function with an example \narr = [1, 4, 2, 5, 3] \nn = len(arr) \nprint(sum_Pairs(arr, n)) # Output: 7\n\n\n# The sum of absolute differences in the given array [1, 4, 2, 5, 3] is 7. ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5,6,7,8,9]) == 20 # True\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_diff = arr[1] - arr[0] \n    min_element = arr[0] \n    max_element = arr[0] \n    for i in range(1, n): \n        if arr[i] < min_element: \n            min_element = arr[i] \n        else: \n            if arr[i] - min_element > max_diff: \n                max_diff = arr[i] - min_element \n        if arr[i] > max_element: \n            max_element = arr[i] \n        elif arr[i] - max_element > max_diff: \n            max_diff = arr[i] - max_element \n    return max_diff \n\n#Test the function with example \narr = [1, 2, 3, 10, 20, 28, 4, 5, 12, 40] \nn = len(arr) \nprint(\"Maximum difference is\", max_Abs_Diff(arr, n)) ",
        "generated_testcode": "assert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ascii_sum = 0\n    for char in str1:\n        ascii_sum += ord(char)\n    return ascii_sum\n\ndef main():\n    str1 = input(\"Enter a string: \")\n    print(\"Sum of ASCII values:\", ascii_value_string(str1))\n\nif __name__ == '__main__':\n    main() ",
        "generated_testcode": "assert ascii_value_string(\"Hello\") == 532\n# Test case 1: Testing with a small string \"Hello\" and the expected output is 532. ",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    row = [0] * m\n    for i in range(m): \n        row[i] = [0] * m\n    row[0][0] = tri[0][0]\n    for i in range(1, n): \n        for j in range(i+1): \n            if j == 0: \n                row[i][j] = row[i-1][j] + tri[i][j]\n            elif j == i: \n                row[i][j] = row[i-1][j-1] + tri[i][j]\n            else: \n                row[i][j] = max(row[i-1][j-1], row[i-1][j]) + tri[i][j]\n            if i == n-1: \n                return row[i][j]\n            elif j < i: \n                row[i][j] = max(row[i][j], row[i-1][j] + tri[i][j])\n            elif j > 0: \n                row[i][j] = max(row[i][j], row[i][j-1] + tri[i][j])\n        for j in range(i+1): \n            row[i][j] = max(row[i][j], row[i-1][j])\n    return row[n-1][n-1] ",
        "generated_testcode": "assert max_path_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 23\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x == 0: \n        return 0\n    if x % 9 == 0: \n        return 9\n    else: \n        return x % 9\n\ndef sum_digits_double(x): \n    if x == 0: \n        return 18\n    if x % 9 == 0: \n        return 9 * (x // 9) + 9\n    else: \n        return x % 9 * 2 + sum_digits_single(x // 9)\n\ndef max_sum_digits(n): \n    if n < 10: \n        return sum_digits_single(n)\n    else: \n        return sum_digits_double(n)\n\nn = int(input())\nprint(max_sum_digits(n)) ",
        "generated_testcode": "assert sum_digits_single(123) == (1, 23)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    maxLen = 1 \n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if abs(arr[i] - arr[j]) == 1: \n                dp[i] = max(dp[i], dp[j] + 1) \n                maxLen = max(maxLen, dp[i]) \n    return maxLen \n  \n# test the code \narr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 11, 12] \nn = len(arr) \nprint(\"Length of Longest subsequence: \", longest_subseq_with_diff_one(arr, n)) ",
        "generated_testcode": "",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    seq = []\n    while True: \n        seq.append(a) \n        a, b = b, a + b \n        if a == c or b == c: \n            return True \n        elif a > c and b > c: \n            return False \n\n#Example \n#Test the function with a = 1, b = 2 and c = 10 \nprint(does_Contain_B(1, 2, 10)) #True ",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if(q==0):\n        return p\n    else:\n        return gcd(q,p%q)\ndef is_coprime(n1,n2):\n    if gcd(n1,n2)==1:\n        return True\n    else:\n        return False\n#sample input \nprint(is_coprime(35,21))#true\nprint(is_coprime(48,60))#false ",
        "generated_testcode": "assert gcd(12,8) == 4\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i=0\n    j=0\n    k=0\n    c=[]\n    while i<len(a) and j<len(b):\n        if a[i]<b[j]:\n            c.append(a[i])\n            i=i+1\n        else:\n            c.append(b[j])\n            j=j+1\n    while i<len(a):\n        c.append(a[i])\n        i=i+1\n    while j<len(b):\n        c.append(b[j])\n        j=j+1\n    return c\n\ndef mergeSort(arr):\n    if len(arr)<=1:\n        return arr\n    mid=len(arr)//2\n    left=arr[:mid]\n    right=arr[mid:]\n    left=mergeSort(left)\n    right=mergeSort(right)\n    return merge(left,right)\n\narr=[4,3,2,1,6,5,7,8,10,9,11,12,15,14]\nprint(\"Before sorting:\",arr)\nsorted_arr=mergeSort(arr)\nprint(\"After sorting:\",sorted_arr) ",
        "generated_testcode": "",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    a, b, c are coefficients of the quadratic equation ax^2 + bx + c = 0. \n    This function returns the vertex of the parabola in the form (x, y)\n    \"\"\"\n    x = -b / (2 * a)\n    y = a * x ** 2 + b * x + c\n    return (x, y)\n\n# Testing the function\na, b, c = 1, 2, 3\nprint(parabola_vertex(a, b, c) # Output (-1, -3) ",
        "generated_testcode": "assert parabola_vertex(1, -14, 10) == (-3, 0)\n\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(nums)):\n        result.append(nums[i][N])\n    return result\n\n# test the function\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = 1\nprint(specified_element(nums, N))  # Output: [2, 5, 8] ",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return n ^ (n & -2) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 is 10 in binary, and after toggling the even bits, it becomes 1010, which is 10 in decimal.\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    tuple_int = tuple(int(x) for x in tuple_str)\n    return tuple_int\n\n# Example usage:\ntup_str = ('1', '2', '3', '4', '5')\ntup_int = tuple_int_str(tup_str)\nprint(tup_int) # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    count = 1\n    prev = None\n    for i in list1:\n        if i == prev:\n            count += 1\n        else:\n            if prev is not None:\n                result.append((prev, count))\n            prev = i\n            count = 1\n    result.append((prev, count))\n    return result[1:]\n\n\n# Test the function with sample input\nprint(encode_list([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5])) # [(1, 2), (2, 2), (3, 3), (4, 1), (5, 3)] ",
        "generated_testcode": "",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_num = max(arr) \n    count = 0 \n    for i in range(n): \n        count += abs(arr[i]-max_num) \n    return min(k,count) \n\n# Driver code \narr = [1, 5, 7, 2, 4, 8, 9] \nk = 10\nn = len(arr) \nprint(\"Minimum operations required: \", min_Ops(arr, n, k)) ",
        "generated_testcode": "assert min_Ops([4,2,5,6,8],4,10) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if month == 12 or month == 1 or month == 2:\n        return \"Winter\"\n    elif month == 3 or month == 4 or month == 5:\n        return \"Spring\"\n    elif month == 6 or month == 7 or month == 8:\n        return \"Summer\"\n    elif month == 9 or month == 10 or month == 11:\n        return \"Autumn\"\n    else:\n        return \"Fall\"\n\n# Test the function with some sample inputs\nprint(month_season(1,30)) # Should print \"Winter\"\nprint(month_season(4,15)) # Should print \"Spring\"\nprint(month_season(7,31)) # Should print \"Summer\"\nprint(month_season(9,20)) # Should print \"Autumn\"\nprint(month_season(12,31)) # Should print \"Winter\" \nprint(month_season(2,28)) # Should print \"Winter\" ",
        "generated_testcode": "assert month_season(1,1) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n % b == 0: \n        return (n // b, n // a) \n    else: \n        return \"No solution\"\n\n#Test the function with sample inputs:\nprint(solution(2, 3, 5)) #Expected output: (1, 1) ",
        "generated_testcode": "assert solution(2, 3, 5) == (1, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n\n\n# example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [2, 4, 6]\nprint(remove_elements(list1, list2)) # Output: [1, 3, 5, 7]\n\n\n\n# using list comprehension\ndef remove_elements(list1, list2):\n    return [i for i in list1 if i not in list2]\n\n\n# example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [2, 4, 6]\nprint(remove_elements(list1, list2)) # Output: [1, 3, 5, 7] ",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5, 6], [2, 4]) == [1, 3, 5, 6]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n\n# Test the function with an example:\nprint(sum_series(10)) # Output: 30 (10+8+6+4+2 = 20) ",
        "generated_testcode": "assert sum_series(4) == 4\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (l**2 / (4 * math.tan(math.pi / s))). The formula can be used to calculate the area of any regular polygon given the length of one side and the number of sides.\n    return area\n\n# Test the function with a hexagon\ns = 4\nl = 5\nprint(area_polygon(s, l)) # Output: 14.4381673461586\n\n\n# Test the function with a pentagon\ns = 8\nl = 7.5\nprint(area_polygon(s, l)) # Output: 67.09760008663447\n\n\n# Test the function with a square\ns = 4\nl = 10\nprint(area_polygon(s, l)) # Output: 58.2319566313611\n\n\n# Test the function with a triangle\ns = 3\nl = 7\nprint(area_polygon(s, l)) # Output: 14.9711746813877\n\n\n# Test the function with an octagon\ns = 5\nl = 3\nprint(area_polygon(s, l)) # Output: 222.184049736461\n\n\n# Test the function with a decagon\ns = 10\nl = 2\nprint(area_polygon(s, l",
        "generated_testcode": "assert area_polygon(5, 3) == 7.0740778276386, \"The area of a regular pentagon with side length 3 should be approximately 7.07\"\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef chkDivSum(n): \n    for i in range(2, n):\n        if divSum(i) == divSum(n):\n            return i\n    return None\n\n# Example usage:\nprint(chkDivSum(5)) # Output: 6\nprint(chkDivSum(6)) # Output: None\nprint(chkDivSum(7)) # Output: None\nprint(chkDivSum(8)) # Output: 4\nprint(chkDivSum(12)) # Output: 6 ",
        "generated_testcode": "assert divSum(12) == True\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i]) == i+97 or ord(str1[i]) == i+65:\n            count += 1\n    return count\n\n#Example\n#Input: 'Elephant'\n#Output: 3\n#Explanation: 'E' is at position 5 and 'p' is at position 2 in the English alphabet, so there are 2 characters in the string that are at their same position. ",
        "generated_testcode": "assert count_char_position(\"Hello World\") == 2 # Testcase 1\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i]^A[j])%2 == 0: \n                count += 1\n    return count \n\n# Driver code \nA = [1,2,3,4,5,6] \nN = len(A) \nprint(find_even_Pair(A,N)) ",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9],5) == 4\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 1\n    while (power < n): \n        power *= 2\n    return power\n\n# example usage:\nn = 10\nprint(next_Power_Of_2(n))  # Output: 16\nn = 16\nprint(next_Power_Of_2(n))  # Output: 16\nn = 17\nprint(next_Power_Of_2(n))  # Output: 32 ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = 0\n    for i in a: \n        if i == x: \n            freq = freq + 1\n    return freq \n\n#example\narr = [1,2,3,4,5,2,6,2,7,2,8,2]\nnum = 2\nprint(frequency(arr,num)) #output:3\n\n#explanation: The number 2 appears 3 times in the given array ",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,2,3,4,2,1,2,3,4,5,6,7,8,9,2,3,4,5], 2) == 4\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0: \n        return 0 \n    elif n == 1: \n        return 0 \n    elif n == 2: \n        return 1 \n    else: \n        p = [0, 1] \n        for i in range(2, n+1): \n            p.append(2*p[i-1] + p[i-2]) \n        return p[n] \n\n# Test the function \nfor i in range(1, 11): \n    print(get_pell(i)) ",
        "generated_testcode": "assert get_pell(1) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"This function takes a list and two integer values m and n as input and returns the sum of the numbers in the list between indices m and n (inclusive)\"\"\"\n    if n > len(list1) or m > len(list1) or n < 0 or m < 0:\n        return \"Invalid input!\"\n    else:\n        return sum(list1[m:n+1]) ",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 5) == 20\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    perimeter = 5 * a\n    return perimeter\n\n# Test the function with some example inputs\nprint(perimeter_pentagon(3)) # Output: 15\nprint(perimeter_pentagon(7.5) # Output: 37.5\nprint(perimeter_pentagon(10) # Output: 50\n\n\n# Define a function to find the area of a triangle\ndef area_triangle(base, height):\n    area = 0.5 * base * height\n    return area\n\n# Test the function with some example inputs\nprint(area_triangle(5, 10) # Output: 25.0\nprint(area_triangle(3, 8) # Output: 12.0\nprint(area_triangle(2.5, 4) # Output: 6.0\n\n# Define a function to find the volume of a sphere\ndef volume_sphere(radius):\n    pi = 3.14159\n    volume = 4/3 * pi * radius ** 3\n    return volume\n\n# Test the function with some example inputs\nprint(volume_sphere(5) # Output: 523.6\nprint(volume_sphere(3) # Output: 1113.1\nprint(volume_sphere(2.5) # Output: 153.7\n",
        "generated_testcode": "assert perimeter_pentagon(5) == 10\n\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n\n#Test the function with sample inputs\ns1 = \"This is a standard string.\"\ns2 = \"The standard is high, but the student exceeded it.\"\ns3 = \"Sometimes students don't study well.\"\nprint(count_occurance(s1)) # Expected output: 1\nprint(count_occurance(s2)) # Expected output: 1\nprint(count_occurance(s3)) # Expected output: 0 ",
        "generated_testcode": "assert count_occurance(\"hello world\") == 0\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = ''.join(e for e in text if e.isalnum()) \n    return result \n  \n# test the function with sample input \ntest_text = \"I love #py&thon! 2020. It is so $#*@!% amazing.\"\nprint(remove_splchar(test_text) )  # output: \"Ilovepython2020Itissoamazing\" ",
        "generated_testcode": "assert remove_splchar(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Given a list of key-value pairs, return a dictionary where each key is a key from the input\n    and the value is a list of all values from the input associated with that key.\n    \"\"\"\n    d = {}\n    for k, v in l:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d\n\n# Example usage:\nl = [('a', 1), ('b', 2), ('a', 3), ('c', 4), ('a', 5)]\nprint(group_keyvalue(l)) # Output: {'a': [1, 3, 5], 'b': [2], 'c': [4]} ",
        "generated_testcode": "",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    parenthese_dict = {'}':'{', ')':'(', ']':'[', '>':'<'}\n    \n    for char in str1:\n        if char in parenthese_dict.values():\n            stack.append(char)\n        elif char in parenthese_dict.keys():\n            if not stack or parenthese_dict[char] != stack.pop():\n                return False\n        else:\n            return False\n    return len(stack) == 0\n\nprint(is_valid_parenthese('[](){([])}<>')) # True\nprint(is_valid_parenthese('[](){([]){})<>')) # True\nprint(is_valid_parenthese('[](){([)]}<>')) # False\nprint(is_valid_parenthese('({[()]})')) # True\nprint(is_valid_parenthese('({[)]}')) # False ",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    p = a+b+c\n    return p\n\n# Test the function with examples\nprint(perimeter_triangle(3, 4, 5) == 12)\nprint(perimeter_triangle(5, 12, 13) == 30)\nprint(perimeter_triangle(2, 7, 7) == 18)\nprint(perimeter_triangle(1, 1, 1) == 4)\nprint(perimeter_triangle(8, 12, 15) == 35)\nprint(perimeter_triangle(2.5, 3.5, 4) == 10) ",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    lcm = 1\n    for i in range(L,R+1):\n        for j in range(i+1,R+1):\n            lcm = i*j\n            if lcm>R:\n                break\n            while lcm%i!=0 or lcm%j!=0:\n                lcm+=1\n            if L<=lcm<=R:\n                return [i,j]\n    return [L,R]\n\n#testing the function\nprint(answer(2, 10))\nprint(answer(1, 10))\nprint(answer(1, 2))\nprint(answer(1, 1000))\nprint(answer(1, 15)) ",
        "generated_testcode": "assert (answer(1, 10) == (1, 10))\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two arguments:\n    patterns: list of patterns to search in the text\n    text: the text to be searched for the patterns\n    \"\"\"\n    for pattern in patterns:\n        if pattern in text:\n            return True\n    return False\n\n# Example usage:\ntext = \"Hello, how are you?\"\npatterns = [\"world\", \"you\", \"are\"]\nresult = string_literals(patterns, text)\nprint(result) # Output: True ",
        "generated_testcode": "assert string_literals(['hello', 'world'], 'hello world') == ['hello', 'world']\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n=x\n    i=1\n    while x!=0:\n        n=n-i*(i+1)\n        i+=1\n    return n==0\n\n# testing the function with example\nprint(is_num_keith(100)) # True\nprint(is_num_keith(500)) # True\nprint(is_num_keith(700)) # True\nprint(is_num_keith(900)) # True\nprint(is_num_keith(1000)) # False ",
        "generated_testcode": "assert is_num_keith(19) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    R=6371 #Radius of earth in KM\n    slat=math.radians(slat)\n    slon=math.radians(slon)\n    elat=math.radians(elat)\n    elon=math.radians(elon)\n    dlat=elat-slat\n    dlon=elon-slon\n    a=math.sin(dlat/2)**2+math.cos(slat)*math.cos(elat)*math.sin(dlon/2)**2\n    c=2*math.atan2(math.sqrt(a),math.sqrt(1-a))\n    distance=R*c\n    return distance\n\n#Test the function\nprint(distance_lat_long(12.93394298,77.6903025,12.958539,77.654842)) #distance between two points in Bangalore\nprint(distance_lat_long(12.9394298,77.6903025,13.0327807,80.2650707)) #distance between Bangalore and Mumbai ",
        "generated_testcode": "assert distance_lat_long(40, -80, 50, -120) == 47.34\n\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    n = min(len(str1), len(str2)) \n    for i in range(n): \n        if str1[i] != str2[i]: \n            return str1[:i] \n    return str1[:n] \n  \ndef common_prefix(strs): \n    if len(strs) == 0: \n        return \"\" \n    prefix = strs[0] \n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i]) \n        if prefix == \"\": \n            return \"\" \n    return prefix \n  \n# Test the function with sample inputs \nstrs = [\"flower\", \"flow\", \"flight\"] \nprint(common_prefix(strs)) # Output: \"fl\" \n  \nstrs = [\"dog\", \"racecar\", \"car\"] \nprint(common_prefix(strs)) # Output: \"\" \n  \nstrs = [\"geeks\", \"geeksfor\", \"geeksforgeeks\"] \nprint(common_prefix(strs)) # Output: \"geeks\" \n  \nstrs = [\"abcd\", \"ab\", \"abcd\"] \nprint(common_prefix(strs)) # Output: \"ab\" ",
        "generated_testcode": "assert common_prefix_util(\"hello\", \"heaven\") == \"he\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    upper = re.findall(r'[A-Z]',string)\n    lower = re.findall(r'[a-z]',string)\n    special = re.findall(r'[^a-zA-Z0-9]',string)\n    digit = re.findall(r'\\d',string)\n    return upper, lower, special, digit\n\n# test the function\nstring = \"Hello,World123@gmail.com\"\nupper, lower, special, digit = find_character(string)\nprint(\"Uppercase characters:\",upper)\nprint(\"Lowercase characters:\",lower)\nprint(\"Special characters:\",special)\nprint(\"Numeric characters:\",digit) ",
        "generated_testcode": "assert find_character(\"Hello@123\") == {'uppercase': 0, 'lowercase': 5, 'special': 1, 'numeric': 3}\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pairs_count = 0\n    pair_dict = {}\n    for i in range(n):\n        if arr[i] in pair_dict:\n            pair_dict[arr[i]] += 1\n        else:\n            pair_dict[arr[i]] = 1\n    for i in range(n):\n        if arr[i] + k in pair_dict:\n            pairs_count += pair_dict[arr[i] * pair_dict[arr[i] + k]\n        if arr[i] - k in pair_dict:\n            pairs_count += pair_dict[arr[i] * pair_dict[arr[i] - k]\n        else:\n            pairs_count += pair_dict[arr[i] * (pair_dict[arr[i] - k] - 1)\n        pair_dict[arr[i]] -= 1\n        if pair_dict[arr[i] == 1:\n            del pair_dict[arr[i]\n    return pairs_count\n# Example usage:\narr = [1, 5, 3, 2, 6, 4, 7]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))  # Output: 2 (because (1, 4) and (2, 5) have difference 3) ",
        "generated_testcode": "assert count_pairs([1, 5, 9, 3, 6, 8, 12, 4, 10], 4) == 2 # Output: 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in list:\n        if i > num:\n            new_list.append(i)\n    return new_list\n\n#test the function\nmy_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nprint(greater_specificnum(my_list, 8)) #[9, 10, 11, 12, 13, 14, 15] ",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8],5) == [6,7,8]\n\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Finds the focus of a parabola given the coefficients a, b, and c.\n    Returns a tuple (x, y) of the focus's coordinates.\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The coefficient 'a' must be nonzero.\")\n    x = -b / (2 * a)\n    y = - (4 * a * c) / b**2\n    return (x, y)\n\n# Example usage:\n# >>> parabola_focus(1, -2, 1)\n# (-1, 1)\n# >>> parabola_focus(2, -5, 6)\n# (-1.5, 1.0) ",
        "generated_testcode": "assert parabola_focus(1, -14, 10) == (3, 0)\n\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    for pattern in patterns:\n        if not re.search(pattern, text):\n            return False\n    return True\n\n# Test cases\nprint(check_literals(\"Hello, World!\", [\"Hello\", \"World\"])) # True\nprint(check_literals(\"Hello, World!\", [\"Hello\", \"world\"])) # False\nprint(check_literals(\"Hello, World!\", [\"hello\", \"world\"])) # False\nprint(check_literals(\"Hello, World!\", [\"Hello\", \"W\"])) # False\nprint(check_literals(\"Hello, World!\", [\"Hello\", \"World\", \"!\"])) # True\nprint(check_literals(\"Hello, World!\", [\"H\", \"W\", \"o\", \"r\", \"d\"])) # False ",
        "generated_testcode": "assert check_literals(\"Hello, World!\", [\"Hello\", \"World\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    L = [[0 for k in range(n+1)] for l in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    index = L[m][n] \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs[index-1] = X[i-1] \n            i -= 1\n            j -= 1\n            index -= 1\n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1\n        else: \n            j -= 1\n    return lcs[1:]\n\n# Test the function with example sequences\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X) \nn = len(Y) \nprint",
        "generated_testcode": "assert longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 5, 5) == \"ADH\"\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 2\n    while i*i <= n:\n        j = 1\n        while j*j <= n:\n            if i*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n\n# test the function with an example\nprint(prod_Square(12)) # True \nprint(prod_Square(13)) # False ",
        "generated_testcode": "assert (prod_Square(16)) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #Mark arr[i] as visited by making arr[arr[i]-1] as negative \n    for i in range(n): \n        if abs(arr[i]) <= n and arr[abs(arr[i])-1] > 0 : \n            arr[abs(arr[i])-1] = -arr[abs(arr[i])] \n      \n    #Find the first positive missing positive number \n    for i in range(n): \n        if arr[i] > 0: \n            return i+1\n    return n+1 ",
        "generated_testcode": "assert first_Missing_Positive([1,2,3,4,5,6,7,8,9], 6) == 10\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x1==0 and y1==0:\n        return 1\n    else:\n        return 0\n#Example:\n# Input:\n# x1=0,y1=0,x2=2,y2=2\n# Output:\n# 9\n# Explanation:\n# The coordinates inside the square are (0,0),(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1) and (2,2) ",
        "generated_testcode": "assert count_Intgral_Points(0,0,4,4) == 16\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthname3 in ['April','June','September','November']:\n        return \"30 days\"\n    elif monthname3 in ['January','March','May','July','August','October','December']:\n        return \"31 days\"\n    elif monthname3 in ['February']:\n        return \"28 or 29 days\"\n    else:\n        return \"31 days\"\n\n#test the function\nprint(check_monthnumber('February')) \nprint(check_monthnumber('June')) \nprint(check_monthnumber('August')) ",
        "generated_testcode": "assert check_monthnumber(\"February\") == False\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    letter = False\n    digit = False\n    for i in str:\n        if i.isdigit():\n            digit = True\n        elif i.isalpha():\n            letter = True\n        if digit and letter:\n            return True\n    return False ",
        "generated_testcode": "assert (check_String(\"Hello\") == False)\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for num in test_tup:\n        if num not in result:\n            result = result + (num,)\n    return result\n\n# Test the function with a sample tuple\ntest_tup = (1, 2, 4, 5, 2, 3, 1, 5, 6, 7, 7)\nprint(remove_tuple(test_tup)) ",
        "generated_testcode": "assert remove_tuple((1, 2, 3, 4, 2, 5, 6, 3, 7, 7) == (1, 2, 3, 4, 5, 6, 7)\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal_number = 0  \n    base = 1  \n    while (n > 0):  \n        decimal_number += (n % 10) * base  \n        n = n // 10  \n        base = base * 8  \n    return decimal_number\n\n#Test the function with an example\noctal_number = 123\nprint(\"Octal number: \",octal_number)\ndecimal_number = octal_To_Decimal(octal_number)\nprint(\"Decimal number: \",decimal_number) ",
        "generated_testcode": "assert octal_To_Decimal(123) == 83\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    l=0\n    r=n-1\n    while l<=r:\n        mid=(l+r)//2\n        if (mid==0 or x>arr[mid-1]) and arr[mid]==x:\n            return mid\n        elif x>arr[mid]:\n            l=mid+1\n        else:\n            r=mid-1\n    return -1\narr=[1,2,3,4,4,4,4,4,5,6,7,8,9]\nn=len(arr)\nx=4\nprint(first(arr,x,n)) ",
        "generated_testcode": "assert first([1,2,3,4,4,5,6,7,8],4,6) == 2\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for tup in test_list:\n        if len(tup) != K:\n            result.append(tup)\n    return result\n\n# Test the function with an example\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9), (10,), (11, 12, 13, 14, 15)]\nK = 2\nprint(remove_tuples(test_list, K)) ",
        "generated_testcode": "",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup += (test_tup1[i] ** test_tup2[i],)\n    return res_tup\n\n# Test the function with sample input\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (4, 2, 3)\nprint(find_exponentio(test_tup1, test_tup2))  # Output: (16, 9, 64) ",
        "generated_testcode": "assert find_exponentio((2, 3), (4, 5)) == (2**4, 3**5)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    c = (a+b)/2\n    area = (1/4)*(a*b)\n    return area.sqrt()\n\n# Alternatively, we can use the following formula to calculate the same:\ndef largest_triangle(a,b): \n    c = (a+b)/2\n    area = (1/2)*(a*b)\n    return area.sqrt()\n\n# Both of the functions take the two parameters 'a' and 'b' which represent the lengths of the two sides of an ellipse and return the area of the largest triangle that can be inscribed in it. ",
        "generated_testcode": "assert largest_triangle(2,3) == 3.6, \"Test 1 failed\"\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 0\n    while n > 0: \n        n = n//2\n        power += 1\n    return int(2**(power-1) ) \n\n# example usage: \nn = 16\nprint(\"Highest Power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) \nn = 15\nprint(\"Highest Power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) \nn = 20\nprint(\"Highest Power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(16) == 16\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_num = max(list1)\n    max_index = []\n    for i in range(len(list1)):\n        if list1[i] == max_num:\n            max_index.append(i)\n    return max_index\n\n\n# Test the function with some example lists\nlist1 = [1, 2, 3, 5, 4, 5, 6, 5, 7, 5, 8]\nprint(position_max(list1))  # Output: [4, 5, 6]\n\nlist2 = [1, 5, 2, 3, 4, 5, 6, 7, 5, 8]\nprint(position_max(list2))  # Output: [1, 3]\nlist3 = [8, 7, 6, 5, 4, 3, 2, 1]\nprint(position_max(list3))  # Output: [0] ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10]) == [3, 6]\n\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) == 0:\n        return True\n    else:\n        return all(elem == lst[0] for elem in lst) ",
        "generated_testcode": "assert chkList([1, 1, 1, 1, 1, 1, 1]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n\n# test the function\nstring = \"HelloWorld\"\nprint(remove_even(string) == \"HloWrd\") # True\n\n\n# test the function with an empty string\nstring = \"\"\nprint(remove_even(string) == \"\") # True ",
        "generated_testcode": "assert remove_even(\"Hello, World!\") == \"HloWrd!\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    xor = n1 ^ n2 \n    distance = 0 \n    while xor : \n        distance += xor & 1 \n        xor >>= 1 \n    return distance \n    \n#Test the function with two numbers \nprint(hamming_Distance(25,31)) # Output: 3 ",
        "generated_testcode": "assert hamming_Distance(12, 23) == 3\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0 \n    for i in s: \n        if i == c: \n            count += 1\n    return count \n\n# test the function with example \ns = \"hello world\" \nc = \"l\"\nprint(count(s,c)) # output: 3 ",
        "generated_testcode": "assert count(\"hello world\", \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    inversion_lst = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_lst.append((test_tup[i],test_tup[j]))\n    return inversion_lst\n\ntest_lst = (2,3,1,5,6,7,4)\nprint(inversion_elements(test_lst)) # Output: [(2, 1), (3, 1), (5, 1), (5, 4), (6, 1), (6, 4), (7, 1), (7, 4), (7, 5)]\n\n\n# Using set() to remove duplicate inversions\ndef inversion_elements_set(test_tup):\n    inversion_lst = []\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion_lst.append((test_tup[i],test_tup[j]))\n    return set(inversion_lst)\n\ntest_lst = (2,3,1,5,6,7,4)\nprint(inversion_elements_set(test_lst)) # Output: {(2, 1), (3, 1), (5, 4",
        "generated_testcode": "assert inversion_elements((1, 2, 3, 4, 5, 6, 7, 8, 9)) == []\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            res += (test_tup[i],)\n        else:\n            res += (test_tup[i] + test_tup[i + 1],)\n    return res\n\n# Test the function with a sample tuple\ntest_tup = ('Hello', 'Python', 'World', '!', 'Concatenation')\nprint(concatenate_elements(test_tup)) # Output: ('HelloPython', 'PythonWorld', 'WorldConcatenation') ",
        "generated_testcode": "assert concatenate_elements(('abc') == 'abcabc'\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0] * n for i in range(n)] \n    res = 1\n    for i in range(n): \n        dp[i][i] = 1\n    for i in range(n-2, -1, -1, -1): \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j] + 1\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n                for k in range(i+1, j): \n                    if str[i] != str[j]: \n                        dp[i][j] = max(dp[i][j], dp[i+1][k] + dp[k+1][j]) \n    return dp[0][n-1] ",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabcbbbabc\") == \"abc\"\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^\\d+\\.\\d{1,2}$')\n    if pattern.match(num):\n        return True\n    else:\n        return False\n\n# Test the function with examples\nprint(is_decimal('123.45'))  # True\nprint(is_decimal('12.345'))  # False\nprint(is_decimal('12.3'))   # True\nprint(is_decimal('12'))    # False\nprint(is_decimal('12.3456')) # False\nprint(is_decimal('12.34'))  # True\nprint(is_decimal('12.34.56'))# False ",
        "generated_testcode": "assert is_decimal(\"123.45\") == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not heap:\n        return \"heap is empty\"\n    else:\n        min_val=heap[0]\n        heap[0]=a\n        heap[0],heap[-1]=heap[-1],heap[0]\n        heap.pop()\n        del heap[-1]\n        if heap:\n            heapify_down(heap,0)\n        return min_val\n    \ndef heapify_down(heap,i):\n    smallest=i\n    l=len(heap)\n    left=2*i+1\n    right=2*i+2\n    if left<l and heap[left]<heap[smallest]:\n        smallest=left\n    if right<l and heap[right]<heap[smallest]:\n        smallest=right\n    if smallest!=i:\n        heap[i],heap[smallest]=heap[smallest],heap[i]\n        heapify_down(heap,smallest)\n        \n#Test the function\nheap=[3,2,5,1,6,7,9,10,11,13]\nheap_replace(heap,4)\nprint(heap) #[3, 2, 5, 1, 6, 7, 9, 10, 11] ",
        "generated_testcode": "assert heap_replace([5,4,3,2,1],6) == [6,4,3,2,1]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    regex = re.compile('^[a-zA-Z0-9]*$')\n    if regex.search(string):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(is_allowed_specific_char(\"abcde12345\")) # True\nprint(is_allowed_specific_char(\"!@#$%^&*\")) # False\nprint(is_allowed_specific_char(\"Hello World\")) # False\nprint(is_allowed_specific_char(\"HelloWorld123\")) # True ",
        "generated_testcode": "assert is_allowed_specific_char(\"Hello123\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1): \n        if (i & (i-1)) != 0: \n            continue\n        else: \n            count += 1\n    return count \n  \n# Example Usage: \nn = 10\nprint(count_Num(n)) # Output: 3 ",
        "generated_testcode": "assert count_Num(10) == 2 # 1010 in binary is 5, so there are two numbers whose 1st and 3rd bits are set. ",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**4\n    return sum \n  \n# Taking input from user\nn = int(input(\"Enter a positive integer: \")) \n  \n# Calling the function and printing the result \nprint(\"The sum of fourth power of first\", n, \"natural numbers is\", fourth_Power_Sum(n)) ",
        "generated_testcode": "assert fourth_Power_Sum(4) == 100\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n\n\n# testing the function with example\ntest_tup1 = (\"apple\", \"banana\", \"cherry\")\ntest_tup2 = (\"123\", \"456\", \"789\")\nprint(concatenate_strings(test_tup1, test_tup2)) ",
        "generated_testcode": "assert concatenate_strings((\"Hello\", \"World\") == \"HelloWorld\"\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    degree = (radian * 180) / 3.14159\n    return degree\n\n# Convert the given radian value to degree\nradian = float(input(\"Enter the radian value: \"))\ndegree = degree_radian(radian)\nprint(f\"The radian value {radian} is equal to {degree} degree\")\n\n\n# Test the function with a sample input\n# degree_radian(3.14159) # Output: 180.0032398551154583368\n# degree_radian(1) # Output: 57.295778567108233479 ",
        "generated_testcode": "assert degree_radian(3.14159) == 176.72\n\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not alist:\n        return []\n    result = []\n    i = 0\n    while i < len(alist):\n        result.extend([alist[i+1]] * alist[i])\n        i += 2\n    return result\n\n# Example usage:\n# Original list: [1, 2, 3, 4, 5, 4, 3, 2, 1]\n# Encoded list: [3, 1, 4, 2, 3, 5, 2, 1]\n# Decoded list: decode_list([3, 1, 4, 2, 3, 5, 2, 1])\n# Output: [1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 4, 5, 5] ",
        "generated_testcode": "",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in list1: \n        if i not in list2: \n            return False \n    return True ",
        "generated_testcode": "assert check_subset_list([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8]]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_freq = {} \n    for char in str: \n        if char in char_freq: \n            return char \n        else: \n            char_freq[char] = 1\n    return None\n  \n# example usage: \nstr = \"abca\"\nprint(first_Repeated_Char(str)) # Output: a ",
        "generated_testcode": "assert first_Repeated_Char(\"abcda\") == \"a\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    # Using bitwise operators to find number of operations required to make A and B equal\n    count = 0\n    while A != B:\n        # If both are even then divide by 2\n        if A & 1 == 0 and B & 1 == 0:\n            A >>= 1\n            B >>= 1\n            count += 1\n        # If A is even, divide A by 2\n        elif A & 1 == 0:\n            A >>= 1\n            count += 1\n        # If B is even, divide B by 2\n        elif B & 1 == 0:\n            B >>= 1\n            count += 1\n        # If A is odd, B is odd, then subtract A from B\n        else:\n            B = (A-B)\n            count += 1\n    return count ",
        "generated_testcode": "assert min_Operations(10, 15) == 5\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    tup = list(test_tup)\n    n = len(tup)\n    tup.sort()\n    if K > n:\n        return None\n    min_K = tup[:K]\n    max_K = tup[-K:]\n    return (min_K, max_K)\n\n\n# Test the function with an example\ntest_tup = (5, 8, 3, 1, 6, 7, 2, 4)\nK = 3\nprint(extract_min_max(test_tup, K)) # Output: ([1, 2, 3], [5, 6, 7]) ",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (4, 7)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    special_char = \",. \"\n    count = 0\n    result = \"\"\n    for i in text:\n        if i in special_char:\n            if count < n:\n                result += \":\"\n                count += 1\n            else:\n                result += i\n        else:\n            result += i\n    return result\n\n# Test the function\ntext = \"This is, a test. With, some, special characters.\"\nn = 2\nprint(replace_max_specialchar(text,n)) # Output: \"This is: a test:, With, some: special characters.\" ",
        "generated_testcode": "assert replace_max_specialchar(\"Hello, world\", 1) == \"Hello: world\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# test the function with the following code\nprint(first_even([3, 6, 1, 1, 9, 4, 7, 8, 11, 6, 2]))  # should return 6\nprint(first_even([1, 3, 5, 7, 9, 11, 13, 15]))     # should return None\nprint(first_even([2, 4, 6, 8, 10]))            # should return 2\nprint(first_even([1, 3, 5, 7]))              # should return None ",
        "generated_testcode": "assert first_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    t_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i) != t_type:\n            return False\n    return True\n\n# Example usage:\n# test_tuple = (1, 2, 3, 4, 5, 6, '7')\n# print(check_type(test_tuple)) # Output: False ",
        "generated_testcode": "assert check_type((1, 2, 3, 4, 5, 6) == True)\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False\n\n# Test the function with sample inputs\narr = [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 6, 7, 8]\nx = 4\nn = len(arr)\nif is_majority(arr, n, x):\n    print(\"Majority element is present\")\nelse:\n    print(\"Majority element is not present\")\n\n\n# Output: Majority element is present ",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6], 4) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n\n#Test the function with an example\nn = 9\nprint(count_Set_Bits(n)) # Output: 2 ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": " \n    if high < low: \n        return arr[low] \n    if high == low: \n        return arr[low] \n  \n    mid = int((low + high)/2) \n    if mid < high and arr[mid+1] < arr[mid]: \n        return arr[mid+1] \n    if mid > low and arr[mid] < arr[mid-1]: \n        return arr[mid] \n    if arr[high] > arr[mid]: \n        return find_Min(arr, low, mid-1) \n    return find_Min(arr, mid+1, high) \n  \ndef min_element(arr): \n    return find_Min(arr, 0, len(arr)-1) \n  \n# Driver code \narr = [6, 7, 8, 9, 10, 1, 2, 3, 4, 5] \nprint(\"Minimum element is:\", min_element(arr)) ",
        "generated_testcode": "assert find_Min([4,5,6,7,0,1,2,3,4],0,5) == 0\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# test the function\nstring = \"hello world\"\nprint(odd_values_string(string) ) # hlowrd ",
        "generated_testcode": "assert odd_values_string(\"hello\") == \"hlo\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n\nprint(min_of_three(5,8,3)) #3\nprint(min_of_three(10,14,12)) #10\nprint(min_of_three(12,4,9)) #4 ",
        "generated_testcode": "assert min_of_three(5, 10, 15) == 5\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # check if the common bits in the range [l,r] are all set in n\n    return (n & (~(r^l)) == n) \n  \n# driver code\nn=int(input(\"Enter the number: \")\nl,r=map(int,input(\"Enter the range: \").split())\nif all_Bits_Set_In_The_Given_Range(n,l,r):\n    print(\"All bits are set in the given range\")\nelse:\n    print(\"All bits are not set in the given range\") ",
        "generated_testcode": "assert (all_Bits_Set_In_The_Given_Range(10,2,4)) # True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n\n# Test the code\narr = [-1, 2, -3, 4, -5, 6, -7, 8, 9, -8]\nn = len(arr)\nprint(re_arrange_array(arr, n)) ",
        "generated_testcode": "",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    str1 = str1.replace(\" \", char)\n    return str1\n\n# test the function\nstring = \"Hello World\"\nchar = \"*\"\nprint(replace_blank(string,char))\n\n# output: \"Hello*\"",
        "generated_testcode": "assert replace_blank(\"Hello World\", \"*\") == \"Hello*World\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(n-2, -1, -1, -1): \n        for j in range(i+1): \n            tri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n    return tri[0][0] \n\n# Driver code \nif __name__ == '__main__': \n    tri = [[1, 2, 3, 4, 5], \n          [6, 7, 8, 9], \n          [1, 4, 2, 3], \n          [9, 5, 1]] \n    n = len(tri) \n    print(max_sum(tri, n)) ",
        "generated_testcode": "assert max_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 13\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.sort(reverse=True)\n    return list1[:n]\n\n\n#example of usage\ndata = [1,4,6,3,7,8,2,9,10,5]\nn = 3\nprint(larg_nnum(data,n)) ",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5,6,7,8,9],3) == [8,9,7]\n\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    return 2*pi*r*h\n\n#Test the function\nprint(lateralsuface_cylinder(5,10)) #78.539816339744483023\nprint(lateralsuface_cylinder(7,12)) #109.644413918055822914\nprint(lateralsuface_cylinder(2.5,8)) #44.188798684396667873\n\n\n#Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    pi = 22/7\n    return pi*r**2*h\n\n#Test the function\nprint(volume_cylinder(5,10)) #157.07963267948999745\nprint(volume_cylinder(7,12)) #1537.0786667424881625\nprint(volume_cylinder(2.5,8)) #156.62111461064814248\n\n#Write a function to find the total surface area of a cylinder\ndef total_surface_cylinder(r,h):\n    pi = 22/7\n   ",
        "generated_testcode": "assert lateralsuface_cylinder(5, 10) == 78.53981634\n\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return l*l*l\n# Test the function\nprint(volume_cube(3)) # Output: 27\n\nprint(volume_cube(4)) # Output: 64\n\n\n# Write a function to find the surface area of a cube\ndef surface_area_cube(l):\n    return 6*(l*l)\n# Test the function\nprint(surface_area_cube(3)) # Output: 54\nprint(surface_area_cube(4)) # Output: 96\n\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r, h):\n    return 3.14*(r*r)*h\n# Test the function\nprint(volume_cylinder(5, 3)) # Output: 157.07964\nprint(volume_cylinder(4, 8)) # Output: 254.274\n\n\n# Write a function to find the surface area of a cylinder\ndef surface_area_cylinder(r, h):\n    return (2*3.14*r*r) + (2*3.14*r*h)\n# Test the function\nprint(surface_area_cylinder(5, 3)) # Output: 94.2488\nprint(surface_area_cylinder(4, 8)) # Output: 213.456\n\n# Write a function to find the",
        "generated_testcode": "assert volume_cube(3) == 27\n\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # convert integer to binary\n    binary = bin(n)[2:]\n    even_bits = ''.join(['0' if bit == '1' and int(i) % 2 == 1 else bit for i, bit in enumerate(binary)])\n    return int(even_bits, 2)\n\n# example usage:\nn = 5 # 101\nprint(even_bit_set_number(n)) # 4\n# Explanation: The binary representation of 5 is 101, the even bits are the 2nd and 4th bit, so setting them to 0, the resulting binary is 100, which is 4 in decimal.\n\n\n# time complexity: O(logn) \n# space complexity: O(1) ",
        "generated_testcode": "assert even_bit_set_number(10) == 10 # 1010 is 1010 in binary, so all even bits are set\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    count=0\n    if N<K or K<3:\n        return 0\n    else:\n        while K<=N:\n            count+=1\n            N-=K\n            K+=1\n        return count\n\n#Test the function with examples\nprint(No_of_Triangle(6,3))\nprint(No_of_Triangle(7,4))\nprint(No_of_Triangle(12,5))\nprint(No_of_Triangle(15,3)) ",
        "generated_testcode": "assert No_of_Triangle(5,3) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    occurences = {}\n    for i in test_list:\n        if i in occurences:\n            occurences[i] += 1\n        else:\n            occurences[i] = 1\n    return occurences\n\n# test the function with sample data\ntest_list = [(1,2), (3,4), (1,2), (5,6), (3,4), (7,8), (1,2), (5,6), (3,4)]\nprint(check_occurences(test_list)) ",
        "generated_testcode": "assert check_occurences([('A', 10), ('B', 20), ('C', 10), ('D', 30), ('E', 20)]) == [('A', 'C'), ('B', 'D')]\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    n = len(str) \n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j].strip(): \n                count += 1\n    return count \n\n# example usage: \ns = \"hello\"\nprint(number_of_substrings(s)) # Output: 30 \ns = \"abc\"\nprint(number_of_substrings(s)) # Output: 18 ",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 6\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 1: \n        return m\n    if n == 2: \n        return sum(range(1,m+1))\n    if n > 2:\n        total_sequences = []\n        for i in range(1,m+1): \n            sub_sequences = get_total_number_of_sequences(i,n-1)\n            total_sequences.append(sub_sequences)\n        return sum(total_sequences)\n\n# test\nprint(get_total_number_of_sequences(4,3)) # should return 10: [1,2,4], [1,2,8], [1,3,6], [1,3,9], [1,4,8], [1,4,12], [2,4,8], [2,6,12], [2,4,16], [2,8,16], [3,6,12], [3,9,18], [4,8,16] ",
        "generated_testcode": "assert get_total_number_of_sequences(5, 3) == 10\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    list1.pop()\n    list1.append(list2)\n    return list1\n\n#testing\nprint(replace_list([1,2,3,4,5],[6,7,8,9])) #[1, 2, 3, 6, 7, 8, 9] ",
        "generated_testcode": "assert replace_list([1,2,3,4,5],[6,7,8]) == [1,2,3,6,7,8]\n\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    arr = []\n    for i in range(m):\n        sub_arr = []\n        for j in range(n):\n            sub_sub_arr = []\n            for k in range(o):\n                sub_sub_arr.append('*')\n            sub_arr.append(sub_sub_arr)\n        arr.append(sub_arr)\n    return arr\n\n# Test the function\n# Example usage:\n# arr_3d = array_3d(3,4,5)\n# for i in arr_3d:\n#     print(i)\n\n\n# Output:\n# ['*', '*', '*', '*', '*', '*']\n# ['*', '*', '*', '*', '*', '*']\n# ['*', '*', '*', '*', '*', '*']\n# ['*', '*', '*', '*', '*', '*']\n\n\n# Example usage 2:\n# arr_3d = array_3d(2,3,2)\n# for i in arr_3d:\n#     print(i)\n# Output: \n# ['*', '*']\n# ['*', '*']\n# ['*', '*'] ",
        "generated_testcode": "",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\nstr1 = \"Hello, I am learning Python\"\nprint(count_charac(str1)) # Output: 20\n\n\n# Using len() function to count the characters in a string\nprint(len(str1)) # Output: 20\n\n\n# Using for loop to count the characters in a string\ndef count_charac(str1):\n    count = 0\n    for char in str1:\n        if char != \" \":\n            count += 1\n    return count\n\nstr1 = \"Hello, I am learning Python\"\nprint(count_charac(str1)) # Output: 19 ",
        "generated_testcode": "assert count_charac(\"Hello, World!\") == 12\n\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(lst, key=lambda x: x[0], reverse=True) \n  \n# Test the function with an example list \nlst = [(2, 'apple'), (5, 'banana'), (3, 'orange'), (2, 'pear'), (4, 'grapes'), (5, 'apple')] \nprint(sort_on_occurence(lst)) ",
        "generated_testcode": "",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = N+1\n    while True:\n        sq = i**2\n        if sq > N:\n            return sq\n        i += 1 ",
        "generated_testcode": "assert next_Perfect_Square(121) == 144\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return 0\n    elif n == 1: \n        return max(0, arr[0])\n    elif n == 2: \n        return max(arr[0], arr[1])\n    else: \n        include = max(max_sum(arr[2:], n-2) + arr[0] + arr[1], max_sum(arr[1:], n-1)) \n        exclude = max_sum(arr[1:], n-1)\n        return max(include, exclude) \n\n# Testing the function with an example array\narr = [-1, 5, 3, 2, 4, -2, 1, 6, -5, 2]\nn = len(arr) \nprint(\"Maximum sum is\", max_sum(arr, n)) ",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, -10, 5, 7, 6, 8, -3, 2, 1]) == 15\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Return the square root of a number using the babylonian method.\n    \"\"\"\n    if number == 0 or number == 1:\n        return number\n    \n    guess = number / 2\n    \n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess\n        \nprint(babylonian_squareroot(16))\nprint(babylonian_squareroot(10))\nprint(babylonian_squareroot(25))\nprint(babylonian_squareroot(2)) ",
        "generated_testcode": "assert babylonian_squareroot(4) == 2\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(str) \n  \n    # Create a table to store lengths of longest palindromic subsequence \n    # of substring \n    L = [[0 for x in range(n)] for x in range(n)] \n  \n    # All substrings of length 1 are palindrome of length 1 \n    for i in range(n): \n        L[i][i] = 1\n  \n    # Build the table in bottom-up manner \n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]) \n  \n    return L[0][n - 1] ",
        "generated_testcode": "assert lps(\"BBABCBCAB\") == 7 # \"BABCBAB\"\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize the sum to 0\n    sum = 0\n    # Loop over the range from 1 to n\n    for i in range(1, n):\n        # Add the reciprocal of i to the sum\n        sum += 1 / i\n    # Return the sum\n    return sum\n\n# Test the function with n = 5\nprint(harmonic_sum(5))  # Output: 2.283333333333333333334\n\n\n# Write a function that takes a list of numbers and returns the sum of the squares of the numbers\ndef sum_of_squares(lst):\n    # Initialize the sum to 0\n    sum = 0\n    # Loop over the list and add the square of each number to the sum\n    for num in lst:\n        sum += num ** 2\n    # Return the sum\n    return sum\n\n# Test the function with a sample list\nprint(sum_of_squares([1, 2, 3, 4, 5]))  # Output: 55\n\n\n# Write a function to calculate the factorial of a number\ndef factorial(n):\n    # Check if the input is valid\n    if n < 0:\n        return None\n    # Initialize the factorial to 1\n    fact = 1\n    # Loop over the range from 1 to n and multiply each number to the factorial\n    for i in range(1, n + 1):\n        fact *= i\n   ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x in array_nums1,array_nums2))\n\nprint(intersection_array([1,2,3,4,5],[4,5,6,7,8])) #[4, 5]\nprint(intersection_array([1,2,3,4,5],[6,7,8,9])) #[]\nprint(intersection_array([1,2,3,4,5],[3,4,5,6,7])) #[3, 4, 5]\n\n\n\n# Write a Python function to find the union of two arrays using lambda function. \ndef union_array(array_nums1, array_nums2):\n    return list(set(array_nums1 + array_nums2))\nprint(union_array([1,2,3,4,5],[4,5,6,7,8])) #[1, 2, 3, 4, 5, 6, 7, 8]\nprint(union_array([1,2,3,4,5],[6,7,8,9])) #[1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(union_array([1,2,3,4,5],[3,4,5,6,7])) #[1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "assert intersection_array([1,2,3,4,5],[4,5,6,7]) == [4,5]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n\n# test the function with an example tuple and element \nt = (1,2,3,4,5,6,2,7,2,8,2,9,2,10)\nx = 2\nprint(count_X(t, x)) # output: 3 ",
        "generated_testcode": "assert count_X((\"abracadabra\", \"a\") == 5)\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list\n\n#test the function\nprint(insert_element([1,2,3,4,5],0)) #[0, 1, 0, 2, 0, 3, 0, 4, 0, 5] ",
        "generated_testcode": "assert insert_element([1,2,3,4,5],0) == [0,1,0,2,0,3,0,4,0,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return abs(numbers), np.angle(numbers, deg=True)\n#Test the function with the following code:\nimport numpy as np\nimport cmath\nnumbers = [2+3j, -5-1j, 0+2j, 3-5j, -4+0j, 5+5j]\nprint(convert(numbers))\n#Output: (array([5.3852136104631400535, 5.654817755245821237, 2.0, 5.654817755245821237, 4.0, 7.071067811884124141])\n#Output: array([56.30993902179823039, -53.130102354135959, 90.0, 224.49041220118791967, 90.0, 63.434948563322454374]) ",
        "generated_testcode": "assert convert(2+3j) == (2.236, 1.107)\n\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n\n# Test the function with a list\nlist1 = [1, 'apple', 3, 'banana', 4, '2', 5, 'orange', 8]\nprint(count_integer(list1)) # Output: 3 ",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = text.split()\n    result = []\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result.append(word)\n    return result\n\n# Test the function with sample text\nsample_text = \"The quick brown fox jumps over the lazy dog. The dog slept all day.\"\nprint(words_ae(sample_text) ) ",
        "generated_testcode": "assert words_ae(\"apple and banana\") == [\"apple\", \"and\", \"a\", \"banana\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    colors = []\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                colors.append((l[i], l[j], l[k]) if (i!=j or j!=k or k!=i) else None)\n    return colors\n\n# Test\ncolors = ['red', 'green', 'blue']\nn = 2\nresult = combinations_colors(colors, n)\nprint(result) ",
        "generated_testcode": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    primes = [True] * n\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n, p):\n                primes[i] = False\n        p += 1\n    return sum(primes[2:])\n\n# Test the function with some examples\nprint(count_Primes_nums(10))  # Output: 4 (2, 3, 5, 7, 9)\nprint(count_Primes_nums(20))  # Output: 8 (2, 3, 5, 7, 11, 13, 17, 19) ",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    temp=a\n    a=b\n    b=temp\n    return a,b\n\n#calling the function and passing values\na=5\nb=10\nprint(\"Before swapping a= \",a,\"b= \",b)\na,b=swap_numbers(a,b)\nprint(\"After swapping a= \",a,\"b= \",b) ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x%2!=0, array_nums))\n\n\n#test the function with an example\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(count_odd(array_nums)) # Output: 4 ",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(sorted((max(test_tup1), max(test_tup2))) + sorted(test_tup1 + test_tup2)[2:])\n\n# Test the function with the following code\na = (4, 7, 9, 1, 3)\nb = (8, 5, 2, 3, 6)\nprint(maximize_elements(a, b)) # Output: (9, 8, 7, 6, 5) ",
        "generated_testcode": "assert maximize_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)) == (5, 6, 7, 8, 9)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n==0: \n        return 2\n    elif n==1: \n        return 3\n    elif n==2: \n        return 5\n    else: \n        n -= 2\n        i = 1\n        a = 5\n        b = 3\n        c = 7\n        while n > 0: \n            n -= 1\n            a, b, c = b, (a + 2*c - 2), (a + c - 2)\n        return c \n\n# Driver code \nfor i in range(10): \n    print(newman_prime(i)) ",
        "generated_testcode": "assert newman_prime(1) == 3\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return \"Invalid input\"\n    else:\n        res = []\n        for i in range(len(test_tup1)):\n            res.append(test_tup1[i] / test_tup2[i])\n        return tuple(res)\n\n\n\n# Test the function with sample tuples\ntup1 = (4, 6, 10, 8, 15)\ntup2 = (2, 3, 2, 5)\nprint(division_elements(tup1, tup2)) ",
        "generated_testcode": "assert division_elements((10, 20, 30), (2, 5)) == (5.0, 4.0, 6.0)\n\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    first_half = list1[:L]\n    second_half = list1[L:]\n    return first_half, second_half\n\n\n# test the function with sample data\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(split_two_parts(my_list, 3))\n# output: ([1, 2, 3], [4, 5, 6, 7, 8, 9, 10])\n\n\n# test the function with sample data\nmy_list = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nprint(split_two_parts(my_list, 4))\n# output: ([10, 20, 30, 40], [50, 60, 70, 80, 90, 100]) ",
        "generated_testcode": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 3) == ([1, 2, 3], [4, 5, 6, 7, 8])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    res = d1.copy()\n    res.update(d2)\n    return res\n\n#Example usage:\nd1 = {'a': 1, 'b': 2}\nd2 = {'b': 3, 'c': 4}\nprint(merge_dict(d1,d2)) # {'a': 1, 'b': 3, 'c': 4}\n\n\n#Note that the values in d2 will override the values in d1 for any common keys. ",
        "generated_testcode": "assert merge_dict({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 3, 'c': 4}\n\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes in a dog's age in human years and returns the equivalent in dog years.\n    \"\"\"\n    if h_age < 0:\n        return \"Invalid input. Age cannot be negative.\"\n    else:\n        d_age = h_age * 7\n        return d_age\n\n# test the function\nprint(dog_age(10)) # should print 70\nprint(dog_age(2)) # should print 14\nprint(dog_age(-1)) # should print \"Invalid input. Age cannot be negative.\" ",
        "generated_testcode": "assert dog_age(1) == 15\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [S[i:i+step] for i in range(0, len(S), step)]\n\n# example usage: \nS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nprint(list_split(S, 3)) # should return [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(list_split(S, 5)) # should return [[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13], [14, 15]]\n\n# Here's the code:\ndef list_split(S, step):\n    return [S[i:i+step] for i in range(0, len(S), step)]\n\n# The code uses a list comprehension to iterate through the list `S` in steps of `step`, and slices the list into sublists of length `step`. The expression `S[i:i+step]` returns a sublist starting from index `i` and ending at `i+step-1`, which is then appended to the result list. The `range` function starts at 0 and goes",
        "generated_testcode": "",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return 4 * (l * l)\n\n# Test the function with a test value\nprint(lateralsurface_cube(5)) # Output: 80\n\n\n# Write a function to find the volume of a cube\ndef volume_cube(l):\n    return l ** 3\n\n# Test the function with a test value\nprint(volume_cube(5)) # Output: 125\n\n# Write a function to find the total surface area of a cube\ndef surfacearea_cube(l):\n    return 6 * (l ** 2)\n\n# Test the function with a test value\nprint(surfacearea_cube(5)) # Output: 150\n\n# Write a function to find the volume of a rectangular prism\ndef volume_rectangular_prism(l, w, h):\n    return l * w * h\n\n# Test the function with a test value\nprint(volume_rectangular_prism(5, 10)) # Output: 50\n\n# Write a function to find the total surface area of a rectangular prism\ndef surfacearea_rectangular_prism(l, w, h):\n    return 2 * (l * w + l * h + w * h)\n\n# Test the function with a test value\nprint(surfacearea_rectangular_prism(5, 10)) # Output: 70\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    return",
        "generated_testcode": "assert lateralsurface_cube(3) == 54\n\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\" This function takes an integer n as input and returns the sum of squares of first n odd natural numbers. \"\"\"\n    i = 1\n    sum = 0\n    count = 0\n    while count < n:\n        if i % 2 != 0:\n            sum += i * i\n            count += 1\n        i += 1\n    return sum\n\n# Test the function with an example\nprint(square_Sum(5)) # Output: 65 ",
        "generated_testcode": "assert square_Sum(3) == 35\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    else: \n        return n * 10 ** (n - 1) + find_star_num(n - 1) ",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return ord(k)\n\n# Test the function with some examples\nprint(ascii_value('a')) # Output: 97\nprint(ascii_value('A')) # Output: 65\nprint(ascii_value('0')) # Output: 48\nprint(ascii_value('@')) # Output: 64\nprint(ascii_value(' ')) # Output: 32\nprint(ascii_value('*')) # Output: 42 ",
        "generated_testcode": "assert ascii_value('a') == 97\n\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"This function takes an array as input and returns the sum of even numbers at even indexes.\n    :param arr: input array\n    :param n: length of array\n    :return: sum of even numbers at even indexes\"\"\"\n    sum = 0\n    for i in range(0,n):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n#Example:\narr = [1,2,3,4,5,6,7,8,9,10]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n)) # Output: 20 (2+6+10=18, but we need to return 18+2=20) ",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10],6) == 20 # Testing with a list of 6 elements\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    sum = 0\n    for i in range(n): \n        sum += (2*i)**5\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the fifth power of first\", n, \"even natural numbers is:\", even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(3) == 220\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list\n\n#Example:\n#Input: [(1,2,3,4),(4,5,6),(7,8,9)]\n#Output: [4,6,9] ",
        "generated_testcode": "assert rear_extract([(1,2,3,4,5,6,7,8,9]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Subtract the elements of two tuples with the same length element-wise\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must be of the same length\"\n    else:\n        return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)) if i <= len(test_tup2) - 1)\n\n\n# Example usage:\nt1 = (1, 2, 3, 4)\nt2 = (4, 5, 6)\nprint(substract_elements(t1, t2)) # Output: (-3, -3, -2) ",
        "generated_testcode": "assert substract_elements((1, 2, 3, 4), (4, 5, 6)) == (-3, -3, -2)\n\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    b=0\n    for k in range(0, n+1, 2): \n        b+= binomial_coefficient(n, k)\n    return b \n  \ndef binomial_coefficient(n, k): \n    return int(factorial(n) // (factorial(k) * factorial(n-k)) ) \n  \ndef factorial(n): \n    res = 1\n    for i in range(1, n+1): \n        res *= i \n    return res \n  \nn = 4\nprint(even_binomial_Coeff_Sum(n)) ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(4) == 10 # Testing for n = 4\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr = []\n    for i in range(n):\n        arr.append(i+1)\n    for i in range(m):\n        remove = a[i]\n        arr.remove(remove)\n    return arr[0]\n\n#Example\na = [3, 1, 2, 5, 6, 4, 7]\nn = 7\nm = 3\nprint(get_Position(a,n,m)) # Output: 1\n\na = [3, 1, 2, 5, 6, 4, 7]\nn = 7\nm = 2\nprint(get_Position(a,n,m)) # Output: 2 ",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9],5,6) == 4\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=3.14159\n    vol=pi*(r**2)*h\n    return vol\nr=int(input(\"Enter the radius of the cylinder: \"))\nh=int(input(\"Enter the height of the cylinder: \"))\nprint(\"The volume of the cylinder is:\", volume_cylinder(r,h))\n\n\n#to find the volume of a cylinder, we use the formula pi times the radius squared times the height. We can define a function that takes in the radius and height as arguments and returns the volume, which we can then use to calculate and print the volume of the cylinder. We can use the value of pi from the math module or define it as a variable within the function. ",
        "generated_testcode": "assert volume_cylinder(5, 10) == 785.398163397444830002\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n\n#test the function with sample dictionary\nsample_dict = {'apple': 10, 'banana': 20, 'orange': 5, 'grape': 25, 'kiwi': 10}\nn = 15\nresult = dict_filter(sample_dict,n)\nprint(result) # Output: {'banana': 20, 'orange': 5, 'kiwi': 10} ",
        "generated_testcode": "assert dict_filter({'apple': 10, 'banana': 20, 'orange': 5, 'kiwi': 8}, 10) == {'apple': 10}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = {}\n    for i in test_tup:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    return count\n\ndef get_element_before(test_tup, record):\n    count = count_first_elements(test_tup)\n    for i in range(test_tup.index(record)-1, -1, -1):\n        if test_tup[i] == record:\n            count[test_tup[i]] -= 1\n            if count[test_tup[i]] == 0:\n                del count[test_tup[i]]\n        if count.get(test_tup[i]):\n            return test_tup[i]\n    return None\n\n# Test the function with an example\ntest_tup = (1, 2, 3, 4, 5, 2, 6, 1, 7, 8, 2, 9, 2)\nrecord = 2\nprint(get_element_before(test_tup, record)) ",
        "generated_testcode": "assert count_first_elements(('a', ('a', 'b', 'c', 'd', 'a', 'e', 'a', 'f')) == 2\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a = 42\n    b = 1\n    for i in range(1, n):\n        a += 9 * i\n        b += 10 * i\n    return a, b\n\ndef nth_decagonal(n):\n    if n == 1:\n        return 1\n    else:\n        a, b = is_num_decagonal(n)\n        return (a * b) // 2\n\n# Test cases\nprint(nth_decagonal(1)) # 1\nprint(nth_decagonal(2)) # 3\nprint(nth_decagonal(3)) # 13\nprint(nth_decagonal(4)) # 28\nprint(nth_decagonal(5)) # 55\nprint(nth_decagonal(6)) # 91\nprint(nth_decagonal(7)) # 140\nprint(nth_decagonal(8)) # 193\nprint(nth_decagonal(9)) # 257\nprint(nth_decagonal(10)) # 3360 ",
        "generated_testcode": "assert is_num_decagonal(5) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    \"\"\"\n    Searches for an item in a given list using sequential search.\n    Returns the index of the item if found, else returns -1.\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n    return -1\n\n# Test the function with a sample array\ndata = [3, 6, 1, 8, 2, 9, 4, 7, 5]\nprint(sequential_search(data, 4)) # Output: 3\nprint(sequential_search(data, 10)) # Output: -1 ",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == 3\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty dictionary to store the elements of the list\n    seen = {}\n    # iterate through the list\n    for item in test_list:\n        # if the item is already in the dictionary, it's not unique, return False\n        if item in seen:\n            return False\n        # otherwise add the item to the dictionary\n        seen[item] = True\n    # if we get through the loop without finding a duplicate, the list is unique, return True\n    return True\n\n# test the function with some examples\nprint(all_unique([1, 2, 3, 4, 5, 6]))  # True\nprint(all_unique([1, 2, 3, 4, 5, 5]))  # False\nprint(all_unique([\"apple\", \"banana\", \"cherry\", \"date\"]))  # True\nprint(all_unique([\"apple\", \"banana\", \"cherry\", \"apple\"]))  # False ",
        "generated_testcode": "assert all_unique([1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x:x[0]-x[1],zip(nums1,nums2))\n\n\n#Test the function with two lists\nnums1 = [1,2,3,4,5,6]\nnums2 = [4,5,6,7,8,9]\nprint(sub_list(nums1,nums2)) #[-3,-3,-3,-3,-3]\n\n\n#Test the function with another two lists\nnums1 = [5,6,7,8,9]\nnums2 = [2,3,4,6,7]\nprint(sub_list(nums1,nums2)) #[3,3,-1,2,-2] ",
        "generated_testcode": "assert sub_list([1,2,3,4,5],[2,3,4]) == [1,5]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = str(n)\n    for i in n:\n        if n.count(i) > int(i):\n            return False\n    return True\n\n#test the function\nprint(validate(2232445)) # False\nprint(validate(112123)) # False\nprint(validate(12345)) # True\nprint(validate(554321)) # True ",
        "generated_testcode": "assert validate(123456) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list:\n        if i != element:\n            return False\n    return True\n\n# Test the function with sample data\nmy_list = ['apple', 'apple', 'apple', 'apple', 'apple']\nprint(check_element(my_list,'apple')) # Output: True\n\n\nmy_list = ['apple', 'apple', 'banana', 'apple']\nprint(check_element(my_list,'apple')) # Output: False ",
        "generated_testcode": "assert check_element(['apple', 'apple', 'apple', 'apple', 'apple'], 'apple') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r\"^[a-z]*a[b]{2,3}[a-z]*$\"\n    result = re.search(pattern, text)\n    return result != None\n    \nprint(text_match_two_three(\"abbbbc\")) # True\nprint(text_match_two_three(\"ab\")) # False\nprint(text_match_two_three(\"aabbbbc\")) # False\nprint(text_match_two_three(\"aabbcd\")) # False\nprint(text_match_two_three(\"aabbbbcd\")) # True\nprint(text_match_two_three(\"aabb\")) # False\nprint(text_match_two_three(\"abb\")) # False ",
        "generated_testcode": "assert text_match_two_three(\"ab\") == False\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Copy the original array k times and calculate the prefix sum \n    prefix_sum = [0] * (n * k) \n    for i in range(n): \n        for j in range(k): \n            prefix_sum[i + j * n] = a[i] \n            prefix_sum[i + j * n] += prefix_sum[i + j * n - 1] if j > 0 else 0\n    # Find maximum subarray sum in the modified array \n    max_sum = float('-inf') \n    for i in range(n * k): \n        for j in range(i + 1, n * k + 1): \n            max_sum = max(max_sum, prefix_sum[j] - prefix_sum[i]) \n    return max_sum ",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, -2, 3, 4, -1, 5, 2, -3, 6, -1], 3) == 20\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n    \nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of squares of first\",n,\"even numbers is: \",square_Sum(n)) ",
        "generated_testcode": "assert square_Sum(4) == 20 # Testing for n = 4\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ans = 0\n    for i in range(N):\n        if arr[i] != -1:\n            inv = pow(arr[i], P-2, P)\n            ans += inv\n            arr[i] = -1\n            for j in range(i+1, N):\n                if arr[j] != -1:\n                    arr[j] *= inv\n    return ans % P\n\n# Driver code\nif __name__ == '__main__':\n    arr = [2, 4, 5, 7, 8, 10, 12]\n    P = 13\n    N = len(arr)\n    print(modular_inverse(arr, N, P)) ",
        "generated_testcode": "assert modular_inverse([2, 3, 4, 5, 6, 7, 8, 9], 10) == 2\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, N+1): \n        if (int(str(i)[-1]) % 2 != 0): \n            count += 1\n    return count \n\n# Taking input from user\nN = int(input(\"Enter the year: \"))\n\n# Function call\nprint(\"Number of odd days in the year\", N, \"are:\", odd_Days(N)) ",
        "generated_testcode": "assert odd_Days(2021) == 243\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return [l for l in list1 if len(l) == max_length]\n\n\n# Test the function\nlist1 = [[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12, 13], [14, 15, 16], [17, 18, 19, 20, 21, 22, 23]]\nprint(max_length(list1)) #[ [8, 9, 10, 11, 12, 13], [17, 18, 19, 20, 21, 22, 23]] ",
        "generated_testcode": "",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0 or k == 0: \n        return 0\n    if n == 1: \n        return k \n    if n == 2: \n        return k * k\n    if k == 1: \n        return 1\n    if n < k: \n        return count_no_of_ways(n, n) \n    # Initialize the dp table \n    dp = [0] * n \n    dp[0] = k \n    dp[1] = k * k \n    # Fill the dp table \n    for i in range(2, n): \n        dp[i] = dp[i-1] * (k-1) + dp[i-2] * (k-1) \n        dp[i] %= (10**9 + 7)  # To handle large values of k \n    return dp[n-1] \n\n# Test the function with example values of n and k \nn = 3 \nk = 2 \nprint(count_no_of_ways(n, k)) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 18\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if m==0:  \n        return \"Error: division by zero\"  \n    else:  \n        return n/m  \n  \n#test the function with two numbers  \nprint(find(10,2)) #5  \nprint(find(10,0) #Error: division by zero ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    side = ((w**2) + (h**2))**0.5\n    return side\n\n# test function with some sample inputs\nprint(otherside_rightangle(3,4))\nprint(otherside_rightangle(5,12))\nprint(otherside_rightangle(8,10)) ",
        "generated_testcode": "assert otherside_rightangle(3, 4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    maxval = listval[0]\n    for val in listval:\n        if val > maxval:\n            maxval = val\n    return maxval\n\n#Test the function with different input lists\nprint(max_val([1, 5, 3, 7, 2, 10, 'hello', 4, 'world', 100, 6, 'python', 2, 4, 7]) #output: 100\nprint(max_val([-5, 0, -10, -2, -100, -7, -4, -30])) #output: 0\nprint(max_val([])) #output: ValueError: The list is empty. ",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        if number%i == 0:\n            sum += i\n    return sum\n\n# Test the function\nprint(sum_div(12)) # Output: 28 ",
        "generated_testcode": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    brr = [0] * n\n    inv_count = merge_sort(arr, brr, 0, n-1) \n    return inv_count\ndef merge_sort(arr, brr, start, end): \n    inv_count = 0\n    if start < end: \n        mid = (start + end) // 2\n        inv_count += merge_sort(arr, brr, start, mid) \n        inv_count += merge_sort(arr, brr, mid + 1, end) \n        inv_count += merge(arr, brr, start, mid, end) \n    return inv_count \ndef merge(arr, brr, start, mid, end): \n    i = start \n    j = mid + 1\n    k = start \n    inv_count = 0\n    while i <= mid and j <= end: \n        if arr[i] <= arr[j]: \n            brr[k] = arr[i]\n            i += 1\n        else: \n            brr[k] = arr[j] \n            inv_count += (mid - i + 1) \n            j += 1\n        k += 1\n    while i <= mid: \n        brr[k] = arr[i] \n        i += 1\n        k += 1\n    while j <= end: \n        brr[k] = arr[j] \n        j += 1\n        k += 1",
        "generated_testcode": "assert get_Inv_Count([1,2,3,4,5,6,7,8,9]) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n\n# Test the function with an example\nnested_list = [1, [2, 3, [4, 5, [6, 7]], 8, [9, 10, [11, [12, 13, [14, 15, 16]]]]] ]\nprint(flatten_list(nested_list) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16] ",
        "generated_testcode": "assert flatten_list([1, 2, [3, 4, [5, 6, 7], 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                res.append(i)\n    return res\n\n# Test the function with sample inputs\nl1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nl2 = [[4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(intersection_nested_lists(l1, l2)) # Output: [[4, 5, 6], [7, 8, 9]]\n\nl1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nl2 = [[4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(intersection_nested_lists(l1, l2)) # Output: [[4, 5, 6], [7, 8, 9]]\n\nl1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nl2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]\nprint(intersection_nested_lists(l1,",
        "generated_testcode": "assert intersection_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [[2, 3], [3, 4]]) == [[2, 3], [3]]\n\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_temp = stdata[0][1]\n    max_pressure = stdata[0][2]\n    max_wind = stdata[0][3]\n    for data in stdata:\n        if data[1] > max_temp:\n            max_temp = data[1]\n        if data[2] > max_pressure:\n            max_pressure = data[2]\n        if data[3] > max_wind:\n            max_wind = data[3]\n    return (max_temp, max_pressure, max_wind)\n\n\n# test the function with some sample data\nsample_data = [(\"Jan\", 20, 30000, 10), (\"Feb\", 25, 32000, 15), (\"Mar\", 18, 29000, 8), (\"Apr\", 16, 27000, 11), (\"May\", 22, 31000, 12), (\"Jun\", 25, 35000, 16)]\nprint(max_aggregate(sample_data)) # Output: (25, 35000, 16) ",
        "generated_testcode": "assert max_aggregate([(1,2,3), (4,5,6), (7,8,9)]) == 24\n\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    dp = [[0 for i in range(n+1)] for j in range(n+1)] \n    for i in range(n+1): \n        dp[i][0] = 1\n        dp[0][i] = 1\n    for i in range(1,n+1): \n        for j in range(1,n+1): \n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            if i == j: \n                dp[i][j] -= 1\n            if i < j: \n                dp[i][j] += dp[i-1][j-1] \n    return dp[n][n] ",
        "generated_testcode": "assert count_binary_seq(1) == 1\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) if isinstance(v, dict) else 0 for v in d.values())\n\n\n\n# Test cases\nprint(dict_depth({}))  # 0\nprint(dict_depth({'a': 1, 'b': 2}))  # 1\nprint(dict_depth({'a': 1, 'b': {'c': {'d': 2, 'e': 3}})  # 2\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': 1}}})  # 3\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': 1}}}})  # 4\nprint(dict_depth({'a': {'b': 1, 'c': {'d': 2, 'e': {'f': {'g': {'h': 3, 'i': {'j': 4}}}})  # 3\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': 1, 'g': 2, 'h': {'i': {'j': {'k': {'l': 3}}}}}})  # 4\nprint(dict_depth({'a': {'b': {'c': {'d': {'e': {'f': {'g': 1, 'h': 2, 'i': {'j': {'",
        "generated_testcode": "assert dict_depth({}) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num = bin(n)\n    if num[2] == '0':\n        return 0\n    else:\n        return len(num)-2\n\n# Driver code\nn = 12\nprint(\"The most significant bit number which is also set is: \", set_Bit_Number(n)) ",
        "generated_testcode": "assert set_Bit_Number(15) == 4\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]>a[j]:\n                res += 1\n    return res%2\nn = int(input())\na = list(map(int,input().split())\nif solve(a,n)==0:\n    print(\"YES\")\nelse:\n    print(\"NO\") ",
        "generated_testcode": "assert (solve([1,2,3,4,5,6,7,8,9],6) == True)\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    actual_index = index - ranges[0] + rotations  \n    if actual_index > len(arr)-1 :  \n        actual_index = actual_index - len(arr)  \n    return arr[actual_index] \n\narr = [4,5,6,7,8,9,10,1,2,3]  \nrotations = 2  \nindex = 6  \nranges = [4,len(arr)-1]  \nprint(find_Element(arr,ranges,rotations,index)) # Output: 9 ",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6],0,4,0) == 1\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n    return p_words\n\nprint(start_withp(['python', 'code', 'fun', 'play', 'puzzle', 'pie', 'pizza'])) # ['python', 'play', 'puzzle', 'pizza']\n\n\n# Using List comprehension\ndef start_withp(words):\n    return [word for word in words if word.startswith('p')]\nprint(start_withp(['python', 'code', 'fun', 'play', 'puzzle', 'pie', 'pizza'])) # ['python', 'play', 'puzzle', 'pizza']\n\n\n# Using filter() and lambda function\ndef start_withp(words):\n    return list(filter(lambda word: word.startswith('p'), words))\nprint(start_withp(['python', 'code', 'fun', 'play', 'puzzle', 'pie', 'pizza'])) # ['python', 'play', 'puzzle', 'pizza'] ",
        "generated_testcode": "assert start_withp(['python', 'java', 'c++', 'kotlin', 'swift', 'pascal']) == ['python', 'pascal']\n\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if index >= n or k < 0 or k >= n:\n        return 0\n    if index == n-1:\n        return a[index]\n\n    if k == 0:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n\n\n    return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k-1), max_sum_increasing_subseq(a, n, index+1, k))\n\n\n# Driver code\na = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nn = len(a)\nk = 3\nindex = 2\nprint(max_sum_increasing_subseq(a, n, index, k))  # Output: 250\n\n\n# Time complexity: O(2^n) ",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 6) == 39\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if m<0 or n<0:\n        return None\n    if m>=len(tuplex) or n>=len(tuplex):\n        return None\n    return tuplex[m][n]\n\n#test the function\ntest_tuple = ((1,2,3),(4,5,6),(7,8,9))\nprint(colon_tuplex(test_tuple,1,1)) # should print 5\nprint(colon_tuplex(test_tuple,2,2)) # should print 9\nprint(colon_tuplex(test_tuple,0,3)) # should print None\nprint(colon_tuplex(test_tuple,3,1)) # should print None ",
        "generated_testcode": "assert colon_tuplex((1,2,3,4,5,6,7,8,9),2,4) == (2,4)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    products = [nums1[i] * nums2[j] for i in range(len(nums1)) for j in range(len(nums2)]\n    products.sort()\n    return products[-N:]\n\n# Test case\nnums1 = [1, 2, 3, 4]\nnums2 = [5, 6, 7]\nN = 2\nprint(large_product(nums1, nums2, N)) # Output: [11, 12] ",
        "generated_testcode": "assert large_product([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 2) == [50, 40]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a>b: \n        return a\n    else: \n        return b\n\n#Test the function with different values\nprint(maximum(2,3)) # Output: 3\nprint(maximum(7,9)) # Output: 9\nprint(maximum(20,12)) # Output: 20\nprint(maximum(11,11)) # Output: 11 ",
        "generated_testcode": "assert maximum(5,10) == 10\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    #removing the brackets and splitting the string at the comma\n    str1 = str1.strip(\"()\")\n    lst = str1.split(\",\")\n    #creating an empty list to store the integers\n    num_lst = []\n    #iterating through the string list and converting each element to integer and appending to the integer list\n    for i in lst:\n        num_lst.append(int(i))\n    #converting the integer list to a tuple\n    tup = tuple(num_lst)\n    return tup\n    \n#Example:\n#input: (1,2,3,4)\n#output: (1,2,3,4) ",
        "generated_testcode": "assert string_to_tuple(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\n\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0: \n        return 1\n    count = 0\n    while n & 1: \n        n >>= 1\n        count += 1\n    return 1 << (count + 1) ",
        "generated_testcode": "assert set_left_most_unset_bit(0b10101010) == 0b11101111 # 0b1101111 is the binary representation of the expected output\n\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=3.14\n    volume=1/3*pi*r**2*h\n    return volume\nr=int(input(\"Enter the value of radius of cone: \"))\nh=int(input(\"Enter the value of height of cone: \"))\nprint(\"The volume of cone is:\",volume_cone(r,h))\n\n\n#Output:\n#Enter the value of radius of cone: 5\n#Enter the value of height of cone: 10\n#The volume of cone is 125.6636\n",
        "generated_testcode": "assert volume_cone(3, 5) == 141.371666941729868158\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for num in list1:\n        if num > 0:\n            print(num, end=\" \")\n\nlist1 = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\npos_nos(list1)\n\n\n#Output: 2 4 6 8 10 ",
        "generated_testcode": "assert pos_nos([1, -2, 3, 4, -5, 6, -7, 8, 0, -9]) == [1, 3, 4, 6, 8]\n\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 2:\n        return 0\n    \n    dp = [0] * n\n    ans = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if j == 0:\n                dp[j] = max(dp[j], grid[i][j])\n            else:\n                dp[j] = max(dp[j], dp[j-1] + grid[i][j])\n        \n        for j in range(n):\n            if j > 0:\n                dp[j] = max(dp[j], dp[j-1])\n        \n        ans += max(dp)\n        \n    return ans\n\n# test\ngrid = [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\nn = 2\nprint(max_sum_rectangular_grid(grid, n)) # Output: 13 ",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9]], 2) == 11\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_len = 0\n    for word in str.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len \n        \n# Test the function with some examples\nprint(find_Max_Len_Even(\"The quick brown fox jumped over the lazy dog\")) # 6\nprint(find_Max_Len_Even(\"Hello world, this is a sample text\")) # 6\nprint(find_Max_Len_Even(\"Python is an interpreted high-level language\")) # 10\nprint(find_Max_Len_Even(\"Learning Python is fun\")) # 0\nprint(find_Max_Len_Even(\"\")) # 0 ",
        "generated_testcode": "assert find_Max_Len_Even(\"The quick brown fox jumps over the lazy dog\") == 6\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    start = 0\n    end = len(A) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            result = mid\n            start = mid + 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result\n\n# Example usage:\nA = [1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9]\nx = 4\nprint(find_last_occurrence(A, x))  # Output: 5 (index of the last occurrence of 4 in A) ",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 4, 5, 5, 5, 6], 5) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given a list, return its run-length encoded version.\n    \"\"\"\n    if not alist:\n        return []\n    result = []\n    prev = None\n    count = 0\n    for element in alist:\n        if element != prev:\n            if count > 1:\n                result.append((count, prev))\n            prev = element\n            count = 1\n        else:\n            count += 1\n    if count > 1:\n        result.append((count, prev))\n    return result\n\n# Example usage:\n# modified_encode([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]) \u279e [(2, 1), (3, 2), (3, 3)]\n# modified_encode([]) \u279e []\n# modified_encode([1, 2, 3, 3, 4, 5, 5, 5]) \u279e [(1, 1), (1, 2), (1, 3), (2, 5)]\n\n\ndef modified_decode(alist):\n    \"\"\"\n    Given a run-length encoded list, return its decoded version.\n    \"\"\"\n    if not alist:\n        return []\n    result = []\n    for count, element in alist:\n        result.extend([element] * count)\n    return result\n\n# Example usage:\n# modified_decode([(2, 1), (",
        "generated_testcode": "",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    side = range(1,s/3+1)\n    max_vol = 0\n    for i in side:\n        for j in side:\n            for k in side:\n                if i*j*k == s-i-j-k:\n                    if i*j*k > max_vol:\n                        max_vol = i*j*k\n    return max_vol\n\n#Test the function with a sample value of s\ns = 10\nprint(max_volume(s)) # Output: 16",
        "generated_testcode": "assert max_volume(12) == (2, 2, 2, 2)\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"\\b\\w{5}\\b\"\n    words = re.findall(pattern, text)\n    return words\n\n# Test\nprint(find_long_word(\"The quick brown fox jumps over the lazy dog.\")) # ['quick', 'brown', 'jumps', 'over', 'lazy'] ",
        "generated_testcode": "assert find_long_word(\"Hello world, I am a Python programmer\") == \"Python\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    sum_of_square = 0\n    square_of_sum = 0\n    for i in range(1, n+1):\n        sum_of_square += i*i\n        square_of_sum += i\n    return abs(square_of_sum**2 - sum_of_square)\n\n\n# Test the function\nprint(sum_difference(10))  # Output: 2640",
        "generated_testcode": "assert sum_difference(10) == 2640\n\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    demlo_num = \"\" \n    for i in s: \n        if i == '0' or i == '1': \n            demlo_num += i \n    return demlo_num \n  \n# Driver code \ns = input(\"Enter a binary number: \")\nprint(find_demlo(s)) ",
        "generated_testcode": "assert find_demlo(1) == 1\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    min_val = min(list1)\n    indices = []\n    for i in range(len(list1)):\n        if list1[i] == min_val:\n            indices.append(i)\n    return indices\n\n# Test the function with an example:\nlist1 = [4, 9, 2, 7, 5, 2, 8, 2, 6, 3, 1, 5]\nprint(position_min(list1))  # Output: [2, 3, 5] ",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3]) == [0, 6]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    temp = arr[n-1]\n    for i in range(n-1, cur+out_of_place, -1):\n        arr[i] = arr[i-1]\n    arr[cur+out_of_place] = temp\n    return arr\n\ndef alternate_arrangement(arr):\n    n = len(arr)\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if arr[i] >= 0:\n            pos += 1\n        else:\n            neg += 1\n    out_of_place = abs(pos-neg)\n    i = 0\n    j = 1\n    while i < n and j < n:\n        if arr[i] >= 0 and arr[j] < 0:\n            i += 1\n            j += 1\n        elif arr[i] < 0 and arr[j] >= 0:\n            right_rotate(arr, n, out_of_place, i)\n            out_of_place -= 1\n        else:\n            i += 1\n            j += 1\n    return arr\n\n#Test the function with example\narr = [3, -1, -5, 2, 6, -2, 8, -9, 10, -7, 4]\nprint(alternate_arrangement(arr)) # Output: [-1, 2, -5, 3, -9, 6, -7, 8, -2",
        "generated_testcode": "",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize variables\n    sum_alternates = 0\n    alternate_flag = True\n    # loop through the tuple\n    for i in test_tuple:\n        # check if current element is an alternate\n        if alternate_flag:\n            # add to sum_alternates\n            sum_alternates += i\n        # toggle alternate_flag\n        alternate_flag = not alternate_flag\n    # return sum of alternates\n    return sum_alternates\n\n# test the function with a sample tuple\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_of_alternates(test_tuple)) # Output: 12 ",
        "generated_testcode": "assert sum_of_alternates(((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 12 # Testing with a tuple of integers\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    squares = []\n    i = 1\n    while i * i <= n:\n        squares.append(i * i)\n        i += 1\n    squares.reverse()\n    ans = []\n    while n > 0:\n        if squares[0] > n:\n            return 0\n        if n % squares[0] == 0:\n            ans.append(n)\n            n //= squares[0]\n        else:\n            ans.append(n - (n // squares[-1]) * squares[-1])\n            n = n % squares.pop()\n    return len(ans)\n    \n# Test the function with some examples\nprint(get_Min_Squares(13))  # Output: 2\nprint(get_Min_Squares(25))  # Output: 2\nprint(get_Min_Squares(27))  # Output: 3 ",
        "generated_testcode": "assert get_Min_Squares(17) == 4\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    word_dict = {}\n    for word in test_list:\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n\n    max_word = max(word_dict, key=word_dict.get)\n    return max_word\n\n\n# Test case\ntest_list = ['apple', 'banana', 'apple', 'orange', 'apple', 'orange', 'orange', 'banana']\nprint(most_occurrences(test_list)) ",
        "generated_testcode": "assert most_occurrences(['apple', 'banana', 'apple', 'orange', 'banana', 'apple', 'grape', 'orange']) == 'apple'\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y or y == z or x == z:\n        return True\n    else:\n        return False\n\n# test the function\nprint(check_isosceles(5, 7, 7)) # True\nprint(check_isosceles(6, 8, 10)) # False\nprint(check_isosceles(4, 4, 4)) # True ",
        "generated_testcode": "assert check_isosceles(5, 6, 7) == False\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if m<=n:\n        return list1[m:] + list1[:m]\n    else:\n        return rotate_left(list1,m-n,n)\n\nlist1 = [1,2,3,4,5,6,7,8,9]\nm = 3\nn = 2\nprint(rotate_left(list1,m,n))\n\n#Output: [3,4,5,6,7,8,9,1,2] ",
        "generated_testcode": "assert rotate_left([1,2,3,4,5,6,7],2,2) == [3,4,5,6,7,1,2]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num < 0:\n            count += 1\n    return count\n\n# test the function\nprint(neg_count([-1,-5,6,3,-8,9,-12,0,45,-67,89,11,0,23,4,-45,66,-89,-100])) # Output: 4 ",
        "generated_testcode": "assert neg_count([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 4\n\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\b\\w{3,5}\\b'\n    result = re.findall(pattern, text)\n    return result\n\nprint(find_char(\"Hello World, I am a Python Programmer. I love programming.\"))  # Output: ['Hello', 'World', 'am', 'a', 'Python', 'Programmer', 'I', 'love', 'programming'] ",
        "generated_testcode": "assert find_char(\"Hello world, I am a Python developer.\") == [\"Hello\", \"world\"]\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1 if n & 1 == 0 else 0\n        n >>= 1\n    return count \n  \n# driver code \nn = 9\nprint(\"Unset bits in the number:\",count_unset_bits(n)) # Output: 2 ",
        "generated_testcode": "assert count_unset_bits(0b1111) == 0\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n\n# test the function\nstring = \"google.com\"\nprint(char_frequency(string)) ",
        "generated_testcode": "assert char_frequency(\"hello world\") == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sub_li.sort(key = lambda x:x[1]) \n    return sub_li\n\n# Sample list\nMarks = [['Geoffrey', 10], ['Helen', 50], ['Alex', 70], ['Oscar', 40], ['Peter', 80]] \n# Sorting the list by the second element\nresult = Sort(Marks) \n# printing the sorted list \nprint(result) ",
        "generated_testcode": "assert Sort([[1, 3], [2, 4], [3, 1], [4, 2]]) == [[3, 1], [4, 2], [1, 3], [2, 4]]\n\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a+b > c and b+c > a and c+a > b:\n        return True\n    else:\n        return False\n\na = int(input(\"Enter the length of first side of triangle: \"))\nb = int(input(\"Enter the length of second side of triangle: \"))\nc = int(input(\"Enter the length of third side of triangle: \"))\n\nif check_Validity(a,b,c):\n    print(\"The triangle is valid.\")\nelse:\n    print(\"The triangle is not valid.\")\n\n",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = (n/2)*(2*a + (n-1)*d)\n    return sum\n\n# a: First term of the arithmetic progression\n# n: Total number of terms in the progression\n# d: Common difference between consecutive terms\n\n#Test the function\nprint(ap_sum(1,5,3)) # Output: 20\nprint(ap_sum(5,5,2)) # Output: 30\nprint(ap_sum(1,10,2)) # Output: 60\nprint(ap_sum(0,100,1)) # Output: 4950 ",
        "generated_testcode": "assert ap_sum(1, 5, 2) == 15\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n\n#test the function with February and December\nprint(check_monthnum(\"February\"))\nprint(check_monthnum(\"December\")) ",
        "generated_testcode": "assert check_monthnum(\"February\") == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'\\b[a-zA-Z]+[.,;:?!]*$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    return None\n\n# Test the function with some examples\nprint(text_match_word(\"Hello, world!\"))  # Should print \"world!\"\nprint(text_match_word(\"Hi there!\"))  # Should print \"there!\"\nprint(text_match_word(\"A sentence.\"))  # Should print \"sentence.\"\nprint(text_match_word(\"A sentence without punctuation\"))  # Should print \"sentence\"\nprint(text_match_word(\"\"))  # Should print None\nprint(text_match_word(\"A sentence with multiple...\"))  # Should print \"multiple...\"\nprint(text_match_word(\"A sentence with multiple!\\n\"))  # Should print None ",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == \"world\"\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    n = len(s) \n    for i in range(n): \n        for j in range(i, n): \n            if s[i] == s[j] and (j-i+1)%2 == 0: \n                count += 1\n    return count \n\n#driver code\ns = \"ababa\"\nprint(\"The count of substrings with same first and last characters: \", check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(\"abcabc\") == 3\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in range(x, y+1):\n        for j in range(i, 0, -1):\n            if i % j == 0 and x <= j <= y:\n                result = j\n                break\n    return result\n\nx = int(input(\"Enter the value of x: \"))\ny = int(input(\"Enter the value of y: \"))\nprint(\"Maximum divisor in the given interval is: \", find_Divisor(x,y)) ",
        "generated_testcode": "assert find_Divisor(10, 20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(lst) < 3:\n        return None\n    lst.sort()\n    return lst[0] + lst[1] + lst[2]\n\n# Test cases\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9])) # Output: 6 (1 + 2 + 3)\nprint(sum_three_smallest_nums([4, 3, 2, 9, 8, 1, 5, 10, 6])) # Output: 7 (2 + 3 + 4)\nprint(sum_three_smallest_nums([1, 2, -3, 4, 5, 6, -7, 8])) # Output: 3 (-3 + 1 + 2)\nprint(sum_three_smallest_nums([2, 2, 2, 2, 2, 2, 2, 2])) # Output: 6 (2 + 2 + 2) ",
        "generated_testcode": "assert sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6 # should return 6\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Converts the given set into a tuple and returns it.\n    \"\"\"\n    return tuple(s)\n\n# Test the function with an example set\nset1 = {1, 2, 3, 4, 5}\nprint(set_to_tuple(set1))  # Output: (1, 2, 3, 4, 5)\n\n\n# Test the function with another example set\nset2 = {'apple', 'banana', 'cherry', 'orange'}\nprint(set_to_tuple(set2))  # Output: ('apple', 'banana', 'cherry', 'orange')\n\n\n# Test the function with an empty set\nset3 = set()\nprint(set_to_tuple(set3))  # Output: () ",
        "generated_testcode": "assert set_to_tuple({1, 2, 3, 4}) == ((1, 2, 3, 4)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\ndef smallest_range(arr):\n    min_range = float('inf')\n    max_range = float('-inf')\n    min_val = arr[0][0]\n    max_val = arr[0][0]\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i]):\n            if arr[i][j] < min_val:\n                min_val = arr[i][j]\n                start = j\n            if arr[i][j] > max_val:\n                max_val = arr[i][j]\n                end = j\n    if max_range - min_range < min_range:\n        min_range = max_range - min_val\n        max_range = max_val\n    heap = []\n    for i in range(len(arr):\n        heap.append(ValueIndex(arr[i][0], i, 0))\n    heapq.heapify(heap)\n    while heap:\n        smallest = heapq.heappop(heap)\n        if max_val - smallest.value < min_range:\n            min_range = max_val - smallest.value\n            start = smallest.index\n        if end < len(arr[smallest.list_num]):\n            max_val = max(max_val, arr[smallest.",
        "generated_testcode": "assert smallest_range([[4, 10, 5, 8], [7, 6, 2, 3], [1, 8, 5]]) == (2, 7)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = 0\n    letters = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return (digits, letters)\n\n# test the function\nprint(dig_let('hello world 123'))  # Output: (3, 10)\nprint(dig_let('12345abc'))      # Output: (4, 3)\nprint(dig_let('1a2b3c4d5e6f'))  # Output: (6, 6)\nprint(dig_let('!@#$%^&*()'))    # Output: (0, 6) ",
        "generated_testcode": "assert dig_let(\"hello world 123\") == (3, 10)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        if i%4==0:\n            count+=1\n    return count \nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\nprint(count_Odd_Squares(n,m)) ",
        "generated_testcode": "assert count_Odd_Squares(1,10) == 2 # Testing for range 1 to 10\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    diff_list = []\n    for i in range(len(nums)-1):\n        diff_list.append(nums[i+1]-nums[i])\n    return diff_list\n\n#Test the function\nprint(diff_consecutivenums([1,2,5,9,12,15,20,21])) #[3,4,3,3,7,5]\nprint(diff_consecutivenums([4,6,8,10,12,14])) #[2,2,2,2,2]\nprint(diff_consecutives([1,2,3,5,7,9,12])) #[1,2,2,4,4] ",
        "generated_testcode": "assert diff_consecutivenums([1, 2, 3, 5, 8, 9, 10]) == [1, 3, 3, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < k or k < 1:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == k:\n        return list(range(1, n+1))\n    else:\n        result = []\n        for i in range(1, k+1):\n            if i % 2 == 1:\n                result += list(range(i, n+1, k))\n            else:\n                result += list(range(n, 0, -k, -1))\n        return result",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            count+=i*j\n    return count\n\nprint(count_Squares(3,3))  #output: 36\nprint(count_Squares(5,5))  #output: 55\nprint(count_Squares(7,7))  #output: 136\n\n\n# Test.assert_equals(count_Squares(3,3), 36)\n# Test.assert_equals(count_Squares(5,5), 55)\n# Test.assert_equals(count_Squares(7,7), 136)\n# Test.assert_equals(count_Squares(10,10), 880)\n# Test.assert_equals(count_Squares(12,12), 2080) ",
        "generated_testcode": "assert count_Squares(5,5) == 25\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return int(math.factorial(n) / (math.factorial(n - r) * math.factorial(r)) )\ndef count_sequences(values, length): \n    dp = [[0] * (length + 1) for _ in range(len(values) + 1)] \n    dp[0][0] = 1 \n    for i in range(1, len(values) + 1): \n        for j in range(length + 1): \n            for k in range(i): \n                if values[i - 1] <= j: \n                    dp[i][j] += dp[k][j - values[i - 1]] \n            dp[i][j] += dp[i - 1][j] \n    return dp[-1][-1] - 1 ",
        "generated_testcode": "assert bin_coff(5, 2) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for char in string:\n        if char != '0' and char != '1':\n            return False\n    return True\n\n#Test function with some examples\nprint(check('10101010')) # True\nprint(check('10121010')) # False\nprint(check('00101011')) # True\nprint(check('0')) # True\nprint(check('1010101a10')) # False\nprint(check('')) # True ",
        "generated_testcode": "assert (check(\"10101010101010101010\")) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(s)\n    if n == 0 or n == 1: \n        return n \n    # Initialize variables to store the count of each character and the count of unique characters \n    count = [0] * 256\n    unique_chars = 0\n    # Count each character's frequency \n    for i in range(n): \n        count[ord(s[i])] += 1\n    # Count the number of unique characters \n    for i in range(256): \n        if count[i] != 0: \n            unique_chars += 1\n    # If all characters have frequency 1, return the length of the string \n    if unique_chars == n: \n        return n \n    # Initialize variables to store the left and right pointers and the minimum length \n    left, right = 0, 0\n    min_len = float('inf') \n    # Initialize a queue to store the unique characters and their counts \n    q = [] \n    # Initialize variables to store the current count of characters and the number of unique characters \n    current_count = [0] * 256\n    current_unique = 0\n    # Loop through the string \n    while right < n: \n        # Add the character at the right pointer to the queue and increment its count \n        current_count[ord(s[right])] += 1\n        # If the character is not already in the queue, increment the number of unique characters \n       ",
        "generated_testcode": "assert (minimum_Length(\"aaabbbccddeeff\") == 4)\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {} \n    for i in arr: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    for i in arr: \n        if freq[i] == k: \n            return i \n    return -1\n\n#Example:\narr = [1,2,3,4,5,6,7,2,2,2,2,2,2,2,3,4,5,6,7]\nn = len(arr)\nk = 4\nprint(first_Element(arr,n,k)) # Output: 2\n\n#Explanation: \n# The number 2 occurs 4 times in the given array. ",
        "generated_testcode": "",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(str) > 128:\n        return False\n    char_set = [False for _ in range(128)]\n    for char in str:\n        if char_set[ord(char)]:\n            return False\n        char_set[ord(char)] = True\n    return True\n\n# Testing the function\nprint(unique_Characters(\"Hello\"))\nprint(unique_Characters(\"World\"))\nprint(unique_Characters(\"Unique\"))\nprint(unique_Characters(\"Python\"))\nprint(unique_Characters(\"Python!\")) ",
        "generated_testcode": "assert unique_Characters(\"abcde\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if isinstance(list1, list):\n        return [remove_column(sublist, n) for sublist in list1]\n    else:\n        return [elem for i, elem in enumerate(list1) if i != n]\n\n# Example usage:\nnested_list = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\nprint(remove_column(nested_list, 2))  # Output: [[1, 2], [5, 6], [8, 9]]\n\n\n# ----------------------------------------------------\n# Write a function to sort a given nested list according to the first element of each sublist.\ndef sort_nested_list(list1):\n    return sorted(list1, key=lambda x: x[0])\n\n# Example usage:\nnested_list = [[4, 3, 2], [2, 5, 1], [1, 7, 3]]\nprint(sort_nested_list(nested_list))  # Output: [[1, 7, 3], [2, 5, 1], [4, 3, 2]] ",
        "generated_testcode": "assert remove_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [[1, 2], [4, 5], [7, 8]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    t = a + (n-1)*d\n    return t\n\na = int(input(\"Enter first term: \"))\nn = int(input(\"Enter nth term: \"))\nd = int(input(\"Enter common difference: \"))\nprint(\"The t-nth term of arithmetic progression is\", tn_ap(a,n,d))\n\n\n# Example:\n# Enter first term: 5\n# Enter nth term: 7\n# Enter common difference: 3\n# The t-nth term of arithmetic progression is 23 ",
        "generated_testcode": "assert tn_ap(1, 5, 2) == 7\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    #Initialize variables to count the number of rectangles  \n    count = 0  \n      \n    #Iterate through all possible values of x and y in the circle  \n    for x in range(radius + 1):  \n        for y in range(radius + 1):  \n            #Calculate the length and breadth of the rectangle  \n            len_rect = 2 * (radius - x)  \n            bre_rect = 2 * (radius - y)  \n            #Check if the rectangle is inside the circle  \n            if (len_rect * len_rect + bre_rect * bre_rect <= radius * radius):  \n                count += 1  \n    #Return the count of rectangles  \n    return count ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"Returns the value of the third angle in a triangle given the values of two angles.\"\"\"\n    c=180-(a+b)\n    return c\n\n#Test the function\nprint(find_angle(45,30)) #105.0\nprint(find_angle(70,50)) #40.0\nprint(find_angle(20,60)) #90.0 ",
        "generated_testcode": "assert find_angle(30, 45) == 105\n\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_element = test_list[0]\n    for i in test_list:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\n# test the function with a sample data\nrecords = [(2, 4, 5, 9, 7, 6), (1, 3, 8, 5, 2), (3, 6, 2, 1, 9)]\nfor i in records:\n    print(find_max(i)) ",
        "generated_testcode": "assert find_max([(('Alice', 25), ('Bob', 30), ('Charlie', 220), ('David', 22)]) == 'Bob'\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    mod_list=list(map(lambda x,y:x%y,nums1,nums2))\n    return mod_list\n\n#Example\nnums1 = [10, 15, 20, 25, 30, 35, 40]\nnums2 = [3, 5, 7, 10, 12, 15]\nprint(moddiv_list(nums1,nums2)) # Output: [1, 0, 5, 5, 5, 0] ",
        "generated_testcode": "assert moddiv_list([10, 20, 30], [3, 4, 5]) == [1, 2, 0]\n\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a==0:\n        return \"Invalid equation\"\n    else:\n        d = b**2 - 4*a*c\n        if d > 0:\n            root1 = (-b + d**0.5)/(2*a)\n            root2 = (-b - d**0.5)/(2*a)\n            if root1 == 2*root2:\n                return \"One root is twice of another\"\n            else:\n                return \"Both roots are different\" ",
        "generated_testcode": "assert Check_Solution(1, -6, 9) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num = 1\n    result = []\n    for i in range(1, n+1):\n        result.append(num)\n        num = num*2\n        if num > n:\n            break\n    return sum(result) ",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sublist for sublist in list1 if sublist]\n\n# Test the function with an example:\nlist1 = [[], [1, 2, 3], [], [4, 5, 6], [7], [], [8, 9, 10], []]\nprint(remove_empty(list1))  # Output: [[1, 2, 3], [4, 5, 6], [7], [8, 9, 10]]\n\n\n# The function uses a list comprehension to iterate over each sublist in `list1`, and includes only those that are not empty (`if sublist`) in the new list. ",
        "generated_testcode": "",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    :param nums: list of integers\n    :return: integer\n    \"\"\"\n    # create a dictionary to store the count of each number\n    count_dict = {}\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # find the number with maximum occurrences\n    max_num = None\n    max_count = 0\n    for num, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    return max_num\n\n# test the function with an example\nprint(max_occurrences([1, 2, 3, 2, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6]))  # output: 6 ",
        "generated_testcode": "assert max_occurrences([1, 2, 3, 2, 3, 4, 3, 4, 4, 4]) == 4\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for num in test_list:\n        result.append(num + K)\n    return tuple(result)\n\n\n# Test the function with an example\nmy_list = (1, 2, 3, 4, 5)\nk = 3\nprint(add_K_element(my_list, k))  # Output: (4, 5, 6, 7) ",
        "generated_testcode": "assert add_K_element((1, 2, 3, 4, 5), 2) == (3, 4, 5, 6)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    flips = 0\n    for i in range(len(ch)-1):\n        if ch[i] == ch[i+1]:\n            flips += 1\n    return flips\n\n# Testing the function with sample input\nch = \"010\"\nprint(make_flip(ch)) ",
        "generated_testcode": "assert make_flip(\"01010101010101\") == 0\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    while n!=0:\n        count += 1\n        n //= 10\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"Number of digits: \", count_Digit(n))\n\n\n#Test case \n#Test Input: 12345\n#Test Output: Number of digits: 4 ",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    for i in range(len(list_nums)-1):\n        product = list_nums[i] * list_nums[i+1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Example usage:\nlist_nums = [1, 4, -3, 2, -6, 1, 7, 0, -2, 6]\nprint(adjacent_num_product(list_nums)) # Output: 24 ",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\t\tself.height = 1\n\n\ndef get_height(root):\n\tif not root: \n\t\treturn 0\n\telse: \n\t\treturn root.height \n\ndef update_height(root):\n\troot.height = 1 + max(get_height(root.left), get_height(root.right))\n\n\ndef is_balanced_tree(root):\n\tif not root: \n\t\treturn True\n\n\tif abs(get_height(root.left) - get_height(root.right)) <= 1:\n\t\treturn is_balanced_tree(root.left) and is_balanced_tree(root.right)\n\telse: \n\t\treturn False \n\ndef is_balanced_tree_util():\n\tif is_balanced_tree(root): \n\t\treturn True\n\telse: \n\t\treturn False \n\n# Example usage:\n# Constructing the tree\n# root = Node(1)\n# root.left = Node(2)\n# root.right = Node(3)\n# root.left.left = Node(4)\n# root.left.right = Node(5)\n# root.right.left = Node(6)\n# root.right.right = Node(7)\n# root.right.left.left = Node(8)\n# root.right.right.right = Node",
        "generated_testcode": "assert is_balanced(Node(4, Node(2, Node(1), Node(6))), True)\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return test_tup * N\n\n# Test the function\ntest_tup = (1, 2, 3)\nN = 3\nprint(repeat_tuples(test_tup, N)) # Expected output: (1, 2, 3, 1, 2, 3, 1, 2, 3) ",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == ((1, 2, 3), (1, 2, 3), (1, 2, 3))\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    return 2*(l*w + w*h + h*l)\n\n# Test the function\nprint(lateralsurface_cuboid(2,3,4)) # Output: 52\n\n\n# Write a function to find the volume of cuboid\ndef volume_cuboid(l, w, h):\n    return l * w * h\n\n# Test the function\nprint(volume_cuboid(2,3,4)) # Output: 24\n\n# Write a function to find the total surface area of cuboid\ndef surface_area_cuboid(l, w, h):\n    return 2*l*w + 2*w*h + 2*h*l\n# Test the function\nprint(surface_area_cuboid(2,3,4)) # Output: 32\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r, h):\n    return 3.14 * r * r * h\n# Test the function\nprint(volume_cylinder(2,4)) # Output: 50.265483534287642188\n# Write a function to find the surface area of a cylinder\ndef surface_area_cylinder(r, h):\n    return 2 * 3.14 * r * (r + h)\n# Test the function\nprint(surface_area_cylinder(2,4)) # Output: 5",
        "generated_testcode": "assert lateralsurface_cuboid(2,3,4) == 52\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return float(price[1])\n\n# Define the tuple\nproducts = ((\"Product1\", \"10.5\"), (\"Product2\", \"12.1\"), (\"Product3\", \"5.6\"), (\"Product4\", \"2.3\"), (\"Product5\", \"11.6\"))\n\n# Sort the tuple using the float_sort function and store the result in sorted_products\nsorted_products = sorted(products, key=float_sort)\n# Print the sorted_products tuple\nprint(sorted_products) ",
        "generated_testcode": "",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize the smallest_missing_element with the leftmost element of the array\n    smallest_missing_element = left_element\n    for i in range(left_element, right_element):\n        # if the current element is greater than the expected value, update the smallest_missing_element\n        if A[i] != A[i - left_element] + left_element:\n            smallest_missing_element = A[i] - i\n            break\n    return smallest_missing_element\n\n\n# Example usage:\nA = [0, 1, 2, 3, 4, 6, 9, 11, 12]\nleft_element = 0\nright_element = len(A) - 1\nprint(smallest_missing_element(A, left_element, right_element)) # Output: 5 ",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 8) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    heapify(nums)\n    end = len(nums) - 1\n    while end > 0:\n        nums[end], nums[0] = nums[0], nums[end]\n        end -= 1\n        sift_down(nums, 0, end)\n    return nums\n\ndef heapify(nums):\n    start = len(nums) // 2 - 1\n    while start >= 0:\n        sift_down(nums, start, len(nums) - 1)\n        start -= 1\n\ndef sift_down(nums, start, end):\n    root = start\n    while root * 2 + 1 <= end:\n        child = root * 2 + 1\n        swap = root\n        if nums[swap] < nums[child]:\n            swap = child\n        if child + 1 <= end and nums[swap] < nums[child + 1]:\n            swap = child + 1\n        if swap != root:\n            nums[root], nums[swap] = nums[swap], nums[root]\n            root = swap\n        else:\n            return\n\ndef heap_descending(nums):\n    heapify_descending(nums)\n    end = len(nums) - 1\n    while end > 0:\n        nums[end], nums[0] = nums[0], nums[end]\n        sift_down_desc",
        "generated_testcode": "assert heap_assending([4, 2, 5, 1, 3, 0, 9, 7]) == [0, 1, 2, 3, 4, 5, 7, 9]\n\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return l * w * h\n\n#Test the function with examples\nprint(volume_cuboid(5,4,3) == 60) #True\nprint(volume_cuboid(10,2,10) == 200) #True\nprint(volume_cuboid(2.5, 2, 2) == 10) #True\n\n\n# The function takes in three parameters: length, width and height of the cuboid and returns the volume as the product of these three values. ",
        "generated_testcode": "assert volume_cuboid(2, 3, 4) == 24\n\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    # convert string to list to modify it\n    str = list(str)\n    # sort the list to get the duplicates together\n    str.sort()\n    # generate permutations\n    helper_function(str, 0, len(str), result)\n    # sort the result to remove duplicates and return the sorted list\n    return sorted(result)\n\n\ndef helper_function(str, index, length, result):\n    if index == length - 1:\n        # convert list to string and add it to result\n        result.append(''.join(str))\n    else:\n        for i in range(index, length):\n            # check if there is duplicates to avoid duplicates in the result\n            if i > index and str[i] == str[index]:\n                continue\n            # swap the characters\n            str[index], str[i] = str[i], str[index]\n            # recursively call the function\n            helper_function(str, index + 1, length, result)\n            # swap back the characters to restore the original order\n            str[index], str[i] = str[i], str[index]\n\n# test the function\nprint(permute_string('aabc')) # ['aabc', 'aacb', 'abac', 'abca', 'baac', 'baca', 'bcaa', 'caab', 'caba', 'cbaa']\nprint(permute_string('abb')) # ['abb', 'bab', 'bba'] ",
        "generated_testcode": "assert permute_string(\"abc\") == [\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"]\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n % m == 0:\n        return n\n    elif n % m > m/2:\n        return n + (m - n % m)\n    else:\n        return n - n % m\n\n# Example usage:\n# round_num(17, 5) will return 20\n# round_num(14, 7) will return 14\n# round_num(23, 7) will return 21\n# round_num(29, 7) will return 28 ",
        "generated_testcode": "assert round_num(15, 10) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_tup = ()\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup = new_tup + (i,)\n        else:\n            new_tup = new_tup + ('duplicate',)\n    return new_tup\n\n#testing the function\ntest_tup = (1,2,3,4,5,6,2,3,7,8,9,1,10,11,12,2,5,13,4,14)\nprint(remove_replica(test_tup)) ",
        "generated_testcode": "",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"  \n    for i in s : \n        if i != c : \n            result += i;  \n    return result \n\ns = \"hello world\"\nc = \"l\"\nprint(remove_Char(s,c))\n\n#Output: \"heo word\" ",
        "generated_testcode": "assert (remove_Char(\"hello world\", \"l\") == \"heo word\")\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list)>0:\n        last_element = test_list.pop()\n        test_list.insert(0,last_element)\n        return test_list\n    else:\n        return []\n\n#test the function\ntest_list = [1,2,3,4,5,6,7,8]\nprint(\"Original list:\",test_list)\nprint(\"Moved list:\",move_first(test_list)) ",
        "generated_testcode": "assert move_first([1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    return 2*((l*w)+(w*h)+(l*h))\n\n#testing the function\nprint(surfacearea_cuboid(10,20,3)) # output should be 2200\nprint(surfacearea_cuboid(5,10,2)) # output should be 100\n\n\n#or\n\n#using lambda function\nsurfacearea_cuboid = lambda l,w,h: 2*((l*w)+(w*h)+(l*h))\nprint(surfacearea_cuboid(10,20,3)) # output should be 200\nprint(surfacearea_cuboid(5,10,2)) # output should be 100 ",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 52\n\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    multi_list = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(i*j)\n        multi_list.append(row)\n    return multi_list\n\n#example: multi_list(3,4) will generate a 3x4 2-d list: [[0,0,0,0,0],[0,1,2,3],[0,2,4,6]]\n\n#example: multi_list(4,2) will generate a 4x2 2-d list: [[0,0],[0,1],[0,2],[0,3]]\n\n# Test your function with multi_list(3,4) and multi_list(4,2) ",
        "generated_testcode": "assert multi_list(3,4) == [[None, None, None, None], [None, None, None], [None, None, None]]\n\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list_data, key=lambda inner_list: inner_list[index_no])\n\n\n# Test the function\ndata = [[3, 'apple', 1], [5, 'banana', 2], [2, 'orange', 3], [1, 'pear', 4]]\nsorted_data = index_on_inner_list(data, 2)\nprint(sorted_data) # Output: [[3, 'apple', 1], [2, 'orange', 3], [5, 'banana', 2], [1, 'pear', 4]]\n\n\n# The function sorts the given list of lists based on the values at the given index and returns the sorted list. \n# We can use the built-in `sorted()` function along with the `key` parameter to sort the list of lists based on the inner list's values at a particular index. \n# We pass a lambda function as the key which returns the value at the given index for each inner list. ",
        "generated_testcode": "",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(A) == 0:\n        return 0\n    low, high = 0, len(A) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if A[mid] > A[high]:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n\n# Test the function with an example\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A))  # Output: 4 ",
        "generated_testcode": "assert find_rotation_count([1, 2, 3, 4, 5, 6, 7]) == 0\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # First right shift the number by 1 \n    n = n >> 1 \n    # Then toggle the rightmost bit \n    n = n ^ 1 \n    # Loop until there is only one bit set in the number \n    while (n & (n-1)) : \n        # Right shift the number and toggle the rightmost bit \n        n = n >> 1 \n        n = n ^ 1 \n    # Multiply the number with original number \n    return n * n ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 11 # 1010 -> 1001\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # sort the array in ascending order \n    arr.sort() \n  \n    # initialize count variable with 1 \n    count = 1\n  \n    # traverse the array from second element \n    for i in range(1, n): \n        if arr[i] == arr[0]: \n            count += 1\n        else: \n            break\n  \n    return count \n  \n# test the function with an example \narr = [1, 2, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 7, 7] \nn = len(arr) \nprint(\"The frequency of smallest element in the array is: \", frequency_Of_Smallest(n, arr)) ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,2,1]) == 2\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return get_perrin(n - 1) + get_perrin(n - 2) + get_perrin(n - 3)\n\n\ndef print_perrin_sequence(n):\n    for i in range(n):\n        print(get_perrin(i), end=\" \")\n\nprint_perrin_sequence(10) # prints the first 10 numbers in the perrin sequence\n# Output: 3 2 0 3 2 3 2 5 5 7 10 12 16 21 27\n\n",
        "generated_testcode": "assert get_perrin(0) == 3\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(s)\n    count = 0\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                count += 1\n    count += len(stack)\n    return count\n\n# Test the function\ns = \"()))(((\"\nprint(swap_count(s)) ",
        "generated_testcode": "assert swap_count('([])') == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if int(N, 16) % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n\n#Example:\n#For N = '0xA11B', the output should be 'Odd'\n#For N = '0x1230', the output should be 'Even'\n#For N = '0x5F9', the output should be 'Odd'\n#For N = '0x5F7', the output should be 'Even' ",
        "generated_testcode": "assert even_or_odd(\"123\") == \"odd\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    # Initialize power variable to 0\n    power = 0\n    # Loop through all numbers from 1 to n\n    for i in range(1,n+1):\n        # Calculate the power by multiplying 2 by itself\n        power_value = 2 ** i\n        # If power is less than or equal to n, update the power variable\n        if power_value <= n:\n            power = i\n        else:\n            break\n    # Return the highest power of 2 that is less than or equal to n\n    return 2 ** (power-1) ",
        "generated_testcode": "assert highest_Power_of_2(16) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test the function\nprint(find_lucas(0)) # should return 2\nprint(find_lucas(1)) # should return 1\nprint(find_lucas(2)) # should return 3\nprint(find_lucas(3)) # should return 3\nprint(find_lucas(4)) # should return 4\nprint(find_lucas(5)) # should return 7\nprint(find_lucas(6)) # should return 11\nprint(find_lucas(7)) # should return 18\nprint(find_lucas(8)) # should return 29\nprint(find_lucas(9)) # should return 47\nprint(find_lucas(10)) # should return 76\nprint(find_lucas(11)) # should return 123\nprint(find_lucas(12)) # should return 203\nprint(find_lucas(13)) # should return 329\nprint(find_lucas(14)) # should return 5220\nprint(find_lucas(15)) # should return 847\nprint(find_lucas(16)) #",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list:\n        result.append(string + i)\n    return result\n\n#Example usage:\nnames = [\"John\", \"Bob\", \"Sara\", \"Mark\"]\nnew_names = add_string(names, \"Mr. \")\nprint(new_names) # Output: [\"Mr. John\", \"Mr. Bob\", \"Mr. Sara\", \"Mr. Mark\"] ",
        "generated_testcode": "assert add_string(['apple', 'banana', 'cherry'], 'fruit: ') == ['fruit: apple', 'fruit: banana', 'fruit: cherry']\n\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create an empty dictionary\n    dictionary = {}\n    \n    # iterate through each element of the list\n    for i in range(len(l1)):\n        # set the value of each element of l1 as key and the value of l2 as the key's value\n        dictionary[l1[i]] = l2[i]\n        # set the value of l3[i] as the value of the key's nested dictionary\n        dictionary[l1[i]] = {l3[i]: l2[i]}\n\n    return dictionary\n\n# Test the function\nl1 = [\"John\", \"Jane\", \"Alex\", \"Brian\"]\nl2 = [23, 34, 45, 12]\nl3 = [\"age\", \"age\", \"age\", \"age\"]\nprint(convert_list_dictionary(l1, l2, l3)) ",
        "generated_testcode": "",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    memo = {}\n    def helper(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n in memo:\n            return memo[n]\n        memo[n] = max(n, helper(n/2) + helper(n/3) + helper(n/4) + helper(n/5))\n        return memo[n]\n    return helper(n)\n\n#test\nprint(get_max_sum(10)) # should be 23\nprint(get_max_sum(100)) # should be 231\nprint(get_max_sum(50)) # should be 232\nprint(get_max_sum(30)) # should be 39\n\n\n# test case 1: n=10, helper(10) = max(10, helper(5)+helper(3)+helper(4)+helper(2)) = 10\n# test case 2: n=100, helper(100) = max(100, helper(50)+helper(33)+helper(25)+helper(20)) = 231\n# test case 3: n=50, helper(50) = max(50, helper(16)+helper(17)+helper(13)+helper(12)) = 39 ",
        "generated_testcode": "assert get_max_sum(10) == 27\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(input_list, key=lambda lst: len(lst))\n\n# Test the function with sample data\nsample_list = [[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7], [1, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9]]\nprint(max_length_list(sample_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n# Write a lambda function to check if a given string contains a substring\ncheck_substring = lambda string, sub_string: sub_string in string\n\n# Test the function with sample data\nstring = \"Hello World\"\nsubstring = \"World\"\nprint(check_substring(string, substring)) # Output: True\n\n# Test the function with sample data\nstring = \"Hello World\"\nsubstring = \"world\"\nprint(check_substring(string, substring)) # Output: False\n\n\n# Write a lambda function to remove spaces from a string\nremove_spaces = lambda string: string.replace(\" \", \"\")\n\n# Test the function with sample data\nstring = \"Hello World\"\nprint(remove_spaces(string)) # Output: \"HelloWorld\"\n\n\n# Write a lambda function to calculate the product of two numbers\ncalculate_product = lambda x, y: x * y\n",
        "generated_testcode": "",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Converting tuple into set and comparing their lengths to check if it is distinct or not\n    return len(set(test_tup) == len(test_tup)) \n\n# Testing the function with example\ntup = (1, 2, 3, 4, 5, 1, 6, 7)\nif check_distinct(tup):\n    print(\"Distinct\")\nelse:\n    print(\"Not Distinct\") ",
        "generated_testcode": "assert check_distinct((1, 2, 3, 4, 5, 6, 7) == True)\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_frequency = {}\n    for char in str1:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n\n    for char in str1:\n        if char_frequency[char] == 1:\n            return char\n    return None ",
        "generated_testcode": "assert first_non_repeating_character(\"abcdcaf\") == \"b\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^(.)(.*)\\1$')\n    match = pattern.search(string)\n    if match:\n        return True\n    else:\n        return False\n    \n# Testing the function with examples\nprint(check_char(\"abba\")) # True\nprint(check_char(\"abcd\")) # False\nprint(check_char(\"racecar\")) # True\nprint(check_char(\"python\")) # False\nprint(check_char(\"apple\")) # False ",
        "generated_testcode": "assert check_char(\"abcba\") == True\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[1]\n\nprint(median_numbers(1,2,3)) # Output: 2\nprint(median_numbers(9, 7, 1)) # Output: 7\nprint(median_numbers(4, 5, 6)) # Output: 5\n\n\n#Another way to find the median of three numbers is to use if-else statements:\n\ndef median_numbers(a,b,c):\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b \n\nprint(median_numbers(1,2,3)) # Output: 2\nprint(median_numbers(9, 7, 1)) # Output: 7\nprint(median_numbers(4, 5, 6)) # Output: 5 ",
        "generated_testcode": "assert median_numbers(2, 4, 3) == 3\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [sum(int(digit) for digit in str(num)) for num in nums]\n\n# Example usage:\n# print(sum_of_digits([123, 456, 789, 1000000, 123456789])) # Output: [6, 15, 27, 1]\n\n\ndef sum_of_digits(nums):\n    def helper(num):\n        if num == 0:\n            return 0\n        else:\n            return num % 10 + helper(num // 10)\n    return [helper(num) for num in nums]\n# Example usage:\n# print(sum_of_digits([123, 456, 789, 100000, 123456789])) # Output: [6, 15, 1, 8] ",
        "generated_testcode": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup1)):\n        res += (test_tup1[i] ^ test_tup2[i],)\n    return res\n\n# testing\nprint(bitwise_xor((1, 2, 3, 4, 5), (5, 6, 7, 8)) # (4, 4, 3, 3)\nprint(bitwise_xor((10, 11, 12), (3, 5, 7)) # (11, 6, 5)\nprint(bitwise_xor((0, 1, 1), (1, 0, 1)) # (1, 1, 0) ",
        "generated_testcode": "assert bitwise_xor((1, 2, 3, 4, 5), (6, 7, 8, 9)) == (5, 5, 1, 5)\n\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return freq_dict\n\n\n\n#test\ntest_list = [(1, 2), (3, 4), (5, 6), (1, 2), (7, 8), (3, 4), (9, 10), (1, 2), (7, 8), (3, 4)]\nprint(extract_freq(test_list))\n\n\n#output: {(1, 2): 2, (3, 4): 2, (5, 6): 1, (7, 8): 2, (9, 10): 1} ",
        "generated_testcode": "",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = ()\n    for i in range(len(test_tup1)):\n        tup_sum = ()\n        for j in range(len(test_tup1[i])):\n            tup_sum += (test_tup1[i][j] + test_tup2[i][j],)\n        res += (tup_sum,)\n    return res\n\n#Test the function with sample inputs:\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nprint(add_nested_tuples(test_tup1, test_tup2))  # Output: ((11, 22, 33), (44, 55, 66), (77, 88, 99)) ",
        "generated_testcode": "",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if r > n: \n        return 0\n    ni = 1\n    for i in range(r): \n        ni = (ni*(n-i)%p)%p \n    ri = 1 \n    for i in range(r): \n        ri = (ri*(i+1)%p)%p \n    nik = 1 \n    for i in range(n-r): \n        ni = (ni*(n-i)%p)%p \n        ri = (ri*(i+1)%p)%p \n    return (ni*pow(ri, p-2, p))%p ",
        "generated_testcode": "assert ncr_modp(10, 2, 13) == 45\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n\nprint(is_valid_URL('https://www.google.com'))  # True\nprint(is_valid_URL('http://www.google.com'))  # True\nprint(is_valid_URL('www.google.com'))  # False\nprint(is_valid_URL('https://google.com'))  # True\nprint(is_valid_URL('https://google.com:8080'))  # True\nprint(is_valid_URL('http://localhost'))  # True\nprint(is_valid_URL('http://192.168.0.1.1'))  #",
        "generated_testcode": "assert is_valid_URL(\"https://www.google.com\") == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a < b:\n        return a\n    elif b < a:\n        return b\n    else:\n        return \"The numbers are equal\"\n    \n#Test the function with example values\nprint(minimum(2,3))   # Output: 2\nprint(minimum(5,4))   # Output: 4\nprint(minimum(8,8))   # Output: The numbers are equal ",
        "generated_testcode": "assert minimum(5,6) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in tuple1: \n        if i == tuplex: \n            return True \n    return False\n\n# Example usage: \ntuple1 = (1,2,3,4,5,6,7,8,9)\nprint(check_tuplex(7,tuple1)) # True \nprint(check_tuplex(10,tuple1)) # False ",
        "generated_testcode": "assert check_tuplex(\"apple\", (\"apple\", \"banana\", \"cherry\")) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x&1: \n        return \"Odd\" \n    else: \n        return \"Even\" \n  \n# Driver code \nx = int(input(\"Enter a number: \")) \nprint(find_Parity(x)) ",
        "generated_testcode": "assert find_Parity(10) == 0 # even\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    digits = sorted(str(n), reverse=True)\n    result = int(''.join(digits))\n    return result\n\ndef next_bigger(n):\n    for i in range(1, len(str(n)):\n        if digits[i] > digits[i-1]:\n            j = i\n            while j < len(digits) and digits[j] > digits[i-1]:\n                j += 1\n            digits[i-1], digits[j-1] = digits[j-1], digits[i-1]\n            digits[i:] = digits[i:][::-1]\n            return int(''.join(digits)\n    return None\n\n# Test the function with some examples\nprint(next_bigger(123456789))  # Output: 123546789\nprint(next_bigger(1235789))   # Output: 1237589\nprint(next_bigger(12))      # Output: 21\nprint(next_bigger(531))     # Output: 513\nprint(next_bigger(1234501))  # Output: 1235041\nprint(next_bigger(159875324236))  # Output: 159875342236\nprint(next_bigger(999))     # Output: None\n",
        "generated_testcode": "assert rearrange_bigger(12345) == 5342\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :type k: int\n    :rtype: List[List[int]\n    \"\"\"\n    pairs = []\n    nums1.sort()\n    nums2.sort()\n    \n    i = 0\n    j = 0\n    n1 = len(nums1)\n    n2 = len(nums2)\n    \n    while k > 0 and i < n1 and j < n2:\n        pairs.append([nums1[i], nums2[j])]\n        k -= 1\n        if i < n1 - 1 and j < n2 - 1:\n            if nums1[i+1] < nums2[j+1]:\n                i += 1\n            else:\n                j += 1\n    return pairs\n    \n# Time: O(nlogn) for sorting + O(k) to find k smallest pairs\n# Space: O(k) ",
        "generated_testcode": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of tuples as an input and returns the minimum product of any two tuples\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] + list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n\n\n# Test the function\nlist1 = [(2,3), (4,5), (6,7), (8,9)]\nprint(min_product_tuple(list1)) # Output: 16 ",
        "generated_testcode": "assert min_product_tuple([(2, 3), (4, 5), (6, 7), (8, 9)]) == 12\n\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    min_val = listval[0]\n    for i in listval:\n        if type(i) == int:\n            if i < min_val:\n                min_val = i\n    return min_val\n\n# test the function\nlist_val = [2, \"hello\", 5, \"world\", 3, \"python\", 1, \"programming\", 4.5]\nprint(min_val(list_val)) # Output: 1 ",
        "generated_testcode": "assert min_val([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    words = word.split('_')\n    return words[0] + ''.join(w.title() for w in words[1:])\n\n# Example:\n# Input: 'snake_case_string'\n# Output: 'snakeCaseString'\n# Example:\n# Input: 'another_test_case'\n# Output: 'anotherTestCase' ",
        "generated_testcode": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return [i for i in l if i%2==0]\n\n#Test the function with an example list.\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_odd(l))  # Output: [2, 4, 6, 8, 10] ",
        "generated_testcode": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two arguments:\n    1. list1: A list of tuples\n    2. n: An integer representing the position of the element to extract from the tuple\n    The function returns a list of nth elements from each tuple in the list\n    \"\"\"\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result\n\n# Test the function with an example\nlist1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nn = 2\nprint(extract_nth_element(list1, n)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_nth_element([(1,2,3,4,5,6,7,8,9], 3) == 3\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            return True\n    return False\nlist1 = [1,2,3,4,5,6]\nlist2 = [3,4,5]\nlist3 = [7,8,9,10]\nprint(overlapping(list1,list2))  #True\nprint(overlapping(list1,list3))  #False ",
        "generated_testcode": "assert overlapping([1,2,3,4,5],[4,5,6,7]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        arr.sort()\n        return arr[-1] * arr[-2]\n\n# Test the function with an example\narr = [1, 10, -5, 3, -6, 7]\nprint(max_Product(arr)) # Output: 35 ",
        "generated_testcode": "assert max_Product([1, 10, -5, 3, -7, 6]) == 35\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 3: \n        return 0\n    if n == 3: \n        return 3\n    # Checking if n can be divided into 3 equal parts\n    if n % 3 == 0: \n        return int(n/3)**2\n    # If n cannot be divided in 3 equal parts then checking for 2 parts and adding the remaining part\n    if n % 3 == 1: \n        return int(n/3)*int(n/3+1) + int(n/3+1)\n    # If n cannot be divided in 3 equal parts and 2 equal parts\n    return int(n/3)*int(n/3) + n - int(n/3)*int(n/3) ",
        "generated_testcode": "assert breakSum(10) == 18\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    output = []\n    for i in Input:\n        for j in i:\n            if j not in output:\n                output.append(j)\n    return output\n\n# Test the function with an example\nInput = [(1,2,3),(2,3,4),(3,4,5),(4,5,6)]\nprint(group_tuples(Input)) ",
        "generated_testcode": "assert group_tuples([(1,2,3),(2,3,4),(3,4,5)]) == 3\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    max_len = 0\n    max_list = []\n    for i in range(len(lst)): \n        j = i \n        while j < len(lst): \n            sub_list = lst[i:j+1]\n            if len(sub_list) == len(set(sub_list)): \n                if len(sub_list) > max_len: \n                    max_len = len(sub_list) \n                    max_list = sub_list \n                j += 1 \n            else: \n                break \n    return max_list \n\n# test the function \nlst = [10, 20, 30, 40, 50, 20, 30, 40, 50, 60, 70, 80, 90, 60, 70] \nprint(Find_Max(lst)) # [10, 20, 30, 40, 50, 60, 70, 80, 90] \nlst = [10, 20, 30, 40, 20, 30, 40, 50, 60, 70, 80, 90, 60, 70] \nprint(Find_Max(lst)) # [10, 20, 30, 40, 50, 60,",
        "generated_testcode": "assert Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(len(list1):\n        sum += round(list1[i])\n    return sum * len(list1)\n\n# Example usage:\nlist1 = [1.5, 2.6, 3.7, 4.3, 5.1, 5.9]\nresult = round_and_sum(list1)\nprint(result) # Output: 25\n\n# Note: The round() function rounds a number to the nearest integer. ",
        "generated_testcode": "assert round_and_sum([1.5, 2.3, 3.7, 4.2, 5.8, 6.1]) == 25\n\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The cube sum of first\", n, \"even natural numbers is:\", cube_Sum(n)) ",
        "generated_testcode": "assert cube_Sum(3) == 216\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    delimiter = input(\"Enter the delimiter: \")\n    return delimiter.join(map(str, test_tup))\n\n# Test the function with sample input\ntest_tup = (1, \"John\", 3.3, \"Doe\", \"1234 Main St\")\nprint(concatenate_tuple(test_tup)) # Output: 1 John 3.3 Doe 1234 Main St ",
        "generated_testcode": "assert concatenate_tuple((\"Hello\", \"World\", \"!\") == \"HelloWorld!\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n    return sum_of_cubes/n  \nn = int(input(\"Enter the value of n: \"))  \naverage = find_Average_Of_Cube(n)  \nprint(\"The average of cubes of first\", n, \"natural numbers is:\", average) ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 14.16666666666666666667\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for j in range(n)] for i in range(m)] \n    for i in range(m): \n        for j in range(n): \n            if i == 0: \n                dp[i][j] = gold[i][j] \n            elif i == 1: \n                dp[i][j] = gold[i][j] + dp[i-1][j] \n            else: \n                dp[i][j] = gold[i][j] + max(dp[i-1][j], dp[i-2][j]) \n            if j > 0: \n                dp[i][j] = max(dp[i][j], dp[i][j-1]) \n            if i > 0 and j > 0: \n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + gold[i][j]) \n            if i == m-1: \n                dp[i][j] = max(dp[i][j], dp[i-1][j]) \n            if j == n-1: \n                dp[i][j] = max(dp[i][j], dp[i][j-1]) \n    return dp[m-1][n-1] ",
        "generated_testcode": "assert get_maxgold([[1, 3, 3, 3, 1], [2, 1, 4, 0], [0, 6, 4, 5]] == 12)\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_tuple:\n        result.append(i[-1])\n    return result\n\n\n# Test the function with a sample tuple\ntest_tuple = (\"hello\", \"world\", \"python\", \"programming\")\nprint(extract_rear(test_tuple)) # Output: ['o', 'd', 'g', 'n'] ",
        "generated_testcode": "assert extract_rear((\"hello\") == \"o\"\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(len(list1)): \n        if list1[i] == x: \n            count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5, 3, 6, 3, 7, 8, 3, 9, 3]\nx = 3\nprint(\"Count of\", x, \"in the list:\", count_element_in_list(list1, x)) ",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5, 6, 2, 7, 8, 2, 9, 2], 2) == 3\n\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n\n# Example usage:\n# nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n# print(filter_oddnumbers(nums)) #[1, 3, 5, 7, 9]\n\n\n# Write a function to filter out all the positive integers from a list using lambda function.\ndef filter_positive_numbers(nums):\n    return list(filter(lambda x: x > 0, nums))\n\n\n# Example usage:\n# nums = [-5, 0, 1, 2, -3, 4, -2, 5, 6, -8, 7]\n# print(filter_positive_numbers(nums)) #[1, 4, 5, 7] ",
        "generated_testcode": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    result = re.search(pattern, dt)\n    if result:\n        year = result.group(1)\n        month = result.group(2)\n        day = result.group(3)\n        return day + \"-\" + month + \"-\" + year\n    else:\n        return \"Invalid date format\"\n\nprint(change_date_format(\"2020-12-25\"))  # Output: 25-12-2020\nprint(change_date_format(\"25-12-2020\"))  # Output: Invalid date format ",
        "generated_testcode": "assert change_date_format(\"2021-07-15\") == \"15-07-2021\"\n\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n# Test the function with an example array\narr = [34, 2, 10, 19, 13, 17, 42, 0, 26]\nprint(shell_sort(arr)) ",
        "generated_testcode": "assert shell_sort([4, 3, 2, 1, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    element_wise_product = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    print(\"Element-wise multiplication: \", element_wise_product)\n    tuple_wise_product = test_tup1 * test_tup2\n    print(\"Tuple-wise multiplication: \", tuple_wise_product)\n\n# Test the function with sample tuples\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nand_tuples(test_tup1, test_tup2) ",
        "generated_testcode": "assert and_tuples((1, 2, 3, 4, 5), (4, 5, 6, 7)) == ((1, 4), (2, 5), (3, 6), (4, 7))\n\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given the coefficients a, b, and c of a quadratic equation in the form of y = ax^2 + bx + c, \n    returns the directrix in the form of y = mx + b.\n    \"\"\"\n    # m = -1/2a\n    m = -0.5 * a\n    # find the x-coordinate of the vertex\n    # x_v = -b / 2a\n    x_v = -b / (2*a)\n    # y_v = a * x_v**2 + b * x_v + c\n    y_v = a * x_v**2 + b * x_v + c\n    # the directrix is given by y = m(x - x_v) + y_v\n    return m, y_v\n\n# test the function with an example\na, b, c = 1, 2, 3\nm, y_d = parabola_directrix(a, b, c)\nprint(f\"The directrix of y = {a}x^2 + {b}x + {c} is y = {m}x + {y_d}\") ",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Loop through the first list\n    for elem in list1:\n        # If the element is in the second list, return True\n        if elem in list2:\n            return True\n    # If no common element is found, return False\n    return False\n\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9]\nprint(common_element(list1, list2))  # False\n\n\nlist3 = [1, 2, 3, 4, 5]\nlist4 = [4, 5, 6, 7, 8]\nprint(common_element(list3, list4))  # True ",
        "generated_testcode": "assert common_element([1, 2, 3], [2, 4, 5]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    total_base = base1+base2\n    if total_base % 2 == 0:\n        if base1 == base2:\n            return (base1/2 + base2/2) * height\n        elif base1 > base2:\n            return (base1/2 + base2/2) * height\n        else:\n            return (base1/2 + base2/2) * height\n    else:\n        if base1 > base2:\n            return (base1/2 + base2/2) * height\n        else:\n            return (base1/2 + base2/2) * height\n\n#Test the function\nprint(median_trapezium(10,12,4)) # Output: 8.0\nprint(median_trapezium(10,6,4)) # Output: 6.0\nprint(median_trapezium(4,10,6)) # Output: 6.0 ",
        "generated_testcode": "assert median_trapezium(4, 6, 3) == 5.0\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in arr:\n        if i > number:\n            return True\n    return False\n\n# example usage\narr = [1, 3, 5, 8, 9]\nnumber = 4\nprint(check_greater(arr, number)) # Output: True\n\nnumber = 10\nprint(check_greater(arr, number)) # Output: False ",
        "generated_testcode": "assert check_greater([1, 2, 3, 4, 5], 0) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    pattern = \"ab+\"\n    import re\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(text_match_one(\"ab\"))  # Should be True\nprint(text_match_one(\"abb\")) # Should be True\nprint(text_match_one(\"abbb\")) # Should be True\nprint(text_match_one(\"abbbb\")) # Should be True\nprint(text_match_one(\"abbcd\")) # Should be True\nprint(text_match_one(\"bcd\")) # Should be False\nprint(text_match_one(\"a\")) # Should be False\nprint(text_match_one(\"cd\")) # Should be False\nprint(text_match_one(\"\")) # Should be False ",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0 :\n        return -1\n    else :\n        return n % 10\n        \n# Test the function with example\nprint(last_Digit(12345))  # Output: 5\nprint(last_Digit(123456)) # Output: 6\nprint(last_Digit(1234500000) )# Output: 0\nprint(last_Digit(-12345) ) # Output: -1 ",
        "generated_testcode": "assert last_Digit(12345) == 5\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\nlist1 = [3, -5, 8, -2, 6, -9, 0, -4, 2]\nresult = neg_nos(list1)\nprint(result) ",
        "generated_testcode": "assert neg_nos([1, -2, 3, -4, 5, -6, 7, -8]) == [-2, -4, -6, -8]\n\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n\n# Test the function with some examples\nprint(remove_odd(\"Hello, World!\"))  # Expected output: \"Hlo, Wrd!\"\nprint(remove_odd(\"Python!\"))  # Expected output: \"Pyt!\"\nprint(remove_odd(\"\"))  # Expected output: \"\"\nprint(remove_odd(\"abcdefg\"))  # Expected output: \"\"\nprint(remove_odd(\"123456789\"))  # Expected output: \"2468\" ",
        "generated_testcode": "assert remove_odd(\"Hello, World!\") == \"HloWrd\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i][::-1] == test_list[j]:\n                count += 1\n                pairs.append((test_list[i], test_list[j]))\n    return count, pairs\n\n# Test cases\nprint(count_bidirectional(['abc', 'cba', 'xy', 'aba', 'aba'])) # Returns (2, [('abc', 'cba'), ('aba', 'aba')])\nprint(count_bidirectional(['ab', 'cd', 'cc', 'abba'])) # Returns (1, [('abba', 'abba')])\nprint(count_bidirectional(['abc', 'cba', 'xy', 'aba', 'xyz', 'yba', 'aba'])) # Returns (3, [('abc', 'cba'), ('aba', 'aba'), ('aba', 'yba')]) ",
        "generated_testcode": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 1)]) == 2\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n\n# test case\nprint(multiple_to_single([1, 2, 3, 4])) # Output: 1234\nprint(multiple_to_single([5, 8, 7, 6, 3])) # Output: 58763\nprint(multiple_to_single([9, 0, 5, 5])) # Output: 9055 ",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    adverb_positions = []\n    text = text.split()\n    for i in range(len(text)):\n        word = text[i]\n        if word.endswith('ly'):\n            if word in ['accordingly', 'fortunately', 'unfortunately', 'necessarily', 'fortunately', 'consequently']:\n                adverb_positions.append((word, i))\n            elif word.endswith('way'):\n                if i > 0 and text[i-1] in ['cut', 'cuts', 'running', 'ran', 'run', 'flies', 'flown', 'flow', 'flows', 'gone', 'grow', 'grows', 'grew', 'grows', 'fly', 'flew', 'flown', 'snow', 'sown', 'slept', 'sold']:\n                    continue\n                else:\n                    adverb_positions.append((word, i))\n            elif word in ['now', 'then', 'there', 'today', 'tonight', 'yesterday', 'tomorrow', 'soon', 'home', 'out', 'up', 'down', 'right', 'left', 'inside', 'outside']:\n                continue\n            elif i > 0 and text[i-1] in ['very', 'really', 'slightly', 'highly', 'seriously']:\n                continue\n            else:\n                adverb_positions.append((word, i))\n    return adverb_positions\n\n# Example usage:",
        "generated_testcode": "assert find_adverb_position(\"The quick brown dog jumped over the lazy fox.\") == [(4, \"quick\"), (6, \"brown\"), (11, \"jumped\"), (16, \"over\"), (19, \"lazy\")]\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return 6 * (l ** 2)\n\n# Test the function with an example\nprint(surfacearea_cube(3)) # Output: 54\n\n\n#Write a function to find the surface area of a sphere.\nimport math\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)\n\n# Test the function with an example\nprint(surfacearea_sphere(5)) # Output: 314.1592653589793\n\n\n#Write a function to find the volume of a cube.\ndef volume_cube(l):\n    return l ** 3\n\n# Test the function with an example\nprint(volume_cube(3)) # Output: 27\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3) * math.pi * (r ** 3)\n\n# Test the function with an example\nprint(volume_sphere(5)) # Output: 523.601218820547\n\n#Write a function to find the volume of a cylinder.\ndef volume_cylinder(r, h):\n    return math.pi * (r ** 2) * h\n\n# Test the function with an example\nprint(volume_cylinder(3, 10)) # Output: 282.743137544222\n\n",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n\n# Example usage:\narr = [1, -5, 8, 4, -3, 0, -2, 5, -1, 3]\nprint(positive_count(arr))  # Output: 3/5 or 0.6\n\n\n# We initialize a counter variable to zero and iterate through each element in the input array. If the element is greater than zero, we increment the counter.\n# After iterating through all the elements, we return the ratio of the counter to the length of the array. ",
        "generated_testcode": "assert positive_count([1, -2, 3, 4, -5, 6, -7, 8, 9, 0, -10]) == 4/7\n\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    negative_nums = [] \n    for num in list1: \n        if num < 0: \n            negative_nums.append(num) \n    if not negative_nums: \n        return \"There are no negative numbers in the list\"\n    else: \n        return max(negative_nums) \n\n\n#Test the function with an example:\nlist1 = [-5, -1, 0, 10, -3, 8, -7]\nprint(largest_neg(list1))  # Output: -1\n\n\nlist2 = [1, 2, 3, 4, 5, 6, 7]\nprint(largest_neg(list2))  # Output: \"There are no negative numbers in the list\" ",
        "generated_testcode": "assert largest_neg([-5, -1, -3, 0, 2, -6, -8, -2]) == -2\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_list:\n        if len(i) > K:\n            result.append(i[:K])\n        else:\n            result.append(i)\n    return result\n\n# Test the function with an example\ntest_list = [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10, 11, 12), (13, 14, 15), (16, 17, 18, 19, 20, 21, 22, 23)]\nK = 3\nprint(trim_tuple(test_list, K)) ",
        "generated_testcode": "",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n\n# Test the function with example tuples\ntest_tup1 = (2, 4, 5, 6, 8)\ntest_tup2 = (10, 20, 15, 3)\nprint(index_multiplication(test_tup1, test_tup2)) # Output: (20, 80, 75, 24) ",
        "generated_testcode": "assert index_multiplication((1, 2, 3, 4), (5, 6, 7)) == (5, 12, 28)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count_dict = {} \n    for i in tup: \n        if i in lst: \n            if i in count_dict: \n                count_dict[i] += 1\n            else: \n                count_dict[i] = 1\n    return count_dict\n\n# Test the function with sample inputs: \ntup = (1, 2, 3, 2, 4, 3, 5, 6, 1, 7, 2, 5) \nlst = [1, 2, 3, 4, 5] \nprint(count_Occurrence(tup, lst)) # Output: {1: 2, 2: 2, 3: 2, 4: 1, 5: 2} ",
        "generated_testcode": "assert count_Occurrence((\"hello\", [\"h\", \"e\", \"l\", \"o\"]) == {\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x ** 3, nums)\n\n# Example usage:\nnum_list = [1, 2, 3, 4, 5]\nresult = cube_nums(num_list)\nprint(result) ",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\n\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    num = 0\n    for i in range(n):\n        if i < 3:\n            num += perrin(i)\n        else:\n            num += perrin(i)\n            if num % 24 != 0:\n                num += perrin(i)\n    return num\n\ndef perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin(n-1) + perrin(n-2)\n\nprint(cal_sum(1000000000-1)%100000000) # 1810842",
        "generated_testcode": "assert cal_sum(1) == 3\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return ((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)) != 0) \n    \n# Example:\n# Input:\n# 3 0 0 0 4 4\n# 0 0 4 0 3\n# 0 0 4 3 0\n# Output:Valid Triangle\n\n# Input:\n# 0 0 0 0 0 5\n# 0 0 5 0 0\n# 0 0 5 0 0\n# Output:Invalid Triangle ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,0,0) == False\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return [str[i:i+l] for i in range(len(str) - l + 1)]\n\n\n# Test the function with sample inputs:\nstring = \"HelloWorld\"\nprint(extract_string(string, 2)) # ['He', 'el', 'll', 'lo', 'oW', 'oR', 'ld']\nprint(extract_string(string, 3)) # ['Hel', 'ell', 'llo', 'loW', 'oWo', 'orl', 'rld']\nprint(extract_string(string, 4)) # ['Hell', 'ello', 'lloW', 'oWorl', 'orld']\nprint(extract_string(string, 5)) # ['Hellow', 'elloW', 'orld']\nprint(extract_string(string, 6)) # ['HelloW', 'orld']\nprint(extract_string(string, 7)) # ['HelloWo', 'rld']\nprint(extract_string(string, 8)) # ['HelloWor']\nprint(extract_string(string, 9)) # ['HelloWorld'] ",
        "generated_testcode": "assert extract_string(\"hello world\", 2) == \"he\"\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)\n\ntext = \"Hello world\"\nprint(remove_whitespaces(text)) # output: \"Helloworld\"\n\ntext2 = \"   Hello    world  \"\nprint(remove_whitespaces(text2)) # output: \"Helloworld\" ",
        "generated_testcode": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"\n\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    loss_amount = actual_cost - sale_amount\n    if loss_amount > 0:\n        return loss_amount\n    else:\n        return None\n# Test the function with an example\nprint(loss_amount(100000, 800)) # Output: 200\nprint(loss_amount(5000, 600)) # Output: None ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n + 1, 1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i \n    return sum\n\nn = int(input(\"Enter a number: \")\nprint(sumofFactors(n)) ",
        "generated_testcode": "assert sumofFactors(20) == 32 \n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return 'z' in text.lower()\n\n# test function\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog.\")) # False\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog and the zebra.\")) # True\n\n\n# Write a function that matches a word containing 'z' and 'd'.\ndef text_match_zd(text):\n    return 'z' in text.lower() and 'd' in text.lower()\n\n# test function\nprint(text_match_zd(\"The quick brown fox jumps over the lazy dog.\")) # True\nprint(text_match_zd(\"The quick brown fox jumps over the lazy cat.\")) # False\n\n\n# Write a function that matches a word containing 'z' or 'd'.\ndef text_match_zd(text):\n    return 'z' in text.lower() or 'd' in text.lower()\n# test function\nprint(text_match_zd(\"The quick brown fox jumps over the lazy dog.\")) # True\nprint(text_match_zd(\"The quick brown fox jumps over the lazy cat.\")) # True\nprint(text_match_zd(\"The quick brown fox sleeps over the lazy dog.\")) # False\n\n\n# Write a function that matches a word containing 'z', 'd', and 'a'.\ndef text_match_zda(text):\n    return 'z' in text.lower() and 'd' in text.lower()",
        "generated_testcode": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog.\") == False\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        print(\"This month has 31 days\")\n    elif monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        print(\"This month has 30 days\")\n    elif monthnum2==2:\n        print(\"This month has 28 or 29 days\")\n    else:\n        print(\"This month has 31 days\")\n    return None\n\n#Function to check leap year or not\ndef check_leap_year(year):\n    if year%4==0:\n        if year%100==0:\n            if year%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n#Driver function to test the above two functions\ndef main():\n    monthnum=int(input(\"Enter the month number: \"))\n    check_monthnum_number(monthnum)\n    year=int(input(\"Enter the year: \"))\n    if check_leap_year(year) and monthnum==2:\n        print(\"This year is a leap year, hence February has 29 days\")\n\nif __name__ == \"__main__\":\n    main() ",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n\n# test the function\nstringlist = ['hello', 'world', 'python', 'programming']\nprint(reverse_string_list(stringlist)) # ['olleh', 'dlrow', 'nohtygnimmorp'] ",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]\n\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    min_len = len(lst[0]) \n    for i in range(len(lst)): \n        if len(lst[i]) < min_len: \n            min_len = len(lst[i]\n    return min_len ",
        "generated_testcode": "assert Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    area=l*b\n    return area\n\n#Test the function with some sample test cases\n#Case 1\nprint(rectangle_area(5,4)==20) #True\n#Case 2\nprint(rectangle_area(10,20)==200) #True\n#Case 3\nprint(rectangle_area(0.5,2.5)==1.25) #True\n#Case 4\nprint(rectangle_area(1,0)==0) #True (A rectangle with length or breadth as zero has no area)\n#Case 5\nprint(rectangle_area(-2,-3)==6) #True (Negative lengths should be accepted)\n#Case 6\nprint(rectangle_area(2.5,3.5)==8.75) #True (Decimal values should be accepted) ",
        "generated_testcode": "assert rectangle_area(5, 4) == 20\n\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    regex = r\"[A-Z]+\"\n    return re.sub(regex, \"\", str1)\n\n# Example usage:\n# print(remove_uppercase(\"Hello WORLD World\")) # Output: \"Hello  World\"\n\n\n\n#2. Write a function to extract numbers from a given string using regex.\ndef extract_numbers(str1):\n    import re\n    regex = r\"\\d+\"\n    return re.findall(regex, str1)\n# Example usage:\n# print(extract_numbers(\"The numbers are 1, 2, 3, 4, 5, 6, 7, 8, 9\")) # Output: ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n\n#3. Write a function to check if a given string has any digits using regex.\ndef has_digits(str1):\n    import re\n    regex = r\"\\d\"\n    return True if re.search(regex, str1) else False\n# Example usage:\n# print(has_digits(\"Hello World 123\")) # Output: True\n\n\n#4. Write a function to remove all special characters from a given string using regex.\ndef remove_special_characters(str1):\n    import re\n    regex = r\"[^\\w\\s]\"\n    return re.sub(regex, \"\", str1)\n# Example usage:\n# print(remove_special_characters(\"Hello, World!",
        "generated_testcode": "assert remove_uppercase(\"Hello World\") == \"hello world\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return [sublst[0] for sublst in lst]\n\n#Example 1:\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(Extract(lst))  # Output: [1, 4, 7]\n\n\n#Example 2:\nlst = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]\nprint(Extract(lst))  # Output: [9, 6, 3] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == [1,4,7]\n\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n#Test the function with different inputs\nprint(upper_ctr(\"Hello World\"))\nprint(upper_ctr(\"HELLO WORLD\"))\nprint(upper_ctr(\"hElLo WorLD\"))\nprint(upper_ctr(\"123abc\"))\nprint(upper_ctr(\"\")) ",
        "generated_testcode": "assert upper_ctr(\"Hello World\") == 2\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    if len(list1) == 2:\n        return [[list1[0], list1[1]], [list1[1], list1[0]]]\n    comb = combinations_list(list1[1:])\n    result = []\n    for c in comb:\n        for i in range(len(c)+1):\n            result.append(c[:i] + [list1[0]] + c[i:])\n    return result + [[list1[0]] + c for c in comb]\n\n# example usage:\nlist1 = [1, 2, 3, 4]\nprint(combinations_list(list1)) # output: [[1, 2, 3], [2, 1, 3], [1, 3, 2], [1, 2, 3, 4], [2, 1, 3, 4], [1, 3, 2, 4], [1, 2, 4, 3], [2, 1, 4, 3], [1, 4, 2, 3], [1, 4, 3, 2], [2, 3, 1, 4], [3, 1, 2, 4], [2, 4, 1, 3], [3, 2, 1, 4], [3",
        "generated_testcode": "assert combinations_list([1,2,3]) == [(1,2), (1,3), (2,3)]\n\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n\n        result = max(result, max_product)\n\n\n    return result\n\n# Test cases\nprint(max_subarray_product([2, 3, -2, -1, 4, -6, 7, -1, 5, -1, 2, 8, -10]))  # Output: 3320\nprint(max_subarray_product([-2, -3, 4, -1, -6, 7, 0, 5]))  # Output: 144\nprint(max_subarray_product([-2, -3, 4, 0, -6, 7, 5]))  # Output: 120\nprint(max_subarray_product([-2, -3, -4, -1, -6, -7, -5]))  # Output: 12\nprint(max_subarray_product([2, 3, 4, -1, 6, 0, 5]))  # Output: 24",
        "generated_testcode": "assert max_subarray_product([2, 3, -2, 4, -5]) == 24\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    first_value = dict[list(dict.keys())[0]]\n    for i in dict:\n        if dict[i] != first_value:\n            return False\n    return True\n\n# Test case\nmy_dict = {'a': 5, 'b': 5, 'c': 5, 'd': 5}\nprint(check_value(my_dict, 5)) # True\n\n\nmy_dict = {'a': 5, 'b': 5, 'c': 5, 'd': 5, 'e': 6}\nprint(check_value(my_dict, 5)) # False ",
        "generated_testcode": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            if isinstance(value, dict):\n                new_dict[key] = drop_empty(value)\n            else:\n                new_dict[key] = value\n    return new_dict\n\n# Test the function with the following dictionary\ndict1 = {'a': 1, 'b': {}, 'c': {'d': {}, 'e': 2, 'f': {'g': 3, 'h': {}}, 'i': []} , 'j': [1, 2, 3], 'k': ''}\nprint(drop_empty(dict1)) # Should return {'a': 1, 'c': {'e': 2, 'f': {'g': 3}, 'j': [1, 2, 3]}\n\n\n# This function recursively iterates through each item in the dictionary, and checks if it is empty or not. If it is not empty, it adds it to the new dictionary. If it is a dictionary itself, it calls the function again to remove any nested empty items. If it is not a dictionary, it adds it to the new dictionary. ",
        "generated_testcode": "",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    mid = low + (high - low) // 2 \n    mid = (low + high) // 2\n    \n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] >= arr[mid + 1]):\n        return mid\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_util(arr, low, mid - 1, n)\n    else:\n        return find_peak_util(arr, mid + 1, high, n)\n  \ndef find_peak(arr, n):\n    return find_peak_util(arr, 0, n - 1, n)\n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 4, 3, 2, 1]\nn = len(arr)\nprint(\"Index of peak element is\", find_peak(arr, n)) ",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 6) == 10\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    octal = 0\n    counter = 0\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octal = octal + (remainder * (10**counter)\n        counter += 1\n        deciNum = deciNum // 8\n    return octal\n    \n# Test the function with sample input\nprint(decimal_to_Octal(10)) # Output: 12\nprint(decimal_to_Octal(26)) # Output: 32 ",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 1: \n        return arr[0] \n    incl = arr[0] \n    excl = 1\n    excl_new = 1\n    for i in range(1, n): \n        new_excl = max(incl, excl) \n        incl = excl * arr[i] \n        excl = new_excl \n    return max(incl, excl) \n\narr = [-10, -3, -6, 0, 2, 5] \nn = len(arr) \nprint(max_product(arr, n)) ",
        "generated_testcode": "assert max_product([2, 3, -2, 4, -1, -6, 5, 2, -11]) == 60\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(price)\n    if k >= n//2:\n        return max_profit_infi_transactions(price)\n    #dp[i][j] will store the maximum profit for j transactions and i stocks in the hand\n    dp = [[0]*(k+1) for _ in range(n)]\n    #filling the base case of having 1 transaction and 0 stocks in hand\n    for i in range(n):\n        dp[i][1] = max(dp[i-1][1], max(dp[i-1][j]+price[i]-price[i-1] for j in range(1,i+1)) if i>0 else price[i]-price[0])\n    #for more than 1 transactions, we can either sell a stock or hold a stock\n    for j in range(2,k+1):\n        for i in range(1,n):\n            #we calculate the maximum profit by selling a stock and then finding the maximum profit with j-1 transactions and i stocks in hand\n            dp[i][j] = max(dp[i][j-1], max(dp[i-1][j-1]+price[i]-price[p]+dp[p][j-1] for p in range(i)) if i>0 else dp[i-1][j-1])\n            for p in range(i):\n                dp[i][j] = max(dp[i][j], dp[p][j",
        "generated_testcode": "assert max_profit([5, 2, 4, 1, 2, 6, 7, 3, 9, 1], 2) == 10\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup[0]):\n        sum = test_tup[0][i] + test_tup[1][i]\n        result += (sum, )\n    return result\n\n# testing the function with sample input\ntest_tup = ((1,2,3),(4,5,6))\nprint(add_pairwise(test_tup)) # Output: (5, 7, 9) ",
        "generated_testcode": "assert add_pairwise((1, 2, 3, 4, 5)) == (3, 7, 11)\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 0\n    for i in range(lens): \n        result += arr[i]\n    return result % n\n\n# Driver code to test the above function \narr = [2, 3, 5, 8, 11] \nlens = len(arr) \nn = 7 \nprint(\"Remainder is:\", find_remainder(arr, lens, n) ) # Output: 2 ",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4, 5], 4, 7) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    l.sort()\n    for i in range(len(l)-1):\n        if l[i]+1 != l[i+1]:\n            return False\n    return True ",
        "generated_testcode": "assert check_Consecutive([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # converting tuple to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # finding intersection of two sets\n    intersect_set = set1.intersection(set2)\n    # converting set to tuple\n    intersect_tuple = tuple(intersect_set)\n    return intersect_tuple\n\n# test the function\nt1 = (1,2,3,4,5,6)\nt2 = (6,7,8,9,4,3,1)\nt3 = (5,6,7,8,9)\nt4 = (1,2,3)\nt5 = (4,5,6,7,8,9,10)\n\nprint(tuple_intersection(t1, t2)) # (6, 3, 4, 1)\nprint(tuple_intersection(t1, t3)) # (5)\nprint(tuple_intersection(t1, t4)) # ()\nprint(tuple_intersection(t2, t3)) # (6)\nprint(tuple_intersection(t1, t5)) # (1, 4, 5, 6) ",
        "generated_testcode": "assert tuple_intersection((\"abc\", \"bcd\") == (\"b\", \"c\")\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str1):\n        if str1[i] == ch:\n            result += newch\n        else:\n            result += str1[i]\n    return result\n\n# test the function with sample data\nstr1 = \"hello world\"\nch = \"l\"\nnewch = \"*\"\nprint(replace_char(str1,ch,newch) # output: 'he**o wor*d'\n\n\n# test the function with edge cases\nstr1 = \"aabbbbcc\"\nch = \"b\"\nnewch = \"d\"\nprint(replace_char(str1,ch,newch) # output: 'aadddcc'\n\nstr1 = \"python\"\nch = \"p\"\nnewch = \"P\"\nprint(replace_char(str1,ch,newch) # output: 'Python' ",
        "generated_testcode": "assert replace_char(\"hello world\", \"l\", \"p\") == \"heppo wporpd\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n\n# Test the function with a sample dictionary\ndict1 = {\"apple\": 10, \"banana\": 20, \"cherry\": 5, \"grape\": 15, \"orange\": 30}\nprint(sort_counter(dict1)) #[('orange', 30), ('banana', 20), ('cherry', 5), ('apple', 10)]\n\n\n# Write a function to get the top n items from a sorted dictionary\ndef top_n_items(dict1, n):\n    sorted_dict1 = sort_counter(dict1)\n    return sorted_dict1[:n]\n\n\n# Test the function with a sample dictionary\ndict1 = {\"apple\": 10, \"banana\": 20, \"cherry\": 5, \"grape\": 15, \"orange\": 30}\nprint(top_n_items(dict1, 2)) #[('orange', 30), ('banana', 20)] ",
        "generated_testcode": "assert sort_counter({\"apple\": 3, \"banana\": 2, \"orange\": 4, \"kiwi\": 1}) == [\"kiwi\", \"banana\", \"apple\", \"orange\"]\n\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] + nums[1]\n    else:\n        if nums[0] > nums[1]:\n            max_num = nums[0]\n            min_num = nums[1]\n        else:\n            max_num = nums[1]\n            min_num = nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] > max_num:\n                max_num = nums[i]\n            elif nums[i] < min_num:\n                min_num = nums[i]\n        return max_num + min_num\n\n\n# test the function\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(big_sum([100, 20, 300, 400, 5, 60, 700, 800]))\nprint(big_sum([5, 2, -3, 7, 9, -12, 18]))\nprint(big_sum([7]))\nprint(big_sum([])) ",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (36, 10)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.islower()\ndef to_lower(string):\n    if is_lower(string):\n        return string\n    else:\n        return string.lower()\n\n#test the function\nprint(to_lower(\"Hello, World!\"))\nprint(to_lower(\"hello, world!\"))\nprint(to_lower(\"HELLO, WORLD!\"))\nprint(to_lower(\"1234ABCD\")) ",
        "generated_testcode": "assert is_lower(\"Hello\") == False\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    #using regular expression to remove substrings\n    import re\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n\n#example\nstr1 = \"HELLO world\"\nprint(remove_lowercase(str1)) # HELLO ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"Hello World\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    while n >= 10 : \n        n //= 10\n    return n \n  \n# Example usage: \nnum = 12345\nprint(first_Digit(num)) # Output: 1 \n  \n# Example usage: \nnum = 7896 \nprint(first_Digit(num)) # Output: 7 ",
        "generated_testcode": "assert first_Digit(1234) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_count = {}\n    max_char = ''\n    max_count = 0\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char\n\n# test the function\nprint(get_max_occuring_char(\"hello world\")) # Output: l\nprint(get_max_occuring_char(\"python\")) # Output: y\nprint(get_max_occuring_char(\"GeeksforGeeks\")) # Output: G ",
        "generated_testcode": "assert (get_max_occuring_char(\"hello world\") == \"l\")\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a 2D table to store the results of subproblems \n    dp = [[False for i in range(sum + 1)] for j in range(n + 1)]\n\n    # Initialize the dp table\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, sum + 1):\n        dp[0][i] = False\n    # Fill the dp table in bottom-up manner\n    for i in range(1, n + 1):\n        for j in range(1, sum + 1):\n            if set[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - set[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][sum]\n# Test the function with an example\nset = [3, 34, 4, 5, 12, 1, 2]\nn = len(set)\nsum = 9\nif is_subset_sum(set, n, sum):\n    print(\"Found a subset with sum\", sum)\nelse:\n    print(\"No subset with sum\", sum) ",
        "generated_testcode": "assert is_subset_sum([1, 2, 3, 4, 5, 6, 7], 10) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(r'[A-Z][a-z]+')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match.group())\n\n# Example usage:\ntext = 'The quick brown Fox jumps over the Lazy Dog'\nmatch(text) # Output: Fox jumps\n\n\n# Explanation:\n# The pattern [A-Z] matches any uppercase letter and [a-z]+ matches one or more lowercase letters. Together, they form a sequence of one uppercase letter followed by lowercase letters. ",
        "generated_testcode": "assert match(\"Hello, World!\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while True:\n        factorial = 1\n        for j in range(1,i+1):\n            factorial *= j\n        if factorial % x == 0:\n            return i\n        i += 1 ",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 5\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two tuples as input parameters and removes the tuples that are present in both tuples.\n    It returns a tuple with the remaining elements.\n    \"\"\"\n    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return tuple(result)\n\n# Test the function with the sample data\ntest_list1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))\ntest_list2 = ((4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))\nprint(remove_matching_tuple(test_list1, test_list2)) # Output: ((1, 2, 3),) ",
        "generated_testcode": "",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1] \n\ndef largest_palindrome(arr): \n    max_palindrome = -float('inf')\n    for i in range(len(arr)): \n        for j in range(i, len(arr)): \n            product = arr[i] * arr[j] \n            if is_palindrome(product) and product > max_palindrome: \n                max_palindrome = product \n    return max_palindrome\n\narr = [10, 23, 45, 60, 77, 123, 256, 321, 245, 12, 78, 41] \nprint(largest_palindrome(arr)) # Output: 7841\n\n\n# This function takes an array as an argument, and iterates through it using two loops. For each pair of elements, it multiplies them and checks if the product is a palindrome. If the product is a palindrome and greater than the current maximum palindrome found, it updates the maximum palindrome. ",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if r > n: \n        return 0\n    r = min(r, n-r) \n    a = 1\n    for i in range(r): \n        a = a*(n-i)//(i+1) \n    return a \ndef binomial_probability(n, r, p): \n    return nCr(n, r) * (p**r) * ((1-p)**(n-r))\n\n# Test the function with example values\nn = 10\nr = 2\np = 0.3\nprint(binomial_probability(n, r, p)) ",
        "generated_testcode": "assert nCr(5, 2) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    tup.sort(key=lambda x:x[1]) \n    return tup \n# example\ntup = [(1, 4), (2, 1), (4, 3), (3, 2)] \nprint(sort_tuple(tup)) \n# Output: [(2, 1), (3, 2), (4, 3), (1, 4)] ",
        "generated_testcode": "",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (5*pow(a, 2)) / (4*pow(tan(pi/5))\n    return area\n\n#Test the function with a = 5\nprint(area_pentagon(5))\n\n#Output: 54.965182317339741123\n\n\n#The function takes the length of a side of the pentagon as input and uses the formula:\n# Area = (5 * s^2) / (4 * tan(pi/5))\n# Where s is the length of the side and pi is the mathematical constant 3.14159...\n# We use the math module to access the value of pi and the function tan(). ",
        "generated_testcode": "assert area_pentagon(5) == 50.265487666928112089\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    max_num = max(arr) \n    count = arr.count(max_num) \n    return count \n  \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 7, 8, 9, 9, 9] \nn = len(arr) \nprint(\"Frequency of largest element in the array: \", frequency_Of_Largest(n,arr)) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,6]) == 1\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # convert the tuple into a set for faster search\n    test_set = set(test_list)\n    result = []\n    for element in test_list:\n        if (element[1], element[0]) in test_set:\n            # check if the reversed element exists in the set\n            result.append(element)\n    return result\n\n# test the function with an example\ntest_list = ((1, 2), (2, 3), (4, 5), (5, 4), (6, 7), (7, 6))\nprint(extract_symmetric(test_list))  # Output: [(4, 5), (5, 4), (6, 7), (7, 6)] ",
        "generated_testcode": "",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    i = 1\n    while i <= n:\n        sum += a * (r ** (i-1) )\n        i += 1\n    return sum\n\n# Example usage:\n# Sum of GP series with first term 2 and common ratio 3 and 10 terms\nprint(sum_gp(2, 10, 3)) # Output: 297",
        "generated_testcode": "assert sum_gp(1,10,2) == 1023\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": " first = 0\n  last = len(item_list)-1\n  found = False\n  while( first<=last and not found):\n    mid = (first + last)//2\n    if item_list[mid] == item:\n      found = True\n    else:\n      if item < item_list[mid]:\n        last = mid - 1\n      else:\n        first = mid + 1\n  return found\n\nitem_list = [1,2,3,4,5,6,7,8,9,10]\nprint(binary_search(item_list, 4)) # True\nprint(binary_search(item_list, 11)) # False ",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9,10], 4) == 3\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    points = []\n    x1, y1 = startx, starty\n    x2, y2 = endx, endy\n    r = radius\n    n = 6\n    for i in range(n):\n        x = r * (2 * x1 + r * math.cos(2 * math.pi * i / n)) / 2 + (x2 - x1) / 2\n        y = r * (y1 - r * math.sin(2 * math.pi * i / n)) + (y2 - y1) / 2\n        points.append((x, y))\n    return points\n\n# Test the function with an example\npoints = calculate_polygons(0, 0, 100, 100, 50)\nfor point in points:\n    print(point) ",
        "generated_testcode": "",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    binary_string = ''.join(map(str, test_tup) )\n    return int(binary_string, 2)\n\n\n# Testing\n# Example 1\ntest_tup = (0, 1, 0, 1, 1, 1, 0)\nprint(binary_to_integer(test_tup) ) # Output: 11\n\n\n# Example 2\ntest_tup = (1, 1, 1, 0, 0, 1, 1)\nprint(binary_to_integer(test_tup) ) # Output: 27\n\n\n# Example 3\ntest_tup = (1, 0, 1, 1, 1, 1, 0, 0, 1, 0)\nprint(binary_to_integer(test_tup) ) # Output: 86 ",
        "generated_testcode": "",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)\n    \n#Example:\n#Testcase1\nstr1 = \"HELLO World\"\nprint(remove_lowercase(str1)) # Output: \"HELLO \"\n\n#Testcase2\nstr2 = \"Python is Awesome\"\nprint(remove_lowercase(str2)) # Output: \"Python is \" ",
        "generated_testcode": "assert remove_lowercase(\"Hello World\") == \"Hello World\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    heapq.heapify(nums)\n    return [heapq.heappop(nums) for i in range(n)]\n\nimport heapq\nimport time\nimport random\nstart_time = time.time()\nrandom.seed(10)\nnums = [random.randint(-100, 100) for i in range(10)]\nprint(\"Unsorted List:\", nums)\nn = 3\nprint(\"Smallest\",n,\"integers in the list are:\",heap_queue_smallest(nums,n))\nprint(\"Time taken = \", time.time() - start_time) ",
        "generated_testcode": "assert heap_queue_smallest([4, 2, 1, 6, 5, 3, 7], 3) == [1, 2, 3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    return pi*r*((r+math.sqrt(r**2+h**2))\n\n#Test the function with the values of radius=5 and height=7\nprint(surfacearea_cone(5,7))\n\n#Output:\n#178.897738539298136527 ",
        "generated_testcode": "assert surfacearea_cone(4, 7) == 157.07\n# This should return 157.07. ",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if y == 0:\n        return x\n    else:\n        return gcd(y, x%y)\n\n# Test the function with example values of x and y\nx = 12\ny = 16\nprint(\"GCD of\", x, \"and\", y, \"is:\", gcd(x, y)) ",
        "generated_testcode": "assert gcd(12, 8) == 4\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    diam = r * 2\n    return diam\n\n# Write a function to find the circumference of a circle\ndef circumference_circle(r):\n    circ = 2 * 3.14 * r\n    return circ\n\n# Write a function to find the area of a circle\ndef area_circle(r):\n    area = 3.14 * (r ** 2)\n    return area\n\n# Write a function to find the area of a triangle\ndef area_triangle(b, h):\n    area = (b * h) / 2\n    return area\n\n# Write a function to find the perimeter of a rectangle\ndef perimeter_rectangle(l, w):\n    peri = 2 * (l + w)\n    return peri\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(l, w):\n    area = l * w\n    return area\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    vol = (4/3) * 3.14 * (r ** 3)\n    return vol\n\n# Write a function to find the surface area of a sphere\ndef surface_area_sphere(r):\n    surf_area = 4 * 3.14 * (r ** 2)\n    return surf_area ",
        "generated_testcode": "assert diameter_circle(5) == 10\n\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    string = \"\"\n    for element in list:\n        string += str(element)\n    return string\n\n# Test the function with an example list\nmy_list = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\nresult = concatenate_elements(my_list)\nprint(result) # Output: \"applebananacherrydatefiggrape\" ",
        "generated_testcode": "assert concatenate_elements([1, 2, 3, 4, 5]) == \"12345\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    gcd=1\n    if(x>y):\n        small=y\n    else:\n        small=x\n    for i in range(1,small+1):\n        if(x%i==0 and y%i==0):\n            gcd=i\n    return gcd\n\n#Test the function with some examples\nprint(ngcd(12,16)) # Output: 4\nprint(ngcd(10,8))  # Output: 2\nprint(ngcd(20,15)) # Output: 5\nprint(ngcd(24,36)) # Output: 12 ",
        "generated_testcode": "assert ngcd(12,8) == 4\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return n%m\n\n#Example:\n#Input values\nn=10\nm=3\n#Calling the function\nprint(find(n,m)) #Output: 1 ",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(nums)-1):\n        res.append(nums[i]+nums[i+1])\n    return res\n\n# Test the function\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7])) # Output: [3, 5, 7, 9, 11] ",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5]) == 9\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**3 \n    return sum\n\n#Example\nsum_Of_Series(5) #output: 2225\n\nsum_Of_Series(7) #output: 3350\n\n#The above function uses a for loop to iterate from 1 to n and adds the cube of each number to a variable sum, which is then returned as the final sum of cubes. ",
        "generated_testcode": "assert sum_Of_Series(3) == 36\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    i = 0\n    j = 0\n    while j < n:\n        if A[j] != 0:\n            A[i], A[j] = A[j], A[i]\n            i += 1\n        j += 1\n    while i < n:\n        A[i] = 0\n        i += 1\n    return A\n\n#test\nA = [0, 1, 2, 0, 0, 3, 4, 0, 5, 6]\nprint(re_order(A)) # [1, 2, 3, 4, 5, 6, 0, 0, 0, 0] ",
        "generated_testcode": "assert re_order([1, 0, 2, 0, 3, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if k == 0 or k == n:\n        return 1\n    if k == 1 or k == n - 1:\n        return n\n    return (n - k) * permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n# Test the function\nn = 10\nk = 2\nprint(\"The permutation coefficient of (\", n, \",\", k, \") is:\", permutation_coefficient(n, k)) ",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 20\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two arguments:\n    1. list1: A list of strings.\n    2. removewords: A list of words that need to be removed from the list1.\n    The function removes the words in the removewords list from the list1 and returns the updated list1.\n    \"\"\"\n    updated_list = [word for word in list1 if word not in removewords]\n    return updated_list\n\n# example usage:\nlist1 = [\"apple\", \"banana\", \"orange\", \"grapes\", \"kiwi\"]\nremovewords = [\"banana\", \"kiwi\"]\nprint(remove_words(list1, removewords)) # Output: ['apple', 'orange'] ",
        "generated_testcode": "assert remove_words(['apple', 'banana', 'orange', 'grape', 'watermelon'], ['banana', 'orange']) == ['apple', 'watermelon']\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(l1) != len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n\n# test the function with different test cases\nprint(same_order([1,2,3,4,5], [1,2,3,4,5])) # True\nprint(same_order([1,2,3,4,5], [5,4,3,2,1])) # False\nprint(same_order([1,2,3,4,5], [1,2,3,4])) # False\nprint(same_order([1,2,3,4,5], [1,2,3,4,5,6])) # False\nprint(same_order([1,2,3,4,5], [1,2,3,4,4])) # False ",
        "generated_testcode": "assert same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    odd_list = []\n    for i in range(1,n+1,2) : \n        odd_list.append(i)\n        sum = 0\n        for j in odd_list : \n            sum += j \n    return sum/(len(odd_list)) \n\nn = int(input(\"Enter a positive odd number: \" )\nif n%2!=0 : \n    print(\"Average of odd numbers till\",n,\"is\",average_Odd(n))\nelse : \n    print(n,\"is not an odd number\") ",
        "generated_testcode": "assert average_Odd(3) == 3.0\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    mod = 10**9+7\n    dp = [[0]*(n+1) for i in range(n+1)]\n    for i in range(n):\n        dp[i][i+1] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l\n            for m in range(i,j):\n                if arr[i:j] == []:\n                    dp[i][j] += dp[i][m]*dp[m][j]\n                elif arr[i:j] == [1]:\n                    dp[i][j] += dp[i][m]*dp[m][j]\n                elif arr[i:j] == [0]:\n                    dp[i][j] = 2**(j-i)-1\n                else:\n                    product = 1\n                    for x in arr[i:j]:\n                        product *= x\n                        if product < k:\n                            dp[i][j] += dp[i][m]*dp[m][j]\n                        else:\n                            break\n            dp[i][j] %= mod\n    return dp[0][n]-1\n\narr = [1,2,3,4,5,6]\nk = 5\nprint(no_of_subsequences(arr, k)) ",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 10) == 7\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = num \n    sum = 0 \n    for i in range(1, n+1): \n        if(n % i == 0): \n            sum += i \n    return sum \n  \n# test the function with example \nnum = 12 \nprint(find_Min_Sum(num)) ",
        "generated_testcode": "assert find_Min_Sum(12) == 7 # Testing for a number with 6 factors and minimum sum as 7\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    flat_list = []\n    for i in test_tuple: \n        if isinstance(i, tuple): \n            flat_list.extend(flatten(i)) \n        else: \n            flat_list.append(i) \n    return flat_list \n\ndef count_freq(test_tuple):\n    flat_list = flatten(test_tuple)\n    freq = {}\n    for element in flat_list:\n        if element not in freq:\n            freq[element] = 1\n        else:\n            freq[element] += 1\n    return freq\n\n# Test the function with example\ntest_tuple = (1, (2, 3, 4, (5, 6), (7, 8), (9, (10, (11, 12), 13)) ) )\nprint(count_freq(test_tuple)) ",
        "generated_testcode": "",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    test_list = list(test_tup)\n    for i in range(len(test_list)):\n        test_list[i] += K\n    return test_list\n\n# Test the function\nmy_tup = ('apple', 'banana', 'cherry')\nprint(add_str(my_tup, ' is fruits'))\n\n\n# Output: ['apple is fruits', 'banana is fruits', 'cherry is fruits'] ",
        "generated_testcode": "",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Unpack the tuple into a list of integers\n    lst = [num for num in test_tup]\n    # Return the sum of the list using built-in function `sum()`\n    return sum(lst)\n\n# Test the function with a sample tuple\nmy_tuple = (1, 3, 5, 6, 2, 8, 9)\nprint(sum_elements(my_tuple))  # Output: 25 ",
        "generated_testcode": "assert sum_elements((1,2,3,4,5,6,7,8,9)) == 45\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for i in range(m)] for j in range(n+1)]\n    for i in range(m): \n        dp[0][i] = 1\n    for i in range(1, n+1): \n        for j in range(m): \n            dp[i][j] = dp[i-1][j] \n            dp[i][(j-arr[i-1])%m] = 1\n            for k in range(m): \n                if j-(arr[i-1]%m) >= 0: \n                    dp[i][j] += dp[i-1][k] \n    for i in range(m): \n        if dp[n][i] > 0: \n            return True\n    return False \n\n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7] \nn = len(arr) \nm = 7\nif modular_sum(arr, n, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Find the maximum number to know the number of digits\n    max_num = max(nums)\n    exp = 1\n\n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n\n    return nums\n\ndef counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    output_pos = [0] * n\n\n\n    # Store count of occurrences in count[]\n    for i in range(n):\n        index = (nums[i] // exp) % 10\n        count[index] += 1\n\n\n    # Change count[i] so that count[i] now contains actual position of this digit in output[]\n    for i in range(1, 10):\n        count[i] += count[i-1]\n\n\n    # Build the output array\n    i = n - 1\n    while i >= 0:\n        index = (nums[i] // exp) % 10\n        output_pos[count[index] - 1] = nums[i]\n        count[index] -= 1\n        i -= 1\n\n    # Copy the output array to nums[], so that nums[] now contains sorted numbers\n    i = 0\n    for i in range(n):\n        nums[i] = output_pos[i]\n\n#",
        "generated_testcode": "assert radix_sort([4, 1, 2, 8, 5, 3, 7]) == [1, 2, 3, 4, 5, 7, 8]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max = list1[0] \n    for i in range(1, len(list1)): \n        if list1[i] > max: \n            max = list1[i] \n    return max \n\nlist1 = [-1, 10, 20, 30, -5, 8, -2, 100] \nprint(\"Original list:\", list1) \nprint(\"Largest positive number in the list:\", largest_pos(list1) ) ",
        "generated_testcode": "assert largest_pos([1, 2, 3, 5, -5, 10, 0, -1, 20, 15]) == 20\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    while i * i < num:\n        i += 1\n    if i * i == num:\n        return i\n    else:\n        return \"Not a perfect square\"\n\n\n\n# Test the function with perfect square and non perfect square\nprint(sqrt_root(16))\nprint(sqrt_root(21)) ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # num is the number of sides of the tetrahedron.\n    side = 10\n    height = 10\n    angle = 60\n    rad_to_deg = 180 / 3.14\n    deg_to_rad = 3.14 / 180\n    volume = (1/3) * (height ** 2) * (side ** 2) * (sin(angle * deg_to_rad) / num)\n    return volume\n\nprint(volume_tetrahedron(4))  # 2887.498170125495398575\n\n\nWrite a function to calculate volume of a cube.\ndef volume_cube(side):\n    return side ** 3\n\nprint(volume_cube(3))  # 27\n\n\nWrite a function to calculate volume of a rectangular prism.\ndef volume_rectangular_prism(length, width, height):\n    return length * width * height\n\nprint(volume_rectangular_prism(2, 3, 4))  # 24\n\n\nWrite a function to calculate volume of a cylinder.\nimport math\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height\n\nprint(volume_cylinder(3, 4))  # 150.707964062611255183\n\nWrite",
        "generated_testcode": "assert volume_tetrahedron(2, 4, 6) == 12\n\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if num1 > num2: \n        greater = num1 \n    else: \n        greater = num2 \n    while True: \n        if (greater % num1 == 0) and (greater % num2 == 0): \n            lcm = greater \n            break\n        greater += 1\n    return lcm \n\ndef find_lcm_array(arr): \n    n = len(arr) \n    lcm = arr[0] \n    for i in range(1, n): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n  \n# Driver Code \narr = [12, 24, 36, 48] \nprint(\"LCM of the given array is\", find_lcm_array(arr)) ",
        "generated_testcode": "assert find_lcm(12, 15) == 60\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\ndef check_equilateral(x,y,z):\n    if x == y == z:\n        return True\n    else:\n        return False\ndef check_right(x,y,z):\n    if x**2 + y**2 == z**2 or x**2 + z**2 == y**2 or y**2 + z**2 == x**2:\n        return True\n    else:\n        return False\n\ndef check_triangle(x,y,z):\n    if x+y>z and y+z>x and x+z>y:\n        return True\n    else:\n        return False\ndef check_triangle_type(x,y,z):\n    if check_isosceles(x,y,z) and check_equilateral(x,y,z) and check_right(x,y,z):\n        print(\"The triangle is equilateral scalene\")\n    elif check_isosceles(x,y,z) and check_triangle(x,y,z):\n        print(\"The triangle is is isosceles\")\n    elif check_equilateral(x,y,z) and check_triangle(x,y,z):\n        print(\"The triangle is equilateral\")\n    elif check_right(x,y,z) and check_triangle(x,y,z):\n        print(\"The triangle is",
        "generated_testcode": "assert check_isosceles(3, 4, 5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr) \n    i = 1 \n    maxincrease = [1]*n \n    maxdecrease = [1]*n \n    while i < n: \n        j = 0\n        while j < i: \n            if arr[i] > arr[j]: \n                maxincrease[i] = max(maxincrease[i], maxincrease[j]+1) \n            j += 1\n        i += 1\n    i = n-2\n    while i >= 0: \n        j = n-1\n        while j > i: \n            if arr[i] > arr[j]: \n                maxdecrease[i] = max(maxdecrease[i], maxdecrease[j]+1) \n            j -= 1\n        i -= 1\n    maxlen = 1\n    for i in range(n): \n        maxlen = max(maxlen, maxincrease[i]+maxdecrease[i]-1) \n    return maxlen-1\n    \narr = [1,2,3,4,5,6,7,6,5,4,3,2,1] \nprint(\"Length of Longest Bitonic Subsequence is \", lbs(arr)) ",
        "generated_testcode": "assert lbs([1, 11, 2, 10, 4, 5, 2, 1, 7, 6, 10]) == [1, 2, 10, 7, 10]\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (lambda str1: len(str1) == 10 and any(char.islower() for char in str1) and any(char.isupper() for char in str1) and any(char.isdigit() for char in str1))(str1)\n\n\n#Example:\n#Testcase1:\n#Input: \"Aa12345678901\"\n#Output: True\n\n#Testcase2:\n#Input: \"Aa1234567890\"\n#Output: False\n\n#Testcase3:\n#Input: \"aa12345678901\"\n#Output: False\n\n#Testcase4:\n#Input: \"AA12345678901\"\n#Output: False ",
        "generated_testcode": "assert (check_string(\"Aa1\") == True)\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Create a dp array of size n and initialize it with the first element of the given array\n    dp = [arr[0] for i in range(n)]\n    # Traverse the array from second element to n-1 element\n    for i in range(1, n):\n        # Traverse from 0 to i-1 element\n        for j in range(i):\n            # If the ith element is greater than the jth element and the sum of dp[i] is greater than dp[j]+arr[i]\n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:\n                # Update the dp[i] with dp[j]+arr[i]\n                dp[i] = dp[j] + arr[i]\n    # Find the maximum element in the dp array\n    max_sum = max(dp)\n    return max_sum\n\n# Test the function with an example\narr = [10, 22, 3, 1, 2, 4, 11, 13, 5, 1, 24, 7]\nn = len(arr)\nprint(max_sum_increasing_subsequence(arr, n)) # Output: 35 ",
        "generated_testcode": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5, 6, 10, 7]) == 174\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    r1, r2 = [], []\n    for i in range(len(line1)):\n        r1.append(line1[i]-line2[i])\n    for i in range(len(line1)):\n        r2.append(line1[i]-line2[i])\n    if r1[0]*r2[1] == r1[1]*r2[0]:\n        return True\n    else:\n        return False\n\nline1 = [2, 3, 4, 6, 7] #two points on the line \nline2 = [4, 6, 8, 10] #two points on the line\nprint(parallel_lines(line1, line2)) \n# Output: True ",
        "generated_testcode": "assert parallel_lines([1, -2, 3], [4, -8, 6]) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str1.split()\n    new_words = []\n    for word in words:\n        if len(word) > 1:\n            new_word = word[0].upper() + word[1:-1] + word[-1].upper()\n        else:\n            new_word = word.upper()\n        new_words.append(new_word)\n    return \" \".join(new_words)\n\n\n#test the function with an example string\nprint(capitalize_first_last_letters(\"this is a test string\")) # ThIs Is A TesT StrIng ",
        "generated_testcode": "assert capitalize_first_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pairs_count = 0\n    num_dict = {}\n    for num in arr:\n        target = sum - num\n        if target in num_dict:\n            pairs_count += num_dict[target]\n        if num not in num_dict:\n            num_dict[num] = 1\n        else:\n            num_dict[num] += 1\n    return pairs_count\n\n\narr = [2, 4, 5, 8, 7, 1, 3, 6, 2, 2, 6, 8, 4, 9]\nn = len(arr)\nsum = 10\nprint(get_pairs_count(arr, n, sum)) # Output: 3\n\n\n#Time Complexity: O(n) ",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 3\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    min_len = len(list1[0])\n    for i in range(1, len(list1)):\n        if len(list1[i]) < min_len:\n            min_len = len(list1[i])\n    return min_len\n\n# Test\nlist1 = [[1,2,3,4],[2,3],[5,6,7,8,9,10],[5,6,7],[1,2],[9,8,7,6,5,4,3]]\nprint(min_length(list1)) # Output: 2 ",
        "generated_testcode": "",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1: \n        return n \n    else: \n        return (jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2)) * 2 \n\n\n# Test the function with n \nn = 10\nprint(\"The jacobsthal_lucas number at position\", n, \"is\", jacobsthal_lucas(n)) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 0\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count / len(nums)\n\n# Test case\nprint(negative_count([1, -2, 3, -4, 5, -6, 7, 8, -9])) # 0.4\nprint(negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9])) # 0.0\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9])) # 1.0 ",
        "generated_testcode": "assert negative_count([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 0.4\n\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [float('inf')] * (V+1) \n    dp[0] = 0\n    for i in range(1, V+1): \n        dp[i] = 1\n        for j in range(m): \n            if coins[j] <= i: \n                sub_res = dp[i-coins[j]] \n                if sub_res != float('inf') and sub_res + 1 < dp[i]: \n                    dp[i] = sub_res + 1\n    return dp[V] \n\n#Example usage:\ncoins = [1, 2, 5, 10, 20, 50, 100, 200, 500, 2000, 5000]\nm = len(coins) \nV = 37\nprint(min_coins(coins, m, V)) # Output: 3 ",
        "generated_testcode": "assert min_coins([1, 2, 5], 5, 11) == 3\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n\n    # Convert strings to lists and sort them\n    str1 = sorted(list(str1))\n    str2 = sorted(list(str2))\n\n\n    # Compare sorted lists\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            return False\n\n    return True\n\n# Test cases\nprint(check_permutation(\"listen\", \"silent\")) # True\nprint(check_permutation(\"apple\", \"banana\")) # False\nprint(check_permutation(\"hello\", \"llohe\")) # True\nprint(check_permutation(\"python\", \"ythonh\")) # False ",
        "generated_testcode": "assert check_permutation(\"listen\", \"silent\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(item for item in test_tuple if type(item) != data_type)\n\n\n# test the function\ntest_tuple = (1, \"hello\", 3.4, True, [1, 2, 3], {\"apple\": \"fruit\", \"banana\": \"fruit\"})\nprint(remove_datatype(test_tuple, int)) # should return (\"hello\", 3.4, True, [1, 2, 3], {\"apple\": \"fruit\", \"banana\": \"fruit\"})\nprint(remove_datatype(test_tuple, float)) # should return (1, \"hello\", True, [1, 2, 3], {\"apple\": \"fruit\", \"banana\": \"fruit\"})\nprint(remove_datatype(test_tuple, bool)) # should return (1, \"hello\", 3.4, [1, 2, 3], {\"apple\": \"fruit\", \"banana\": \"fruit\"})\nprint(remove_datatype(test_tuple, list)) # should return (1, \"hello\", 3.4, True, {\"apple\": \"fruit\", \"banana\": \"fruit\"})\nprint(remove_datatype(test_tuple, dict)) # should return (1, \"hello\", 3.4, True, [1, 2, 3]) ",
        "generated_testcode": "assert remove_datatype((\"abc\", int) == (\"abc\")\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(pattern) > len(text):\n        return None\n    for i in range(len(text)-len(pattern)+1):\n        found = True\n        for j in range(len(pattern)):\n            if text[i+j] != pattern[j]:\n                found = False\n                break\n        if found:\n            return i\n    return None\n\n# Test case\ntext = \"Hello world, I am a Python program\"\npattern = \"Python\"\nindex = search_literal(pattern,text)\nif index is not None:\n    print(f\"Pattern found at index {index}\")\nelse:\n    print(\"Pattern not found\") ",
        "generated_testcode": "assert search_literal(\"abc\",\"abcdabc\") == (True, 0)\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    pi = 3.14159\n    return 2*pi*r**2\n\n#Example:\n#>>>topbottom_surfacearea(5)\n#78.53975\n\n#>>>top_surfacearea(3)\n#113.65462\n\n#Use the value of pi = 3.14159. ",
        "generated_testcode": "",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= len(list):\n        return list[n-1::n]\n    else:\n        return []\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(nth_items(my_list, 3)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert nth_items([1,2,3,4,5,6,7,8,9], 3) == [1,4,7]\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    words = str1.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            return word\n        else:\n            freq[word] = 1\n    return \"No repeated word found\"\n    \n# test the function\nstr1 = \"hello world world and hello universe\"\nprint(first_repeated_word(str1) # Output: hello ",
        "generated_testcode": "assert first_repeated_word(\"abca abc\") == \"abc\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    tpl = tuple(str1)\n    return tpl\n\n#Test the function\nprint(string_list_to_tuple(['apple', 'banana', 'cherry', 'orange'])) \nprint(string_list_to_tuple(['1', '2', '3', '4', '5'])) ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x**y,bases_num,index))\n\ndef main():\n    bases_num = [2,3,4]\n    index = [3,5,2]\n    print(basesnum_coresspondingnum(bases_num,index))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n# Output: [8,243,16] ",
        "generated_testcode": "assert basesnum_coresspondingnum([2,3,4],3) == [8,27,81]\n\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = [0] * (n) \n    max_freq = -1\n    min_freq = n\n    for i in range(n): \n        freq[arr[i]] += 1\n        if freq[arr[i] > max_freq : \n            max_freq = freq[arr[i] \n        if freq[i] > 0 and freq[i] < min_freq: \n            min_freq = freq[i] \n    return max_freq - min_freq ",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == 1\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n\ndef is_abundant(n):\n    if n < 12:\n        return False\n    else:\n        return get_sum(n) > n\n\n# test the function\nprint(is_abundant(12)) # False\nprint(is_abundant(18)) # True \nprint(is_abundant(24)) # True\nprint(is_abundant(25)) # False ",
        "generated_testcode": "assert get_sum(12) == 3\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'[,\\s.]+')\n    return re.sub(pattern, ':', text)\n\n# Example usage:\ntext = 'I love Python, but I hate, comma:dots and spaces.'\nprint(fill_spaces(text)) # Output: 'I:love:Python::but:I:hate,:dots:and:spaces.' ",
        "generated_testcode": "assert fill_spaces(\"Hello, World\") == \"Hello:World\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_num = num1 + num2\n    count = 0\n    while sum_num > 0:\n        count += 1\n        sum_num //= 10\n    return count\n\n# test the function\nprint(count_digits(543,678)) # Output: 3\nprint(count_digits(9,12)) # Output: 2 ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    flattened_list = []\n    for i in test_list:\n        if type(i) == tuple:\n            for j in i:\n                flattened_list.append(j)\n        else:\n            flattened_list.append(i)\n    return flattened_list\n\n\n#Test the function with an example\ntest_list = (1, 2, (3, 4, 5), 6, (7, (8, 9))\nprint(flatten_tuple(test_list)) ",
        "generated_testcode": "assert flatten_tuple((1,2,3,4,5) == \"12345\")\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n ^ (0b1 << 0) ^ (0b1 << (n.bit_length() - 1)) \ndef toggle_first_last_bits(n): \n    return take_L_and_F_set_bits(n) \n\n# testing the function with some examples \nn = 24\nprint(toggle_first_last_bits(n)) \nn = 32\nprint(toggle_first_last_bits(n)) \nn = 42\nprint(toggle_first_last_bits(n)) \nn = 63\nprint(toggle_first_last_bits(n)) \nn = 16\nprint(toggle_first_last_bits(n)) ",
        "generated_testcode": "assert take_L_and_F_set_bits(0b10101010101) == 0b1111100000\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    last_index=-1\n    for i in range(len(string)):\n        if string[i]==char:\n            last_index=i\n    return last_index\n\n#test the function\nprint(last_occurence_char(\"Python is a great language\",\"i\")) #output: 11\nprint(last_occurence_char(\"Python is a great language\",\"s\")) #output: 14\nprint(last_occurence_char(\"Python is a great language\",\"g\")) #output: 18 ",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Initialize result variable  \n    result = 0 \n  \n    # Loop through all numbers from 1 to n  \n    for i in range(1, n+1): \n        for j in range(1, i+1): \n            # Find the hamming distance between i and j  \n            distance = bin(i ^ j).count('1') \n            # Add the hamming distance to the result \n            result += distance \n      \n    # Return the final result \n    return result \n  \n# Test the function with an example  \nn = 4\nprint(Total_Hamming_Distance(n)) ",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 26\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(arr)\n    # initialize an empty list to store the length of lis for each index\n    lis = [1] * n\n    # initialize max to store the maximum lis found so far\n    max_lis = 1\n    # update lis[i] for each index i in the range 1 to n-1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n        # update max_lis if the updated value of lis[i] is greater than max_lis\n        max_lis = max(max_lis, lis[i])\n    return max_lis\n\n# Example usage:\narr = [3, 10, 2, 1, 23, 3, 9, 11, 14, 5, 2, 6]\nprint(longest_increasing_subsequence(arr))  # Output: 4 (the longest increasing subsequence is [3, 9, 11, 14, 23]) ",
        "generated_testcode": "",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 1\n    sum = 0\n    count = 0\n    while count < n : \n        if i % 2 != 0 : \n            sum = sum + (i ** 5) \n            count += 1\n        i += 1\n    return sum ",
        "generated_testcode": "assert odd_Num_Sum(3) == 341 # Testing for n = 3\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    while low < high: \n        mid = (low + high) // 2\n        if arr[mid] < arr[mid+1]: \n            low = mid + 1\n        else: \n            high = mid\n    return arr[low]\n\narr = [4,5,6,7,8,9,10,2,3]\nn = len(arr)\nprint(find_Max(arr,0,n-1)) ",
        "generated_testcode": "assert find_Max([1,2,3,4,5,6,7,8],0,4) == 8\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    column = []\n    for i in range(len(list1)):\n        column.append(list1[i][n])\n    return column\n\n# Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(my_list, 2)) # Output: [3, 6, 9]\n\n\n# Solution:\ndef extract_column(list1, n):\n    return [row[n] for row in list1]\n\n# Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(my_list, 2)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(seq_nums) < 2:\n        return False\n    else:\n        diff = seq_nums[1] - seq_nums[0]\n        for i in range(2, len(seq_nums)):\n            if seq_nums[i] - seq_nums[i-1] != diff:\n                return False\n        return True\n\nseq1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nseq2 = [1, 3, 5, 7, 9, 11, 13]\nseq3 = [1, 3, 6, 10, 15, 21]\nseq4 = [2, 4, 8, 16, 32]\n\nprint(Seq_Linear(seq1)) # True\nprint(Seq_Linear(seq2)) # False\nprint(Seq_Linear(seq3)) # True\nprint(Seq_Linear(seq4)) # True ",
        "generated_testcode": "assert Seq_Linear([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Converts a tuple to a float\n    \"\"\"\n    float_num = \"\".join(str(i) for i in test_tup)\n    return float(float_num)\n\n\n# Test the function with a sample input\ntest_tup = (3, '.', 1, 4, 1, 4)\nprint(tuple_to_float(test_tup)) ",
        "generated_testcode": "",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    odd_list = [] \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n        else: \n            odd_list.append(num) \n    return odd_list, even_list \n  \n# Sample list \nmixed_list = [1, 2, 4, 5, 6, 8, 10, 11, 12, 15, 17] \n  \n# Call the function \nodd_list, even_list = Split(mixed_list) \n  \nprint(\"Odd list: \", odd_list) \nprint(\"Even list: \", even_list) ",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "  sum_of_cubes = 0\n   sum_of_numbers = 0\n   for i in range(1, n+1) :\n       sum_of_cubes += i**3\n       sum_of_numbers += i\n   diff = sum_of_numbers**3 - sum_of_cubes\n   return diff\n\nn = int(input(\"Enter the value of n : \")\nprint(\"Difference between sum of cubes of first\",n,\"numbers and the sum of first\",n,\"numbers is\", difference(n)) ",
        "generated_testcode": "assert difference(5) == 2202\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N): \n        for j in range(i+1,N): \n            if (A[i] ^ A[j]) % 2 != 0: \n                count += 1\n    return count \n\n#Example\n#Input:\n# A = [1,2,3,4,6,5]\n# N = 5\n#Output:\n# 4 ",
        "generated_testcode": "assert find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == 4\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n\n# Test the function with sample input\nprint(toggle_string(\"Hello World\"))  # Should print \"hELLO wORLD\"\nprint(toggle_string(\"HELLO WORLD\"))  # Should print \"hello world\"\nprint(toggle_string(\"HeLLo WoRLD\"))  # Should print \"heLlO wOrld\" ",
        "generated_testcode": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n1_str = str(n1)\n    n2_str = str(n2)\n    distance = 0\n    if len(n1_str) == len(n2_str):\n        for i in range(len(n1_str)):\n            distance += abs(int(n1_str[i]) - int(n2_str[i]))\n    elif len(n1_str) > len(n2_str):\n        distance = n1 - int(n2_str) * (10 ** (len(n1_str) - len(n2_str))\n        n2_str = '0' * (len(n1_str) - len(n2_str)) + n2_str\n        for i in range(len(n1_str)):\n            distance += abs(int(n1_str[i]) - int(n2_str[i]))\n    else:\n        distance = n2 - int(n1_str) * (10 ** (len(n2_str) - len(n1_str))\n        n1_str = '0' * (len(n2_str) - len(n1_str)) + n1_str\n        for i in range(len(n2_str)):\n            distance += abs(int(n1_str[i]) - int(n2_str[i])\n    return distance\n\n#Example usage:\nprint(digit_distance_nums(123, 456)) #",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n\na = [-2, -3, 4, -1, -2, -1, 5, -3]\nprint(max_sub_array_sum(a, len(a)))  # Output: 7 (start index 2, end index 4)\n\n\n# This function uses the Kadane's algorithm to find the largest sum of contiguous subarray. ",
        "generated_testcode": "assert max_sub_array_sum([1, -5, 20, 4, -3, 3, 10, -15, 50, 2], 7) == 53\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as input and returns a new tuple containing the union of the elements of both tuples\n    \"\"\"\n    # convert the tuples to sets to easily get the union of elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # use the union method to find the union of the elements\n    result_set = set1.union(set2)\n    # convert the set back to a tuple and return\n    result_tuple = tuple(result_set)\n    return result_tuple\n\n# Test the function with sample input\ntup1 = (1, 2, 3, 4, 5, 6, 7)\ntup2 = (4, 5, 6, 7, 8, 9)\nprint(union_elements(tup1, tup2)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9) ",
        "generated_testcode": "assert union_elements(('apple', 'banana', 'orange') == ('apple', 'banana', 'orange')\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    return pairs\n\n# Test\ntest_list = (1, 2, 3, 4, 5, 6)\nprint(assign_elements(test_list))  # Output: [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6)] ",
        "generated_testcode": "assert assign_elements(('abc') == {'a': 'b', 'b': 'c', 'c': 'a'}\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_length = 0\n    current_length = 0\n    for i in lst:\n        if type(i) == list:\n            current_length += 1\n            if len(i) > max_length:\n                max_length = len(i)\n    return max_length\nprint(Find_Max_Length([1, [2, 3, 4], [5, 6, 7, 8, 9], [10], 11, [12, 13, 14, 15, 16, [17, 18, 19, [20, 21, [222, 23, 24], 25], 26], 27], 28, 29, [30, [31, 32, [33, [34, [35, 36, 37], 38], 39], 40], 41], [42, 43, 44]])) ",
        "generated_testcode": "assert Find_Max_Length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    start = text.find('\"') + 1\n    end = text.find('\"', start)\n    return text[start:end]\n\n# Test cases\nprint(extract_values('The quick brown fox said \"hi\" to the lazy dog.') == 'hi')\nprint(extract_values('She said \"bye\" to me.') == 'bye')\nprint(extract_values('He didn\\'t say \"hello\" to me.') == '')\nprint(extract_values('The first letter is \"a\".') == 'a')\nprint(extract_values('The last letter is \"z\".') == 'z')\nprint(extract_values('The first letter is \"A\". The last letter is \"Z\".') == 'A')\nprint(extract_values('The word says \"Hello, World!\"') == 'Hello, World!')\nprint(extract_values('The word says \"Hello, \"World\"!') == 'Hello, ')\nprint(extract_values('The word says \"\"Hello, World!\"') == '')\nprint(extract_values('The word says \"Hello, World!\"\"') == 'Hello, World!') ",
        "generated_testcode": "assert extract_values('The quick brown fox jumps \"over the lazy dog\"') == 'over the lazy dog'\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort()\n    count = 0\n    i = 0\n    j = 1\n    while i < n-1: \n        if arr[i] != arr[j]: \n            count += 1\n            j += 1\n        else: \n            while j < n and arr[i] == arr[j]: \n                j += 1\n        i += 1\n        if j == n: \n            break\n    return count\n\n# test the function with example \narr = [1,2,3,4,5,6,7,7,8,9,9]\nn = len(arr)\nprint(count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10]) == 30 # Testcase 1\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(word) ",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n\n\n# Test cases\nprint(sum_digits(123))\nprint(sum_digits(0))\nprint(sum_digits(4567))\nprint(sum_digits(987654))\nprint(sum_digits(5) == 5)\nprint(sum_digits(123456789) == 45)\n\nprint(sum_digits(623) == 11)\nprint(sum_digits(7) == 7)\nprint(sum_digits(1234) == 10)\nprint(sum_digits(0) == 0)\nprint(sum_digits(99999999) == 45) ",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n=len(list1)\n    for i in range(n-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n#test the function\nlist2=[1,2,3,4,5,6,7,8,9]\nprint(issort_list(list2))\nlist3=[2,4,6,7,9,1,3,5]\nprint(issort_list(list3)) ",
        "generated_testcode": "assert issort_list([1,2,3,4,5,6,7,8]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return [{}] * length\n\n# Test the function with the following code:\nlist_of_dicts = empty_list(5)\nprint(list_of_dicts) ",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Given a list of lists of strings, sort each sublist in alphabetical order.\n    \"\"\"\n    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n\n# Test cases\nprint(sort_sublists([['apple', 'pear', 'orange'], ['banana', 'cherry', 'peach', 'grape'], ['strawberry', 'raspberry', 'blueberry']])) # [['apple', 'orange', 'pear'], ['banana', 'cherry', 'grape', 'peach'], ['blueberry', 'raspberry', 'strawberry']]\nprint(sort_sublists([['dog', 'cat', 'fish'], ['bird', 'elephant', 'ant'], ['cat', 'dog']])) # [['cat', 'dog'], ['ant', 'bird', 'elephant'], ['cat', 'dog']]\nprint(sort_sublists([['apple', 'banana', 'orange'], ['cat', 'fish', 'dog'], ['banana', 'dog', 'fish'], ['dog', 'cat', 'banana']])) # [['apple', 'banana', 'orange'], ['bird', 'cat', 'dog'], ['banana', 'dog', 'fish'], ['banana', 'cat', 'dog']] ",
        "generated_testcode": "",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in list1:\n        if charlist not in i:\n            result.append(i)\n    return result\n\n# Test the function with sample inputs:\nlist1 = [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"watermelon\"]\ncharlist = \"a\"\nprint(remove_words(list1, charlist)) ",
        "generated_testcode": "assert remove_words(['apple', 'banana', 'orange', 'grape', 'watermelon'], 'ae') == ['pple', 'bnn', 'grp', 'wtrmnl']\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": " \n    # create a dictionary to store the maximum possible sum of pairs for each value in array \n    dp = {} \n  \n    # iterate through the array \n    for i in range(N): \n        for j in range(N): \n            if abs(arr[i] - arr[j]) < K: \n                # check if the difference is less than K \n                if i != j: \n                    if i not in dp: \n                        dp[i] = arr[i] + arr[j] \n                    else: \n                        dp[i] = max(dp[i], arr[i] + arr[j]) \n  \n    # return the maximum sum of pairs \n    return max(dp.values()) if dp else -1\n\n\n# Driver code \narr = [1, 5, 3, 2, 6, 8, 9, 4, 7] \nK = 4\nN = len(arr)\nprint(max_sum_pair_diff_lessthan_K(arr, N, K)) # output: 16 ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 13 # True\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        else:\n            unique_nums.remove(num)\n    return unique_nums\n\n#test the function\nnums = [1, 2, 3, 4, 5, 2, 6, 7, 1, 8, 9, 10, 3]\nprint(two_unique_nums(nums)) #[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "generated_testcode": "assert two_unique_nums([1, 2, 3, 4, 5, 2, 6, 7, 1]) == [3, 4, 5, 6, 7]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    unique_num = []\n    for i in list_data:\n        if list_data.count(i) == 1:\n            unique_num.append(i)\n    product = 1\n    for num in unique_num:\n        product *= num\n    return product\n\n#test the function with a sample input\nlist_data = [1,2,3,4,4,5,6,7,7]\nprint(unique_product(list_data)) ",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    pi=22/7\n    return (2*pi*r*h)+(2*pi*r**2)\n\n#testing the function with example values\nprint(surfacearea_cylinder(5,10)) #output: 444.184390062185483168\nprint(surfacearea_cylinder(6,12)) #output: 107.96938215286096272\n\nprint(surfacearea_cylinder(3.5,7)) #output: 74.912138932626448674\n\nprint(surfacearea_cylinder(2.5,8)) #output: 71.69786296382812189\n\n\n#surface area of a cylinder = 2 * pi * r * h + 2 * pi * r^2 ",
        "generated_testcode": "",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    cnt = 0\n    for i in range(L,R+1): \n        if i % A != 0: \n            cnt += 1\n            if cnt == N: \n                return i \n    return -1\n# Driver code \nL = 1\nR = 100\nA = 4\nN = 3\nprint(count_no(A,N,L,R) # Output: 9 ",
        "generated_testcode": "assert count_no(2,10,20) == 11\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n-m+1): \n        j = 0\n        k = i \n        while (j < m and A[k] == B[j]): \n            j += 1\n            k += 1\n        if j == m: \n            return True\n    return False\n    \n# Driver code\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \nB = [5, 6, 7] \nn = len(A) \nm = len(B) \nif is_Sub_Array(A,B,n,m): \n    print(\"B is subarray of A\") \nelse: \n    print(\"B is not subarray of A\") ",
        "generated_testcode": "assert is_Sub_Array([1,2,3,4,5,6,7,8],[1,2,3,4],5,3) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    factorial = 1 \n    for i in range(1, n+1): \n        factorial = factorial * i \n    return factorial % 10 \n\n# Test the function with example \nn = 10\nprint(\"Factorial of\", n, \"is\", last_Digit_Factorial(n)) ",
        "generated_testcode": "assert last_Digit_Factorial(5) == 2\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Interleaves two lists of the same length and returns a new list\n    \"\"\"\n    if len(list1) != len(list2):\n        return \"Error: Lists are not of the same length\"\n    else:\n        for i in range(len(list1)):\n            list3.append(list1[i])\n            list3.append(list2[i])\n        return list3\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8, 9]\nlist3 = []\nprint(interleave_lists(list1, list2, list3)) # Expected output: [1, 6, 2, 7, 3, 8, 4, 9, 5]\n\n\n# Define a function to check if a number is prime\ndef is_prime(n):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(5)) # Expected output: True\nprint(is_prime(10)) # Expected output: False ",
        "generated_testcode": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,9]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two tuples as input and returns the dissimilar elements between them.\n    \"\"\"\n    # check if the length of both the tuples is same or not\n    if len(test_tup1) != len(test_tup2):\n        print(\"Both tuples should be of same length\")\n        return\n    # create an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    # iterate over the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar_elements.append((test_tup1[i], test_tup2[i]))\n    return dissimilar_elements\n\n# Test the function with example\ntest_tup1 = (1, 2, 3, 4, 5, 6)\ntest_tup2 = (2, 1, 4, 6, 5, 7)\nprint(find_dissimilar(test_tup1, test_tup2)) # Output: [(1, 2), (3, 4), (5, 6), (6, 7)]\n\n# Test the function with example\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (2, 1, 4, 6, 5, 7)\nprint(find_dissimilar(test",
        "generated_testcode": "assert find_dissimilar(('abc', 'def') == ('abc', 'def')\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    lst = [] \n    for i in test_tuple: \n        if isinstance(i, tuple): \n            even_ele(i, even_fnc) \n        else: \n            if even_fnc(i): \n                lst.append(i) \n    return lst \n\ndef is_even(num): \n    return num%2 == 0\n\n#testing \ntest_tuple = (1, 2, (3, 4, 5, (6, 7, 8, (9, 10, 11), 12), 13, 14) )\nprint(even_ele(test_tuple, is_even)) ",
        "generated_testcode": "",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (b*s) + (b*s) + (b*s) + (s*s)\n\nbase = float(input(\"Enter the base of the square pyramid: \"))\nslat = float(input(\"Enter the slant height of the square pyramid: \"))\n\nheight = float(input(\"Enter the height of the square pyramid: \"))\n\nsa = surface_Area(base, slat)\ntotal_sa = sa + (base*height)\n\nprint(\"The surface area of the square pyramid is: \", total_sa) ",
        "generated_testcode": "assert surface_Area(5, 10) == 140\n\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if not dict1:\n        return True\n    else:\n        return False\n\n# Example usage:\ndict1 = {}\nprint(my_dict(dict1))  # Output: True\n\ndict1 = {'name': 'John', 'age': 30}\nprint(my_dict(dict1))  # Output: False ",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num <= 1:\n        return 1\n    catalan = [0]*(num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2,num+1):\n        for j in range(i):\n            catalan[i] += catalan[j]*catalan[i-j-1]\n    return catalan[num]\n\n# Test the function\nfor i in range(10):\n    print(catalan_number(i)) ",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    # define regex pattern for adverbs\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # create a list to store the results\n    adverbs = []\n    # iterate through the matches and append each match with its position to the list\n    for match in matches:\n        adverb = (match, text.find(match))\n        adverbs.append(adverb)\n    return adverbs\n\n# test the function with a sample sentence\nsentence = \"She walked quickly to the market and bought some groceries enthusiastically but didn't have time to think about it.\"\nprint(find_adverbs(sentence)) ",
        "generated_testcode": "assert find_adverbs(\"He ran quickly and carefully to the market\") == [(4, \"quickly\"), (6, \"carefully\")]\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    heap = []\n    for item in items:\n        heapq.heappush(heap, -item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-heapq.heappop(heap) for _ in range(len(heap)]\n\n\n# Time Complexity: O(nlogn)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert expensive_items([[1,2,3,4,5,6,7,8,9,10], 3) == [10,9,8]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # slicing the first part of the array  \n    first_part = a[:k]  \n    # slicing the second part of the array  \n    second_part = a[k:]  \n    # concatenating the two parts  \n    return second_part + first_part ",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8],5,2) == [3,4,5,6,7,8,1,2]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n\n#test the function\nlist1 = [1,2,3,4,5,6,7,8]\nprint(list_tuple(list1)) #output: (1,2,3,4,5,6,7,8)\n\n\n#Write a function to convert a tuple to a dictionary. \ndef tuple_dict(tuplex):\n    return dict(tuplex)\n\n#test the function\ntuple1 = ((\"a\",1),(\"b\",2),(\"c\",3))\nprint(tuple_dict(tuple1)) #output: {'a': 1, 'b': 2, 'c': 3} ",
        "generated_testcode": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)\n\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)\n\n# Example usage:\n# print(big_diff([10, 3, 5, 2, 6, 1, 9, 12, -5])) # Output: 17\n# print(big_diff([7, 2, 10, 1, 12, 11, 15, 6])) # Output: 14 ",
        "generated_testcode": "assert big_diff([10, 2, 5, 7, 1, 3, 0, 9]) == 9\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function finds the perfect squares between two given numbers\n    \"\"\"\n    squares = []\n    for i in range(a, b + 1):\n        if (i ** (1 / 2)).is_integer():\n            squares.append(i)\n    return squares\n\n\n# Test the function\na = 1\nb = 20\nprint(perfect_squares(a, b)) ",
        "generated_testcode": "assert perfect_squares(1, 20) == [1, 4, 9, 16]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    rect_x = x * math.cos(y)\n    rect_y = x * math.sin(y)\n    return (rect_x, rect_y)\n\n# Test the function\nresult = polar_rect(5, math.radians(30))\nprint(result)\n\n# Output: (3.16222777666016837953, 1.9848077643211656823) ",
        "generated_testcode": "assert polar_rect(1,0) == (1,0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Swapping first and last element of a list using Python\n    if len(newList)>1:\n        firstElement = newList[0] \n        newList[0] = newList[-1] \n        newList[-1] = firstElement \n    return newList\n\n# Test the function with an example\nmyList = [10, 20, 30, 40, 50, 60] \nprint(\"Original List: \", myList) \nprint(\"Swapping first and last elements: \", swap_List(myList)) ",
        "generated_testcode": "assert swap_List([1, 2, 3, 4, 5, 6]) == [6, 2, 3, 4, 5, 1]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    for i in range(k): \n        res = res * (n-i)/(i+1) \n    return res \ndef sum_of_prod_binomial_coefficients(n): \n    sum = 0\n    for k in range(n+1): \n        sum += binomial_Coeff(2*n, k) \n    return sum \nn = 10\nprint(\"Sum of product of binomial coefficients for n =\", n, \"is\", sum_of_prod_binomial_coefficients(n)) ",
        "generated_testcode": "assert binomial_Coeff(5,2) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    temp = ip.split('.')\n    res = ''\n    for i in temp:\n        if i == '0':\n            continue\n        res += '.'+i\n    return res[1:]\n\n# test the function\nprint(removezero_ip('255.0.0.0.0'))  # output: '25.0.0.0.0'\nprint(removezero_ip('0.0.0.168.2555.0'))  # output: '0.168.2555.0'\nprint(removezero_ip('0.0.168.2555.001'))  # output: '0.168.2555.1'\nprint(removezero_ip('0.0.0.0.0'))  # output: '' ",
        "generated_testcode": "assert removezero_ip(\"000.0255.000.0100\") == \"0.25.0.100\"\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum - odd_sum\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(diff_even_odd(list1))  # Output: 15\n\n\n# Using lambda function\ndiff_even_odd = lambda list1: sum(filter(lambda x: x % 2 == 0, list1) ) - sum(filter(lambda x: x % 2 != 0, list1) )\nprint(diff_even_odd(list1))  # Output: 15 ",
        "generated_testcode": "assert diff_even_odd([1,2,3,4,5,6,7,8,9]) == 2\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(str1)): \n        if str1[i]!=str2[i]: \n            count+=1\n            j=i+1\n            while j<len(str1): \n                if str1[j]==str2[i]: \n                    str1=str1[:i]+str1[j]+str1[i+1:j]+str1[i]+str1[j+1:]\n                    count+=1\n                    break\n                j+=1\n    return count\n\n#Example:\n#Input: str1=\"10101\" str2=\"01110\"\n#Output: 2\n\n#Input: str1=\"0001010011\" str2=\"110101010\"\n#Output: 2 \n\n#Explanation: Two swaps are required to convert \"001010011\" to \"110101010\". The swaps are: \n#swap positions 2 and 5 : \"001011010\" \n#swap positions 4 and 6 : \"001101010\" \n\n#The final string is obtained after swapping the characters at positions 2 and 5 and then 4 and 6. ",
        "generated_testcode": "assert (min_Swaps(\"010011010101\",\"10101010100\")==2)\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return len(tuple_list)\n\n# Test the function with sample input\nprint(tuple_size((1, 2, 3, 4, 5, 6, 7)) == 5) # True\nprint(tuple_size((\"python\") == 6) # True\nprint(tuple_size((\"hello world\") == 11) # True\nprint(tuple_size((\"apple\") == 5) # False ",
        "generated_testcode": "assert tuple_size((1,2,3,4,5)) == 3\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    if m == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(m, k // 2)\n    j = k - i\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, m - i, n, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], m, n - j, k)\n\n\n\n# test the function\narr1 = [1, 3, 5, 7, 9, 11]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 4\nprint(find_kth(arr1, arr2, m, n, k))\n",
        "generated_testcode": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8, 9], 3, 4, 3) == 6\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    if sum == number:\n        return True\n    else:\n        return False\n\n# test the function\nprint(armstrong_number(153)) # True\nprint(armstrong_number(200)) # False ",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\n#test the function\nprint(sum_average(5)) ",
        "generated_testcode": "assert sum_average(5) == (15, 3.0)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 : \n        return False\n    else : \n        return True\n\n# Driver code to test the function\nn = 10\nif is_Even(n) : \n    print(n, \"is even\")\nelse : \n    print(n, \"is odd\") ",
        "generated_testcode": "assert is_Even(10) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "       self.a = a \n        self.b = b \n  \n    def __repr__(self): \n        return f'({self.a}, {self.b})'\n  \ndef find_longest_chain(pairs): \n    pairs.sort(key=lambda x: x.b)\n    pairs.sort(key=lambda x: x.a)\n    longest_chain = []\n    for pair in pairs:\n        if not longest_chain:\n            longest_chain.append(pair)\n        elif pair.a == longest_chain[-1].b:\n            longest_chain.append(pair)\n        elif pair.a != longest_chain[-1].b:\n            continue\n        elif pair.a == longest_chain[0].a:\n            longest_chain.insert(0, pair)\n        elif pair.b == longest_chain[-1].b:\n            longest_chain.append(pair)\n        elif pair.a == longest_chain[0].a:\n            longest_chain.insert(0, pair)\n        else:\n            continue\n    return longest_chain\n  \ndef main():\n    pairs = [Pair(1, 2), Pair(2, 3), Pair(3, 4), Pair(4, 5), Pair(5, 6), Pair(6, 7), Pair(7, 8), Pair(8, 10), Pair(1, 9), Pair(10, 11)]\n   ",
        "generated_testcode": "assert longest_chain([(1,2), (2,3), (3,4), (4,5), (5,6)]) == [1, 2, 3, 4, 5, 6]\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n\nprint(first_repeated_char(\"abcdabcd\")) # Output: 'a'\nprint(first_repeated_char(\"abdfghtyujiklo\")) # Output: None ",
        "generated_testcode": "assert first_repeated_char(\"hello\") == \"l\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    ludic = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        ludic[i] = [i]\n    for i in range(2, n+1):\n        for j in range(i+1, n+1):\n            if j % i == 0:\n                for k in range(i, n+1, i):\n                    ludic[k].append(i)\n    return [i for i in range(2, n+1) if len(ludic[i]) == len(set(ludic[i]))]\n\n\n# Test the function with n = 20\nprint(get_ludic(20))\n\n\n# Output: [1, 2, 3, 4, 6, 9, 12, 15, 18, 21, 24, 27, 35, 42, 54, 63, 75, 81, 92, 93] ",
        "generated_testcode": "assert get_ludic(1) == []\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    words = s.split()\n    return \" \".join(words[::-1])\n\n# Example usage:\ns = \"I love Python\"\nprint(reverse_words(s)) # Output: \"Python love I\"\n\n\n# Write a function to reverse words in a given string in place.\ndef reverse_words_in_place(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)\n# Example usage:\ns = \"I love Python\"\nprint(reverse_words_in_place(s)) # Output: \"Python love I\" ",
        "generated_testcode": "assert reverse_words(\"hello world\") == \"world hello\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# Test the function with an example\nprint(prime_num(7)) # Output: True\nprint(prime_num(12)) # Output: False ",
        "generated_testcode": "assert prime_num(2) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 22/7\n    radian = degree*(pi/180)\n    return radian\n\n# test the function\n# should return 3.14\nprint(radian_degree(180))\n\n\n# should return 1.04\nprint(radian_degree(60)) ",
        "generated_testcode": "assert radian_degree(180) == math.pi\n\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n\ndef find_literals_location(text, pattern):\n    import re\n    match = re.search(pattern, text)\n    if match:\n        return match.span()\n    else:\n        return None\n\n# Test cases\ntext = \"Hello, how are you today? I hope everything is well.\"\npattern = r\"how\"\nprint(find_literals(text, pattern))  # Output: \"how\"\nprint(find_literals_location(text, pattern))  # Output: (6, 9) ",
        "generated_testcode": "assert find_literals(\"Hello, World!\", \"World\") == True, 7\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    bell = [[0 for j in range(n + 1)] for i in range(n + 1)] \n          \n    bell[0][0] = 1\n    for i in range(n + 1): \n        bell[i][0] = bell[i - 1][i - 1] \n        for j in range(1, i + 1): \n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1] \n              \n    return bell[n][0] \n  \nn = 5\nprint(\"The bell number at position\", n, \"is\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    minimum = min(A,B)\n    for i in range(1,N):\n        A,B = B,A+B\n    return minimum\n\n# test the function\nprint(floor_Min(2,5,2) # 2\nprint(floor_Min(3,5,2) # 3\nprint(floor_Min(1,4,7) # 1\nprint(floor_Min(7,3,10) # 3 ",
        "generated_testcode": "assert floor_Min(10, 15, 3) == 10\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(list1)<k:\n        return list1\n    else:\n        list1.pop(k-1)\n        return list1\n\n#test the function\nL = [1, 2, 3, 4, 5, 6, 7]\nk = 2\nprint(remove_kth_element(L, k)) # [1, 2, 4, 5, 6, 7]\n\n\n# If k is greater than the length of the list, the function should return the original list. ",
        "generated_testcode": "assert remove_kth_element([1, 2, 3, 4, 5, 6], 2) == [1, 2, 4, 5, 6]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    This function will find the maximum value of nth column from the given list of tuples.\n    \"\"\"\n    max_value = test_list[0][N]\n    for i in test_list:\n        if i[N] > max_value:\n            max_value = i[N]\n    return max_value\n\n#Example:\n# test_list = [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]\n# print(max_of_nth(test_list, 1))  # Output: 8  # 2nd column maximum value is 8 ",
        "generated_testcode": "",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    first_ele = []  \n    last_ele = []  \n    for i in lst:  \n        first_ele.append(i[0])  \n        last_ele.append(i[-1])  \n    return first_ele,last_ele \n\n#test the function  \nlst = [[1,2,3],[4,5,6],[7,8,9,10],[11,12,13,14,15]]  \nprint(merge(lst)) # ([1, 4, 7, 11], [3, 6, 10, 15]) ",
        "generated_testcode": "assert merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == ([1, 7], [2, 3], [4, 5, 6], [8, 9])\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_val = max(test_list, key=lambda x: x[1])\n    return max_val[0]\n\n# Test the function\nrecords = [('anna', 15), ('john', 20), ('james', 17), ('lisa', 25)]\nprint(maximum_value(records)) # Output: 'lisa' ",
        "generated_testcode": "",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n        print(cum_sum, end=\" \")\n        \n# Test the function with a sample tuple\ntest_list = (1, 2, 3, 4, 5, 6, 7)\nprint(cummulative_sum(test_list)) ",
        "generated_testcode": "assert cummulative_sum((1,2,3,4,5,6)) == (1,3,6,10,15)\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for i in nums:\n        for j in i:\n            total += j\n            count += 1\n    return total/count\n\n# Test the function with a tuple of tuples\nnumbers = ((1,2,3),(4,5,6,7),(8,9,10,11,12))\nprint(average_tuple(numbers)) # Output: 6.0 ",
        "generated_testcode": "assert average_tuple(((1, 2, 3, 4, 5, 6, 7, 8, 9) == 5.0\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n\n#Example:\n#Input: tuple_modulo((12, 15, 19), (4, 6, 8))\n#Output: (0, 3, 3)\n#Explanation: 12 % 4 = 0, 15 % 6 = 3, 19 % 8 = 3\nprint(tuple_modulo((12, 15, 19), (4, 6, 8)) #(0, 3, 3) ",
        "generated_testcode": "assert tuple_modulo((10, 20, 30), (3, 4, 5)) == (1, 2, 3)\n\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a == 0 and b == 0: \n        return 0\n    if a < 0 or b < 0: \n        return -1\n    if d < 0: \n        return -1\n    if (a + b) % d != 0: \n        return -1\n    return (a + b) // d\n\n# test the function\nprint(min_Jumps(1, 1, 2))  # output: 1\nprint(min_Jumps(2, 2, 3))  # output: 2\nprint(min_Jumps(1, 3, 2))  # output: -1\nprint(min_Jumps(4, 0, 2))  # output: 2\nprint(min_Jumps(4, 2, 0))  # output: -1 ",
        "generated_testcode": "assert min_Jumps(1, 1, 5) == 2\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = list(map(lambda x,y: x/y,nums1,nums2))\n    return result\n\n# Example usage:\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8]\nprint(div_list(nums1,nums2)) # Output: [0.5, 0.5, 0.5]\n\n# Since the two lists have different lengths, it will stop dividing when it reaches the end of the shortest list. ",
        "generated_testcode": "",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    num_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n    return num_str\n\nprint(move_num(\"Hello world 123\")) # output: \"123\"\nprint(move_num(\"abc 456 def 789\")) # output: \"456789\"\nprint(move_num(\"Python 123 is awesome\")) # output: \"123\" ",
        "generated_testcode": "assert move_num(\"a1b2c3\") == \"123\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a.sort()\n    largest = []\n    for i in range(n):\n        j = i + 1\n        while j < n:\n            if a[j] % a[i] == 0:\n                largest.append(a[i])\n                if a[i] == 1:\n                    return len(largest) + 1\n                break\n            j += 1\n        if j == n:\n            largest.append(a[i])\n    return len(largest)\n\n\n\n# Test\na = [2, 4, 8, 16, 32, 7, 9, 48, 12, 6]\nn = len(a)\nprint(largest_subset(a, n))  # Output: 5 [2, 4, 8, 16, 32, 48, 12]\na = [3, 7, 9, 8, 4, 2, 9, 6]\nn = len(a)\nprint(largest_subset(a, n))  # Output: 3 [9, 18, 72]\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(a)\nprint(largest_subset(a, n))  # Output: 3 [1, 2, 4, 8]\na = [1, 3, ",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 6, 8, 9, 12, 16, 18]) == [1, 2, 4, 8, 16]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty list to store the result\n    result = []\n    # loop through the given list\n    for string in test_list:\n        # create an empty string to store the result for each string\n        new_string = \"\"\n        # loop through the characters in the string\n        for char in string:\n            # check if the character is numeric\n            if char.isdigit():\n                # increment the numeric value and add it to the new string\n                new_string += str(int(char) + K)\n            else:\n                # add the non-numeric characters as is\n                new_string += char\n        # add the new string to the result list\n        result.append(new_string)\n    return result\n\n# test the function with an example\ntest_list = [\"a1b2c3\", \"x7y8z9\", \"r8t5u2\"]\nK = 2\nprint(increment_numerics(test_list, K)) # Output: ['a3b4c5', 'x9z10', 'r10t7u4'] ",
        "generated_testcode": "",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = j = k = 0\n    median = [0]\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n\n        if k == n // 2:\n            return median[-1]\n\n    while i < n:\n        median.append(arr1[i])\n        i += 1\n        k += 1\n        if k == n // 2:\n            return median[-1]\n\n\n    while j < n:\n        median.append(arr2[j])\n        j += 1\n        k += 1\n        if k == n // 2:\n            return median[-1]\n\n    return median[-1]\n\n\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(\"Median of the two arrays is:\", get_median(arr1, arr2, n))\n",
        "generated_testcode": "assert get_median([1, 3, 5, 7], [2, 4, 6], 3) == 4\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(map(lambda x: x**n,nums)\n\n\n#Example:\n# nums = [2,3,4]\n# n = 3\n# nth_nums(nums,n)\n# Output: [8,27,64] ",
        "generated_testcode": "assert nth_nums([2,3,4,5],2) == [4,9,25]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    '''\n    This function takes a string as input and returns True if all the letters in the string are upper case, else returns False\n    '''\n    return string.isupper()\n\n#Test the function with sample test cases\nprint(is_upper('ABCDEF')) #True\nprint(is_upper('Hello World')) #False\nprint(is_upper('PYTHON')) #True\nprint(is_upper('A3B2C1D1')) #True\nprint(is_upper('Hello World123')) #False ",
        "generated_testcode": "assert is_upper(\"hello\") == False\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    size = len(newList) \n    if size < 2:\n        return newList\n    else:\n        # Swap first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList\n        \n# Test the function with a list\nmyList = [1, 2, 3, 4, 5, 6] \nprint(swap_List(myList)) ",
        "generated_testcode": "assert swap_List([1,2,3,4,5,6]) == [6,2,3,4,5,1]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = r*r*3.14159/4 \n    return area \n\ndef largest_triangle(r): \n    height = r * 2 * 3.14159/3\n    base = r * 2\n    largest_triangle_area = 0.5 * base * height\n    return largest_triangle_area\n\ndef semicircle_area(r): \n    return 2 * 3.14159 * r * r / 2\n\ndef main(): \n    r = float(input(\"Enter the radius of the semicircle: \"))\n    triangle_area_max = triangle_area(r)\n    largest_triangle_area = largest_triangle(r)\n    circle_area = 3.14159 * r * r\n    semicircle_area_val = semicircle_area(r)\n    \n    if largest_triangle_area <= semicircle_area_val: \n        print(\"Largest triangle area that can be inscribed in semicircle:\", largest_triangle_area) \n    else: \n        print(\"Largest triangle area that can be inscribed in semicircle:\", semicircle_area_val) \n\nif __name__ == \"__main__\": \n    main() ",
        "generated_testcode": "assert triangle_area(3) == 6.0\n\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return end+1\n# Driver code\narr = [1,2,3,4,5,6,7,9,10]\nn = len(arr)\nprint(\"The smallest missing number is \",find_First_Missing(arr,1,n)) ",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,5) == 6\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    return string.replace(\" \", \"%20\")\n\n\n# Test Cases\nprint(replace_spaces(\"Mr John Smith\")) # Mr%20John%20Smith\nprint(replace_spaces(\"Hello  World!\")) # Hello%20%20World!\nprint(replace_spaces(\"Hello  World  !\")) # Hello%20%20World%20! ",
        "generated_testcode": "assert replace_spaces(\"hello world\") == \"hello%20world\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even=[] \n    odd=[] \n    for i in list: \n        if i%2==0: \n            even.append(i) \n        else: \n            odd.append(i) \n    return even,odd \n    \n#Testing the function with a sample list \nList = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13] \neven, odd = Split(List) \nprint(\"Even numbers in the list: \", even) \nprint(\"Odd numbers in the list: \", odd) ",
        "generated_testcode": "assert Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\n\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    x,y = ele \n    adj = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]\n    return adj\n\n# Function to check if the given coordinate is a valid cell in the matrix\ndef isValid(x,y,mat): \n    return (x >= 0 and y >= 0 and x < len(mat) and y < len(mat[0]) \n\n\n# Function to check if the given coordinate is already visited or not\ndef isVisited(ele,visited): \n    return ele in visited \n\n# Function to perform DFS on the given coordinate\ndef DFS(x,y,mat,visited): \n    # mark the current coordinate as visited\n    visited.add((x,y)) \n    # check for all the adjacent cells \n    for i in adjac((x,y)): \n        if (isValid(i[0],i[1],mat) and mat[i[0]][i[1]] == 1 and not isVisited(i,visited)): \n            DFS(i[0],i[1],visited) \n\n# Function to return the number of islands in a given matrix \ndef countIslands(mat): \n    islands = 0 \n    visited = set() \n    for i in range(len(mat)): \n        for j in range(len(mat[0]): \n            if mat[i][j] == 1 and not isVisited((i,",
        "generated_testcode": "assert adjac((1,1)) == [(0,1),(1,0),(2,1),(1,2),(1,0)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'\\s', '_', text)\n\n\n# Test the function with sample input\nprint(replace_spaces(\"helloworld world\")) # Output: \"helloworld_world\"\nprint(replace_spaces(\"hello  world\")) # Output: \"hello__world\"\nprint(replace_spaces(\"  hello  world  \")) # Output: \"__hello__world__\"\nprint(replace_spaces(\"   hello  world  \")) # Output: \"__hello__world__\"\n\n\n# Test the function with different input types\nprint(replace_spaces(\"\")) # Output: \"\"\nprint(replace_spaces(\" \")) # Output: \"\"\nprint(replace_spaces(\"abc\")) # Output: \"abc\"\nprint(replace_spaces(\"Hello, World!\")) # Output: \"Hello,_World!\" ",
        "generated_testcode": "assert replace_spaces(\"I love Python\") == \"I_love_Python\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Given a list of integers, moves all zeroes in the list to the end while maintaining the relative order of the non-zero elements.\n\n    \"\"\"\n    # create an empty list to store non-zero elements\n    non_zero_list = []\n    # iterate over the list\n    for num in num_list:\n        # if the element is not zero, append it to the non-zero list\n        if num != 0:\n            non_zero_list.append(num)\n    # calculate the number of zeroes to add to the end of the list\n    zero_count = len(num_list) - len(non_zero_list)\n    # add the zeroes to the end of the non-zero list\n    for i in range(zero_count):\n        non_zero_list.append(0)\n    return non_zero_list\n\n# Test the function with a sample input\nprint(move_zero([1, 0, 2, 0, 4, 3, 0, 6, 5, 0])) #[1, 2, 4, 3, 6, 5, 0, 0, 0] ",
        "generated_testcode": "assert move_zero([0, 3, 1, 0, 4, 0, 5]) == [3, 1, 4, 5, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            res += (arr[i]^arr[j])\n    return res\n\n#Driver Code\narr = [1,2,3,4,5,6]\nn = len(arr)\nprint(pair_OR_Sum(arr,n)) ",
        "generated_testcode": "assert pair_OR_Sum([1, 2, 3, 4, 5], 4) == 18\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    while i < n:\n        sum += (i*2)**4\n        i += 1\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = even_Power_Sum(n)\nprint(\"The sum of fourth power of first\", n, \"even numbers is\", result) ",
        "generated_testcode": "assert even_Power_Sum(4) == 1000000\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    def heappushpop(heap, item):\n        heapq.heappush(heap, item)\n        return heapq.heappop(heap)\n\n    return [heappop(heapq.heapify(iterable)]\n\n\n# Write a function to pop off the smallest values from a heap until it is empty.\ndef empty_heap(heap):\n    while heap:\n        yield heapq.heappop(heap)\n\n\n# Use the two functions to sort a list in ascending order\ndef heap_sort(iterable):\n    heap = list(iterable)\n    heapq.heapify(heap)\n    return list(empty_heap(heap))\n\n\n# Use the two functions to sort a list in descending order\ndef heap_sort_descending(iterable):\n    heap = [(i*-1, i) for i in iterable]\n    heapq.heapify(heap)\n    return [i*-1 for _i, i in empty_heap(heap)]\n\n\n# Use the two functions to sort a list in descending order using a custom key function\ndef heap_sort_descending_by_key(iterable, key=lambda x: x):\n    heap = [(key(i), i) for i in iterable]\n    heapq.heapify(heap)\n    return [i for _k, i in empty_heap(heap)]\n\n\n# Use the two functions to sort a",
        "generated_testcode": "assert heap_sort([4, 2, 5, 1, 3, 0]) == [0, 1, 2, 3, 4, 5]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    d = b**2 - 4*a*c \n    if d < 0: \n        return False\n    else: \n        root1 = (-b + d**0.5)/(2*a) \n        root2 = (-b - d**0.5)/(2*a) \n        if root1 != 0 and root2 != 0: \n            return (1/root1 == root2 or 1/root2 == root1) \n        else: \n            return False \n  \na = int(input(\"Enter coefficient of x^2: \") \nb = int(input(\"Enter coefficient of x: \") \nc = int(input(\"Enter constant term: \") \nif Check_Solution(a,b,c): \n    print(\"The roots are reciprocal of each other\") \nelse: \n    print(\"The roots are not reciprocal of each other\") ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if actual_cost == sale_amount: \n        print(\"No profit and no loss\") \n    elif actual_cost > sale_amount: \n        print(\"Loss\") \n    else: \n        print(\"Profit\") \nactual_cost = int(input(\"Enter the actual cost: \")) \nsale_amount = int(input(\"Enter the sale amount: \")) \nnoprofit_noloss(actual_cost,sale_amount) ",
        "generated_testcode": "assert noprofit_noloss(1000, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    wind_chill_index = 13.12 + 0.6215 * t - 11.39 * v**0.16 + 0.486 * t * v**0.16\n    return wind_chill_index\n\n# Use the function to calculate wind chill index for different values of temperature and wind speed.\n# Test the function with values of temperature 0 degree Celsius and wind speed 5 km/h, 15 km/h, 30 km/h and 60 km/h.\nprint(wind_chill(5,0))\nprint(wind_chill(15,0))\nprint(wind_chill(30,0))\nprint(wind_chill(60,0))\n\n# Test the function with temperature -10 degree Celsius and wind speed 5 km/h, 15 km/h, 30 km/h and 60 km/h.\nprint(wind_chill(5,-10))\nprint(wind_chill(15,-10))\nprint(wind_chill(30,-10))\nprint(wind_chill(60,-10))\n\n# Test the function with temperature 10 degree Celsius and wind speed 5 km/h, 15 km/h, 30 km/h and 60 km/h.\nprint(wind_chill(5,10))\nprint(wind_chill(15,1",
        "generated_testcode": "assert wind_chill(5, 10) == 10.0\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# test the function with sample data\nsample_names = [\"John\", \"Alice\", \"Bob\", \"Mike\", \"alice\", \"sara\", \"Alex\", \"Oliver\", \"Jack\"]\nprint(sample_nam(sample_names)) # Output: 11 ",
        "generated_testcode": "",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = \"\"\n    open_bracket_count = 0\n    for item in items:\n        if item == \"(\":\n            open_bracket_count += 1\n        elif item == \")\":\n            open_bracket_count -= 1\n        elif open_bracket_count == 0:\n            result += item\n    return result\n\ndef remove_parentheses(s: str) -> str:\n    return remove_parenthesis(s)\n\n# Test cases\nprint(remove_parentheses(\"a(bc)de\")) # \"ade\"\nprint(remove_parentheses(\"(bcdef)g(hij)kl\")) # \"ghkl\"\nprint(remove_parentheses(\"abc(def)g(hij)(kl\")) # \"abcghkl\"\nprint(remove_parentheses(\"\")) # \"\"\nprint(remove_parentheses(\"()()()\")) # \"\"\nprint(remove_parentheses(\"(hello)\")) # \"hello\" ",
        "generated_testcode": "assert remove_parenthesis(\"hello (world)\") == \"helloworld\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(1,n): \n        nonagonal = (i*(i+1)*(2*i-1))//2 \n        if nonagonal == n: \n            return True\n    return False \n\ndef find_nth_nonagonal(n): \n    nonagonal = 0 \n    count = 0 \n    while True: \n        count += 1 \n        if is_nonagonal(nonagonal): \n            if count == n: \n                return nonagonal \n        else: \n            nonagonal += 1 ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i]) == 1:\n            new_list.append(test_list[i])\n    return tuple(new_list)\n\n# Test the function with sample data\ntest_list = ((1,2,3),(4,5,6),(1,2,3),(7,8,9),(7,8,9),(11,12,13))\nprint(remove_similar_row(test_list)) # Output: ((11, 12, 13), (4, 5, 6), (7, 8, 9)) ",
        "generated_testcode": "",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = r\"\\b\\w*z\\w*\\b\"\n    result = re.search(pattern, text)\n    return result != None\n\n# Test the function\nprint(text_match_wordz_middle(\"hazard\")) # True\nprint(text_match_wordz_middle(\"hazardous\")) # True\nprint(text_match_wordz_middle(\"rhizome\")) # True\nprint(text_match_wordz_middle(\"sheep\")) # False\nprint(text_match_wordz_middle(\"wizard\")) # True\nprint(text_match_wordz_middle(\"tactics\")) # False\nprint(text_match_wordz_middle(\"fizzled\")) # True\nprint(text_match_wordz_middle(\"bazzle\")) # True ",
        "generated_testcode": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\") == True\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if k >= len(input):\n        return input \n    else:\n        left = 0\n        right = k - 1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return input \n    \n# Example Usage: \narr = [1, 2, 3, 4, 5, 6, 7] \nk = 3\nprint(reverse_Array_Upto_K(arr, k)) # Output: [3, 2, 1, 4, 5, 6, 7] ",
        "generated_testcode": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8], 2) == [2, 1, 4, 3, 6, 5, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize a variable to store the product \n    product = 1 \n    for i in val: \n        # multiply the value with the product variable \n        product *= i \n    return product ",
        "generated_testcode": "assert get_product((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 36 # Testing for k = 3\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return N//K * (N//K) * (N//K)\n    \n#Example:\n#Input:\n#N = 10, K = 3\n#Output:\n#4\n#Explanation:\n#There are 4 cubes of size 3x3x3 in a cube of size 10x10x10. ",
        "generated_testcode": "assert No_of_cubes(10, 2) == 6\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    temp = \"\"\n    for char in text:\n        if char.isupper() and temp != \"\":\n            result.append(temp)\n            temp = \"\"\n        temp += char\n    result.append(temp)\n    return result\n\n\nprint(split_upperstring(\"HelloWorld\")) # ['Hello', 'World']\nprint(split_upperstring(\"IAmADeveloper\")) # ['I', 'Am', 'A', 'Developer']\nprint(split_upperstring(\"IAmADOg\")) # ['I', 'Am', 'A', 'DOg'] ",
        "generated_testcode": "assert split_upperstring(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(lst)-1):\n        if i%2 == 0:\n            lst[i],lst[i+1] = lst[i+1],lst[i]\n    return lst\n\nlst = [1,2,3,4,5,6,7,8,9]\nprint(exchange_elements(lst)) # [2, 1, 4, 3, 6, 5, 8, 7, 9] ",
        "generated_testcode": "assert exchange_elements([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 1, 4, 3, 6, 5, 8]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < n:                                                                                                                                                                                                             \n        return sum(nums[m:n+1])                                                                                                                                                                                           \n    else:                                                                                                                                                                                                              \n        return sum(nums[n:m+1]) \n\n#Example:\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nm = 1\nn = 3\nprint(sum_Range_list(nums, m, n)) # Output: 9 (2 + 3 + 4) ",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 3) == 9\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n != m:\n        return False\n    else:\n        arr1.sort()\n        arr2.sort()\n        for i in range(n):\n            if arr1[i] != arr2[i]:\n                return False\n    return True\n\n# Driver code\narr1 = [1,2,3,4,5,6]\narr2 = [1,2,3,4,5,6]\nn = len(arr1)\nm = len(arr2)\nif are_Equal(arr1,arr2,n,m):\n    print(\"Both arrays are equal\")\nelse:\n    print(\"Both arrays are not equal\") ",
        "generated_testcode": "assert are_Equal([1,2,3,4,5],[1,2,3,4,5],4,5) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_tup1) <= len(test_tup2):\n        for i in test_tup1:\n            if i not in test_tup2:\n                return False\n        return True\n    else:\n        return False\n\n#Example usage:\ntup1 = (1, 2, 3, 4)\ntup2 = (1, 2, 3, 4, 5, 6)\nif check_subset(tup1, tup2):\n    print(\"tup1 is a subset of tup2\")\nelse:\n    print(\"tup1 is not a subset of tup2\") ",
        "generated_testcode": "assert check_subset((1, 2, 3), (1, 2, 3, 4)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list[0])):\n        sub_list = []\n        for j in range(len(test_list)):\n            sub_list.append(test_list[j][i])\n        result.append(tuple(sub_list))\n    return result\n\n#Example\n# Input: [(1,2,3), (4,5,6), (7,8,9)]\n# Output: [(1,4,7), (2,5,8), (3,6,9)]\n# Explanation: The tuple at index 0 represents the first column of the matrix, (1,4,7). ",
        "generated_testcode": "",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    The function takes a list of key-value pairs and groups them into a dictionary of lists.\n    \"\"\"\n    from collections import defaultdict\n    \n    d = defaultdict(list)\n    for key, value in l:\n        d[key].append(value)\n    return d\n\n# Test case\nprint(grouping_dictionary([('a', 1), ('b', 2), ('a', 2), ('c', 3), ('a', 1)])) # Output: {'a': [1, 2, 1], 'b': [2], 'c': [3]} ",
        "generated_testcode": "assert grouping_dictionary([('apple', 'red'), ('apple', 'green'), ('banana', 'yellow'), ('apple', 'red')]) == {'apple': ['red', 'green'], 'banana': ['yellow']}\n\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2*(l+b)\n\n#Test the function with examples\nprint(rectangle_perimeter(4, 5)) # Output: 18\nprint(rectangle_perimeter(7, 2)) # Output: 20\nprint(rectangle_perimeter(2.5, 3)) # Output: 11.5\n\nprint(rectangle_perimeter(10, 10)) # Output: 40\n\n\n#Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n#Test the function with examples\nprint(rectangle_area(4, 5)) # Output: 20\nprint(rectangle_area(7, 2)) # Output: 14\nprint(rectangle_area(2.5, 3)) # Output: 7.5\nprint(rectangle_area(10, 10)) # Output: 100\n\n#Write a function to find the square of a number.\ndef square(num):\n    return num**2\n\n#Test the function with examples\nprint(square(3)) # Output: 9\nprint(square(4)) # Output: 16\nprint(square(5)) # Output: 25\nprint(square(2.5)) # Output: 6.25\n\n#Write a function to find the cube of a number.\ndef cube(num):\n    return num**3\n\n#Test the function with examples\nprint",
        "generated_testcode": "assert rectangle_perimeter(4, 5) == 18\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0 \n    for i in range(1, n+1) : \n        sum += i ** 5\n    return sum\n\n#test the function with an example\nprint(fifth_Power_Sum(5)) ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 15125\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    a.sort() \n    b.sort() \n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < n: \n        ans += abs(a[i] - b[j]) \n        i += 1\n        j += 1\n    return ans \n\n# Driver code \na = [1, 2, 3, 5, 8, 9] \nb = [5, 2, 4, 7, 3, 6] \nn = len(a) \nprint(\"Minimum sum of absolute differences is:\", find_Min_Sum(a, b, n))\n\n# Output: Minimum sum of absolute differences is: 5\n# The minimum sum of absolute differences is 5, which is obtained by pairing 1 and 5, 2 and 2, 4, 3 and 7, 5 and 3, 8 and 6, and 9 and 6. ",
        "generated_testcode": "assert find_Min_Sum([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 3) == 1\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initializing variable to store factorial \n    fact = 1\n    # multiplying factorials from 1 to n \n    for i in range(1, n + 1) : \n        fact = fact * i \n    # finding first digit by converting fact into string \n    # and then converting first character of the string to integer \n    return int(str(fact)[0] + \"\") ",
        "generated_testcode": "assert first_Digit(123) == 7\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count_dict = {}\n    for i in list1:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    max_item = list1[0]\n    max_count = 0\n    for key in count_dict:\n        if count_dict[key] > max_count:\n            max_item = key\n            max_count = count_dict[key]\n    return max_item\n\n\n# Test the function with an example\nlist1 = [1, 2, 3, 4, 2, 5, 6, 1, 1, 4, 7, 3, 2, 8, 1, 9, 1]\nprint(max_occurrences(list1)) # Output: 1 ",
        "generated_testcode": "",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in x: \n        if x.count(i) > 1: \n            print(i) \n\n# Test the function with sample inputs: \nx = [1, 2, 3, 4, 5, 1, 2, 6, 3, 7, 2, 8, 9, 4, 5] \nRepeat(x) # Output: 1 2 3 4 5 ",
        "generated_testcode": "assert Repeat([1,2,3,4,5,6,6,7,8,9,9,10]) == [6,9]\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if l1 == r1:\n        return l2,r2\n    elif l2 == r2:\n        return l1,r1\n    else:\n        return l1,r2\n    pass \n\n#example \n#print(find_Points(1,5,2,6)) #(1,6) ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n < 3:\n        return 0\n    arr.sort()\n    return max(arr[-1] + arr[-2] + arr[-3], arr[-1] + arr[0] + arr[1]) ",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sorted_dict = {}\n    sorted_keys = sorted(dict1.keys())\n    for key in sorted_keys:\n        sorted_dict[key] = dict1[key]\n    return sorted_dict\n\ndict1 = {'apple': 2, 'banana': 2, 'cherry': 4, 'grape': 1, 'orange': 3}\nsorted_dict = sorted_dict(dict1)\nprint(sorted_dict) # {'apple': 2, 'banana': 2, 'cherry': 4, 'grape': 1, 'orange': 3} ",
        "generated_testcode": "",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_val = 0\n    for i in range(1, n+1): \n        if (i % x == 0) and (i % y == 0): \n            max_val = i \n    return max_val ",
        "generated_testcode": "assert find_max_val(10, 3, 4) == 2\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    num = 2\n    while(num <= n) : \n        sum += num \n        count += 1\n        num += 2\n    return (sum / count) \n    \n# Driver program to test above function \nn = 20\nprint(\"Average of even numbers till\", n , \"is:\", average_Even(n)) ",
        "generated_testcode": "assert average_Even(2) == 2.0\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        return num_list[1:] + [num_list[0]]\n\n\n# Test the function with an example:\nprint(move_last([1, 2, 3, 4, 5])) # [2, 3, 4, 5, 1]\nprint(move_last([5, 9, 3, 7, 1, 8, 6])) # [9, 3, 7, 1, 8, 6, 5] ",
        "generated_testcode": "assert move_last([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n#test the function\nprint(count_char(\"Hello World\",\"l\"))\nprint(count_char(\"Hello World\",\"o\"))\nprint(count_char(\"Hello World\",\"d\"))\n\n\n#using dictionary comprehension to count occurrence of each character in a string\ndef count_char_dict(string):\n    return {char: string.count(char) for char in string}\nprint(count_char_dict(\"Hello World\")) ",
        "generated_testcode": "assert count_char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for letter in string: \n        if letter in vowels: \n            count += 1\n    return count \n\n# Test the function \nstring = \"hello\"\nvowels = \"aeiou\"\nprint(Check_Vow(string, vowels) )# Output: 2 ",
        "generated_testcode": "assert Check_Vow(\"Hello World\", \"aeiou\") == 3\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(char) != 1: \n        return \"Error: char should have exactly one character.\"\n    if not isinstance(string, str): \n        return \"Error: string should be a string.\"\n    \n    new_string = \"\"\n    prev_char = \"\"\n    for i in string: \n        if i != char or i == char and i != prev_char: \n            new_string += i \n            prev_char = i \n    return new_string \n\n#Test the function with sample inputs \nprint(replace(\"hello world\", \"l\")) #helo word \nprint(replace(\"hello world\", \"o\")) #helo wrd \nprint(replace(\"hello world\", \"h\")) #ello world \nprint(replace(\"hello world\", \"x\")) #Error: char should have exactly one character. \nprint(replace(1234, \"l\")) #Error: string should be a string. \nprint(replace(\"hello world\", \"llo\")) #Error: char should have exactly one character. ",
        "generated_testcode": "assert (replace(\"hello\", \"l\") == \"helo\")\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(\"^([0-9]{1,3}.){3}[0-9]{1,3}$\")\n    if pattern.match(Ip):\n        for i in Ip.split(\".\"):\n            if int(i) > 255:\n                return False\n        return True\n    else:\n        return False \n\n# Testing the function\nIp = \"192.168.0.2555\"\nprint(check_IP(Ip)) # True\n\nIp = \"192.168.0\"\nprint(check_IP(Ip)) # False\nIp = \"192.168.0.256\"\nprint(check_IP(Ip)) # False\nIp = \"0.0.0.0.0\"\nprint(check_IP(Ip)) # True\nIp = \"255.255.255.255\"\nprint(check_IP(Ip)) # True\nIp = \"256.257.0.258\"\nprint(check_IP(Ip)) # False ",
        "generated_testcode": "assert check_IP(\"192.168.0.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return all(nums[i] > nums[i+1] for i in range(len(nums)-1))\n\n# Example usage:\nnums1 = [5, 4, 3, 2, 1]\nprint(decreasing_trend(nums1)) # True\n\nnums2 = [1, 2, 3, 4, 5]\nprint(decreasing_trend(nums2)) # False\nnums3 = [10, 8, 6, 4, 2]\nprint(decreasing_trend(nums3)) # True\nnums4 = [10, 8, 6, 8, 4]\nprint(decreasing_trend(nums4)) # False ",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5, 6]) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    pos = 0\n    while (n != 0): \n        n = n >> 1\n        pos += 1\n    return pos-1\n\ndef set_Right_most_unset_Bit(n): \n    return (1 << get_Pos_Of_Right_most_Set_Bit(n)) ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(15) == 3\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if num1>=num2 and num1>=num3:\n        return num1\n    elif num2>=num1 and num2>=num3:\n        return num2\n    else:\n        return num3\n\n# example usage:\nprint(max_of_three(10,20,5)) # Output: 20\nprint(max_of_three(15,12,18)) # Output: 18 ",
        "generated_testcode": "assert max_of_three(5, 10, 7) == 10\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in list: \n        result = result * 10 + i \n    return result ",
        "generated_testcode": "assert convert([1, 2, 3, 4, 5]) == 12345\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    from collections import OrderedDict\n    words = string.split()\n    distinct_words = OrderedDict((w, True) for w in words)\n    return ' '.join(distinct_words.keys())\n\n\n#Test the function\nstring = \"the quick brown fox jumps over the lazy dog the quick brown dog jumps over the lazy dog\"\nprint(remove_duplicate(string))\n\n\n#Output\n#the quick brown fox jumps over lazy dog ",
        "generated_testcode": "assert remove_duplicate(\"hello world world world hello\") == \"hello world\"\n\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if x + y in range(m,n+1):\n        return 20\n    else:\n        return x + y\n\n#test the function with some examples\nprint(sum_nums(1,2,3,10)) #should return 3\nprint(sum_nums(5,7,1,10)) #should return 12\nprint(sum_nums(3,8,1,10)) #should return 20\n\n\n#Write a function that takes a list of integers and returns a new list with only the even elements of the original list\ndef even_list(lst):\n    return [num for num in lst if num % 2 == 0]\n\n#test the function with some examples\nlst1 = [1,2,3,4,5,6,7,8,9]\nprint(even_list(lst1)) #should return [2,4,6,8]\nlst2 = [1,3,5,7,9]\nprint(even_list(lst2)) #should return []\nlst3 = [2,4,6,8,10]\nprint(even_list(lst3)) #should return [2,4,6,8,10] ",
        "generated_testcode": "assert sum_nums(5, 6, 10, 15) == 11\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    pattern = r'[^a-zA-Z0-9]+'\n    return re.sub(pattern, '', text1)\n\n# Example usage:\ntext1 = 'Hello, World! 123 #$%^'\nprint(remove_extra_char(text1)) # Output: HelloWorld123\n\n\n\n# Write a function to remove all white spaces from a given string using regex.\ndef remove_whitespaces(text1):\n    import re\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text1)\n# Example usage:\ntext1 = 'Hello    World!    How are you?'\nprint(remove_whitespaces(text1)) # Output: 'HelloWorld!Howareyou?' ",
        "generated_testcode": "assert remove_extra_char(\"Hello, World!\") == \"HelloWorld\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if a+b>c and b+c>a and c+a>b:\n        return True\n    else:\n        return False\n\n# Test Cases\nprint(validity_triangle(5,10,25))# False\nprint(validity_triangle(10,5,25))# False\nprint(validity_triangle(5,10,15))# True ",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a string as input and removes all spaces from it.\n    \"\"\"\n    str1 = str1.replace(\" \", \"\")\n    return str1\n\n#Example\n#Test the function with a sample string\nprint(remove_spaces(\"Hello world\"))  # Output: \"Helloworld\" ",
        "generated_testcode": "assert remove_spaces(\"Hello World\") == \"HelloWorld\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if key in dictionary:\n        return dictionary[key]\n    else:\n        return None\ndictionary = {'a':1,'b':2,'c':3,'d':4}\nprint(access_key(dictionary,'c'))\nprint(access_key(dictionary,'e')) #if key not in dictionary then return None ",
        "generated_testcode": "assert access_key({'a':1,'b':2,'c':3},'b') == 2\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            return False\n    return True\n\n# Example usage:\n# nums1 = [1, 2, 3, 4, 5, 6, 7, 8]\n# nums2 = [1, 2, 3, 4, 5, 4, 6]\n# nums3 = [1, 2, 3, 2, 4, 5]\n# print(increasing_trend(nums1)) # True\n# print(increasing_trend(nums2)) # False\n# print(increasing_trend(nums3)) # False ",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5, 6, 7, 8]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the smallest prime divisor of a positive integer n.\n    \"\"\"\n    # Check for small divisors\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return i\n    # If no small divisors, n is prime\n    return n\n    \n# Example usage:\nprint(smallest_Divisor(12))  # Output: 2\nprint(smallest_Divisor(15))  # Output: 3\nprint(smallest_Divisor(27))  # Output: 3\nprint(smallest_Divisor(60))  # Output: 5 ",
        "generated_testcode": "assert smallest_Divisor(15) == 3\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x*y, nums1,nums2))\n\n\n#test the function\nnums1 = [1,2,3,4,5]\nnums2 = [2,4,6,8,10]\nprint(mul_list(nums1,nums2)) # Output: [2, 8, 24, 32] ",
        "generated_testcode": "assert mul_list([1,2,3],[4,5,6]) == [4,10,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(int(n ** 0.5) + 1) : \n        j = n - i * i \n        if (j < 0) : \n            return False\n        elif (j == 0 or isPerfectSquare(j)) : \n            return True\n    return False\n\ndef isPerfectSquare(n) : \n    return n == int(n ** 0.5) ** 2 ",
        "generated_testcode": "assert sum_Square(5) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0 \n    for i in str: \n        if i == x: \n            count += 1\n    return count \n\n#Test the function with an example \nstring = \"hello world\"\nchar = \"l\"\nprint(count_Char(string, char)) # Output: 3\n\n\n# The function takes in two parameters, the string and the character to be counted. It then loops through each character in the string and checks if it is equal to the character to be counted. If it is, it increments the count variable. Finally, it returns the count of occurrences of the character in the string. ",
        "generated_testcode": "assert count_Char(\"hello world\", \"l\") == 3\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False\n        return True\n    primes = [i for i in range(2, n + 1) if is_prime(i)] \n    return sum(primes) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17 # Sum of primes between 1 to 10 is 17 (2+3+5+7)\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    freq = {}\n    for i in test_tup:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n# test the function with a sample list\ntest_tup = (1, 2, 3, 4, 2, 3, 2, 4, 5, 6, 1, 2, 3, 4, 7, 8, 2, 3, 4, 8)\nprint(freq_element(test_tup))\n\n\n# Output: {1: 2, 2: 4, 3: 4, 4: 3, 5: 1, 6: 1, 7: 1, 8: 2} ",
        "generated_testcode": "assert freq_element(('hello world') == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n# test the function\nprint(recur_gcd(24, 36)) # output: 12\nprint(recur_gcd(12, 8)) # output: 4\nprint(recur_gcd(9, 12)) # output: 3\nprint(recur_gcd(54, 24)) # output: 6 ",
        "generated_testcode": "assert recur_gcd(12, 8) == 4\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return (a**2 + b**2) ** 0.5\n\nprint(len_complex(3,4))  #5.0\n\n\n# Write a function to check if a number is even or odd.\ndef even_or_odd(num):\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nprint(even_or_odd(5))  #Odd\nprint(even_or_odd(6))  #Even\n\n\n# Write a function to calculate the factorial of a number.\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\nprint(factorial(5))  #120\n\n# Write a function to check if a number is prime or not.\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\nprint(is_prime(7))  #True\nprint(is_prime(8))  #False\n\n# Write a function to calculate the sum of a list of numbers.\ndef sum_list(nums):\n    result = 0\n    for num in nums:\n        result += num\n    return result\nprint(sum_list([1,2,3,4,5,6,7]))  #18\n\n# Write",
        "generated_testcode": "assert len_complex(3,4) == 5\n\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return -1\n\n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = arr[0]\n    for i in range(1, n):\n        if i == n - 1:\n            return int(jumps/arr[i]) + 1\n        max_reach = max(max_reach, i + arr[i])\n        jumps -= 1\n\n        if jumps == 0:\n            if i >= max_reach:\n                return -1\n            jumps = max_reach - i\n\n    return -1\n\n# Test\narr = [1, 3, 5, 8, 9, 2, 6, 2, 6, 8, 9, 2, 6]\nn = len(arr)\nprint(min_jumps(arr, n))  # Output: 3\n\n\narr = [1, 3, 0, 6, 9]\nn = len(arr)\nprint(min_jumps(arr, n))  # Output: -1\n\n\narr = [1, 1, 1, 1, 1, 1]\nn = len(arr)\nprint(min_jumps(arr, n))  # Output: 4\n\n\narr = [1, 1, 1, 1, 1, 1, ",
        "generated_testcode": "assert min_jumps([1, 3, 5, 8, 9, 2, 2, 6, 2, 6, 8, 9], 8) == 3\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)-1):\n        result.append(nums[i]*nums[i+1])\n    return result\n\n# Test the function with an example list\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(mul_consecutive_nums(nums))  # Output: [2, 6, 12, 20, 28, 35] ",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5]) == [2, 6, 12]\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result_dict = {}\n    for i in test_list:\n        if i[1] not in result_dict:\n            result_dict[i[1]] = [i[0]]\n        else:\n            result_dict[i[1].append(i[0])\n    return result_dict\n\n#test the function\ntest_list = [('apple', 'red'), ('banana', 'yellow'), ('cherry', 'red'), ('dates', 'yellow'), ('eggplant', 'purple'), ('fig', 'green'), ('grape', 'purple')]\nprint(group_element(test_list)) # {'red': ['apple', 'banana'], 'yellow': ['cherry', 'dates'], 'purple': ['eggplant', 'grape']} ",
        "generated_testcode": "assert group_element([(1, 2), (3, 2), (4, 3), (2, 2), (5, 1)]) == {1: [1], 2: [2, 4], 3: [3]}\n\n",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    N=N%1000000000000\n    if N==0:\n        return 0\n    else:\n        last_two_digits=1\n        for i in range(1,N+1):\n            last_two_digits=((last_two_digits*i)%100)\n        if last_two_digits>100:\n            last_two_digits=last_two_digits%100\n        return last_two_digits\n\n#testing the function\nprint(last_Two_Digits(2000)) #output: 24\nprint(last_Two_Digits(5000)) #output: 24\nprint(last_Two_Digits(10000)) #output: 00\nprint(last_Two_Digits(15000)) #output: 00\nprint(last_Two_Digits(18000)) #output: 00\nprint(last_Two_Digits(20000)) #output: 00 ",
        "generated_testcode": "assert last_Two_Digits(5) == 120\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub('\\s+', ' ', text1)\n    return text1\n\n# Example usage:\ntext1 = \"This  is  a    string    with extra   spaces.\"\nprint(remove_multiple_spaces(text1) ) # Output: \"This is a string with extra spaces.\" ",
        "generated_testcode": "assert remove_multiple_spaces(\"This is a    string with    multiple  spaces.\") == \"This is a string with multiple spaces.\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_values = set()\n    for value in test_dict.values():\n        if isinstance(value, list):\n            unique_values.update(value)\n        else:\n            unique_values.add(value)\n    return list(unique_values)\n\n\n# Example usage:\ntest_dict = {\n    'a': [1, 2, 3],\n    'b': [2, 3, 4],\n    'c': [3, 4, 5],\n    'd': 4\n}\n\nprint(extract_unique(test_dict))  # Output: [1, 2, 3, 4, 5] ",
        "generated_testcode": "assert extract_unique({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 3, \"e\": 2}) == {1, 2, 3}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Check if each element of second tuple is greater than its corresponding index in the first tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            result.append(True)\n        else:\n            result.append(False)\n    return tuple(result)\n\n# Test the function with examples\nprint(check_greater((1, 2, 3, 4, 5), (5, 2, 3, 2)) ) # Expected output: (False, True, True) ",
        "generated_testcode": "assert check_greater((1, 3, 5, 7, 9), (2, 4, 6, 8)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    zipped_list = zip(list1,list2)\n    return(list(zipped_list)  )\n\n#Example:\n# Input: list1 = [[1,2,3],[4,5,6],[7,8,9]]\n# list2 = [[\"a\",\"b\",\"c\"]]\n# Output: [[1, \"a\"], [2, \"b\"], [3, \"c\"]] ",
        "generated_testcode": "assert zip_list([[1,2,3],[4,5,6]) == [[1,4],[2,5],[3,6]]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes a list of integers as input and returns the count of even numbers in the list using lambda function\n    \"\"\"\n    count = 0\n    even_nums = filter(lambda x: x % 2 == 0, array_nums)\n    for num in even_nums:\n        count += 1\n    return count\n\n# Test the function with sample inputs\nprint(count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 4\nprint(count_even([1, 3, 5, 7, 9])) # Output: 0\nprint(count_even([-2, -4, 2, 0, 6, -8, 5, 10])) # Output: 3 ",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return(sorted(test_dict.items(), key=lambda x: x[0]))\n    \n#test the function\ntest_dict = {(1,2): 1, (3,4): 2, (2,1): 3, (0,5): 4, (3,3): 5}\nprint(sort_dict_item(test_dict)) ",
        "generated_testcode": "",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(str1) \n    count = 0\n    for i in range(n): \n        if str1[i] != str2[i]: \n            count += 1\n    return count // 2 ",
        "generated_testcode": "assert min_Swaps(\"01001110101000110\",\"111010010001010\") == 3\n# Testcase 1: Testing for a valid input\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in li:\n        if i >= min and i <= max:\n            count += 1\n    return count\n\n# example usage:\nlst = [1, 3, 5, 7, 9, 12, 15, 18, 20, 25]\nprint(count_range_in_list(lst, 7, 20)) # Output: 3\n\n\n\n# OR, we can also use the built-in function `sum()` and a list comprehension to achieve the same result:\ndef count_range_in_list(li, min, max):\n    return sum(1 for i in li if min <= i <= max)\n# example usage:\nlst = [1, 3, 5, 7, 9, 12, 15, 18, 20, 25]\nprint(count_range_in_list(lst, 7, 20)) # Output: 3 ",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 7) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    left_sum = 0\n    right_sum = sum(arr)\n    for i in range(len(arr)):\n        right_sum -= arr[i]\n        if left_sum == right_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n\n# test the function with an example\narr = [-7, 1, 5, 2, -4, 3, 0]\nprint(equilibrium_index(arr)) # Output: 3 ",
        "generated_testcode": "assert equilibrium_index([-1, 2, 3, -4, 5, 6, 7, 6]) == 4\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "           arr, index):\n    if i >= n:\n        return -1\n    ind = index[i]\n    if key == arr[ind]:\n        return i\n    return find_ind(key, i+1, n, arr, index)\n \ndef min_elements_to_delete(arr, n, k):\n    arr.sort()\n    index = [i for i in range(n)]\n    i = 0\n    count = 0\n    while i < n-1:\n        j = find_ind(arr[i], i+1, n, arr, index)\n        if j == -1:\n            i += 1\n            continue\n        diff = arr[j] - arr[i]\n        if diff > k:\n            count += j-i\n            i = j\n        else:\n            i = j\n    return count\n \n# Driver code\narr = [4, 8, 10, 12, 14, 18, 20, 222]\nn = len(arr)\nk = 4\nprint(min_elements_to_delete(arr, n, k)) ",
        "generated_testcode": "assert find_ind([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 2\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n#Example:\nd={1:'apple',2:'ball',3:'cat',4:'dog'}\nprint(is_key_present(d,3)) #True\nprint(is_key_present(d,5)) #False ",
        "generated_testcode": "assert is_key_present({\"a\":1,\"b\":2,\"c\":3},\"a\") == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Return the sum of the first n-1 harmonic numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n\n# Test the function with n = 5\nprint(harmonic_sum(5))  # Output: 2.283333333333333333334\n\n\n# Write a function to calculate the harmonic sum using the formula:\n# harmonic_sum(n) = 1 + 1/2 + 1/3 + 1/4 + ... + 1/n\n# where n is an integer greater than 1. ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # Sort the list by length\n    list1.sort(key=len)\n    # Create a new list of sorted sublists\n    sorted_list = []\n    # Loop through the sorted list\n    for sublist in list1:\n        # Sort each sublist\n        sublist.sort()\n        # Append the sorted sublist to the new list\n        sorted_list.append(sublist)\n    return sorted_list\n\n\n# Test the function\nlist1 = [[3, 1, 4], [1, 2, 10, 8], [5, 6], [10, 7], [1, 2], [1, 5, 6, 8, 9]]\nprint(sort_sublists(list1)) ",
        "generated_testcode": "",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr1.sort() \n    arr2.sort() \n    i = 0\n    j = 0\n    while i < m and j < n: \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        else: \n            return False\n    if i == m: \n        return True\n    return False\n\n#Driver code \narr1 = [1, 2, 3, 3]\narr2 = [1, 2, 3, 4, 5]\nm = len(arr1) \nn = len(arr2) \nif is_subset(arr1, m, arr2, n): \n    print(\"arr1 is subset of arr2\")\nelse: \n    print(\"arr1 is not subset of arr2\") ",
        "generated_testcode": "assert is_subset([1, 2, 3, 4], 3, [1, 2, 3, 4, 5, 6]) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Function to count set bits in binary \n    # representation of given number \n    def count_bits(n) : \n        count = 0\n        while (n) : \n            count += n & 1\n            n >>= 1\n        return count \n    # Function to count total set bits in numbers from 1 to n \n    cnt = 0\n    for i in range(1, n+1) : \n        cnt += count_bits(i) \n    return cnt \n# Driver code to test the function\nn = 10\nprint(\"Total set bits from 1 to\", n, \"are\", count_Set_Bits(n)) ",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # using split() function to split string into a list of words \n    words_list = string.split() \n    return words_list \n\n# Driver code \nstring = input(\"Enter a string: \")\nprint(Convert(string)\n\n# Example \n# Input: \n# Enter a string: \"Python is a high-level programming language\"\n# Output: \n# ['Python', 'is', 'a', 'high-level', 'programming', 'language'] ",
        "generated_testcode": "assert Convert(\"Hello World\") == [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\"]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    unique_dict = {}\n    for item in test_list:\n        if item[1] in unique_dict:\n            unique_dict[item[1]] += 1\n        else:\n            unique_dict[item[1]] = 1\n    return unique_dict\n\ntest_list = [('a', 1), ('b', 1), ('c', 2), ('d', 2), ('e', 3), ('f', 3), ('g', 3)]\nprint(get_unique(test_list))\n\n# Output: {1: 2, 2: 2, 3: 3} ",
        "generated_testcode": "assert get_unique((\"apple\", \"banana\", \"cherry\", \"apple\", \"date\", \"cherry\") == {\"apple\": 2, \"banana\": 1, \"cherry\": 2, \"date\": 1}\n\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (test_tup[0],test_tup[-1])\n\n#testing\ntest_tup = (1,2,3,4,5,6,7,8,9)\nprint(front_and_rear(test_tup)) #Output: (1, 9)\ntest_tup = (\"Python\", \"Coding\", \"Hello\", \"World\")\nprint(front_and_rear(test_tup)) #Output: (\"Python\", \"World\")\ntest_tup = \"12345\"\nprint(front_and_rear(test_tup)) #Output: (\"1\", \"5\") ",
        "generated_testcode": "assert front_and_rear(('apple', 'banana', 'cherry', 'date', 'elderberry') == ('apple', 'elderberry')\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    product_even = 1\n    product_odd = 1\n    n = str(n)\n    for i in range(0, len(n), 2): \n        product_even *= int(n[i]) \n    for i in range(1, len(n), 2): \n        product_odd *= int(n[i]) \n    return product_even == product_odd ",
        "generated_testcode": "assert product_Equal(123456) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for item in list1:\n        if item not in result:\n            result.append(item)\n    return result\n\n# example usage:\nlist1 = [[1,2,3], [4,5,6], [1,2,3], [7,8,9], [1,2,3]]\nprint(remove_duplicate(list1)) # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ",
        "generated_testcode": "",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in test_tup:\n        if type(i) != str and type(i) != int and type(i) != float:\n            return False\n    return True\n\n#Test the function\ntest_tup1 = (1, 2, 3, 4, 5, 'hello', 3.5, 'world') # valid tuple\nprint(check_valid(test_tup1)) ",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5, 6, 7, 8, 9, 10) == True)\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(2, n+1):  \n        if n%i == 0:  \n            j = 1 \n            while j <= n:  \n                if i**j <= n:  \n                    count += 1\n                else: \n                    break  \n                j += 1 \n    return count \n  \ndef countDistinctPower(n):  \n    count = 0 \n    for i in range(2, n+1):  \n        if n % i == 0:  \n            count += count_Fac(i)  \n            n = n/i  \n        else: \n            count += 1\n    return count  \n  \n# Driver code \nn = 12\nprint(countDistinctPower(n)) ",
        "generated_testcode": "assert count_Fac(12) == 2 # Testing for n=12, output should be 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # remove all non-digits from the string\n    test_str = \"\".join(filter(str.isdigit, test_str)\n    # split the string into a list of integers\n    int_list = list(map(int, test_str.split()))\n    # convert the list into a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple\n\n# test the function with a sample string\ntest_str = \"1 2 3 4 5 6 7\"\nresult = str_to_tuple(test_str)\nprint(result) # output: (1, 2, 3, 4, 5, 6, 7) ",
        "generated_testcode": "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Return the perimeter of a rombus with the given side length.\n    \"\"\"\n    return 4 * a\n\n# Test the function with a side length of 5\nprint(rombus_perimeter(5) == 20) # Output: True\n# Test the function with a side length of 10\nprint(rombus_perimeter(10) == 40) # Output: True ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(data)\n    mean = sum(data) / n\n    deviations = [(x - mean) ** 2 for x in data]\n    variance = sum(deviations) / n\n    standard_deviation = variance ** 0.5\n    return standard_deviation\n\n# Test the function with some sample data\ndata = [2, 4, 6, 8, 12, 14, 16, 18, 20, 22, 24]\nprint(sd_calc(data)) ",
        "generated_testcode": "assert round(sd_calc([1, 2, 3, 4, 5, 6, 7, 8, 9]), 2) == 2.72\n\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(0, len(list1), 2):\n        new_list.append(list1[i])\n    return new_list\n\n#Test the function with an example list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(alternate_elements(list1))  # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]\n\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    pattern = \"ab*\"\n    import re\n    match = re.fullmatch(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test the function with some examples\nprint(text_match(\"ab\"))  # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"a\"))   # True\nprint(text_match(\"ac\"))  # False\nprint(text_match(\"abcb\")) # False\nprint(text_match(\"abbb\")) # True ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    new_tup = []\n    for i in test_tup:\n        new_tup.append(i)\n        new_tup.append(test_dict[i])\n    return tuple(new_tup)\n\n\n# Example usage:\n\ntest_tup = (1, 2, 3)\ntest_dict = {1: \"apple\", 2: \"ball\", 3: \"cat\"}\nprint(add_dict_to_tuple(test_tup, test_dict)) # Output: (1, 'apple', 2, 'ball', 3, 'cat') ",
        "generated_testcode": "assert add_dict_to_tuple((\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"}) == (\"abc\", {1: \"apple\", 2: \"ball\", 3: \"cat\"})\n\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize dp table with same size as cost matrix to store average \n    # values \n    dp = [[0 for i in range(N)] for j in range(N)] \n  \n    # Copy last element of each row of cost[][][] into dp[][] as there is \n    # only one element in the path ending at any cell in the last row \n    for i in range(N): \n        dp[i][N-1] = cost[i][N-1] \n  \n    # Fill last column of dp[][] as there is only one way to reach last column \n    for i in range(N-2, -1, -1, -1): \n        dp[N-1][i] = cost[N-1][i] \n  \n    # Fill rest of the dp[][][] in bottom-up manner \n    for i in range(N-2, -1, -1): \n        for j in range(N-2, -1, -1): \n            for k in range(N-1, -1, -1): \n                dp[i][j] = cost[i][j] + max(dp[i+1][j], dp[i+1][k]) \n                dp[j][i] += cost[j][i] + max(dp[k][i], dp[j+1][i]) \n  \n    # Calculate maximum average by finding maximum value in dp[][] ",
        "generated_testcode": "",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    filtered_data = []\n    for student in students:\n        if student['height'] >= h and student['weight'] >= w:\n            filtered_data.append(student)\n    return filtered_data\n\n# Sample data\nstudents = [\n    {'name': 'Alice', 'height': 160, 'weight': 50},\n    {'name': 'Bob', 'height': 175, 'weight': 60},\n    {'name': 'Charlie', 'height': 170, 'weight': 65},\n    {'name': 'David', 'height': 180, 'weight': 70},\n    {'name': 'Eve', 'height': 165, 'weight': 55},\n]\n\nprint(filter_data(students,165,55)) #[{'name': 'Charlie', 'height': 170, 'weight': 65}, {'name': 'David', 'height': 180, 'weight': 70}] ",
        "generated_testcode": "",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Count the number of same pair in two lists of integers.\n    :param nums1: list[int]\n    :param nums2: list[int]\n    :return: int\n    \"\"\"\n    count = 0\n    nums1_map = {}\n    for num in nums1:\n        if num in nums1_map:\n            nums1_map[num] += 1\n        else:\n            nums1_map[num] = 1\n    for num in nums2:\n        if num in nums1_map and nums1_map[num] > 0:\n            count += 1\n            nums1_map[num] -= 1\n    return count\n\n\n# Test cases\nprint(count_same_pair([1, 2, 2, 3, 2, 1], [2, 3, 3, 3, 4])) # 2\nprint(count_same_pair([1, 2, 2, 3, 2, 1], [2, 3, 3, 3, 1, 4])) # 3 ",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4, 5], [2, 4, 6, 7]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if power < 0:\n        return 0\n    else:\n        return sum(int(digit) ** power for digit in str(base))\n\n# Example usage:\n# print(power_base_sum(13, 2))  # Output: 16\n# print(power_base_sum(10, 4))  # Output: 100000\n# print(power_base_sum(9, 0))  # Output: 0\n# print(power_base_sum(9, -2)) # Output: 0 ",
        "generated_testcode": "assert power_base_sum(2, 10) == 1024\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    regex = r'\"(.*?)\"'\n    matches = re.findall(regex, text1)\n    return matches\n\n# Example usage:\ntext = 'A quick brown fox \"jumps\" over the \"lazy dog\"'\nprint(extract_quotation(text) ) # Output: ['\"jumps\"', '\"lazy dog\"'] ",
        "generated_testcode": "assert extract_quotation('\"Hello, World!\"') == 'Hello, World!'\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tuple(test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1))\n\n#Test the function with a sample tuple\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8)\nprint(multiply_elements(test_tup)) # Output: (2, 6, 12, 20, 28, 35) ",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4, 5)) == (2, 6, 12)\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r\"[^a-zA-Z0-9]\")\n    return pattern.sub('', S)\n\n# Example usage:\n# remove_char(\"Hello, World!\") # Output: \"HelloWorld\"\n# remove_char(\"Python@123\") # Output: \"Python123\"\n\n\n# Write a function to remove all the vowels from a string using regex\ndef remove_vowels(S):\n    import re\n    pattern = re.compile(r\"[aeiouAEIOU]\")\n    return pattern.sub('', S)\n# Example usage:\n# remove_vowels(\"Hello, World!\") # Output: \"Hll, Wrld!\"\n# remove_vowels(\"Python\") # Output: \"Pythn\" ",
        "generated_testcode": "assert remove_char(\"Hello, World! 123\") == \"HelloWorld123\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_list=[]\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n#testing the function\nlst1=[1,2,3,4,5]\nlst2=[4,5,6,7,8]\nprint(sum_list(lst1,lst2)) # output:[5,7,10,11,13]\n\n\n#Write a function to find the minimum element in a list.\ndef find_min(lst):\n    min_element=lst[0]\n    for i in range(1,len(lst)):\n        if lst[i]<min_element:\n            min_element=lst[i]\n    return min_element\n#testing the function\nlst=[4,2,6,7,1,9,8,3]\nprint(find_min(lst)) #output:1\n\n#Write a function to check if a number is prime or not.\ndef is_prime(n):\n    if n<2:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n#testing the function\nprint(is_prime(7)) #output:True\nprint(is_prime(12)) #output:False\n\n#Write a function to find all prime numbers in a list.\ndef find_primes(lst):\n    prime_lst=[]",
        "generated_testcode": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x+y,nums1,nums2))\n\n#Example usage:\nnums1 = [1,2,3,4]\nnums2 = [4,5,6]\nprint(add_list(nums1,nums2)) #[5,7,10] ",
        "generated_testcode": "assert add_list([1,2,3],[4,5,6]) == [5,7,9]\n\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    prev = None\n    for num in nums:\n        if num != prev:\n            result.append(num)\n            prev = num\n    return result\n\n# Test the function with an example\ninput_list = [1, 1, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 7, 7, 7]\nprint(consecutive_duplicates(input_list)) # Output: [1, 2, 3, 4, 5, 6, 7] ",
        "generated_testcode": "",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=22/7\n    s=pi*r*h\n    return s\n\n#Test the function with some examples\nprint(lateralsurface_cone(5,6))\nprint(lateralsurace_cone(7,8))\nprint(lateralsurface_cone(2,9)) ",
        "generated_testcode": "assert lateralsurface_cone(3, 5) == 29.289370185853405394, \"Test 1 failed\"\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n\n# Testing the function\nprint(replace_specialchar(\"Hello, World\"))\nprint(replace_specialchar(\"Hello World\"))\nprint(replace_specialchar(\"Hello.World\"))\nprint(replace_specialchar(\"Hello, World. How are you?\"))\nprint(replace_specialchar(\"Hello, World. How: are: you doing?\")) ",
        "generated_testcode": "assert replace_specialchar(\"Hello, World\") == \"Hello:World\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    start = 0\n    end = len(A) - 1\n    result = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            result = mid\n            end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result\n\n# Test cases\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 4)) # Output: 2\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 5)) # Output: 4\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 8)) # Output: -1\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 1)) # Output: 0\nprint(find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 7)) # Output: 5\nprint(find_first_occurrence([1,",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 6, 7], 4) == 2\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    for i in range(n):\n        for j in range(i,n):\n            prod = 1\n            for k in range(i,j+1):\n                prod *= arr[k]\n            res.append(prod)\n    return sum(res)\n\n# Driver Code\narr = [1,2,3,4]\nn = len(arr)\nprint(\"Sum of products of all possible subarrays is\",sum_Of_Subarray_Prod(arr,n))\n\n\n# Output:\n# Sum of products of all possible subarrays is 57 ",
        "generated_testcode": "",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n == 0:   # if the number is 0, return 1\n        return 1\n    elif n == 1:   # if the number is 1, return 0\n        return 2\n    else:   # if the number is greater than 1, toggle the bits\n        return n ^ (n >> 1) ",
        "generated_testcode": "assert set_middle_bits(0b101010101010) == 0b10000100010\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n# Example usage:\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(left_insertion(a, 4.5))  # Output: 3\nprint(left_insertion(a, 0))   # Output: 0\nprint(left_insertion(a, 10))  # Output: 6 ",
        "generated_testcode": "assert left_insertion([1, 3, 5, 7, 9], 4) == 1\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = '^[aeiouAEIOU]'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n# test the function with some examples\nprint(check_str('elephant'))  # True\nprint(check_str('hippo'))    # False\nprint(check_str('Ice cream')) # True\nprint(check_str('apple'))   # False ",
        "generated_testcode": "assert check_str(\"apple\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the sum of the first n-1 terms of the geometric series.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n\n# Test the function with n = 5\nprint(geometric_sum(5)) # Output: 1.94158843254683935594\n\n\ndef geometric_sum_iter(n):\n    \"\"\"\n    Returns the sum of the first n-1 terms of the geometric series using iteration.\n    \"\"\"\n    total = 0\n    i = 1\n    while i < n:\n        total += 1/i\n        i += 1\n    return total\n\n# Test the function with n = 5\nprint(geometric_sum_iter(5)) # Output: 1.9415843254683139352\n\ndef geometric_sum_formula(n):\n    \"\"\"\n    Returns the sum of the first n-1 terms of the geometric series using the formula.\n    \"\"\"\n    return (n-1)/n\n\n# Test the function with n = 5\nprint(geometric_sum_formula(5)) # Output: 0.9415843254683514414",
        "generated_testcode": "assert geometric_sum(1) == 1\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    i = 1 \n    while True: \n        triangular_number = (i*(i+1))//2\n        if len(str(triangular_number)) == n: \n            return i \n        elif len(str(triangular_number)) > n: \n            return -1 \n        i += 1 \n\n# example usage:\nprint(find_Index(3)) # output: 10 ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict\n\n# Test the function with sample input\ntest_tup = (\"apple\", 2, \"banana\", 4, \"cherry\", 6, \"orange\", 3)\nprint(tuple_to_dict(test_tup)) ",
        "generated_testcode": "assert tuple_to_dict((\"apple\", \"red\", \"banana\", \"yellow\", \"cherry\", \"red\") == {\"apple\": \"red\", \"banana\": \"yellow\", \"cherry\": \"red\"}\n\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) == 0:\n        return True\n    else:\n        for i in range(1,len(s)):\n            if s[i] != s[0]:\n                return False\n        return True\n\n# Test the function with examples\nprint(all_Characters_Same(\"xyzxyz\")) # True\nprint(all_Characters_Same(\"abababab\")) # True\nprint(all_Characters_Same(\"abcd\"))   # False\nprint(all_Characters_Same(\"ab\"))    # False\nprint(all_Characters_Same(\"a\"))    # True ",
        "generated_testcode": "assert all_Characters_Same(\"abbbbbbb\") == False\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (side ** 2 * 3 ** 0.5) / 4\n    return area\n\n# Test the function with a side length of 5\ntetrahedron_area = area_tetrahedron(5)\nprint(tetrahedron_area)\n\n\n# Test the function with a side length of 10\ntetrahedron_area = area_tetrahedron(10)\nprint(tetrahedron_area) ",
        "generated_testcode": "assert area_tetrahedron(5) == 10.8253176645825317665\n\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(list1) == 0:\n        return []\n    else:\n        for i in range(m):\n            list1.insert(0,list1.pop())\n        return list1\n# Example usage:\n# list1 = [1,2,3,4,5,6,7]\n# m = 2\n# n = 2\n# print(rotate_right(list1,m,n)) # Output: [5,6,7,1,2,3,4] ",
        "generated_testcode": "assert rotate_right([1,2,3,4,5,6,7],2,2) == [6,7,1,2,3,4,5]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if any(i is None for i in test_tup):\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs:\ntest_tup1 = (1, 2, 3, 4, None, 5)\ntest_tup2 = (1, 2, 3, 4, 5)\ntest_tup3 = (None, None, None, None)\nprint(check_none(test_tup1)) # True\nprint(check_none(test_tup2)) # False\nprint(check_none(test_tup3)) # True ",
        "generated_testcode": "assert check_none((1, 2, 3, 4, 5, 6)) == False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    res = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            res.append(num)\n    return res\n\n# test the function\nprint(divisible_by_digits(10, 20))  # should return [12, 14, 15, 16, 18]\nprint(divisible_by_digits(100, 200))  # should return [120, 135, 140, 144, 150]\n\n\n# print(divisible_by_digits(1000, 2000))  # should return [100, 102, 105, 110, 114, 120, 121, 126, 130, 133, 140, 144, 150, 153, 154, 160, 165, 166, 180, 189, 190]\n# print(divisible_by_digits(10000, 20000))  # should return [10000, 1020, 1050, 11",
        "generated_testcode": "assert divisible_by_digits(10, 20) == []\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi = 3.14\n    return (r*r) * a / 360 * pi\n\nprint(sector_area(5, 90) == 121.42)\n\n\n# or \n\nimport math\ndef sector_area(r, a):\n    return (r*r) * a * math.pi / 360\nprint(sector_area(5, 90) == 125.66) # True ",
        "generated_testcode": "assert sector_area(5, 45) == 141.3716691669645880567\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    return L[m][n][o] \n  \n# Test the function with sample inputs\nX = \"ABCDGH\"\nY = \"AEDFHR\"\nZ = \"ADHHR\"\nm = len(X) \nn = len(Y) \no = len(Z) \nprint(\"Length of LCS is\", lcs_of_three(X, Y, Z, m, n, o)) \n ",
        "generated_testcode": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AFRDXC\" , 4, 5, 5) == \"AD\"\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'([a-z])([A-Z])')\n    return pattern.sub(r'\\1 \\2', str1)\n\n# example usage:\nprint(capital_words_spaces('HelloWorld')) # Output: 'Hello World'\nprint(capital_words_spaces('CamelCaseString')) # Output: 'Camel Case String'\nprint(capital_words_spaces('The quick brown Fox jumpsOverTheLazyDog')) # Output: 'The quick brown Fox jumps Over The Lazy Dog' ",
        "generated_testcode": "assert capital_words_spaces(\"helloWorld\") == \"hello World\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Takes a list of strings and returns a list of strings sorted numerically\n    \"\"\"\n    nums_int = [int(num_str) for num_str in nums_str]\n    nums_int.sort()\n    return [str(num) for num in nums_int]\n\n\n# Test cases\nprint(sort_numeric_strings(['1', '3', '10', '21', '5', '9']))\nprint(sort_numeric_strings(['10', '8', '1', '11', '15', '3']))\nprint(sort_numeric_strings(['1', '2', '3', '4', '5', '6', '7', '8', '9']))\nprint(sort_numeric_strings(['9', '8', '7', '6', '5', '4', '3', '2', '1']))\nprint(sort_numeric_strings(['1', '10', '100', '1000', '2', '20', '200', '3', '30', '300'])) ",
        "generated_testcode": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"10\", \"5\", \"6\"]) == [\"1\", \"2\", \"3\", \"5\", \"6\", \"10\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Test the function with an example\nmy_list = [('apple', 'banana', 'cherry')]\nmy_tuple = ('orange', 'mango', 'grapes')\nprint(add_tuple(my_list, my_tuple)) # Output: [('apple', 'banana', 'cherry'), ('orange', 'mango', 'grapes')] ",
        "generated_testcode": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(arr)\n    if i >= n:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] > arr[left]:\n        return False\n    if right < n and arr[i] > arr[right]:\n        return False\n\n\n    return check_min_heap(arr, left) and check_min_heap(arr, right)\n\n\ndef is_min_heap(arr):\n    return check_min_heap(arr, 0)\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(is_min_heap(arr))\n\n\narr = [1, 2, 4, 3, 5, 6, 7, 8, 9]\nprint(is_min_heap(arr))\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(is_min_heap(arr))\n\n\narr = [10, 20, 30, 40, 50, 60, 70, 80, 90]\nprint(is_min_heap(arr))\n\narr = [1, 2, 3, 4, 8, 6, ",
        "generated_testcode": "assert check_min_heap([4, 10, 3, 15, 12, 11, 14, 13, 8, 6, 16, 1, 7]) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0 or n == 1: \n        return n \n    elif n == 2: \n        return 1 \n    else: \n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) * 2 \n  \n# Driver code to test the function \nn = 10 \nfor i in range(n+1): \n    print(jacobsthal_num(i), end=\" \") ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Sort the list based on the last element in tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Get first K records\n    min_k_list = sorted_list[:K]\n    # Sort based on first element in tuple\n    min_k_list = sorted(min_k_list, key=lambda x: x[0])\n    return min_k_list\n\n# Test the function with sample data\ntest_list = [(1, 100), (2, 56), (3, 23), (4, 75), (5, 12), (6, 89), (7, 45)]\nK = 3\nprint(min_k(test_list, K)\n# Output: [(1, 100), (2, 56), (3, 23)] ",
        "generated_testcode": "assert min_k([(('A', 5), ('B', 3), ('C', 1), ('D', 6), ('E', 2)], 2) == [('C', 1), ('E', 2)]\n\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            result.append(i)\n    return result\n\n\n\n# Test the function with sample test cases\nl1 = [1, 2, 3, 4, 5, 6, 7]\nl2 = [2, 3, 4, 6, 7, 8]\nl3 = [2, 4, 5, 6, 8, 9]\nprint(extract_index_list(l1, l2, l3))  # Output: [1, 2, 3] ",
        "generated_testcode": "assert extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 6], [3, 4, 5, 7]) == [2, 3]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(numbers) < 2:\n        return None\n    first_smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = num\n        elif num < second_smallest and num != first_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None ",
        "generated_testcode": "assert second_smallest([5, 2, 3, 8, 1, 6, 7, 4]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r'^a[b]?')\n    result = pattern.findall(text)\n    if result:\n        return True\n    else:\n        return False\n\n# test the function\nprint(text_match_zero_one(\"a\")) # True\nprint(text_match_zero_one(\"ab\")) # True\nprint(text_match_zero_one(\"abb\")) # False\nprint(text_match_zero_one(\"acb\")) # False\nprint(text_match_zero_one(\"abbb\")) # False ",
        "generated_testcode": "assert text_match_zero_one(\"ab\") == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\n# test the function with sample inputs\ntest_list1 = [\"abc\", \"cba\", \"xyz\", \"hello\", \"olleh\", \"world\"]\ntest_list2 = [\"abba\", \"aba\", \"xyyx\", \"123\", \"321\"]\nprint(count_reverse_pairs(test_list1)) # output: 3\nprint(count_reverse_pairs(test_list2)) # output: 2 ",
        "generated_testcode": "assert count_reverse_pairs(['abc', 'cba', 'xyz', 'aba', 'bac', 'def', 'fed']) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    # create a set to store unique sublists\n    unique_set = set()\n    # loop through the list and generate all sublists\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # convert sublist to a tuple and add it to set\n            unique_set.add(tuple(list1[i:j]))\n    # return the length of the set\n    return len(unique_set)\n\n# example usage\nmy_list = [1,2,3,4]\nprint(unique_sublists(my_list)) # 6\n\nmy_list = [1,2,3,4,4]\nprint(unique_sublists(my_list)) # 6\nmy_list = [1,2,3,4,4,4,5]\nprint(unique_sublists(my_list)) # 9 ",
        "generated_testcode": "",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if num - int(num) == 0:\n        return True\n    else:\n        return round(num, 2) == num\n\nprint(is_decimal(10)) # True\nprint(is_decimal(10.0)) # True\nprint(is_decimal(10.5)) # True\nprint(is_decimal(10.5555)) # False\nprint(is_decimal(10.50)) # True\nprint(is_decimal(10.550)) # True\nprint(is_decimal(10.3333)) # False\nprint(is_decimal(10.34)) # True ",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arr) == 1:\n        return True\n    else:\n        for i in range(n):\n            j = i+1\n            while j < n:\n                if arr[i] == arr[j]:\n                    return False\n                j += 1\n        return True\n\n#Example\n# Input:\narr = [1,2,3,3,4,5,5]\nn = 5\n# Output: False\n# Explanation:\n# The array has 2 distinct elements 1, 3 and 4.\n\n# Input:\narr = [1,2,3,4,5]\nn = 4\n# Output: True\n# Explanation:\n# The array has all distinct elements. ",
        "generated_testcode": "",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pi=3.14\n    arc= (d*a)/(180*pi)\n    return arc\n\ndef main():\n    degree=float(input(\"Enter the degree of angle in degrees: \")\n    radius=float(input(\"Enter the radius of the circle: \")\n    print(\"The arc length of the angle is:\", arc_length(radius, degree))\n\n\nif __name__== \"__main__\":\n    main()\n",
        "generated_testcode": "assert arc_length(10, 30) == 50\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthnum3 == 2:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return True\n\nmonthnum = int(input(\"Enter the month number: \"))\n\nif check_monthnumber_number(monthnum):\n    print(\"The month has 30 days.\")\nelse:\n    print(\"The month doesn't have 30 days.\") ",
        "generated_testcode": "assert check_monthnumber_number(2) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort() \n    min_diff = arr[1] - arr[0] \n    for i in range(2, n): \n        if (arr[i] - arr[i - 1]) < min_diff: \n            min_diff = arr[i] - arr[i - 1] \n    return min_diff \n# Driver code \narr = [1, 5, 3, 19, 18, 25, 29, 11] \nn = len(arr) \nprint(\"Minimum difference is\", find_Min_Diff(arr, n)) ",
        "generated_testcode": "assert find_Min_Diff([1, 5, 3, 19, 18, 25, 30, 20, 40],6) == 1\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n\n\nstr = input(\"Enter a string: \")\nprint(number_ctr(str)) ",
        "generated_testcode": "assert number_ctr(\"Hello 123 world 456\") == 2\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    s = 0 \n    for i in range(1,n): \n        if n%i ==0: \n            s+=i \n    if s == n: \n        return True\n    else: \n        return False\n\ndef nth_polite_number(n): \n    count = 1 \n    i = 1\n    while n: \n        if is_polite(i): \n            n-=1\n            if n == 0: \n                return i\n        i+=1\n\n# test the function \nprint(nth_polite_number(5)) # 28\nprint(nth_polite_number(10)) # 236\nprint(nth_polite_number(15)) # 328\n",
        "generated_testcode": "assert is_polite(12) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(len(l1)-1):\n        yield (l1[i], l1[i+1])\n\n#Example:\nl1 = [1,2,3,4,5,6]\nfor pair in pair_wise(l1):\n    print(pair)\n# Output: (1, 2) (2, 3) (3, 4) (4, 5) (5, 6) \n\n\n#To make it work for all lists, regardless of their length, you can modify the function as follows:\ndef pair_wise(l1):\n    for i in range(len(l1)-1):\n        yield (l1[i], l1[i+1])\n    if len(l1) % 2 == 1:\n        yield (l1[-1], None)\n\n#Example:\nl1 = [1,2,3,4,5,6,7]\nfor pair in pair_wise(l1):\n    print(pair)\n# Output: (1, 2) (2, 3) (3, 4) (4, 5) (5, 6) (6, None) \n\n\nl2 = [1,2,3]\nfor pair in pair_wise(l2):\n    print(pair)\n# Output: (1, 2) (2, 3) (3, None) ",
        "generated_testcode": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n\n#Test the code\narr = [1,2,3,4,5,6,7,8,9]\nsum = 7\nn = len(arr)\nprint(get_Pairs_Count(arr,n,sum))  # Output: 2\n\n\n#This function takes an array and a sum as input. It then uses two nested loops to iterate over all possible pairs of elements in the array and checks if their sum is equal to the given sum. If the sum is equal, it increments the count variable. Finally, it returns the count of pairs whose sum is equal to the given sum. In the above example, the output is 2 because the pairs (2,5) and (4,3) have a sum of 7. ",
        "generated_testcode": "assert (get_Pairs_Count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 3)\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    set_bit_count = 0 \n    while (x): \n        set_bit_count += x & 1\n        x >>= 1\n    return (set_bit_count % 2 == 1) \n  \n# Testing the function with some sample inputs \nx = 7 # binary representation - 1111 \nprint(check_Odd_Parity(x)) # Output: True\n\nx = 10 # binary representation - 1010 \nprint(check_Odd_Parity(x)) # Output: False ",
        "generated_testcode": "assert check_Odd_Parity(10) == False\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    diff_list = list(set(li1) - set(li2))\n    return diff_list\n\nli1 = [1,2,3,4,5,6]\nli2 = [4,5,6,7,8,9]\nprint(Diff(li1,li2))\n\nli3 = [1,2,3,4,5]\nli4 = [3,4,5,6,7]\nprint(Diff(li3,li4))\n\n\n# Output:\n# [1, 2, 8, 9]\n# [1, 2, 7] ",
        "generated_testcode": "assert Diff([1,2,3,4,5],[1,2,3,4,5]) == []\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if n<=0: \n        return 0\n    else: \n        sum = 0\n        i = 1\n        count = 0\n        while count < n: \n            sum += i**4 \n            i += 2\n            count += 1\n        return sum \n# Test the function with example \nprint(odd_Num_Sum(5))  # Output: 65 ",
        "generated_testcode": "assert odd_Num_Sum(3) == 35 \n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    brackets = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    for i in exp:\n        if i in brackets.values():\n            stack.append(i)\n        elif i in brackets.keys():\n            if not stack or brackets[i] != stack.pop():\n                return False\n    return not stack\n\n# Test Cases\nprint(check_expression('{[]}'))  # True\nprint(check_expression('{[(]}'))  # False\nprint(check_expression('{[][]()}'))  # True\nprint(check_expression('{{[]}()}}'))  # True\nprint(check_expression('{(})'))  # False ",
        "generated_testcode": "assert check_expression(\"(a+(b*c)\") == False\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # split the test_str into list of words\n    words = test_str.split()\n    # iterate through each word in the list\n    for word in words:\n        # if length of word is equal to k, remove it\n        if len(word) == K:\n            words.remove(word)\n    # join the words with space and return the resultant string\n    return ' '.join(words)\n\n\n# test the function with example\ntest_str = 'Hello World this is a sample string'\nK = 2\nprint(remove_length(test_str, K) ) # Output: 'Hello World is a string'\n\n\n# test the function with example\ntest_str = 'The quick brown fox jumps over the lazy dog'\nK = 5\nprint(remove_length(test_str, K) ) # Output: 'The brown jumps over the lazy' ",
        "generated_testcode": "assert remove_length(\"Hello world\", 2) == \"Held\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # initialize variables\n    count = 0\n    positions = []\n    # loop through the text string\n    for i in range(len(text)-len(pattern)+1):\n        # check if the substring matches the pattern\n        if text[i:i+len(pattern)] == pattern:\n            # if it does, increment the count and append the position to the list\n            count += 1\n            positions.append(i)\n    # return the count and positions as a tuple\n    return (count, positions)\n\n# test the function\ntext = \"hello world, world wide web\"\npattern = \"world\"\nprint(occurance_substring(text, pattern)) # should return (2, [6, 13]) ",
        "generated_testcode": "assert occurance_substring(\"ABCDCDCBAABCDEFG\",\"ABC\") == {\"count\": 2, \"positions\": [0, 4]}\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    \n    #regular expression to match email pattern \n    pattern = r\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$\"\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n    \n#test the function with some examples\nprint(check_email('example@example.com')) # True\nprint(check_email('example@example.co.in')) # True\nprint(check_email('example@example.co.in.com')) # True\nprint(check_email('example@.com')) # False\nprint(check_email('example.com')) # False\nprint(check_email('@example.com')) # False\nprint(check_email('example@com')) # False\nprint(check_email('example.com@')) # False ",
        "generated_testcode": "assert check_email('example@example.com') == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# testing the function\nprint(odd_position([2, 3, 6, 5, 8, 9, 12, 10]))\n# Output: False\nprint(odd_position([2, 3, 5, 8, 11, 10]))\n# Output: True ",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    vowels = \"AEIOUaeiou\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n\n# Test the function with a sample string\ntest_str = \"Python is a great programming language\"\nprint(count_vowels(test_str)\n# Output: 2 ",
        "generated_testcode": "assert count_vowels(\"abcde\") == 2\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #create a set of the given array \n    s = set(arr) \n    #initialize sum and count variable \n    sum = 0 \n    count = 0 \n    for i in s: \n        #if element is repeated then increment count \n        if arr.count(i) > 1: \n            count += 1\n        else: \n        #if element is not repeated then add it to sum \n            sum += i \n    #return the sum of non-repeated elements \n    return sum-count ",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9]) == 45\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Pack consecutive duplicates of a list into sublists.\n    \"\"\"\n    result = []\n    temp_list = []\n    prev = None\n    for i in list1:\n        if i == prev:\n            temp_list.append(i)\n        else:\n            if temp_list:\n                result.append(temp_list)\n                temp_list = [i]\n        prev = i\n    if temp_list:\n        result.append(temp_list)\n    return result\n# Example usage:\nlist1 = [1, 1, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 7, 8, 9, 9]\nprint(pack_consecutive_duplicates(list1))  # Output: [[1, 1], [2], [3], [4, 4, 4], [5], [6, 6], [7], [8, 9, 9]]\n\n\n# Solution:\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Pack consecutive duplicates of a list into sublists.\n    \"\"\"\n    result = []\n    temp_list = []\n    prev = None\n    for i in list1:\n        if i == prev:\n            temp_list.append(i)\n        else:\n            if temp_list:\n                result.append(temp_list)\n                temp_list = [i]\n        prev = i\n   ",
        "generated_testcode": "",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Counts the number of unique sublists within a list.\n    :param list1: A list of sublists\n    :return: The number of unique sublists\n    \"\"\"\n    unique_sublists = []\n    for sublist in list1:\n        if sublist not in unique_sublists:\n            unique_sublists.append(sublist)\n    return len(unique_sublists)\n\n\n# Test cases\nprint(unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3, 4], [4, 5, 6])) # Output: 3\nprint(unique_sublists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4, 5], [4, 5, 6])) # Output: 3\nprint(unique_sublists([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [4, 5, 6, 7], [4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9])) # Output: 4 ",
        "generated_testcode": "assert unique_sublists([1, 2, 3, 4, 5]) == 10\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.append((test_list[i], test_list[j]))\n    return result\n\n# Example usage:\ntest_list = (1, 2, 3, 4, 5)\nprint(find_combinations(test_list)) # Output: [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5)]\n\n\n# Another approach to solve the same problem:\ndef find_combinations_v2(test_list):\n    return [(test_list[i], test_list[j]) for i in range(len(test_list)) for j in range(i+1, len(test_list))]\n\n# Example usage:\ntest_list = (1, 2, 3, 4, 5)\nprint(find_combinations_v2(test_list)) # Output: [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5)] ",
        "generated_testcode": "assert find_combinations([1, 2, 3, 4]) == [(1, 2, 3), (1, 4), (2, 3), (1, 2, 4), (3, 4)]\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    cnt = 0 \n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            cnt += 1\n    return cnt \n  \nn = int(input(\"Enter a number: \"))\nif count_Divisors(n) % 2 == 0: \n    print(\"The count of divisors of\", n, \"is even\") \nelse: \n    print(\"The count of divisors of\", n, \"is odd\") ",
        "generated_testcode": "assert count_Divisors(12) == 0\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(arr)\n    sum_odd = []\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2 != 0:\n                sum_odd.append(sum(arr[i:j+1]) * (j-i+1))\n    return sum(sum_odd)\n\n\n# test the function with sample input\narr = [1, 4, 2, 5, 4, 8, 2]\nprint(Odd_Length_Sum(arr))  # Output: 49 ",
        "generated_testcode": "",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    r, g, b = r/255.0, g/255.0, b/25.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = int(hue * 60)\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        sat = 0\n    else:\n        sat = delta / cmax\n\n    val = cmax\n\n    return hue, sat, val\n\n# Example usage:\nh, s, v = rgb_to_hsv(0, 128, 255)\nprint(h, s, v)  # Output: 240 1.0 1.0\n\n# Convert the hsv back to rgb to verify the output\ndef hsv_to_rgb(h, s, v):\n    if s == 0.0:\n        return v, v, v\n    i = int(h / 60) % 6\n    f = (h /",
        "generated_testcode": "assert rgb_to_hsv(1, 1, 1) == (0, 0, 1)\n\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even, odd\n\n\n\n# Test the function with a list\nlist1 = [2, 3, 4, 6, 8, 10, 12, 15, 18]\neven, odd = mul_even_odd(list1)\nprint(\"Product of even numbers:\", even)\nprint(\"Product of odd numbers:\", odd)\n",
        "generated_testcode": "assert mul_even_odd([1,2,3,4,5,6,7,8,9]) == (384, 16) # Test case 1\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_tuple = tuple(int(num) for num in test_str[1:-1].split(','))\n    return new_tuple\n\n# example usage:\ntest_str = \"(1, 2, 3, 4)\"\nprint(tuple_str_int(test_str)) # Output: (1, 2, 3, 4)\n\n\n# Convert tuple to list\ndef tuple_to_list(test_tuple):\n    return list(test_tuple)\n\n# example usage:\ntest_tuple = (1, 2, 3, 4)\nprint(tuple_to_list(test_tuple)) # Output: [1, 2, 3, 4]\n\n# Convert list to tuple\ndef list_to_tuple(test_list):\n    return tuple(test_list)\n# example usage:\ntest_list = [1, 2, 3, 4]\nprint(list_to_tuple(test_list)) # Output: (1, 2, 3, 4) ",
        "generated_testcode": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low + 1\n\n# Example usage:\na = [1, 3, 4, 5, 7, 9, 10, 15]\nx = 6\nprint(right_insertion(a, x))  # Output: 3 ",
        "generated_testcode": "assert right_insertion([1, 3, 4, 5, 7, 9], 6) == 2\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    # using regular expressions\n    import re\n    return bool(re.search(r'a[b]{3}', text))\n\n    # or using string slicing\n    for i in range(len(text) - 2):\n        if text[i] == 'a' and text[i+1:i+4] == 'bbb':\n            return True\n    return False\n\n# Test cases\nprint(text_match_three(\"abbb\")) # True\nprint(text_match_three(\"abb\")) # False\nprint(text_match_three(\"abbbbc\")) # True\nprint(text_match_three(\"abcbdbcbbb\")) # True\nprint(text_match_three(\"abbbbb\")) # False ",
        "generated_testcode": "assert text_match_three(\"abbb\") == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list and a string as input and returns a tuple where the string is the first element of the tuple and\n    the list is the second element.\n    \"\"\"\n    return (test_str, tuple(test_list))\n\n\n# Test the function with sample inputs\nprint(new_tuple([\"apple\", \"banana\", \"cherry\"], \"fruits\")) # Output: (\"fruits\", (\"apple\", \"banana\", \"cherry\"))\nprint(new_tuple([1, 2, 3, 4, 5], \"numbers\")) # Output: (\"numbers\", (1, 2, 3, 4, 5)) ",
        "generated_testcode": "assert new_tuple(['apple', 'banana', 'cherry'], 'fruit') == ('fruit', 'apple', 'banana', 'cherry')\n\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    p = s * l\n    return p\n\n# Where s is the number of sides and l is the length of each side. \n# The formula for the perimeter of a polygon is the number of sides times the length of each side. ",
        "generated_testcode": "assert perimeter_polygon(5, 3) == 15\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(0,len(nums)):\n        if i%2==0 and nums[i]%2!=0:\n            return False\n    return True\n\n#test the function with examples\nprint(even_position([2,3,4,6,7,8,10]) # True\nprint(even_position([2,3,5,6,8,9]) # False\nprint(even_position([1,2,3,4,5,6,7,8]) # True ",
        "generated_testcode": "assert even_position([2, 3, 4, 6, 8, 10, 11, 12]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function removes a nested record from the given tuple.\n    \"\"\"\n    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result.extend(i)\n        else:\n            result.append(i)\n    return tuple(result)\n\n# Test the function with an example\ntest_tup = (1, 2, 3, (4, 5, 6), 7, (8, 9, (10, 11), 12), 13)\nprint(remove_nested(test_tup)) # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13) ",
        "generated_testcode": "",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count ",
        "generated_testcode": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    low = 0\n    high = n-1\n    while(low<=high):\n        mid = (low+high)//2\n        if arr[mid] == x:\n            if mid == n-1 or arr[mid+1]>x:\n                return mid\n            else:\n                low = mid+1\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n\n#test the function with example\narr = [1,2,3,4,4,4,4,5,6,7,8,9]\nx = 4\nn = len(arr)\nprint(last(arr,x,n)) #output 3 (index of the last occurrence of 4) ",
        "generated_testcode": "assert last([1,2,3,4,5,6,7,8,9],8,6) == 5\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    start = text.startswith('a')\n    end = text.endswith('b')\n    if start and end:\n        return True\n    else:\n        return False\n\nprint(text_starta_endb('a123b')) # True\nprint(text_starta_endb('ab')) # True\nprint(text_starta_endb('123a456b')) # False\nprint(text_starta_endb('123ab')) # False\nprint(text_starta_endb('abcd')) # False\nprint(text_starta_endb('acdba')) # False\nprint(text_starta_endb('a123b4')) # True\nprint(text_starta_endb('a12bcdb')) # True ",
        "generated_testcode": "assert text_starta_endb(\"aab\") == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a heap\n    heap = []\n    \n    # loop through each item and add it to the heap\n    for item in items:\n        # add it to the heap\n        heapq.heappush(heap,item)\n        \n        # if the heap is greater than n, remove the largest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # return the heap\n    return heap\n\n# time complexity: O(nlogn)\n# space complexity: O(n) ",
        "generated_testcode": "",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n\n#test the function\ndict = {'a': 100, 'b':200, 'c':300, 'd':400}\nprint(\"Sum of the dictionary is:\", return_sum(dict)) #Output: Sum of the dictionary is: 700 ",
        "generated_testcode": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n * (n + 1))\n\ndef sum_even(n): \n    return (n * (n + 1) + 1) // 2\n\ndef sum_odd_even(l, r):\n    return sum_even(r) - sum_even(l - 1) + sum_Odd(l - 1)\n\nl = int(input())\nr = int(input())\nprint(sum_odd_even(l, r)) ",
        "generated_testcode": "assert sum_Odd(1, 10) == 25\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the sum of the elements in an array.\n    \"\"\"\n    return sum(arr)\n\n# Test the function with an example usage\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(_sum(arr)) # Output: 35 ",
        "generated_testcode": "assert _sum([1,2,3,4,5]) == 15\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    d = d%32    #To handle if d is greater than 32\n    return ((n<<d)|(n>>(32-d)))^(n<<d))\n\n#Test the function with example\nn = 16\nd = 4\nprint(left_Rotate(n,d))  #Output: 32\n\nn = 2345 \nd = 10\nprint(left_Rotate(n,d))  #Output: 42594967296\n\nn = 32\nd = 15\nprint(left_Rotate(n,d))  #Output: 1342177728\n ",
        "generated_testcode": "assert left_Rotate(1234, 2) == 486\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return \"\".join(text.split())\n    \n# Test the function with an example\ntext = \"Hello world\"\nprint(remove_all_spaces(text)) # Output: \"Helloworld\" ",
        "generated_testcode": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n#Test the function with some examples\nprint(test_three_equal(1, 2, 3)) # Should print 0\nprint(test_three_equal(1, 2, 1)) # Should print 2\nprint(test_three_equal(1, 1, 1)) # Should print 3 ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    #find pivot point\n    low = 0\n    high = n-1\n    while low < high:\n        if arr[low]<arr[high]:\n            return 0\n        mid = (low + high) // 2\n        if arr[mid]>arr[mid+1]:\n            return mid+1\n        if arr[mid]<arr[low]:\n            high = mid\n        else:\n            low = mid+1\n    return n-1\n\n#Test the function with sample inputs\narr1 = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nn = len(arr1)\nprint(count_Rotation(arr1, n)) #Output: 4\n\narr2 = [10, 15, 20, 25, 30, 4, 5, 6]\nn = len(arr2)\nprint(count_Rotation(arr2, n)) #Output: 2\narr3 = [30, 40, 50, 10, 20, 60]\nn = len(arr3)\nprint(count_Rotation(arr3, n)) #Output: 3 ",
        "generated_testcode": "assert count_Rotation([15,16,19,20,25,1,3,6,12],6) == 2\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 0:\n        return False\n    x = n // 2\n    seen = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in seen:\n            return False\n        seen.add(x)\n    return True\n\n#Example\n#Test the function with some test cases\nprint(is_Perfect_Square(9)) #True\nprint(is_Perfect_Square(16)) #True\nprint(is_Perfect_Square(15)) #False\nprint(is_Perfect_Square(25)) #True ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize product as 1 \n    product = 1\n      \n    # Calculate the product of all elements of the array \n    for i in range(n): \n        product = product * arr[i] \n      \n    # If product is even return True else False \n    return (product % 2 == 0) ",
        "generated_testcode": "assert is_Product_Even([2,4,6,8],3) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes in a list of lists and returns the list with the maximum sum of its elements.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]\nprint(max_sum_list(lists))  # Output: [10, 11, 12] ",
        "generated_testcode": "",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Returns the length of maximum uppercase run in the given string.\n    \"\"\"\n    upper_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            upper_run = max(upper_run, current_run)\n            current_run = 0\n    return max(upper_run, current_run)\n\n\n# Test the function with sample inputs\nprint(max_run_uppercase(\"HELLOooo WORLD\"))  # Output: 5 (because \"HELLO\" has 5 uppercase characters)\nprint(max_run_uppercase(\"hello WORLD\"))   # Output: 1 (because \"W\" is the only uppercase character)\nprint(max_run_uppercase(\"HELLO WORLD\"))   # Output: 1 (because \"HELLO\" and \"WORLD\" have 1 uppercase character each)\nprint(max_run_uppercase(\"123aaaAAbc\"))    # Output: 3 (because \"aaaA\" has 3 uppercase characters)\nprint(max_run_uppercase(\"123aaaAABBC\"))   # Output: 3 (because \"aaaAA\" has 3 uppercase characters) ",
        "generated_testcode": "assert max_run_uppercase(\"Hello World\") == 1\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test the function with a list of numbers\nprint(first_odd([2, 4, 6, 8, 10, 3, 12, 1, 5, 7])) # Output: 3\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None ",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if K in test_tup:\n        return True\n    else:\n        return False\n\n#Example\ntest_tup = (1, 3, 5, 7, 9, 11)\nK = 3\nprint(check_K(test_tup, K))  # Output: True\n\n\n#Example\ntest_tup = (1, 5, 7, 9, 11)\nK = 4\nprint(check_K(test_tup, K))  # Output: False ",
        "generated_testcode": "assert check_K(('hello', 'K') == True)\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n\n# Test the function with some examples\nprint(check_smaller((1,2,3,4,5),(0,1,1,1)) ) # True\nprint(check_smaller((1,2,3,4,5),(0,1,2,0)) # False ",
        "generated_testcode": "assert check_smaller((1, 3, 5, 7, 9), (2, 3, 6, 8)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    my_list = [a,b,c,d]\n    count_dict = {}\n    for element in my_list:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    for key in count_dict:\n        for i in range(count_dict[key]):\n            print(key) ",
        "generated_testcode": "assert count_variable(1,2,3,4) == [1,2,2,3,3,3,3,4,4,4,4,4]\n\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n# Test cases\nprint(check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4), (5,6)]) == True)\nprint(check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4)]) == False)\nprint(check_identical([(1,2), (3,4), (5,6)], [(1,2), (4,3), (5,6)]) == False)\nprint(check_identical([], []) == True)\nprint(check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4), (6,5)]) == False)\nprint(check_identical([(1,2), (3,4), (5,6)], [(1,2), (3,4), (5,6), (7,8)]) == False) ",
        "generated_testcode": "assert check_identical([(1, 2), (3, 4), (5, 6)], [(5, 6), (3, 4), (1, 2)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if street.endswith('road'):\n        return street[:len(street)-3] + 'rd.'\n    else:\n        return street\n\n# Test cases\nprint(road_rd('Broadway'))\nprint(road_rd('Park street'))\nprint(road_rd('Broadway road'))\nprint(road_rd('Oxford street'))\nprint(road_rd('Washington avenue')) ",
        "generated_testcode": "assert (road_rd(\"123 Main Road\") == \"123 Main Rd.\")\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for _ in str1:\n        count += 1\n    return count\n\n# Test the function\nprint(string_length(\"Hello, World!\"))  # Output: 12\n\nprint(string_length(\"Python\"))      # Output: 6 ",
        "generated_testcode": "assert string_length(\"hello\") == 5\n\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = p*q\n    return area\n\nprint(\"Enter the length of the diagonal and the length of one side to find the area of the rombus\")\np = int(input(\"Enter the length of the diagonal: \"))\nq = int(input(\"Enter the length of one side: \"))\n\nprint(\"The area of the rombus is: \", rombus_area(p,q))\n\n\n#Test the function with p=10 and q=4\nprint(\"Testing the function with p=10 and q=4\")\nprint(rombus_area(10,4)) #Output: 40.0 ",
        "generated_testcode": "assert rombus_area(4, 5) == 12\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count_0 = 0\n    count_1 = 0\n    count_2 = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count_0 += 1\n        elif arr[i] == 1:\n            count_1 += 1\n        else:\n            count_2 += 1\n\n    for i in range(count_0):\n        arr[i] = 0\n    for i in range(count_0, count_0 + count_1):\n        arr[i] = 1\n    for i in range(count_0 + count_1, n):\n        arr[i] = 2\n    return arr\n\n\n\narr = [0, 1, 2, 2, 1, 0, 2, 0, 1, 1, 2, 1, 2, 0, 0, 0, 2]\nn = len(arr)\nprint(sort_by_dnf(arr, n))\n",
        "generated_testcode": "",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Clears all the values of the given tuple\n    \"\"\"\n    return ()\n\n\n# Test the function with a sample tuple\nmy_tuple = (4, 5, 7, 8, 9, 10)\nprint(clear_tuple(my_tuple)) # Output: ()\n\n\ndef clear_tuple(test_tup):\n    \"\"\"\n    Clears all the values of the given tuple\n    \"\"\"\n    return tuple(i for i in test_tup if False)\n\n\n# Test the function with a sample tuple\nmy_tuple = (4, 5, 7, 8, 9, 10)\nprint(clear_tuple(my_tuple)) # Output: () ",
        "generated_testcode": "assert clear_tuple((1, 2, 3, 4, 5)) == ()\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0, nums))\n\n#test\nnums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nm = 2\nn = 3\nprint(div_of_nums(nums,m,n)) #[2, 3, 4, 6, 8, 9, 12] ",
        "generated_testcode": "assert div_of_nums([1,2,3,4,5,6,7,8,9,10],2,3) == [2,3,4,6,8,9]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    ctr = 0\n    for i in str:\n        if i.islower():\n            ctr += 1\n    return ctr\n\n#test the function\nstring = \"HelLo World\"\nprint(\"Number of lowercase letters in the string: \", lower_ctr(string)) ",
        "generated_testcode": "assert lower_ctr(\"Hello World\") == 8\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            count += 1\n    return count\n\n#Test the function with example\nlists = [1,2,2,3,4,4,4,4,5,6,6,6,7,7,7,7]\nprint(count_duplic(lists)) # Output: 3 ",
        "generated_testcode": "",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum1 == 2:\n        return True\n    else:\n        return False\n\n# Example usage:\nmonthnum = 2\nprint(check_monthnum_number(monthnum))  # True ",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dict = {**dict1, **dict2}\n    return merged_dict\n\n# Test the function\ndict1 = {\"a\":1, \"b\":2, \"c\":3}\ndict2 = {\"d\":4, \"e\":5, \"f\":6}\nprint(merge_dictionaries(dict1,dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} ",
        "generated_testcode": "assert merge_dictionaries({\"a\":1, \"b\":2}, {\"b\":3, \"c\":4}) == {\"a\":1, \"b\":3, \"c\":4}\n\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(p)<6 or len(p)>12:\n        return False\n    elif not any(char.isdigit() for char in p) or not any(char.isupper() for char in p) or not any(char.islower() for char in p):\n        return False\n    elif any(char.isspace() for char in p):\n        return False\n    else:\n        return True\n\n# test cases\nprint(pass_validity('vishnu@123')) # True\nprint(pass_validity('Vishnu@123')) # False\nprint(pass_validity('vishnu123')) # False\nprint(pass_validity('Vishnu123')) # False\nprint(pass_validity('Vishnu 123')) # False\nprint(pass_validity('Vishnu123@')) # False\nprint(pass_validity('Vishnu123@1')) # False\nprint(pass_validity('Vishnu@123!')) # False\nprint(pass_validity('Vishnu@123!')) # True\nprint(pass_validity('vishnu123!@#')) # True\nprint(pass_validity('vishnu123!@#')) # False ",
        "generated_testcode": "assert pass_validity(\"Abc12345\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if re.match('^'+sample, string) : \n        return True\n    else : \n        return False\n\nimport re \n# Example usage \nstring = \"hello world\"\nsample = \"hello\"\nif check_substring(string, sample) : \n    print(f\"{sample} is present at the start of {string}\") \nelse : \n    print(f\"{sample} is not present at the start of {string}\") ",
        "generated_testcode": "assert check_substring(\"hello world\", \"hello\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in l:\n        if i % 2 != 0:\n            new_list.append(i)\n    return new_list\n\n\n# Test the function with a sample list\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(remove_even(l))  # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for index in list_index:\n        if index >= len(nums) or index < 0:\n            result.append(None)\n        else:\n            result.append(nums[index])\n    return result\n\n#Test the function with sample inputs:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [0, 3, 5, 7, 10]\nprint(access_elements(nums, list_index)) #[1, 4, 6, None] ",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5, 6, 7, 8], [1, 3, 4]) == [2, 4, 5]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a==b==c: \n        return \"Equilateral Triangle\"\n    elif a==b or a==c or b==c: \n        return \"Isosceles Triangle\" \n    else: \n        return \"Scalene Triangle\"\na=int(input(\"Enter first side: \"))\nb=int(input(\"Enter second side: \"))\nc=int(input(\"Enter third side: \"))\nprint(check_Type_Of_Triangle(a,b,c))\n ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Scalene\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    column = [row[C] for row in list1]\n    return sum(column)\n\n# Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsum_column(my_list, 1) # returns 11 (2+5+8)\nsum_column(my_list, 2) # returns 14 (3+6+9) ",
        "generated_testcode": "assert sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 12\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    alpha_count = 0\n    digit_count = 0\n    spl_count = 0\n    for char in string:\n        if char.isalpha():\n            alpha_count += 1\n        elif char.isdigit():\n            digit_count += 1\n        else:\n            spl_count += 1\n    return (alpha_count, digit_count, spl_count)\n\n\n# test the function\nprint(count_alpha_dig_spl(\"Hello, World! 123\")) # Output: (8, 3, 2)\nprint(count_alpha_dig_spl(\"Hello, World 123\")) # Output: (8, 3, 1)\nprint(count_alpha_dig_spl(\"Hello, World.\")) # Output: (8, 0, 2) ",
        "generated_testcode": "assert count_alpha_dig_spl(\"Hello World! 123\") == (10, 3, 1) # Testing with a string containing alphabets, digits and special characters\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    input_dict = {}\n    for i in input:\n        if i in input_dict:\n            input_dict[i] += 1\n        else:\n            input_dict[i] = 1\n    \n    sorted_dict = sorted(input_dict.items(), key=lambda x: x[1], reverse=True)\n    second_max = None\n    for i in range(1, len(sorted_dict)):\n        if sorted_dict[i][1] != sorted_dict[0][1]:\n            second_max = sorted_dict[i][0]\n            break\n    return second_max\n    \ninput = [\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"orange\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"grape\"]\nprint(second_frequent(input)) # Output: \"banana\" ",
        "generated_testcode": "assert second_frequent(['apple', 'banana', 'apple', 'orange', 'banana', 'apple', 'orange', 'orange']) == 'banana'\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    n = 10 ** digits\n    return int(a * n + 0.5) / n\n\n# Test the function with an example\nnum = 3.1415926\nrounded = round_up(num, 2)\nprint(rounded)  # Output: 3.15\n\n\n# Explanation:\n# The function takes two arguments, a and digits, where a is the number to be rounded up and digits is the number of decimal places to which it should be rounded up.\n# We first find the power of 10 corresponding to the number of digits using 10 ** digits and store it in the variable n.\n# We then multiply the number by this power of 10, add 0.5 and then divide the result by the same power of 10. This effectively rounds the number to the desired number of decimal places.\n# Finally, we convert the result to an integer and return it. ",
        "generated_testcode": "assert round_up(123.4567, 1) == 123.5\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i] == arr[j]: \n                count += 1\n    return count\n\n#Taking input from user\narr = list(map(int, input().split())\nn = len(arr)\n\nprint(count_Pairs(arr,n))\n\n\"\"\"\nInput:\n4 2 4 2 6 6 8 8\n\nOutput:\n2\n\"\"\" ",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],9) == 3\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    # Using regex to find all numeric values in the input string \n    nums = re.findall(r'\\d+', input) \n    # Converting the list of strings to a list of integers \n    nums = [int(num) for num in nums] \n    # Returning the maximum value from the list of integers \n    return max(nums) ",
        "generated_testcode": "assert extract_max(\"The maximum number is 23\") == 23\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n#Example\nexample_dict = {\"apple\": 2, \"banana\": 3, \"orange\": 1}\nprint(get_key(example_dict))  # Output: [\"apple\", \"banana\", \"orange\"]\n\n\n#Solution:\ndef get_key(dict):\n    return list(dict.keys())\n\n#Example\nexample_dict = {\"apple\": 2, \"banana\": 3, \"orange\": 1}\nprint(get_key(example_dict))  # Output: [\"apple\", \"banana\", \"orange\"] ",
        "generated_testcode": "assert get_key({\"a\": 1, \"b\": 2, \"c\": 3}) == [\"a\", \"b\", \"c\"]\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    matrix = [[0] * n for i in range(n)]\n    row_start, row_end, col_start, col_end = 0, n-1, 0, n-1\n    num = 1\n    while row_start <= row_end and col_start <= col_end:\n        for i in range(col_start, col_end+1):\n            matrix[row_start][i] = num\n            num += 1\n        row_start += 1\n        for i in range(row_start, row_end+1):\n            matrix[i][col_end] = num\n            num += 1\n        for i in range(col_end, col_start-1, -1):\n            matrix[row_end][i] = num\n            num += 1\n        col_end -= 1\n        for i in range(row_end, row_start-1, -1):\n            matrix[i][col_start] = num\n            num += 1\n        col_start += 1\n    for i in matrix:\n        print(i)\n    return matrix\n\n# Test the function\ngenerate_matrix(5) ",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x2-x1 == 0:\n        return \"Infinite\"\n    else:\n        return (y2-y1)/(x2-x1) \nx1 = 1\ny1 = 2\nx2 = 4\ny2 = 8\nprint(\"The slope of the line is\", slope(x1,y1,x2,y2)) ",
        "generated_testcode": "assert slope(0,0,1,1) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size): \n        max_ending_here += a[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        elif max_so_far < max_ending_here: \n            max_so_far = max_ending_here \n    return max_so_far \n\n# Driver function to test above function \na = [-2, -3, 4, -1, -2, -1, 5, -3] \nsize = len(a) \nprint(\"Maximum Subarray sum is\", max_sub_array_sum(a,size))\n\n\n# Output: 7 ",
        "generated_testcode": "assert max_sub_array_sum([1,2,3,-100,4,5,6,-1,2,3],6) == 9\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    count = 0\n    for i in range(1, n+1): \n        if i % 2 != 0: \n            sum += i**3 \n            count += 1\n    return sum ",
        "generated_testcode": "assert cube_Sum(3) == 35 ",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(s1) \n    # create two arrays and store count of 0's and 1's in both strings \n    count_s1 = [0, 0] \n    count_s2 = [0, 0] \n    for i in range(n) : \n        if s1[i] == '0': \n            count_s1[0] += 1\n        else : \n            count_s1[1] += 1\n        if s2[i] == '0': \n            count_s2[0] += 1\n        else : \n            count_s2[1] += 1\n    # if both strings are same, no swaps needed \n    if s1 == s2 : \n        return 0\n    # if xor of both strings is 1, then not possible to make them equal \n    if bin(int(s1, 2)^int(s2, 2)) == 1 : \n        return -1\n    # find count of minority and majority elements \n    if count_s1[0] < count_s1[1] : \n        count_s1[0], count_s1[1] = count_s1[1], count_s1[0] \n    if count_s2[0] < count_s2[1] : \n        count_s2[0], count_s2[1] = count_s2[1], count_s2[0",
        "generated_testcode": "assert min_Swaps(\"10101010101010\", \"0101010101011\") == 2\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    tup.sort(key=lambda x: x[0]) \n    return tup \n\n# Example usage: \ntup = [('John', 'Doe'), ('Bill', 'Smith'), ('Adam', 'Johnson'), ('Alice', 'Brown')] \nprint(sort_tuple(tup)) # Output: [('Adam', 'Johnson'), ('Alice', 'Brown'), ('Bill', 'Smith'), ('John', 'Doe')] ",
        "generated_testcode": "",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import math\n    discriminant = b**2 - 4*a*c  \n    if discriminant < 0: \n        return \"No real roots possible\"\n    elif discriminant == 0: \n        root = -b / (2.0 * a) \n        return \"Twin Roots: \",root\n    else: \n        root1 = (-b + math.sqrt(discriminant)) / (2.0 * a) \n        root2 = (-b - math.sqrt(discriminant)) / (2.0 * a) \n        if(root1 * root2 < 0): \n            return \"Roots are numerically opposite in sign\"\n        else: \n            return \"Roots are not opposite in sign\"\na = int(input(\"Enter the coefficient of a: \"))\nb = int(input(\"Enter the coefficient of b: \"))\nc = int(input(\"Enter the constant term: \"))\nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n  \n    return inv_count \n# Driver Code \narr = [5, 4, 3, 2, 1]\nn = len(arr) \nprint(\"Number of inversions are:\", get_inv_count(arr, n)) ",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6, 7, 8]) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n    return -1\n \narr = [2, 3, 5, 2, 6, 6, 9, 5, 3, 9, 9]\narr_size = len(arr)\nresult = get_odd_occurence(arr, arr_size)\nif result != -1:\n    print(\"The number with odd occurrence is:\", result)\nelse:\n    print(\"There is no number with odd occurrence.\") ",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 2, 3, 4, 5, 4, 5, 6, 6, 7, 7]) == 1\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    uglies = [1]\n    indices = [0] * len(primes)\n    uglies_set = set()\n    heapq.heapify(primes)\n\n    for i in range(n - 1):\n        next_ugly = heapq.heappop(primes)\n        uglies.append(next_ugly)\n        uglies_set.add(next_ugly)\n        for j in range(len(primes)):\n            while primes[j] % uglies[indices[j] == 0:\n                indices[j] += 1\n            heapq.heappush(primes, primes[j] * uglies[indices[j])\n    return uglies[-1]\n\n# Time: O(n log k)\n# Space: O(n) + O(k)\n\n# Test case\nprimes = [2, 3, 5]\nn = 10\nprint(nth_super_ugly_number(n, primes))  # Output: 120\n\nprimes = [2, 7, 13, 19]\nn = 10\nprint(nth_super_ugly_number(n, primes))  # Output: 320\n\nprimes = [2, 3, 5, 7]\nn = 10\nprint(nth_super_ugly_number(n, primes))  # Output: 36",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    odd = [] \n    even = [] \n    for i in range(1, n + 1): \n        if i % 2 != 0: \n            odd.append(i) \n        else: \n            even.append(i) \n    if k <= len(odd): \n        return odd[k - 1] \n    else: \n        return even[k - len(odd) - 1] \n  \nn = 10\nk = 7\nprint(get_Number(n, k)) ",
        "generated_testcode": "assert get_Number([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    fact = 1 \n    for i in range(1, n+1): \n        fact = fact*i \n    return len(str(fact)) \n\n# Test the function with sample inputs\nn = 5\nprint(\"Factorial of\", n, \"is\", find_Digits(n)) \nn = 12\nprint(\"Factorial of\", n, \"is\", find_Digits(n)) \nn = 25\nprint(\"Factorial of\", n, \"is\", find_Digits(n)) \nn = 100\nprint(\"Factorial of\", n, \"is\", find_Digits(n)) ",
        "generated_testcode": "assert find_Digits(0) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": " \n    # Sort arrival and departure time \n    arr.sort() \n    dep.sort() \n  \n    # Initialize a variable to keep track of required platforms \n    platform_required = 1\n  \n    # Initialize variables to keep track of platform use \n    i = 1\n    j = 0\n    curr_platforms = 1\n  \n    # Traverse arrival and departure arrays \n    while i < n and j < n: \n        if arr[i] <= dep[j]: \n            curr_platforms += 1\n            i += 1\n  \n        elif arr[i] > dep[j]: \n            curr_platforms -= 1\n            j += 1\n  \n        # Update the minimum number of platforms needed \n        platform_required = max(platform_required, curr_platforms)\n  \n    return platform_required ",
        "generated_testcode": "",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ys = []\n    for x in xs:\n        ys.append(x)\n    return ys\n\n# Test the function with a singleton tuple\nxs = (42,)\nys = lcopy(xs)\nprint(xs)  # Output: (42,)\nprint(ys)  # Output: [42]\n\n\n# Test the function with an empty tuple\nxs = ()\nys = lcopy(xs)\nprint(xs)  # Output: ()\nprint(ys)  # Output: [] ",
        "generated_testcode": "assert lcopy((1,) == [1]) == True\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    area = (base1+base2)*height/2\n    return area\n\n#test the function\nprint(area_trapezium(10, 20, 30) ) # Output: 450\nprint(area_trapezium(5, 8, 12) ) # Output: 42\nprint(area_trapezium(8, 13, 16) ) # Output: 1444\n\n\n\n# Write a function to find the sum of n natural numbers.\ndef sum_of_n_natural_numbers(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n\n#test the function\nprint(sum_of_n_natural_numbers(10)) # Output: 555\nprint(sum_of_n_natural_numbers(15)) # Output: 120\nprint(sum_of_n_natural_numbers(7)) # Output: 28\n\n\n# Write a function to find the factorial of a number\ndef factorial(n):\n    fact = 1\n    for i in range(1,n+1):\n        fact *= i\n    return fact\n\n#test the function\nprint(factorial(5)) # Output: 120\nprint(factorial(8)) # Output: 40320\nprint(factorial(3)) # Output: 6\n\n# Write a function to find the average of a",
        "generated_testcode": "assert area_trapezium(4,6,5) == 7.5\n\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, N+1): \n        if N % i == 0: \n            for j in range(2, i+1): \n                if i % j == 0 and N/j == i/j: \n                    sum += j\n    return sum \n  \n# Driver program to test the function \nN = int(input(\"Enter a number: \"))\nprint(\"Sum of prime divisors of\", N, \"is\", Sum(N)) ",
        "generated_testcode": "assert Sum(10) == 17\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if a+b>c and b+c>a and c+a>b:\n        return True\n    else:\n        return False\n\n# Test the function with sample test cases\nprint(is_triangleexists(45, 60, 75)) # True\nprint(is_triangleexists(45, 60, 120)) # False\nprint(is_triangleexists(120, 60, 45)) # True\nprint(is_triangleexists(120, 60, 30)) # False\nprint(is_triangleexists(30, 60, 45)) # True ",
        "generated_testcode": "assert is_triangleexists(30, 60, 1120) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in range(1,N+1):\n        if(N%i==0):\n            Sum+=i\n    return Sum\n\n# Test the function\nN = 6\nSum = 0\nprint(Sum_of_Inverse_Divisors(N,Sum)) # Output 12 ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12) == 28 \n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = [num for num in num_list if num >= 0]\n    return new_list\n\n#Example:\n#Input: [3, -5, 8, -2, 0, -9, 6]\n#Output: [3, 8, 0, 6]\n#Explanation: The function removes -5 and -2 from the list since they are negative numbers. ",
        "generated_testcode": "assert remove_negs([1, -2, 3, -4, 5, -6, 7, -8, 9]) == [1, 3, 5, 7, 9]\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1, 1):\n        if n % i == 0 and i % 2 != 0:\n            sum += i\n    return sum\n\n# test the function\nn = 15\nprint(sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(10) == 11\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    heap = []\n    for i in rawheap:\n        heappush(heap, i)\n    return heap\n\n# Example usage:\nrawheap = [5, 8, 6, 2, 9, 1, 3, 7]\nheap = raw_heap(rawheap)\nprint(heap)  # Output: [1, 3, 5, 7, 8, 6, 9, 2]\n\n\n# The above function raw_heap takes an arbitrary list as input and converts it to a heap using the heappush method. The heappush method is used to push each element of the list onto the heap and maintain the heap property. The output will be a min-heap. To convert it to a max-heap, we can simply invert the sign of the values before pushing them onto the heap, as shown below:\ndef raw_maxheap(rawheap):\n    heap = []\n    for i in rawheap:\n        heappush(heap, -i)\n    return [-i for i in heap]\n\n# Example usage:\nrawheap = [5, 8, 6, 2, 9, 1, 3, 7]\nmaxheap = raw_maxheap(rawheap)\nprint(maxheap)  # Output: [9, 8, 7, 6, 5, 1, 3, 2]\n\n\n# Note that the function returns a list of the invert",
        "generated_testcode": "",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False \n\n# Test the function with an example number\nprint(check_Even_Parity(10)) # Output: True \nprint(check_Even_Parity(7)) # Output: False ",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    count = 0\n    while i < n :\n        if arr[i] == 0 :\n            j = i + 1\n            while j < n :\n                if arr[j] == 1 :\n                    arr[i], arr[j] = arr[j], arr[i]\n                    count += 1\n                    break\n                j += 1\n            i += 1\n        else :\n            i += 1\n    return count\n\n# Test the function with an example array\narr = [0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0]\nn = len(arr)\nprint(find_Min_Swaps(arr, n)) ",
        "generated_testcode": "",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(str, list1))\n    \n#Example\n#list1 = [1, 2, 3, 4, 5, 6]\n#print(listify_list(list1))\n# Output: ['1', '2', '3', '4', '5', '6'] ",
        "generated_testcode": "assert listify_list([\"apple\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\", \"cherry\"]\n\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0 \n    for i in input_list: \n        if type(i) == list: \n            count += 1 \n    return count**2 \n\ninput_list = [[1,2,3],[4,5,6],[7,8,9]] \nprint(count_list(input_list)) # Output: 9\n\n\ninput_list = [[1,2,3],[4,[5,6,[7,8,9],10],11]] \nprint(count_list(input_list)) # Output: 16\n\n\ninput_list = [1,2,3,[4,5,[6,7,[8,9]]] \nprint(count_list(input_list)) # Output: 0\n\n\ninput_list = [] \nprint(count_list(input_list)) # Output: 0 ",
        "generated_testcode": "assert count_list([[1,2,3], [4,5,6], [7,8,9,10]]) == 3\n\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sub_list = [[]]\n    for i in range(len(my_list)+1):\n        for j in range(len(my_list)-i+1):\n            sub_list += [my_list[j:j+i] ]\n    return sub_list\n\n\n# Test the function with an example\nmy_list = [1, 2, 3, 4]\nprint(sub_lists(my_list)) ",
        "generated_testcode": "assert sub_lists([1, 2, 3]) == [[], [1], [2], [3], [1, 2], [2, 3], [1, 2, 3]]\n\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'[a-zA-Z0-9]+$'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False\n\n# Testing the function\nprint(check_alphanumeric('Hello1234')) # True\nprint(check_alphanumeric('Hello!1234')) # False\nprint(check_alphanumeric('Hello there!')) # False\nprint(check_alphanumeric('Hello there1234')) # False\nprint(check_alphanumeric('12345')) # True ",
        "generated_testcode": "assert check_alphanumeric(\"hello123\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x:sorted(x)==sorted(str),texts)\n\n\n#Example:\ntexts = ['cat', 'dog', 'tac', 'god', 'act', 'port', 'star']\nstr = 'tac'\nprint(anagram_lambda(texts,str)) # Output: ['tac', 'cat', 'act']\n\n\ntexts = ['listen', 'silent', 'enlist', 'apple', 'melon', 'lemon', 'listen']\nstr = 'silent'\nprint(anagram_lambda(texts,str)) # Output: ['silent', 'listen'] ",
        "generated_testcode": "assert anagram_lambda(['arc','car','tab','bat','madam','mom','hello','listen'],'tab') == ['car']\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    # Convert the text to lowercase\n    text = text.lower()\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Create an empty dictionary to store the word count\n    word_count = {}\n    \n    # Iterate through the words and count their frequency\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    \n    # Sort the dictionary by the frequency of the words\n    sorted_words = sorted(word_count, key=word_count.get, reverse=True)\n    \n    # Return the n most common words\n    return sorted_words[:n]\n\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog. The lazy dog slept over the verandah. The dog slept all day long.\"\nn = 2\nprint(n_common_words(text, n))  # Output: ['the', 'dog'] ",
        "generated_testcode": "assert n_common_words(\"This is a test. This is only a test. This is something else.\", 1) == [\"this\"]\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create an empty hash set to store all elements of the given array \n    s = set() \n    for i in range(n): \n        s.add(arr[i]) \n    # initialize variables to store the maximum length of the subsequences \n    ans = 0\n    # loop through the array and check for each element \n    for i in range(n): \n        # if the current element is the starting element of a subsequence, check for next consecutive elements \n        if (arr[i]-1) not in s: \n            j = arr[i] \n            # increment the length of subsequence until the next consecutive element is not found in the set \n            while j in s: \n                j += 1\n            ans = max(ans, j-arr[i]) \n    return ans ",
        "generated_testcode": "",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return list(filter(lambda x: x == x[::-1], texts)\n\n\n# Test the function\nprint(palindrome_lambda([\"hello\", \"racecar\", \"python\", \"tacocat\", \"aba\", \"abba\", \"cat\"])) # ['aba', 'abba'] ",
        "generated_testcode": "assert palindrome_lambda(['racecar', 'python', 'deified', 'civic', 'apple', 'radar', 'rotor', 'python', 'madam']) == ['racecar', 'deified', 'civic', 'rotor']\n\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return map(lambda x: n*x,nums)\n\nnums = [1, 2, 3, 4, 5]\nn = 3\nresult = list(ntimes_list(nums,n))\nprint(result)\n\n# Output: [3, 6, 9, 12, 15] ",
        "generated_testcode": "assert ntimes_list([1,2,3],3) == [1,2,3,1,2,3,1,2,3]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if monthname2 == \"January\" or monthname2 == \"March\" or monthname2 == \"May\" or monthname2 == \"July\" or monthname2 == \"August\" or monthname2 == \"October\" or monthname2 == \"December\":\n        return True\n    else:\n        return False\n\n#Example usage:\nmonthname2 = \"January\"\nprint(check_monthnumb(monthname2) # True\nmonthname2 = \"February\"\nprint(check_monthnumb(monthname2) # False ",
        "generated_testcode": "assert check_monthnumb(\"January\") == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort() \n    min_sum = 0 \n    count = 0 \n    i = 0 \n    j = n-1 \n    while i < j: \n        if arr[i] + arr[j] == 0: \n            i += 1\n            j -= 1 \n        elif arr[i] + arr[j] < 0: \n            i += 1 \n        else: \n            j -= 1 \n            if arr[i] + arr[j] != 0: \n                min_sum += arr[i] + arr[j] \n                count += 1 \n    if count%2 != 0: \n        min_sum += arr[n-1] \n    return min_sum \n\n# Test the function with an example\narr = [-2, 5, 3, 1, -4, 8, 7] \nn = len(arr) \nprint(min_Num(arr, n)) ",
        "generated_testcode": "assert min_Num([1, 2, 3, 4, 5, 6]) == 2\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    a = a.strip()\n    count = 0\n    for i in range(len(a)-1, -1, -1):\n        if a[i] == ' ':\n            break\n        else:\n            count += 1\n    return count ",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes two arguments:\n    1. list1: A list of lists\n    2. leftrange: The left range of sublists to keep\n    3. rigthrange: The right range of sublists to keep\n    and returns a list of lists, where all sublists outside of the given range are removed.\n    \"\"\"\n    return [sublist for sublist in list1[leftrange:rigthrange+1] if len(sublist) > 0] ",
        "generated_testcode": "",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return sum(filter(lambda x: x>0,nums))\n# Test the function with a sample list of numbers\n# Example:\nnums = [3, -5, 8, 12, 1, 0, -9, 15, 21, -3, 4]\nprint(sum_positivenum(nums)) # Output: 35 ",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5, -6, 7, 8, -9, 10]) == 25\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(string1) != len(string2): \n        return False\n    s = string1 + string1 \n    if string2 in s: \n        return True\n    else: \n        return False\n\nstring1 = \"ABACD\"\nstring2 = \"ACDB\"\nif are_Rotations(string1, string2): \n    print(\"Strings are rotations of each other\")\nelse: \n    print(\"Strings are not rotations of each other\") ",
        "generated_testcode": "assert are_Rotations(\"abcde\", \"cdeab\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\ndef nested_list_subset(list1, list2):\n    for i in range(len(list1)):\n        if type(list1[i]) == list and type(list2[i]) == list:\n            if not check_subset(list1[i], list2[i]):\n                return False\n        elif list1[i] not in list2:\n            return False\n    return True\n\n#Test Cases\n#Test case 1\nl1 = [[1,2], [3,4], [5,6]]\nl2 = [[1,2], [3,4], [5,6], [7,8], [9,10]]\nprint(nested_list_subset(l1, l2)) # True\n\n\n#Test case 2\nl3 = [[1,2], [3,4], [5,6]]\nl4 = [[1,2], [3,4], [7,8], [9,10]]\nprint(nested_list_subset(l3, l4)) # False\n\n\n#Test case 3\nl5 = [[1,2], [3,4], [5,6]]\nl6 = [[1,2], [3,4], [5,6]]\nprint(nested_list_subset(l5, l6)) # True\n\n\n#Test case 4\nl7 = [1,2,3]\nl8",
        "generated_testcode": "assert check_subset([[1,2],[3,4,5])([1,2,3,4,5]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return (fibonacci(n-1) + fibonacci(n-2))\n    \n# test the function\nprint(fibonacci(6)) # should print 8\nprint(fibonacci(7)) # should print 13\nprint(fibonacci(8)) # should print 21\nprint(fibonacci(0)) # should print 0\nprint(fibonacci(1)) # should print 1 ",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if str1==str2:\n        return True\n    elif len(str1)!=len(str2):\n        return False\n    elif len(str1)<2 or len(str2)<2:\n        return False\n    else:\n        for i in range(1,len(str1)):\n            if str1[i:]==str2[:-i] and str1[:i]==str2[len(str2)-i:]:\n                return True\n        return False\nprint(check_Concat(\"cat\",\"catdog\")) #False\nprint(check_Concat(\"cat\",\"tca\")) #True\nprint(check_Concat(\"cata\",\"tcagat\")) #True\nprint(check_Concat(\"cata\",\"tcag\")) #False\nprint(check_Concat(\"cat\",\"catcat\")) #True ",
        "generated_testcode": "assert (check_Concat(\"hello\",\"he\") == False)\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    min_diff = float('inf')\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n# Test\ntest_list = [(1, 5), (6, 2), (9, 4)]\nprint(min_difference(test_list)) # Output: 3 ",
        "generated_testcode": "",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        greater = x\n    else:\n        greater = y\n\n    while True:\n        if greater % x == 0 and greater % y == 0:\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\nprint(lcm(12, 16)) ",
        "generated_testcode": "assert lcm(12, 15) == 60\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    #Converting the string into list of characters\n    str = list(str) \n    #sorting the list of characters\n    str.sort() \n    #joining the sorted characters to form a string\n    return ''.join(str) ",
        "generated_testcode": "assert sort_String(\"hello\") == \"ehllo\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n# Test the function with a tuple of size 3\nmy_tuple = (1, 2, 3)\nK = 3\nif check_tuples(my_tuple, K):\n    print(\"The tuple contains only K elements\")\nelse:\n    print(\"The tuple does not contain only K elements\") ",
        "generated_testcode": "assert check_tuples((1, 2, 3), 3) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    return result != None\n\n# Example usage:\n# >>> text_match('ab')\n# True\n# >>> text_match('abc')\n# True\n# >>> text_match('acb')\n# False\n# >>> text_match('cab')\n# False\n# >>> text_match('aacbb')\n# True ",
        "generated_testcode": "assert text_match(\"a string with ab\") == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    d = b**2 - 4*a*c\n    if d < 0:\n        return 0\n    elif d == 0:\n        return 1\n    else :\n        return 2\n\n# Test the function with different values of a,b,c\na = 2\nb = 4\nc = 6\nprint(Check_Solution(a,b,c)) ",
        "generated_testcode": "assert (Check_Solution(1,2,3) == 1)\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i%2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return (even_sum, odd_sum)\n\n\n# test the function\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Original List: \",list1)\nresult = sum_even_odd(list1)\nprint(\"Sum of Even numbers: \",result[0])\nprint(\"Sum of Odd numbers: \",result[1]) ",
        "generated_testcode": "assert sum_even_odd([1,2,3,4,5,6,7,8,9]) == (12, 25)\n\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return 2*(b+h)\nb = float(input(\"Enter the length of the base: \"))\nh = float(input(\"Enter the height of the parallelogram: \"))\nprint(\"Perimeter of the parallelogram is:\", parallelogram_perimeter(b,h))\n\n\n#-----------------------------------------------------------------------------------------\n\nWrite a function to calculate the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\nl = float(input(\"Enter the length of the rectangle: \"))\nb = float(input(\"Enter the width of the rectangle: \"))\nprint(\"Area of the rectangle is:\", rectangle_area(l,b))\n\n#-----------------------------------------------------------------------------------------\n\nWrite a function to calculate the area of a triangle.\ndef triangle_area(b,h):\n    return 0.5*b*h\nb = float(input(\"Enter the base of the triangle: \"))\nh = float(input(\"Enter the height of the triangle: \"))\nprint(\"Area of the triangle is:\", triangle_area(b,h))\n\n#-----------------------------------------------------------------------------------------\n\nWrite a function to calculate the area of a circle.\nimport math\ndef circle_area(r):\n    return math.pi*r**2\nr = float(input(\"Enter the radius of the circle: \")\nprint(\"Area of the circle is:\", circle_area(r))\n\n#-----------------------------------------------------------------------------------------\n\nWrite a function to calculate the circumference of",
        "generated_testcode": "assert parallelogram_perimeter(6, 7) == 20\n\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(filter(lambda x: (x%m==0) and (x%n==0),nums))\n\n#test the function\nnums = [12, 15, 20, 220, 25, 30, 35, 40, 45, 50, 60, 63, 70, 75, 80, 90, 99]\nm = 10\nn = 15\nresult = div_of_nums(nums,m,n)\nprint(result)  # Output: [30, 45, 60, 90] ",
        "generated_testcode": "",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if l == 0 and r == 0:\n        return True\n    while l<=r:\n        if l&r == l:\n            return True\n        l = (l|(l+1))\n    return False\n\n# Test the function with some test cases\nprint(all_Bits_Set_In_The_Given_Range(25,16,23))  #True\nprint(all_Bits_Set_In_The_Given_Range(18,10,25)) #False\nprint(all_Bits_Set_In_The_Given_Range(10,5,7))  #False\nprint(all_Bits_Set_In_The_Given_Range(10,2,3))  #False\nprint(all_Bits_Set_In_The_Given_Range(10,0,10)) #True ",
        "generated_testcode": "assert (all_Bits_Set_In_The_Given_Range(12,2,5)) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(str1)!=len(str2):            # check if length of both strings are equal\n        return False\n    mapping = {}                   # create an empty dictionary\n    for i in range(len(str1)):\n        if str1[i] not in mapping:\n            if str2[i] in mapping.values():\n                return False\n            mapping[str1[i]]=str2[i]\n        else:\n            if mapping[str1[i]] != str2[i]:\n                return False\n    return True\n\n# Test the function with two strings\nstr1 = \"egg\"\nstr2 = \"add\"\nprint(is_Isomorphic(str1,str2)) ",
        "generated_testcode": "assert (is_Isomorphic(\"egg\",\"add\")) == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # use built-in function sum to calculate the sum of the numbers in the list\n    total_sum = sum(numbers)\n    # calculate the length of the list\n    length = len(numbers)\n    # divide the sum by the length and return the result\n    return total_sum / length\n\n# test the function with a sample list\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_num(my_list)) # Output: 4.5 ",
        "generated_testcode": "assert sum_num([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n & 1 \n    \n#Example: \n#Test \nprint(is_odd(4)) #0 \nprint(is_odd(7)) #1 \n\n\n#The bitwise AND operator (&) compares the binary representation of two numbers and returns a new number containing only the common bits in both numbers. \n#In this case, we use the bitwise AND operator with the number 1, which has a binary representation of 00000000001. If the least significant bit is 1, the number is odd, and if it's 0, the number is even. \n#So, if n & 1 is 1, the number is odd, and if n & 1 is 0, the number is even. ",
        "generated_testcode": "assert is_odd(5) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    Subtract the elements of the given nested tuples\n    \"\"\"\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] - test_tup2[i])\n    return tuple(res)\n\n# Test the function with sample inputs\ntest_tup1 = ((1, 2, 3), (4, 5, 6, 7))\ntest_tup2 = ((4, 5, 6), (7, 8, 9, 10))\nprint(substract_elements(test_tup1, test_tup2)) # Output: (-3, -3, -3, -3) ",
        "generated_testcode": "assert substract_elements(((1, 2, 3), (4, 5, 6)) == ((-3, -3, -3))\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(lists)):\n        result.append(lists[i][::-1])\n    return result\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]\nprint(reverse_list_lists(lists))  # Output: [[3, 2, 1], [6, 5, 4], [10, 9, 8, 7]] ",
        "generated_testcode": "",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    extra = -1\n    while i < n and j < n: \n        if arr1[i] != arr2[j]: \n            extra = arr1[i] \n            break\n        i += 1\n        j += 1\n    return extra\n  \n# Driver code \narr1 = [1, 2, 3, 4, 5, 6] \narr2 = [1, 2, 3, 4, 5] \nn = len(arr1) \nprint(find_Extra(arr1, arr2, n)) ",
        "generated_testcode": "assert find_Extra([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7], 6) == 6\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    countA = 0 \n    countB = 0 \n  \n    # Calculate the length of A and B \n    while(A != 0): \n        A //= 10\n        countA += 1\n    while(B != 0): \n        B //= 10\n        countB += 1\n  \n    if countA == countB: \n        return True\n    else: \n        return False\n\n# Test the function with example \nA = 12345\nB = 546789\nif(same_Length(A, B)): \n    print(\"Both numbers have same number of digits\") \nelse: \n    print(\"Not the same number of digits\") \n\n\n#Output: Both numbers have same number of digits ",
        "generated_testcode": "assert same_Length(1234,5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"Remove multiple spaces in a string.\"\"\"\n    return \" \".join(text.split())\n\n# Test function with an example string\ntext = \"Hello  world,   how    are   you?\"\nprint(remove_spaces(text))  # Output: \"Hello world, how are you?\" ",
        "generated_testcode": "assert remove_spaces(\"Hello  world\") == \"Hello world\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for sublist in lst:\n        result.append(sublist[-1])\n    return result\n\n# example usage:\nlst = [[1,2,3],[4,5,6],[7,8,9]]\nprint(Extract(lst)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == [3, 6, 9]\n\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    try:\n        #Converting the given string to float\n        float_num = float(test_str)\n        #Using tuple() to convert float to tuple\n        tuple_num = tuple(float_num)\n        #Returning the tuple\n        return tuple_num\n    except ValueError:\n        #If the string is not a valid float, return None\n        return None\n\n#Test the function with a valid float string\nprint(float_to_tuple(\"4.5\")) #Output: (4.5,)\n#Test the function with an invalid string\nprint(float_to_tuple(\"4a5\")) #Output: None ",
        "generated_testcode": "assert float_to_tuple(\"1.23\") == (1, 23)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return A[0]\n    elif len(A) == 2:\n        return max(A)\n    else:\n        incl = A[0]\n        excl = max(A[0], A[1])\n        for i in range(2, len(A)):\n            new_excl = max(excl, incl + A[i])\n            incl = excl\n            excl = new_excl\n        return excl\n\nA = [5, 5, 10, 100, 10, 15]\nprint(max_sum_subseq(A))\n",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 25\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return n[-1]\n\ndef sort_list_last(tuples):\n    \"\"\"\n    Sorts a list of non-empty tuples by their last element\n    \"\"\"\n    return sorted(tuples, key=last)\n\n\n# Example usage:\ntuples = [(1, 3, 2), (3, 1, 4), (2, 4, 1), (2, 3, 5), (4, 2, 1)]\nsorted_tuples = sort_list_last(tuples)\nprint(sorted_tuples) ",
        "generated_testcode": "",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if word in sentence: \n        return True\n    else: \n        return False\n\n#test the function with some examples\nprint(is_Word_Present(\"Hello world!\",\"world\")) # True\nprint(is_Word_Present(\"Python is fun\",\"java\")) # False\nprint(is_Word_Present(\"I love coding\",\"coding\")) # True ",
        "generated_testcode": "assert is_Word_Present(\"I am a Python Programmer\",\"Python\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    extracted_elements = []\n    i = 0\n    while i < len(numbers):\n        extracted_elements.append(numbers[i:i+n])\n        i += n\n    return extracted_elements\n\n#Example usage:\n#>>> extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n#[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\n#>>> extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n#[[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n#>>> extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 3)\n#[[1, 2, 3], [4, 5, 6], [7, 8]]\n#>>> extract_elements([1, 2, 3, 4, 5, 6, 7, 8], 4)\n#[[1, 2, 3, 4, 5], [6, 7, 8]] ",
        "generated_testcode": "assert extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [1, 2, 3]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    arr.sort() \n    i = 0\n    j = n-1\n    while i <= j: \n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]: \n            i += 1\n        elif arr[j] != arr[j-1] and arr[j] != arr[j-2]: \n            j -= 1\n        else: \n            return False\n    return True\n\narr = [1, 2, 4, 3, 6, 5, 7] \nn = len(arr) \nif check(arr, n): \n    print(\"Array can be sorted\") \nelse: \n    print(\"Array cannot be sorted\") \n    ",
        "generated_testcode": "assert (check([1, 3, 2, 5, 4, 6, 7, 9, 8, 10, 11]) == True)\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    numbers = \"1234567890\"\n    for num in numbers:\n        if string.startswith(num):\n            return True\n    return False\n\nprint(match_num(\"5555-5555-55555\")) # True\nprint(match_num(\"(5555-5555-55555\")) # True\nprint(match_num(\"(5555 5555-5555\")) # False\nprint(match_num(\"1-800-5555-55555\")) # True\nprint(match_num(\"(800-5555-55555\")) # False\nprint(match_num(\"(800.5555.55555\")) # False\nprint(match_num(\"800.5555.55555\")) # False ",
        "generated_testcode": "assert match_num(\"123456\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    i = n\n    while True:\n        for num in range(1, n + 1):\n            if i % num != 0:\n                break\n        else:\n            return i\n        i += n\n\n# Test cases\nprint(smallest_multiple(2)) # Should return 2\nprint(smallest_multiple(3)) # Should return 6\nprint(smallest_multiple(4)) # Should return 12\nprint(smallest_multiple(5)) # Should return 60\nprint(smallest_multiple(6)) # Should return 60\nprint(smallest_multiple(7)) # Should return 420\nprint(smallest_multiple(8)) # Should return 420\nprint(smallest_multiple(9)) # Should return 360\nprint(smallest_multiple(10)) # Should return 2520\nprint(smallest_multiple(11)) # Should return 2520\nprint(smallest_multiple(12)) # Should return 2520\nprint(smallest_multiple(13)) # Should return 27720\nprint(smallest_multiple(14)) # Should return 27720\nprint(smallest_multiple(15)) # Should return 36030\nprint(smallest_multiple(16)) # Should return 5040\nprint(smallest_multiple(17)) # Should return 5040\nprint(smallest_multiple(18)) #",
        "generated_testcode": "assert smallest_multiple(1) == 1\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    d3 = d1.copy()\n    for key in d2:\n        if key in d1:\n            d3[key] += d2[key]\n        else:\n            d3[key] = d2[key]\n    return d3\n\n# Example usage:\n# d1 = {'a': 100, 'b': 200, 'c': 300}\n# d2 = {'b': 300, 'c': 200, 'd': 400}\n# d3 = add_dict(d1, d2)  # {'a': 100, 'b': 500, 'c': 500, 'd': 400} ",
        "generated_testcode": "assert add_dict({'a':1, 'b':2, 'c':3}, {'b':4, 'c':5, 'd':6}) == {'a':1, 'b':6, 'c':8, 'd':6}\n\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1):  \n        # Convert the decimal to binary and count the  \n        # number of unset bits in it. \n        binary = bin(i)[2:] \n        count += binary.count('0') \n      \n    return count ",
        "generated_testcode": "assert count_Unset_Bits(10) == 8\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(even_num(2) == True)\nprint(even_num(3) == False)\n\n\n# Using ternary operator to make the code shorter\ndef even_num(x):\n    return True if x % 2 == 0 else False\n\nprint(even_num(2) == True)\nprint(even_num(3) == False)\n\n\n# Using lambda function\neven_num = lambda x: x % 2 == 0\nprint(even_num(2) == True)\nprint(even_num(3) == False) ",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    fact = 1 \n    for i in range(start,end+1,1): \n        fact = fact*i \n    return fact \ndef binomialCoef(n, k): \n    return factorial(n)//(factorial(k)*factorial(n-k)) \ndef sumOfSquares(n): \n    sum = 0 \n    for i in range(0, n+1): \n        for j in range(0, i+1): \n            sum += binomialCoef(n, i)*binomialCoef(n, j) \n    return sum**2 \nn = int(input(\"Enter the value of n: \")) \nprint(\"The sum of squares of binomial co-efficients is:\",sumOfSquares(n)) ",
        "generated_testcode": "assert factorial(0, 5) == 120\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    import re\n    pattern = r\"(\\d{4})/(\\d{2})/(\\d{2})\"\n    result = re.search(pattern, url)\n    if result:\n        year = result.group(1)\n        month = result.group(2)\n        date = result.group(3)\n        return year, month, date\n    else:\n        return None, None, None\n\n# Example usage:\nurl = \"https://www.example.com/2021/05/27/article_name.html\"\nyear, month, date = extract_date(url)\nprint(year) # Output: \"2021\"\nprint(month) # Output: \"05\"\nprint(date) # Output: \"27\"\n\n# If no date is found in the url, it will return None, None, None\nurl = \"https://www.example.com/article_name.html\"\nyear, month, date = extract_date(url)\nprint(year) # Output: None\nprint(month) # Output: None\nprint(date) # Output: None ",
        "generated_testcode": "assert extract_date(\"https://www.rithmschool.com/blog/category/monthly-challenges/august-2021/\") == (\"august\", \"2021\")\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    i = 0\n    num = 1\n    count = 0\n    while count < n:\n        str_num = str(num)\n        if '4' in str_num or '7' in str_num:\n            count += 1\n            print(num)\n        i += 1\n        num += i\n        \n    return\n\nlucky_num(5) ",
        "generated_testcode": "assert lucky_num(1) == [1]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Traverse the array from start to end\n    for i in range(n): \n        # If the index is equal to the value at that index, then return the index.\n        if i == arr[i]: \n            return i\n    # If no fixed point is found, then return -1\n    return -1\n\n# Test the function with an example array\narr = [1, 2, 3, 4, 5, 6, 7, 0]\nn = len(arr)\nprint(find_fixed_point(arr, n)) # Output: 3 ",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 4, 5, 3]) == 3\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes an integer as input and returns the nearest previous palindrome of that number.\n    If the input number is already a palindrome, the function returns the same number.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        This helper function checks whether a number is a palindrome or not.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    def reverse_and_decr(n):\n        \"\"\"\n        This helper function takes a number, reverses it, decrements it by 1 and returns the reversed number.\n        \"\"\"\n        return int(str(n)[::-1]) - 1\n\n    if is_palindrome(num):\n        return reverse_and_decr(num)\n    while not is_palindrome(num):\n        num = reverse_and_decr(num)\n    return num\n\n# Test cases\nprint(previous_palindrome(12321)) # Output: 1221\nprint(previous_palindrome(123456)) # Output: 12221\nprint(previous_palindrome(10000)) # Output: 999\nprint(previous_palindrome(10)) # Output: 9\nprint(previous_palindrome(20002)) # Output: 1991\nprint(previous_palindrome(99)) # Output: 99\nprint(previous_palind",
        "generated_testcode": "assert previous_palindrome(12321) == 12121\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 1 or m > 12:\n        return False\n    elif y < 0 or y > 999999:\n        return False\n    elif d < 1 or d > 31:\n        return False\n    elif m in [4, 6, 9, 111] and d > 30:\n        return False\n    elif m == 2:\n        if y % 4 == 0:\n            if d > 29:\n                return False\n        else:\n            if d > 28:\n                return False\n    else:\n        if d > 31:\n            return False\n    return True\n\n\n# Test cases\nprint(check_date(2, 30, 2021))  # False\nprint(check_date(2, 28, 2021))  # True\nprint(check_date(2, 29, 2021))  # False\nprint(check_date(2, 29, 2020))  # True\nprint(check_date(4, 31, 2021))  # True\nprint(check_date(4, 32, 2021))  # False ",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(nums) < 3:\n        return None\n\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < 3:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n\n\n    return max_heap[0] * max_heap[1] * max_heap[2]\n\n\n# Test the function with an example\nimport heapq\nnums = [-10, -10, 5, 2, 100, 1000, 10000, 100, -5, 100]\nprint(maximum_product(nums))  # Output: 5000000\n\n\n# The time complexity of this algorithm is O(nlogn) and the space complexity is O(1) ",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    if k > n-k: \n        k = n-k \n    for i in range(0, k): \n        res = res * (n-i) \n        res = res // (i+1) \n    return res \n  \ndef find_combinations(n, k): \n    res = binomial_coeff(n, k) \n    return res \n  \ndef find_ln_m_lobb_num(n, k): \n    res = 0\n    for i in range(k, n+1): \n        res += find_combinations(n, i) \n    return res \n  \nn = 5\nk = 3\nprint(find_ln_m_lobb_num(n, k)) ",
        "generated_testcode": "assert binomial_coeff(5, 2) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Check if a string ends with a number.\n\n    Args:\n        string (str): The string to check.\n    Returns:\n        bool: True if the string ends with a number, False otherwise.\n    \"\"\"\n    return string[-1].isdigit()\n\n\n# Example usage:\nprint(end_num(\"Hello1\")) # True\nprint(end_num(\"Hello world!\")) # False\nprint(end_num(\"Hello23\")) # True\nprint(end_num(\"Hello 123\")) # False\nprint(end_num(\"Hello\")) # False\nprint(end_num(\"123\")) # True ",
        "generated_testcode": "assert end_num(\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(s)  \n    if n < 2:  \n        return False\n    if s[0] == s[1]:  \n        return False\n    for i in range(1, n - 1):  \n        if s[i] == s[i + 1]:  \n            return False\n    return True\n  \n# Driver code \ns = \"abab\"\nif is_Two_Alter(s):  \n    print(\"Yes\")  \nelse:  \n    print(\"No\") ",
        "generated_testcode": "assert is_Two_Alter(\"abab\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    pos_nums = []\n    neg_nums = []\n    for num in array_nums:\n        if num >= 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n    return pos_nums + neg_nums\n\n\n# Test the function\narr = [-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]\nresult = list(filter(lambda x: x >= 0, arr)) + list(filter(lambda x: x < 0, arr))\nprint(result)  # Output: [2, 4, 6, 8, 10, -1, -3, -5, -7, -9]\n\n\n# Using lambda function, we can filter the positive and negative numbers in the list and concatenate them to get the desired output. ",
        "generated_testcode": "",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    # Sort the array \n    A.sort() \n    # Initialize two pointers at the beginning and end of the array \n    left = 0\n    right = arr_size-1\n    for i in range(arr_size-2): \n        # To avoid duplicates \n        if(i > 0 and A[i] == A[i-1]): \n            continue\n        # Two pointers for remaining elements \n        l = i+1 \n        r = arr_size-1 \n        while (l < r): \n            curr_sum = A[i] + A[l] + A[r] \n            if curr_sum == sum: \n                return True\n            if curr_sum < sum: \n                l += 1\n            else: \n                r -= 1\n    return False ",
        "generated_testcode": "assert find_triplet_array([1, 2, 4, 3, 6, 5, 7], 5) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    sequences = []\n    sequence = \"\"\n    for i in range(len(text)-1):\n        if text[i].isupper() and text[i+1].islower():\n            sequence += text[i]\n        elif sequence:\n            sequences.append(sequence)\n            sequence = \"\"\n        elif text[i].isupper() and text[i+1].isupper():\n            sequence = \"\"\n        elif text[i].islower() and text[i+1].isupper():\n            sequence = text[i]\n    return sequences\n\n# Test cases\nprint(text_uppercase_lowercase(\"PythonIsAwesome\")) # ['P']\nprint(text_uppercase_lowercase(\"JavaScriptIsGreat\")) # ['J']\nprint(text_uppercase_lowercase(\"JavaIsNotSoBad\")) # ['J']\nprint(text_uppercase_lowercase(\"JavaIsNotSoBadNorIsPython\")) # ['J', 'N', 'P'] ",
        "generated_testcode": "assert text_uppercase_lowercase(\"Python isAwesome\") == [\"Python\"]\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [[0 for _ in range(n+1)] for _ in range(m+1)] \n    for i in range(m+1): \n        dp[i][0] = 1\n    for i in range(1, m+1): \n        dp[i][0] = 1\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            dp[i][j] = dp[i][j-S[i-1]] + dp[i-1][j] \n        for j in range(S[i-1], n+1): \n            dp[i][j] += dp[i][j-S[i-1]] \n    return dp[m][n] ",
        "generated_testcode": "assert (coin_change([1, 2, 5], 5, 11) == 3)\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(items) == 0:\n        return None\n    result = 1\n    for i in items:\n        result *= i\n    return result\n    \n# Test the function with a list of numbers\nprint(multiply_list([1,2,3,4,5])) # Output: 120\n\n\n# Test the function with an empty list\nprint(multiply_list([])) # Output: None ",
        "generated_testcode": "assert multiply_list([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if all(j is not None for j in i):\n            result.append(i)\n    return tuple(result)\n\n# Test\ntuples = (None, None, None, None)\nprint(remove_tuple(tuples)) # Output: ()\n\n\ntuples = ((1,2,3), (4,None,None), (None,None,None), (5,None,6))\nprint(remove_tuple(tuples)) # Output: ((1, 2, 3), (5, None, 6)) ",
        "generated_testcode": "assert remove_tuple([(1, 2, 3, 4, None, None, 5, 6, None)]) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Function to perform chunking of tuples\n    :param test_tup: tuple to be chunked\n    :param N: size of each chunk\n    :return: list of tuples of size N\n    \"\"\"\n    # convert the tuple to a list\n    test_list = list(test_tup)\n    # create an empty list to store the chunks\n    chunks = []\n    # loop through the list and create sublists of size N\n    for i in range(0, len(test_list), N):\n        chunks.append(tuple(test_list[i:i+N])\n                          )\n    return chunks\n\n\n# testing the function with an example\ntup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\nprint(chunk_tuples(tup, 3)) #[(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\nprint(chunk_tuples(tup, 2)) #[(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15,)]\nprint",
        "generated_testcode": "",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if len(arr) < 2:\n        return None\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    result = arr[0]\n    for i in range(1, len(arr)-1):\n        current_max = max(arr[i]*max_product, arr[i]*min_product, arr[i])\n        current_min = min(arr[i]*max_product, arr[i]*min_product, arr[i])\n        max_product = current_max\n        min_product = current_min\n        result = max(result, current_max)\n    return result\n\n# Test cases\nprint(max_product([2, 3, -10, -2, 5, 6, 4, -4, 1, 5, 7])) # Should return 420\nprint(max_product([-2, -3, 4, 5, -6, 2, -2, -5, 6])) # Should return 60\nprint(max_product([-2, -3, 4, 0, 5, -6, 2, -2, -5, 6])) # Should return 60\nprint(max_product([-2, -3, 4, 0, -6, 0, -2, -5, 6])) # Should return 48\nprint(max_product([-2, -3, 4, 0",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5, 6, 7]) == (6, 7)\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if m == 0 or n == 0:\n        return m + n\n \n    if X[m-1] == Y[n-1]:\n        return super_seq(X, Y, m-1, n-1) + 1\n \n    else:\n        return 1 + min(super_seq(X, Y, m, n-1), super_seq(X, Y, m-1, n))\n \n# Driver program to test above function\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nm = len(X)\nn = len(Y)\nprint(\"Length of shortest supersequence is \", super_seq(X, Y, m, n))\n ",
        "generated_testcode": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 5) == 7\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with different inputs\nprint(max_of_two( 4, 7)) # Output: 7\nprint(max_of_two( 9, 2)) # Output: 9\nprint(max_of_two( -2, -6)) # Output: -2\nprint(max_of_two( 0, 0)) # Output: 0\nprint(max_of_two( 5, 5)) # Output: 5 ",
        "generated_testcode": "assert max_of_two( 10, 20 ) == 20\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n    \nprint(mutiple_tuple((2,3,4,5)) # Output: 30 ",
        "generated_testcode": "assert mutiple_tuple((1, 2, 3, 4, 5) == 120\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    C = [[0 for x in range(k + 1)] for x in range(n + 1)] \n    for i in range(n + 1): \n        C[i][0] = 1\n        for j in range(1, k + 1): \n            C[i][j] = 0\n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if i == j: \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i - 1][j] + C[i - 1][j - 1] \n    return C[n][k] \n  \ndef find_rencontres_number(n): \n    if n <= 1: \n        return n \n    else: \n        return binomial_coeffi(2 * n, n) - 1\n  \n# Driver code \nn = 5\nprint(find_rencontres_number(n)) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "       self.data = data \n        self.left = None\n        self.right = None\n\ndef height(root): \n    if root is None: \n        return 0\n    else: \n        left_height = height(root.left) \n        right_height = height(root.right) \n        return max(left_height, right_height) + 1\n        ",
        "generated_testcode": "assert calculate_height(Node(5) == 1\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Convert the date from yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    day = dt[8:]\n    month = dt[5:7]\n    year = dt[:4]\n    return day + '-' + month + '-' + year\n\n# Example usage:\n# print(change_date_format('2020-09-28')) # Output: 28-09-2020\n\n\n\ndef is_leap_year(year):\n    \"\"\"\n    Return True if the given year is a leap year, False otherwise.\n    \"\"\"\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n# Example usage:\n# print(is_leap_year(20000)) # Output: True\n# print(is_leap_year(19000)) # Output: False\n# print(is_leap_year(2020)) # Output: True\n\n\ndef get_days_in_month(year, month):\n    \"\"\"\n    Return the number of days in the given month of the given year.\n    \"\"\"\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n",
        "generated_testcode": "assert change_date_format(\"2021-07-15\") == \"15-07-2021\"\n\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0  \n    for i in tuplex:  \n        if i == value:  \n            count = count + 1  \n    return count ",
        "generated_testcode": "assert count_tuplex((\"abcaaabbbac\", \"a\") == 3\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = re.compile(r\"^[a-z]*[b]*$\")\n    if pattern.match(text):\n        return True\n    return False\n\n# Test cases\nprint(text_match(\"abbb\")) # True\nprint(text_match(\"a\")) # True\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abc\")) # False\nprint(text_match(\"abbc\")) # False\nprint(text_match(\"\")) # True ",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**3\n    return sum\n\n#testing the function with an example\nprint(sum_series(5)) # 156\n\n\n#this function calculates the sum of cubes of numbers from 1 to n. ",
        "generated_testcode": "assert sum_series(1) == 1\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function takes in a list of strings as input and removes any duplicate words.\n    It returns the list without any duplicate words.\n    \"\"\"\n    # create an empty list to store the unique words\n    unique_words = []\n    # loop through each word in the input list\n    for word in l:\n        # check if the word is not already in the unique_words list\n        if word not in unique_words:\n            # if not, append it to the list\n            unique_words.append(word)\n    # return the list of unique words\n    return unique_words\n\n# test the function with sample input\nsample_input = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"cherry\", \"banana\", \"kiwi\"]\nprint(remove_duplic_list(sample_input)) # should print [\"apple\", \"banana\", \"orange\", \"cherry\", \"kiwi\"] ",
        "generated_testcode": "assert remove_duplic_list([\"apple\", \"banana\", \"orange\", \"apple\", \"apple\", \"banana\", \"orange\", \"apple\"]) == [\"apple\", \"banana\", \"orange\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n# Example:\n# input: 'helloWorld'\n# output: 'hello_world' ",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "34B",
        "pass": 3,
        "correct": true,
        "answer": "    if n==1 or m==1 or n==0 or m==0:\n        return 1\n    else:\n        return dealnnoy_num(n-1,m) + dealnnoy_num(n, m-1)\n\ndef dealnnoy_num_dp(n,m):\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 1 or j == 1 or i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][m]\ndef dealnnoy_num_iter(n,m):\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 1 or j == 1 or i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][m]\n\nn, m = 4, 3\n",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i ** 2\n    return sum\n\n# test the function\nprint(series_sum(4)) # should print 30\nprint(series_sum(5)) # should print 55\nprint(series_sum(6)) # should print 91 ",
        "generated_testcode": "assert series_sum(1) == 1\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a dictionary with order list as keys and values as tuples\n    my_dict = dict(zip(ord_list, test_list))\n    # sort the dictionary based on keys\n    my_dict = {k: my_dict[k] for k in sorted(my_dict)}\n    # return the sorted values of the dictionary\n    return list(my_dict.values())\n\n\n# Test the function with sample data\ntest_list = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]\nord_list = [3, 2, 1, 4]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [('c', 'b', 'a', 'd')]\n\ntest_list = [(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]\nord_list = [3, 1, 2, 5, 4]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [('c', 'a', 'b', 'e', 'd')] ",
        "generated_testcode": "",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_char_occurrence = max(char_count.values())\n    for char in char_count:\n        if char_count[char] == max_char_occurrence:\n            return char\n\n\n# test the function\nstr1 = \"hello world\"\nprint(max_char(str1) )# should print \"l\" ",
        "generated_testcode": "assert max_char(\"hello world\") == \"l\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    i = p\n    j = p\n    k = p\n    min_diff = float('inf')\n    while i <= q and j <= q and k <= r: \n        diff = abs(A[i] - B[j]) + abs(B[j] - C[k]) + abs(C[k] - A[i])\n        if diff < min_diff: \n            min_diff = diff \n            result = (A[i], B[j], C[k])\n        if A[i] + B[j] + C[k] > p + q + r: \n            k += 1\n        elif A[i] + B[j] + C[k] < p + q + r: \n            i += 1\n        else: \n            j += 1\n    return result ",
        "generated_testcode": "",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(models, key=lambda x: x['age'], reverse=True)\n\n# Example usage:\n# models = [{'make': 'Toyota', 'age': 5, 'model': 'Camry', 'year': 2020}, {'make': 'Honda', 'age': 10, 'model': 'Accord', 'year': 2015}, {'make': 'Ford', 'age': 2, 'model': 'Mustang', 'year': 2010}]\n# sorted_models(models)\n# Output: [{'make': 'Toyota', 'age': 5, 'model': 'Camry', 'year': 2020}, {'make': 'Honda', 'age': 10, 'model': 'Accord', 'year': 2015}, {'make': 'Ford', 'age': 2, 'model': 'Mustang', 'year': 2010}] ",
        "generated_testcode": "",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n    n = len(arr)\n    for i in range(n//2-1, -1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n    return arr\n\narr = [4, 10, 3, 6, 12, 1, 9, 7]\nsorted_arr = heap_sort(arr)\nprint(\"Sorted array is\", sorted_arr)\n",
        "generated_testcode": "",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    count = 0\n    for i in num:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\n#Example usage:\nnum = [1, 2, 3, (4, 5), 6, 7, (8, 9)]\nprint(count_elim(num)) # Output: 3 ",
        "generated_testcode": "assert count_elim([1, 2, 3, (4, 5, 6, 7, 8, 9]) == 3\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in test_tup:\n        if i in check_list:\n            return True\n    return False\n\n# Test the function with some sample inputs\ntest_tup1 = (1, 2, 3, 4, 5, 6, 7)\ncheck_list1 = [2, 8, 9, 10, 3, 4]\nprint(check_element(test_tup1, check_list1)) # True\n\n\ntest_tup2 = (4, 5, 6, 7, 8, 9)\ncheck_list2 = [2, 3, 1, 0, 9, 5]\nprint(check_element(test_tup2, check_list2)) # True\n\n\ntest_tup3 = (8, 9, 10, 11, 12, 13)\ncheck_list3 = [14, 15, 16, 17, 18, 19]\nprint(check_element(test_tup3, check_list3)) # False ",
        "generated_testcode": "assert check_element([1, 2, 3, 4, 5], [10, 2, 3]) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    from heapq import heapify,heappush,heappop\n    nums = num1 + num2\n    heapify(nums)\n    result = []\n    while nums:\n        result.append(heappop(nums))\n    return result\n\n# Example usage:\nnum1 = [1,3,5,7,9]\nnum2 = [2,4,6,8,10]\nprint(combine_lists(num1,num2)) #[1,2,3,4,5,6,7,8,9,10]\n\n\n# Explanation:\n# We first import the `heapify`, `heappush` and `heappop` functions from the `heapq` module. Then we concatenate the two given lists and call the `heapify` function to convert the concatenated list into a heap. We then pop the smallest element from the heap and append it to a new list called `result` until the heap becomes empty. This will give us the sorted list containing elements from both the given lists. Finally, we return the `result` list. ",
        "generated_testcode": "assert combine_lists([1,3,5,7],[2,4,6,8,10]) == [1,2,3,4,5,6,7,8,10]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    num_pos = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            num_pos.append((int(text[i]), i))\n    return num_pos\n\n# Test the function with a sample string\nsample_string = \"Hello 123, World 456\"\nprint(num_position(sample_string)) # Output: [(1, 6), (2, 7), (3, 8), (4, 13), (5, 14), (6, 15)] ",
        "generated_testcode": "assert num_position(\"Hello 123 world 456\") == [(123, 6), (456, 13)]\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    my_set = set(t)\n    return my_set\n\n#Example usage:\nt = (1, 2, 3, 4, 4, 5, 3, 2, 1, 6, 7, 8, 7)\nprint(tuple_to_set(t)) ",
        "generated_testcode": "assert tuple_to_set((1, 2, 3, 4, 4, 5, 3, 2, 1)) == {1, 2, 3, 4, 5}\n\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)[:a]\n\n\n# test the function\ntext = \"Hello this is a sample text. This text has some repeated words and we need to find the most common words in it.\"\nprint(most_common_elem(text.split(), 3)) # [('is', 2), ('a', 2), (' ', 7)]\ntext = \"Python is an interpreted high-level programming language for general-purpose programming.\"\nprint(most_common_elem(text.split(), 2)) # [(' ', 4), ('i', 3)] ",
        "generated_testcode": "assert most_common_elem(\"hello world\", 2) == [('l', 3), ('o', 2)]\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    min_len = len(list1[0])\n    for word in list1:\n        if len(word) < min_len:\n            min_len = len(word)\n    return min_len\n\n#Test the function with an example list of words\nlist1 = ['cat', 'dog', 'elephant', 'rabbit', 'zebra', 'tiger']\nprint(len_log(list1)) ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"dog\", \"cat\", \"elephant\", \"eggplant\"]) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return tup1[index]\n#getting the item at index 1\nprint(get_item((1,2,3,4,5,6),1))  # 2\n#getting the item at index -1\nprint(get_item((1,2,3,4,5,6),-1)) # 6\n\n\n#Write a function to get the length of a tuple\ndef get_length(tup1):\n    return len(tup1)\nprint(get_length((1,2,3,4,5,6,7,8)) ) #5\nprint(get_length(('hello'))  #5\nprint(get_length(('python')) #5\n\n\n#Write a function to check if an item is present in a tuple\ndef check_item(tup1, item):\n    if item in tup1:\n        return True\n    else:\n        return False\n\n#checking if 3 is present in tuple\nprint(check_item((1,2,3,4,5,6,7),3)  #True\n#checking if 'p' is present in tuple\nprint(check_item(('hello','p')  #False ",
        "generated_testcode": "assert get_item((\"hello\", 1) == \"e\"\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(map(int, str(tup)) if isinstance(tup, int) else sum(count_digs(x) for x in tup))\n\ndef sort_list(lst):\n    return sorted(lst, key=count_digs)\n\n#Example:\n# Input : [(1,2), (3, 10), (5, 7), (3, 1), (99, 2)]\n# Output : [(3, 1), (5, 7), (1, 2), (99, 2)]\n\n# Explanation:\n# (3, 1) has total digits 3 + 1 = 4\n# (5, 7) has total digits 5 + 7 = 12\n# (1, 2) has total digits 1 + 2 = 3\n# (99, 2) has total digits 9 + 9 + 2 = 11\n# So, sorted tuple list is [(3, 1), (1, 2), (5, 7), (99, 2)] ",
        "generated_testcode": "",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if year % 12 == 8:\n        return \"Dragon\"\n    elif year % 12 == 9:\n        return \"Snake\"\n    elif year % 12 == 10:\n        return \"Horse\"\n    elif year % 12 == 11:\n        return \"Sheep\"\n    elif year % 12 == 0:\n        return \"Monkey\"\n    elif year % 12 == 1:\n        return \"Rooster\"\n    elif year % 12 == 2:\n        return \"Dog\"\n    elif year % 12 == 3:\n        return \"Pig\"\n    elif year % 12 == 4:\n        return \"Rat\"\n    elif year % 12 == 5:\n        return \"Ox\"\n    elif year % 12 == 6:\n        return \"Tiger\"\n    elif year % 12 == 7:\n        return \"Rabbit\"\n    elif year % 12 == 1:\n        return \"Dragon\"\n    else:\n        return \"Unknown sign\"\n\n#test the function with some inputs\nprint(chinese_zodiac(2020)) #should return \"Rat\"\nprint(chinese_zodiac(2021)) #should return \"Ox\"\nprint(chinese_zodiac(2022)) #should return \"Tiger\"\nprint(chinese_zodiac(20221",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    max_similarity = 0\n    max_indices = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            similarity = 0\n            for k in range(len(test_list1[i]):\n                if test_list1[i][k] == test_list2[j][k]:\n                    similarity += 1\n            if similarity > max_similarity:\n                max_similarity = similarity\n                max_indices = [(i, j)]\n            elif similarity == max_similarity:\n                max_indices.append((i, j))\n    return max_indices\n\n# Test cases\nprint(max_similar_indices([(1,2,3,4,5), (2,3,4,6), (4,5,6,7), (4,5,6,8)], [(1,2,4,5), (2,3,4,5), (4,5,6,7), (3,4,6,8)]) # should return [(2, 1), (2, 2)]\nprint(max_similar_indices([(1,2,3,4,5), (2,3,4,6), (4,5,6,7), (4,5,6,8)], [(1,2,4,5), (2,3,4,5), (4,5,6,7), (3,4,6,8), (9,",
        "generated_testcode": "assert max_similar_indices([(1, 2, 3, 4, 5), (4, 5, 6, 7)] == [(2, 0), (3, 1), (4, 2)]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if r > n-r: \n        r = n-r \n    C = [1]*(r+1)\n    for i in range(1, n+1): \n        j = min(r, i-r)\n        while j <= r: \n            C[j] = (C[j]*(i%p))//(j) \n            j += 1\n    return C[r] ",
        "generated_testcode": "assert nCr_mod_p(10, 2, 13) == 6\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ar.sort() \n    res = [] \n    for i in range(n): \n        res.append([ar[i]]) \n    for i in range(n): \n        for j in range(i+1, n): \n            res.append(res[i] + [ar[j]]) \n    return res ",
        "generated_testcode": "assert subset([1,2,3,4,5,6,7,8,9], 3) == 3 # True\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    if actual_cost < sale_amount:\n        profit = sale_amount - actual_cost\n        return profit\n    else:\n        return None ",
        "generated_testcode": "assert profit_amount(1000, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    if sum(divisors) > n:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(is_abundant(12)) # True\nprint(is_abundant(13)) # False ",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    return re.findall('[A-Z][^A-Z]*', text)\n\n\n# test\nprint(split_list('helloWorldandAnotherWorld')) # ['hello', 'World', 'andAnother', 'World']\nprint(split_list('helloworldandanotherworld')) # ['helloworldandanotherworld']\nprint(split_list('')) # []\nprint(split_list('ABC')) # ['A', 'B', 'C']\nprint(split_list('abc123DEFghijklmNO_PQRStuvwXYZ')) # ['abc', '123', 'D', 'E', 'F', 'G', 'hijklm', 'NO', 'P', 'QRS', 'T', 'uvw', 'XYZ'] ",
        "generated_testcode": "assert split_list(\"HelloWorld\") == [\"Hello\", \"World\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    pos = 0\n    while n:\n        pos += 1\n        n >>= 1\n    return pos-1\n\n#Test the function\nn = 17 # 100001\nprint(get_First_Set_Bit_Pos(n)) # Output: 4 ",
        "generated_testcode": "assert (get_First_Set_Bit_Pos(16) == 5) # 16 is 1000000 in binary, so the rightmost set bit is at position 5 (counting from 1)\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    val = [\n        10000, 900, 500, 400,\n        100, 90, 50,\n        40, 10, 9,\n        5, 4, 1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\",\n        \"X\", \"IX\", \"V\",\n        \"IV\", \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\n# example usage:\nprint(int_to_roman(1421)) #Output: \"CXLI\" ",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(lst) / len(lst) \n\n# Test the function \nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nprint(\"Original List:\", lst) \nprint(\"Average of the list:\", Average(lst)) \n\nlst = [5, 7, 10, 2, 3] \nprint(\"Original List:\", lst) \nprint(\"Average of the list:\", Average(lst)) \n\nlst = [10, 20, 30, 40, 50] \nprint(\"Original List:\", lst) \nprint(\"Average of the list:\", Average(lst)) ",
        "generated_testcode": "assert Average([1,2,3,4,5]) == 3.0\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    return dp[n]\n\n# Testing the function\nfor i in range(10):\n    print(get_noOfways(i)) ",
        "generated_testcode": "assert get_noOfways(2) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    roman_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 5000,\n        'M': 10000\n    }\n    total = 0\n    prev = 0\n    for i in s:\n        curr = roman_dict[i]\n        if curr > prev:\n            total += curr - 2*prev\n        else:\n            total += curr\n        prev = curr\n    return total\n\n# Test cases\nprint(roman_to_int('III'))\nprint(roman_to_int('IV'))\nprint(roman_to_int('IX'))\nprint(roman_to_int('LVIII'))\nprint(roman_to_int('MCMXCIV'))\n",
        "generated_testcode": "assert roman_to_int(\"III\") == 3\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    return (n * (n + 1))\ndef sum_even(l, r): \n    sum = 0\n    for i in range(l, r + 1): \n        if i % 2 == 0: \n            sum += i \n    return sum\ndef sum_even_within_range(l, r): \n    if l % 2 != 0: \n        l += 1\n    return sum_Natural(r//2) - sum_Natural(l//2) \nl = int(input(\"Enter the lower limit: \"))\nr = int(input(\"Enter the upper limit: \"))\nprint(sum_even_within_range(l, r)) ",
        "generated_testcode": "assert sum_Natural(2, 10) == 30 # Test case 1\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    discriminant = b**2 - 4*a*c\n    return discriminant\n#Write a function to calculate the roots of a quadratic equation.\ndef quadratic_roots(a,b,c):\n    discriminant = discriminant_value(a,b,c)\n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant))/(2*a)\n        root2 = (-b - math.sqrt(discriminant))/(2*a)\n        return (root1, root2)\n    elif discriminant == 0:\n        root = -b/(2*a)\n        return (root)\n    else:\n        return \"No real roots\"\n\n#Example usage:\nimport math\na = 1\nb = 3\nc = 2\nprint(quadratic_roots(a,b,c)) #(-1.0, 2.0)\n\na = 1\nb = 4\nc = 4\nprint(quadratic_roots(a,b,c)) #No real roots ",
        "generated_testcode": "assert discriminant_value(1, 2, 1) == 0\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(s)%2 == 0: \n        return True \n    else: \n        return False \n\n# test the function with a string \nprint(word_len('hello')) # True \nprint(word_len('python')) # False \nprint(word_len('racecar')) # True \nprint(word_len('world')) # False ",
        "generated_testcode": "assert word_len(\"hello\") == False\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = \"\"\n    for i in range(len(text)):\n        if text[i].isupper():\n            result += \"_\" + text[i].lower()\n        else:\n            result += text[i]\n    return result\n\n# Test the function with some examples\nprint(camel_to_snake(\"helloWorld\"))\nprint(camel_to_snake(\"helloWorldAndAnotherWord\"))\nprint(camel_to_snake(\"HelloWorld\"))\nprint(camel_to_snake(\"hello\"))\nprint(camel_to_snake(\"helloWorldAndAnotherWordAndAnotherWord\")) ",
        "generated_testcode": "assert camel_to_snake(\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    L = list(filter(None, tuple1)\n    return tuple(L)\n\n# Test the function with an example:\ntuples = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(tuples))  # Output: (('a', 'b'), ('a', 'b', 'c'), 'd')\n\n\n# There is also a simpler way to remove empty tuples from a list of tuples using a list comprehension:\ntuples = [('', 'a', 'b', 'c', ''), ('', 'd', 'e', 'f'), ('',), ('a', 'b'), ()]\ntuples = [t for t in tuples if t]\nprint(tuples)  # Output: [('a', 'b', 'c'), ('d', 'e', 'f'), ('a', 'b')] ",
        "generated_testcode": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]) == [('', 'a', 'b', 'c', 'd')]\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    vowels = \"aeiou\"  \n    for i in string: \n        if i in vowels: \n            return True\n    return False \n\n#testing the function with example \nstring = \"hello\"\nif check(string): \n    print(\"Accepted\") \nelse: \n    print(\"Not Accepted\") ",
        "generated_testcode": "assert check(\"aeiou\") == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    ans=[]\n    for i in range(N):\n        if A*i<=B:\n            ans.append(A*i)\n        else:\n            break\n    return max(ans)\nA=1\nB=5\nN=10\nprint(floor_Max(A,B,N)) # output 45\n\n# In this function we have initialized an empty list ans. We will add the multiples of A to the list ans until it is less than or equal to B.\n# The maximum value of the list will be the maximum possible value of the given periodic function. ",
        "generated_testcode": "assert floor_Max(2, 5, 10) == 10\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        if i == 0:\n            result.append(list(test_list[i]))\n        else:\n            if test_list[i][0] == test_list[i-1][0]:\n                result[-1].extend(test_list[i][1:])\n            else:\n                result.append(list(test_list[i]))\n    return tuple(tuple(x) for x in result)\n\n# Test the function with an example\ntest_list = ((1, 'apple', 'banana', 'cherry'), (1, 'orange', 'mango'), (2, 'cherry', 'date'), (2, 'date', 'lemon'), (3, 'apple', 'orange'))\nprint(join_tuples(test_list)) # Output: ((1, 'apple', 'banana', 'cherry', 'orange', 'mango'), (2, 'cherry', 'date', 'date', 'lemon'), (3, 'apple', 'orange')) ",
        "generated_testcode": "",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "34B",
        "pass": 2,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\n# Test the function with different values of x and y\nprint(min_of_two(2, 3))\nprint(min_of_two(5, 4))\nprint(min_of_two(7, 8))\nprint(min_of_two(1, 0))\nprint(min_of_two(0, -2))\nprint(min_of_two(-5, -3))\n\n\n# Write a function to find the minimum of three numbers\ndef min_of_three( x, y, z ):\n    return min_of_two(x, min_of_two(y, z))\n\n\n# Test the function with different values of x, y, and z\nprint(min_of_three(3, 7, 9))\nprint(min_of_three(1, -2, 5))\nprint(min_of_three(0, -2, -8))\nprint(min_of_three(-3, -5, -1))\n\n# Write a function to find the maximum of two numbers\ndef max_of_two( x, y ):\n    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function with different values of x and y\nprint(max_of_two(2, 3))\nprint(max_of_two(5, 4))\nprint(max_of_two(7, 8))",
        "generated_testcode": "assert min_of_two(2, 3) == 2\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": " \n    # Calculate the total length required \n    total_len = a + b + c \n  \n    # If total length is greater than n, then it is not possible \n    if (total_len > n) : \n        return 0\n  \n    # Calculate the maximum number of segments possible \n    max_seg = n // total_len \n  \n    # Calculate the remaining length after the maximum number of segments \n    remaining_len = n % total_len \n  \n    # If the remaining length is greater than or equal to c, then we can include c in the segments \n    if (remaining_len >= c) : \n        max_seg += remaining_len // c \n        remaining_len %= c \n  \n    # If the remaining length is greater than or equal to b, then we can include b in the segments \n    if (remaining_len >= b) : \n        max_seg += remaining_len // b \n        remaining_len %= b \n  \n    # If the remaining length is greater than or equal to a, then we can include a in the segments \n    if (remaining_len >= a) : \n        max_seg += remaining_len // a \n        remaining_len %= a \n  \n    # If the remaining length is greater than 0, then we cannot include any segment \n    if (remaining_len > 0) : \n        return 0\n  \n    return max_seg \n\n# Driver code ",
        "generated_testcode": "assert maximum_segments(10, 3, 5) == 2\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": true,
        "answer": "    # nested_tup = (test_tup1, test_tup2)\n    # print(nested_tup)\n    return (test_tup1, test_tup2)\n\n\n# Test the function with example tuples\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ('hello', 'world')\nprint(concatenate_nested(test_tup1, test_tup2))  # Output: ((1, 2, 3), ('hello', 'world')) ",
        "generated_testcode": "assert concatenate_nested((1, 2, 3), (4, 5, 6)) == ((1, 2, 3), (4, 5, 6))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "34B",
        "pass": 1,
        "correct": true,
        "answer": "    return s[d:] + s[:d]\n    \n# example\ns = \"hello\"\nd = 2\nprint(left_rotate(s,d)) \n# \"llohe\"\n\n# time complexity: O(n)\n# space complexity: O(n) ",
        "generated_testcode": "assert left_rotate(\"abcdefg\", 2) == \"cdefgab\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "34B",
        "pass": 4,
        "correct": false,
        "answer": "    n = len(A)\n    for i in range(n-1,0,-1,-1):\n        for j in range(i):\n            A[i-1][j] += min(A[i][j],A[i][j+1])\n    return A[0][0] ",
        "generated_testcode": "assert min_sum_path([[1],[2,3],[4,5,6],[7,8,9,10]]) == 11 # Test case 1\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]