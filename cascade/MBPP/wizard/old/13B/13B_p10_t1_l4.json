[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a table to store the minimum cost to reach (i, j) for 0 <= i <= m, 0 <= j <= n \n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)] \n\n    # Base case: the cost to reach (0, 0) is the first element of the matrix\n    for i in range(n+1): \n        dp[0][i] = cost[0][i] \n\n    for i in range(1, m+1): \n        dp[i][0] = dp[i-1][0] + cost[i][0] \n\n    # Fill the table in a bottom-up manner\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            # If we go right, we'll have to add the cost of the current position to the minimum cost to reach (i-1, j)\n            right = dp[i-1][j] + cost[i][j] \n            # If we go down, we'll have to add the cost of the current position to the minimum cost to reach (i, j-1)\n            down = dp[i][j-1] + cost[i][j] \n            # Choose the minimum of the two options and add the cost of the current position\n            dp[i][j] = min(right, down) \n\n    return dp[m][n]",
        "generated_testcode": "assert min_cost(cost, 3, 3) == 13\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Convert the tuple into a set\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    # Convert the intersection set back into a tuple\n    common_elements_tuple = tuple(common_elements)\n    return common_elements_tuple\n\n# Test the function with sample data\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(similar_elements(test_tup1, test_tup2)) # Output: (2, 4)\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (6, 7, 8, 9, 10)\nprint(similar_elements(test_tup1, test_tup2)) # Output: ()\n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (1, 2, 3, 4, 5)\nprint(similar_elements(test_tup1, test_tup2)) # Output: (1, 2, 3, 4, 5) ",
        "generated_testcode": "assert similar_elements(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'f', 'g', 'h')) == ('a', 'b')\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n\n# Test the function\nprint(is_not_prime(7))  # False\nprint(is_not_prime(8))  # True\nprint(is_not_prime(9))  # True\nprint(is_not_prime(11))  # False\nprint(is_not_prime(12))  # True\n",
        "generated_testcode": "assert is_not_prime(10) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create heap queue\n    heapq.heapify(nums)\n    #pop the largest element n times\n    for i in range(n):\n        heapq.heappop(nums)\n    #return the largest element\n    return nums[0]\n\n#test the function\nnums = [3, 6, 8, 10, 2, 1, 23, 7, 9, 4, 5, 1]\nn = 3\nprint(heap_queue_largest(nums,n)) # output: 10\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 4\nprint(heap_queue_largest(nums,n)) # output: 8\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = 5\nprint(heap_queue_largest(nums,n)) # output: 9\n\n\n#Another approach to find the largest numbers without using heap queue \ndef find_largest(nums,n):\n    largest = []\n    for i in range(n):\n        max_num = max(nums)\n        largest.append(max_num)\n        nums.remove(max_num)\n    return largest\n\n#test the function\nnums = [3",
        "generated_testcode": "assert heap_queue_largest(nums=[1,2,3,4,5,6,7,8,9],n=3) == [9,8,7]\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0] * (n + 1) \n    dp[0] = 1 \n    dp[1] = 1 \n  \n    for i in range(2, n + 1): \n        dp[i] = dp[i - 1] + dp[i - 2] \n        for j in range(2, i): \n            if j > 1 and i - j >= 1: \n                dp[i] += dp[j - 1] * dp[i - j] \n  \n    return dp[n] \n  \n# Test the function \nn = 5\nprint(count_ways(n)) ",
        "generated_testcode": "assert count_ways(3) == 1\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (x != 0) and (x & (x-1) == 0)\ndef check_diff_bit(a, b): \n    return is_Power_Of_Two(a^b) \n# Driver code \na = 10\nb = 14\nprint(check_diff_bit(a, b)) ",
        "generated_testcode": "assert is_Power_Of_Two (10) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)\n\n# Test the function with the sample text\nprint(find_char_long(\"The quick brown fox jumps over the lazy dog\"))  # ['quick', 'brown', 'fox', 'jumps', 'lazy', 'dog']\n\n# Test with an empty string\nprint(find_char_long(\"\"))  # []\n\n# Test with a string containing only one word\nprint(find_char_long(\"apple\"))  # []\n\n# Test with a string containing two words of length 4\nprint(find_char_long(\"apples are red\"))  # ['apples', 'are', 'red']\n\n# Test with a string containing two words of length 3\nprint(find_char_long(\"I am an NLP engineer\"))  # []\n\n# Test with a string containing two words of length 2 and one of length 4\nprint(find_char_long(\"Hi there, my name is John\"))  # ['Hi', 'there', 'name', 'John']\n\n# Test with a string containing special characters\nprint(find_char_long(\"This is a * test! @string with# special characters\"))  # ['This', 'is', 'a', 'test', 'string', 'with', 'characters']\n\n# Test with a string containing numbers\nprint(find_char_long(\"The quick brown fox jumps over the lazy 12345 dog\"))  # ['quick', 'brown",
        "generated_testcode": "assert find_char_long(text) == ['apple', 'banana', 'cherry', 'date', 'fig']\n\n# Test the function with the following input\ntext = \"apple banana cherry date fig\"\nprint(find_char_long(text))\n\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n# Example usage:\nprint(square_nums([1, 2, 3, 4, 5])) # [1, 4, 9, 16, 25]\n\n# Define a function to add each element in a list using lambda function\ndef add_nums(nums):\n    return reduce(lambda x, y: x + y, nums)\n\n# Example usage:\nprint(add_nums([1, 2, 3, 4, 5])) # 10\n\n# Define a function to find the product of all elements in a list using lambda function\ndef multiply_nums(nums):\n    return reduce(lambda x, y: x * y, nums)\n\n# Example usage:\nprint(multiply_nums([1, 2, 3, 4, 5])) # 120\n\n# Define a function to filter even numbers in a list using lambda function\ndef even_nums(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Example usage:\nprint(even_nums([1, 2, 3, 4, 5, 6])) # [2, 4, 6]\n\n# Define a function to sort a list in descending order using lambda function\ndef sort_nums(nums):\n    return sorted(nums, key=lambda x: -x)\n\n",
        "generated_testcode": "assert square_nums(range(1, 6)) == [1, 4, 9, 16, 25, 36]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize left and right pointers\n    left, right = 0, len(str) - 1\n    # Initialize minimum index\n    min_index = 0\n    # Loop through all possible rotations\n    while left <= right:\n        # Find the index of minimum element in the remaining unsearched rotations\n        if str[left] <= str[right]:\n            min_index = left\n            break\n        # Move the left pointer one step right\n        left += 1\n    # Initialize the left and right pointers\n    left, right = 0, len(str) - 1\n    # Loop through all possible rotations\n    while right - left > 0:\n        # Find the index of minimum element in the remaining unsearched rotations\n        if str[left] <= str[right]:\n            min_index = left\n            break\n        # Move the left pointer one step right\n        left += 1\n    # Return the minimum index\n    return min_index\n \n# Test the function with example\nstr = \"AACDJFAE\"\nprint(\"Minimum rotations required =\", find_Rotations(str)) ",
        "generated_testcode": "assert find_Rotations(str) == 3\n\n# Test the function with the following strings\nstr1 = \"AABAACAADAABA\"\nstr2 = \"ZERO\"\nstr3 = \"ABCDEFG\"\nstr4 = \"ABCDEFGABC\"\nstr5 = \"ABCDEFGZ\"\n\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    list1.sort()\n    return list1[:n]\n\n# Test the function with an example\nlist1 = [4,2,7,1,9,3,5]\nprint(small_nnum(list1,3)) ",
        "generated_testcode": "assert small_nnum(list1,3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if ch in s: \n        s = s.replace(ch, \"\", 1) \n        s = s.replace(ch, \"\", -1) \n    return s\n  \n# Example usage: \ns = \"Hello world\"\nch = \"l\"\nprint(remove_Occ(s, ch)) # Output: \"Heo word\" ",
        "generated_testcode": "assert remove_Occ(s=\"hello world\", ch=\"l\") == \"heo word\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    M.sort(key=lambda x: sum(x))\n    return M\n\n# Test the function with the following matrix\nmatrix = [[1, 3, 5], [2, 4, 6], [7, 8, 9]]\nprint(sort_matrix(matrix)) ",
        "generated_testcode": "assert sort_matrix(M) == sorted_M\n\n# Test the function with the following matrix:\nM = [\n    [3, 2, 1],\n    [1, 2, 3],\n    [4, 5, 6]\n]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nwords = [\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"pear\"]\nprint(count_common(words))\n\n# Output: {'apple': 4, 'orange': 3, 'banana': 3, 'pear': 1}\n\n# Expected output: {'apple': 4, 'orange': 3, 'banana': 3}\n# The function should not count pear as a common word.\n\n# Solution:\ndef count_common(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return {k: v for k, v in word_count.items() if v > 1}\n\nwords = [\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"apple\", \"orange\", \"pear\"]\nprint(count_common(words))\n\n# Output: {'apple': 4, 'orange': 3, 'banana': 3}",
        "generated_testcode": "assert count_common([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    volume = (1/3)*l*b*h \n    return volume\n\n# Get input from user \nl = float(input(\"Enter the length of the triangular prism : \")) \nb = float(input(\"Enter the breadth of the triangular prism : \")) \nh = float(input(\"Enter the height of the triangular prism : \")) \n\n# Call the function with the input values \nprint(\"Volume of the triangular prism is :\", find_Volume(l,b,h)) ",
        "generated_testcode": "assert find_Volume(3,4,5) == 60\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    word = \"\"\n    for char in text:\n        if char.islower():\n            word += char\n        else:\n            if word:\n                result.append(word)\n                word = \"\"\n    if word:\n        result.append(word)\n    return result\n\n# Example usage:\nprint(split_lowerstring(\"HelloWorld\")) # Output: ['Hello', 'World']\nprint(split_lowerstring(\"helloWorld\")) # Output: ['hello', 'World']\nprint(split_lowerstring(\"HELLOWorld\")) # Output: ['HELLO', 'World']\nprint(split_lowerstring(\"HELLOWorld123\")) # Output: ['HELLO', 'World', '123']\nprint(split_lowerstring(\"HELLO123\")) # Output: ['HELLO', '123']\nprint(split_lowerstring(\"HELLO\")) # Output: ['HELLO']\nprint(split_lowerstring(\"\")) # Output: []\n\n# Testing\nassert split_lowerstring(\"HelloWorld\") == ['Hello', 'World']\nassert split_lowerstring(\"helloWorld\") == ['hello', 'World']\nassert split_lowerstring(\"HELLOWorld\") == ['HELLO', 'World']\nassert split_lowerstring(\"HELLOWorld123\") == ['HELLO', 'World', '123']\nassert split_lowerstring(\"HELLO123\") == ['HELLO', '123']\nassert split_lower",
        "generated_testcode": "assert split_lowerstring(None) == []\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = '[a-z]+_[a-z]+'\n    result = re.findall(pattern, text)\n    return result\n\n# Test cases\nprint(text_lowercase_underscore(\"python_is_awesome\")) # Output: ['python_is']\nprint(text_lowercase_underscore(\"hello_world_python\")) # Output: ['hello_world', 'python']\nprint(text_lowercase_underscore(\"123_python\")) # Output: []\nprint(text_lowercase_underscore(\"HELLO_WORLD\")) # Output: []\nprint(text_lowercase_underscore(\"helloWorld\")) # Output: [] ",
        "generated_testcode": "assert text_lowercase_underscore(None) == None\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return a * 4\n\n# Test cases\nprint(square_perimeter(5))  # Output: 20\nprint(square_perimeter(10))  # Output: 40\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l, w):\n    return l * w\n\n# Test cases\nprint(rectangle_area(5, 10))  # Output: 50\nprint(rectangle_area(10, 5))  # Output: 50\n\n# Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l, w):\n    return 2 * (l + w)\n\n# Test cases\nprint(rectangle_perimeter(5, 10))  # Output: 30\nprint(rectangle_perimeter(10, 5))  # Output: 30\n\n# Write a function to find the area of a triangle.\ndef triangle_area(base, height):\n    return 0.5 * base * height\n\n# Test cases\nprint(triangle_area(10, 5))  # Output: 25.0\nprint(triangle_area(5, 10))  # Output: 25.0\n\n# Write a function to find the area of a circle.\nimport math\ndef circle_area(r):\n    return math.pi * r * r\n\n# Test cases\nprint(circle_area(5))  # Output: 78.",
        "generated_testcode": "assert square_perimeter(5) == 20\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [char for char in string]\n\ndef remove_chars(string1, string2): \n    list1 = str_to_list(string1)\n    list2 = str_to_list(string2)\n    new_list = []\n    for char in list1: \n        if char not in list2: \n            new_list.append(char)\n    return ''.join(new_list)\n\nprint(remove_chars('Hello World', 'lo')) ",
        "generated_testcode": "assert str_to_list(string1, string2) == expected_output\n\n# Test case 1:\nstring1 = \"hello world\"\nstring2 = \"llo\"\nexpected_output = \"he wrd\"\n\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(set(arraynums)) < len(arraynums)\n#Test\nprint(test_duplicate([1,2,3,4,5,6,5])) # Output: True\nprint(test_duplicate([1,2,3,4,5,6])) # Output: False\nprint(test_duplicate([1,2,3,4,5,5,6])) # Output: True\n\n# Here we are using the set() function to remove duplicate elements from the array and then comparing the length of the set with the length of original array. If they are not equal, then there is at least one duplicate element. ",
        "generated_testcode": "assert test_duplicate(arraynums=[1,2,3,4,5,6]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    # If the sum of the digits is divisible by 3 and the number is also divisible by 3 then it is a woodall number\n    if sum(int(digit) for digit in str(x))%3 == 0 and x%3 == 0: \n        return True \n    else: \n        return False\n\n# Example usage\nprint(is_woodall(19)) # Output: True\nprint(is_woodall(20)) # Output: False\nprint(is_woodall(36)) # Output: True\nprint(is_woodall(42)) # Output: False\nprint(is_woodall(27)) # Output: True ",
        "generated_testcode": "assert is_woodall(123456789) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        if i % n == 0:\n            count += 1\n    return count\n\nprint(multiples_of_num(10,5)) # Output: 3\nprint(multiples_of_num(20,7)) # Output: 3\nprint(multiples_of_num(15,10)) # Output: 2\nprint(multiples_of_num(100,1)) # Output: 10\nprint(multiples_of_num(100,5)) # Output: 20\nprint(multiples_of_num(25,5)) # Output: 6\nprint(multiples_of_num(50,2)) # Output: 25 ",
        "generated_testcode": "assert multiples_of_num(10,5) == 2 # 5, 10, 15, 20, 25, 30, 35, 40, 45, 50\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a dictionary to store the frequency of each number\n    freq_dict = {}\n    # Loop through the array\n    for num in nums:\n        # Check if the number is already in the dictionary\n        if num in freq_dict:\n            return num\n        # If not, add it to the dictionary with a value of 1\n        else:\n            freq_dict[num] = 1\n\n    # If no duplicates are found, return -1\n    return -1\n\n# Test the function with the example array\nnums = [2, 1, 3, 5, 3, 4, 2, 1, 5, 6]\nprint(find_first_duplicate(nums))  # Output: 3\n\n# Test the function with an array with no duplicates\nnums = [1, 2, 3, 4, 5, 6]\nprint(find_first_duplicate(nums))  # Output: -1\n\n# Test the function with an empty array\nnums = []\nprint(find_first_duplicate(nums))  # Output: -1\n\n# Test the function with a large array\nnums = [i for i in range(1000000)] + [1, 2, 3]\nprint(find_first_duplicate(nums))  # Output: 1\n",
        "generated_testcode": "assert find_first_duplicate(nums=[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == 6\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sum = 0\n    for sublist in list1: \n        if sum(sublist) > max_sum: \n            max_sum = sum(sublist) \n    return max_sum \n  \nlist1 = [[1,2,3], [4,5,6], [10,2,3,4], [7,8,9]] \nprint(\"Maximum sum of list elements:\", maximum_Sum(list1)) ",
        "generated_testcode": "assert maximum_Sum([[1,2,3], [4,5,6], [7,8,9]] ) == 24\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return decimal \n\n# Test the function with a sample input \nbinary = 101010 \nprint(\"Decimal equivalent of\", binary, \"is\", binary_to_decimal(binary)) ",
        "generated_testcode": "assert binary_to_decimal(101010) == 22\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    res = 1\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                res *= arr[i]\n    return res\n\n# Testing the function\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(\"Product of non-repeated elements in the array is :\", find_Product(arr, n))\n\narr = [1, 2, 2, 3, 4]\nn = len(arr)\nprint(\"Product of non-repeated elements in the array is :\", find_Product(arr, n)) ",
        "generated_testcode": "assert find_Product(arr=[1,2,3,4,5,6,7,8,9],n=7) == 3628800\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(test_list) == K\n\n# Test the function with an example\ntest_list = [1, 2, 3, 4, 5]\nK = 4\nprint(check_k_elements(test_list, K))  # Output: True\n\n# Test the function with another example\ntest_list = [1, 2, 3]\nK = 4\nprint(check_k_elements(test_list, K))  # Output: False\n\n# Test the function with another example\ntest_list = [1, 2, 3, 4, 5]\nK = 3\nprint(check_k_elements(test_list, K))  # Output: False ",
        "generated_testcode": "assert check_k_elements(test_list, 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = [] \n    for i in list: \n        if i.isalpha(): \n            result.append(i) \n    return result \n  \n# test the function \nlist1 = ['hello123', 'world345', 'python67', 'programming9'] \nprint(remove(list1) ) ",
        "generated_testcode": "assert remove([\"hello\", \"123\", \"world\", \"456\", \"789\"]) == [\"hello\", \"world\"]\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": " \n    # Calculate the co-efficient of C(n, k) using the formula  \n    C = 1\n    for i in range(k): \n        C *= (n - i) \n    for i in range(k): \n        C /= (i + 1) \n    return C \n  \n# Driver program to test the above function \nn = 5\nk = 2\nprint(\"Value of C(%d,%d) is\"%(n,k), binomial_Coeff(n,k)) ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(0, 32): \n        count = 0\n        for j in range(0, arr_size): \n            if ((arr[j] & (1<<i)): \n                count += 1\n        if (count % 2 != 0): \n            return (1<<i) \n\n\narr = [5, 2, 3, 3, 4, 3, 5, 2, 4, 5] \narr_size = len(arr) \nprint(\"Element occurring odd number of times is \", get_Odd_Occurrence(arr, arr_size)) \n\n#Output: 10 (in binary 1010)\n\n#Time Complexity: O(n) \n#Space Complexity: O(1) ",
        "generated_testcode": "assert get_Odd_Occurrence(arr=[1, 2, 3, 2, 3, 1, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8], arr_size=11) == 7\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    n = len(s) \n    for i in range(n): \n        for j in range(i+1, n): \n            if s[i] == s[j]: \n                count += 1\n    return count\n\ns = input(\"Enter a string: \")\nprint(\"Number of substrings starting and ending with same characters: \", check_Equality(s)) \n\n#Example:\n#Input:\n#Enter a string: aaabbb\n#Output:\n#Number of substrings starting and ending with same characters: 4\n\n#Input:\n#Enter a string: aabbaa\n#Output:\n#Number of substrings starting and ending with same characters: 4\n\n#Time Complexity: O(n^2) ",
        "generated_testcode": "assert check_Equality(s = \"abccba\") == 2\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    heap = []\n    freq = {}\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if len(heap) < k:\n            heapq.heappush(heap, (freq[num], num) if len(heap) < k else max(heap)\n        else:\n            if freq[num] > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (freq[num], num)\n    return [heapq.heappop(heap)[1] for i in range(len(heap))]\n\n# Test case\nnums = [1, 2, 3, 4, 5, 5, 2, 3, 3, 4, 5, 4, 4, 2, 4, 3]\nk = 3\nprint(func(nums, k)) # should return [4, 3, 2]\n\n# Explanation:\n# The frequency of 1, 2, 3, 4, 5 is 1, 2, 3, 3 respectively.\n# The 3 most frequent numbers are 4, 3, and 2, so the function returns [4, 3, 2]\n\n# Complexity analysis:\n# The function iterates through the input list once and maintains",
        "generated_testcode": "assert func(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], k=3) == [1, 2, 3]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    maxPrime = -1\n    i = 2\n    while (n > 1): \n        if (n % i == 0): \n            maxPrime = i \n            while (n % i == 0): \n                n = n / i \n        i += 1\n    return maxPrime \n  \n# Driver Code \nn = 13195 \nprint(\"Largest Prime Factor of\", n, \":\", max_Prime_Factors(n)) ",
        "generated_testcode": "assert max_Prime_Factors (13195) == 29\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return bin(N)[2:] \n  \n# Driver code \nN = 23\nprint(\"Decimal to Binary conversion is:\", decimal_To_Binary(N)) ",
        "generated_testcode": "assert decimal_To_Binary(10) == \"1010\"\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    l, r = 0, N-1\n    while l <= r:\n        mid = (l + r) // 2\n        if ar[mid] == mid:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\n\n# Example usage:\nar = [0, 1, 3, 4, 5, 6, 7, 9]\nN = len(ar)\nprint(find_missing(ar,N)) # Output: 2\n\nar = [0, 1, 2, 3, 4, 5, 7]\nN = len(ar)\nprint(find_missing(ar,N)) # Output: 6\n\nar = [0, 1, 2, 3, 4, 5, 6]\nN = len(ar)\nprint(find_missing(ar,N)) # Output: 7\n\nar = [0, 1, 2, 3, 4, 5]\nN = len(ar)\nprint(find_missing(ar,N)) # Output: 6\n\nar = [1, 2, 3, 4, 5, 6, 7]\nN = len(ar)\nprint(find_missing(ar,N)) # Output: 0\n\nar = [0, 2, 3, 4, 5, 6, 7]\nN = len(ar)\nprint(find_missing(ar,",
        "generated_testcode": "assert find_missing(ar=[1,2,3,4,5,6,7,8,9,10],N=9) == 11\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Calculate the sum of numbers from 1 to n\n    num = n * (n + 1) / 2\n    # Round up to nearest integer\n    num = int(num)\n    # Square the number\n    num *= num\n    return num\n\n# Test the function with the first 10 rectangular numbers\nfor i in range(1, 11):\n    print(\"The\", i, \"th rectangular number is\", find_rect_num(i))\n",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    num = 0\n    count = 0\n    while (p > 0) : \n        temp = p // q \n        rem = p % q \n        p = q \n        q = rem \n        num = num * 10 + temp \n        count += 1\n        if (count == N) : \n            return temp \n    return -1 \n  \n# Driver code \np = 14\nq = 3\nN = 3\nprint(find_Nth_Digit(p, q, N)) ",
        "generated_testcode": "assert find_Nth_Digit(1,2,1) == 0\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    ints = []\n    strings = []\n\n    for item in mixed_list:\n        if type(item) == int:\n            ints.append(item)\n        else:\n            strings.append(item)\n\n    sorted_ints = sorted(ints)\n    sorted_strings = sorted(strings)\n\n    sorted_list = []\n\n    for i in range(len(sorted_ints)):\n        sorted_list.append(sorted_ints[i])\n        sorted_list.append(sorted_strings[i])\n\n    return sorted_list\n\n# Test the function with example inputs\nprint(sort_mixed_list([1, 'apple', 3, 'banana', 2, 'orange', 5, 'kiwi'])) # [1, 2, 3, 5, 'apple', 'banana', 'kiwi', 'orange']\nprint(sort_mixed_list([1, 2, 3, 'apple', 'banana', 'orange', 'kiwi'])) # [1, 2, 3, 'apple', 'banana', 'kiwi', 'orange']\nprint(sort_mixed_list(['apple', 'banana', 'kiwi', 'orange', 1, 2, 3])) # [1, 2, 3, 'apple', 'banana', 'kiwi', 'orange']\nprint(sort_mixed_list(['orange', 'kiwi', 'banana', 'apple', 1, 2, 3",
        "generated_testcode": "assert sort_mixed_list([\"apple\", 1, \"banana\", 2, \"cherry\", 3, \"date\", 4, \"elderberry\"]) == [\"1\", \"2\", \"3\", \"4\", \"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    return even_sum, odd_sum\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven, odd = div_even_odd(list1)\nprint(\"Sum of even numbers is:\", even)\nprint(\"Sum of odd numbers is:\", odd)\n\n# Output: Sum of even numbers is: 20\n#        Sum of odd numbers is: 25\n\n#Explanation: 2 + 4 + 6 + 8 + 10 = 20\n#           1 + 3 + 5 + 7 + 9 = 25\n\nlist2 = [1, 3, 5, 7, 9]\neven, odd = div_even_odd(list2)\nprint(\"Sum of even numbers is:\", even)\nprint(\"Sum of odd numbers is:\", odd)\n\n# Output: Sum of even numbers is: 0\n#        Sum of odd numbers is: 16\n\n#Explanation: There are no even numbers in list2\n#           1 + 3 + 5 + 7 + 9 = 16\n\nlist3 = [2, 4, 6, 8]\neven, odd = div",
        "generated_testcode": "assert div_even_odd(list1=[1,2,3,4,5,6,7,8,9]) == (4, 3)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(S) < 2:\n        return True\n    freq = {}\n    for c in S:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    max_count = 0\n    min_count = float('inf')\n    for count in freq.values():\n        max_count = max(max_count, count)\n        min_count = min(min_count, count)\n    \n    if max_count - min_count > 1:\n        return False\n    return True\n\n# Test cases\nprint(rearange_string(\"aab\")) # True\nprint(rearange_string(\"aaabbb\")) # True\nprint(rearange_string(\"aaabb\")) # False\nprint(rearange_string(\"abcde\")) # True\nprint(rearange_string(\"aabbcde\")) # True\nprint(rearange_string(\"abccba\")) # False\nprint(rearange_string(\"aabbcd\")) # False\nprint(rearange_string(\"abcdef\")) # True\nprint(rearange_string(\"zyxwvutsrqpoiu\")) # True",
        "generated_testcode": "assert rearange_string(S=\"aabccd\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    from collections import Counter\n    flattened = [item for sublist in nums for item in sublist]\n    return Counter(flattened)\n\n# Example usage:\nnums = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\nprint(freq_element(nums)) # Output: Counter({4: 2, 5: 2, 2: 2, 3: 2, 1: 1, 6: 1})\n\n# The function will return the frequency of each element in the list of lists. ",
        "generated_testcode": "assert freq_element(nums) == {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\n\n# Test the function with the given input\nnums = [['a', 'b', 'c', 'd', 'a', 'e', 'a', 'b']]\nprint(freq_element(nums))\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(filter(lambda x: x%2==0, nums))\n\n# Test the function with the given list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_evennumbers(nums)) # Output: [2, 4, 6, 8, 10]\n\n# Write a function to filter odd numbers using lambda function\ndef filter_oddnumbers(nums):\n    return list(filter(lambda x: x%2!=0, nums))\n\n# Test the function with the given list\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(filter_oddnumbers(nums)) # Output: [1, 3, 5, 7, 9] ",
        "generated_testcode": "assert filter_evennumbers(range(10)) == [0, 2, 4, 6, 8]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n    # Loop through the array and increment the count of each element in the dictionary\n    for i in arr: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n    # Loop through the dictionary and add the values where the value is greater than 1\n    sum_of_repeated_elements = 0\n    for i in freq: \n        if freq[i] > 1: \n            sum_of_repeated_elements += i \n    return sum_of_repeated_elements \n\n# Driver Code\narr = [1, 2, 3, 2, 4, 5, 6, 4, 7, 4, 9, 5, 1] \nn = len(arr) \nprint(find_Sum(arr, n)) # Output: 15\n# Explanation: 2, 4 and 5 are the only repeated elements in the array, so their sum is 10. ",
        "generated_testcode": "assert find_Sum(arr=[1,2,3,4,5,6,7,8,9,1,2,3],n=9) == 4\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    regex = r'[a-z]+_[a-z]+'\n    match = re.search(regex, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'\n\n# Test cases\nprint(text_match(\"python_is_awesome\")) # Output: python_is_awesome\nprint(text_match(\"hello_world\"))    # Output: hello_world\nprint(text_match(\"123_456_python\")) # Output: No match found\nprint(text_match(\"PYTHONisawesome\")) # Output: No match found\nprint(text_match(\"no_underscore\"))  # Output: No match found\n",
        "generated_testcode": "assert text_match(text=\"hello_world\") == True\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Your code goes here\n    import re\n    pattern = \"^word\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test the function with the following example\nprint(text_match_string(\"word is here\")) # Output: True\nprint(text_match_string(\"another word is here\")) # Output: True\nprint(text_match_string(\"here is another word\")) # Output: False\nprint(text_match_string(\"word another word is here\")) # Output: False\n\n# The function should match the word \"word\" at the beginning of the string, regardless of what comes after it. ",
        "generated_testcode": "assert text_match_string(text=\"Hello world\") == True\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x == 0: \n        return y \n    return find_gcd(y % x, x) \n  \ndef find_gcd_array(arr): \n    result = arr[0] \n    for i in range(1, len(arr)): \n        result = find_gcd(result, arr[i]) \n    return result \n  \n# test the function \narr = [12, 14, 20, 28] \nprint(\"GCD of\", arr, \"is\", find_gcd_array(arr)) \n  \narr = [10, 20, 30, 40, 60] \nprint(\"GCD of\", arr, \"is\", find_gcd_array(arr)) \n  \narr = [100, 200, 300, 400] \nprint(\"GCD of\", arr, \"is\", find_gcd_array(arr)) \n  \narr = [1000, 200, 300, 400, 600] \nprint(\"GCD of\", arr, \"is\", find_gcd_array(arr)) ",
        "generated_testcode": "assert find_gcd(12, 18) == 6\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(data) == len(set(data))\n\n# Example usage:\nprint(test_distinct([1, 2, 3, 4, 5, 6]) # True\nprint(test_distinct([1, 2, 2, 3, 4, 5]) # False\nprint(test_distinct([]) # True\nprint(test_distinct([1]) # True\nprint(test_distinct([1, 1]) # False\n",
        "generated_testcode": "assert test_distinct(1, 2, 3, 4, 5) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Calculate the factorial of A and B\n    fact_A = 1\n    for i in range(1, A+1):\n        fact_A = (fact_A * i) % 10\n        \n    fact_B = 1\n    for j in range(1, B+1):\n        fact_B = (fact_B * j) % 10\n    \n    # Calculate the factorial of (A/2) and (B/2)\n    fact_A2 = 1\n    fact_B2 = 1\n    for k in range(1, A//2+1):\n        fact_A2 = (fact_A2 * k) % 10\n    for l in range(1, B//2+1):\n        fact_B2 = (fact_B2 * l) % 10\n        \n    # Calculate the result\n    result = (fact_A * fact_B2) % 10\n    result = (result * fact_B2) % 10\n    result = (result * fact_A2) % 10\n    return result\n\n# Test the function with an example\nprint(compute_Last_Digit(5, 7)) # Output: 6\nprint(compute_Last_Digit(10, 20)) # Output: 0\nprint(compute_Last_Digit(20, 25)) # Output: 0\nprint(compute_Last_Digit(7, 20)) #",
        "generated_testcode": "assert compute_Last_Digit(10, 20) == 0\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return n | (n & -n)\n\n# Test the function\nprint(odd_bit_set_number(12))  # Output: 15\nprint(odd_bit_set_number(10))  # Output: 11\nprint(odd_bit_set_number(7))   # Output: 7\n\n# Explanation:\n# The expression (n & -n) sets all the bits to 1 from right to left until the first 0 bit is encountered. The & operation with n sets all the odd bits to 1.\n# For example:\n# 12: 11000 in binary\n# 12 & -12: 11100 in binary\n# -12: 11000 in binary\n# 1100 | 1100 = 1100 \n# Hence, the function returns 15 for 12. \n# 10: 1010 in binary\n# 10 & -10: 1010 in binary\n# -10: 1010 in binary\n# 10 | 10 = 10\n# Hence, the function returns 10 for 10.\n# 7: 1111 in binary\n# 7 & -7: 1111 in binary\n# -7: 1111 in binary\n# 7 | 7 = 7 ",
        "generated_testcode": "assert odd_bit_set_number(10) == 15\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    result = []\n    for lst in nums:\n        result.append(lst[N])\n    return result\n\n# Test the function with sample input\nnums = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nprint(specified_element(nums, 1))  # Output: [2, 5, 8, 11]\nprint(specified_element(nums, 2))  # Output: [3, 6, 9, 12]\nprint(specified_element(nums, 0))  # Output: [1, 4, 7, 10]\n\n# Explanation: The function takes a two-dimensional list named \"nums\" and an integer N as input. It then loops through the list and extracts the Nth element from each sub-list and adds it to a new list. The result is then returned as a new list. ",
        "generated_testcode": "assert specified_element(nums, 0) == [1, 4, 7, 10]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(filter(lambda x: len(x) == min(map(len, input_list), input_list))\n\n# Example usage:\ninput_list = ['hello', 'world', 'python', 'programming', 'language']\nprint(min_length_list(input_list)) # Output: ['hello', 'world']\n```\n\nExplanation:\n- The `filter()` function takes two arguments, a lambda function and a list. It returns a new list containing all the elements for which the lambda function returns true.\n- The lambda function checks if the length of the element is equal to the minimum length of all the elements in the input_list.\n- The `map()` function is used to find the minimum length of all the elements in the input_list.\n- The `min()` function is used to find the minimum length.\n- `map(len, input_list)` returns a list of lengths of all the elements in the input_list.\n- The `len()` function is used to get the length of each element.\n\nTime complexity: O(n) ",
        "generated_testcode": "assert min_length_list([\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]) == \"kiwi\"\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    if x==y==z:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n    if x==y or y==z or x==z:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is scalene or not.\ndef check_scalene(x,y,z):\n    if x!=y!=z and x!=y:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is right-angled or not.\ndef check_right_angle(x,y,z):\n    if x**2+y**2==z**2 or x**2+z**2==y**2 or y**2+z**2==x**2:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is degenerate or not.\ndef check_degenerate(x,y,z):\n    if x+y==z or x+z==y or y+z==x:\n        return True\n    else:\n        return False\n\n#Write a function to check if the triangle is valid or not.\ndef check_triangle(x,y,z):\n    if x+y>z and y+z>x and z+x>y:\n        return True\n    else:\n        return False\n\n#Write a",
        "generated_testcode": "assert check_equilateral(1,1,1) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return b * h\nprint(parallelogram_area(10, 20))\n\n# Write a function to calculate the area of a circle.\nimport math\ndef circle_area(r):\n    return math.pi * r**2\nprint(circle_area(5))\n\n#Write a function to calculate the area of a rectangle.\ndef rectangle_area(l,w):\n    return l * w\nprint(rectangle_area(10, 20))\n\n#Write a function to calculate the area of a triangle\ndef triangle_area(b,h):\n    return 0.5 * b * h\nprint(triangle_area(10, 15))\n\n#Write a function to calculate the area of a square\ndef square_area(s):\n    return s ** 2\nprint(square_area(10))\n\n#Write a function to calculate the volume of a sphere\nimport math\ndef sphere_volume(r):\n    return (4/3) * math.pi * r**3\nprint(sphere_volume(5))\n\n#Write a function to calculate the volume of a cube\ndef cube_volume(a):\n    return a ** 3\nprint(cube_volume(5))\n\n#Write a function to calculate the volume of a cylinder\nimport math\ndef cylinder_volume(r,h):\n    return math.pi * r**2 * h\nprint(cylinder_volume(5, 10))\n\n#Write a function to calculate the volume",
        "generated_testcode": "assert parallelogram_area(5, 10) == 50\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(check_Equality(\"hello\")) # True\nprint(check_Equality(\"code\")) # False\nprint(check_Equality(\"aaa\")) # True\nprint(check_Equality(\"abba\")) # True\nprint(check_Equality(\"abcd\")) # False ",
        "generated_testcode": "assert check_Equality(input_string) == True/False ",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Find the maximum number in the array\n    max_num = max(my_list)\n    # Create a list of zeros of size max_num + 1\n    count_list = [0] * (max_num + 1)\n    # Count the frequency of each element in the array\n    for num in my_list:\n        count_list[num] += 1\n    # Find the cumulative sum of the count_list\n    for i in range(1, len(count_list)):\n        count_list[i] += count_list[i - 1]\n    # Create a new list to store the sorted array\n    sorted_list = [0] * len(my_list)\n    # Starting from the end of the list, place each element in its correct position\n    for num in reversed(my_list):\n        sorted_list[count_list[num] - 1] = num\n        count_list[num] -= 1\n    return sorted_list\n\n# Test the function with an example\nmy_list = [4, 2, 2, 8, 3, 3, 3, 1, 0]\nprint(counting_sort(my_list))\n\n# Output: [0, 1, 2, 2, 3, 3, 3, 4, 8] ",
        "generated_testcode": "assert counting_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 1, 1, 5, 9, 2, 6, 5, 3, 5, 3, 7]\nprint(counting_sort(my_list)) # should print [1, 1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 9]\n\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return a*(r**n-1)/(r-1)\ntn_gp(2,4,3)\n# 11.875\n# tn_gp(a,n,r)\n# a is the first term of series\n# n is the nth term of series\n# r is the common ratio of series. ",
        "generated_testcode": "assert tn_gp(1,3,2) == 7\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    num_str = str(num)\n    reverse = int(num_str[::-1])\n    if num < (2 * reverse):\n        return True\n    else:\n        return False\n\n#Test the function\nprint(rev(121))    #Output: True\nprint(rev(123))   #Output: False\nprint(rev(1001))  #Output: False\nprint(rev(342))   #Output: True\nprint(rev(10001)) #Output: False\nprint(rev(987654321)) #Output: True\nprint(rev(100000)) #Output: False\nprint(rev(12300)) #Output: False\n\n#Note: The function only checks for a single digit number. It will return false for multi-digit numbers. ",
        "generated_testcode": "assert rev(121) == True\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort(reverse = True)\n    res = 0\n    for i in range(n) : \n        res = res * 10 + arr[i] \n    return res \n\n# Driver code \narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(\"Largest number is\", find_Max_Num(arr, n)) ",
        "generated_testcode": "assert find_Max_Num([\"1\",\"2\",\"3\",\"4\",\"5\"],4) == \"53421\"\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\nprint(opposite_Signs(-3,4)) ",
        "generated_testcode": "assert opposite_Signs(5, -5) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return n == (1 + (1 + (3 * 8 * n) ** 0.5) ** 2) // (2 * (1 + (3 * 8 * n) ** 0.5))\n\ndef nth_octagonal_number(n):\n    oct_num = 0\n    i = 1\n    while not is_octagonal(oct_num):\n        oct_num = n * (2 * i * (i + 1))\n        i += 1\n    return oct_num\n\n# Test cases\nprint(nth_octagonal_number(1)) # Output: 1\nprint(nth_octagonal_number(2)) # Output: 8\nprint(nth_octagonal_number(3)) # Output: 28\nprint(nth_octagonal_number(4)) # Output: 54\nprint(nth_octagonal_number(5)) # Output: 93\nprint(nth_octagonal_number(6)) # Output: 146\nprint(nth_octagonal_number(7)) # Output: 213\nprint(nth_octagonal_number(8)) # Output: 293\nprint(nth_octagonal_number(9)) # Output: 399\nprint(nth_octagonal_number(10)) # Output: 506\nprint(nth_octagonal_number(100)) # Output: 670912\nprint(nth",
        "generated_testcode": "assert is_octagonal(1) == 1\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 1\n    count = 1\n    i = 1\n    while i < n: \n        if abs(arr[i] - arr[i - 1]) <= 1: \n            count += 1\n        else: \n            max_len = max(max_len, count) \n            count = 1\n        i += 1\n    return max(max_len, count) \n  \n# Driver code \narr = [ 3, 1, 5, 5, 10, 4, 6, 9, 7, 2, 6, 8 ] \nn = len(arr) \nprint(\"Length of the longest subsequence with adjacent elements difference <= 1 is\",\n                                            max_len_sub(arr, n)) ",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 5, 7, 9, 11, 13], 6) == 4\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    d={}\n    count=0\n    for i in range(n):\n        d[s[i]]=1\n    for i in range(1,n):\n        d[s[i]=d.get(s[i],0)+1\n    for i in range(n,2*n-1):\n        d[s[i-n]+s[i]]=d.get(s[i-n]+s[i],0)+1\n    return sum(d.values())\n\ns=input(\"Enter string: \")\nn=len(s)\nprint(count_Substrings(s,n))\n\n#Example\ns=\"12345\"\nn=len(s)\nprint(count_Substrings(s,n)) #output 12\n\n#Explanation\n#The substring \"1\" occurs 1 time \n#The substrings \"2\" and \"23\" occur 1 time each\n#The substrings \"3\" and \"34\" occur 1 time each\n#The substring \"4\" occurs 1 time\n#The substring \"5\" occurs 1 time\n#The substrings \"12\", \"23\" and \"34\" occur 2 times each\n#The substring \"123\" occurs 2 times\n#The substrings \"234\" and \"45\" occur 2 times each\n#The substring \"1234\" occurs 2 times\n#The substring \"345\" occurs 2 times\n#The substring \"12345\"",
        "generated_testcode": "assert count_Substrings(s,n) == 3\n\n# Test case 1:\ns = \"12345\"\nn = 5\n# Output: 3\n# Explanation: The substrings with sum of digits equal to their length are \"1\", \"2\", \"3\", \"4\", \"5\"\n\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n\n# Test the function with sample input\nprint(smallest_num([5, 2, 7, 1, 9, 3, 8])) # Should output 1\nprint(smallest_num([-10, 0, -5, -7, -3, -8])) # Should output -10\nprint(smallest_num([1, 1, 1, 1, 1, 1])) # Should output 1\nprint(smallest_num([9, 9, 9, 9, 9])) # Should output 9 ",
        "generated_testcode": "assert smallest_num([]), None\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_diff = 0\n    min_val = test_list[0]\n    for val in test_list:\n        if val < min_val:\n            min_val = val\n        else:\n            diff = val - min_val\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Example usage:\nprint(max_difference((10, 15, 20, 2, 8, 12)) == 18)  # Output: True\nprint(max_difference((1, 100, 50, 30, 20, 40) == 59)  # Output: True\nprint(max_difference((1, 10, 30, 50, 20) == 40)  # Output: True\nprint(max_difference((100, 20, 50, 30, 40) == 0)  # Output: True\nprint(max_difference((10, 20, 30, 40, 50) == 0)  # Output: True ",
        "generated_testcode": "assert max_difference(test_list) == 10\n\n# Test the function with the following input\ntest_list = (10, 20, 5, 8, 12, 15, 3, 7)\nprint(max_difference(test_list)) # Output: 15\n\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n\nsubjectmarks = [(1, 80), (2, 75), (3, 90), (4, 70), (5, 85)]\nprint(subject_marks(subjectmarks))\n\n# Output: [(3, 90), (2, 75), (4, 70), (5, 85), (1, 80)]\n\n#Sort the list of tuples in descending order based on the second element of each tuple using lambda function\n\nWrite a function that takes in a list of tuples and returns a new list with the first element of each tuple sorted in ascending order.\n\ndef sort_first_elements(lst):\n    return sorted(lst, key=lambda x: x[0])\n\nlst = [(3, \"Apple\"), (1, \"Banana\"), (2, \"Grapes\"), (5, \"Mango\"), (4, \"Kiwi\")]\nprint(sort_first_elements(lst))\n\n# Output: [(1, 'Banana'), (2, 'Grapes'), (3, 'Apple'), (4, 'Kiwi'), (5, 'Mango')]\n\n#Sort the list of tuples in ascending order based on the length of the first element of each tuple using lambda function\n\ndef sort_by_length(lst):\n    return sorted(lst, key=lambda x: len(x[0])\n\nlst = [",
        "generated_testcode": "assert subject_marks(subjectmarks=[(\"Maths\", 85), (\"Science\", 90), (\"English\", 75), (\"Social\", 80)]) == [(\"Maths\", 85), (\"Science\", 90), (\"Social\", 80), (\"English\", 75)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n\nprint(recursive_list_sum([1, 2, 3, 4, 5])  # Output: 15\n\n# Write a function to reverse a list using recursion\ndef recursive_reverse(data_list):\n    if len(data_list) == 1:\n        return data_list\n    else:\n        return recursive_reverse(data_list[1:]) + [data_list[0]]\n\nprint(recursive_reverse([1, 2, 3, 4, 5])  # Output: [5, 4, 3, 2, 1]\n\n# Write a function of recursion factorial\ndef recursive_factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * recursive_factorial(n-1)\n\nprint(recursive_factorial(5))  # Output: 120\n\n# Write a function of recursion power\ndef recursive_power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * recursive_power(base, exponent-1)\n\nprint(recursive_power(2, 3))  # Output: 8\n\n# Write a function to find the greatest common divisor of",
        "generated_testcode": "assert recursive_list_sum([] == 0\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n\n#Test cases\nprint(pos_count([1, -2, 0, 3, -4, 5, 6, -7])) # Should return 3\nprint(pos_count([-1, -2, -3, -4, -5, -6, -7])) # Should return 0\nprint(pos_count([1, 2, 3, 4, 5, 6, 7])) # Should return 5\nprint(pos_count([])) # Should return 0\nprint(pos_count([0, -1, -2, -3, 4, -5]) # Should return 1\n\n#Solution 2\ndef count_positive(lst):\n    return sum(1 for num in lst if num > 0)\n\n#Test cases\nprint(count_positive([1, -2, 0, 3, -4, 5, 6, -7])) # Should return 3\nprint(count_positive([-1, -2, -3, -4, -5, -6, -7])) # Should return 0\nprint(count_positive([1, 2, 3, 4, 5, 6, 7])) # Should return 5\nprint(count_positive([])) # Should return 0\nprint(count_positive([0, -1, -2, -",
        "generated_testcode": "assert pos_count([]), 0\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # base case\n    if n == 0:\n        return 1\n    # recursive step\n    else:\n        return bell_number(n-1) * 2 * n\n        \ndef partition(set_size):\n    # initialize empty set\n    set_list = []\n    # iterate over bell numbers\n    for i in range(set_size):\n        # append the bell number to the set\n        set_list.append(bell_number(i))\n    # return the number of partitions of the set\n    return sum(set_list)\n    \nprint(partition(3)) # should return 5\nprint(partition(4)) # should return 15\nprint(partition(5)) # should return 52\nprint(partition(6)) # should return 252\n\n# 52 is the correct answer for set of size 6",
        "generated_testcode": "assert bell_number(0) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # monotonic means that either all elements are in increasing or decreasing order\n    # if the array is sorted in increasing order then it is monotonic increasing\n    # if the array is sorted in decreasing order then it is monotonic decreasing\n    # if it is neither then it is neither monotonic increasing nor decreasing\n    n = len(A)\n    if n < 2:\n        return True # if array has less than 2 elements then it is monotonic\n    increasing = decreasing = True # initialize variables for increasing and decreasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            increasing = False # if any element is less than its previous element then it is not monotonic increasing\n        elif A[i] < A[i-1]:\n            decreasing = False # if any element is greater than its previous element then it is not monotonic decreasing\n    return increasing or decreasing\n\n# Test the function\nA = [1, 2, 3, 4, 5]\nprint(is_Monotonic(A)) # True (increasing)\nA = [5, 4, 3, 2, 1]\nprint(is_Monotonic(A)) # True (decreasing)\nA = [1, 2, 3, 5, 4]\nprint(is_Monotonic(A)) # False (neither)\nA = [1, 1, 1, 1]\nprint(is_Monotonic(A))",
        "generated_testcode": "assert is_Monotonic(A) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    sublist = False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            sublist = True\n            break\n    return sublist\n\n# Example usage:\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ns = [3, 4, 5]\nprint(is_sublist(l, s))  # Output: True\n\n# Another example\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ns = [0, 3, 4, 5]\nprint(is_sublist(l, s))  # Output: False\n",
        "generated_testcode": "assert is_sublist([\"a\", \"b\", \"c\", \"d\"], [\"b\", \"c\"]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    l = len(Input)\n    l1 = len(Input[0])\n    for i in range(l):\n        if len(Input[i]) != l1:\n            return False\n    return True\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nk = 3\nprint(find_equal_tuple(Input, k))\n\n# Output: True\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9, 10), (10, 11, 12)]\nk = 3\nprint(find_equal_tuple(Input, k))\n\n# Output: False\n\nInput = [(1, 2, 3, 4), (4, 5, 6, 7), (7, 8, 9), (10, 11, 12)]\nk = 3\nprint(find_equal_tuple(Input, k))\n\n# Output: False ",
        "generated_testcode": "assert find_equal_tuple(Input = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], k = 3) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def get_gap(size):\n        return size // 1.3\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n\n        n -= gap\n\n    return nums\n\n\nnums = [10, 7, 8, 3, 9, 1, 5, 2, 4, 6, 12, 11, 23]\nprint(comb_sort(nums))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 23]\n",
        "generated_testcode": "assert comb_sort([]).sort() == []\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in range(int(n**0.5)+1): \n        if (int(n**0.5)-i)**2 == n-i**2: \n            return True\n    return False\n\n#Testing the function\nprint(dif_Square(25))\nprint(dif_Square(26)) \nprint(dif_Square(36)) \nprint(dif_Square(49)) \nprint(dif_Square(50)) ",
        "generated_testcode": "assert dif_Square(16) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    return re.split(r'[;|,|.]', text)\n\n# Test the function with the sample input\nprint(multiple_split(\"hello;world.this;is|a|test\"))\n# Output: ['hello', 'world', 'this', 'a', 'test']\n\n# Test the function with multiple delimiters\nprint(multiple_split(\"hello;world.this,is|a|test\"))\n# Output: ['hello', 'world', 'this', 'a', 'test']\n\n# Test the function with no delimiter in the input string\nprint(multiple_split(\"hellothisisatest\"))\n# Output: ['hellothisisatest'] ",
        "generated_testcode": "assert multiple_split(r\"Hello, world! I am a string.\", \", \") == [\"Hello\", \"world! I am a string.\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i] or (colors[i] == patterns[i][0] and colors[i+1:len(patterns[i])] == patterns[i][1:]):\n            continue\n        else:\n            return False\n    return True\n\n# Test cases\nprint(is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue'], ['red', 'blue', 'green', 'yellow', 'orange']))  # True\nprint(is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue'], ['red', 'green', 'yellow', 'orange', 'blue']))  # True\nprint(is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue'], ['red', 'orange', 'yellow', 'green', 'blue', 'red']))  # False\nprint(is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue'], ['red', 'orange', 'green', 'yellow', 'blue']))  # True\nprint(is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue'], ['red', 'blue', 'yellow', 'green', 'orange']))  # False\nprint(is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue'], ['red', 'orange', 'yellow', 'green',",
        "generated_testcode": "assert is_samepatterns([\"red\", \"green\", \"blue\", \"yellow\", \"red\", \"green\", \"blue\"], [\"red\", \"green\", \"blue\"]) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        if all(num%K==0 for num in tup):\n            result.append(tup)\n    return result\n\n# Test the function\ntest_list = [(2, 3, 4), (5, 12, 6), (7, 8, 9), (10, 12, 15), (15, 24, 21), (18, 21, 27), (20, 24, 30)]\nK = 3\nprint(find_tuples(test_list, K)) # Output: [(3, 6, 9), (12, 18, 21)] ",
        "generated_testcode": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i == j or i == 1 or j == 1:\n                count += 1\n            else:\n                count += 1\n    return count\n\n#Test the function with some sample inputs\nprint(count_Squares(3,3)) #Output: 10\nprint(count_Squares(4,4)) #Output: 16\nprint(count_Squares(5,5)) #Output: 25\nprint(count_Squares(6,6)) #Output: 36\nprint(count_Squares(7,7)) #Output: 49\nprint(count_Squares(8,8)) #Output: 64\n\n#Time Complexity : O(m*n) ",
        "generated_testcode": "assert count_Squares(3,4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_even = 0\n    sum_odd = 0\n    for digit in str(n): \n        if int(digit) % 2 == 0: \n            sum_even += int(digit) \n        else: \n            sum_odd += int(digit) \n    return sum_even - sum_odd \n\n# Testing the function \nn = 123456789 \nprint(\"Difference between sum of even and odd digits:\", \n        is_Diff(n)) \n\n# Output: Difference between sum of even and odd digits: 24\n\n# Time Complexity: O(log n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert is_Diff(12345) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count \n\n# test the function\nprint(count_With_Odd_SetBits(10)) # Output: 5\nprint(count_With_Odd_SetBits(20)) # Output: 8\nprint(count_With_Odd_SetBits(30)) # Output: 10\nprint(count_With_Odd_SetBits(40)) # Output: 16\nprint(count_With_Odd_SetBits(50)) # Output: 23\nprint(count_With_Odd_SetBits(100)) # Output: 60 ",
        "generated_testcode": "assert count_With_Odd_SetBits(10) == 5\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s) % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n# Testing the function \ns = \"Hello\"\nprint(word_len(s)) ",
        "generated_testcode": "assert word_len(s) == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Initialize the sum\n    sum = 0\n    for i in range(n + 1): \n        sum += i \n    return (sum * (sum + 1) // 2) \n  \n# Test the function \nn = 4\nprint(tetrahedral_number(n)) # Output: 10 (the 4th tetrahedral number is 10) ",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(zip(test_tup1, test_tup2))\n\n# Example usage:\n# print(zip_tuples((1, 2, 3), (4, 5, 6)) # Output: ((1, 4), (2, 5), (3, 6))\n# print(zip_tuples(('a', 'b', 'c'), (1, 2, 3)) # Output: (('a', 1), ('b', 2), ('c', 3))\n",
        "generated_testcode": "assert zip_tuples(('a', 'b', 'c'), (1, 2, 3)) == (('a', 1), ('b', 2), ('c', 3))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    V = (4/3) * 3.14159 * r ** 3\n    return V\n\n# Test the function\nprint(volume_sphere(5)) ",
        "generated_testcode": "assert volume_sphere(3) == 113.04761904761904762\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in strr:  \n        sum += ord(i)  \n    return chr(sum)  \n# Driver code  \nstring = \"abcdef\"  \nresult = get_Char(string)  \nprint(\"The character made by adding all the characters in the string is:\", result) ",
        "generated_testcode": "assert get_Char(input(\"Enter a string: \") == \"a\") # should return \"a\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0: return \"0\"\n    if n == 1: return \"1\"\n    seq = \"1\"\n    while n > 1: \n        i = 0\n        temp = \"\"\n        while i < len(seq): \n            count = 1\n            j = i + 1\n            while j < len(seq) and seq[j] == seq[i]: \n                count += 1\n                j += 1\n            temp += str(count) + seq[i]\n            i = j\n        seq = temp \n        n -= 1\n    return seq\n    \n# Test the function with some inputs \nprint(sequence(1) == \"1\")  # Should output \"1\"\nprint(sequence(4) == \"11\")  # Should output \"11\"\nprint(sequence(8) == \"21\")  # Should output \"21\"\nprint(sequence(11) == \"111\") # Should output \"111\"\nprint(sequence(20) == \"312211\") # Should output \"312211\"\nprint(sequence(30) == \"132112211\") # Should output \"132112211\" ",
        "generated_testcode": "assert sequence(0) == 0\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14\n    return 4 * pi * r ** 2\n\n# Test the function with some values\nprint(surfacearea_sphere(3))  # Output: 113.0144\nprint(surfacearea_sphere(5))  # Output: 190.887\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    pi = 3.14\n    return (4/3) * pi * r ** 3\n\n# Test the function with some values\nprint(volume_sphere(3))  # Output: 1132.21\nprint(volume_sphere(5))  # Output: 515.21\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r, h):\n    pi = 3.14\n    return pi * r ** 2 * h\n\n# Test the function with some values\nprint(volume_cylinder(3, 4))  # Output: 1136.00\nprint(volume_cylinder(5, 6))  # Output: 235.13\n\n# Write a function to find the surface area of a cylinder\ndef surfacearea_cylinder(r, h):\n    pi = 3.14\n    return 2 * pi * r * (r + h)\n\n# Test the function with some values\nprint(surfacearea_",
        "generated_testcode": "assert surfacearea_sphere(3) == 113.0476\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    hexagonal_number = n * (2 * n - 1)\n    return hexagonal_number\n\n\n# Test the function with the first 10 numbers\nfor i in range(1, 11):\n    print(\"Centred hexagonal number\", i, \":\", centered_hexagonal_number(i))\n",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    #creating an empty dictionary\n    merged_dict = {}\n    #merging the dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n#Testing the function\ndict1 = {'a':1,'b':2,'c':3}\ndict2 = {'d':4,'e':5,'f':6}\ndict3 = {'g':7,'h':8,'i':9}\nprint(merge_dictionaries_three(dict1,dict2,dict3))\n#Output: {'a': 1, 'c': 3, 'b': 2, 'f': 6, 'e': 5, 'g': 7, 'h': 8, 'i': 9, 'd': 4} ",
        "generated_testcode": "assert merge_dictionaries_three(dict1={'a':1,'b':2},dict2={'c':3,'d':4},dict3={'e':5,'f':6}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\n\n# Test the function with the following input\ndict1 = {'a':1,'b':2}\ndict2 = {'c':3,'d':4}\ndict3 = {'e':5,'f':6}\nprint(merge_dictionaries_three(dict1,dict2,dict3)) # should output {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6} ",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 2, 3, 4, 8, 9, 1]\nprint(freq_count(my_list))\n\n\n# Output: {1: 2, 2: 2, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n",
        "generated_testcode": "assert freq_count([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\", \"cherry\", \"cherry\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Convert N to a list of digits\n    digits = [int(d) for d in str(N)]\n    # Find the index of the smallest digit\n    smallest_idx = min(range(len(digits), key=lambda i: digits[i])\n    # Replace that digit with the next smallest digit\n    digits[smallest_idx] += 1\n    while digits[smallest_idx] == 10:\n        # If we've rolled over to 10, move to the next digit\n        digits[smallest_idx] = 0\n        smallest_idx += 1\n        # If we've gone through all the digits, insert a 1 at the beginning\n        if smallest_idx == len(digits):\n            digits.insert(0, 1)\n            break\n    # Return the result as an integer\n    return int(''.join(str(d) for d in digits)\n\n# Test cases\nprint(closest_num(1234)) # 1235\nprint(closest_num(99)) # 100\nprint(closest_num(10000)) # 1001\n\\end{code}\n\nThis function works by finding the index of the smallest digit in the number, and then incrementing it. If it rolls over to 10, it moves on to the next digit. If it goes through all the digits and doesn't find a smaller number, it inserts a 1 at the beginning.\n\nComment: This function doesn't",
        "generated_testcode": "assert closest_num(10) == 9\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# Test the function with the following list\nwords = ['apple', 'banana', 'cherry', 'date', 'elderberry']\nprint(len_log(words)) # Output: 8\n\n# Output: 8 because 'elderberry' is the longest word with a length of 9. ",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == 8\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(str1)):\n        if sub_str in str1[i]:\n            return True\n    return False\n\n# Test the function with a list of strings and a substring\nstr1 = ['apple', 'banana', 'orange', 'grape', 'kiwi']\nsub_str = 'ap'\nprint(find_substring(str1, sub_str)) # True\n\nsub_str = 'po'\nprint(find_substring(str1, sub_str)) # False\n\n# You can also use the any() function to simplify the code:\ndef find_substring(str1, sub_str):\n    return any(sub_str in string for string in str1)\n\nprint(find_substring(str1, 'ap')) # True\nprint(find_substring(str1, 'po')) # False ",
        "generated_testcode": "assert find_substring([\"hello\", \"world\", \"python\", \"programming\"], \"o\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Convert the number to string and iterate through each digit\n    n = str(n)\n    for i in range(1, len(n) - 1): \n        # If the current digit is greater than the previous and next digit, then it's not undulating\n        if int(n[i]) > int(n[i - 1]) and int(n[i]) > int(n[i + 1]): \n            return False\n    # If all the digits are in order, then it's undulating\n    return True\n\n# Test the function\nprint(is_undulating(1234567))  # True\nprint(is_undulating(1253467))  # True\nprint(is_undulating(125367))   # False\nprint(is_undulating(1234566))  # False\nprint(is_undulating(123456))   # True\nprint(is_undulating(123546))   # True\nprint(is_undulating(12546))    # True\nprint(is_undulating(12654))    # True\nprint(is_undulating(12556))    # True ",
        "generated_testcode": "assert is_undulating(123456) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for i in range(b):\n        result *= a\n    return result\n\n#Example usage:\nprint(power(2,5)) #returns 32 (2 raised to the power of 5)\n\n#Example usage:\nprint(power(3,3)) #returns 27 (3 raised to the power of 3) ",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    index_min = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_value = test_list[i][1]\n            index_min = i\n    return index_min\n\ntest_list = [(\"apple\", 3), (\"banana\", 2), (\"orange\", 1), (\"grape\", 4), (\"kiwi\", 6), (\"mango\", 5)]\nindex = index_minimum(test_list)\nprint(\"The index of the minimum value record is:\", index)\n\n# Output: The index of the minimum value record is: 2\n# Explanation: The minimum value in the list is \"orange\" which is at index 2. ",
        "generated_testcode": "assert index_minimum([(1, 2, 3), (4, 5, 6), (7, 8, 9)] ) == 0\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_length = len(lst[0])\n    for i in lst:  \n        if len(i) < min_length:  \n            min_length = len(i)  \n    return min_length  \n\n# driver code  \nlst = [\"geeks\", \"for\", \"geeks\", \"best\"]  \nprint(Find_Min_Length(lst)) ",
        "generated_testcode": "assert Find_Min_Length(lst) == 2\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n\nprint(divisor(6))\n# Output: 3\nprint(divisor(8))\n# Output: 4\nprint(divisor(12))\n# Output: 6\n\n# Testing with other inputs\nprint(divisor(10))\n# Output: 4\nprint(divisor(15))\n# Output: 4\nprint(divisor(20))\n# Output: 5\n\n# It works, but it's not efficient for large numbers. ",
        "generated_testcode": "assert divisor(12) == 6\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(frequency_lists(list1))  # Output: {1: 3, 2: 3, 3: 3, 4: 3, 5: 3, 6: 3, 7: 3, 8: 3, 9: 1}\n\nlist2 = [10, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 100]\nprint(frequency_lists(list2))  # Output: {10: 3, 20: 2, 30: 2, 40: 2, 50: 2, 60:",
        "generated_testcode": "assert frequency_lists([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"apple\"]) == {\"apple\": 3, \"banana\": 2, \"cherry\": 3}\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 1\n    for number in numbers:\n        total *= number\n    return total / len(numbers)\n\n# Test the function with a list of numbers\nnumbers = [1, 2, 3, 4, 5]\nprint(multiply_num(numbers))  # Output: 3\n\n# Test the function with an empty list\nnumbers = []\nprint(multiply_num(numbers))   # Output: 0.0\n\n# Test the function with a list of negative numbers\nnumbers = [-1, -2, -3, -4, -5]\nprint(multiply_num(numbers))  # Output: -1\n\n# Test the function with a list of positive and negative numbers\nnumbers = [1, 2, -3, 4, -5]\nprint(multiply_num(numbers))  # Output: -0.5\n\n# Test the function with a list of strings\nnumbers = [\"a\", \"b\", \"c\", \"d\"]\nprint(multiply_num(numbers))  # Output: TypeError: unsupported operand type(s) for *=: 'int' and 'str' ",
        "generated_testcode": "assert multiply_num([]), 0\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    binary = '' \n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary \n\n# driver code \nn = 10\nprint(decimal_to_binary(n)) ",
        "generated_testcode": "assert decimal_to_binary(10) == \"1010\"\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    num_str = str(num)\n    if len(num_str) == 1:\n        return str(int(num) + 1)\n    elif num_str == num_str[::-1]:\n        return str(int(num) + 1)\n    else:\n        num += 1\n        while True:\n            if str(num) == str(num)[::-1]:\n                return str(num)\n            num += 1\n# Test cases\nprint(next_smallest_palindrome(123)) # 12321\nprint(next_smallest_palindrome(1234)) # 12321\nprint(next_smallest_palindrome(12345)) # 123321\nprint(next_smallest_palindrome(123456)) # 1234431\nprint(next_smallest_palindrome(1234567)) # 1234531\nprint(next_smallest_palindrome(12345678)) # 1234567\nprint(next_smallest_palindrome(12345679)) # 12345681\nprint(next_smallest_palindrome(12345681)) # 12345682\nprint(next_smallest_palindrome(12345",
        "generated_testcode": "assert next_smallest_palindrome(123) == 12321\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    return arr[k-1]\n\n# Test the function with sample inputs\narr = [7, 10, 4, 3, 20, 12, 11, 9]\nn = len(arr)\nk = 3\nprint(\"The third element in the given array is:\", kth_element(arr, n, k))\n\n# Output: 7\n\n# Time complexity: O(nlogn) due to sorting\n# Space complexity: O(1)\n\n\n# Another approach\ndef kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]\n\n# Test the function with sample inputs\narr = [7, 10, 4, 3, 20, 12, 11, 9]\nn = len(arr)\nk = 3\nprint(\"The third element in the given array is:\", arr[k-1])\n\n# Output: 7\n\n# Time complexity: O(1)\n# Space complexity: O(1)\n",
        "generated_testcode": "assert kth_element(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=7, k=3) == 6\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    return ''.join(word.title().split('_'))\n\n# Test the function with example\nprint(snake_to_camel('hello_world'))  # Output: HelloWorld\nprint(snake_to_camel('good_luck'))  # Output: GoodLuck\nprint(snake_to_camel('python_is_great'))  # Output: PythonIsGreat\nprint(snake_to_camel('snake_to_camel'))  # Output: SnakeToCamel\nprint(snake_to_camel('this_is_a_long_snake_case_string'))  # Output: ThisIsALongCamelCaseString\n\n# Example usage:\nsnake_case_string = 'python_is_great'\ncamel_case_string = snake_to_camel(snake_case_string)\nprint(camel_case_string)  # Output: PythonIsGreat\n\n# Example usage with list of strings:\nsnake_case_list = ['python_is_great', 'snake_to_camel', 'this_is_a_long_snake_case_string']\ncamel_case_list = []\nfor word in snake_case_list:\n    camel_case_list.append(snake_to_camel(word))\nprint(camel_case_list)  # Output: ['PythonIsGreat', 'SnakeToCamel', 'ThisIsALongCamelCaseString']",
        "generated_testcode": "assert snake_to_camel(snake_case_string) == camel_case_string\n\n# Test the function with the following strings\nsnake_case_string = \"hello_world\"\ncamel_case_string = \"helloWorld\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 1 or m < 1:\n        return 0\n    if n == 1 or m == 1:\n        return 1\n    if n == 2 or m == 2:\n        return 1\n    if n == m:\n        return 1\n    if n > m:\n        n, m = m, n\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        if m == 4:\n            return 3\n        if m > 4:\n            return 1\n    if n > 3:\n        if m == 4:\n            return 2\n        if m > 4:\n            return 2 * eulerian_num(n-1, m) - 1\n    if m > n:\n        return eulerian_num(m, n)\n    \n    if m == 2:\n        return eulerian_num(n-1, 1) + 1\n    else:\n        return eulerian_num(n-1, 1) + eulerian_num(n, m-1)\n\n# Test cases\nprint(eulerian_num(2, 3)) # Output: 1\nprint(eulerian_num(3, 4)) # Output: 2\nprint(eulerian_num(4, 4)) # Output: 1\nprint(eulerian_num(5, 5)) #",
        "generated_testcode": "assert eulerian_num(5, 3) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: sorted(x), input_list))\n\n# Example usage:\ninput_list = [['banana', 'apple', 'orange'], ['cat', 'dog', 'fish'], ['apple', 'banana']]\nprint(sort_sublists(input_list)) # Output: [['apple', 'banana', 'orange'], ['cat', 'dog', 'fish'], ['apple', 'banana']]\n\n# Test with other examples:\ninput_list = [['banana', 'apple', 'orange', 'pear'], ['cat', 'dog', 'fish', 'bird'], ['apple', 'banana', 'orange']]\nprint(sort_sublists(input_list)) # Output: [['apple', 'banana', 'orange', 'pear'], ['bird', 'cat', 'dog', 'fish'], ['apple', 'banana', 'orange']]\n\ninput_list = [['z', 'a', 'c', 'd', 'x', 'e'], ['z', 'b', 'c', 'a'], ['c', 'd', 'a', 'b'], ['x', 'y', 'z']]\nprint(sort_sublists(input_list)) # Output: [['a', 'banana', 'apple', 'orange', 'pear'], ['cat', 'dog', 'fish', 'bird'], ['apple', 'banana', 'orange']]\n\ninput_list = [['z', 'a', 'c', 'd', 'x', 'e",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n\n#Example usage:\nlst = [True, False, True, False, True, False, False]\nprint(count(lst)) # Output: 3\n\nlst = [True, True, False, False, True, False, False]\nprint(count(lst)) # Output: 3\n\nlst = [False, False, False, False, False, False]\nprint(count(lst)) # Output: 0\n\nlst = [True, True, True, True, True, True]\nprint(count(lst)) # Output: 4\n\nlst = []\nprint(count(lst)) # Output: 0\n\nlst = [1, 0, \"a\", False, \"Hello\", True, 3.14]\nprint(count(lst)) # Output: TypeError: 'bool' object is not supported\n",
        "generated_testcode": "assert count([]), 0\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] + test_list[i])\n    return tuple(result)\n\n# Test the function with an example\ntest_list = [1, 2, 3]\ntest_tup = (4, 5, 6)\nprint(add_lists(test_list, test_tup))  # Output: (5, 7, 9)\n\n# Test the function with another example\ntest_list = [5, 6, 7]\ntest_tup = (8, 9, 10)\nprint(add_lists(test_list, test_tup))  # Output: (13, 15, 17) ",
        "generated_testcode": "assert add_lists([\"a\", \"b\", \"c\"], (1, 2, 3)) == (\"a\", \"b\", \"c\", 1, 2, 3)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in range(L,R+1) : \n        if i == int(str(i), 16) : \n            count = count + 1\n    return count \n  \n  \n# Driver code \nL = 1\nR = 10\nprint(count_Hexadecimal(L,R)) ",
        "generated_testcode": "assert count_Hexadecimal(0, 10) == 10\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    i=j=k=0\n    result=[]\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<=num2[j] and num1[i]<=num3[k]:\n            result.append(num1[i])\n            i+=1\n        elif num2[j]<=num1[i] and num2[j]<=num3[k]:\n            result.append(num2[j])\n            j+=1\n        else:\n            result.append(num3[k])\n            k+=1\n    if i==len(num1):\n        result.extend(num2[j:])\n        result.extend(num3[k:])\n    elif j==len(num2):\n        result.extend(num1[i:])\n        result.extend(num3[k:])\n    else:\n        result.extend(num1[i:])\n        result.extend(num2[j:])\n    return result\n\nnum1=[1,3,5,7,9]\nnum2=[2,4,6,8]\nnum3=[0,10,11]\nprint(merge_sorted_list(num1,num2,num3)) #[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n# Explanation:\n# The function takes",
        "generated_testcode": "assert merge_sorted_list(num1=[1,3,5,7],num2=[2,4,6],num3=[0,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n%2 != 0: \n        return s \n    else: \n        return s+s \n\ndef count_rotations(s): \n    s = odd_Equivalent(s, len(s)) \n    count = 0\n    for i in range(len(s)): \n        if s[i] == '1': \n            count += 1\n    return count \n\n# Test the function \ns = \"10100\"\nprint(count_rotations(s)) ",
        "generated_testcode": "assert odd_Equivalent(s,n) == 2\n\n# Test the function with the following inputs\ns = \"10101\"\nn = 4\nprint(odd_Equivalent(s,n)) # Output: 2\n\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_list: list of integers\n    :param strt_val: integer, start value of the range\n    :param stop_val: integer, end value of the range\n    :return: a list of tuples representing the missing ranges\n    \"\"\"\n    # sort the list in ascending order\n    test_list.sort()\n    \n    # create an empty list to store the missing ranges\n    missing = []\n    \n    # loop through the list and check for missing ranges\n    for i in range(strt_val, stop_val + 1):\n        if i not in test_list:\n            # if i is missing, check if the previous value is also missing\n            if not i - 1 in test_list:\n                start = i\n            else:\n                # i is not missing, but the previous value is missing, add the missing range to the list\n                end = i - 1\n                missing.append((start, end))\n    return missing\n\n# test the function with an example\nprint(extract_missing([1, 3, 5, 8, 9, 11, 12], 0, 15))\n# Output: [(0, 0), (4, 4), (6, 7), (10, 10)]\n\n# test the function with another example\nprint(extract_missing([1, 2, 3, 4, 6, 7, 8, 9, 10], 0, 10))\n#",
        "generated_testcode": "assert extract_missing(test_list=[1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], strt_val=1, stop_val=15) == [6, 16]\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    return list(common_elements)\n\n# Example usage:\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]\nprint(common_in_nested_lists(nested_list))  # Output: [4]\n\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8, 9]]\nprint(common_in_nested_lists(nested_list))  # Output: [5, 6]\n\nnested_list = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9]]\nprint(common_in_nested_lists(nested_list))  # Output: [4, 5, 6] ",
        "generated_testcode": "assert common_in_nested_lists([[1,2,3], [2,3,4], [3,4,5]] ) == [3]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    r = diameter/2\n    return 2*(22/7)*(r+height)\n\n# Define a function to find the volume of a cylinder\ndef volume(diameter, height) : \n    r = diameter/2\n    return (22/7)*(r**2)*height\n\n# Define a function to find the surface area of a cylinder\ndef surface_area(diameter) : \n    r = diameter/2\n    return 2*(22/7)*(r**2)*3.14\n\n# Define a function to find the volume of a sphere\ndef volume_sphere(radius) : \n    return (4/3)*(3.14)*(radius**3)\n\n# Define a function to find the surface area of a sphere\ndef surface_area_sphere(radius) : \n    return 4*(3.14)*(radius**2)\n\n# Define a function to find the surface area of a cone\ndef surface_area_cone(radius,height) : \n    slant_height = (2*radius*height)**0.5\n    return (3.14)*radius*slant_height\n\n# Define a function to find the volume of a cone\ndef volume_cone(radius,height) : \n    slant_height = (2*radius*height)**0.5\n    return (1/3)*(3.14)*radius**2*slant_height\n\n# Define a function to find the surface area of a tor",
        "generated_testcode": "assert perimeter(10,20) == 188.80\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n\nprint(check_integer(\"5\"))  # True\nprint(check_integer(\"a\"))  # False\nprint(check_integer(\"10.5\"))  # False\nprint(check_integer(\"-10\"))  # True\n\n# Another way using regular expressions\nimport re\n\ndef check_integer_regex(text):\n    pattern = r\"^[-+]?\\d+$\"\n    return bool(re.match(pattern, text))\n\nprint(check_integer_regex(\"5\"))  # True\nprint(check_integer_regex(\"a\"))  # False\nprint(check_integer_regex(\"10.5\"))  # False\nprint(check_integer_regex(\"-10\"))  # True\n\n# Check if a string is a valid integer or not using the isdigit() method\ndef check_integer_isdigit(text):\n    return text.isdigit()\n\nprint(check_integer_isdigit(\"5\"))  # True\nprint(check_integer_isdigit(\"a\"))  # False\nprint(check_integer_isdigit(\"10.5\"))  # False\nprint(check_integer_isdigit(\"-10\"))  # True\n\n# Check if a string is a valid integer or not using the isnumeric() method\ndef check_integer_isnumeric(text):\n    return text.isnumeric()\n\nprint(check_integer_isnumeric(\"5\"))  # True\nprint",
        "generated_testcode": "assert check_integer(text=\"123\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n\n\n# Test the function with the following tuple list\ntest_list = [(1, 2, 3), (1, 2, 3), (1, 2, 3), (4, 5, 6), (4, 5, 6), (7, 8, 9)]\nprint(assign_freq(test_list))\n\n# Output: {(1, 2, 3): 3, (4, 5, 6): 2, (7, 8, 9): 1}\n\n# Test the function with an empty tuple list\ntest_list = []\nprint(assign_freq(test_list))\n# Output: {}\n\n# Test the function with a list of non-tuples\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(assign_freq(test_list))\n# Output: TypeError: unhashable type: 'int' ",
        "generated_testcode": "assert assign_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 2, \"orange\": 1, \"kiwi\": 1}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    result = all(not d for d in list1)\n    return result\n\n# Test case\nlist1 = [{}, {'a': 1}, {}, {'b': 2, 'c': 3}]\nprint(empty_dit(list1)) # Output: False ",
        "generated_testcode": "assert empty_dit([]), True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result\n\n# Test cases\nprint(tuple_to_int((1, 2, 3, 4)) == 1234)\nprint(tuple_to_int((4, 2, 1) == 421)\nprint(tuple_to_int((7,) == 7)\nprint(tuple_to_int((1, 0, 0, 0) == 100)\nprint(tuple_to_int((0, 0, 0, 1) == 0)\nprint(tuple_to_int((9, 9, 9, 9, 9) == 9999) ",
        "generated_testcode": "assert tuple_to_int(()) == 0\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for item in test_list:\n        try:\n            result.append(float(item))\n        except ValueError:\n            result.append(item)\n    return result\n\n# Example usage:\nmy_list = ['1', '2', '3.5', 'a', '4.5', '6']\nprint(list_to_float(my_list))\n\n# Output: ['1.0', '2.0', '3.5', 'a', '4.5', '6.0']\n\n# Test with your own list:\nmy_list = [1, 2, '3.5', 'a', 4.5, '6']\nprint(list_to_float(my_list))\n# Output: [1.0, 2.0, '3.5', 'a', 4.5, 6.0]\n\n# Test with an empty list:\nmy_list = []\nprint(list_to_float(my_list))\n# Output: []\n\n# Test with a list with only non-convertible elements:\nmy_list = ['a', 'b', 'c']\nprint(list_to_float(my_list))\n# Output: ['a', 'b', 'c']\n\n# Test with a list with only one convertible element:\nmy_list = ['4.5']\nprint(list_to_float(my_list))\n# Output: ['4.5'] ",
        "generated_testcode": "assert list_to_float([\"1\", \"2\", \"3.5\", \"4.2\", \"5.6\", \"6\"]) == [1.0, 2.0, 3.5, 4.2, 5.6, 6.0]\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(string) \n\n# Example usage:\nstring_to_list(\"hello\") # ['h', 'e', 'l', 'l', 'o']\n\n# write a function to convert a list to a string.\ndef list_to_string(lst): \n    return ''.join(lst) \n\n# Example usage:\nlist_to_string(['h', 'e', 'l', 'l', 'o']) # 'hello'\n\n# write a function to concatenate two lists\ndef concatenate_lists(list1, list2): \n    return list1 + list2 \n\n# Example usage:\nconcatenate_lists(['hello', 'world'], [1, 2, 3]) # ['hello', 'world', 1, 2, 3]\n\n# write a function to get the length of a list\ndef list_length(lst): \n    return len(lst) \n\n# Example usage:\nlist_length(['hello', 'world', 1, 2, 3]) # 4\n\n# write a function to get the first element of a list\ndef first_element(lst): \n    return lst[0] \n\n# Example usage:\nfirst_element(['hello', 'world', 1, 2, 3]) # 'hello'\n\n# write a function to get the last element of a list\ndef last_element(lst): \n    return lst[-1] \n\n# Example usage:\nlast_element(['hello', 'world', 1,",
        "generated_testcode": "assert string_to_list(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"hello world\"\nexpected_output = [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\"]\n\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    for i in range(1,n):\n        if arr[i-1] != arr[i]:\n            return i\n    return -1\n\n#Driver Code\narr = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\nn = len(arr)\nprint(search(arr, n)) ",
        "generated_testcode": "assert search(arr=[1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5], n=7) == 3\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n#Test the function\nlist1 = [(1,2),(3,4),(5,6),(7,8)]\nprint(max_product_tuple(list1)) #output: 56\n\nlist2 = [(10,20),(30,40),(5,6),(7,8)]\nprint(max_product_tuple(list2)) #output: 20000\n\nlist3 = [(10,20),(30,40),(5,6),(7,8),(-10,-20)]\nprint(max_product_tuple(list3)) #output: 2000\n\nlist4 = [(10,-20),(30,-40),(5,6),(7,-8)]\nprint(max_product_tuple(list4)) #output: 400\n\nlist5 = [(10,-20),(30,-40),(5,-6),(7,-8)]\nprint(max_product_tuple(list5)) #output: 2400\n\nlist6 = [(10,-20),(-30,-40),(5,-",
        "generated_testcode": "assert max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)] ) == 48\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    A.sort()\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            current_sum = A[i] + A[j] + A[k]\n            if current_sum == sum:\n                count[0] += 1\n                j += 1\n                k -= 1\n            elif current_sum < sum:\n                j += 1\n            else:\n                k -= 1\n    return count[0]\n\n\n# Driver code\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(A)\nsum = 15\ncount = [0]\ntriplet_count = check_triplet(A, n, sum, count)\nprint(\"The number of triplets with sum\", sum, \"is:\", triplet_count)\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert check_triplet(A, n, sum, count) == True\n\n# Test the function with the following input\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(A)\nsum = 15\ncount = 0\nprint(check_triplet(A, n, sum, count)) # Output: True\n\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    else: \n        return (n * smartNumber(n - 1)) + n \n  \n# Driver code \nn = 5\nprint(smartNumber(n)) ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    amicable_sum = 0\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            if is_amicable(i, j):\n                amicable_sum += i + j\n    return amicable_sum\n\ndef is_amicable(n, m):\n    if sum_of_divisors(n) == m and sum_of_divisors(m) == n and n != m:\n        return True\n    return False\n\ndef sum_of_divisors(n):\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total\n\nprint(amicable_numbers_sum(1000000)) # Output: 31626\n",
        "generated_testcode": "assert amicable_numbers_sum(100000) == 220645",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    angle = math.atan2(b,a)\n    return angle\n\n# Get the input from the user\na = float(input(\"Enter the real part of the complex number: \"))\nb = float(input(\"Enter the imaginary part of the complex number: \"):\n\n# Call the function to get the angle of the complex number\nangle = angle_complex(a,b)\n\n# Print the angle\nprint(\"The angle of the complex number is:\", angle) ",
        "generated_testcode": "assert angle_complex(3,4) == 0.9272952180016\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize variables to store the count of 0's and 1's\n    count0 = 0\n    count1 = 0\n    # Initialize maximum difference to zero\n    max_diff = 0\n\n    # Traverse through the string\n    for i in range(n): \n        # Increment count0 if current character is 0\n        if string[i] == '0': \n            count0 += 1\n        # Increment count1 if current character is 1\n        else: \n            count1 += 1\n\n        # Update the maximum difference if the difference between count0 and count1 is greater than max_diff\n        if count1 - count0 > max_diff: \n            max_diff = count1 - count0\n\n    # Reset the count of 0's and 1's for the remaining string\n    count0 = count1 = 0\n\n    # Traverse the string again from the end\n    for i in range(n-1, -1, -1): \n        # Decrement count0 if current character is 0\n        if string[i] == '0': \n            count0 -= 1\n        # Decrement count1 if current character is 1\n        else: \n            count1 -= 1\n\n        # Update the maximum difference if the difference between count0 and count1 is greater than max_diff\n        if count1 - count0 > max_diff: \n            max_diff = count1 - count0\n\n    # Return the maximum difference\n",
        "generated_testcode": "assert find_length(100010101010, 9) == 3\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    s=0\n    for i in range(1,a+1):\n        if(a%i==0 and b%i==0):\n            s+=i\n    return s\nprint(sum(12, 18)) \n\nOutput: 6\nExplanation: \nThe common divisors of 12 and 18 are 1 and 3, which add up to 4. \nHence, the output is 4. ",
        "generated_testcode": "assert sum(12, 18) == 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x == 0 or y == 0:\n        return 0\n    elif x < 0:\n        return -multiply_int(-x, y)\n    elif y < 0:\n        return -multiply_int(x, -y)\n    else:\n        result = 0\n        for i in range(y):\n            result += x\n        return result\n\nprint(multiply_int(5, 3)) # 15\nprint(multiply_int(-5, 3)) # -15\nprint(multiply_int(5, -3)) # -15\nprint(multiply_int(-5, -3)) # 15\nprint(multiply_int(0, 3)) # 0\nprint(multiply_int(5, 0)) # 0\n\n\n# Recursion version\ndef multiply(x, y):\n    if x == 0 or y == 0:\n        return 0\n    elif x < 0:\n        return -multiply(-x, y)\n    elif y < 0:\n        return -multiply(x, -y)\n    elif y == 1:\n        return x\n    else:\n        return x + multiply(x, y - 1)\n\nprint(multiply(5, 3)) # 15\nprint(multiply(-5, 3)) # -15\nprint(multiply(5, -3)) # -15\nprint(multiply(-5, -3)) #",
        "generated_testcode": "assert multiply_int(5, 6) == 30\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # split the string into words\n    words = str.split()\n    # loop through the words and add them to the shortlist if they are longer than n\n    long_words_list = [word for word in words if len(word) > n]\n    # return the shortlist\n    return long_words_list\n\n# test the function with an example\nprint(long_words(5, \"I love cats and dogs and big green elephants\"))  # [\"elephants\"]\nprint(long_words(4, \"My name is Suzy and I love ice cream\"))  # [\"Suzy\", \"ice\", \"cream\"]\n\n# or use the filter() function\ndef long_words(n, str):\n    words = str.split()\n    return list(filter(lambda word: len(word) > n, words))\n\nprint(long_words(5, \"I love cats and dogs and big green elephants\"))  # [\"elephants\"]\nprint(long_words(4, \"My name is Suzy and I love ice cream\"))  # [\"Suzy\", \"ice\", \"cream\"] ",
        "generated_testcode": "assert long_words(4, [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"elderberry\", \"grape\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Get the length of the matrix\n    n = len(my_matrix)\n    # Initialize the sum of diagonal elements as 0\n    sum_diagonal = 0\n    # Initialize the sum of anti-diagonal elements as 0\n    sum_anti_diagonal = 0\n    # Initialize the sum of elements in rows as a list\n    sum_rows = []\n    # Initialize the sum of elements in columns as a list\n    sum_cols = []\n    # Initialize the sum of the elements of the matrix as 0\n    sum_matrix = 0\n    # Iterate through the rows of the matrix\n    for i in range(n):\n        # Iterate through the columns of the matrix\n        for j in range(n):\n            # Add the elements of the diagonal to the sum_diagonal variable\n            if i == j:\n                sum_diagonal += my_matrix[i][j]\n            # Add the elements of the anti-diagonal to the sum_anti_diagonal variable\n            if i == n - 1 - j:\n                sum_anti_diagonal += my_matrix[i][j]\n            # Append the sum of the elements in each row to the sum_rows list\n            sum_rows.append(sum(my_matrix[i]))\n            # Append the sum of the elements in each column to the sum_cols list\n            sum_cols.append(sum([row[j] for row in my_matrix])\n            # Add the elements of the matrix to the sum_",
        "generated_testcode": "assert magic_square_test(my_matrix) == True\n\n# Test the function with a 3x3 matrix\nmy_matrix = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    max_count = 0\n    max_item = None\n    for num in nums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n    return max_item\n\n# Example usage:\nnums = [1, 2, 3, 2, 1, 1, 3, 4, 5, 6, 1, 2, 3]\nprint(max_occurrences(nums))  # Output: 1\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert max_occurrences(nums=[1, 2, 3, 2, 4, 5, 2, 6, 3, 7, 8, 3, 9, 0, 2, 1]) == 2\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    vowels = \"AEIOUaeiou\"\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return \"\".join(str1)\n\n\n\n# Test the function with the sample input\nprint(reverse_vowels(\"hello world\"))  # Output: \"holle woird\"\nprint(reverse_vowels(\"hello python\"))  # Output: \"holle python\"\nprint(reverse_vowels(\"leetcode\"))  # Output: \"leotcede\"\nprint(reverse_vowels(\"racecar\"))  # Output: \"racecar\"\nprint(reverse_vowels(\"A man a plan a canal Panama\"))  # Output: \"a nma a nlaP a nail a nam A\"\n",
        "generated_testcode": "assert reverse_vowels(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"hello world\"\nexpected_output = \"holle dlrow\"\n\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return str(tup1)\n\n# Example usage:\nprint(tup_string((1,2,3)) # Output: '(1, 2, 3)'\n\n# write a function to convert a string to a tuple\ndef str_tuple(s):\n    return tuple(s)\n\n# Example usage:\nprint(str_tuple(\"(1,2,3\") # Output: (1, 2, 3)\n\n# write a function to convert a list to a tuple\ndef list_tuple(lst):\n    return tuple(lst)\n\n# Example usage:\nprint(list_tuple([1,2,3]) # Output: (1, 2, 3)\n\n# write a function to convert a tuple to a list\ndef tuple_list(tup):\n    return list(tup)\n\n# Example usage:\nprint(tuple_list((1,2,3)) # Output: [1, 2, 3]\n\n# Write a function to find the length of a tuple\ndef tuple_length(tup):\n    return len(tup)\n\n# Example usage:\nprint(tuple_length((1,2,3)) # Output: 3\n\n# write a function to add an element to a tuple\ndef add_tuple(tup1, val):\n    return tup1 + (val,)\n\n# Example usage:\nprint(add_tuple((1,2,3), 4)) # Output: (1, 2, 3, 4)\n\n",
        "generated_testcode": "assert tup_string(('a', 1, 2, 'b') == \"('a', 1, 'b')\"\n\n# Test the function with the given tuple\nprint(tup_string(('a', 1, 2, 'b')) # Output: ('a', 1, 'b')\n\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return sum(filter(lambda x: x < 0, nums) or 0)\n\n# Test the function with example list\nprint(sum_negativenum([1,2,-3,4,-5,6,-7,8,9]))\n\n# Output: -12\n\n# Write a function to calculate the length of a string using lambda function\ndef str_len(string):\n    return len(string)\n\n# Test the function with example string\nprint(str_len(\"Hello\"))\n\n# Output: 5\n\n# Write a function to get the maximum value from a list of numbers using lambda function\ndef max_num(nums):\n    return max(nums)\n\n# Test the function with example list\nprint(max_num([5, 20, 8, 15, 30, 10]))\n\n# Output: 30\n\n# Write a function to check if all the elements of a list are strings using lambda function\ndef all_strings(lst):\n    return all(isinstance(x, str) for x in lst)\n\n# Test the function with example list\nprint(all_strings(['hello', 'world', 'python', 123]))\n\n# Output: False\n\n# Write a function to get the length of each string in a list using lambda function\ndef str_lengths(lst):\n    return list(map(len, lst))\n\n# Test the function with example list\nprint(str_lengths(['hello', 'world', 'python']))\n\n# Output",
        "generated_testcode": "assert sum_negativenum(range(-5, 6)) == -15\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(p):\n        arr = [x*2 for x in arr]\n    return arr[-1] % 2 ",
        "generated_testcode": "assert check_last ([1,2,3,4,5,6], 2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (2 * n - 1)\n\n# Define a function to check if a number is pentagonal.\ndef is_pentagonal(n): \n    return ((1 + (1 + 24 * n) ** 0.5) / 6).is_integer()\n\n# Define a function to check if a number is triangular.\ndef is_triangular(n): \n    return ((1 + (8 * n + 1) ** 0.5) / 2).is_integer()\n\n# Define a function to check if a number is a hexagonal number.\ndef is_hexagonal(n): \n    return ((1 + (1 + 8 * n) ** 0.5) / 4).is_integer()\n\n# Find the common terms between the three sequences.\ndef find_common_terms():\n    hex_count = 285\n    penta_count = 166\n    tri_count = 143\n\n    common_nums = []\n    while len(common_nums) < 2:\n        h = hexagonal_num(hex_count)\n        p = hexagonal_num(penta_count)\n        t = hexagonal_num(tri_count)\n\n        if is_pentagonal(h) and is_triangular(p):\n            common_nums.append(h)\n        if is_pentagonal(t) and is_triangular(t):\n            common_",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if units<=100:\n        return 100\n    else:\n        return 100+(units-100)*10\n\n#take input from user\nunits = int(input(\"Enter number of units consumed: \"))\nbill = cal_electbill(units)\nprint(\"Electricity bill: Rs\", bill)\n",
        "generated_testcode": "assert cal_electbill(10000) == 100\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    length = len(nums)\n    for i in range(length):\n        if nums[i] == 0:\n            count += 1\n    return count / length\n\n# Test the function\nprint(zero_count([1,2,0,0,4,0,5,6,0,0,0]))\nprint(zero_count([1,2,3,4,5,6]))\nprint(zero_count([0,0,0,0,0,0])) ",
        "generated_testcode": "assert zero_count(nums=[1, 2, 3, 0, 4, 5, 0, 6, 0, 7, 8, 0, 9, 0]) == 3\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or n == 1: \n        return True\n    while n and n & 1 == 0: \n        n >>= 1\n    for i in range(31): \n        if n & (1<<i): \n            if n & ((1<<i) - 1) == 0: \n                return True\n    return False\n\n# example usage: \nprint(is_Sum_Of_Powers_Of_Two(6)) # Output: True\nprint(is_Sum_Of_Powers_Of_Two(7)) # Output: False\nprint(is_Sum_Of_Powers_Of_Two(8)) # Output: True\n\n\n# Time Complexity: O(log n) ",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(10) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pi = 3.14159\n    return 2 * pi * r\n\n# Test the function\nprint(circle_circumference(5)) # Output: 31.4159\nprint(circle_circumference(10)) # Output: 62.8318\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    pi = 3.14159\n    return pi * r ** 2\n\n# Test the function\nprint(circle_area(5)) # Output: 78.5\nprint(circle_area(10)) # Output: 314.159\n\n# Write a function to find the surface area of a sphere.\ndef sphere_surface_area(r):\n    pi = 3.14159\n    return 4 * pi * r ** 2\n\n# Test the function\nprint(sphere_surface_area(5)) # Output: 314.159\nprint(sphere_surface_area(10)) # Output: 452.366\n\n# Write a function to find the volume of a sphere.\ndef sphere_volume(r):\n    pi = 3.14159\n    return (4/3) * pi * r ** 3\n\n# Test the function\nprint(sphere_volume(5)) # Output: 523.6\nprint(sphere_volume(10)) # Output",
        "generated_testcode": "assert circle_circumference(5) == 31.4159, \"Incorrect circumference\"\n\n# Write a function to find the area of a circle.\ndef circle_area(r):\n    pass\n\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = set()\n    for i in test_list:\n        if test_list.count(i) == 1:\n            result.add(i)\n    return result\n\n# Test the function\ntest_list = (1, 2, 3, 2, 4, 5, 4, 6, 6, 7, 1, 8, 9, 10, 7, 10)\nprint(extract_singly(test_list))  # Output: {3, 5, 8, 9}\n\n# Function to find unique elements from a list of lists\ndef unique_elements(list_of_lists):\n    result = set()\n    for lst in list_of_lists:\n        for item in lst:\n            result.add(item)\n    return result\n\n# Test the function\nlist_of_lists = [[1, 2, 3], [2, 4, 5], [3, 4, 6], [4, 5, 6], [7, 8, 9], [10, 10]]\nprint(unique_elements(list_of_lists))  # Output: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n\n# Function to remove duplicates from a list of lists\ndef remove_duplicates(list_of_lists):\n    return [list(set(lst)) for lst in list_of_lists]\n",
        "generated_testcode": "assert extract_singly(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('b', 'd', 'e')\n\n# Output: ('b', 'd', 'e')\n\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(nums)\n    sorted_index = n - 1\n\n    while sorted_index > 0:\n        max_index = find_max(nums, sorted_index)\n        if max_index != sorted_index:\n            flip(nums, max_index)\n            flip(nums, sorted_index)\n            sorted_index -= 1\n\n    return nums\n\n\ndef find_max(nums, sorted_index):\n    max_index = sorted_index\n    for i in range(sorted_index):\n        if nums[i] > nums[max_index]:\n            max_index = i\n    return max_index\n\n\ndef flip(nums, index):\n    start = 0\n    while start < index:\n        nums[start], nums[index] = nums[index], nums[start]\n        start += 1\n        index -= 1\n\n# Test the function with an example\nnums = [5, 3, 1, 8, 2, 7, 6]\nprint(pancake_sort(nums))  # Output: [1, 2, 3, 5, 6, 7, 8]\n",
        "generated_testcode": "assert pancake_sort([]).sort() == []\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n\nlist1 = [1,2,3,4,5]\nlist2 = [2,3,4,6]\nlist3 = [2,4,5,7]\nprint(count_samepair(list1,list2,list3))\n\n#Output: 2\n\n#Time Complexity: O(n^3)\n\n#Space Complexity: O(1)\n\n#Alternative Solution\ndef count_samepair(list1,list2,list3):\n    count = 0\n    dict = {}\n    for i in list1:\n        dict[i] = True\n    for i in list2:\n        if i in dict:\n            count += 1\n    return count\n\nlist1 = [1,2,3,4,5]\nlist2 = [2,3,4,6]\nlist3 = [2,4,5,7]\nprint(count_samepair(list1,list2,list3))\n\n#Output: 2\n\n#Time Complexity: O(n)\n\n#Space Complexity: O(n)\n\n#Explanation:\n#We use a dictionary to keep track of the frequency of elements in list1 and",
        "generated_testcode": "assert count_samepair([\"apple\",\"banana\",\"orange\"],[\"banana\",\"apple\",\"grape\"],[\"orange\",\"apple\",\"kiwi\"]) == 2\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for item in Input: \n        if type(item) == list: \n            count += 1\n    return count \n  \n# Test the function \nInput = (1, 2, [3, 4], (5, 6), \"7\", (8, 9, 10) ) \nprint(find_lists(Input)) ",
        "generated_testcode": "assert find_lists(('a', 'b', 'c') == 1\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_diff = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            sum_diff += abs(arr[i]-arr[j]) \n    return sum_diff \n  \n# Driver code \narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(\"Sum of absolute differences of all pairs is\", sum_Pairs(arr,n)) \n\n# Output: Sum of absolute differences of all pairs is 10\n\n# Time complexity is O(n^2) and space complexity is O(1) ",
        "generated_testcode": "assert sum_Pairs(arr=[1,2,3,4,5],n=4) == 4\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    arr.sort()\n    return arr[-1]-arr[0] \n\n# Test the function \narr = [10, 4, 15, 7, 22, 3, 9] \nn = len(arr) \nprint(\"The maximum difference is\", max_Abs_Diff(arr,n)) \n  \n# Output: 17 \n\n# Time Complexity : O(n log n) as sorting takes O(n log n) time ",
        "generated_testcode": "assert max_Abs_Diff(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=7) == 8\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in str1:\n        sum += ord(i)\n    return sum\n\n# Test the function\nstr1 = input(\"Enter a string: \")\nprint(\"The ascii value of\",str1,\"is:\",ascii_value_string(str1)) ",
        "generated_testcode": "assert ascii_value_string(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"Hello World\"\nexpected_output = 106\n\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(m - 1, -1, -1): \n        for j in range(0, n - 1): \n            if tri[i][j] > tri[i][j + 1]: \n                tri[i][j] = tri[i][j] + tri[i + 1][j] \n            else: \n                tri[i][j] = tri[i][j] + tri[i + 1][j + 1] \n    return tri[0][0] \n  \ntri = [[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]] \nm = len(tri) \nn = len(tri[0]) \nprint(\"Maximum Path Sum =\", max_path_sum(tri, m, n)) ",
        "generated_testcode": "assert max_path_sum(tri, 3, 3) == 15\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if x == 0 : \n        return 0\n    else : \n        return (x%10 + sum_digits_single(x//10)) \n  \ndef sum_digits(x) : \n    return sum_digits_single(x) \n  \ndef divide_number(n) : \n    sum_n = sum_digits(n) \n    first_part = 0\n    second_part = 0\n    while(n > 0) : \n        digit = n % 10\n        if (first_part * 10 + digit > (n - first_part) // sum_digits(second_part)) : \n            first_part = first_part * 10 + digit \n        else : \n            second_part = second_part * 10 + digit \n        n = n // 10\n    return first_part, second_part \n  \n# Driver code \nn = 12345\nprint(divide_number(n)) ",
        "generated_testcode": "assert sum_digits_single(12345) == (15, 7)\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    max_len = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            diff = arr[j] - arr[i] \n            k = j + 1\n            cnt = 1\n            while k < n and arr[k] - arr[k-1] == diff: \n                cnt += 1\n                k += 1\n            max_len = max(max_len, cnt) \n    return max_len \n\n# Driver program to test the function \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint(longest_subseq_with_diff_one(arr, n)) ",
        "generated_testcode": "assert longest_subseq_with_diff_one(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=7) == 6\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a%b==0 or a%c==0:\n        return True\n    else:\n        return False\n    \n# Testing the function\nprint(does_Contain_B(10,2,3)) #Output: True\nprint(does_Contain_B(10,3,2)) #Output: True\nprint(does_Contain_B(10,5,7)) #Output: False\n",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    while q!=0:\n        p,q=q,p%q\n    return p\n\ndef is_coprime(num1, num2):\n    if gcd(num1,num2)==1:\n        return True\n    else:\n        return False\n\n#Testing the function\nprint(is_coprime(10,7)) #True\nprint(is_coprime(12,18)) #False\nprint(is_coprime(7,9)) #True ",
        "generated_testcode": "assert gcd(10,20) == 10\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    i = j = 0\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            result.append(a[i])\n            i += 1\n        else:\n            result.append(b[j])\n            j += 1\n    result.extend(a[i:])\n    result.extend(b[j:])\n    return result\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    a = merge_sort(arr[:mid])\n    b = merge_sort(arr[mid:])\n    return merge(a, b)\n\narr = [9, 7, 5, 6, 4, 3, 11]\nprint(\"Given array is\", arr)\nprint(\"Sorted array is\", merge_sort(arr)) ",
        "generated_testcode": "assert merge([1,3,5,7,9], [2,4,6,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    x = -b / (2 * a) \n    y = a * x ** 2 + b * x + c \n    return (x, y) \n\n# Test the function \na = 1 \nb = 6 \nc = 9 \nprint(parabola_vertex(a, b, c)) # Output: (3, 13) ",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (0, -3)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if j % N == 0:\n                new_list.append(nums[i][j])\n    return new_list\n\n# Example usage:\ntwo_d_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(specified_element(two_d_list, 2)) # should return [3, 6]\n\n# Test the function with the example\nprint(specified_element(two_d_list, 2))\n\n# Test the function with some other examples\nprint(specified_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 3)) # should return [4, 7, 10, 13]\nprint(specified_element([[1, 2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17], [18, 19, 20, 21]], 2)) # should return [2, 8, 12, 1",
        "generated_testcode": "assert specified_element(nums, 1) == [1, 4, 7, 10, 13, 16]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    # Flip all the bits that are at even places \n    n = n ^ ((n & 0xAAAAAAAA) >> 1) \n    # Flip all the bits that are at odd places \n    n = n ^ ((n & 0x55555555555) << 1) \n    return n \n  \n# Test the function \nn = 123\nprint(\"Original number :\", n) \nprint(\"Toggled number :\", even_bit_toggle_number(n)) \nn = 122\nprint(\"Original number :\", n) \nprint(\"Toggled number :\", even_bit_toggle_number(n)) \nn = 13\nprint(\"Original number :\", n) \nprint(\"Toggled number :\", even_bit_toggle_number(n)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    tuple_int = ()\n    for i in tuple_str:\n        tuple_int += (int(i),)\n    return tuple_int\n\n# Test the function with an example tuple\nprint(tuple_int_str(('1', '2', '3', '4', '5'))) # should return (1, 2, 3, 4, 5)\n\n# Test the function with a tuple containing a string that cannot be converted to an integer\nprint(tuple_int_str(('1', '2', '3', '4', 'five')) # should raise a ValueError\n\n# Test the function with an empty tuple\nprint(tuple_int_str(() ) # should return ()\n\n# Test the function with a single tuple element\nprint(tuple_int_str(('1',) ) # should return (1,)\n\n# Test the function with a tuple containing a single string\nprint(tuple_int_str(('1',) ) # should return (1,) ",
        "generated_testcode": "assert tuple_int_str((\"1\", \"2\", \"3\") == (1, 2, 3))\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    count = 1\n    for i in range(len(list1)-1):\n        if list1[i] == list1[i+1]:\n            count += 1\n        else:\n            result.append((str(count)+list1[i]) if count != 1 else list1[i])\n            count = 1\n    result.append((str(count)+list1[len(list1)-1]) if count != 1 else list1[len(list1)-1])\n    return result\n\n# Test the function\nprint(encode_list([1,1,1,2,3,3,3,2,2,2,2,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6])) # ['31', '22', '23', '32', '4', '55', '25', '63']\nprint(encode_list([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,",
        "generated_testcode": "assert encode_list([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_element = max(arr) \n    count = 0\n    for i in range(n): \n        count += max_element - arr[i] \n    return count//k \n\n# Driver code \nif __name__ == \"__main__\": \n    arr = [1, 2, 3, 4, 5, 6] \n    n = len(arr) \n    k = 2\n    print(min_Ops(arr, n, k)) ",
        "generated_testcode": "assert min_Ops(arr=[1,2,3,4,5],n=4,k=3) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if month in [1,2,12]:\n        season = \"Winter\"\n    elif month in [3,4,5]:\n        season = \"Spring\"\n    elif month in [6,7,8]:\n        season = \"Summer\"\n    elif month in [9,10,11]:\n        season = \"Fall\"\n    else:\n        season = \"Winter\"\n    if days<31:\n        season = \"Leap Year\"\n    return season\n\n# Test the function\nprint(month_season(2,29)) #Should print \"Leap Year\"\nprint(month_season(5,15)) #Should print \"Spring\"\nprint(month_season(11,20)) #Should print \"Fall\"\nprint(month_season(1,1)) #Should print \"Winter\"\nprint(month_season(8,31)) #Should print \"Summer\"\nprint(month_season(12,31)) #Should print \"Winter\" ",
        "generated_testcode": "assert month_season(1,31) == \"Winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    x, y = 0, n // b # if a == 0 and b != 0\n    if a == 0: \n        return (x, y)\n    x, y = 0, n // a # if b == 0 and a != 0\n    if b == 0: \n        return (x, y)\n    gcd, x_temp, y_temp = extended_gcd(a, b)\n    if n % gcd != 0: \n        return (-1, -1) # if gcd doesn't divide n, there are no solutions\n    x = x_temp * (n // gcd)\n    y = y_temp * (n // gcd)\n    return (x, y)\n    \ndef extended_gcd(a, b): \n    x, y = 0, 1\n    last_x, last_y = 1, 0\n    while b:\n        q = a // b\n        a, b = b, a % b\n        x, last_x = last_x - q * x, x\n        y, last_y = last_y - q * y, y\n    return a, last_x, last_y\n\n# Test case\nprint(solution(2, 3, 1)) # Output: (0, 1) \nprint(solution(17, 5, 15)) # Output: (2, -1) \nprint(solution(12, 8, 2",
        "generated_testcode": "assert solution (2, 3, 9) == (1, 2)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 4, 6, 8]\nprint(remove_elements(list1, list2))  # Output: [1, 3, 5, 7, 9]\n\n# Time Complexity: O(n^2) because we are using two loops\n# Can we do it in O(n) time? ",
        "generated_testcode": "assert remove_elements([\"apple\", \"banana\", \"cherry\", \"orange\"], [\"banana\", \"grape\"]) == [\"apple\", \"cherry\", \"orange\"]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n, -1, -2):\n        sum += i\n    return sum\n\n# Test the function with some values\nprint(sum_series(5))  # 5+3+1 = 9\nprint(sum_series(10)) # 10+8+6+4+2 = 26\nprint(sum_series(1))  # 1\nprint(sum_series(-5)) # 0 (n must be positive)\nprint(sum_series(0)) # 0 (n must be positive) ",
        "generated_testcode": "assert sum_series(10) == 30\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    pi=3.14159\n    return (s*l)/2\n\nprint(area_polygon(6,4))\nprint(area_polygon(10,10))\n\n# Output: 24.0\n#        50.0\n\n# Write a function to calculate the volume of a sphere using its radius\ndef volume_sphere(r):\n    pi=3.14159\n    return (4/3)*pi*(r**3)\n\nprint(volume_sphere(5))\nprint(volume_sphere(10))\n\n# Output: 523.6\n#        41887.6\n\n# Write a function to calculate the surface area of a sphere using its radius\ndef surface_area_sphere(r):\n    pi=3.14159\n    return 4*pi*(r**2)\n\nprint(surface_area_sphere(5))\nprint(surface_area_sphere(10))\n\n# Output: 314.159\n#        4005.862\n\n# Write a function to calculate the circumference of a circle using its radius\ndef circumference_circle(r):\n    pi=3.14159\n    return 2*pi*r\n\nprint(circumference_circle(5))\nprint(circumference_circle(10))\n\n# Output: 31.4159\n#        62.83",
        "generated_testcode": "assert area_polygon(6,4) == 12.0\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    div_sum = 0\n    for i in range(1, n+1): \n        if n % i == 0: \n            div_sum += i \n    return div_sum \n\ndef check_sum(n): \n    s = divSum(n) \n    return divSum(s) == n \n\n# Testing the function \nprint(check_sum(12)) ",
        "generated_testcode": "assert divSum(1) == 1\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = [0] * 26\n    for i in range(len(str1)): \n        if ord(str1[i]) >= ord('a') and ord(str1[i]) <= ord('z'): \n            count[ord(str1[i]) - ord('a')] += 1\n        elif ord(str1[i]) >= ord('A') and ord(str1[i]) <= ord('Z'): \n            count[ord(str1[i]) - ord('A')] += 1\n    return count\n    \n# Example usage: \nprint(count_char_position(\"HelloWorld\")) #[1, 1, 0, 0, 0, 1, 1, 1, 1, 2, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] ",
        "generated_testcode": "assert count_char_position(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"Hello World\"\nexpected_output = {'H': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'W': 1, 'r': 1, 'd': 1}\n\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if A[i]^A[j]%2==0:\n                count+=1\n    return count \n\n# Driver code\nA = [1,2,3,4,5,6,7,8,9]\nN = len(A)\nprint(find_even_Pair(A,N))\n\n#Output: 6\n#Explanation: 1^2=3, 2^4=6, 3^5=6, 4^6=2, 5^7=2, 6^8=2, 7^9=1, 8^1=9, 9^2=7, which are the pairs with xor as even number. \n#Therefore, there are 6 pairs with even xor. ",
        "generated_testcode": "assert find_even_Pair(A,N) == 2\n\n# Test the function with the following input\nA = [1, 3, 5, 6, 2, 4, 7]\nN = 7\nprint(find_even_Pair(A,N)) # Output: 2\n\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    power = 1\n    while (power < n): \n        power *= 2\n    return power \n  \n# example usage \nn = 10\nprint(\"Next power of 2 greater than or equal to\", n, \"is\", next_Power_Of_2(n)) ",
        "generated_testcode": "assert next_Power_Of_2(10) == 16\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq = 0 \n    for i in range(len(a)): \n        if a[i] == x: \n            freq+=1\n    return freq \n\n#input\na = [1,2,3,4,5,6,2,2,3,4,2,5] \nx = 2\nprint(frequency(a,x)) ",
        "generated_testcode": "assert frequency(a=[1,2,3,4,5,6,7,8,9,1,2,3,4,5], x=4) == 2\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * get_pell(n-1) + get_pell(n-2)\n\n# Test the function\nprint(get_pell(0)) # 0\nprint(get_pell(1)) # 1\nprint(get_pell(2)) # 2\nprint(get_pell(3)) # 5\nprint(get_pell(4)) # 12\nprint(get_pell(5)) # 29\nprint(get_pell(6)) # 70\nprint(get_pell(7)) # 169\nprint(get_pell(8)) # 408\nprint(get_pell(9)) # 985\nprint(get_pell(10)) # 2378",
        "generated_testcode": "assert get_pell(0) == 0\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sum(list1[m:n+1])                                                                                                                                                                                            \n    \n# Example usage:                                                                                                                                                                                                    \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]                                                                                                                                                                  \nprint(sum_range_list(list1, 2, 4))  # Output: 13 (2+3+4+5=10) ",
        "generated_testcode": "assert sum_range_list(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=2, n=5) == 22\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    perimeter = 5 * a\n    return perimeter\n\n# Test the function with the value 5\nprint(perimeter_pentagon(5)) ",
        "generated_testcode": "assert perimeter_pentagon(5) == 15\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count_std = 0\n    for i in range(len(s)):\n        if s[i:i+3] == 'std':\n            count_std += 1\n    return count_std\n\nprint(count_occurance(\"standard\"))  # Output: 1\nprint(count_occurance(\"abcstdxyzstd\"))  # Output: 2\nprint(count_occurance(\"standardization\"))  # Output: 2\nprint(count_occurance(\"standardize\"))  # Output: 1\nprint(count_occurance(\"abcdxyz\"))  # Output: 0\n\n# 2. Write a function to find the length of the longest word in a sentence \ndef longest_word(sentence):\n    words = sentence.split()\n    length_of_words = []\n    for word in words:\n        length_of_words.append(len(word))\n    return max(length_of_words)\n\nprint(longest_word(\"The quick brown fox jumps over the lazy dog\"))  # Output: 6\nprint(longest_word(\"Python is an awesome language\"))  # Output: 5\nprint(longest_word(\"Hello world\"))  # Output: 5\nprint(longest_word(\"I love coding\"))  # Output: 4\n\n# 3. Write a function to remove duplicate characters from a string\ndef remove_duplicates(s):\n    new_str = \"\"\n    for i in s:\n        if i not in new_str:",
        "generated_testcode": "assert count_occurance(s) == 2\n\n# Test the function with the following string\ns = \"standard\"\nprint(count_occurance(s)) # Output: 2\n\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    result = \"\"\n    for i in text: \n        if i.isalnum(): \n            result += i \n    return result \n  \n# Driver code \ntext = \"Hello, World! 123\"\nprint(\"Original string :\", text)\nprint(\"Modified string :\", remove_splchar(text)) ",
        "generated_testcode": "assert remove_splchar(text) == \"HelloWorld123\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    d = {}\n    for key, value in l:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n# Example usage:\nlst = [(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (3, 'e')]\nprint(group_keyvalue(lst))  # {1: ['a', 'b'], 2: ['c', 'd'], 3: ['e']}\n\n# Another example:\nlst = [('cat', 5), ('dog', 7), ('cat', 3), ('dog', 1), ('mouse', 2), ('cat', 10), ('mouse', 5), ('cat', 6), ('dog', 12)]\nprint(group_keyvalue(lst))  # {'cat': [5, 3, 10, 6], 'dog': [7, 1, 12], 'mouse': [2]}\n\n# This function takes in a list of key-value pairs (tuples) and returns a dictionary where the keys are the unique keys in the list and the values are lists of all the values that correspond to that key. ",
        "generated_testcode": "assert group_keyvalue([\"a:1\", \"b:2\", \"a:3\", \"c:4\", \"b:5\", \"a:6\"]) == {\"a\": [\"1\", \"3\", \"6\"], \"b\": [\"2\", \"5\"], \"c\": [\"4\"]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    stack = []\n    for char in str1:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n        elif char == '}':\n            if not stack or stack.pop() != '{':\n                return False\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return len(stack) == 0\n\n# Test cases\nprint(is_valid_parenthese('()')) # true\nprint(is_valid_parenthese('()[]{}')) # true\nprint(is_valid_parenthese('(]')) # false\nprint(is_valid_parenthese('([)]')) # false\nprint(is_valid_parenthese('{[]}')) # true\n\n# Test cases\nprint(is_valid_parenthese('()')) # true\nprint(is_valid_parenthese('()[]{}')) # true\nprint(is_valid_parenthese('(]')) # false\nprint(is_valid_parenthese('([)]')) # false\nprint(is_valid_parenthese('{[]}')) # true ",
        "generated_testcode": "assert is_valid_parenthese(\"()\" == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return a + b + c\n\n# Test cases\nprint(perimeter_triangle(3,4,5)) # Output: 12\nprint(perimeter_triangle(10,4,6)) # Output: 20\nprint(perimeter_triangle(5,10,12)) # Output: 27 ",
        "generated_testcode": "assert perimeter_triangle(3,4,5) == 12\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    lcm = 1\n    for i in range(L,R+1):\n        lcm = lcm * i // gcd(lcm, i)\n    for num1 in range(L,R+1):\n        for num2 in range(L,R+1):\n            if lcm == lcm * num1 // gcd(lcm, num1) * num2 // gcd(lcm, num2):\n                return num1, num2\n\ndef gcd(a,b):\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\n\nprint(answer(1,20)) # (1,2)\nprint(answer(12,27)) # (12,16)\nprint(answer(2,3)) # (2,3)\nprint(answer(1,1000)) # (3,4)\nprint(answer(1,10)) # (2,5) ",
        "generated_testcode": "assert answer(1, 10) == (2, 3)\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for pattern in patterns:\n        if pattern in text:\n            return True\n    return False\n\n# Example usage:\npatterns = [\"hello\", \"world\", \"python\"]\ntext = \"The world is a beautiful place. Hello, Python!\"\nprint(string_literals(patterns, text)) # Output: True\n\n# Example usage 2:\npatterns = [\"hello\", \"world\", \"java\"]\ntext = \"The world is a beautiful place. Hello, Python!\"\nprint(string_literals(patterns, text)) # Output: False\n\n# Example usage 3:\npatterns = [\"hi\", \"world\", \"Python\"]\ntext = \"The world is a beautiful place. Hello, Python!\"\nprint(string_literals(patterns, text)) # Output: False\n\n# Example usage 4:\npatterns = [\"hi\", \"world\", \"Python\"]\ntext = \"\"\nprint(string_literals(patterns, text)) # Output: False\n\n# Example usage 5:\npatterns = []\ntext = \"The world is a beautiful place. Hello, Python!\"\nprint(string_literals(patterns, text)) # Output: False ",
        "generated_testcode": "assert string_literals([\"apple\",\"banana\",\"cherry\"], \"I like apple, banana, and cherry\") == True\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x == 1:\n        return True\n    elif x == 0:\n        return False\n    else:\n        return not is_num_keith(x-1) and is_num_keith(x//2)\n\n#Test the function\nprint(is_num_keith(13)) #Output: False\nprint(is_num_keith(42)) #Output: True ",
        "generated_testcode": "assert is_num_keith(1) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": " R = 6373.0 #Radius of the Earth in km\n  slat = math.radians(slat)\n  elat = math.radians(elat)\n  dlat = math.radians(elat-slat)\n  dlon = math.radians(elon-slon)\n  a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(slat) * math.cos(elat) * math.sin(dlon/2) * math.sin(dlon/2)\n  c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n  d = R * c\n  return d * 10000 #in meters\n\n#Test the function with sample points\nprint(distance_lat_long(12.9716, 77.5947, 13.0827, 80.2707)) #Output: 2646257.0286662121746\nprint(distance_lat_long(37.7749, -122.4194, 30.2672, -97.7429)) #Output: 41320656.0681411579575\n\n#Or, to calculate distance between two cities\ncity1 = (37.7",
        "generated_testcode": "assert distance_lat_long(37.77493,-122.4194,37.8716,-122.2583) == 10.34\n\n# The above line should return 10.34, which is the approximate distance between the two points in miles. ",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 0\n    while i < len(str1) and i < len(str2) and str1[i] == str2[i]: \n        i += 1\n    return str1[:i]\n\ndef find_common_prefix(strs): \n    if len(strs) == 0: \n        return \"\"\n    prefix = strs[0]\n    for i in range(1, len(strs)): \n        prefix = common_prefix_util(prefix, strs[i])\n        if not prefix: \n            break\n    return prefix\n\nstrs = [\"flower\", \"flow\", \"flight\"]\nprint(find_common_prefix(strs)) # Output: \"fl\"\n\nstrs = [\"dog\", \"racecar\", \"car\"]\nprint(find_common_prefix(strs)) # Output: \"\"\n\nstrs = [\"dog\", \"dog\", \"dog\"]\nprint(find_common_prefix(strs)) # Output: \"dog\" ",
        "generated_testcode": "assert common_prefix_util([\"flower\", \"flow\", \"flight\"]) == \"fl\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    upper_case = re.findall(r\"[A-Z]+\", string)\n    lower_case = re.findall(r\"[a-z]+\", string)\n    special_char = re.findall(r\"[^a-zA-Z0-9]+\", string)\n    numeric = re.findall(r\"[0-9]+\", string)\n    return upper_case, lower_case, special_char, numeric\n\n# Test the function with a sample string\nstring = \"aBcD123#\"\nprint(find_character(string))\n\n# Output: (['a'], ['B', 'c', 'D'], ['#'], ['123'])\n```\n\nThe function uses `re.findall()` to find all the uppercase, lowercase, special characters and numeric values in the string. The regular expression `[^a-zA-Z0-9]` will match any character that is not a lowercase or uppercase letter or a digit.\n\nHere's how it works:\n- `r\"[A-Z]+\"` matches one or more uppercase letters.\n- `r\"[a-z]+\"` matches one or more lowercase letters.\n- `r\"[^a-zA-Z0-9]+\"` matches one or more non-alphanumeric characters.\n- `r\"[0-9]+\"` matches one or more digits.\n\nThese regular expressions are combined in the `findall()` function to extract the required values from the input string. ",
        "generated_testcode": "assert find_character(string) == (2, 3, 4, 5)\n\n# The output should be (2, 3, 4, 5)\n# 2 uppercase characters, 3 lowercase characters, 4 special characters, and 5 numeric values. ",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[j]-arr[i] == k:\n                count += 1\n    return count\n\n# Testing the function\narr = [1, 5, 3, 8, 6, 2, 4, 8]\nn = len(arr)\nk = 3\nprint(count_pairs(arr, n, k))  # Output: 2\n\n# Time complexity: O(n^2)\n# It's not very efficient for large arrays. ",
        "generated_testcode": "assert count_pairs(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result=[]\n    for i in list:\n        if i > num:\n            result.append(i)\n    return result\n\n# Test the function with a list and a number\nmy_list=[1,2,3,4,5,6,7,8,9]\nmy_num=5\nprint(greater_specificnum(my_list,my_num)) # Output: [6, 7, 8, 9]\n\n# Write a function to find the largest number in a list\ndef max_num(list):\n    max_num=list[0]\n    for i in list:\n        if i > max_num:\n            max_num=i\n    return max_num\n\n# Test the function with a list\nmy_list=[1,2,3,4,5,6,7,8,9]\nprint(max_num(my_list)) # Output: 9\n\n# Write a function to find the smallest number in a list\ndef min_num(list):\n    min_num=list[0]\n    for i in list:\n        if i < min_num:\n            min_num=i\n    return min_num\n\n# Test the function with a list\nmy_list=[1,2,3,4,5,6,7,8,9]\nprint(min_num(my_list)) # Output: 1\n\n# Write a function to calculate the sum of all numbers in a list\ndef sum_list(list):\n    total=0",
        "generated_testcode": "assert greater_specificnum(list=[1,2,3,4,5,6,7,8,9,10],num=5) == [6,7,8,9,10]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a == 0: \n        return \"The given equation is not a parabola.\" \n    else: \n        return c/a \n  \n# Test the function with an example \na = 1\nb = 10\nc = 10\nprint(parabola_focus(a, b, c)) # should output 0.0 ",
        "generated_testcode": "assert parabola_focus(1, 10, -15) == 1\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    for pattern in patterns:\n        if re.search(pattern, text):\n            return True\n    return False\n\n\n# Example usage:\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"fox\", \"dog\"]\nif check_literals(text, patterns):\n    print(\"At least one of the patterns was found.\")\nelse:\n    print(\"None of the patterns were found.\")\n\n# Output: At least one of the patterns were found.\n\n# If you want to search for a literal string instead of a regular expression, you can use the re.escape() function to escape all the special characters:\ndef check_literals(text, patterns):\n    for pattern in patterns:\n        if re.search(re.escape(pattern), text):\n            return True\n    return False\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npatterns = [\"fox\", \"dog\"]\nif check_literals(text, patterns):\n    print(\"At least one of the patterns was found.\")\nelse:\n    print(\"None of the patterns were found.\")\n\n# Output: At least one of the patterns were found. ",
        "generated_testcode": "assert check_literals(text=\"The quick brown fox jumps over the lazy dog\", patterns=[\"fox\", \"dog\"]) == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    L = [[0 for j in range(n+1)] for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][n] \n\n# Test the function with the example given in the prompt\nX = \"ABCDGH\"\nY = \"AEDFHR\"\nm = len(X) \nn = len(Y) \nprint(\"Length of Longest Common Subsequence is\",longest_common_subsequence(X, Y, m, n)) \n\n# Output: Length of Longest Common Subsequence is 3 \n\n# Explanation: LCS is \"ADH\" or \"ADH\" or \"AH\" or \"DH\" ",
        "generated_testcode": "assert longest_common_subsequence([\"A\", \"B\", \"C\", \"D\", \"E\"], [\"A\", \"B\", \"D\", \"E\", \"F\"], 4, 4) == 3\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    i=1\n    while i*i<=n:\n        j=1\n        while i*i*i<=n:\n            if i*i==n:\n                return True\n            if n%(i*i)==0:\n                return True\n            j=j+1\n            while j*j<=n:\n                if j*j==n:\n                    return True\n                if n%(j*j)==0:\n                    return True\n                if i*j==n:\n                    return True\n                j=j+1\n            i=i+1\n    return False\nprint(prod_Square(16))\nprint(prod_Square(25))\nprint(prod_Square(13))\n\n# Output:\n# True\n# True\n# False ",
        "generated_testcode": "assert prod_Square(12) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 0\n    while i < n: \n        j = arr[i] - 1\n        if arr[i] > 0 and arr[i] <= n and arr[i] != arr[j]: \n            arr[i], arr[j] = arr[j], arr[i] \n            arr[j], arr[arr[i]] = arr[arr[i], arr[j] \n        else: \n            i += 1\n    for i in range(n): \n        if arr[i] != i + 1: \n            return i + 1\n    return n + 1\n\narr = [3, 4, -1, 1, 1, 2, 2, 2, 3, 5, 5, 4] \nn = len(arr) \nprint(first_Missing_Positive(arr, n)) ",
        "generated_testcode": "assert first_Missing_Positive(arr=[3, 7, 2, 1, 8, 4, 5, 6, 9, 11], n=8) == 10\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(x1+1,x2): \n        for j in range(y1+1,y2): \n            if i == 0 or i == x2-1: \n                count += 1\n            elif j == 0 or j == y2-1: \n                count += 1\n            elif (i%2 == 0 and j%2 == 0) or (i%2 != 0 and j%2 != 0): \n                count += 1\n    return count \n\n# Testing the function \nx1 = 2\ny1 = 3\nx2 = 6\ny2 = 6\nprint(count_Intgral_Points(x1, y1, x2, y2)) \n# Output: 15 ",
        "generated_testcode": "assert count_Intgral_Points(0,0,2,2) == 4\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    if monthname3 == 'January' or monthname3 == 'March' or monthname3 == 'May' or monthname3 == 'July' or monthname3 == 'August' or monthname3 == 'October' or monthname3 == 'December':\n        return True\n    else:\n        return False\n\n#Test the function with month name\nprint(check_monthnumber('July')) #True\nprint(check_monthnumber('February')) #False\nprint(check_monthnumber('December')) #True\nprint(check_monthnumber('June')) #False ",
        "generated_testcode": "assert check_monthnumber(monthname3='January') == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    #initialize variables \n    has_letter = False\n    has_digit = False\n    #loop through the string \n    for char in str:\n        if char.isdigit():\n            has_digit = True\n        elif char.isalpha():\n            has_letter = True\n        #if both conditions are true, return true\n        if has_digit and has_letter:\n            return True\n    return False\n#test the function with some sample inputs \nprint(check_String(\"Hello123\")) # True\nprint(check_String(\"Hello\")) # False\nprint(check_String(\"12345\")) # False\nprint(check_String(\"Hello12world\")) # True\nprint(check_String(\"HelloWorld\")) # True\nprint(check_String(\"HelloWorld12\")) # True\nprint(check_String(\"Hello1234\")) # True\n\n#output:\n#True\n#False\n#False\n#True\n#True\n#True\n#True\n\n#time complexity: O(n)\n#space complexity: O(1)\n",
        "generated_testcode": "assert check_String(input_string) == Tru",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in test_tup:\n        if i not in new_tup:\n            new_tup = new_tup + (i,)\n    return new_tup\n\n# Test the function with sample input\ntest_tup = (1,2,3,4,1,5,6,2,3)\nprint(remove_tuple(test_tup)) # Output should be (1, 2, 3, 4, 5, 6)\n\n# Output: (1, 2, 3, 4, 5, 6) ",
        "generated_testcode": "assert remove_tuple(('a', 'b', 'c', 'a', 'd', 'c') == ('a', 'b', 'c', 'd')\n\n# Output: ('a', 'b', 'c', 'd')\n\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal = 0\n    place_value = 0\n    while (n > 0): \n        digit = n % 10\n        decimal += digit * pow(8, place_value)\n        n = n // 10\n        place_value += 1\n    return decimal \n\nn = 1234567 # input octal number\nprint(\"Octal Equivalent of 1234567 is:\",octal_To_Decimal(n)) # Output: 494\n\n# Another Example\nn = 567 # input octal number\nprint(\"Octal Equivalent of 567 is:\",octal_To_Decimal(n)) # Output: 383\n",
        "generated_testcode": "assert octal_To_Decimal(10) == 8\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    low=0\n    high=n-1\n    result = -1\n    while(low<=high):\n        mid=(low+high)//2\n        if(arr[mid]==x and (mid==0 or arr[mid-1]!=x):\n            result=mid\n            break\n        elif(arr[mid]<x):\n            low=mid+1\n        else:\n            high=mid-1\n    return result\n\n#driver code\narr = [1,2,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,6,6,7,7,8,8,8,9,9,9,9]\nx=4\nn=len(arr)\nprint(first(arr,x,n)) #output: 3\n\n#Time complexity: O(log n) \n#Space complexity: O(1)\n\n#Explanation:\n#We are using binary search to find the first occurrence of the element in a sorted array. If the element is present in the array, then the position of the element will be at the mid index of the array or the lowest index for that element. We check if the element is present at the mid index and also check if it is not present at the index before mid index to make sure that we find the first occurrence. If the element is not present, then we continue the search in the left subarray. If the element is present, we continue the search in the right subarray.\n#We keep track of",
        "generated_testcode": "assert first(sorted([1,2,3,4,4,5,5,6,7],4,6) == 2\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for tup in test_list:\n        if len(tup) != K:\n            new_list.append(tup)\n    return new_list\n\n# Test the function\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9, 10), (11, 12), (13, 14, 15, 16, 17)]\nK = 3\nprint(remove_tuples(test_list, K))\n\n\n# Output: [(4, 5, 6), (8, 9, 10), (11, 12)]\n# Explanation: The function removes all tuples with length 3, which are (1, 2, 3) and (13, 14, 15, 16, 17) and returns the rest of the tuples.\n\n# Now write a function to remove all tuples with an even sum of elements.\ndef remove_even_sum_tuples(test_list):\n    new_list = []\n    for tup in test_list:\n        if sum(tup) % 2 != 0:\n            new_list.append(tup)\n    return new_list\n\n# Test the function\ntest_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9, 10), (",
        "generated_testcode": "assert remove_tuples(test_list, 3) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] ** test_tup2[i])\n    return tuple(result_list)\n\n\n# test the function with an example\nprint(find_exponentio((2, 3, 4), (5, 6, 7)))  # output: (32, 729, 823543)\n\n# test the function with another example\nprint(find_exponentio((1, 0, 2, 3), (4, 5, 6, 7)))  # output: (1, 0, 1, 512)\n\n# test the function with one more example\nprint(find_exponentio((0, 1, 2, 3), (1, 2, 3, 4, 5))  # output: (0, 1, 8, 15625)\n\n# test the function with a negative tuple\nprint(find_exponentio((2, -3, 4), (5, 6, -7))  # output: (32, -1, -81)\n\n# test the function with a negative tuple and zero tuple\nprint(find_exponentio((0, -1, 2), (1, 0, 3))  # output: (0, 1, 8)\n\n# test the function with a tuple containing negative",
        "generated_testcode": "assert find_exponentio((2,3,4), (5,6,7) ) == (32, 4096, 16384)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Calculate the semi-major and semi-minor axes\n    c = (a+b)/2\n    d = (a-b)/2\n    \n    # Calculate the inradius\n    r = c*(c-d)/(c+d)\n    \n    # Calculate the area of the triangle\n    area = (c*d)/2\n    \n    # Calculate the perimeter of the triangle\n    perimeter = a+b+2*np.sqrt(r*(2*c-r)**2)\n    \n    return area, perimeter\n\na = 10\nb = 5\narea, perimeter = largest_triangle(a,b)\nprint(\"Area of largest triangle inscribed in ellipse:\",area)\nprint(\"Perimeter of the triangle:\",perimeter) ",
        "generated_testcode": "assert largest_triangle(3,4) == 3\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    i = 1\n    while (i <= n): \n        i = i * 2\n    return i // 2\n\n# test the function \nn = 10\nprint(\"Highest power of 2 less than or equal to\", n, \"is\", highest_Power_of_2(n)) ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_num = max(list1)\n    indices = []\n    for i in range(len(list1)):\n        if list1[i] == max_num:\n            indices.append(i)\n    return indices\n\n# Test the function with an example list\nmy_list = [1, 3, 5, 4, 6, 2, 7, 9, 8, 7, 3]\nprint(position_max(my_list))  # Output: [4, 6]\n\n# The function should return a list of index positions where the maximum value appears\n# in the list. \n# In this case, the maximum value is 9, which appears at index positions 4 and 6. \n# Therefore, the function should return [4, 6] as the output. ",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 5, 6, 5, 7, 8, 9, 9, 10] ) == [3, 4, 6, 7]\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return lst[1:] == lst[:-1] \n\n#test the function \nlst = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5] \nif chkList(lst): \n    print(\"All elements are same\") \nelse: \n    print(\"Elements are not same\") ",
        "generated_testcode": "assert chkList([\"apple\", \"apple\", \"apple\", \"apple\"]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in str1:\n        if ord(i) % 2 != 0:\n            result += i\n    return result\n\n# Test the function with an example\nprint(remove_even(\"Hello World\")) # should print \"HlWrd\"\nprint(remove_even(\"Python\")) # should print \"P\"\n\n# Define a function to reverse a string\ndef reverse_string(str1):\n    return str1[::-1]\n\n# Test the function with an example\nprint(reverse_string(\"Hello World\")) # should print \"dlroW olleH\"\n\n# Define a function to check if a string is a palindrome\ndef is_palindrome(str1):\n    return str1 == reverse_string(str1)\n\n# Test the function with an example\nprint(is_palindrome(\"racecar\")) # should print True\nprint(is_palindrome(\"Hello\")) # should print False\n\n# Define a function to find the longest word in a string\ndef find_longest_word(str1):\n    words = str1.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n\n# Test the function with an example\nprint(find_longest_word(\"The quick brown fox jumped over the lazy dog\")) # should print \"jumped\"\n\n# Define a function to count the occurrences of a character in a string",
        "generated_testcode": "assert remove_even(None) == None\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    bin1 = bin(n1)[2:] \n    bin2 = bin(n2)[2:] \n    max_len = max(len(bin1), len(bin2)) \n    bin1 = bin1.zfill(max_len) \n    bin2 = bin2.zfill(max_len) \n    h_distance = 0\n    for i in range(max_len): \n        if bin1[i] != bin2[i]: \n            h_distance += 1\n    return h_distance \n\n# Example usage \nn1 = 15 \nn2 = 7 \nprint(\"The hamming distance between\",n1,\"and\",n2,\"is\",hamming_Distance(n1,n2))\n# Output: The hamming distance between 15 and 7 is 2 \n\nn1 = 25\nn2 = 3\nprint(\"The hamming distance between\",n1,\"and\",n2,\"is\",hamming_Distance(n1,n2)) \n# Output: The hamming distance between 25 and 3 is 4 \n\nn1 = 3\nn2 = 7\nprint(\"The hamming distance between\",n1,\"and\",n2,\"is\",hamming_Distance(n1,n2)) \n# Output: The hamming distance between 3 and 7 is 1 \n",
        "generated_testcode": "assert hamming_Distance(1, 4) == 2\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0 \n    for i in s : \n        if i == c : \n            count += 1\n    return count \n\n# Test the function \ns = \"hello world\"\nc = \"l\"\nprint(count(s,c)) ",
        "generated_testcode": "assert count(s = \"hello world\", c = \"l\") == 3\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # sort the tuple in ascending order\n    sorted_tup = sorted(test_tup)\n    inversions = 0\n    # iterate through the sorted list and find the number of inversions\n    for i in range(len(sorted_tup)):\n        for j in range(i + 1, len(sorted_tup)):\n            if sorted_tup[i] > sorted_tup[j]:\n                inversions += 1\n    # return the number of inversions\n    return inversions\n\n# Test the function with an example\ntest_tup = (5, 2, 9, 3, 1, 7, 6)\nprint(inversion_elements(test_tup))  # Output: 5\n\n# This function has a time complexity of O(n^2) which is not efficient for large tuples.\n# The most efficient way to solve this problem is by using merge sort which has a time complexity of O(nlogn). ",
        "generated_testcode": "assert inversion_elements(()) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n\n\n# Test the function with example tuples\nprint(concatenate_elements((1, 2, 3, 4, 5, 6))  # Output: ('12', '23', '34', '45', '56')\nprint(concatenate_elements('abcd'))          # Output: ('ab', 'bc', 'cd')\nprint(concatenate_elements((1.2, 3.4, 5.6, 7.8))    # Output: ('1.23.4', '3.45.6', '5.67.8')\nprint(concatenate_elements((2, \"hello\", \"world\"))   # Output: ('2h', 'hel', 'lo', 'low', 'orl', 'rld')\n\n# Function to perform the adjacent element concatenation in the given list\ndef concatenate_elements(test_list):\n    result = []\n    for i in range(len(test_list)-1):\n        result.append(str(test_list[i]) + str(test_list[i+1])\n    return result\n\n# Test the function with example lists\nprint(concatenate_elements([1, 2, 3, 4, 5, 6])     ",
        "generated_testcode": "assert concatenate_elements((\"hello\", \"world\", \"python\") == \"helloworldpython\")\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str)\n    dp = [[0] * n for i in range(n)] \n    res = 0\n    for i in range(n-1, -1, -1): \n        dp[i] = [0] * n \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                if i == j: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = 2\n                if i+1 == j: \n                    dp[i][j] = 1\n            else: \n                dp[i][j] = 1\n            for k in range(i+1, j): \n                if str[i] == str[k]: \n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j]) \n            res = max(res, dp[i][j]) \n    return res \n\n# Testing \nstr = \"abcba\"\nprint(find_longest_repeating_subseq(str)) ",
        "generated_testcode": "assert find_longest_repeating_subseq(str) == 3\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if re.match(r'^-?\\d+(\\.\\d{1,2})?$', num):\n        return True\n    return False\n\n# Test cases\nprint(is_decimal(\"10.50\"))  # True\nprint(is_decimal(\"10.500\")) # True\nprint(is_decimal(\"10.5\")) # True\nprint(is_decimal(\"10.5000\")) # False\nprint(is_decimal(\"10\")) # True\nprint(is_decimal(\"10.000\")) # False\nprint(is_decimal(\"-10.50\")) # True\nprint(is_decimal(\"-10.500\")) # True\nprint(is_decimal(\"-10.5\")) # True\nprint(is_decimal(\"-10.5000\")) # False\nprint(is_decimal(\"-10\")) # True\nprint(is_decimal(\"-10.000\")) # False ",
        "generated_testcode": "assert is_decimal(123.45) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    smallest = heapq.heappop(heap)\n    heapq.heappush(heap,a)\n    return smallest\n\n#Example usage:\nheap = [4,1,3,2,7,5,6,8,9]\nheapq.heapify(heap)\nprint(heap_replace(heap,10)) # Output: 4\nprint(heap) # Output: [5, 10, 2, 7, 1, 6, 8, 9] \n\n#Now the smallest element is replaced by 10. ",
        "generated_testcode": "assert heap_replace(heap, a) == expected_output\n\n# Test the function with the following inputs:\nheap = [1, 2, 3, 4, 5, 6, 7, 8, 9]\na = 10\nexpected_output = [2, 4, 6, 5, 7, 8, 9, 10]\n\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    regex = re.compile(r'[^a-zA-Z0-9]')\n    if regex.search(string):\n        return False\n    else:\n        return True\n\n# test the function with a few examples\nprint(is_allowed_specific_char(\"abc123\")) # should return True\nprint(is_allowed_specific_char(\"abc123!@#\")) # should return False\nprint(is_allowed_specific_char(\"123!@#\")) # should return False\nprint(is_allowed_specific_char(\"ABC123\")) # should return False\nprint(is_allowed_specific_char(\"aBc123\")) # should return False\nprint(is_allowed_specific_char(\"abcd!@#\")) # should return False\nprint(is_allowed_specific_char(\"\")) # should return True\n\n# and you can test it with more examples if you like. ",
        "generated_testcode": "assert is_allowed_specific_char(string) == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, 2**n+1): \n        if (i & (1 << (n-1)) and i & (1 << (n-2)): \n            count += 1\n    return count \n\n# Test the function \nn = 3\nprint(\"Count of numbers with both 1st and 3rd bit set is\", count_Num(n)) ",
        "generated_testcode": "assert count_Num(5) == 3\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        sum = sum + pow(i,4)\n    return sum\n\n# Test the function \nn = 5\nprint(f\"The sum of fourth power of first {n} natural numbers is: {fourth_Power_Sum(n)}\") ",
        "generated_testcode": "assert fourth_Power_Sum(5) == 225\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n\n# Test the function with the following tuples\ntest_tup1 = (\"hello\", \"world\", \"python\")\ntest_tup2 = (\"programming\", \"is\", \"fun\")\nprint(concatenate_strings(test_tup1, test_tup2))  # Should print (\"helloworldprogramming\", \"worldis\", \"pythonfun\")\n\n# Test the function with an empty tuple\ntest_tup1 = ()\ntest_tup2 = (\"python\", \"programming\")\nprint(concatenate_strings(test_tup1, test_tup2))  # Should print ()\n\n# Test the function with a single-item tuple\ntest_tup1 = (\"hello\",)\ntest_tup2 = (\"world\",)\nprint(concatenate_strings(test_tup1, test_tup2))  # Should print (\"helloworld\",)\n\n# Test the function with a tuple of different lengths\ntest_tup1 = (\"hello\", \"world\", \"python\")\ntest_tup2 = (\"programming\", \"is\", \"fun\", \"great\")\nprint(concatenate_strings(test_tup1, test_tup2))  # Should print (\"helloworldprogramming\", \"worldis\", \"pythonfun\", \"programming\") ",
        "generated_testcode": "assert concatenate_strings((\"hello\", \"world\"), (\"python\", \"programming\")) == (\"helloworld\", \"pythonprogramming\")\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    degree = (radian * 180) / 3.14159\n    return degree\n\n# Test the function with some examples\nprint(degree_radian(3.14159))  # Output: 180.0\nprint(degree_radian(0))       # Output: 0.0\nprint(degree_radian(1.570796)) # Output: 90.0\nprint(degree_radian(0.785398)) # Output: 45.0\n\n# Test the function with some edge cases\nprint(degree_radian(6.283185)) # Output: 360.0\nprint(degree_radian(0.0))     # Output: 0.0\nprint(degree_radian(3.14159)) # Output: 180.0\nprint(degree_radian(0.0))     # Output: 0.0\nprint(degree_radian(1.0))     # Output: 57.2958\nprint(degree_radian(0.5))     # Output: 28.6475\nprint(degree_radian(0.25))    # Output: 14.4337\n\n# Test the function with invalid input\ntry:\n    degree_radian(\"hello\")\nexcept TypeError as e:\n    print(e) # Output: can",
        "generated_testcode": "assert degree_radian(3.14159) == 180\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    decoded = []\n    for i in range(len(alist)):\n        if isinstance(alist[i], list):\n            decoded.extend([alist[i][1]] * alist[i][0])\n        else:\n            decoded.append(alist[i])\n    return decoded\n\nprint(decode_list([[2, 3, 'a'], [4, 'b'], [1, 'c'], [2, 'd'], [2, 'e']])) # ['aaaabbbbcc', 'de']\nprint(decode_list([[4, 'a'], [1, 'b', [2, 'c'], [3, 'd']])) # ['aaaa', 'bb', 'cccc', 'ddd']\nprint(decode_list([[3, 'a', [2, 'b'], 1, 'c', [2, 'd'], 2, 'e'])) # ['aaabbbc', 'dd', 'ee']\nprint(decode_list([[1, 'a', 2, 'b', 3, 'c'])) # ['a', 'bb', 'c'] ",
        "generated_testcode": "assert decode_list([\"A3\", \"B1\", \"C1\", \"D2\"]) == [\"A\", \"A\", \"A\", \"B\", \"C\", \"D\", \"D\"]\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in list1:\n        if i in list2:\n            if isinstance(i, list):\n                if not check_subset_list(i, list2):\n                    return False\n        else:\n            if i not in list2:\n                return False\n    return True\n\n# Test cases\nprint(check_subset_list([1, 2, 3], [1, 2, 3, 4])) # True\nprint(check_subset_list([1, 2, 3], [1, 4, 3, 4])) # False\nprint(check_subset_list([1, [2, 3], [3, 4]], [1, [2, 3], 4, [3, 4]]) # True\nprint(check_subset_list([1, [2, 3], [3, 4]], [1, [2, 3], 4, [3, 5]) # False\nprint(check_subset_list([1, [2, [3, 4]], [3, 4]], [1, [2, [3, 4]]) # True\nprint(check_subset_list([1, [2, [3, 4]], [3, 4]], [1, [2, [3, 4], 4]) # False\nprint(check_subset_list([1, 2, 3], [1, 2, 3, [4, 5]) # False ",
        "generated_testcode": "assert check_subset_list([\"a\", \"b\", [\"c\", \"d\"], \"e\"], [\"a\", \"b\", [\"c\", \"d\", \"e\"]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(str)): \n        for j in range(i + 1, len(str)): \n            if str[i] == str[j]: \n                return str[i] \n    return -1\n\nstring = \"geeksforgeeks\"\nprint(\"The first repeated character in the string is\",first_Repeated_Char(string)) ",
        "generated_testcode": "assert first_Repeated_Char(input_string) == expected_output\n\n# Test the function with the following input and expected output\ninput_string = \"hello\"\nexpected_output = \"l\"\n\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    diff = abs(A - B)\n    count = 0\n    while diff % 2 != 0:\n        count += 1\n        diff -= 1\n    return count\n\n# Test the function with sample input\nprint(min_Operations(7, 3)) # Output: 2\nprint(min_Operations(10, 14)) # Output: 4\nprint(min_Operations(12, 6)) # Output: 4\nprint(min_Operations(1, 1)) # Output: 0\nprint(min_Operations(1, 0)) # Output: 1\n\n# Time complexity : O(1) since we are using a constant number of operations to calculate the difference and count. ",
        "generated_testcode": "assert min_Operations(1, 1) == 0\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Sort the tuple in ascending order\n    sorted_tup = sorted(test_tup)\n    # Initialize variables to hold the minimum and maximum elements\n    min_k = sorted_tup[:K]\n    max_k = sorted_tup[-K:]\n    return min_k, max_k\n\n# Test the function\ntest_tup = (2, 4, 5, 7, 9, 1, 6, 8, 3, 10, 12, 15)\nK = 3\nprint(extract_min_max(test_tup, K))  # Output: ((1, 2, 3), (12, 15, 10))\n\n# Test case 2\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\nK = 5\nprint(extract_min_max(test_tup, K))  # Output: ((1, 2, 3, 4, 5, 6), (10, 9, 8, 7, 11))\n\n# Test case 3\ntest_tup = (1, 2, 3)\nK = 2\nprint(extract_min_max(test_tup, K))  # Output: ((1, 2), (3, 3))\n\n# Test case 4\ntest_tup = (1",
        "generated_testcode": "assert extract_min_max(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'), 3) == ('a', 'v', 'x')\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    count = 0\n    result = \"\"\n    special_char = \" ,.\"\n    for i in text:\n        if i in special_char:\n            count += 1\n            if count < n:\n                result += \":\"\n            else:\n                result += i\n        else:\n            result += i\n    return result\n\n# Example usage:\ntext = \"Hello, this is a test. This is another test, and one more.\"\nprint(replace_max_specialchar(text,2)) # Output: Hello: this is a test. This is another test, and one more. \nprint(replace_max_specialchar(text,4)) # Output: Hello:this is a test. This is another test: and one more. ",
        "generated_testcode": "assert replace_max_specialchar(text=\"Hello, world. This is a test. This is only a test.\", n=2) == \"Hello: world. This is a test. This is only a test.\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 == 0:\n            return num\n    return None\n\n# test the function with an example\nprint(first_even([1, 4, 3, 6, 7, 8, 2, 9]))  # Output: 4\nprint(first_even([1, 3, 5, 7, 9]))         # Output: None\nprint(first_even([2, 3, 5, 7]))           # Output: 2\nprint(first_even([1]))                    # Output: None\n\n# Output: \n# 4\n# None\n# 2\n# None ",
        "generated_testcode": "assert first_even(range(1, 10)) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_tuple)-1):\n        if type(test_tuple[i]) != type(test_tuple[i+1]):\n            return False\n    return True\n\n# Test the function\nprint(check_type((1, 2, 3, 4)) # True\nprint(check_type((1, \"hello\", 4)) # False\nprint(check_type((\"hello\", \"world\", \"python\")) # True\nprint(check_type((True, False, False)) # True\nprint(check_type((\"hello\", 12, \"world\", 4.5)) # False ",
        "generated_testcode": "assert check_type((\"hello\", \"world\", 1, 2, 3) == False)\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n % 2 == 0:\n        mid = n // 2 - 1\n    else:\n        mid = n // 2\n    if arr[mid] == x:\n        return True\n    if arr[mid] < x:\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    else:\n        return is_majority(arr[:mid], mid, x)\n\n# Test the function with some sample inputs\narr = [1, 2, 3, 3, 3, 4, 5, 5, 6, 7]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x))\n\narr = [1, 2, 2, 2, 3, 3, 4, 4, 4, 5]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x))\n\narr = [1, 1, 1, 2, 2, 3, 4, 4, 5]\nn = len(arr)\nx = 1\nprint(is_majority(arr, n, x))\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x))\n\narr = [1, 2, 3, 4, 5]",
        "generated_testcode": "assert is_majority(sorted([1, 2, 3, 3, 4, 5], 4, 3) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n  \n# Test the function with a number \nnum = 10\nprint(\"Count of set bits in\", num, \"is\", count_Set_Bits(num)) ",
        "generated_testcode": "assert count_Set_Bits(12) == 2\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if high < low: \n        return arr[0] \n\n    if high == low: \n        return arr[low] \n\n    if arr[low] < arr[high]: \n        return arr[low] \n\n    mid = int((low + high) / 2) \n    if (mid < high and arr[mid] > arr[mid + 1]) or (mid > low and arr[mid] < arr[mid - 1]): \n        return arr[mid] \n\n    if arr[low] <= arr[mid]: \n        return find_Min(arr, mid + 1, high) \n    return find_Min(arr, low, mid - 1) \n\n\n# Test the function with an example array\narr = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3] \nn = len(arr) \nprint(\"Minimum element is\", find_Min(arr, 0, n - 1)) ",
        "generated_testcode": "assert find_Min(arr,0,len(arr)-1) == 1\n\n# Test the function with an example array\narr = [4,5,6,7,0,1,2]\nprint(find_Min(arr,0,len(arr)-1)) # Output: 0\n\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n# Test the function with a sample input\nprint(odd_values_string(\"Hello World\"))  # Output: \"HloWrd\"\nprint(odd_values_string(\"Python\"))      # Output: \"Phno\"\nprint(odd_values_string(\"Programming\"))  # Output: \"Progam\" ",
        "generated_testcode": "assert odd_values_string(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"Hello World\"\nexpected_output = \"HloWrd\"\n\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    min_num = a \n    if b < min_num: \n        min_num = b \n    if c < min_num: \n        min_num = c \n    return min_num \n\n#Test the function with some values \nprint(min_of_three(3, 5, 2)) #Output: 2 \nprint(min_of_three(9, 6, 12)) #Output: 6 \nprint(min_of_three(-5, 0, 10)) #Output: -5 ",
        "generated_testcode": "assert min_of_three(1,2,3) == 1\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return ((n & ((1<<r)-1)) == (1<<l)) ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,4) == False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n\n# example usage\narr = [-12, 11, -13, -5, 6, -7, 5, 8, -3, 14]\nn = len(arr)\nprint(re_arrange_array(arr, n))  # output: [-12, -13, -5, -7, -3, 11, 6, 8, 14]\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Alternative solution using two pointers\ndef re_arrange_array(arr, n):\n    j = 0\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n\n# example usage\narr = [-12, 11, -13, -5, 6, -7, 5, 8, -3, 14]\nn = len(arr)\nfor i in range(0, n):\n    if arr[i] < 0:\n        continue\n    else:\n        break\nfor j in range(i + 1, n):\n    if",
        "generated_testcode": "assert re_arrange_array(arr=[1, -2, -3, 5, 6, -7, 8, 9, -10], n=7) == [-2, -3, -7, -10, 1, 5, 6, 8, 9]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return str1.replace(\" \",char)\n\n# Test the function with an example string\nprint(replace_blank(\"Hello world\", \"*\")) ",
        "generated_testcode": "assert replace_blank(str1=\"hello world\",char=\"_\") == \"hello_world\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0] * n\n    for i in range(n): \n        dp[i] = tri[i][0] \n\n    for i in range(1, n): \n        for j in range(1, i+1): \n            if j == 0: \n                dp[j] = dp[j-1] \n            else: \n                dp[j] = max(dp[j-1], dp[j]) + tri[i][j] \n\n    return dp[n-1] \n\n# Input the size of the right triangle\nn = int(input()) \n\n# Input the numbers of the right triangle\ntri = [[int(input()) for j in range(i+1)] for i in range(n)] \n\n# Find the maximum sum\nprint(\"Maximum Sum:\", max_sum(tri, n)) ",
        "generated_testcode": "assert max_sum(tri, 3) == 12\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.sort(reverse=True)\n    return list1[:n]\n\n#Example usage:\nlist1 = [2, 5, 6, 8, 3, 1, 9, 4, 7]\nn = 3\nprint(larg_nnum(list1,n)) #[9, 8, 7]\nlist2 = [20, 40, 10, 30, 50, 60, 70]\nn = 2\nprint(larg_nnum(list2,n)) #[70, 60]\n\n#Using bubble sort\ndef bubble_sort(list1):\n    n = len(list1)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if list1[j] < list1[j+1]:\n                list1[j], list1[j+1] = list1[j+1], list1[j]\n    return list1\n\n#Example usage:\nlist1 = [2, 5, 6, 8, 3, 1, 9, 4, 7]\nprint(bubble_sort(list1)) #[9, 8, 7, 6, 5, 4, 3, 2]\n\n#Finding the median of a list using quicksort\ndef quicksort(list1):\n    if len(list1) <= 1:\n        return list1",
        "generated_testcode": "assert larg_nnum(list1,3) == [10, 9, 8]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    side = (2*3.14*r*h)\n    topbottom = (2*3.14*r*r)\n    total = (side+2*topbottom)\n    return total\nprint(lateralsuface_cylinder(3,5)) #250.8504832144111627\n\n#Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    total = (3.14*(r**2)*h)\n    return total\nprint(volume_cylinder(3,5)) #141.37166694122712276\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    total = (4/3*(3.14*(r**3))\n    return total\nprint(volume_sphere(3)) #94.24777796081013514\n\n#Write a function to find the surface area of a sphere.\ndef surf_sphere(r):\n    total = (4*3.14*(r**2)\n    return total\nprint(surf_sphere(3)) #113.0488394564140462\n\n#Write a function to find the area of a rectangle.\ndef area_rectangle(length,width):\n    total =",
        "generated_testcode": "assert lateralsuface_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return l**3\n\n# Test the function with a value\nprint(volume_cube(3))  # Output: 27\n\n# Write a function to find the surface area of a cube.\ndef surface_area_cube(l):\n    return 6 * (l ** 2)\n\n# Test the function with a value\nprint(surface_area_cube(3))  # Output: 54\n\n# Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    return 4 * 3.14 * (r ** 2)\n\n# Test the function with a value\nprint(surface_area_sphere(5))  # Output: 314.1592653589793936\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    return (4/3) * 3.14 * (r ** 3)\n\n# Test the function with a value\nprint(volume_sphere(5))  # Output: 523.6049193587194377\n\n# Write a function to find the area of a rectangle.\ndef area_rectangle(l, w):\n    return l * w\n\n# Test the function with values\nprint(area_rectangle(5, 10))  # Output: 50\n\n# Write a function to find the area of a triangle",
        "generated_testcode": "assert volume_cube(3) == 27\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return n | (n & -n)\n\n# Test the function \nn = 5 \nprint(even_bit_set_number(n)) ",
        "generated_testcode": "assert even_bit_set_number(10) == 10\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty list to store the number of triangles\n    dp = [0]*(N+1)\n    dp[0] = 0\n    dp[1] = 1\n    dp[2] = 1\n    # Loop through the triangle from 3 to N\n    for i in range(3,N+1):\n        # Use the dynamic programming approach to fill the list\n        dp[i] = dp[i-1] + dp[i-2]\n        # Check if the current number of triangles is greater than K\n        if dp[i] > K:\n            return i-1\n    return dp[N]\n\n# Test the function\nN = 7\nK = 10\nprint(No_of_Triangle(N,K))  # Output: 4\n\n# Time Complexity: O(N)\n# Space Complexity: O(N) ",
        "generated_testcode": "assert No_of_Triangle(3,2) == 1\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dictionary = {}\n    for i in test_list:\n        if i[0] in dictionary:\n            dictionary[i[0]] = dictionary[i[0] + 1\n        else:\n            dictionary[i[0]] = 1\n    for key, value in dictionary.items():\n        if value > 1:\n            print(f\"{key} occurred {value} times\")\n\ntest_list = [(1, 2, 3), (2, 4, 6), (1, 2, 3), (3, 4, 5), (2, 4, 6), (1, 2, 3)]\ncheck_occurences(test_list)\n# Output: 1 occurred 3 times, 2 occurred 2 times, 3 occurred 2 times\n\ntest_list = [(1, 2, 3), (2, 4, 6), (1, 2, 3), (3, 4, 5), (2, 4, 6), (1, 2, 3), (1, 2, 3)]\ncheck_occurences(test_list)\n# Output: 1 occurred 4 times, 2 occurred 3 times, 3 occurred 2 times\n\n# Here, we are using a dictionary to store the count of occurrences of each tuple in the list. We iterate over the list and check if the tuple exists in the dictionary or not. If it does, we increment its count by 1, otherwise, we add it to the dictionary",
        "generated_testcode": "assert check_occurences(test_list) == expected_output\n\n# test_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5)]\n# expected_output = {(1, 2, 3): 3, (2, 3, 4): 3, (3, 4, 5): 3}\n\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str) \n    count = (n*(n+1))//2\n    return count \n\n#Test the function \nstr = \"abc\"\nprint(number_of_substrings(str)) \n\n#Output: 6 ",
        "generated_testcode": "assert number_of_substrings(str) == 10\n\n# Test the function with an empty string\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    dp = [0] * (m+1)\n    dp[1] = 1\n    for i in range(2,m+1):\n        dp[i] = 1\n        for j in range(i-1,1,-1):\n            if j * 2 <= i:\n                dp[i] += dp[j]\n    return dp[n]\n\nprint(get_total_number_of_sequences(5,3)) # Output: 4\nprint(get_total_number_of_sequences(5,4)) # Output: 7\nprint(get_total_number_of_sequences(10,4)) # Output: 39\nprint(get_total_number_of_sequences(100,6)) # Output: 431391\n\n# Time Complexity: O(m*n)\n# Space Complexity: O(m)\n\n\n# Let's test the function with some sample inputs\ndef test_get_total_number_of_sequences():\n    assert get_total_number_of_sequences(5,3) == 4\n    assert get_total_number_of_sequences(5,4) == 7\n    assert get_total_number_of_sequences(10,4) == 39\n    assert get_total_number_of_sequences(100,6) == 431391\n    print(\"All test cases passed\")\n\n",
        "generated_testcode": "assert get_total_number_of_sequences(5,3) == 1\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.pop()\n    list1.extend(list2)\n    return list1\n\n# Example usage:\nlst1 = [1,2,3,4,5]\nlst2 = [6,7,8,9]\nresult = replace_list(lst1,lst2)\nprint(result)  # Output: [1, 2, 3, 6, 7, 8, 9]\n\n# Example usage:\nlst1 = ['a','b','c']\nlst2 = ['d','e','f','g']\nresult = replace_list(lst1,lst2)\nprint(result)  # Output: ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n# Example usage:\nlst1 = ['x', 'y']\nlst2 = []\nresult = replace_list(lst1,lst2)\nprint(result)  # Output: ['x', 'y']\n\n# Example usage:\nlst1 = []\nlst2 = [1,2,3]\nresult = replace_list(lst1,lst2)\nprint(result)  # Output: [1, 2, 3] ",
        "generated_testcode": "assert replace_list([\"a\",\"b\",\"c\",\"d\"],[\"e\",\"f\",\"g\"]) == [\"a\",\"b\",\"c\",\"g\"]\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr = []\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            temp1 = []\n            for k in range(o):\n                temp1.append('*')\n            temp.append(temp1)\n        arr.append(temp)\n    return arr\n\n# Testing the function\narr = array_3d(2,3,4)\nfor i in range(len(arr)):\n    for j in range(len(arr[i]):\n        print(arr[i][j])\n        for k in range(len(arr[i][j]):\n            print(arr[i][j][k])\n\n# Output:\n# *\n# *\n# *\n# * *\n# *\n# *\n# *\n# * *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# * \n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# *\n# * ",
        "generated_testcode": "assert array_3d(2,3,4) == [['***', '***', '***'], ['***', '***', '***']]\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function\nprint(count_charac(\"Hello World\")) # output: 10\n\n# Testing with empty string\nprint(count_charac(\"\")) # output: 0\n\n# Testing with a string containing spaces\nprint(count_charac(\"   Hello   World  \")) # output: 13\n\n# Testing with string containing special characters\nprint(count_charac(\"Hello, World! 123\")) # output: 12\n\n# Testing with string containing uppercase characters\nprint(count_charac(\"Hello WORLD\")) # output: 10 ",
        "generated_testcode": "assert count_charac(str1) == 10\n\n# Test the function with an empty string\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(lst, key=lambda x: x[0]) \n\n# Test the function\nlst = [(4, 'a'), (2, 'b'), (1, 'c'), (3, 'a'), (3, 'd'), (1, 'a')] \nprint(sort_on_occurence(lst)) # Output: [(4, 'a'), (3, 'a'), (1, 'c'), (1, 'a'), (2, 'b')] ",
        "generated_testcode": "assert sort_on_occurence([(1, 2), (3, 4), (1, 5), (2, 3), (1, 6), (3, 7)] ) == [(1, 2), (1, 5), (1, 6), (3, 4), (3, 7), (2, 3)]\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": " \n    # Find the square root of the given number\n    sq = int(N ** 0.5) \n    # Check if the square root is an integer or not\n    if sq * sq == N: \n        return N\n    # If it is not, find the next integer square root and return its square\n    else: \n        return (sq + 1) ** 2\n  \n# Driver code\nN = 12\nprint(next_Perfect_Square(N)) # Output: 16\n\nN = 13\nprint(next_Perfect_Square(N)) # Output: 16 \n\nN = 25\nprint(next_Perfect_Square(N)) # Output: 36 \n\nN = 35\nprint(next_Perfect_Square(N)) # Output: 49 \n\nN = 100\nprint(next_Perfect_Square(N)) # Output: 100 \n\nN = 225\nprint(next_Perfect_Square(N)) # Output: 36 \n\nN = 50\nprint(next_Perfect_Square(N)) # Output: 49 \n\n# Time Complexity : O(1) ",
        "generated_testcode": "assert next_Perfect_Square(15) == 16\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    left = [0] * n \n    right = [0] * n \n    include = [0] * n \n    exclude = [0] * n \n    max_val = 0\n    for i in range(n): \n        include[i] = arr[i] \n        exclude[i] = 0\n    for i in range(1, n): \n        left[i] = max(include[i-1], exclude[i-1]) \n        include[i] = max(include[i-1], exclude[i-1] + arr[i]) \n        exclude[i] = left[i-1] \n    for i in range(n-2, -1, -1): \n        right[i] = max(include[i+1], exclude[i+1]) \n        include[i] = max(include[i+1], exclude[i+1] + arr[i]) \n        exclude[i] = right[i+1] \n    max_val = -1000000000000000\n    for i in range(n): \n        max_val = max(max_val, include[i] + right[i]) \n    return max_val \n\n# Driver Code \narr = [1, 2, 3, 4, 2, 5] \nn = len(arr) \nprint(max_sum(arr, n)) ",
        "generated_testcode": "assert max_sum(arr=[1, 2, 3, 4, 2, 3, 5, 7, 10, 8, 12], n=8) == 33\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if number < 0:\n        return None\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    else:\n        x = number\n        y = (x + 1) / 2\n        while abs(x - y) > 0.000001:\n            x = y\n            y = (x + number / x) / 2\n        return round(y, 4)\n\n# Test the function with a few examples.\nprint(babylonian_squareroot(16))\nprint(babylonian_squareroot(2))\nprint(babylonian_squareroot(10))\nprint(babylonian_squareroot(100))\nprint(babylonian_squareroot(0))\nprint(babylonian_squareroot(2.25)) ",
        "generated_testcode": "assert babylonian_squareroot(16) == 4\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                dp[i][j] = 2\n            elif str[i] == str[j]: \n                dp[i][j] = 2 + dp[i+1][j-1] \n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n    return dp[0][n-1] \n\nstr = input()\nprint(lps(str)) ",
        "generated_testcode": "assert lps(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"bbbab\"\nexpected_output = 4\n\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return 1.0/n + harmonic_sum(n-1)\n\n# Test the function\nprint(harmonic_sum(10)) # Output: 4.576555888839103258\n\n# Time complexity: O(n) - because the function recursively calls itself n times, where n is the input value\n# Space complexity: O(n) - because the function has to keep track of the function call stack ",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    return list(set(array_nums1) & set(array_nums2))\n\n# Example usage:\narray1 = [1,2,2,3,4,5]\narray2 = [2,3,4,5,6]\nprint(intersection_array(array1, array2)) # Output: [2, 3, 4, 5]\n\n# Using set() function to convert the array into a set to remove the duplicates\n# Using & operator to find the intersection of two sets\n# Using list() to convert the set back to a list and return it. ",
        "generated_testcode": "assert intersection_array(array_nums1=[1,2,3,4,5],array_nums2=[2,4,6,8]) == [2,4]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0 \n    for i in tup: \n        if i == x: \n            count = count + 1\n    return count \n  \n# Test the function \ntup = (1, 2, 3, 4, 5, 1, 2, 1, 6, 7, 8, 1) \nprint(count_X(tup, 1)) \n\n# Output: 3 ",
        "generated_testcode": "assert count_X(('a', 'b', 'c', 'a', 'd', 'a', 'c', 'a', 'b'), 'a') == 3\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in list:\n        new_list.append(element)\n        new_list.append(i)\n    return new_list\n\n# Example usage:\nmy_list = [1,2,3,4,5,6]\nnew_list = insert_element(my_list,0)\nprint(new_list) # Output: [0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6]\n\n# Write a function to remove the first and last elements of a list.\ndef remove_ends(list):\n    return list[1:-1]\n\n# Example usage:\nmy_list = [1,2,3,4,5,6]\nnew_list = remove_ends(my_list)\nprint(new_list) # Output: [2, 3, 4, 5]\n\n# Write a function to remove all even numbers from a list.\ndef remove_even(list):\n    new_list = []\n    for i in list:\n        if i % 2 != 0:\n            new_list.append(i)\n    return new_list\n\n# Example usage:\nmy_list = [1,2,3,4,5,6,7,8,9]\nnew_list = remove_even(my_list)\nprint(new_list) # Output: [1, 3, 5, 7]\n\n# Write",
        "generated_testcode": "assert insert_element([\"apple\",\"banana\",\"cherry\"],\"fruit\") == [\"fruit\",\"apple\",\"fruit\",\"banana\",\"fruit\",\"cherry\"]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create an empty list to store the polar coordinates\n    polar_coord = []\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # append the polar coordinates to the list\n        polar_coord.append((r,theta))\n    return polar_coord\n\n# Test the function\nnumbers = [3+4j, 1-2j, -1+0j, -5j]\nprint(convert(numbers)) # [(5.0, 0.982793723228174605), (2.2360679777499979, 2.26525459090059028), (1.0, 0.0), (5.0, 3.141592653589793)]\n\n# The output is a list of tuples where the first element is the magnitude (radius) and the second element is the phase angle in radians.\n# Note that the phase angle is in radians, not degrees. ",
        "generated_testcode": "assert convert(1+2j) == (2.236067977749979, 0.131699875378540345)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n\n# Test the function with a list of integers and non-integers\nlist1 = [1, 2, \"3\", 4, \"five\", 6, 7, \"eight\", 9, \"10\"]\nprint(count_integer(list1))\n\n# Output: 5\n# Explanation: The function should return 5 because there are 5 integers in the list. ",
        "generated_testcode": "assert count_integer([\"apple\", \"banana\", \"cherry\", \"orange\", \"grape\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = text.split()\n    a_words = []\n    e_words = []\n    for word in words:\n        if word.startswith(('a'):\n            a_words.append(word)\n        elif word.startswith('e'):\n            e_words.append(word)\n    return a_words, e_words\n\ntext = \"apple banana elephant alligator\"\na_words, e_words = words_ae(text)\nprint(a_words) # Output: ['apple', 'alligator']\nprint(e_words) # Output: ['elephant']\n\n# The function takes a string input, splits it into words, iterates over each word and adds it to the respective list (a_words or e_words) based on whether it starts with 'a' or 'e'.\n# Finally, it returns both lists.\n\n# Example usage:\n# >>> words_ae(\"apple banana elephant alligator\")\n# (['apple', 'alligator'], ['elephant']) \n\n# The above function can be improved by using list comprehensions to make it more concise:\ndef words_ae(text):\n    words = text.split()\n    a_words = [word for word in words if word.startswith('a')]\n    e_words = [word for word in words if word.startswith('e')]\n    return a_words, e_words\n\n# or using a dictionary to store the words based on the first letter:\ndef words",
        "generated_testcode": "assert words_ae(text) == ['apple', 'elephant', 'egg', 'ant', 'apple', 'egg', 'elephant']\n\n# Test the function with the given text\ntext = \"apple elephant cat dog egg ant bird eagle\"\nprint(words_ae(text))\n\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    def backtrack(start, comb, k):\n        if k == 0:\n            print(comb)\n            return\n        for i in range(start, len(l)):\n            backtrack(i, comb + [l[i]], k - 1)\n            backtrack(i, comb, k - 1)\n\n    backtrack(0, [], n)\n\n\n\ncombinations_colors(['Red', 'Green', 'Blue'], 3)\n\n# Output: ['Red', 'Red', 'Red']\n#         ['Red', 'Green', 'Red']\n#         ['Red', 'Green', 'Blue']\n#         ['Red', 'Blue', 'Red']\n#         ['Green', 'Red', 'Red']\n#         ['Green', 'Green', 'Red']\n#         ['Green', 'Green', 'Blue']\n#         ['Green', 'Blue', 'Red']\n#         ['Blue', 'Red', 'Red']\n#         ['Blue', 'Green', 'Red']\n#         ['Blue', 'Green', 'Blue']\n#         ['Blue', 'Blue', 'Red']\n#         ['Red', 'Red', 'Red', 'Red']\n#         ['Red', 'Red', 'Green']\n#         ['Red', 'Red', 'Blue']\n#         ['Red', 'Green', 'Green']\n#         ['Red', 'Green', 'Green', 'Red']\n#         ['Red', 'Green', 'Green', 'Blue']\n#         ['Red', 'Green', 'Blue', 'Red']\n#",
        "generated_testcode": "assert combinations_colors(3, 2) == ['RR', 'RG', 'RB', 'GR', 'GG', 'GB', 'BB']\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    primes = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes += 1\n    return primes\n\nprint(count_Primes_nums(100))\n\n# Function to count the number of factors of a given number\ndef count_factors(n):\n    factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors += 1\n    return factors\n\nprint(count_factors(10))\n\n# Function to find the factors of a given number\ndef find_factors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\nprint(find_factors(10))\n\n# Function to find the common factors of two numbers\ndef find_common_factors(a, b):\n    factors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            factors.append(i)\n    return factors\n\nprint(find_common_factors(10, 20))\n\n# Function",
        "generated_testcode": "assert count_Primes_nums(10) == 4\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    a = a + b\n    b = a - b\n    a = a - b\n    return a,b\n\n# Test the function\nprint(swap_numbers(5,10))  # Output: (10, 5)\n\n# This is not the correct way to swap two numbers.\n# In Python, variables are passed by reference, not by value. \n# The variables are swapped, but the original variables are not modified outside the function. ",
        "generated_testcode": "assert swap_numbers(1,2) == (2,1)\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count_odd = len(list(filter(lambda x: x%2!=0, array_nums))\n    return count_odd\n\n#Testing the function\narray_nums = [1,2,3,4,5,6,7,8,9,10]\nprint(count_odd(array_nums))\n\n#Output: 5\n\n#Alternatively, using map function\ndef count_odd(array_nums):\n    count_odd = sum(map(lambda x: 1 if x%2!=0 else 0, array_nums)\n    return count_odd\n\n#Testing the function\narray_nums = [1,2,3,4,5,6,7,8,9,10]\nprint(count_odd(array_nums))\n\n#Output: 5\n\n#Note: In both cases, the output is 5 as there are 5 odd numbers in the list. ",
        "generated_testcode": "assert count_odd(range(10)) == 5\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            result += (test_tup1[i],)\n        else:\n            result += (test_tup2[i],)\n    return result\n\n# Test the function with an example\ntest_tup1 = (1, 3, 5, 7, 9)\ntest_tup2 = (2, 4, 6, 8, 10)\nprint(maximize_elements(test_tup1, test_tup2))  # Output: (2, 4, 6, 9, 10)\n\n# Test the function with another example\ntest_tup1 = (10, 20, 30, 40, 50)\ntest_tup2 = (5, 15, 25, 35, 45)\nprint(maximize_elements(test_tup1, test_tup2))  # Output: (10, 20, 30, 45, 50) ",
        "generated_testcode": "assert maximize_elements(('a', 1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3, 4)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 1: \n        return None\n    primes = [] \n    i = 2\n    while len(primes) < n: \n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1): \n            if i % j == 0: \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(i)\n        i += 1\n    return primes[n-1] \n\n# Test the function \nprint(newman_prime(1)) # Output: 2 \nprint(newman_prime(5)) # Output: 23\nprint(newman_prime(10)) # Output: 53\nprint(newman_prime(20)) # Output: 1139 ",
        "generated_testcode": "assert newman_prime(1) == 5\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_list)\n\n# Test the function with the example tuples\nprint(division_elements((10, 20, 30, 40), (2, 2, 3, 5)))\nprint(division_elements((15, 4, 5, 20), (3, 2, 1, 4)))\n\n# Output:\n# (5.0, 10.0, 10.0, 8.3333333333333333334)\n# (5.0, 2.0, 5.0, 5.0) ",
        "generated_testcode": "assert division_elements((2, 4, 6, 8, 10), (2, 2, 2, 2)) == (1, 2, 3, 5)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(list1) < L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nL = 3\nprint(split_two_parts(list1, L))\n\n# Output: ([1, 2, 3], [4, 5, 6, 7, 8])\n\n# Test the function with an empty list\nlist1 = []\nL = 3\nprint(split_two_parts(list1, L))\n# Output: ([], [])\n\n# Test the function with a list of length L\nlist1 = [1, 2, 3]\nL = 3\nprint(split_two_parts(list1, L))\n# Output: ([1, 2, 3], [])\n\n# Test the function with a list of length less than L\nlist1 = [1, 2]\nL = 3\nprint(split_two_parts(list1, L))\n# Output: ([1, 2], [])\n\n# Test the function with a negative value for L\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nL = -3\nprint(split_two_parts(list1, L))\n# Output: ValueError: L must be non-negative\n\n",
        "generated_testcode": "assert split_two_parts([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"], 3) == ([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\", \"g\", \"h\"])\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    merged = d1.copy()\n    merged.update(d2)\n    return merged\n\n# Test the function with sample dictionaries\nd1 = {'a':1,'b':2}\nd2 = {'b':3,'c':4}\nprint(merge_dict(d1,d2)) # Output: {'a': 1, 'b': 3, 'c': 4}\n\nd3 = {'c':5,'d':6}\nprint(merge_dict(d2,d3)) # Output: {'b': 3, 'c': 5, 'd': 6}\n\nd4 = {'e':7}\nprint(merge_dict(d1,d4)) # Output: {'a': 1, 'b': 2, 'e': 7}\n\n# Test with an empty dictionary\nd5 = {}\nprint(merge_dict(d1,d5)) # Output: {'a': 1, 'b': 2}\n",
        "generated_testcode": "assert merge_dict(dict1, dict2) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\n# Test the function with the following dictionaries\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\ndict3 = {'e': 5}\n\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    dog_age = h_age * 7\n    return dog_age\n\n# Test the function with an example input\nprint(dog_age(3)) # Output: 21\n\n# Write a function to calculate a cat's age in cat's years\ndef cat_age(h_age):\n    cat_age = h_age * 15\n    return cat_age\n\n# Test the function with an example input\nprint(cat_age(3)) # Output: 45\n\n# Write a function to calculate a fish's age in fish's years\ndef fish_age(h_age):\n    fish_age = h_age * 9\n    return fish_age\n\n# Test the function with an example input\nprint(fish_age(3)) # Output: 27\n\n# Write a function to calculate a bird's age in bird's years\ndef bird_age(h_age):\n    bird_age = h_age * 12\n    return bird_age\n\n# Test the function with an example input\nprint(bird_age(3)) # Output: 36\n\n# Write a function to calculate a hamster's age in hamster's years\ndef hamster_age(h_age):\n    hamster_age = h_age * 5\n    return hamster_age\n\n# Test the function with an example input\nprint(hamster_age(3)) # Output: 15\n\n# Write a function to calculate a rabbit's age in rabb",
        "generated_testcode": "assert dog_age(1) == 7\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i:i+step])\n    return new_list\n\n# Example usage:\nprint(list_split([1,2,3,4,5,6,7,8,9], 3)) # Output: [[1,2,3], [4,5,6], [7,8,9]]\nprint(list_split([1,2,3,4,5,6,7,8,9], 2)) # Output: [[1,2], [3,4], [5,6], [7,8], [9]]\nprint(list_split([1,2,3], 1)) # Output: [[1], [2], [3]]\nprint(list_split([], 1)) # Output: [] ",
        "generated_testcode": "assert list_split([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"], 3) == [[\"a\", \"d\", \"g\", \"j\"], [\"b\", \"e\", \"h\"], [\"c\", \"f\", \"i\"], [\"k\"]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    area = 6 * (l**2)\n    return area\n\n# Test the function with a cube of side length 5\nprint(lateralsurface_cube(5))\n\n# Write a function to find the volume of a cube.\ndef volume_cube(l):\n    volume = l**3\n    return volume\n\n# Test the function with a cube of side length 5\nprint(volume_cube(5))\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    volume = (4/3) * 3.14159 * (r**3)\n    return volume\n\n# Test the function with a radius of 3\nprint(volume_sphere(3))\n\n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    surface_area = 4 * 3.14159 * (r**2)\n    return surface_area\n\n# Test the function with a radius of 3\nprint(surface_sphere(3))\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r, h):\n    volume = (1/3) * 3.14159 * (r**2) * h\n    return volume\n\n# Test the function with a radius of 3 and height of 4\nprint(volume_cone(3, 4))\n\n# Write a function to find the surface area of a cone.",
        "generated_testcode": "assert lateralsurface_cube(3) == 6 * 3 * 2\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum  \n  \n# take input from the user  \nn = int(input(\"Enter a number: \"))  \n  \n# check if the number is positive  \nif n > 0:  \n    print(\"Sum of squares of first\",n,\"odd natural numbers is\", square_Sum(n))  \nelse:  \n    print(\"Please enter a positive number\") ",
        "generated_testcode": "assert square_Sum(5) == 225 # 1^2 + 3^2 + 5^2 + 7^2 + 9^2 = 225\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    star = \"\" \n    for i in range(n): \n        star += \"*\"\n    return star \n\n# Test the function with some sample inputs. \nprint(find_star_num(5)) \n# Output: \"*****\" \nprint(find_star_num(10)) \n# Output: \"**********\" \nprint(find_star_num(1)) \n# Output: \"*\" ",
        "generated_testcode": "assert find_star_num(1) == \"*\"\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return ord(k)\n\nprint(ascii_value('A')) # 65\nprint(ascii_value('Z')) # 90\nprint(ascii_value('a')) # 97\nprint(ascii_value('z')) # 122\nprint(ascii_value('1')) # 49\nprint(ascii_value('!')) # 33\nprint(ascii_value('@')) # 64\nprint(ascii_value('$')) # 36\nprint(ascii_value(' ')) # 32\nprint(ascii_value('#')) # 35\n",
        "generated_testcode": "assert ascii_value(65) == 65\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # initialize sum as 0\n    sum = 0\n    # Traverse through the array\n    for i in range(n): \n        # check if the number at i position is even and i is even \n        if (arr[i]%2 == 0 and i%2 == 0):\n            # add the number to the sum\n            sum += arr[i] \n    # Return the sum\n    return sum\n# Example usage:\narr = [1, 2, 4, 6, 5, 10, 8, 12, 11, 14, 16, 19, 22]\nn = len(arr)\nprint(sum_even_and_even_index(arr,n))\n\n# Output: 22\n# Explanation: The even number at even positions (2nd, 4th, 6th, 8th and 10th positions) are 2, 6, 12 and 16, so their sum is 22. ",
        "generated_testcode": "assert sum_even_and_even_index(arr=[1,2,3,4,5,6,7,8,9],n=6) == 10\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**5\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"Sum of the fifth power of first n even natural numbers: \", even_Power_Sum(n))\n\n#Testing the function with some examples\nprint(even_Power_Sum(10)) #Output: 42500000\nprint(even_Power_Sum(20)) #Output: 1608900000\nprint(even_Power_Sum(30)) #Output: 693060800000\n",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for record in test_list:\n        result.append((record[1], record[2], record[0]))\n    return result\n\n# Example usage:\ntest_list = [(1, 'apple', 'fruit'), (2, 'banana', 'fruit'), (3, 'carrot', 'vegetable'), (4, 'orange', 'fruit')]\nprint(rear_extract(test_list))  # Output: [('fruit', 1, 'apple'), ('fruit', 2, 'banana'), ('vegetable', 3, 'carrot'), ('fruit', 4, 'orange')]\n\n# Or you can use list comprehension\ndef rear_extract(test_list):\n    return [(record[1], record[2], record[0]) for record in test_list]\n\n# Example usage:\ntest_list = [(1, 'apple', 'fruit'), (2, 'banana', 'fruit'), (3, 'carrot', 'vegetable'), (4, 'orange', 'fruit')]\nprint(rear_extract(test_list))  # Output: [('fruit', 1, 'apple'), ('fruit', 2, 'banana'), ('vegetable', 3, 'carrot'), ('fruit', 4, 'orange')]\n\n# You can also use a lambda function\nrear_extract = lambda test_list: [(record[1], record[2], record[0]) for record",
        "generated_testcode": "assert rear_extract([(1,2,3), (4,5,6), (7,8,9)] ) == (7,8,9)\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n\n# Test the function with sample tuples\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (5, 5, 10)\nprint(substract_elements(test_tup1, test_tup2)) # Output: (-5, 15, 20)\n\ntest_tup1 = (10, 20, 30, 40)\ntest_tup2 = (5, 5, 10, 4)\nprint(substract_elements(test_tup1, test_tup2)) # Output: (5, 15, 20, 36) ",
        "generated_testcode": "assert substract_elements((1, 2, 3, 4, 5), (5, 4, 3, 2)) == (-4, -2, 0, 3)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    else:\n        return (n//2) * (n//2 + 1) + even_binomial_Coeff_Sum(n-1)\n\n# Test the function\nn = 6\nprint(even_binomial_Coeff_Sum(n))\n\n# Output: 35\n# Explanation: The even indexed binomial coefficients of 6 are (1, 6, 15, 20, 15, 6, 1), \n# so their sum is 1+15+20+15+1 = 42. ",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 10\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return(a.index(m))\n\na = [1,2,3,4,5,6,7,8,9,10,11]\nn = len(a)\nm = 5\nprint(get_Position(a,n,m))\n\n# output: 4 ",
        "generated_testcode": "assert get_Position(a=[1,2,3,4,5,6,7,8,9],n=6,m=7) == 6\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi=3.14\n    volume=pi*(r**2)*h\n    return volume\n\nr=float(input(\"Enter the radius of the cylinder: \"))\nh=float(input(\"Enter the height of the cylinder: \"):\")\nprint(\"Volume of the cylinder is: \",volume_cylinder(r,h))\n\n#Write a function to find the area of a circle.\ndef area_circle(r):\n    pi=3.14\n    area=pi*(r**2)\n    return area\n\nr=float(input(\"Enter the radius of the circle: \")\nprint(\"Area of the circle is: \",area_circle(r))\n\n#Write a function to find the area of a sphere.\ndef area_sphere(r):\n    pi=3.14\n    area=4*pi*(r**2)\n    return area\n\nr=float(input(\"Enter the radius of the sphere: \")\nprint(\"Area of the sphere is: \",area_sphere(r))\n\n#Write a function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    pi=3.14\n    surface_area=4*pi*(r**2)\n    return surface_area\n\nr=float(input(\"Enter the radius of the sphere: \")\nprint(\"Surface area of the sphere is: \",surface_area_sphere(r))\n\n#Write a function to find the circumference of a circle.\ndef circumference_circle(r",
        "generated_testcode": "assert volume_cylinder(3, 5) == 152.36\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return {k: v for k, v in dict.items() if v > n}\n\n# Test the function with an example dictionary\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nprint(dict_filter(my_dict, 3)) ",
        "generated_testcode": "assert dict_filter(my_dict, 3) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count_dict = {}\n    for i in test_tup:\n        if i[0] not in count_dict:\n            count_dict[i[0]] = 1\n        else:\n            count_dict[i[0]] += 1\n    return count_dict\n\n\n# Test the function\ntest_tup = ((1, 2, 3), (1, 4, 5), (2, 6, 7), (1, 8, 9), (3, 10, 11), (1, 12, 13), (2, 14, 15), (3, 16, 17))\nprint(count_first_elements(test_tup))  # Output: {1: 3, 2: 2, 3: 1}\n\n\n# This function counts the occurrence of each element in the first position of the tuple.\n# The output is a dictionary with the element as the key and the count as the value.\n",
        "generated_testcode": "assert count_first_elements(('a', 'b', 'c', 'a', 'd', 'a', 'e', 'f', 'a') == 3\n\n# The output should be 3, as there are 3 elements before the first 'a' in the tuple. ",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(1, n + 1):\n        decagonal = i * (3 * i - 1)\n        if decagonal == n:\n            return True\n    return False\n\ndef nth_decagonal_number(n):\n    decagonal = 0\n    for i in range(1, n + 1):\n        decagonal += i * (3 * i - 1)\n    return decagonal\n\ndef nth_decagonal_number(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if is_num_decagonal(n):\n        return n\n    else:\n        for i in range(1, n + 1):\n            decagonal = i * (3 * i - 1)\n            if decagonal >= n:\n                return decagonal\n\ndef is_num_decagonal(n): \n    return (n % 10) == (n // 10) ** 3 - (n // 10) * 3 + 1\n\ndef nth_decagonal_number(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if is_num_decagonal(n):\n        return n\n    else:\n        return n + (n // 10) ** 3 - (n // 10) * 3 + 1\n",
        "generated_testcode": "assert is_num_decagonal(1) == 1\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    found = False\n    position = 0\n    while position < len(dlist) and not found:\n        if dlist[position] == item:\n            found = True\n        else:\n            position += 1\n    return found\n\n\n\n# Test the function with an example\ndlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sequential_search(dlist, 5))  # Output: True\nprint(sequential_search(dlist, 10))  # Output: False\n\n\n\n# Write a function to search an element in a sorted list using binary search\ndef binary_search(slist, item):\n    first = 0\n    last = len(slist) - 1\n    found = False\n\n    while first <= last and not found:\n        mid = (first + last) // 2\n        if slist[mid] == item:\n            found = True\n        elif item < slist[mid]:\n            last = mid - 1\n        else:\n            first = mid + 1\n    return found\n\n\n\n# Test the function with an example\nslist = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\nprint(binary_search(slist, 16))  # Output: True\nprint(binary_search(slist, 7))  # Output: False\n",
        "generated_testcode": "assert sequential_search([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], \"cherry\") == True\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return len(test_list) == len(set(test_list))\n\n# Test the function with an example\ntest_list = [1, 2, 3, 4, 5, 6, 7]\nprint(all_unique(test_list)) # should return True\n\ntest_list = [1, 2, 3, 2, 4, 5, 6]\nprint(all_unique(test_list)) # should return False ",
        "generated_testcode": "assert all_unique([\"apple\", \"banana\", \"orange\", \"grape\"]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x,y: x-y,nums1,nums2))\n\nnums1 = [5,10,15,20,25,30,35,40,45]\nnums2 = [1,2,3,4,5,6,7,8,9]\n\nprint(sub_list(nums1,nums2)) # output: [4,8,12,16,21,24,29,41]\n\n# Create a function that takes two strings as input and returns a new string with the characters of the first string\n# that are not present in the second string in the same order as they appear in the first string.\ndef non_common_chars(str1,str2):\n    return ''.join(filter(lambda x: x not in str2,str1))\n\nstr1 = \"hello\"\nstr2 = \"llohe\"\nprint(non_common_chars(str1,str2)) # output: \"eh\"\n\n# Write a function to concatenate two lists using map and lambda function.\ndef concat_list(list1, list2):\n    return list(map(lambda x,y: x+y,list1,list2))\n\nlist1 = [\"hello\",\"world\"]\nlist2 = [\"python\",\"programming\"]\nprint(concat_list(list1,list2)) # output: ['helloworld', 'pythonprogramming']\n\n# Create a function that takes a list of",
        "generated_testcode": "assert sub_list(nums1=[1,2,3,4],nums2=[5,6,7]) == [-4,-4,-4]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    digits = [int(i) for i in str(n)]\n    for digit in digits: \n        count = 0\n        for i in str(n): \n            if i == str(digit): \n                count += 1\n                if count > digit: \n                    return False\n    return True\n\n# Test the function with the given example\nprint(validate(1234567)) # True\nprint(validate(12345678)) # False\nprint(validate(12346567)) # True\nprint(validate(123657)) # False\n\n# Time Complexity: O(n*logn) ",
        "generated_testcode": "assert validate(123456789) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for item in list:\n        if item != element:\n            return False\n    return True\n\nlist = [\"apple\",\"apple\",\"apple\"]\nelement = \"apple\"\nprint(check_element(list,element)) # Output: True\n\nlist = [\"apple\",\"banana\",\"apple\"]\nelement = \"apple\"\nprint(check_element(list,element)) # Output: False\n\nlist = [\"apple\",\"banana\",\"kiwi\"]\nelement = \"apple\"\nprint(check_element(list,element)) # Output: False\n\nlist = [\"apple\",\"apple\",\"banana\",\"kiwi\"]\nelement = \"kiwi\"\nprint(check_element(list,element)) # Output: False\n\nlist = [\"apple\",\"kiwi\",\"kiwi\",\"kiwi\"]\nelement = \"kiwi\"\nprint(check_element(list,element)) # Output: True\n\nlist = [\"apple\",\"kiwi\",\"kiwi\",\"kiwi\"]\nelement = \"\"\nprint(check_element(list,element)) # Output: False\n\nlist = []\nelement = \"kiwi\"\nprint(check_element(list,element)) # Output: False\n\nlist = [\"apple\",\"apple\",\"apple\",\"apple\",\"apple\",\"apple\" , \"kiwi\"]\nelement = \"kiwi\"\nprint(check_element(list,element)) # Output: False ",
        "generated_testcode": "assert check_element([\"apple\",\"apple\",\"apple\",\"apple\"],\"apple\") == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = re.compile(r'a[b]{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n\nprint(text_match_two_three(\"abbb\"))  # Output: True\nprint(text_match_two_three(\"aabbbbb\"))  # Output: True\nprint(text_match_two_three(\"abb\"))  # Output: False\nprint(text_match_two_three(\"aaa\"))  # Output: False\nprint(text_match_two_three(\"bbbb\"))  # Output: False\nprint(text_match_two_three(\"a\"))  # Output: False\n\n# Match a string that has two or more vowels\ndef text_match_vowels(text):\n    pattern = re.compile(r'[aeiou]{2,}')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n\nprint(text_match_vowels(\"hello\"))  # Output: True\nprint(text_match_vowels(\"world\"))  # Output: True\nprint(text_match_vowels(\"hi\"))  # Output: False\nprint(text_match_vowels(\"aiou\"))  # Output: True\nprint(text_match_vowels(\"bike\"))  # Output: True\nprint(text_match_vowels(\"fghjkl\"))  # Output: False\n\n# Match a string that has a word ending in 'ing'.\n",
        "generated_testcode": "assert text_match_two_three(text='abbb') == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    current_sum = 0\n    for i in range(k):\n        for j in range(i, i + n):\n            current_sum += a[j % n]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n\n# Testing the function \na = [1, 2, 3, -10, 5]\nn = len(a)\nk = 3\nprint(max_sub_array_sum_repeated(a, n, k)) ",
        "generated_testcode": "assert max_sub_array_sum_repeated(a=[1, 2, -5, 3, 4, -2, 7, 10], n=6, k=3) == 33\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n\n#Test the function\nprint(square_Sum(10))  # Output: 220 (1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2 + 14^2 = 410)\nprint(square_Sum(15))  # Output: 1240 (1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2 + 13^2 + 14^2 + 15^2 = 410)\nprint(square_Sum(20))  # Output: 4100 (1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2 + 13^2 + 14^2 + 15^2 + 16^2 + ",
        "generated_testcode": "assert square_Sum(10) == 285\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in arr:\n        if i % P == i:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(modular_inverse(arr, 2)) # Should print 3\nprint(modular_inverse(arr, 3)) # Should print 2\nprint(modular_inverse(arr, 5)) # Should print 1\nprint(modular_inverse(arr, 7)) # Should print 0\nprint(modular_inverse(arr, 11)) # Should print 1\n\n# Test cases\n# Test case 1: N = 2, arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# Answer: 3 (2, 4, 8)\n# Test case 2: N = 3, arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# Answer: 2 (3, 6)\n# Test case 3: N = 5, arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n# Answer: 1 (9)\n# Test case 4: N = 7, arr = [1, 2, 3, 4, 5",
        "generated_testcode": "assert modular_inverse(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], N=10, P=7) == 3\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize the count of odd days to 0\n    count = 0\n    # Traverse through all the months of the year\n    for month in range(1, 13): \n        # Find the number of days in the current month\n        days_in_month = calendar.monthrange(N, month)[1]\n        # Check if the month has 31 days\n        if days_in_month == 31: \n            # Add 15 to the count (15 odd days)\n            count += 15\n        # Check if the month has 30 days\n        elif days_in_month == 30: \n            # Add 10 to the count (10 odd days)\n            count += 10\n        # Check if the month has 28 or 29 days\n        else: \n            # Add 7 to the count (7 odd days) \n            count += 7\n    # Return the count of odd days\n    return count\n\n# Take input from the user\nyear = int(input(\"Enter a year: \"))\n# Calculate the number of odd days in the year\nodd_days = odd_Days(year)\n# Print the result\nprint(f\"The number of odd days in {year} is {odd_days}\") ",
        "generated_testcode": "assert odd_Days(2020) == 256\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    result = []\n    for i in list1:\n        if len(i) == max_length:\n            result.append(i)\n    return result\n\n# Test cases\nprint(max_length([[1,2],[3,4,5],[6,7,8,9]])) # Output: [[3, 4, 5], [6, 7, 8, 9]]\nprint(max_length([[1],[2,3,4,5],[6,7,8,9],[10,11,12,13,14]])) # Output: [[2, 3, 4, 5], [10, 11, 12, 13, 14]]\nprint(max_length([[1],[2],[3],[4],[5,6,7,8,9]])) # Output: [[5, 6, 7, 8, 9]]\nprint(max_length([])) # Output: []\n\n# Explanation:\n# We iterate through each list in the list of lists, and find the maximum length. We store this length in a variable. Then, we iterate through each list again and add the list to the result if its length is equal to the maximum length.\n# If there are multiple lists with the same maximum length, we append all of them to the result.\n# If the",
        "generated_testcode": "assert max_length([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    MOD = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = k\n    for i in range(2, n+1): \n        temp = [0] * k \n        for j in range(k): \n            temp[j] = dp[i-1] \n            if j > 0: \n                temp[j] = (temp[j] + dp[i-2]) % MOD \n            for l in range(j): \n                temp[j] = (temp[j] + dp[i-2-j]) % MOD \n        dp[i] = temp[j] \n    return dp[n] \n\n# Driver code \nn = 3\nk = 2\nprint(\"Number of ways to paint the fence with at most 2 adjacent posts of same color: \", count_no_of_ways(n, k)) ",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 6\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if m != 0:  \n        return n//m  \n    else:  \n        print(\"Cannot divide by zero\")  \n  \n#test the function  \nprint(find(10, 2))  \nprint(find(10, 0)) ",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return (w**2 + h**2)**0.5\n\n#example usage\nw = 3\nh = 4\nprint(\"The third side of the triangle is:\", otherside_rightangle(w,h))\n\n#example output\n# The third side of the triangle is: 5.0\n\n# now let's create a function to find the area of a triangle\ndef area_triangle(a,b,c):\n    s = (a + b + c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\n\n#example usage\na = 3\nb = 4\nc = 5\nprint(\"The area of the triangle is:\", area_triangle(a,b,c))\n\n#example output\n# The area of the triangle is: 6.0\n\n# now let's create a function to find the perimeter of a triangle\ndef perimeter_triangle(a,b,c):\n    return a + b + c\n\n#example usage\na = 3\nb = 4\nc = 5\nprint(\"The perimeter of the triangle is:\", perimeter_triangle(a,b,c))\n\n#example output\n# The perimeter of the triangle is: 12\n\n# now let's create a function to find the hypotenuse of a right angled triangle\ndef hypotenuse_rightangle(a,b):\n    return (a**2 + b**2)**0.",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    maxval = None\n    for val in listval:\n        if type(val) in [int, float]:\n            if maxval is None:\n                maxval = val\n            elif val > maxval:\n                maxval = val\n    return maxval\n\n# test the function\nmylist = [10, \"hello\", 3.14, 5, -2, \"world\", 99.9]\nprint(max_val(mylist))  # should print 99.9\nmylist2 = [3.14, \"hello\", \"world\", 9.9]\nprint(max_val(mylist2)) # should print None\nmylist3 = []\nprint(max_val(mylist3))  # should print None\nmylist4 = [\"hello\", \"world\"]\nprint(max_val(mylist4))  # should print None ",
        "generated_testcode": "assert max_val([\"hello\", 1, 2, 3, 4, \"world\", 5, 6, 7, \"python\"]) == 7\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n# Test the function with the number 12\nprint(sum_div(12))  # Output: 28\n\n# Test the function with the number 15\nprint(sum_div(15))  # Output: 18\n\n# Test the function with the number 100\nprint(sum_div(100))  # Output: 220\n\n# Test the function with the number 20\nprint(sum_div(20))  # Output: 32\n\n# Test the function with the number 10\nprint(sum_div(10))  # Output: 12\n\n# Test the function with the number 1\nprint(sum_div(1))  # Output: 1\n\n# Test the function with the number 5\nprint(sum_div(5))  # Output: 6\n\n# Test the function with the number 0\nprint(sum_div(0))  # Output: 0\n\n# Test the function with the number -5\nprint(sum_div(-5))  # Output: 0\n\n# Test the function with the number 25\nprint(sum_div(25))  # Output: 40\n\n# Test the function with the number -10\nprint(sum_div(-10))",
        "generated_testcode": "assert sum_div(12) == 18\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n  \n    return inv_count \n\n# Driver code \narr = [5, 2, 3, 8, 6, 7, 1] \nn = len(arr) \nresult = get_Inv_Count(arr, n) \nprint(\"Number of inversions are\", result) ",
        "generated_testcode": "assert get_Inv_Count(arr,n) == 3\n\n# Test the function with an example array\narr = [1, 20, 6, 4, 5, 3, 11, 9]\nn = len(arr)\nprint(get_Inv_Count(arr,n)) # Output: 3\n\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    flattened_list = []\n    for i in list1:\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n\n# Example usage:\nnested_list = [1, [2, [3, 4], [5, [6, 7], 8], 9]\nflattened_list = flatten_list(nested_list)\nprint(flattened_list)  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Test the function with some test cases:\nnested_list = [1, [2, [3, 4], [5, [6, 7], 8], 9]\nprint(flatten_list(nested_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nnested_list = [1, [2, [3, 4], [5, [6, [7, 8, 9, [10, 11], 12], 13], 14], 15]\nprint(flatten_list(nested_list)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ",
        "generated_testcode": "assert flatten_list([\"a\", [\"b\", [\"c\", \"d\"], \"e\", [\"f\", [\"g\", \"h\"]]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for sub_list in l1:\n        for item in sub_list:\n            if item in l2:\n                result.append(item)\n    return result\n\n# Test cases\nprint(intersection_nested_lists([[1, 2, 3], [4, 5], [6, 7], [8, 9]], [4, 6, 8, 10]))  # Output: [4, 6, 8]\nprint(intersection_nested_lists([[1, 2, 3], [4, 5], [6, 7], [8, 9]], [10, 11, 12, 13]))  # Output: []\nprint(intersection_nested_lists([[1, 2, 3], [4, 5], [6, 7], [8, 9]], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\nprint(intersection_nested_lists([], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))  # Output: [] ",
        "generated_testcode": "assert intersection_nested_lists([[1, 2, 3], [4, 5], [6, 7]], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function will take in a list of tuples with 3 elements and return the maximum aggregate of the tuple.\n    \"\"\"\n    max_agg = 0\n    for i in stdata:\n        if sum(i) > max_agg:\n            max_agg = sum(i)\n    return max_agg\n\nstdata = [(2, 3, 4), (5, 3, 9), (7, 1, 8), (9, 2, 1), (3, 1, 6), (4, 8, 5), (6, 5, 7)]\nprint(max_aggregate(stdata))\n\n# Output: 24 \n\n# Explanation: The maximum aggregate is achieved when the third element of the tuple is 9. So the function returns 24. ",
        "generated_testcode": "assert max_aggregate(stdata) == 10000\n\n# Test the function with the given data\nstdata = [(100, 200, 300), (500, 400, 600), (700, 800, 900)]\nprint(max_aggregate(stdata)) # Output: 2100\n\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    dp = [[0 for i in range(2)] for j in range(n+1)] \n    for i in range(n+1): \n        dp[i][0] = 1\n        dp[i][1] = 1\n        for j in range(2, n+1): \n            dp[j][0] = dp[j-1][0] + dp[j-1][1] \n            dp[j][1] = dp[j-1][0] + dp[j-1][1] \n  \n    return (dp[n][0] + dp[n][1]) // 2\n  \n# Test the function \nn = 3\nprint(count_binary_seq(n)) ",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n\n# Example usage:\nd = {'a': 1, 'b': {'c': 2, 'd': {'e': 3}} }\nprint(dict_depth(d))  # Output: 3\n\n# Example usage with nested lists:\nd = {'a': 1, 'b': {'c': 2, 'd': [1, 2, {'e': 3}]} }\nprint(dict_depth(d))  # Output: 3\n\n# Example usage with nested tuples:\nd = {'a': 1, 'b': {'c': 2, 'd': (1, 2, {'e': 3})} }\nprint(dict_depth(d))  # Output: 3\n\n# Example usage with empty dictionary:\nd = {}\nprint(dict_depth(d))  # Output: 0\n\n# Example usage with empty list:\nd = []\nprint(dict_depth(d))  # Output: 0\n\n# Example usage with empty tuple:\nd = ()\nprint(dict_depth(d))  # Output: 0\n\n# Example usage with nested dictionary and empty dictionary:\nd = {'a': {'b': {}}\nprint(dict_depth(d))  # Output: 2\n\n# Example usage with nested dictionary and empty tuple:\nd = {'a': {'b':",
        "generated_testcode": "assert dict_depth(None) == 0\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    temp = n\n    count = 0\n    while (temp & 1 == 0): \n        count += 1\n        temp >>= 1\n    return 1 << count \n\n# Test the function \nn = 9\nprint(set_Bit_Number(n)) ",
        "generated_testcode": "assert set_Bit_Number(10) == 2\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    inv_count = merge_sort(a,0,n-1)\n    return inv_count\n\ndef merge_sort(a,start,end):\n    if start>=end:\n        return 0\n    mid = (start+end)//2\n    inv_count = 0\n    inv_count += merge_sort(a,start,mid)\n    inv_count += merge_sort(a,mid+1,end)\n    inv_count += merge(a,start,mid,end)\n    return inv_count\n\ndef merge(a,start,mid,end):\n    i,j,k = start,mid+1,start\n    temp = []\n    inv_count = 0\n    while i<=mid and j<=end:\n        if a[i]<=a[j]:\n            temp.append(a[i])\n            i+=1\n        else:\n            temp.append(a[j])\n            j+=1\n            inv_count += (mid-i+1)\n    while i<=mid:\n        temp.append(a[i])\n        i+=1\n    while j<=end:\n        temp.append(a[j])\n        j+=1\n    a[start:end+1] = temp\n    return inv_count\n\n# Testing \na = [5,3,8,4,2,7,6,1,9,0]\nn = len(a)\nprint(solve(a,n))\n\n\n# Output: ",
        "generated_testcode": "assert solve(a=[1,2,3,4,5,6,7,8],n=6) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr)\n    for i in range(rotations):\n        arr.append(arr.pop(0))\n    return arr[index]\n# test the function with a sample input\narr = [1,2,3,4,5,6,7]\nranges = 2\nrotations = 3\nindex = 2\nprint(find_Element(arr,ranges,rotations,index)) ",
        "generated_testcode": "assert find_Element(arr=[1,2,3,4,5,6,7,8,9],ranges=2,rotations=3,index=0) == 8\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for word in words:\n        if word.startswith(\"p\"):\n            result.append(word)\n    return result\n\n# Test cases\nprint(start_withp([\"python\", \"program\", \"programmer\", \"apple\", \"programming\", \"pear\", \"peach\"])) # Output: ['python', 'program', 'programmer']\nprint(start_withp([\"cat\", \"dog\", \"fish\", \"bird\", \"lion\", \"tiger\"])) # Output: []\nprint(start_withp([\"apple\", \"pear\", \"peach\", \"grape\", \"banana\", \"peanut\"])) # Output: ['pear', 'peach'] ",
        "generated_testcode": "assert start_withp([\"python\", \"perl\", \"php\", \"ruby\", \"java\", \"kotlin\"]) == [\"python\", \"php\"]\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if index >= n:\n        return 0\n    if k == 1:\n        return a[index]\n    include = a[index]\n    exclude = max_sum_increasing_subseq(a, index + 1, k - 1)\n    if exclude > 0 and a[index] > exclude:\n        include = 0\n    return max(include, exclude) + max_sum_increasing_subseq(a, index + 1, k)\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nn = len(a)\nk = 3\nprint(max_sum_increasing_subseq(a, 0, k))\n",
        "generated_testcode": "assert max_sum_increasing_subseq(a=[1, 101, 2, 3, 4, 5, 2, 10, 7, 8, 9, 100], n=8, index=3, k=5) == 101+2+3+4+5+10 = 28\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return tuplex[m:n]\n\n# example usage:\nmy_tuple = (1,2,3,4,5,6,7,8,9,10)\nprint(colon_tuplex(my_tuple,1,5)) # output: (2,3,4,5)\n\n# example usage with a negative index\nmy_tuple = (1,2,3,4,5,6,7,8,9,10)\nprint(colon_tuplex(my_tuple,2:-2)) # output: (3,4,5,6,7)\n\n# example usage with a negative start index\nmy_tuple = (1,2,3,4,5,6,7,8,9,10)\nprint(colon_tuplex(my_tuple,-8:-2)) # output: (1,2,3,4,5,6,7) ",
        "generated_testcode": "assert colon_tuplex(('a', 1, 'b', 2, 'c', 3) == (1, 2)\n\n# The output should be (1, 2)\n\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create a list to hold the products\n    products = []\n    # loop through the first list\n    for num1 in nums1:\n        # loop through the second list\n        for num2 in nums2:\n            # append the product of the two numbers to the products list\n            products.append(num1 * num2)\n    # sort the products list in descending order\n    products.sort(reverse=True)\n    # return the first N items from the sorted list\n    return products[:N]\n\n# example usage:\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [1, 2, 3, 4, 5]\nN = 3\nprint(large_product(nums1, nums2, N))  # output: [20, 25, 16]\n\n# time complexity: O(n^2)\n# space complexity: O(n)\n",
        "generated_testcode": "assert large_product(nums1=[1, 2, 3, 4, 5], nums2=[3, 2, 1, 4, 5], N=2) == [20, 20]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if a > b:\n        return a\n    else:\n        return b\nprint(maximum(10,20)) # Output: 20\nprint(maximum(100,50)) # Output: 100\n\n# Write a Python function to find the sum of two numbers.\ndef sum(a,b):\n    return a + b\nprint(sum(10,20)) # Output: 30\nprint(sum(100,50)) # Output: 60\n\n# Write a Python function to find the difference between two numbers.\ndef difference(a,b):\n    return a - b\nprint(difference(10,20)) # Output: -10\nprint(difference(100,50)) # Output: -40\n\n# Write a Python function to find the product of two numbers.\ndef product(a,b):\n    return a * b\nprint(product(10,20)) # Output: 200\nprint(product(100,50)) # Output: 5000\n\n# Write a Python function to find the quotient of two numbers.\ndef quotient(a,b):\n    return a / b\nprint(quotient(10,20)) # Output: 0.5\nprint(quotient(100,50)) # Output: 2.0\n\n# Write a Python function to find the remainder of two numbers.\ndef remainder(a,b):\n    return a",
        "generated_testcode": "assert maximum(10, 20) == 20\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return tuple(str1.split(','))\n\n# Example usage:\nprint(string_to_tuple('1,2,3,4,5'))  # Output: ('1', '2', '3', '4', '5')\nprint(string_to_tuple('hello,world'))  # Output: ('hello', 'world')\nprint(string_to_tuple('foo,bar,baz'))  # Output: ('foo', 'bar', 'baz')\n\n# Test your function with the examples above. ",
        "generated_testcode": "assert string_to_tuple(str1) == ('a', 'b', 'c', 'd')\n\n# Test the function with the following input:\nstr1 = \"a,b,c,d\"\nprint(string_to_tuple(str1)) # Output: ('a', 'b', 'c', 'd')\n\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    return (n | (n + 1)) + 1\n\n# Test the function with a sample input\nn = 7\nprint(\"Left most unset bit is:\", set_left_most_unset_bit(n)) # Output: 8 ",
        "generated_testcode": "assert set_left_most_unset_bit(0b111101) == 0b1000000\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    volume = (1/3) * 3.14 * r**2 * h\n    return volume\n\n# Write a function to find the surface area of a cone\ndef surface_area_cone(r,s):\n    surface_area = 3.14 * r**2 + 3.14 * r * s\n    return surface_area\n\n# Prompt the user for the radius and height of a cone\nradius = float(input(\"Enter the radius of the cone: \"))\nheight = float(input(\"Enter the height of the cone: \")\n\n# Call the functions and print the result\nprint(\"Volume of the cone:\", volume_cone(radius, height))\nprint(\"Surface area of the cone:\", surface_area_cone(radius, slant_height))\n\n# Test the function with some sample values\nprint(volume_cone(3, 5)) # should return 113.04\nprint(surface_area_cone(3, 5)) # should return 47.52\n\n# Test the function with some more sample values\nprint(volume_cone(5, 10)) # should return 314.159\nprint(surface_area_cone(5, 10)) # should return 98.56\n\n# Test the function with a negative value\nprint(volume_cone(-3, 5)) # should return \"Invalid value for radius\"\n",
        "generated_testcode": "assert volume_cone(3,5) == 113.04761904761904762\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in list1:\n        if i > 0:\n            print(i)\nlist1 = [1,2,-3,4,5,-6,7,0,8,9]\npos_nos(list1)\n\n#Output: \n#1\n#2\n#4\n#5\n#7\n#8\n#9\n\n#Write a python function to find the maximum number in a list\ndef max_no(list1):\n    max_num = list1[0]\n    for i in list1:\n        if i > max_num:\n            max_num = i\n    print(\"Maximum number is:\",max_num)\nlist1 = [1,2,4,5,6,7,9,8,3]\nmax_no(list1)\n\n#Output: \n#Maximum number is: 9\n\n#Write a python function to find the minimum number in a list\ndef min_no(list1):\n    min_num = list1[0]\n    for i in list1:\n        if i < min_num:\n            min_num = i\n    print(\"Minimum number is:\",min_num)\nlist1 = [1,2,4,5,6,7,9,8,3]\nmin_no(list1)\n\n#Output: \n#Minimum number is: 1\n\n#Write a python function to find the sum of all the numbers in a list\ndef sum_list(list1):\n    sum =",
        "generated_testcode": "assert pos_nos(list1=[-1, 2, 0, 3, -4, 5, 6, -7]) == [2, 3, 5, 6]\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n > len(grid[0] or len(grid) != 2:\n        return \"Invalid input\"\n    else:\n        max_sum = -float('inf')\n        for i in range(n):\n            for j in range(n, len(grid[0])):\n                current_sum = grid[0][i]\n                for k in range(1, n):\n                    if i-k >= 0:\n                        current_sum += grid[0][i-k]\n                    current_sum += grid[1][j-k]\n                    if j-k >= 0:\n                        current_sum += grid[1][j-k]\n                    current_sum -= grid[0][j-k]\n                max_sum = max(max_sum, current_sum)\n        return max_sum\n\n# Test cases\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8]]\nn = 2\nprint(max_sum_rectangular_grid(grid, n)) # Output: 28\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nn = 3\nprint(max_sum_rectangular_grid(grid, n)) # Output: 49\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8]]\nn",
        "generated_testcode": "assert max_sum_rectangular_grid(grid, n) == expected_output\n\n# Test the function with the following grid and n\ngrid = [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\nn = 2\nexpected_output = 20\n\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = str.split() \n    max_len = 0\n    for word in words: \n        if len(word) % 2 == 0 and len(word) > max_len: \n            max_len = len(word) \n    return max_len\n\n# Test the function with example input\nstr = \"The quick brown fox jumps over the lazy dog\"\nprint(\"Length of first even length word in the string:\", find_Max_Len_Even(str)) ",
        "generated_testcode": "assert find_Max_Len_Even([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"mango\", \"nectarine\", \"orange\", \"pear\", \"quince\", \"raspberry\", \"strawberry\", \"watermelon\"]) == \"lemon\"\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x and (mid == len(A) - 1 or A[mid + 1] > x):\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n\n# Test the function\nA = [1, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 9]\nx = 3\nprint(find_last_occurrence(A, x))  # Output: 3\n\nx = 5\nprint(find_last_occurrence(A, x))  # Output: 6\n\nx = 9\nprint(find_last_occurrence(A, x))  # Output: 8\n\nx = 10\nprint(find_last_occurrence(A, x))  # Output: -1\n\nx = 1\nprint(find_last_occurrence(A, x))  # Output: 0\n\nx = 8\nprint(find_last_occurrence(A, x))  # Output: 7\n\nx",
        "generated_testcode": "assert find_last_occurrence(A, x) == 3\n\n# Test the function with the following input\nA = [1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9]\nx = 3\nprint(find_last_occurrence(A, x)) # Output: 3\n\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Example:\n    modified_encode([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 8, 8, 9, 9]) returns [2, 1, 1, 1, 3, 1, 2, 4, 1, 3, 2, 2, 4, 1, 1, 2]\n    \"\"\"\n    result = []\n    count = 1\n    for i in range(len(alist)-1):\n        if alist[i] == alist[i+1]:\n            count += 1\n        else:\n            result.append(count)\n            result.append(alist[i])\n            count = 1\n    result.append(count)\n    result.append(alist[-1])\n    return result\n\nprint(modified_encode([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 7, 7, 7, 7, 8, 8, 9, 9])) # [2, 1, 1, 1, 3, 1, 2, 4, 1, 3, 2, 2, 4, 1, 1, 2",
        "generated_testcode": "assert modified_encode([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\", \"c\", \"c\"]) == [(\"a\", 3), (\"b\", 2), (\"c\", 3)]\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Find the maximum side \n    max_side = int(s**(1/3) + 1)\n    # Find the minimum side \n    min_side = int(s**(1/3) - 1)\n    # Loop through all possible combinations of sides and find the maximum volume \n    max_volume = 0\n    for a in range(min_side, max_side): \n        for b in range(min_side, max_side): \n            for c in range(min_side, max_side): \n                if a + b + c <= s: \n                    volume = a * b * c \n                    if volume > max_volume: \n                        max_volume = volume \n    return max_volume \n\n# Test the function \nprint(max_volume(1000)) # Output: 216 \nprint(max_volume(24)) # Output: 8 ",
        "generated_testcode": "assert max_volume (10) == 17\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    words = re.findall(r'\\b\\w{5}\\b', text)\n    return words\n\n# Test the function\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(find_long_word(text))  # Output: ['quick']\ntext = \"Python is an interpreted high-level programming language\"\nprint(find_long_word(text))  # Output: ['Python'] ",
        "generated_testcode": "assert find_long_word(text) == ['apple', 'banana', 'cherry', 'durian', 'elderberry']\n\n# Test the function with the given text\ntext = \"apple banana cherry durian elderberry fig grape kiwi mango papaya raspberry strawberry\"\nprint(find_long_word(text))\n\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum_of_squares = 0\n    square_of_sum = 0\n\n    for i in range(1, n + 1):\n        sum_of_squares += i ** 2\n        square_of_sum += i\n\n    square_of_sum *= square_of_sum\n\n    return square_of_sum - sum_of_squares\n\n\nprint(sum_difference(10))  # Output: 2640\nprint(sum_difference(5))  # Output: 22\nprint(sum_difference(1))  # Output: 0\nprint(sum_difference(100))  # Output: 25164150\nprint(sum_difference(0))  # Output: 0\n",
        "generated_testcode": "assert sum_difference(10) == 2640\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    num = s\n    d = 0\n    while num > 0:\n        d += 1\n        num = num // 10\n    return d\n\n# Take input of number\nnum = int(input(\"Enter a number: \"))\n\n# Find the demlo number\nprint(\"Demlo number of\", num, \"is\", find_demlo(num)) ",
        "generated_testcode": "assert find_demlo(123456) == 123456\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    min_val = min(list1)\n    min_pos = []\n    for i in range(len(list1)):\n        if list1[i] == min_val:\n            min_pos.append(i)\n    return min_pos\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5, 3, 6, 3, 0, 5]\nprint(position_min(list1)) # Output: [6]\n\nlist2 = [5, 5, 5, 5, 5]\nprint(position_min(list2)) # Output: [0, 1, 2, 3]\n\nlist3 = [1, 3, 2, 5, 2, 3, 4]\nprint(position_min(list3)) # Output: [0, 3] ",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(cur, n):\n        if arr[i] < 0 and i % 2 == 0 or arr[i] > 0 and i % 2 != 0:\n            out_of_place[cur] = arr[i]\n            cur += 1\n    return cur\n\ndef rearrange_array(arr):\n    n = len(arr)\n    out_of_place = [0] * n\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            out_of_place[j] = arr[i]\n            j += 1\n\n    j = 0\n    for i in range(n):\n        if arr[i] >= 0:\n            out_of_place[j] = arr[i]\n            j += 1\n\n    for i in range(n):\n        arr[i] = out_of_place[i]\n    return arr\n\ndef alternate_positive_negative(arr):\n    n = len(arr)\n    j = 0\n    for i in range(n):\n        if (arr[i] < 0 and i % 2 == 0) or (arr[i] >= 0 and i % 2 != 0):\n            j = right_rotate(arr, n, j)\n    return arr\n\n# Test the function with example\narr = [1, 2, -3, -4, 5, 6, -7, 8",
        "generated_testcode": "assert right_rotate(arr=[1, -2, 3, -4, 5, 6, -7, 8, -9], n=6, out_of_place=0, cur=0) == [1, -2, 3, -4, 5, 6, -7, 8]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Your code goes here\n    if len(test_tuple)==0:\n        return 0\n    else:\n        sum_=0\n        for i in range(0,len(test_tuple),2):\n            sum_+=test_tuple[i]\n        return sum_\n\n# Test the function with the sample input\ntest_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)\nprint(sum_of_alternates(test_tuple))  # Output: 4\n\ntest_tuple = (5, 5, 10, 5, 5, 5)\nprint(sum_of_alternates(test_tuple))  # Output: 10\n\ntest_tuple = (1, 2, 3)\nprint(sum_of_alternates(test_tuple))  # Output: 1\n\ntest_tuple = ()\nprint(sum_of_alternates(test_tuple))  # Output: 0 ",
        "generated_testcode": "assert sum_of_alternates(()) == 0\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [0]*(n+1)\n    dp[0] = 0\n    for i in range(1,n+1):\n        dp[i] = n\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            if i - j*j >= 0:\n                dp[i] = min(dp[i], dp[i-j*j]+1)\n    return dp[n]\n\n# Test the function\nprint(get_Min_Squares(17)) # Output: 5\nprint(get_Min_Squares(25)) # Output: 4\nprint(get_Min_Squares(10)) # Output: 2\nprint(get_Min_Squares(11)) # Output: 3\nprint(get_Min_Squares(1))  # Output: 1\nprint(get_Min_Squares(2))  # Output: 2\nprint(get_Min_Squares(3))  # Output: 1\nprint(get_Min_Squares(4))  # Output: 1\nprint(get_Min_Squares(5))  # Output: 2\nprint(get_Min_Squares(6))  # Output: 3\nprint(get_Min_Squares(7))  # Output: 3\nprint(get_Min_Squares(8))  # Output: 2\n",
        "generated_testcode": "assert get_Min_Squares(17) == 1\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize an empty dictionary to store word count\n    word_count = {}\n    # Loop through each word in the list\n    for word in test_list:\n        # If the word is not in the dictionary, add it with a count of 1\n        if word not in word_count:\n            word_count[word] = 1\n        # If the word is already in the dictionary, increment its count by 1\n        else:\n            word_count[word] += 1\n    # Initialize a variable to hold the most common word and its count\n    most_common_word = None\n    most_common_count = 0\n    # Loop through the dictionary to find the most common word\n    for word, count in word_count.items():\n        # If the count is greater than the current most common count, update the most common word and count\n        if count > most_common_count:\n            most_common_word = word\n            most_common_count = count\n    # Return the most common word\n    return most_common_word\n\n# Test the function with an example list\ntest_list = [\"hello\", \"world\", \"hello\", \"python\", \"python\", \"python\", \"hello\"]\nprint(most_occurrences(test_list)) # Output: python\n\n# Test the function with a different list\ntest_list = [\"apple\", \"banana\", \"apple\", \"apple\", \"orange\", \"orange\", \"orange\", \"banana\"]\nprint(most_occurrences(test_list)) # Output:",
        "generated_testcode": "assert most_occurrences([\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"orange\", \"orange\", \"orange\"]) == \"orange\"\n",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x==y or y==z or x==z:\n        return True\n    else:\n        return False\n\n#Example usage\nprint(check_isosceles(10,10,15))  # Output: True\nprint(check_isosceles(5,5,5))   # Output: True\nprint(check_isosceles(8,12,12)) # Output: True\nprint(check_isosceles(8,9,12))  # Output: False\nprint(check_isosceles(8,12,8))  # Output: True\nprint(check_isosceles(8,9,10))  # Output: False\n\n#Write a function to calculate the volume of a sphere with given radius.\ndef sphere_volume(radius):\n    volume = (4/3)*(3.14)*(radius**3)\n    return volume\n\n#Example usage\nprint(sphere_volume(5)) # Output: 523.6\nprint(sphere_volume(10)) # Output: 15381.723\n\n#Write a function to check if a number is positive or negative.\ndef check_positive(num):\n    if num >= 0:\n        return \"Positive\"\n    else:\n        return \"Negative\"\n\n#Example usage\nprint(check_positive(10)) # Output: Positive\nprint(check_positive(-5)) # Output: Negative\n",
        "generated_testcode": "assert check_isosceles(3,4,4) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n > len(list1):\n        n = n % len(list1)\n    if n == 0:\n        return list1\n    else:\n        return list1[n:] + list1[:n]\n# Example usage:\nlist1 = [1,2,3,4,5,6,7,8]\nm = 2\nn = 3\nprint(rotate_left(list1,m,n)) # Output: [6,7,8,1,2,3,4,5]\n\n# Write a function to rotate a given list to the right direction.\ndef rotate_right(list1,m,n):\n    if n > len(list1):\n        n = n % len(list1)\n    if n == 0:\n        return list1\n    else:\n        return list1[-n:] + list1[:-n]\n# Example usage:\nlist1 = [1,2,3,4,5,6,7,8]\nm = 2\nn = 3\nprint(rotate_right(list1,m,n)) # Output: [6,7,8,1,2,3,4,5]\n\n# Write a function to reverse a list.\ndef reverse(list1):\n    return list1[::-1]\n# Example usage:\nlist1 = [1,2,3,4,5,6,7,8]\nprint(reverse(list1)) # Output: [8,7,6,5,4,3",
        "generated_testcode": "assert rotate_left([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],2) == [\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\"]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    return count\n\n# Example usage:\nmy_list = [1, -3, 5, 6, -2, 8, -9, 0, -12, 7]\nprint(neg_count(my_list)) # Output: 4\n```\n\nThis function simply iterates through the list and checks if each element is less than 0, and if so, it increments the count variable. At the end of the loop, it returns the count. ",
        "generated_testcode": "assert neg_count([]), 0\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Write your code here\n    words = re.findall(r'\\b\\w{3,5}\\b', text)\n    return words\n\n# Test the function with the given example\ntext = \"She sells seashells by the seashore. The shells she sells are surely seashells.\"\nprint(find_char(text)) # ['sells', 'seashells', 'seashore', 'shells', 'surely', 'seashells']\n\n# Test the function with a different example\ntext = \"The quick brown fox jumps over the lazy dog\"\nprint(find_char(text)) # ['quick', 'brown', 'jumps', 'lazy', 'dog']\n\n# Test the function with an empty string\ntext = \"\"\nprint(find_char(text)) # []\n\n# Test the function with a string with no words of length 3 to 5\ntext = \"1234567\"\nprint(find_char(text)) # []\n\n# Test the function with a string with only 1 character words\ntext = \"a b c d e f g h i j\"\nprint(find_char(text)) # [] ",
        "generated_testcode": "assert find_char(text) == ['this', 'is', 'a', 'test', 'string', 'with', 'words', 'of', 'different', 'lengths']\n\n# Test the function with the given text\ntext = \"this is a test string with words of different lengths\"\nprint(find_char(text))\n\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1\n        n &= (n-1) \n    return count \n  \n# Driver code \nn = 10\nprint(count_unset_bits(n)) ",
        "generated_testcode": "assert count_unset_bits(10) == 2\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\nprint(char_frequency(\"hello\"))\n# Output: {'h': 1, 'e': 1, 'l': 2, 'o': 1}\n\n# Using Counter\nfrom collections import Counter\ndef char_frequency(str1):\n    return Counter(str1)\nprint(char_frequency(\"hello\"))\n# Output: Counter({'l': 2, 'h': 1, 'o': 1, 'e': 1})\n\n# Using defaultdict\nfrom collections import defaultdict\ndef char_frequency(str1):\n    dict = defaultdict(int)\n    for n in str1:\n        dict[n] += 1\n    return dict\nprint(char_frequency(\"hello\"))\n# Output: defaultdict(<class 'int'>, {'h': 1, 'e': 1, 'l': 2, 'o': 1})\n# Note: In this case, the keys that don't exist in the dictionary are initialized with a value of 0. ",
        "generated_testcode": "assert char_frequency(input_string) == expected_output\n\n# Test the function with the following input and expected output:\ninput_string = \"hello world\"\nexpected_output = {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sub_li.sort(key = lambda x: x[1]) \n    return sub_li \n  \n# example usage\nli = [[4, 2], [3, 4], [2, 3], [1, 4], [5, 1]] \nprint(Sort(li)) ",
        "generated_testcode": "assert Sort(sub_li) == sorted(sub_li, key=lambda x: x[1])\n\n# The function should return a new list sorted by the second element in each sublist. ",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if(a+b>c and a+c>b and b+c>a): \n        return True\n    else:\n        return False\n\ndef main():\n    a=int(input(\"Enter the first side of triangle: \"))\n    b=int(input(\"Enter the second side of triangle: \"): \")\n    c=int(input(\"Enter the third side of triangle: \")\n    if(check_Validity(a,b,c)==True):\n        print(\"Valid Triangle\")\n    else:\n        print(\"Invalid Triangle\")\n\nif __name__==\"__main__\":\n    main()\n\n#Example Output\n#Enter the first side of triangle: 4\n#Enter the second side of triangle: 5\n#Enter the third side of triangle: 7\n#Valid Triangle\n\n#Enter the first side of triangle: 3\n#Enter the second side of triangle: 4\n#Enter the third side of triangle: 8\n#Invalid Triangle\n\n#Enter the first side of triangle: 10\n#Enter the second side of triangle: 20\n#Enter the third side of triangle: 20\n#Invalid Triangle\n\n#Enter the first side of triangle: 10\n#Enter the second side of triangle: 8\n#Enter the third side of triangle: 15\n#Valid Triangle ",
        "generated_testcode": "assert check_Validity(3,4,5) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    #calculate the last term of the series\n    nth_term = a + (n-1)*d\n    #return the sum of the series\n    return nth_term*(n/2)\n    \n#take input from user\na = int(input(\"Enter first term of the series: \"))\nn = int(input(\"Enter the number of terms in the series: \"))\nd = int(input(\"Enter the common difference: \"))\n#call the function and print the result\nprint(\"The sum of the arithmetic progression is: \", ap_sum(a,n,d)) ",
        "generated_testcode": "assert ap_sum(1,10,2) == 55\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if monthname1 == \"February\":\n        return True\n    else:\n        return False\n\nprint(check_monthnum(\"February\")) # should print True\nprint(check_monthnum(\"January\")) # should print False\n\n#Write a function to print the nth day of the month\ndef nth_day_of_month(day, month_num, year):\n    from datetime import date\n    from calendar import monthrange\n    year = int(year)\n    month_num = int(month_num)\n    day = int(day)\n    if day > monthrange(year, month_num)[1]:\n        return False\n    else:\n        return date(year, month_num, day).strftime(\"%A\")\n\nprint(nth_day_of_month(28, 2, 2022)) # should print 'Sunday'\nprint(nth_day_of_month(31, 4, 2022)) # should print 'False'\n\n#Write a function to check whether the given number is prime or not.\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7)) # should print True\nprint(is_prime(10)) # should print False\n\n#Write a function to check if a",
        "generated_testcode": "assert check_monthnum(monthname1='February') == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Check if a string ends with a word (with optional punctuation)\n\n    Args:\n        text (str): the input string\n\n    Returns:\n        bool: True if the string ends with a word (with optional punctuation), False otherwise\n    \"\"\"\n    # create a regex pattern for a word (letters) with optional punctuation\n    pattern = r\"[a-zA-Z]+[\\s]*[.,;!?]\"\n    # check if the pattern matches at the end of the string\n    if re.search(pattern + \"$\", text):\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_word(\"Hello, world!\")) # True\nprint(text_match_word(\"Python is fun!\")) # True\nprint(text_match_word(\"Python is fun\")) # False\nprint(text_match_word(\"Python is fun? \")) # True\nprint(text_match_word(\"Python is fun?\")) # True\nprint(text_match_word(\"Python is fun. \")) # True\nprint(text_match_word(\"Python is fun.\")) # True\nprint(text_match_word(\"Python is fun..\")) # False\nprint(text_match_word(\"Python is fun!!!\")) # False ",
        "generated_testcode": "assert text_match_word(text=\"Hello, world!\") == True\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    n = len(s)\n    for i in range(n): \n        for j in range(i + 1, n + 1): \n            if s[i] == s[j - 1]: \n                count += 1\n    return count \n  \n# Driver code \ns = \"geeksforgeeks\"\nprint(check_Equality(s)) ",
        "generated_testcode": "assert check_Equality(s = \"abcdcba\") == 2\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    max_divisor = 0\n    for i in range(1,x,1):  \n        if x % i == 0 and y % i == 0:  \n            if i > max_divisor:  \n                max_divisor = i  \n    return max_divisor\n  \n# Test the function  \nx = 100\ny = 200\nprint(\"Maximum divisor of\", x, \"and\", y, \"is\", find_Divisor(x,y)) ",
        "generated_testcode": "assert find_Divisor(10,20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    lst.sort()\n    return lst[0] + lst[1] + lst[2]\n\n# Example usage:\nprint(sum_three_smallest_nums([5, 8, 12, -5, 18, 0, -1, 7])) # Output: 14\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: 6\nprint(sum_three_smallest_nums([1, 2, 3, 4, 5, 6, 7])) # Output: 6\nprint(sum_three_smallest_nums([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])) # Output: 3",
        "generated_testcode": "assert sum_three_smallest_nums(lst=[5, 8, 12, 18, 21, 3, 9, 11]) == 21\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Convert set to list\n    s_list = list(s)\n    # Sort the list\n    s_list.sort()\n    # Convert the sorted list to a tuple\n    s_tuple = tuple(s_list)\n    return s_tuple\n\n# Test the function with an example set\ns = {1, 2, 3, 4, 5}\nprint(set_to_tuple(s))  # Output: (1, 2, 3, 4, 5)\n\n# Test the function with an empty set\ns = set()\nprint(set_to_tuple(s))  # Output: ()\n\n# Test the function with a set containing duplicate elements\ns = {2, 3, 4, 4, 5, 5}\nprint(set_to_tuple(s))  # Output: (2, 3, 4, 5) ",
        "generated_testcode": "assert set_to_tuple(set([1, 2, 3, 4]) == (1, 2, 3, 4)\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "       self.value = value\n        self.list_num = list_num\n        self.index = index\n\n    def __lt__(self, other):\n        return self.value < other.value\n\nclass Solution:\n    def smallestRange(self, nums: List[List[int]) -> List[int]:\n        from queue import PriorityQueue\n        max_val = nums[0][0]\n        min_val = nums[0][0]\n        for i in range(len(nums)):\n            max_val = max(max_val, nums[i][0])\n            min_val = min(min_val, nums[i][0])\n        \n        q = PriorityQueue()\n        q.put(Node(min_val, 0, 0) )\n        q.put(Node(max_val, len(nums)-1, 0) )\n        \n        res = [min_val, max_val]\n        \n        while not q.empty():\n            node = q.get()\n            if node.index == len(nums)-1:\n                return res\n            if node.list_num == node.index:\n                if node.value == min_val:\n                    min_val = nums[node.list_num][node.index+1]\n                    if max_val < min_val:\n                        max_val = min_val\n                        res = [min_val, max_val]\n                else:\n                    max_",
        "generated_testcode": "assert __init__(1, [1, 2, 3], 0) == (1, 3)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\n# Example usage:\nprint(dig_let(\"Hello123World\")) # Output: (2, 8)\n\n# Create a function to convert a string to all uppercase or lowercase\ndef to_upper(s, to_lower=False):\n    if to_lower:\n        return s.lower()\n    else:\n        return s.upper()\n\n# Example usage:\nprint(to_upper(\"Hello\")) # Output: HELLO\nprint(to_upper(\"Hello\", True)) # Output: hello\n\n# Create a function that checks if a string is a palindrome\ndef is_palindrome(s):\n    return s == s[::-1]\n\n# Example usage:\nprint(is_palindrome(\"racecar\")) # Output: True\nprint(is_palindrome(\"hello\")) # Output: False\n\n# Create a function to find the average of a list of numbers\ndef average(lst):\n    return sum(lst) / len(lst)\n\n# Example usage:\nprint(average([1, 2, 3, 4, 5, 6]) # Output: 3.0\n\n# Create a function to calculate the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n",
        "generated_testcode": "assert dig_let(12345) == (4, 0)\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n,m+1):\n        for j in range(1,int(i**0.5)+1):\n            if i%j == 0:\n                if i%j == 0 and j%2 != 0:\n                    count += 1\n    return count\n\nn,m = map(int,input().split())\nprint(count_Odd_Squares(n,m))\n",
        "generated_testcode": "assert count_Odd_Squares(1, 10) == 3\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty list to hold the differences\n    diffs = []\n    # Loop through the list with a for loop, starting from the second number\n    for i in range(1, len(nums)):\n        # Subtract each number from the previous one and append the result to the diffs list\n        diffs.append(nums[i] - nums[i-1])\n    # Return the list of differences\n    return diffs\n\n# Example usage:\nnumbers = [1, 5, 9, 13, 20, 25, 34, 42]\nprint(diff_consecutivenums(numbers)) # Output: [4, 4, 4, 5, 9]\n\n# Alternative solution using list comprehension\ndef diff_consecutivenums2(nums):\n    return [nums[i] - nums[i-1] for i in range(1, len(nums))]\n\nprint(diff_consecutivenums2(numbers)) # Output: [4, 4, 4, 5, 9] ",
        "generated_testcode": "assert diff_consecutivenums(range(1, 10)) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if k == 1:\n        return n\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return zigzag(n - 1, k) + k\n    else:\n        return zigzag(n - 1, k) - k\n\nprint(zigzag(10, 3))\n\n# Output: 27 ",
        "generated_testcode": "assert zigzag(5, 3) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i == j:\n                count += 1\n    return count\n\nm = int(input(\"Enter the length of rectangle: \"))\nn = int(input(\"Enter the breadth of rectangle: \"): \")\nprint(\"The number of squares in the rectangle is: \", count_Squares(m,n)) ",
        "generated_testcode": "assert count_Squares(3, 4) == 1\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [1] * (r + 1) \n    for i in range(1, n+1): \n        dp_new = [0] * (r + 1) \n        for j in range(1, r+1): \n            dp_new[j] = dp[j] + dp[j-1] \n        dp = dp_new \n    return dp[r] \n\ndef count_sequences(n, r): \n    return bin_coff(n+r, r) \n\ndef count_sequences_with_sum(n, r): \n    dp = [0] * (n+1) \n    dp[0] = 1\n    for i in range(1, n+1): \n        dp[i] = 1\n        for j in range(1, r+1): \n            if i >= j: \n                dp[i] += dp[i-j] \n    return dp[n] \n\ndef count_sequences_with_sum_and_given_prefix_sum(n, r, k): \n    dp = [0] * (n+1) \n    dp[0] = 1\n    for i in range(1, n+1): \n        dp[i] = 1\n        for j in range(1, r+1): \n            if i >= j: \n                dp[i",
        "generated_testcode": "assert bin_coff(5, 3) == 10\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in string :\n        if i != '0' and i != '1' :\n            return False\n    return True\n\nstring = input(\"Enter a string : \")\nif check(string) :\n    print(\"String is a binary string\")\nelse :\n    print(\"String is not a binary string\")\n\n#output\n#Enter a string : 10101010\n#String is a binary string\n#Enter a string : 1010102\n#String is not a binary string\n#Enter a string : 1101010101\n#String is a binary string\n#Enter a string : 1101010101010101010101010101010\n#String is a binary string\n#Enter a string : 10101010101010101010101010100\n#String is not a binary string\n#Enter a string : 0111010101010101010101011\n#String is not a binary string\n#Enter a string : 01101010101010101010101010\n#String is a binary string ",
        "generated_testcode": "assert check(string) == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    # Create a dictionary to store the count of each character in the string\n    count_dict = {}\n    for i in range(len(s)) :\n        if s[i] in count_dict :\n            count_dict[s[i]] += 1\n        else :\n            count_dict[s[i]] = 1\n    \n    # Sort the dictionary by values and get the most occurring character\n    max_char = max(count_dict, key=count_dict.get)\n    \n    # Remove the most occurring character from the string and return the length\n    return len(s) - count_dict[max_char]\n\n# Test the function\ns = \"ABBBCCCCCDEFFF\"\nprint(minimum_Length(s)) # Output: 5 (A or B can be removed, but not both)\ns = \"ABCDEFG\"\nprint(minimum_Length(s)) # Output: 6 (no character can be removed)\ns = \"AABBCCDD\"\nprint(minimum_Length(s)) # Output: 4 (B or C can be removed)\ns = \"AABBCCDDEE\"\nprint(minimum_Length(s)) # Output: 5 (E can be removed) ",
        "generated_testcode": "assert minimum_Length(s = \"aabcc\") == 3\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(n): \n        if arr.count(arr[i]) == k: \n            return arr[i] \n    return -1 \n\narr = [1,2,3,4,5,2,3,4,2,3,1,4,2,3] \nn = len(arr) \nk = 3\nprint(\"The element occurring\",k,\"times is\",first_Element(arr,n,k)) \n\n#Time Complexity: O(n^2) ",
        "generated_testcode": "assert first_Element(arr=[1,2,3,4,5,6,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,10],n=9,k=3) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty set to store unique characters\n    unique_set = set()\n    # Traverse through all characters of given string\n    for char in str:\n        # If character is already in set, then string is not unique\n        if char in unique_set:\n            return False\n        # If not, then add it to set\n        else:\n            unique_set.add(char)\n    # If all characters are unique, then return True\n    return True\n\n# Test the function with some examples\nprint(unique_Characters(\"abcd\"))  # Output: True\nprint(unique_Characters(\"abcde\"))  # Output: False\nprint(unique_Characters(\"abcabc\"))  # Output: False\nprint(unique_Characters(\"abc\"))  # Output: True\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert unique_Characters(input_string) == True/False\n\n# Test the function with the following input strings\ninput_string = \"abcdefg\"\ninput_string = \"hello\"\ninput_string = \"world\"\ninput_string = \"python\"\ninput_string = \"programming\"\ninput_string = \"abcdefgabc\"\ninput_string = \"abcdefg123\"\ninput_string = \"1234567890\"\ninput_string = \"AaBbCcDdEeFfGg\"\ninput_string = \"AaBbCcDdEeFg\"\n\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    new_list = []\n    for sub_list in list1:\n        new_sub_list = []\n        for i in range(len(sub_list)):\n            if i != n:\n                new_sub_list.append(sub_list[i])\n        new_list.append(new_sub_list)\n    return new_list\n\n# Test the function with an example\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nn = 1\nprint(remove_column(list1, n))  # Output: [[1, 3], [4, 6], [7, 9]]\n\n# Test the function with another example\nlist2 = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nn = 2\nprint(remove_column(list2, n))  # Output: [[1, 3], [5, 7], [9, 11]] ",
        "generated_testcode": "assert remove_column(list1, 1) == [[1, 3], [4, 6], [7, 9]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    tn = a+(n-1)*d\n    return tn\n\na = int(input(\"Enter the first term of the series: \"))\nn = int(input(\"Enter the value of n: \"))\nd = int(input(\"Enter the common difference: \"))\n\ntn = tn_ap(a,n,d)\nprint(\"The {}-th term of the series is: {}\".format(n,tn) )\n\n#Testing\n# a=1, n=10, d=2, tn=55\n# a=2, n=6, d=3, tn=30\n# a=5, n=4, d=-3, tn=-11\n# a=10, n=6, d=-2, tn=2\n# a=5, n=3, d=2, tn=17\n# a=1, n=5, d=5, tn=20\n# a=3, n=7, d=-1, tn=20\n# a=10, n=7, d=0, tn=0\n# a=0, n=7, d=1, tn=6\n# a=0, n=0, d=1, tn=0\n# a=0, n=0, d=-1, tn=0\n# a=0, n=5, d=0, tn=0\n# a=10, n=0, d=5, tn=0\n",
        "generated_testcode": "assert tn_ap(1,5,2) == 13\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = 1\n    count = 0\n    while (n * n) <= (2 * radius * radius):\n        for i in range(1, n+1):\n            if (n * i) <= 2 * radius:\n                count += 1\n        n += 1\n    return count\n    \n#Test the function\nprint(count_Rectangles(10)) # Output: 211\nprint(count_Rectangles(20)) # Output: 51\nprint(count_Rectangles(5))  # Output: 11\nprint(count_Rectangles(3))  # Output: 4\nprint(count_Rectangles(4))  # Output: 9\nprint(count_Rectangles(0))  # Output: 0 ",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 180 - a - b\n#Example usage:\n#print(find_angle(90, 30)) # Output: 60\n\n# Test your function with the following:\nprint(find_angle(30, 90)) # should output 120\nprint(find_angle(60, 40)) # should output 80\nprint(find_angle(45, 45)) # should output 90\nprint(find_angle(180, 50)) # should output 130\nprint(find_angle(90, 60)) # should output 30 ",
        "generated_testcode": "assert find_angle(30,60) == 90\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_value = test_list[0][2]\n    for i in range(len(test_list)):\n        if test_list[i][2] > max_value:\n            max_value = test_list[i][2]\n    return max_value\n\ntest_list = [(2, 3, 4), (5, 6, 7), (8, 9, 10), (1, 3, 5)]\nprint(find_max(test_list))\n\n# Output: 10\n\n#Explanation: The maximum element in the tuple records is 10, which is the third element of the third tuple (8, 9, 10). ",
        "generated_testcode": "assert find_max(test_list) == 10\n\n# test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n# print(find_max(test_list)) # Output: 12\n\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x%y,nums1,nums2))\n\n# Test the function\nnums1 = [10,20,30,40,50]\nnums2 = [5,4,3,2]\nprint(moddiv_list(nums1,nums2)) # [0,0,1,0]\n\n# Example 2:\n# Write a function to multiply two lists using map and lambda function.\ndef multiply_list(nums1,nums2):\n    return list(map(lambda x,y: x*y,nums1,nums2))\n\n# Test the function\nnums1 = [1,2,3,4,5]\nnums2 = [5,4,3,2]\nprint(multiply_list(nums1,nums2)) #[5,8,9,10]\n\n# Example 3:\n# Write a function to find the average of two lists using map and lambda function.\ndef avg_list(nums1,nums2):\n    return list(map(lambda x,y: (x+y)/2,nums1,nums2))\n\n# Test the function\nnums1 = [10,20,30,40,50]\nnums2 = [5,4,3,2]\nprint(avg_list(nums1,nums2)) #[7.5,15.0,20.0",
        "generated_testcode": "assert moddiv_list(list(range(1,10)),list(range(1,10))[::-1]) == [0,0,0,0,0,0,0,0,0,0,0,0]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if(b**2-4*a*c)<0:\n        return False\n    else:\n        return True\n\nprint(Check_Solution(1,2,3))  # returns True as both roots are same \nprint(Check_Solution(1,2,-3)) # returns False as roots are not same ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    if n == 1:\n        return \"We three kings\"\n    elif n == 2:\n        return \"We three queens\"\n    elif n == 3:\n        return \"We three kings and three queens\"\n    else:\n        return \"We three kings, \" + get_carol(n - 1) + \" and a king, \" + get_carol(n - 2) + \", \" + \"and a queen, \" + get_carol(n - 3)\n\nprint(get_carol(4))  # Output: \"We three kings, We three kings and three queens, and a king, We three queens and a queen\"\n\n# Write a function to convert decimal to binary\ndef decimal_to_binary(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return decimal_to_binary(n // 2) + (n % 2) * 10\n\nprint(decimal_to_binary(10)) # Output: 1010\n\n# Write a function to convert decimal to hexadecimal\ndef decimal_to_hex(n):\n    if n == 0:\n        return \"0\"\n    elif n <= 9:\n        return str(n)\n    else:\n        return chr(55 + n)\n\nprint(decimal_to_hex(10)) # Output: \"A\"\n\n# Write a",
        "generated_testcode": "assert get_carol(1) == \"We three kings\"\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for item in list1:\n        if item:\n            new_list.append(item)\n    return new_list\n\n# Test cases\nprint(remove_empty([[1, 2, 3], [], [4, 5], [6], []])  # Output: [[1, 2, 3], [4, 5], [6]]\nprint(remove_empty([[1, 2], [3, 4], [], [5, 6], [], [7, 8, 9]])  # Output: [[1, 2], [3, 4], [5, 6], [7, 8, 9]]\nprint(remove_empty([[], [], [1, 2, 3, 4], [], [5, 6, 7], [], [8, 9]])  # Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9]]\nprint(remove_empty([])  # Output: []\n\n# Explanation:\n# We create an empty list called new_list which will store the non-empty lists. \n# Then we loop through each item in the input list and check if it's empty or not. If it's not empty, we append it to new_list.\n# Finally, we return new_list which contains only the non-empty lists. ",
        "generated_testcode": "assert remove_empty([] == [])\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code goes here\n    max_count = 0\n    max_num = None\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n        if counts[num] > max_count:\n            max_count = counts[num]\n            max_num = num\n    return max_num\n\n# Test the function with the sample input\nnums = [1, 2, 3, 2, 2, 1, 3, 4, 5, 6, 5, 1, 4, 4, 4, 4, 4, 4]\nprint(max_occurrences(nums))  # Output: 4\n\n# Explanation: 4 occurs 5 times, which is the maximum count in the list, so it is returned as the output. ",
        "generated_testcode": "assert max_occurrences(nums=[1, 2, 3, 2, 4, 5, 2, 6, 3, 7, 8, 3, 9, 0, 2, 1]) == 2\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for element in test_list:\n        result.append(element+K)\n    return tuple(result)\n\ntest_list = (2, 4, 5, 7, 9, 10, 12)\nK = 3\nprint(add_K_element(test_list, K))\n# Output: (5, 7, 10, 12, 13, 15)\n\n# Define a function to multiply the first element of the tuple with the last element of the tuple.\ndef multiply_tuple(test_tuple):\n    result = test_tuple[0] * test_tuple[-1]\n    return result\n\ntest_tuple = (2, 4, 5, 7, 9, 10)\nprint(multiply_tuple(test_tuple))\n# Output: 20\n\n# Define a function to remove duplicates from a tuple.\ndef remove_duplicates(test_tuple):\n    result = []\n    for element in test_tuple:\n        if element not in result:\n            result.append(element)\n    return tuple(result)\n\ntest_tuple = (1, 2, 3, 4, 5, 4, 6, 2, 7, 8, 1, 9, 10)\nprint(remove_duplicates(test_tuple))\n# Output: (1, 2, 3, 4, 5, 6, 7, 8, ",
        "generated_testcode": "assert add_K_element(test_list=[1, 2, 3, 4, 5], K=2) == (3, 4, 5, 6)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(ch)\n    count = 0\n    for i in range(n-1): \n        if ch[i] == ch[i+1]: \n            count += 1\n    return count\n\n# Driver Code \nif __name__ == '__main__': \n    ch = input(\"Enter the binary string: \")\n    result = make_flip(ch)\n    print(\"Number of flips required to make the given binary string a sequence of alternate characters: \",result) ",
        "generated_testcode": "assert make_flip(ch = \"01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    while n > 0:\n        n = n // 10\n        count += 1\n    return count\n\n# Test the function\nprint(count_Digit(123456))  # Output: 4\nprint(count_Digit(123))  # Output: 3\nprint(count_Digit(12))  # Output: 2\nprint(count_Digit(1))  # Output: 1\nprint(count_Digit(0))  # Output: 1\n\n# Function to check if a number is prime or not\ndef is_Prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nprint(is_Prime(7))  # Output: True\nprint(is_Prime(10))  # Output: False\n\n# Function to calculate the factorial of a number\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Test the function\nprint(factorial(0))  # Output: 1\nprint(factorial(1))  # Output: 1\nprint(factorial(5))  # Output: 120\n\n# Function to check if a given",
        "generated_testcode": "assert count_Digit(12345) == 4\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_product = 0\n    for i in range(len(list_nums) - 1):\n        if list_nums[i] * list_nums[i+1] > max_product:\n            max_product = list_nums[i] * list_nums[i+1]\n    return max_product\n\n# Test cases\nprint(adjacent_num_product([3, 6, -2, -5, 7, 3])) # Output: 21\nprint(adjacent_num_product([-1, -2, 3, 4, 5, 2, 6])) # Output: 30\nprint(adjacent_num_product([1, 2, 3, 4, 5, 6, 7])) # Output: 35\nprint(adjacent_num_product([10, -10, 5, 2, -10])) # Output: 50\nprint(adjacent_num_product([1, 1, 1, 1, 1])) # Output: 1\nprint(adjacent_num_product([1, 2, 3, 4, -10, 5, 6, -7])) # Output: 42\nprint(adjacent_num_product([10, 2, -5, -3, 4, -2, 8])) # Output: 40\nprint(adjacent_num_product([-1, -1, -1, -1",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5, 6, 7, 8, 9] ) == 42\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\n# function to check if the tree is balanced\ndef isBalanced(root):\n    if root is None:\n        return True\n    left_height = height(root.left)\n    right_height = height(root.right)\n    if abs(left_height - right_height) <= 1 and isBalanced(root.left) and isBalanced(root.right):\n        return True\n    else:\n        return False\n\ndef height(node):\n    if node is None:\n        return 0\n    left_height = height(node.left)\n    right_height = height(node.right)\n    return max(left_height, right_height) + 1\n\n# function to construct a balanced binary tree\ndef balance(root):\n    if root is None:\n        return True\n    if balance(root.left) and balance(root.right):\n        return abs(height(root.left) - height(root.right)) <= 1\n    return False\n\n# function to construct an unbalanced binary tree\ndef unBalance(root):\n    if root is None:\n        return True\n    if unBalance(root.left):\n        return abs(height(root.left) - height(root.right)) >= 2 and unBalance(root.right)\n    return False\n\n# function to construct a binary tree\ndef createTree(arr):\n    if arr is",
        "generated_testcode": "assert __init__(1) == True\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = test_tup * N\n    return result\n\n\n# Test the function with the sample input\nprint(repeat_tuples((1, 2, 3), 3))  # Should output (1, 2, 3, 1, 2, 3, 1, 2, 3)\nprint(repeat_tuples(('hello', 'world', 42), 2))  # Should output ('hello', 'world', 42, 'hello', 'world', 42)\nprint(repeat_tuples((1.5, 'yes', 3.14), 1))  # Should output (1.5, 'yes', 3.14)\nprint(repeat_tuples(('', 0, (), None), 0) == ())  # Should output True\n\n# Test the function with edge cases\nprint(repeat_tuples((), 10))  # Should output ()\nprint(repeat_tuples((1,), 0))  # Should output ()\nprint(repeat_tuples((1,), -1) == ())  # Should output True\nprint(repeat_tuples(('hello', 'world', 42), 0) == ())  # Should output True\n\n# Test the function with invalid input\nprint(repeat_tuples('hello', 2) == ())  # Should output True\nprint(repeat_tuples(('hello', 2)) == ())  # Should output True\nprint(repeat_tuples(None, 5",
        "generated_testcode": "assert repeat_tuples(('a', 3) == ('a', 'a', 'a')\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*((2*l*w)+(2*w*h)+(2*h*l))\n\n# Test the function with an example\nprint(lateralsurface_cuboid(5,6,7)) # should return 106\n\n# Write a function to find the volume of cuboid\ndef volume_cuboid(l,w,h):\n    return l*w*h\n\n# Test the function with an example\nprint(volume_cuboid(5,6,7)) # should return 120\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    import math\n    return (4/3)*math.pi*(r**3)\n\n# Test the function with an example\nprint(volume_sphere(5)) # should return 523.6\n\n# Write a function to find the surface area of a sphere\ndef surface_sphere(r):\n    import math\n    return 4*math.pi*(r**2)\n\n# Test the function with an example\nprint(surface_sphere(5)) # should return 314.159\n\n# Write a function to find the area of a triangle\ndef area_triangle(base,height):\n    return 0.5*base*height\n\n# Test the function with an example\nprint(area_triangle(6,8)) # should return 24\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(length",
        "generated_testcode": "assert lateralsurface_cuboid(5, 5, 5) == 6 * 5 * 2 + 5 * 5 * 2 + 5 * 5 * 2\nprint(lateralsurface_cuboid(5, 5, 5)) # should output 60\n\n# Write a function to find the volume of a cuboid\ndef volume_cuboid(l,w,h):\n    pass\n\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sorted_price = sorted(price, key=lambda x: x[1])\n    return sorted_price\n\n# Example usage:\nprice = [('Apple', 1.5), ('Banana', 0.75), ('Orange', 2.0), ('Grapes', 0.5), ('Mango', 1.25)]\nprint(float_sort(price)) # Output: [('Banana', 0.75), ('Grapes', 0.5), ('Apple', 1.5), ('Mango', 1.25), ('Orange', 2.0)]\n\n# Example usage:\nprice = [('Car', 50000), ('Bicycle', 10000), ('Laptop', 30000), ('Motorcycle', 15000), ('Bus', 20000)]\nprint(float_sort(price)) # Output: [('Bicycle', 10000), ('Car', 50000), ('Motorcycle', 15000), ('Bus', 20000), ('Laptop', 30000)] ",
        "generated_testcode": "assert float_sort(('apple', 1.2) < float_sort(('banana', 0.5) < float_sort(('orange', 2.3)) < float_sort(('grape', 1.5)) < float_sort(('kiwi', 0.8)) < float_sort(('pear', 1.0)) < float_sort(('peach', 1.7)) < float_sort(('mango', 2.1)) < float_sort(('watermelon', 1.3)) < float_sort(('strawberry', 0.2)) < float_sort(('blueberry', 0.9)) < float_sort(('kiwi', 1.5)) < float_sort(('pear', 1.0)) < float_sort(('peach', 1.7)) < float_sort(('mango', 2.1)) < float_sort(('watermelon', 1.3)) < float_sort(('strawberry', 0.2)) < float_sort(('kiwi', 1.5)) < float_sort(('pear', 1.0)) < float_sort(('peach', 1.7)) < float_sort(('mango', 2.1)) < float_sor",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    if left_element == right_element:\n        return left_element + 1\n\n    middle = (left_element + right_element) // 2\n    if A[middle] == middle + 1:\n        return smallest_missing(A, middle + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, middle)\n\n\n# Test the function with example\nA = [0, 1, 2, 3, 4, 6, 7, 8, 9]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 5\n\nA = [0, 1, 2, 3, 4, 5, 6, 7, 8]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 9\n\nA = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 0\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 10]\nprint(smallest_missing(A, 0, len(A) - 1))  # Output: 9\n\nA = [1, 3, 4, 5, 7, 8, 10]",
        "generated_testcode": "assert smallest_missing(A, 0, len(A)-1) == 2\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    for i in range(len(nums) // 2 - 1, -1, -1):\n        heapify(nums, len(nums), i)\n    for i in range(len(nums) - 1, 0, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, i, 0)\n    return nums\n\ndef heapify(nums, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and nums[left] > nums[largest]:\n        largest = left\n    if right < n and nums[right] > nums[largest]:\n        largest = right\n    if largest != i:\n        nums[i], nums[largest] = nums[largest], nums[i]\n        heapify(nums, n, largest)\n\n# Test the function\nnums = [4, 1, 6, 7, 2, 8, 5, 3]\nprint(heap_assending(nums))\n",
        "generated_testcode": "assert heap_assending(nums) == sorted(nums)\n\n# Test the function with an example\nnums = [3, 1, 5, 2, 4, 6, 7, 8, 9, 10]\nprint(heap_assending(nums)) # should print [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return l*w*h\n\n# Test the function with an example\nprint(volume_cuboid(4,5,6)) # Output: 120\n\n# Define a function to find the area of a rectangle\ndef area_rectangle(l,w):\n    return l*w\n\n# Test the function with an example\nprint(area_rectangle(4,5)) # Output: 20\n\n# Define a function to find the area of a triangle\ndef area_triangle(b,h):\n    return (b*h)/2\n\n# Test the function with an example\nprint(area_triangle(4,5)) # Output: 10.0\n\n# Define a function to find the area of a circle\nimport math\ndef area_circle(r):\n    return math.pi*r*r\n\n# Test the function with an example\nprint(area_circle(5)) # Output: 78.53975\n\n# Define a function to find the circumference of a circle\ndef circumference_circle(r):\n    return 2*math.pi*r\n\n# Test the function with an example\nprint(circumference_circle(5)) # Output: 31.415916935424\n\n# Define a function to find the area of a sphere\ndef area_sphere(r):\n    return 4*math.pi*r*r*r\n\n# Test the function with an example\nprint(area_sphere(5)) # Output",
        "generated_testcode": "assert volume_cuboid(3,4,5) == 60\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    result = []\n    for i in range(len(str)):\n        char = str[i]\n        rem_str = str[:i] + str[i+1:]\n        for perm in permute_string(rem_str):\n            for j in range(len(perm)+1):\n                result.append(perm[:j] + char + perm[j:])\n    return result\n\n# Test the function\nstr = \"abc\"\nprint(permute_string(str)) # ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nstr = \"aab\"\nprint(permute_string(str)) # ['aab', 'aba', 'baa', 'aaa', 'aba', 'baa', 'aab', 'aba', 'baa']\n",
        "generated_testcode": "assert permute_string(str) == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n\n# Test the function with the given string 'abc' and verify that it returns the expected output. ",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return round(n / m) * m\n\n# Example usage:\nprint(round_num(23, 5))  # Output: 20\nprint(round_num(26, 5))  # Output: 25\nprint(round_num(17, 7))  # Output: 14\nprint(round_num(28, 10)) # Output: 30\n\n# Test your function with the examples above and see if it works. ",
        "generated_testcode": "assert round_num(10,5) == 10\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    #create an empty dictionary to store the count of occurrence of each element in the tuple\n    dic={}\n    #iterate through the tuple and count the occurrence of each element\n    for i in test_tup:\n        if i in dic:\n            dic[i]+=1\n        else:\n            dic[i]=1\n    #create an empty list to store the result\n    result=[]\n    #iterate through the tuple and append the non-duplicate elements to the result list\n    for i in test_tup:\n        if dic[i]==1:\n            result.append(i)\n        else:\n            result.append(None)\n            dic[i]=0\n    #return the result list as a tuple\n    return tuple(result)\n\ntest_tup=(1,2,3,4,5,6,2,3,7,8,9,2,10,1)\nprint(remove_replica(test_tup)) #should return (1,2,3,4,5,6,None,None,7,8,9,None,None,None)\n\n#OR\n\n#Using set() to remove duplicates\ndef remove_replica(test_tup):\n    return tuple(set(test_tup))\n\ntest_tup=(1,2,3,4,5,6,2,3,7,8,9,2,10,1)\nprint(remove_replica(test_tup)) #should return (1, 2,",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'a', 'd', 'e', 'c') == ('a', 'b', 'c', 'd', 'e', 'replaced')\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    return s.replace(c, \"\")\n\n# Test the function\ns = \"Hello World\"\nc = \"o\"\nprint(remove_Char(s,c)) ",
        "generated_testcode": "assert remove_Char(s=\"hello world\", c=\"l\") == \"heo word\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    last_element = test_list.pop()\n    test_list.insert(0, last_element)\n    return test_list\n\n# Test the function with sample input\ntest_list = [1, 2, 3, 4, 5]\nprint(move_first(test_list))\n\n# Output: [5, 1, 2, 3]\n\n# Explanation: The last element 4 is removed from the list and added to the beginning of the list to get [4, 1, 2, 3] which is then printed. ",
        "generated_testcode": "assert move_first([\"apple\", \"banana\", \"cherry\", \"orange\"]) == [\"orange\", \"apple\", \"banana\", \"cherry\"]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*((2*l*w) + (2*w*h) + (2*h*l))\n\nl=float(input(\"Enter the length of the cuboid: \"))\nw=float(input(\"Enter the width of the cuboid: \"):\nh=float(input(\"Enter the height of the cuboid: \")\nprint(\"The surface area of the cuboid is\",surfacearea_cuboid(l,w,h))\n\n# Write a function to calculate the volume of a cylinder\ndef volume_cylinder(r,h):\n    return 3.14*r*r*h\n\nr=float(input(\"Enter the radius of the cylinder: \")\nh=float(input(\"Enter the height of the cylinder: \")\nprint(\"The volume of the cylinder is\",volume_cylinder(r,h))\n\n# Write a function to calculate the volume of a sphere\ndef volume_sphere(r):\n    return (4/3)*3.14*r*r*r\n\nr=float(input(\"Enter the radius of the sphere: \")\nprint(\"The volume of the sphere is\",volume_sphere(r))\n\n# Write a function to find the area of a triangle\ndef triangle_area(base,height):\n    return 0.5*base*height\n\nbase=float(input(\"Enter the base of the triangle: \")\nheight=float(input(\"Enter the height of the triangle: \")\nprint(\"The area of the triangle is\",triangle_area",
        "generated_testcode": "assert surfacearea_cuboid(2,3,4) == 2*(2*3+2*4+3*4) + 2*2*3 + 2*3*4 + 2*4*4\n\n# The function should return 72, which is the sum of the areas of all six faces of the cuboid. ",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in range(rownum):\n        row = []\n        for j in range(colnum):\n            row.append(0)\n        result.append(row)\n    return result\n\n# Generate a 3x4 two-dimensional array and initialize all elements to 0\narray = multi_list(3,4)\n\n# Print the array\nfor row in array:\n    print(row)\n\n# Modify the array elements\nfor i in range(3):\n    for j in range(4):\n        array[i][j] = i*j\n\n# Print the modified array\nfor row in array:\n    print(row)\n\n# Access a specific element in the array\nprint(array[1][2]) ",
        "generated_testcode": "assert multi_list(3,4) == [[0,0,0,0],[0,0,0,0],[0,0,0,0]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(list_data, key=lambda x: x[index_no])\n\n\n# Example usage:\nlist_data = [[3, 1, 4], [1, 2, 3], [2, 4, 6], [5, 6, 7], [4, 2, 1]]\nsorted_list = index_on_inner_list(list_data, 1)\nprint(sorted_list)  # Output: [[1, 2, 3], [3, 1, 4], [4, 2, 1], [2, 4, 6], [5, 6, 7]]\n\n# Sort the list by the second index\nsorted_list = index_on_inner_list(list_data, 2)\nprint(sorted_list)  # Output: [[5, 6, 7], [1, 2, 3], [2, 4, 6], [3, 1, 4], [4, 2, 1]] ",
        "generated_testcode": "assert index_on_inner_list(list_data, 1) == sorted(list_data, key=lambda x: x[1])\n\n# Test the function with the following list_data\nlist_data = [\n    ['apple', 3, 'red'],\n    ['banana', 2, 'yellow'],\n    ['orange', 1, 'orange'],\n    ['grape', 4, 'purple']\n]\n\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(A)\n    low = 0\n    high = n-1\n    if A[low] < A[high]:\n        return 0\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] > A[0]:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n# Test the function\nA = [4, 5, 6, 7, 8, 9, 1, 2, 3]\nprint(find_rotation_count(A))  # Output: 4\n\nA = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_rotation_count(A))  # Output: 0\n\nA = [4, 5, 6, 7, 8, 9, 1, 2, 3]\nprint(find_rotation_count(A))  # Output: 4\n\nA = [7, 9, 10, 1, 2, 3, 4, 5, 6]\nprint(find_rotation_count(A))  # Output: 2\n\nA = [6, 7, 9, 10, 1, 2, 3, 4, 5]\nprint(find_rotation_count(A))  # Output: 5",
        "generated_testcode": "assert find_rotation_count(A) == 4\n\n# Test the function with an example array\nA = [4, 5, 6, 7, 8, 9, 10, 1, 2, 3]\nprint(find_rotation_count(A)) # Output: 4\n\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n ^ ((1 << n.bit_length()) - 1) \n  \n# Example usage: \nn = 5 \nprint(even_bit_toggle_number(n)) ",
        "generated_testcode": "assert even_bit_toggle_number(10) == 5\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    smallest = min(arr) \n    count = 0\n    for i in range(n): \n        if arr[i] == smallest: \n            count += 1\n    return count \n\n# Driver code \narr = [1, 2, 3, 4, 5, 2, 3, 1, 1, 4, 4, 4, 1, 2] \nn = len(arr) \nprint(frequency_Of_Smallest(n, arr)) ",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5,5]) == 1\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_perrin(n / 2) + 1\n    else:\n        return get_perrin((n * 3) + 1)\n\n\n# Test the function\nprint(get_perrin(1)) # Output: 1\nprint(get_perrin(2)) # Output: 2\nprint(get_perrin(3)) # Output: 4\nprint(get_perrin(4)) # Output: 5\nprint(get_perrin(5)) # Output: 11\nprint(get_perrin(6)) # Output: 13\nprint(get_perrin(7)) # Output: 23\nprint(get_perrin(8)) # Output: 34\nprint(get_perrin(9)) # Output: 55\nprint(get_perrin(10)) # Output: 89\nprint(get_perrin(11)) # Output: 144\nprint(get_perrin(12)) # Output: 233\nprint(get_perrin(13)) # Output: 377\nprint(get_perrin(14)) # Output: 610\nprint(get_perrin(15)) # Output: 987\nprint(get_perrin(16)) # Output: 1597\nprint(get_perrin(17)) # Output: 25",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    stack = []\n    open_brackets = \"({[\"\n    close_brackets = \")}]\"\n    open_count = 0\n    close_count = 0\n\n    for char in s:\n        if char in open_brackets:\n            stack.append(char)\n            open_count += 1\n        elif char in close_brackets:\n            if not stack:\n                close_count += 1\n            elif close_brackets.index(char) != open_brackets.index(stack.pop()):\n                open_count -= 1\n                close_count += 1\n\n    return open_count + close_count\n\n\ns = \"(){()[]{()}({[]})\"\nprint(swap_count(s))\n\n# Output: 1\n# Explanation:\n# The minimum number of swaps required to balance the brackets in the string is 1. \n# To balance the brackets, we can move the last closing bracket '}' to the second opening bracket position.\n# The balanced string would be: \"(){()[()]{}\" ",
        "generated_testcode": "assert swap_count(s) == 1\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return \"Even\" if int(N, 16) % 2 == 0 else \"Odd\"\n\n# Testing the function with a valid hexadecimal number\nprint(even_or_odd(\"0x1A\"))  # Output: Odd\n\n# Testing the function with an invalid hexadecimal number\nprint(even_or_odd(\"0xAG\"))  # Output: ValueError: invalid literal for int() with base 16: 'AG' ",
        "generated_testcode": "assert even_or_odd(0x1) == \"odd\"\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    power = 0\n    while(n > 1): \n        n = n // 2\n        power += 1\n    return 2 ** power \n\n# test the function \nprint(highest_Power_of_2(100)) # output should be 16\nprint(highest_Power_of_2(20)) # output should be 16\nprint(highest_Power_of_2(25)) # output should be 16\nprint(highest_Power_of_2(31)) # output should be 16\nprint(highest_Power_of_2(64)) # output should be 32\nprint(highest_Power_of_2(73)) # output should be 64 ",
        "generated_testcode": "assert highest_Power_of_2(10) == 8\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2) \n    return \n\n# Test the function\nprint(find_lucas(6)) # Output: 21\nprint(find_lucas(7)) # Output: 37\nprint(find_lucas(10)) # Output: 123\nprint(find_lucas(12)) # Output: 241\n\n# This function has a time complexity of O(2^n) which is very slow for large values of n. ",
        "generated_testcode": "assert find_lucas(0) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for item in list:\n        new_list.append(string + item)\n    return new_list\n\n#Example usage:\nmy_list = ['hello', 'world', 'python']\nnew_list = add_string(my_list, 'Hello, ')\nprint(new_list) # ['Hello, hello', 'Hello, world', 'Hello, python']\n\n# Function to remove duplicates from a list\ndef remove_duplicates(list):\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n\n# Example usage:\nmy_list = ['apple', 'banana', 'orange', 'apple', 'grape', 'banana']\nnew_list = remove_duplicates(my_list)\nprint(new_list) # ['apple', 'banana', 'orange', 'grape']\n\n# Function to remove even numbers from a list\ndef remove_even_numbers(list):\n    new_list = []\n    for item in list:\n        if item % 2 != 0:\n            new_list.append(item)\n    return new_list\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnew_list = remove_even_numbers(my_list)\nprint(new_list) # [1,",
        "generated_testcode": "assert add_string([\"apple\",\"banana\",\"cherry\"],\"fruit: \") == [\"fruit: apple\",\"fruit: banana\",\"fruit: cherry\"]\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    :param l1: list of keys\n    :param l2: list of values\n    :param l3: list of lists for nested keys\n    :return: dictionary with nested keys\n    \"\"\"\n    # Create a dictionary with l1 and l2\n    dictionary = dict(zip(l1, l2))\n    # Create a nested dictionary with l3\n    nested_dict = {}\n    for key, value in zip(l3[::2], l3[1::2]):\n        nested_dict[key] = value\n    # Update the dictionary with nested_dict\n    dictionary.update(nested_dict)\n    return dictionary\n\n\n# Example usage:\nlist1 = ['key1', 'key2', 'key3', 'key4']\nlist2 = ['value1', 'value2', 'value3', 'value4']\nlist3 = ['key3', ['key3.1', 'key3.2'], ['value3.1', 'value3.2']]\nprint(convert_list_dictionary(list1, list2, list3))  # {'key1': 'value1', 'key2': 'value2', 'key3': ['key3.1', 'key3.2'], 'key4': 'value4', 'key3.1': 'value3.1', 'key3.2': 'value3.2'}\n\n# Test your function with different lists\nlist1 = ['key1', 'key2', 'key3', 'key4']\nlist2 = ['value1', 'value",
        "generated_testcode": "assert convert_list_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3], [True, False, True]) == {\"a\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"b\": {\"1\": True, \"2\": False, \"3\": True}\n                                                                               \"c\": {\"1\": True, \"2\": False, \"3\": True}}\n\n# Test the function with the given input and expected output. ",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    if n % 2 == 0:\n        a = get_max_sum(n/2)\n    else:\n        a = -1\n    if n % 3 == 0:\n        b = get_max_sum(n/3)\n    else:\n        b = -1\n    if n % 4 == 0:\n        c = get_max_sum(n/4)\n    else:\n        c = -1\n    if n % 5 == 0:\n        d = get_max_sum(n/5)\n    else:\n        d = -1\n    return max(n,a,b,c,d)\n\n# Test the function\nprint(get_max_sum(12)) # Output: 12\nprint(get_max_sum(10)) # Output: 10\nprint(get_max_sum(15)) # Output: 15\nprint(get_max_sum(20)) # Output: 20\nprint(get_max_sum(30)) # Output: 30\nprint(get_max_sum(11)) # Output: 11\nprint(get_max_sum(35)) # Output: 35\nprint(get_max_sum(25)) # Output: 25\nprint(get_max_sum(5)) # Output: 5\nprint(get_max_sum(6)) # Output: 6\n",
        "generated_testcode": "assert get_max_sum (10) == 10\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return max(input_list, key=lambda x: len(x))\n\n# Test the function with the below list\nmy_list = [['Apple', 'Banana', 'Mango', 'Orange', 'Grapes', 'Cherry']]\nprint(max_length_list(my_list))\n\n# Output: ['Cherry']\n\n# Explanation: The length of the list with maximum elements is 'Cherry' with 5 elements. ",
        "generated_testcode": "assert max_length_list([\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]) == 5\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty set\n    set_tup = set()\n    \n    # Iterate over the tuple\n    for i in test_tup:\n        # If element already exists in set, return False\n        if i in set_tup:\n            return False\n        # If not, add the element to the set\n        else:\n            set_tup.add(i)\n    \n    # If all elements are distinct, return True\n    return True\n\n# Test the function with an example\nprint(check_distinct((1, 2, 3, 4, 5)) == True)\nprint(check_distinct((1, 2, 3, 3, 4, 5)) == False)\nprint(check_distinct((1, 2, 2, 3, 4) == False)\n```\n\nOutput:\n\n```\nTrue\nFalse\nFalse\n```\n\n### Remove duplicates from a tuple\n\nTo remove duplicates from a tuple, we can use a set and then convert it back to a tuple.\n\n```\ndef remove_duplicates(test_tup):\n    # Create an empty set\n    set_tup = set()\n    \n    # Iterate over the tuple\n    for i in test_tup:\n        set_tup.add(i)\n    \n    # Convert the set to a tuple\n    return tuple(set_tup)\n\n# Test the function with an example\nprint(remove_duplicates((1, 2, 3, ",
        "generated_testcode": "assert check_distinct(('a', 'b', 'c', 'd') == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None\n\n# Test the function with sample input\nprint(first_non_repeating_character(\"geeksforgeeks\"))  # Output: 'g'\nprint(first_non_repeating_character(\"hello\"))       # Output: 'h'\nprint(first_non_repeating_character(\"aabbcc\"))      # Output: None\nprint(first_non_repeating_character(\"aaabcc\"))     # Output: 'c' ",
        "generated_testcode": "assert first_non_repeating_character(input_string) == expected_output\n\n# Test the function with the following input and expected output\ninput_string = \"abcdabcdfegf\"\nexpected_output = \"e\"\n\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r\"^(.+)\\1$\"\n    if re.match(pattern, string):\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(check_char(\"aba\")) # Output: True\nprint(check_char(\"abcde\")) # Output: False\nprint(check_char(\"11\")) # Output: True\nprint(check_char(\"12321\")) # Output: True\nprint(check_char(\"12345\")) # Output: False\nprint(check_char(\"AA\")) # Output: True\nprint(check_char(\"AAB\")) # Output: False ",
        "generated_testcode": "assert check_char(string=\"hello\") == False\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    numbers = [a,b,c]\n    numbers.sort()\n    return numbers[1]\n\n#Test the function\nprint(median_numbers(1,5,3)) # Output: 3\nprint(median_numbers(3,1,5)) # Output: 3\nprint(median_numbers(10,2,7)) # Output: 7\nprint(median_numbers(-2,0,2)) # Output: 0\nprint(median_numbers(5,5,5)) # Output: 5\n\n# The function takes three numbers as arguments and returns the median of the three numbers. ",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    def sum_digit(num):\n        return sum(int(digit) for digit in str(num))\n\n    result = []\n    for num in nums:\n        result.append(sum_digit(num))\n    return result\n\n# Test the function with a sample input\nprint(sum_of_digits([123, 456, 789])) # should return [6, 18, 24]\nprint(sum_of_digits([100, 200, 3000])) # should return [1, 2, 3]\nprint(sum_of_digits([1011, 2022, 3033])) # should return [2, 4, 6]\n",
        "generated_testcode": "assert sum_of_digits(123) == 6\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create an empty tuple to store the result\n    result_tup = ()\n\n    # loop through each element of the tuples and perform the xor operation\n    for i in range(len(test_tup1)):\n        # perform the xor operation\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    # return the result\n    return result_tup\n\n\n# test the function with some inputs\ntest_tup1 = (23, 6, 7, 15)\ntest_tup2 = (13, 7, 3, 24)\nprint(bitwise_xor(test_tup1, test_tup2))  # should print (10, 1, 4, 23)\n\ntest_tup3 = (23, 24, 1, 9, 8)\ntest_tup4 = (13, 7, 24, 9, 8)\nprint(bitwise_xor(test_tup3, test_tup4))  # should print (10, 7, 1, 0, 0)\n\n# test the function with negative numbers\ntest_tup5 = (-23, 6, -7, 15)\ntest_tup6 = (13, -7, 3, -24)\nprint(bitwise_xor(test_tup5, test_tup",
        "generated_testcode": "assert bitwise_xor((1, 2, 3), (4, 5, 6)) == (5, 7, 2)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\ntest_list = [('apple', 'banana', 'cherry', 'apple', 'cherry', 'banana', 'banana')]\nprint(extract_freq(test_list))\n# {('apple', 2), ('banana', 3), ('cherry', 2)}\n# Since the order of the tuples is not important, the function should return the frequency of each unique tuple in the list. ",
        "generated_testcode": "assert extract_freq([\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"apple\", \"orange\", \"banana\", \"kiwi\"]) == {\"apple\": 3, \"banana\": 3, \"orange\": 2, \"kiwi\": 1}\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(test_tup1)):\n        temp_tup = ()\n        for j in range(len(test_tup1[i])):\n            temp_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result.append(temp_tup)\n    return tuple(result)\n\n# Example usage:\ntest_tup1 = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\ntest_tup2 = ((10, 20, 30), (40, 50, 60), (70, 80, 90))\nprint(add_nested_tuples(test_tup1, test_tup2))  # Output: ((11, 22, 33), (44, 55, 66), (77, 88, 99)) ",
        "generated_testcode": "assert add_nested_tuples(((1,2,3), (4,5,6), (7,8,9)), ((10,20,30), (40,50,60), (70,80,90)) ) == ((11,22,33), (44,55,66), (77,88,99))\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize ncr as 1\n    ncr = 1\n    # Initialize two pointers, i and j, to n and r\n    i = n\n    j = min(r, n-r)\n    # Calculate ncr using the formula ncr = (n*(n-1)*(n-2)*...(n-j+1)/(1*2*3*...*j)\n    while j > 0:\n        ncr = (ncr * i) % p\n        i -= 1\n        j -= 1\n    return ncr\n\n# Test the function with a sample input\nprint(ncr_modp(5, 2, 100)) # Output: 5\n\n# The value of 5! / (3! * 2!) is 5 * 4 * 3 / (3 * 2) = 5 * 2 = 10, which is 10 % 100 = 10 ",
        "generated_testcode": "assert ncr_modp(10, 5, 7) == 2\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain\n        r'localhost|'  # localhost\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, str) is not None\n\n\n# Example usage:\nprint(is_valid_URL('https://www.google.com'))  # True\nprint(is_valid_URL('https://www.google.com/'))  # True\nprint(is_valid_URL('http://www.google.com/search?q=test'))  # True\nprint(is_valid_URL('https://www.google.com/search?q=test&hl=en'))  # True\nprint(is_valid_URL('http://www.google.com:80000/test/'))  # True\nprint(is_valid_URL('google.com'))  # False\nprint(",
        "generated_testcode": "assert is_valid_URL(None) == False\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if a < b:\n        return a\n    else:\n        return b\nprint(minimum(5,2))\nprint(minimum(7,3))\nprint(minimum(-2,0))\n# Output: -2 \n\n# Define a function to find the maximum of two numbers\ndef maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\nprint(maximum(5,2))\nprint(maximum(7,3))\nprint(maximum(-2,0))\n# Output: 7 \n\n# Define a function to find the average of three numbers\ndef average(a,b,c):\n    return (a+b+c)/3\nprint(average(2,5,8))\n# Output: 5.0\n\n# Define a function to find the power of a number\ndef power(a,b):\n    return a**b\nprint(power(2,3))\n# Output: 8 \n\n# Define a function to check if a number is even or odd\ndef even_odd(a):\n    if a % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\nprint(even_odd(4))\n# Output: Even\n\n# Define a function to find the factorial of a number\ndef factorial(a):\n    if a == 0 or a == 1:\n        return 1\n    else:\n        return a*factorial(a-1)",
        "generated_testcode": "assert minimum(10, 5) == 5\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in tuplex: \n        if i == tuple1: \n            return True \n    return False \n  \n# create a tuple \ntuplex = (1, 2, 3, 4, 5) \n  \n# check for tuple1 \ntuple1 = (1, 2) \n  \nif check_tuplex(tuplex, tuple1): \n    print(\"Tuple exists\") \nelse: \n    print(\"Tuple doesn't exist\") \n  \n# check for tuple2 \ntuple2 = (6, 7) \n  \nif check_tuplex(tuplex, tuple2): \n    print(\"Tuple exists\") \nelse: \n    print(\"Tuple doesn't exist\") ",
        "generated_testcode": "assert check_tuplex(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'), 'x') == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        return \"Even\"\n    else: \n        return \"Odd\"\n  \n# Driver code \nnum = 10\nprint(find_Parity(num)) \n  \n# Output: Even ",
        "generated_testcode": "assert find_Parity(1) == \"Even\"\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    str_num = str(n)\n    num_list = sorted(str_num, reverse=True)\n    return int(\"\".join(num_list))\n\n# Test cases\nprint(rearrange_bigger(123456789))  # 9887654321\nprint(rearrange_bigger(4321))  # 4321\nprint(rearrange_bigger(1234))  # 4321\nprint(rearrange_bigger(531))  # 531\nprint(rearrange_bigger(100))  # 1\nprint(rearrange_bigger(12345678))  # 87654321\nprint(rearrange_bigger(1))  # 1\nprint(rearrange_bigger(232))  # 3232\nprint(rearrange_bigger(121))  # 211\nprint(rearrange_bigger(12))  # 21\nprint(rearrange_bigger(1234567890))  # 9887654321\nprint(rearrange_bigger(0))  # 0\nprint(rearrange_bigger(987654321))  # 987654321\nprint(rearrange",
        "generated_testcode": "assert rearrange_bigger(1234) == 4321\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    left = 0\n    right = len(nums2) - 1\n    pairs = []\n    while k > 0:\n        if nums1[-1] + nums2[right] < nums1[0] + nums2[left]:\n            pairs.append((nums1[-1], nums2[right]))\n            right -= 1\n        else:\n            pairs.append((nums1[0], nums2[left])\n            left += 1\n        k -= 1\n    return pairs\n\n# Test the function\nnums1 = [1, 7, 11]\nnums2 = [2, 4, 6]\nk = 3\nprint(k_smallest_pairs(nums1, nums2, k)) # Output: [(1, 2), (1, 4), (1, 6)]\n\nnums1 = [1, 1, 2]\nnums2 = [1, 2, 2]\nk = 2\nprint(k_smallest_pairs(nums1, nums2, k)) # Output: [(1, 1), (1, 1)]\n\nnums1 = [1, 1, 2, 3]\nnums2 = [1, 2, 4]\nk = 4\nprint(k_smallest_pairs(nums1, nums2, k)) #",
        "generated_testcode": "assert k_smallest_pairs(nums1=[1, 7, 11], nums2=[2, 4, 6], k=3) == [(1, 2), (1, 4), (1, 6), (7, 2), (7, 4), (7, 6), (11, 2), (11, 4), (11, 6)]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    list1.sort(key=lambda x: x[0])\n    min_product = float('inf')\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            min_product = min(min_product, list1[i][1] * list1[j][1])\n    return min_product\n\n# Test case\nprint(min_product_tuple([(5, 4), (3, 7), (2, 1), (8, 9), (6, 2), (1, 0)]))  # Output: 0\nprint(min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]))  # Output: 8\nprint(min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (10, 11)]))  # Output: 20\nprint(min_product_tuple([(10, 1), (1, 10)]))  # Output: 10\nprint(min_product_tuple([(1, 2)]))  # Output: 2\n",
        "generated_testcode": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)] ) == 24\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if type(listval[i]) == int or type(listval[i]) == float:\n                if listval[i] < minval:\n                    minval = listval[i]\n        return minval\n\n# Test the function with a sample list\nlst = [3, 'cat', 5.6, 2, 'dog', 8, 1, 7, 'elephant', 3.14]\nprint(min_val(lst)) # Output: 1\n\n# Test the function with an empty list\nlst = []\nprint(min_val(lst)) # Output: None\n\n# Test the function with a list of strings\nlst = ['apple', 'banana', 'cherry']\nprint(min_val(lst)) # Output: None\n\n# Test the function with a list of booleans\nlst = [True, False]\nprint(min_val(lst)) # Output: None\n\n# Test the function with a list of complex numbers\nlst = [3+4j, 5+6j, 7+8j]\nprint(min_val(lst)) # Output: None\n\n# Test the function with a list of mixed types\nlst = [3, 'cat', 5.6, 'dog', 1, 'elephant', 3.14, False]\nprint",
        "generated_testcode": "assert min_val([\"apple\", 1, 2, 3, \"banana\", 4, \"orange\", 5, \"grape\", 6, \"kiwi\", 7, \"strawberry\", 8, \"mango\", 9, \"pear\"]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return ''.join(word.capitalize() for word in word.split('_') if word)\n\n# Example usage:\nprint(snake_to_camel(\"hello_world\")) # Output: HelloWorld\nprint(snake_to_camel(\"python_is_awesome\")) # Output: PythonIsAwesome\nprint(snake_to_camel(\"the_quick_brown_fox_jumps_over_the_lazy_dog\")) # Output: TheQuickBrownFoxJumpsOverTheLazyDog ",
        "generated_testcode": "assert snake_to_camel(snake_case_string) == camel_case_string\n\n# Test the function with the following strings\nsnake_case_string = \"hello_world\"\ncamel_case_string = \"helloWorld\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [num for num in l if num % 2 == 0]\n\n# Test cases\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: [2, 4, 6, 8, 10]\nprint(remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # Output: [2, 4, 6, 8, 10, 12] ",
        "generated_testcode": "assert remove_odd([]), []\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [t[n] for t in list1]\n\n# Example usage:\nlst = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(extract_nth_element(lst, 1)) # Output: [2, 5, 8]\nprint(extract_nth_element(lst, 2)) # Output: [3, 6, 9]\n\n# Alternative solution:\ndef extract_nth_element(list1, n):\n    return list(map(lambda x: x[n], list1))\n\n# Example usage:\nlst = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(extract_nth_element(lst, 1)) # Output: [2, 5, 8]\nprint(extract_nth_element(lst, 2)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == [2, 5, 8]\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1:  \n        if i in list2:  \n            return True  \n    return False  \n  \nlist1 = [1, 2, 3, 4, 5]  \nlist2 = [2, 5, 6, 7, 8]  \n  \nif overlapping(list1, list2):  \n    print(\"Yes\")  \nelse:  \n    print(\"No\") ",
        "generated_testcode": "assert overlapping([\"apple\",\"banana\",\"orange\"],[\"banana\",\"grape\",\"kiwi\"]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        return max(arr[-1] * arr[-2], arr[-1] * arr[0])\n\nprint(max_Product([-10, -10, 1, 2, 3, 4, 5])) # Output: 50\nprint(max_Product([-10, -5, -5, 1, 2, 3, 4])) # Output: 20\nprint(max_Product([-10, 2, 3, 4, 5, 6])) # Output: 30\nprint(max_Product([-10, -5, -3, 0, 2, 3])) # Output: 30\nprint(max_Product([-10, -5, 2, 3, 4, 6])) # Output: 40\n\n# Time Complexity: O(nlogn) due to the sorting function\n# Space Complexity: O(1) as we are not using any extra space. ",
        "generated_testcode": "assert max_Product(arr=[-10, -10, 5, 2, 6]) == 500\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    if(n == 0 or n == 1 or n == 2):\n        return n\n    elif(n == 3):\n        return 3\n    else:\n        dp = [0] * (n+1)\n        for i in range(n+1):\n            dp[i] = float('inf')\n        dp[0] = 0\n        for i in range(1,n+1):\n            dp[i] = i\n        for j in range(2,n+1):\n            for i in range(1,j):\n                dp[j] = min(dp[j], dp[i]+dp[j-i])\n            dp[j] = min(dp[j], j+dp[j-1])\n        return dp[n]\n\n# Driver Code \nn = 4\nprint(breakSum(n)) ",
        "generated_testcode": "assert breakSum(10) == 10\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    common_element = set(Input[0])\n    for i in range(1, len(Input)): \n        common_element.intersection_update(Input[i]) \n    return list(common_element)\n  \n# Driver code \nInput = [(1, 2, 3, 4), (2, 4, 6, 7), (4, 8, 3), (1, 2, 9)] \nprint(\"Common element is :\", group_tuples(Input)) \n\n#Output: [2, 4]\n",
        "generated_testcode": "assert group_tuples([(1,2,3), (1,4,5), (1,6,7)] ) == 1\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_len = 0\n    max_sub_list = []\n    n = len(lst)\n    for i in range(n): \n        len_sub = 1\n        for j in range(i+1, n): \n            if lst[j] == lst[i]: \n                len_sub += 1\n            else: \n                break\n        if len_sub > max_len: \n            max_len = len_sub \n            max_sub_list = lst[i:j]\n    return max_sub_list\n  \n# Driver code \nlst = [1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 6] \nprint(\"Original list:\", lst)\nprint(\"Sublist with maximum length:\", Find_Max(lst)) ",
        "generated_testcode": "assert Find_Max([]), []\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    for num in list1:\n        total += round(num)\n    return total * len(list1)\n\n# example usage:\nprint(round_and_sum([2.7, 3.1, 4.6, 5.5, 6.7, 7.9, 8.1])) # should return 28\nprint(round_and_sum([1.5, 2.3, 4.6, 5.7, 6.9, 8.1, 9.2, 10.4])) # should return 40\nprint(round_and_sum([1.9, 2.9, 4.4, 5.1, 6.7, 8.5, 9.1, 10.2])) # should return 50\nprint(round_and_sum([1.2, 2.4, 4.2, 6.5, 7.7, 9.9, 10.1])) # should return 40\nprint(round_and_sum([1.8, 2.9, 4.2, 6.7, 8.1, 10.8, 11.2, 12.3])) # should return 60\n\n# Test the function with the given test cases\nassert round_and_sum([2.7, 3.1, 4.6, 5.5, 6.7, 7.9",
        "generated_testcode": "assert round_and_sum(list1=[1.5, 2.3, 3.6, 4.5, 5.7]) == 12\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i*i*i \n    return sum \n  \n# Taking input number of even numbers from the user \nn = int(input(\"Enter the number of even natural numbers: \")) \n  \n# calling the cube_Sum() function \nresult = cube_Sum(n) \n  \n# printing the cube sum \nprint(\"The cube sum of first\", n, \"even natural numbers is\", result) ",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return delimiter.join(test_tup)\n\n# Test the function with a tuple\ntest_tup = (\"Hello\", \"World\", \"Python\")\nprint(concatenate_tuple(test_tup))\n\n# Output: HelloWorldPython\n\n# Test the function with an empty tuple\ntest_tup = ()\nprint(concatenate_tuple(test_tup))\n\n# Output: ",
        "generated_testcode": "assert concatenate_tuple((\"hello\", \"world\", \"python\") == \"hello_world_python\")\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i**3\n    return sum / n \n  \n# take input from user \nn = int(input(\"Enter a number: \")) \n  \n# call the function to find average of cubes \naverage = find_Average_Of_Cube(n) \n  \n# print the result \nprint(\"Average of cubes of first\", n, \"natural numbers is\", average) \n  \n# test the function with example values \nprint(find_Average_Of_Cube(5)) # Output: 75.0 \nprint(find_Average_Of_Cube(10)) # Output: 2041.25 ",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 125.0\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0 or m == 0: \n        return 0\n    if m == 1: \n        return max(gold[0]) \n    if n == 1: \n        return max(gold[m-1]) \n    gold_excluding_last_row = get_maxgold(gold[:m-1], m, n-1) \n    gold_excluding_last_col = get_maxgold(gold[1:], m, n-1) \n    gold_excluding_last_row_and_col = get_maxgold(gold[1:m-1], m-1, n-1) \n    last_row = gold[m-1] \n    last_col = [gold[i][n-1] for i in range(m)] \n    last_row_and_col = [gold[i][n-1] for i in range(1, m)] \n    gold_in_last_col = gold[m-1][n-1] \n    max_gold = gold_excluding_last_row \n    for i in range(1, m): \n        if last_col[i] + gold_in_last_col > max_gold: \n            max_gold = last_col[i] + gold_in_last_col \n    for i in range(1, n): \n        if gold_excluding_last_col[i] + last",
        "generated_testcode": "assert get_maxgold(\n    [\n        [\n            [1, 3, 1, 5],\n            [2, 2, 4, 6],\n            [5, 0, 2, 3]\n        ], 3, 3\n    ) == 12\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n\n# Test the function with the sample tuple\nprint(extract_rear((\"hello\", \"world\", \"python\", \"programming\"))) # Output: ('o', 'd', 'n', 'g')\n\n# Test the function with an empty tuple\nprint(extract_rear(())) # Output: ()\n\n# Test the function with a single string tuple\nprint(extract_rear((\"python\")) # Output: ('n',) ",
        "generated_testcode": "assert extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\") == (3, 4, 5, 4)\n\n# Test the function with the given tuple\nprint(extract_rear((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")) ",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list1)): \n        for j in range(i+1, len(list1)): \n            if x in list1[i:j+1]: \n                count += 1\n    return count \nlist1 = [1, 2, 3, 4, 5, 6, 3, 7, 8, 3, 9] \nx = 3\nprint(count_element_in_list(list1, x)) ",
        "generated_testcode": "assert count_element_in_list([\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"apple\", \"orange\"], \"apple\") == 3\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(filter(lambda x: x % 2 != 0, nums))\n\n# Test the function\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9,10])) # [1, 3, 5, 7, 9]\nprint(filter_oddnumbers([0, 2, 4, 6, 8, 10])) # []\nprint(filter_oddnumbers([1, 3, 5, 7, 9])) # [1, 3, 5, 7, 9]\nprint(filter_oddnumbers([-1, 2, -3, 4, -5, 6, -7, 8, -9])) # [-1, 3, -5, -7, -9] ",
        "generated_testcode": "assert filter_oddnumbers(range(10)) == [1, 3, 5, 7, 9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    # match = re.search(r\"(\\d{4})-(\\d{2})-(\\d{2})\", dt)\n    # if match:\n    #     y, m, d = match.groups()\n    #     return f\"{d}-{m}-{y}\"\n    return re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\2-\\3-\\1\", dt)\n\n\nprint(change_date_format(\"2021-11-11\"))  # Output: 11-11-2021\nprint(change_date_format(\"2020-05-23\"))  # Output: 23-05-2020\nprint(change_date_format(\"2019-01-01\"))  # Output: 01-01-2019\nprint(change_date_format(\"2022-02-29\"))  # Output: 29-02-2022\nprint(change_date_format(\"2021-12-31\"))  # Output: 31-12-2021\nprint(change_date_format(\"2022-02-29\"))  # Output: 29-02-2022\n\n# You can test your function with different inputs\n# Make sure to test with valid and invalid inputs\n\n# Using datetime module\nfrom datetime",
        "generated_testcode": "assert change_date_format(2021-05-15) == \"15-05-2021\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n# example usage\nmy_list = [12, 3, 5, 6, 2, 7, 1, 8, 3, 9, 4]\nprint(shell_sort(my_list))  # Output: [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 12] ",
        "generated_testcode": "assert shell_sort(my_list) == sorted(my_list)\n\n# Test the function with an example\nmy_list = [3, 1, 4, 2, 5, 6, 7, 8, 9, 0, 10, 11, 12, 13, 14, 15]\nprint(shell_sort(my_list)) # should print [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i], test_tup2[i])\n    return result\n\n# Test the function with sample inputs\ntup1 = (1, 2, 3)\ntup2 = (4, 5, 6)\nprint(and_tuples(tup1, tup2))  # Output: (1, 4, 2, 5, 3, 6)\n\ntup1 = ('a', 'b', 'c')\ntup2 = (1, 2, 3)\nprint(and_tuples(tup1, tup2))  # Output: ('a', 1, 'b', 2, 'c', 3)\n\ntup1 = (True, False)\ntup2 = (0, 1)\nprint(and_tuples(tup1, tup2))  # Output: (True, 0, False, 1)\n\ntup1 = ('Hello',)\ntup2 = ()\nprint(and_tuples(tup1, tup2))  # Output: ('Hello',) ",
        "generated_testcode": "assert and_tuples(('a', 'b', 'c'), (1, 2, 3)) == ('a', 1, 'c', 2, 'b', 3)\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return -a/2\n\n#Write a function to find the vertex of a parabola. \ndef parabola_vertex(a, b, c, x_vertex): \n    return (b/2*a, -c/a)\n\n#Write a function to find the focus of a parabola. \ndef parabola_focus(a, x_vertex): \n    return (x_vertex, (a**2 - b**2)/2*c) \n\n#Write a function to find the equation of a parabola.\ndef parabola_eqn(a, b, c, x_vertex): \n    return f\"{a} (x - {x_vertex})^2 + {b} x + {c} = 0\" ",
        "generated_testcode": "assert parabola_directrix(1, 10, -15) == 1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # iterate through list1 and check if each element is in list2\n    for element in list1:\n        if element in list2:\n            return True\n    # if no common elements are found, return False\n    return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7]\nprint(common_element(list1, list2)) # Output: True\n\nlist1 = [1, 2, 3, 4]\nlist2 = [6, 7, 8]\nprint(common_element(list1, list2)) # Output: False\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8]\nprint(common_element(list1, list2)) # Output: False\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = []\nprint(common_element(list1, list2)) # Output: False ",
        "generated_testcode": "assert common_element([\"apple\", \"banana\", \"cherry\"], [\"orange\", \"grape\", \"apple\"]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    area = 0.5*(base1+base2)*height\n    return area\n\n# Test the function with a sample input\nprint(median_trapezium(10,12,3)) # Output: 60.0\n\n# Define a function to find the area of a trapezium\ndef area_trapezium(base1,base2,height):\n    area = 0.5*(base1+base2)*height\n    return area\n\n# Test the function with a sample input\nprint(area_trapezium(10,12,3)) # Output: 60.0\n\n# Define a function to find the perimeter of a trapezium\ndef perimeter_trapezium(base1,base2):\n    perimeter = base1+base2\n    return perimeter\n\n# Test the function with a sample input\nprint(perimeter_trapezium(10,12)) # Output: 22\n\n# Define a function to find the surface area of a trapezium\ndef surface_area_trapezium(base1,base2,height):\n    area = 0.5*(base1+base2)*height\n    return area\n\n# Test the function with a sample input\nprint(surface_area_trapezium(10,12,3)) # Output: 60.0\n\n# Define a function to find the volume of a trapezium\ndef volume_trapezium(base1,base2,height,slant_height):\n    volume",
        "generated_testcode": "assert median_trapezium(10, 20, 5) == 12.5\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    for i in arr:\n        if number > i:\n            return True\n        else:\n            return False\n\n\narr = [10, 20, 30, 40, 50]\nnumber = 25\n\nprint(check_greater(arr, number))  # Output: False\n\narr = [10, 20, 30, 40, 50]\nnumber = 60\n\nprint(check_greater(arr, number))  # Output: True\n\n# Output: False ",
        "generated_testcode": "assert check_greater(arr=[1, 2, 3, 4, 5], number=6) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    pattern = \"ab+\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"abc\")) # True\nprint(text_match_one(\"ac\")) # False\nprint(text_match_one(\"a\")) # False\nprint(text_match_one(\"abb\")) # True\nprint(text_match_one(\"bbb\")) # True\n\n# Write a function that matches a string that has one or more b's followed by an a.\ndef text_match_two(text):\n    pattern = \"b+a\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match_two(\"ab\")) # False\nprint(text_match_two(\"abc\")) # False\nprint(text_match_two(\"ac\")) # False\nprint(text_match_two(\"a\")) # False\nprint(text_match_two(\"abb\")) # True\nprint(text_match_two(\"bbb\")) # False\n\n# Write a function that matches a string that starts with \"Hello\" and ends with \"world\".\ndef text_match_three(text):\n    pattern = \"^Hello.*world$\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test cases",
        "generated_testcode": "assert text_match_one(r'ab') == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n % 10\n\n#Test the function\nprint(last_Digit(12345)) #Output: 5\nprint(last_Digit(123456)) #Output: 6\nprint(last_Digit(1234567)) #Output: 7\nprint(last_Digit(12345678)) #Output: 8\nprint(last_Digit(123456789)) #Output: 9\n\n#This function returns the last digit of the given number. ",
        "generated_testcode": "assert last_Digit(1234) == 4\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    neg_nums = []\n    for i in list1:\n        if i < 0:\n            neg_nums.append(i)\n    return neg_nums\n\n#test the function\nlst = [1, -2, 3, -4, 5, -6, 7, -8]\nprint(neg_nos(lst)) ",
        "generated_testcode": "assert neg_nos(list1=[1,2,-3,4,5,-6,7,8,9,-10]) == [-3,-6,-10]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # define an empty string to hold the even characters\n    even_str = \"\"\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is even\n        if ord(char) % 2 == 0:\n            # add it to the even_str string\n            even_str += char\n    return even_str\n\n# Test the function\nprint(remove_odd(\"aBcDeFgHiJkLmNoPqRsTuVwXyZ\")) # \"acegikmoqsuw\"\nprint(remove_odd(\"Hello, world!\")) # \"Hlowrd\"\nprint(remove_odd(\"123456789\")) # \"\"\nprint(remove_odd(\"Python\")) # \"Phno\"\n\n# Write a function to reverse a string\ndef reverse_string(str1):\n    return str1[::-1]\n\n# Test the function\nprint(reverse_string(\"hello\")) # \"olleh\"\nprint(reverse_string(\"Python\")) # \"nohtyP\"\nprint(reverse_string(\"racecar\")) # \"racecar\"\n\n# Write a function to count the number of words in a string\ndef count_words(str1):\n    # split the string into a list of words\n    words = str1.split()\n    # return the length of the list\n    return len(words)\n\n# Test the function\nprint(count_words(\"Hello world\")) # 2\nprint(count_words(\"The quick brown",
        "generated_testcode": "assert remove_odd(None) == None\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create an empty dictionary\n    d = {}\n    # create an empty list to store the count of tuples\n    count_list = []\n    # loop through the list\n    for tup in test_list:\n        # if the tuple is not in the dictionary, add it and set the value to 1\n        if tup not in d:\n            d[tup] = 1\n        # if the reverse of the tuple is not in the dictionary, add it and set the value to 1\n        if (tup[1], tup[0]) not in d:\n            d[(tup[1], tup[0])] = 1\n        else:\n            # increment the count for the existing tuple and its reverse\n            d[tup] += 1\n            d[(tup[1], tup[0])] += 1\n    # loop through the dictionary and add the count to the count_list\n    for tup in d:\n        count_list.append(d[tup])\n    return count_list\n\n# test the function\ntest_list = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5), (7, 8), (8, 7), (1, 2), (2, 1), (3, 4), (4, 3), (5, 6), (6, 5)]\nprint(count_bidirectional(test_list)) # output: [2",
        "generated_testcode": "assert count_bidirectional([\"apple\", \"banana\", \"orange\", \"kiwi\", \"pear\", \"kiwi\"]) == 1\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for i in L:\n        result += str(i)\n    return int(result)\n\n# Test the function with some examples\nprint(multiple_to_single([1, 2, 3, 4, 5]))  # Output: 12345\nprint(multiple_to_single([10, 20, 30]))     # Output: 102030\nprint(multiple_to_single([2, 4, 6, 8]))     # Output: 2468 ",
        "generated_testcode": "assert multiple_to_single(1) == 1\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # initialize an empty list to store adverbs and their positions\n    adverbs = []\n    # split the text into words\n    words = text.split()\n    # iterate through the words\n    for i in range(len(words)):\n        # check if the word is an adverb\n        if words[i] in adverbs_list:\n            # if it is, append it to the list with its position\n            adverbs.append((words[i], i))\n    return adverbs\n\n# example usage\ntext = \"He walked quickly to the store.\"\nprint(find_adverb_position(text))  # output: [('quickly', 2)]\n\ntext = \"She danced gracefully and happily to the music.\"\nprint(find_adverb_position(text))  # output: [('gracefully', 1), ('happily', 3)]\n\ntext = \"The lion did not roar loudly.\"\nprint(find_adverb_position(text))  # output: [('not', 2), ('loudly', 3)]\n\ntext = \"The man swam quickly and skillfully.\"\nprint(find_adverb_position(text))  # output: [('quickly', 2), ('skillfully', 3)]\n\n# adverbs list\nadverbs_list = ['quickly', 'happily', 'gracefully', 'loudly', 'skillfully', 'slowly', 'well', 'badly', 'quick', '",
        "generated_testcode": "assert find_adverb_position(text) == [(0, 'quickly'), (10, 'slowly')]\n\n# Test the function with the following text\ntext = \"The dog ran quickly and then slowly stopped.\"\nprint(find_adverb_position(text)) # should output [(0, 'quickly'), (10, 'slowly')]\n\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 6*l*l\n\n# Test cases\nprint(surfacearea_cube(3)) # should return 54\nprint(surfacearea_cube(4)) # should return 96\nprint(surfacearea_cube(6)) # should return 216\n\n# Explanation:\n# We can find the surface area of a cube by multiplying the length of one of its sides by 6, as a cube has six faces with the same length. \n# Therefore, we can multiply the length of the cube by 6 and then multiply by itself twice to get the surface area. ",
        "generated_testcode": "assert surfacearea_cube(3) == 54\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n\n# Test the function with an example array\nnums = [1, 2, -3, 4, -1, 0, 5]\nprint(positive_count(nums)) # should return 0.6\n\n# Test the function with a different array\nnums = [0, -1, -2, -3, -4, -5]\nprint(positive_count(nums)) # should return 0.0\n\n# Test the function with an empty array\nnums = []\nprint(positive_count(nums)) # should return 0.0\n\n# Test the function with an array of all zeros\nnums = [0, 0, 0, 0]\nprint(positive_count(nums)) # should return 0.0\n\n# Test the function with an array of all positive numbers\nnums = [1, 2, 3, 4, 5]\nprint(positive_count(nums)) # should return 1.0\n\n# Test the function with an array of all negative numbers\nnums = [-1, -2, -3, -4, -5]\nprint(positive_count(nums)) # should return 0.0\n\n# Test the function with an array of all the same number\nnums = [1, 1, ",
        "generated_testcode": "assert positive_count(nums=[1, -2, 3, 4, -5, 6, -7]) == 3/5\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    largest_neg = None\n    for num in list1: \n        if num < 0:\n            if largest_neg is None or num > largest_neg: \n                largest_neg = num \n    return largest_neg \n  \nlist1 = [-2, -5, 0, -8, -3, -1, 10, -12, -7] \nprint(\"Largest negative number in the list:\", largest_neg(list1)) \n\n# Output: Largest negative number in the list: -12 ",
        "generated_testcode": "assert largest_neg([-1, 2, -3, 4, -5, 6, -7, 8, -9] ) == -1\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for tup in test_list:\n        new_tup = tuple(elem for elem in tup if elem % K != 0)\n        result.append(new_tup)\n    return result\n\ntest_list = [(1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17), (18, 19, 20, 21, 22, 23, 24)]\nK = 5\nprint(trim_tuple(test_list, K)) ",
        "generated_testcode": "assert trim_tuple(test_list=[(1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == (4, 5, 6, 7, 8, 9, 10)\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n\n# test the function with sample input\ntest_tup1 = (2, 4, 6, 8, 10)\ntest_tup2 = (3, 5, 7, 11, 13)\nprint(index_multiplication(test_tup1, test_tup2))  # Output: (6, 20, 42, 840)\n\n\n# Alternative Solution\ndef index_multiplication(tup1, tup2):\n    return tuple(i*j for i,j in zip(tup1, tup2))\n\n# test the function with sample input\ntest_tup1 = (2, 4, 6, 8, 10)\ntest_tup2 = (3, 5, 7, 11, 13)\nprint(index_multiplication(test_tup1, test_tup2))  # Output: (6, 20, 42, 840) \n\n# Explanation:\n# The function uses the zip() function to iterate over both tuples in parallel and multiply the elements at the same index and return a new tuple. ",
        "generated_testcode": "assert index_multiplication((1, 2, 3, 4, 5), (5, 6, 7, 8)) == (5, 12, 21, 32)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = {}\n    for i in tup:\n        for j in lst:\n            if i == j:\n                if i in count:\n                    count[i] += 1\n                else:\n                    count[i] = 1\n    return count\n\ntup = (1,2,3,4,5,6,7,8,9)\nlst = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\nprint(count_Occurrence(tup, lst)) \n# Output: {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2} \n\ndef count_Occurrence(tup, lst): \n    count = {}\n    for i in lst:\n        if i in tup:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n    return count\n\ntup = (1,2,3,4,5,6,7,8,9)\nlst = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\nprint(count_Occurrence(tup, lst)) \n# Output: {1:",
        "generated_testcode": "assert count_Occurrence(('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'), ['a', 'b', 'c', 'd']) == (4, 3, 3, 3)\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x**3, nums))\nprint(cube_nums([1,2,3,4,5,6])) #[1,8,27,64,125]\n\n# Write a function to calculate the sum of individual elements in a list using lambda function.\ndef sum_nums(nums):\n    return reduce(lambda x,y: x+y, nums)\nprint(sum_nums([1,2,3,4,5,6])) #15\n\n# Write a function to find the maximum element in a list using lambda function.\ndef max_num(nums):\n    return reduce(lambda x,y: x if x>y else y, nums)\nprint(max_num([1,2,3,4,5,6])) #6\n\n# Write a function to find the minimum element in a list using lambda function.\ndef min_num(nums):\n    return reduce(lambda x,y: x if x<y else y, nums)\nprint(min_num([1,2,3,4,5,6])) #1\n\n# Write a function to find the length of a list using lambda function.\ndef len_nums(nums):\n    return reduce(lambda x,y: x+1, nums, 0)\nprint(len_nums([1,2,3,4,5,6])) #5\n\n# Write a function to calculate the factorial of a number using lambda function.\ndef factor",
        "generated_testcode": "assert cube_nums(range(1, 6)) == [1, 8, 27, 64, 125, 216]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    i = 1\n    while i <= n: \n        sum += i \n        i += 3\n    return sum\n\ndef calculatePerrinNumbers(n):\n    if n == 1:\n        return 1\n    else:\n        return calculatePerrinNumbers(n-1) + cal_sum(n-1) + 1\n\n# Test the function\nn = 10\nprint(\"The sum of first\", n, \"Perrin numbers is\", calculatePerrinNumbers(n)) ",
        "generated_testcode": "assert cal_sum(1) == 1\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if ((x1*y2)+(x2*y3)+(x3*y1)-(y1*x2)-(y2*x3)-(y3*x1))!=0: #calculate determinant of triangle\n        return True\n    else:\n        return False\n\ndef main(): \n    x1 = int(input(\"Enter first point x: \"))\n    y1 = int(input(\"Enter first point y: \"): \n    x2 = int(input(\"Enter second point x: \"))\n    y2 = int(input(\"Enter second point y: \"): \n    x3 = int(input(\"Enter third point x: \"))\n    y3 = int(input(\"Enter third point y: \"): \n    if(check_Triangle(x1,y1,x2,y2,x3,y3):\n        print(\"Triangle is valid\")\n    else:\n        print(\"Triangle is not valid\")\n\nif __name__ == '__main__': \n    main() ",
        "generated_testcode": "assert check_Triangle(0,0,0,0,3,3) == True\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    result = []\n    for s in str:\n        if count == l:\n            break\n        result.append(s)\n        count += 1\n    return result\n\n# Testing the function with sample inputs\nprint(extract_string(['apple', 'banana', 'orange', 'kiwi', 'grape'], 3))  # Output: ['apple', 'banana', 'orange']\nprint(extract_string(['dog', 'cat', 'bird', 'lion', 'tiger'], 1))  # Output: ['dog']\nprint(extract_string(['car', 'train', 'bus', 'bike', 'boat', 'carriage'], 0))  # Output: []\nprint(extract_string(['elephant', 'monkey', 'giraffe', 'zebra', 'lion', 'kangaroo'], 4))  # Output: ['elephant', 'monkey', 'giraffe', 'zebra', 'lion'] ",
        "generated_testcode": "assert extract_string([\"hello\", \"world\", \"python\", \"programming\"], 3) == [\"hel\", \"wor\", \"pro\"]\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    text = re.sub(r'\\s+', '', text1)\n    return text\n\n# Test the function with sample input\nprint(remove_whitespaces(\"This is a sample string\"))\n# Output: \"Thisisasamplestring\"\n\n\n# Write a function to check if the given string has only alphabets, digits and special characters\ndef check_alphanumeric(string):\n    return bool(re.match(\"^[a-zA-Z0-9!@#$%^&*()_+\\-={};:,<.>/?[\\]|\\\\`~]*$\", string))\n\n# Test the function with sample input\nprint(check_alphanumeric(\"abc123!@#\")) # True\nprint(check_alphanumeric(\"abc 123!@#\")) # False\n\n# Write a function to check if the given string has only alphabets\ndef check_alpha(string):\n    return bool(re.match(\"^[a-zA-Z]*$\", string))\n\n# Test the function with sample input\nprint(check_alpha(\"abc\")) # True\nprint(check_alpha(\"abc123\")) # False\n\n# Write a function to check if the given string has only digits\ndef check_digit(string):\n    return bool(re.match(\"^[0-9]*$\", string))\n\n# Test the function with sample input\nprint(check_digit(\"123456\")) # True\nprint(check_digit(\"abc123\")) #",
        "generated_testcode": "assert remove_whitespaces(text1) == \"Thisisastringwithoutspaces\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else: \n        return None\n\n#Test the function \nprint(loss_amount(1000, 80)) # 20 \nprint(loss_amount(200, 300)) # None ",
        "generated_testcode": "assert loss_amount(10000, 800) == 200\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        if (n % i == 0): \n            sum += i \n    return sum\n\nn = int(input(\"Enter a number: \")\nfactors = sumofFactors(n)\nprint(\"Sum of factors of\", n, \"is\", factors) ",
        "generated_testcode": "assert sumofFactors(12) == 16\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    result = re.findall(r'\\w*z\\w*', text)\n    return result\n\n# Example usage:\ntext_match_wordz(\"The quick brown fox jumps over the lazy dog\")  # Output: ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\ntext_match_wordz(\"Python is an interpreted, high-level programming language\")  # Output: ['Python', 'interpreted', 'high-level', 'programming', 'language']\ntext_match_wordz(\"Hello world!\")  # Output: ['Hello', 'world']\ntext_match_wordz(\"\")  # Output: []\n```\n\nThis function uses the `re.findall()` method to match all words in the given `text` that contain the letter 'z'. The `\\w*` matches any word character zero or more times before and after the 'z'. This will match any word that has a 'z' in it. The function returns a list of all the matched words. ",
        "generated_testcode": "assert text_match_wordz([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"orange\", \"strawberry\", \"zebra\"]) == [\"cherry\", \"elderberry\", \"kiwi\", \"zebra\"]\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    # We will use the following list to check the number of days in a month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30, 31]\n    # We will use the modulo operator to find out if the month number is valid or not\n    if monthnum2 >= 1 and monthnum2 <= 12:\n        if days_in_month[monthnum2 - 1] == 31:\n            return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\"\n\n# Testing the function\nprint(check_monthnumb_number(2))  # True\nprint(check_monthnumb_number(6))  # False\nprint(check_monthnumb_number(13))  # Invalid month number\n",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Test cases\nprint(reverse_string_list([\"hello\", \"world\", \"python\", \"is\", \"awesome\"])) # Output: [\"olleh\", \"dlrow\", \"nohtyp\", \"si\", \"emosewa\"]\nprint(reverse_string_list([\"racecar\", \"google\", \"apple\", \"hello\"])) # Output: [\"racecar\", \"elgoog\", \"elppa\"]\nprint(reverse_string_list([\"hello\"])) # Output: [\"olleh\"]\nprint(reverse_string_list([])) # Output: []\n\n# This function works by iterating through each string in the input list, and appending its reverse (using slicing with a step of -1) to the output list. ",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_sublist = [] \n    min_length = len(lst) \n    for i in range(len(lst)): \n        for j in range(i + 1, len(lst) + 1): \n            sublist = lst[i:j] \n            if len(sublist) < min_length and all(sublist[0] <= elem <= sublist[-1] for elem in sublist): \n                min_sublist = sublist \n                min_length = len(sublist) \n    return min_sublist \n  \n# example usage \nlst = [1, 3, 5, 7, 9, 2, 4, 6, 8, 10] \nprint(Find_Min(lst)) ",
        "generated_testcode": "assert Find_Min([]), []\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return l*b\nprint(rectangle_area(5,4))  # Expected output: 20\n\n# Define a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n    return 2*(l+b)\nprint(rectangle_perimeter(5,4))  # Expected output: 18\n\n# Define a function to find the area of a triangle.\ndef triangle_area(base,height):\n    return (base*height)/2\nprint(triangle_area(6,8))  # Expected output: 24\n\n# Define a function to find the area of a circle.\ndef circle_area(radius):\n    return 3.14*(radius**2)\nprint(circle_area(5))  # Expected output: 78.5\n\n# Define a function to find the circumference of a circle.\ndef circle_circumference(radius):\n    return 2*3.14*radius\nprint(circle_circumference(5))  # Expected output: 31.4159\n\n# Define a function to find the area of a sphere.\ndef sphere_area(radius):\n    return 4/3*3.14*(radius**3)\nprint(sphere_area(5))  # Expected output: 523.6\n\n# Define a function to find the surface area of a cone.\ndef cone_surface_area(radius,height):\n    return 3.1",
        "generated_testcode": "assert rectangle_area(5, 10) == 50\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    return re.sub(r'[A-Z]+', '', str1)\n\n# Example usage:\nstr1 = \"HelloWorld\"\nprint(remove_uppercase(str1)) # Output: \"HelloWorld\"\n\nstr2 = \"Hello World\"\nprint(remove_uppercase(str2)) # Output: \"Hello World\"\n\nstr3 = \"HELLO world\"\nprint(remove_uppercase(str3)) # Output: \"HELLO world\"\n\nstr4 = \"HEllo WORLD\"\nprint(remove_uppercase(str4)) # Output: \"HEllo WORLD\"\n\nstr5 = \"Hello123World\"\nprint(remove_uppercase(str5)) # Output: \"Hello123World\" ",
        "generated_testcode": "assert remove_uppercase(None) == None\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = [sublist[0] for sublist in lst] \n    return result\n\n#Example usage:\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(Extract(lst))\n#Output: [1, 4, 7] ",
        "generated_testcode": "assert Extract([[1,2,3],[4,5,6],[7,8,9]] ) == [1,4,7]\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n\n# Test the function\nprint(upper_ctr(\"Hello World\")) # Output: 2\nprint(upper_ctr(\"hello world\")) # Output: 0\nprint(upper_ctr(\"HELLO WORLD\")) # Output: 8 \nprint(upper_ctr(\"Python Programming\")) # Output: 2 ",
        "generated_testcode": "assert upper_ctr(input_string) == expected_output\n\n# Test the function with the following input and expected output:\ninput_string = \"Hello World\"\nexpected_output = 2\n\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result\n\n# Example usage:\nprint(combinations_list([1,2,3,4])) # [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nprint(combinations_list([1,2,3,4,5])) # [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\nprint(combinations_list([])) # []\nprint(combinations_list([1])) # [] ",
        "generated_testcode": "assert combinations_list([\"a\", \"b\", \"c\"]) == [(\"a\", \"b\"), (\"a\", \"c\"), (\"b\", \"c\")]\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if not arr:\n        return 0\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n\n\n# Test the function with some sample inputs\nprint(max_subarray_product([2, 3, -2, -1, 4]))  # Output: 6 (Subarray: [2, -2, -1])\nprint(max_subarray_product([-2, 0, -1]))  # Output: 0 (Subarray: [0])\nprint(max_subarray_product([-2, 3, -4]))  # Output: -2 (Subarray: [-2])\nprint(max_subarray_product([-2, 3, 0, -1, -4]))  # Output: 24 (Subarray: [-2, 3, -4])\nprint(max_subarray_product([1, 2, 3, 4, 5]))  # Output: 60 (Subarray: [1, 2, 3, 4",
        "generated_testcode": "assert max_subarray_product(arr=[-1, -2, 3, 4, -5, 8, -2, 1, -3, 6]) == 168\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    values = set()\n    for value in dict.values():\n        if value not in values:\n            values.add(value)\n        if len(values) > 1:\n            return False\n    return True\n\n# Test the function\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 1}\nprint(check_value(my_dict, 3)) # Should print False\nmy_dict = {\"a\": 1, \"b\": 1, \"c\": 1}\nprint(check_value(my_dict, 3)) # Should print True\nmy_dict = {\"a\": 1}\nprint(check_value(my_dict, 1)) # Should print True\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\ndef check_value(dict, n):\n    if len(dict.values()) == 1:\n        return True\n    return False\n\n# Test the function\nmy_dict = {\"a\": 1, \"b\": 2, \"c\": 1}\nprint(check_value(my_dict, 3)) # Should print False\nmy_dict = {\"a\": 1, \"b\": 1, \"c\": 1}\nprint(check_value(my_dict, 3)) # Should print True\nmy_dict = {\"a\": 1}\nprint(check_value(my_dict, 1)) # Should print True ",
        "generated_testcode": "assert check_value(dict, 3) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Removes keys from a dictionary that have an empty value (i.e. \"\").\n\n    :param dict1: dictionary\n    :return: dictionary with empty items removed\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v != \"\"}\n\n# Test the function with an example dictionary\nmy_dict = {\"name\": \"John\", \"age\": 30, \"city\": \"\", \"job\": \"Developer\"}\nprint(drop_empty(my_dict))  # Output: {'name': 'John', 'age': 30}\n\n# Test the function with another example dictionary\nmy_dict2 = {\"name\": \"John\", \"age\": \"\", \"city\": \"\", \"job\": \"Developer\"}\nprint(drop_empty(my_dict2))  # Output: {'job': 'Developer'}\n\n# Test the function with an empty dictionary\nmy_dict3 = {\"name\": \"\", \"age\": \"\", \"city\": \"\", \"job\": \"\"}\nprint(drop_empty(my_dict3))  # Output: {}\n\n# Test the function with a dictionary without any empty items\nmy_dict4 = {\"name\": \"John\", \"age\": 30, \"city\": \"New York\", \"job\": \"Developer\"}\nprint(drop_empty(my_dict4))  # Output: {'name': 'John', 'age': 30, 'city': 'New York', 'job': 'Developer'} ",
        "generated_testcode": "assert drop_empty(dict1) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if high == low: \n        return high \n    if high == 1: \n        return low \n    mid = (low + high) // 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid] >= arr[mid + 1]): \n        return mid \n    if mid > 0 and arr[mid - 1] > arr[mid]: \n        return find_peak_util(arr, low, mid - 1, n) \n    return find_peak_util(arr, mid + 1, high, n) \n\ndef find_peak(arr, n): \n    return find_peak_util(arr, 0, n - 1, n) \n\n# Driver code \narr = [1, 3, 20, 1, 4, 5] \nn = len(arr) \nprint(\"Index of a peak point is: \", find_peak(arr, n)) \n\n# Output: Index of a peak point is: 2 ",
        "generated_testcode": "assert find_peak_util(arr, 0, n-1, n) == 1\n\n# Test the function with some sample inputs\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nn = len(arr)\nprint(find_peak_util(arr, 0, n-1, n)) # Output: 6\n\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    octal = \"\"\n    while deciNum > 0:\n        octal = str(deciNum % 8) + octal\n        deciNum //= 8\n    return octal\n\n# Test the function with a decimal number\ndecimal = 24\nprint(\"Decimal to Octal conversion:\", decimal_to_Octal(decimal))\n\n\n# Output: Decimal to Octal conversion: 32\n\n# Explanation: 24 in octal is 32. \n# The function multiplies the decimal number by 8 and extracts the remainder, \n# which is 4, and appends it to the octal number. It then divides the decimal number by 8 and moves to the next digit. \n# 3 * 8 is 24, so the remainder is 4, and the octal number becomes 4. \n# The decimal number is now 6. \n# 6 divided by 8 is 0 with a remainder of 6, so the octal number becomes 46. \n# The decimal number is now 0, so the loop ends. The final octal number is 46. ",
        "generated_testcode": "assert decimal_to_Octal(10) == '12'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 2:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_product_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] < max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = arr[i] * max_ending_here\n        max_product_ending_here = max(max_product_ending_here, max_ending_here)\n        max_so_far = max(max_so_far, max_product_ending_here)\n    return max_so_far\n    \nn = int(input(\"Enter the size of the array: \"))\narr = []\nprint(\"Enter the elements of the array: \")\nfor i in range(n):\n    arr.append(int(input())\nprint(\"The maximum product of the increasing subsequence is:\", max_product(arr, n)) ",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5], 4) == 20\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a profit array to store the profit for each day\n    profit = [0] * len(price)\n    # Initialize the minimum price to infinity\n    min_price = float('inf')\n    for i in range(1, len(price)):\n        # Update the minimum price\n        min_price = min(min_price, price[i])\n        # Calculate the profit for each day\n        profit[i] = max(profit[i-1], price[i] - min_price)\n\n    # Calculate the maximum profit for k transactions\n    # Create a trans_profit array to store the maximum profit for each day\n    trans_profit = [0] * len(price)\n    max_profit = 0\n    for i in range(1, len(price)):\n        # Update the maximum profit for each day\n        max_profit = max(max_profit, profit[i])\n        # Update the trans_profit array with the maximum profit for each day\n        trans_profit[i] = max(trans_profit[i-1], max_profit)\n\n    return trans_profit[-1]\n\n# Test the function with sample inputs\nprice = [10, 22, 5, 75, 65, 80, 40]\nk = 2\nprint(max_profit(price, k))  # Output: 87\n\nprice = [2, 30, 15, 10, 8, ",
        "generated_testcode": "assert max_profit(price=[10, 22, 5, 75, 65, 30, 80], k=2) == 87\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    res = []\n    for i in range(len(test_tup)):\n        res.append(test_tup[i][0] + test_tup[i][1])\n    return res\n\n\n# Test the function with the given tuple\ntest_tup = ((1, 2), (3, 4), (5, 6))\nprint(add_pairwise(test_tup))\n\n# Output: [3, 7, 11]\n\n# Explanation: The function takes a tuple of tuples as input and iterates through the outer tuple, adding the corresponding elements of each inner tuple and appends the result to a new list. ",
        "generated_testcode": "assert add_pairwise((1, 2, 3) ) == (3, 4, 5)\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize sum as 0\n    sum = 0\n    # iterate over the array and calculate the sum of array elements\n    for i in range(0, lens): \n        sum += arr[i] \n    # return the sum modulo n \n    return sum % n\n\n# test the function\narr = [12, 34, 54, 2, 6, 78, 12] \nlens = len(arr) \nn = 13\nprint(\"Remainder is \", find_remainder(arr, lens, n)) ",
        "generated_testcode": "assert find_remainder(arr=[1, 2, 3, 4, 5], lens=4, n=2) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(l)-1): \n        if l[i+1] - l[i] != 1: \n            return False\n    return True\n  \n# Driver code \nl = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(check_Consecutive(l)) # Output: True ",
        "generated_testcode": "assert check_Consecutive([]), False\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(set(test_list1) & set(test_list2))\n\n\n# test the function\nprint(tuple_intersection((1, 2, 3, 4), (3, 4, 5)))  # should return (3, 4)\nprint(tuple_intersection((3, 4, 5), (1, 2, 3, 4)))  # should return (3, 4)\nprint(tuple_intersection((1, 2, 3, 4), (5, 6, 7, 8)))  # should return ()\nprint(tuple_intersection((), (1, 2, 3, 4)))  # should return ()\nprint(tuple_intersection((1, 2, 3, 4), ()))  # should return () ",
        "generated_testcode": "assert tuple_intersection(('a', 'b', 'c', 'd'), ('c', 'd', 'e', 'f')) == ('c', 'd')\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_str=''\n    for i in str1:\n        if i==ch:\n            new_str+=newch\n        else:\n            new_str+=i\n    return new_str\n\n# Test the function\nprint(replace_char(\"hello world\",'l','k'))\nprint(replace_char(\"hello world\",'o','x'))\nprint(replace_char(\"hello world\",'o',''))\nprint(replace_char(\"hello world\",\" \",\"\"))\nprint(replace_char(\"hello world\",\"hello\",\"world\"))\n\n\n# Output:\n# hkekko worlkd\n# hellx worlx\n# he\n# world\n# worlxd\n\n# We can see that the function is working as expected. It replaces the character given in the input with the new character in the string and returns the new string. If the new character is empty, it simply removes the character. If the character to be replaced is the entire string, it returns an empty string. ",
        "generated_testcode": "assert replace_char(str1=\"hello world\",ch=\"o\",newch=\"0\") == \"hell0 w0rld\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # sort the dictionary by values in descending order\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n\n    # create a new dictionary in sorted order\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict\n\n# create a counter\ndict1 = {'a': 3, 'b': 5, 'c': 2, 'd': 1, 'e': 4, 'f': 5}\n\n# sort the counter by values\nsorted_dict = sort_counter(dict1)\nprint(sorted_dict)\n\n# output: {'b': 5, 'e': 4, 'f': 5, 'a': 3, 'c': 2, 'd': 1}\n\n# create another counter\ndict2 = {'x': 1, 'y': 0, 'z': 4, 'a': 2, 'b': 0}\n\n# sort the counter by values\nsorted_dict2 = sort_counter(dict2)\nprint(sorted_dict2)\n\n# output: {'z': 4, 'a': 2, 'x': 1, 'y': 0, 'b': 0} ",
        "generated_testcode": "assert sort_counter(Counter({'a': 3, 'b': 2, 'c': 1, 'd': 4, 'e': 1}) == Counter({'e': 1, 'c': 1, 'a': 3, 'b': 2, 'd': 4})\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(nums) == 0:\n        return 0\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return (largest, smallest)\n\n# Test the function with some sample inputs\nprint(big_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) # should return (10, 1)\nprint(big_sum([5, 4, 3, 2, 1, 10, 11])) # should return (11, 1)\nprint(big_sum([5, 4, 3, 2, 1, -1])) # should return (5, -1)\nprint(big_sum([])) # should return (0, 0)\n\n# ",
        "generated_testcode": "assert big_sum(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == (45, 45)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return string.islower()\n\n# Test the function with the example\nprint(is_lower(\"python\"))  # Output: True\nprint(is_lower(\"PYTHON\"))  # Output: False\nprint(is_lower(\"Python\"))  # Output: False\nprint(is_lower(\"PYTHON is a programming language\"))  # Output: False\n\n# Write a function to convert the given string to upper case.\ndef to_upper(string):\n    return string.upper()\n\n# Test the function with the example\nprint(to_upper(\"python\"))  # Output: PYTHON\nprint(to_upper(\"PYTHON\"))  # Output: PYTHON\nprint(to_upper(\"Python\"))  # Output: PYTHON\nprint(to_upper(\"PYTHON is a programming language\"))  # Output: PYTHON IS A PROGRAMMING LANGUAGE\n\n# Write a function to count the occurrences of a given substring in a string\ndef count_substring(string, sub_string):\n    count = 0\n    index = 0\n    while True:\n        index = string.find(sub_string, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count\n\n# Test the function with the example\nprint(count_substring(\"Python is a programming language\", \"o\"))  # Output: 2\nprint(count_substring(\"Python is a programming language\", \"python\"))  # Output: 0\nprint(",
        "generated_testcode": "assert is_lower(None) == False\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for char in str1:\n        if char.islower():\n            continue\n        else:\n            result += char\n    return result\n\n# Test cases\nprint(remove_lowercase(\"Hello World!\")) # Output: \"HW!\"\nprint(remove_lowercase(\"aBcDeF\")) # Output: \"BDF\"\nprint(remove_lowercase(\"12345\")) # Output: \"\"\nprint(remove_lowercase(\"\")) # Output: \"\" ",
        "generated_testcode": "assert remove_lowercase(None) == None\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    while n >= 10 : \n        n //= 10\n    return n\n\n# Test the function\nn = 12345\nprint(\"First digit of\", n, \"is\", first_Digit(n)) \n\n# Output: First digit of 12345 is 1\n\nn = 789\nprint(\"First digit of\", n, \"is\", first_Digit(n)) \n\n# Output: First digit of 789 is 7\n\nn = 9\nprint(\"First digit of\", n, \"is\", first_Digit(n)) \n\n# Output: First digit of 9 is 9 ",
        "generated_testcode": "assert first_Digit(12345) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # initialize dictionary\n    char_dict = {}\n    # loop through string\n    for char in str1:\n        # if character is already in dictionary, increment count\n        if char in char_dict:\n            char_dict[char] += 1\n        # else add character to dictionary with count of 1\n        else:\n            char_dict[char] = 1\n    # initialize max_char and max_count to first character in string\n    max_char = str1[0]\n    max_count = 1\n    # loop through dictionary and update max_char and max_count if necessary\n    for key, value in char_dict.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n    # return max_char\n    return max_char\n\n# test the function\nprint(get_max_occuring_char(\"hello world\")) # should print \"l\"\nprint(get_max_occuring_char(\"Python is awesome\")) # should print \"o\"\nprint(get_max_occuring_char(\"Mississippi\")) # should print \"i\"\nprint(get_max_occuring_char(\"abcd\")) # should print \"a\"\nprint(get_max_occuring_char(\"abcdefgh\")) # should print \"a\"\n\n# output:\n# l\n# o\n# i\n# a\n# a ",
        "generated_testcode": "assert get_max_occuring_char(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"hello\"\nexpected_output = \"l\"\n\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a table to store solutions of subproblems\n    table = [[False for _ in range(sum+1)] for _ in range(n+1)]\n\n    # Initialize the table with all false values\n    for i in range(n+1):\n        table[i][0] = True\n\n    # Fill the table in bottom up manner\n    for i in range(1, n+1):\n        for j in range(1, sum+1):\n            table[i][j] = table[i-1][j]\n            if set[i-1] <= j:\n                table[i][j] = table[i][j] or table[i-1][j-set[i-1]]\n\n    return table[n][sum]\n\ndef subset_sum(set, n, target_sum):\n    # Initialize a list to store the subset\n    subset = []\n    # Start from the last element\n    i = n-1\n    while i >= 0 and target_sum != 0:\n        if table[i+1][target_sum] != table[i][target_sum]:\n            subset.append(set[i])\n            target_sum -= set[i]\n        i -= 1\n\n    return subset\n\ndef main():\n    set = [3, 34, 4, 12, 5, 2, 11, 1, 10]\n    target_sum = 9\n    n = len(set)\n    if is_subset",
        "generated_testcode": "assert is_subset_sum(set([3, 34, 4, 12, 5, 2], 9) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(r'[A-Z][a-z]+')\n    match = pattern.findall(text)\n    return match\n\n#Example usage:\nprint(match('hello World')) #Output: ['World']\nprint(match('Python is an interpreted language')) #Output: ['Python', 'interpreted', 'language']\nprint(match('The quick brown fox jumps over the lazy dog')) #Output: []\n```\n\nThe function `match()` uses the `re` module to find all sequences of one upper case letter followed by lower case letters in a given string. It uses the `findall()` method to find all occurrences of the pattern and returns a list of matches. The pattern `[A-Z][a-z]+` matches any upper case letter followed by one or more lower case letters. ",
        "generated_testcode": "assert match(text=\"Hello world\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 1\n    while True:\n        if x % factorial(count) == 0:\n            return count\n        count += 1\n        \ndef factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * factorial(n-1) \n\n# Example usage:\nprint(first_Factorial_Divisible_Number(25)) # Output: 6\nprint(first_Factorial_Divisible_Number(12)) # Output: 4\nprint(first_Factorial_Divisible_Number(18)) # Output: 6\nprint(first_Factorial_Divisible_Number(24)) # Output: 4\nprint(first_Factorial_Divisible_Number(36)) # Output: 8\nprint(first_Factorial_Divisible_Number(48)) # Output: 8\nprint(first_Factorial_Divisible_Number(64)) # Output: 8\nprint(first_Factorial_Divisible_Number(5040)) # Output: 12",
        "generated_testcode": "assert first_Factorial_Divisible_Number(10) == 6\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in test_list1:\n        if i not in test_list2:\n            result.append(i)\n    return result\n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\ntest_list2 = [(1, 2), (3, 4)]\n\nprint(remove_matching_tuple(test_list1, test_list2))\n\n# Output: [(5, 6), (7, 8), (9, 10)]\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert remove_matching_tuple(test_list1, test_list2) == [(1, 2, 3), (4, 5, 6)]\n\n# The function should return [(1, 2, 3), (4, 5, 6)] as the output. ",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    n = str(n)\n    return n == n[::-1]\n\ndef largest_palindrome(arr):\n    max_palindrome = 0\n    for i in arr:\n        if is_palindrome(i) and i > max_palindrome:\n            max_palindrome = i\n    return max_palindrome\n\narr = [1232, 456, 12321, 123, 121, 4554, 1232321, 11111, 1234]\nprint(largest_palindrome(arr)) #Output: 12321\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert is_palindrome(12321) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    \"\"\" \n        Returns the value of C(n, r) \n    \"\"\" \n    if (r > n): \n        return 0\n    else: \n        return fact(n) // (fact(r) * fact(n-r)) \n  \ndef fact(n): \n    \"\"\" \n        Returns the factorial of n \n    \"\"\" \n    return 1 if (n == 0 or n == 1) else n * fact(n-1) \n  \n# binomial distribution with parameters n and p \ndef binomial(n, p, x): \n    \"\"\" \n        Returns the probability of x successes in n trials with probability p \n    \"\"\" \n    return nCr(n, x) * (p ** x) * (1 - p) ** (n-x) \n  \n# number of trials \nn = 10\n  \n# probability of success \np = 0.5\n  \n# number of successes \nx = 4\n  \n# probability of x successes \nresult = binomial(n, p, x) \n  \nprint(\"Probability of 4 successes in 10 trials is:\", result) ",
        "generated_testcode": "assert nCr(5, 3) == 10\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[-1]) \n\n# Example usage:\nmy_list = [(1, 3), (5, 1), (6, 9), (3, 2), (2, 7), (7, 4)]\nprint(sort_tuple(my_list))\n\n# Output: [(5, 1), (2, 7), (3, 2), (1, 3), (7, 4), (6, 9)] ",
        "generated_testcode": "assert sort_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)] ) == [(7, 8, 9), (4, 5, 6), (1, 2, 3), (10, 11, 12)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (5 * a ** 2) * (3 ** 0.5) / 4\n\n# Test the function with different values of a\nprint(area_pentagon(5))\nprint(area_pentagon(7))\nprint(area_pentagon(10))\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r, h):\n    return 3.14159 * r ** 2 * h\n\n# Test the function with different values of r and h\nprint(volume_cylinder(5, 10))\nprint(volume_cylinder(8, 12))\nprint(volume_cylinder(10, 15))\n\n# Write a function to find the area of a rectangle\ndef area_rectangle(l, w):\n    return l * w\n\n# Test the function with different values of l and w\nprint(area_rectangle(5, 10))\nprint(area_rectangle(8, 12))\nprint(area_rectangle(10, 15))\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    return (4 / 3) * 3.14159 * r ** 3\n\n# Test the function with different values of r\nprint(volume_sphere(5))\nprint(volume_sphere(7))\nprint(volume_sphere(10))\n\n# Write a function to find the per",
        "generated_testcode": "assert area_pentagon(5) == 50.0\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    largest = 0\n    freq = 0\n    for i in range(n): \n        if arr[i] > largest: \n            largest = arr[i] \n            freq = 1\n        elif arr[i] == largest: \n            freq += 1\n    return freq\n\n# Example usage:\narr = [1, 2, 3, 4, 4, 5, 5, 5, 5, 6, 6, 7, 8, 8, 8, 8, 8, 9] \nn = len(arr)\nprint(\"Frequency of the largest element is:\", frequency_Of_Largest(n, arr)) ",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5,5,5,5,5,5,5,5,5,6,7,8,9]) == 5\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in test_list:\n        for j in test_list:\n            if i == j[::-1]:\n                result.append(i)\n    return result\n\n# Testing the function with sample input\ntest_list = ['abc', 'cd', 'xyz', 'dog', 'god', 'cat', 'tac', 'race', 'ecar', '12321', 'level', 'evil', 'veil', 'deed']\nprint(extract_symmetric(test_list)) # Output: ['abc', 'cd', 'dog', 'god', 'cat', 'tac', '12321', 'level', 'evil']\n\n# Explanation: The function iterates through the list and checks if the string is equal to its reverse. If it is, it adds it to the result list. ",
        "generated_testcode": "assert extract_symmetric(()) == []\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += a*(r**(i-1)\n    return sum\n\n# test the function\na = 2\nn = 5\nr = 2\nprint(\"The sum of geometric progression is:\", sum_gp(a,n,r)) # expected output: 60 (2+2^2+2^3+2^4+2^5)\n\n# Another approach\ndef sum_gp(a,n,r):\n    return (a*(1-r**n)/(1-r) if r!=1 else a*n)\n\n# test the function\na = 2\nn = 5\nr = 2\nprint(\"The sum of geometric progression is:\", sum_gp(a,n,r)) # expected output: 60 (2+2^2+2^3+2^4+2^5)\n",
        "generated_testcode": "assert sum_gp(1,5,2) == 32\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    low = 0\n    high = len(item_list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        guess = item_list[mid]\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n# Example usage\narr = [1,3,5,7,9,11,13,15]\nprint(binary_search(arr, 7))  # Output: 2\nprint(binary_search(arr, 15))  # Output: 4\nprint(binary_search(arr, 10))  # Output: None\n\n# Complexity: O(log n)\n",
        "generated_testcode": "assert binary_search(item_list, item) == expected_result\n\n# item_list is the list of elements to be searched\n# item is the element to be searched\n# expected_result is the expected output of the function\n\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Calculate the number of rows and columns\n    rows = abs(endy - starty) // (radius * 3)\n    cols = abs(endx - startx) // radius\n\n    polygons = []\n    for row in range(rows):\n        # Calculate the y coordinate of the first point\n        y1 = starty + row * radius * 3\n        y2 = y1 + radius\n        y3 = y2 + radius * math.sqrt(3)\n        y4 = y2 + 2 * radius\n        y5 = y4 + radius\n        y6 = y5 + radius * math.sqrt(3)\n\n        for col in range(cols):\n            # Calculate the x coordinate of the first point\n            x1 = startx + col * radius\n            x2 = x1 + 2 * radius\n            x3 = x2 + radius\n            x4 = x1 + radius\n            x5 = x4 - radius\n            x6 = x2 - radius\n\n            # Add the polygon to the list\n            polygon = [(x1, y1), (x2, y2), (x3, y3), (x4, y4), (x5, y5), (x6, y6)]\n            polygons.append(polygon)\n\n            # Calculate the next polygon if not at the last row\n            if row < rows - 1:\n                y1 += 3 * radius\n                y2 += 3 * radius\n                y3 += 3 * radius\n                y4 += 3 * radius\n                y5 += 3 * radius\n                y6 += 3 * radius\n\n    return polygons\n\n# Test the function with a sample input\npolygons = calculate_polygons(0, 0, 100, 100)\nprint(polygons)\n\n# Output:\n# [((0, 0), (2.0, 1.732050807568877722), (2.0, 4.2360679777499979), (1.3333333333333333335, 6.2831853071795862), (-0.6666666666666",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 2) == [[(0, 0), (2, 0), (4, 2), (6, 2), (8, 0), (10, 0), (8, -2), (6, -2), (4, -2), (2, 0), (0, 0)]]\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # If the tuple contains an even number of elements, remove the last element\n    if len(test_tup) % 2 == 0:\n        test_tup = test_tup[:-1]\n    # Convert binary tuple to a string\n    binary_str = \"\"\n    for num in test_tup:\n        binary_str += str(num)\n    # Convert the string to an integer\n    return int(binary_str, 2)\n\n# Test the function with a sample input\nprint(binary_to_integer((1, 0, 1, 1, 0, 0, 1)) == 15) ",
        "generated_testcode": "assert binary_to_integer(('1', '0', '1', '0', '1') == 5)\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub(r'\\b[a-z]+\\b', '', str1)\n\n# Example usage:\nstr1 = \"Hello World\"\nprint(remove_lowercase(str1)) # Output: \"Hello \"\n\nstr2 = \"Python is a great programming language\"\nprint(remove_lowercase(str2)) # Output: \"Python is a great \"\n\nstr3 = \"12345abcd\"\nprint(remove_lowercase(str3)) # Output: \"12345abcd\"\n\nstr4 = \"Python is a great programming language\"\nprint(remove_lowercase(str4)) # Output: \"Python is a great \" \n\n# Note: The function should only remove substrings that are surrounded by whitespace or at the beginning or end of the string. ",
        "generated_testcode": "assert remove_lowercase(None) == None\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    import heapq\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, nums[i])\n    return [heapq.heappop(min_heap) for i in range(n)]\n\n# Test the function\nnums = [5, 8, 1, 3, 7, 9, 2, 6]\nprint(heap_queue_smallest(nums, 3)) # Output: [1, 2, 3]\n\n# Test the function with repeated numbers\nnums = [5, 8, 1, 3, 7, 9, 2, 6, 5, 8, 1, 3, 7, 9, 2, 6]\nprint(heap_queue_smallest(nums, 3)) # Output: [1, 2, 3]\n\n# Test the function with negative numbers\nnums = [5, -8, -1, -3, -7, -9, -2, -6]\nprint(heap_queue_smallest(nums, 3)) # Output: [-9, -8, -7] ",
        "generated_testcode": "assert heap_queue_smallest(nums=[1,2,3,4,5,6,7,8,9],n=3) == [1,2,3]\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159\n    return 2*pi*r*h + pi*r**2\n\n# Test the function with a value of 5 and 10\nprint(surfacearea_cone(5,10)) # should output 157.0796\n\n#Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    pi = 3.14159\n    return (1/3)*pi*r**2*h\n\n# Test the function with a value of 5 and 10\nprint(volume_cone(5,10)) # should output 523.6049\n\n#Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n    pi = 3.14159\n    return pi*r**2*h\n\n# Test the function with a value of 5 and 10\nprint(volume_cylinder(5,10)) # should output 314.1590\n\n#Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    pi = 3.14159\n    return (4/3)*pi*r**3\n\n# Test the function with a value of 5\nprint(volume_sphere(5)) # should output 523.6049\n\n#Write a function to find the surface area of a",
        "generated_testcode": "assert surfacearea_cone(3, 5) == 153.86\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    while y != 0:\n        x, y = y, x % y\n    return x\n\nprint(gcd(12, 8)) # Output: 4\nprint(gcd(17, 5)) # Output: 1\nprint(gcd(35, 21)) # Output: 7\nprint(gcd(60, 48)) # Output: 12 ",
        "generated_testcode": "assert gcd(12, 18) == 6\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    diameter = 2 * r\n    return diameter\n\n#Test the function with a radius of 5\nprint(diameter_circle(5)) #Output: 10\n\n#Function to find the area of a circle.\ndef area_circle(r):\n    area = 3.14 * r**2\n    return area\n\n#Test the function with a radius of 5\nprint(area_circle(5)) #Output: 78.5\n\n#Function to find the circumference of a circle.\ndef circumference_circle(r):\n    circumference = 2 * 3.14 * r\n    return circumference\n\n#Test the function with a radius of 5\nprint(circumference_circle(5)) #Output: 31.4159\n\n#Function to find the volume of a sphere.\ndef volume_sphere(r):\n    volume = (4/3) * 3.14 * r**3\n    return volume\n\n#Test the function with a radius of 5\nprint(volume_sphere(5)) #Output: 523.6\n\n#Function to find the surface area of a sphere.\ndef surface_area_sphere(r):\n    surface_area = 4 * 3.14 * r**2\n    return surface_area\n\n#Test the function with a radius of 5\nprint(surface_area_sphere(5)) #Output: 314.0\n\n#Function to find the surface area of a",
        "generated_testcode": "assert diameter_circle(5) == 10\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for element in list:\n        result += str(element)\n    return result\n\n# Example usage:\nprint(concatenate_elements([1, 2, 3, 4, 5, 6]))  # Output: \"123456\"\nprint(concatenate_elements([\"hello\", \"world\"]))  # Output: \"helloworld\"\nprint(concatenate_elements([True, False]))  # Output: \"TrueFalse\"\n\n# Test your function with the examples above and see if it works correctly\n\n# If it works, you can remove the examples above and implement your own tests below\n\n# Test your function with the following test cases:\n# Test case 1\nassert concatenate_elements([]) == \"\"\n# Test case 2\nassert concatenate_elements([\"\", \"\", \"\"]) == \"\"\n# Test case 3\nassert concatenate_elements([1, 2, \"hello\", True, 3.14]) == \"12helloworldTrue3.14\"\n# Test case 4\nassert concatenate_elements([\"Python\", \" is \", \"awesome\"]) == \"Python is awesome\"\n# Test case 5\nassert concatenate_elements([]) == \"\"\n# Test case 6\nassert concatenate_elements([\"a\"]) == \"a\"\n# Test case 7\nassert concatenate_elements([\"hello\", \"world\"]) == \"helloworld\"\n# Test case 8\nassert concatenate_elements([\"Hi \", \"there!\"",
        "generated_testcode": "assert concatenate_elements([\"hello\", \"world\", \"!\", \"How\", \"are\", \"you\", \"doing\", \"today?\"]) == \"helloworld!How are you doing today?\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x > y:\n        small = y\n    else:\n        small = x\n    for i in range(1,small+1):\n        if(x%i==0 and y%i==0):\n            gcd = i\n    return gcd\n\n# Testing the function\nprint(ngcd(12,18)) # Expected Output: 6\nprint(ngcd(17,23)) # Expected Output: 1\nprint(ngcd(56,8)) # Expected Output: 8\nprint(ngcd(16,40)) # Expected Output: 8\nprint(ngcd(60,80)) # Expected Output: 12\nprint(ngcd(35,75)) # Expected Output: 5\nprint(ngcd(99,27)) # Expected Output: 9\n\n# The function returns the common divisor of two numbers in a given pair.\n# It first checks which number is smaller and then iterates through all the numbers from 1 to that number to find the common divisor. ",
        "generated_testcode": "assert ngcd(12,18) == 6\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    return n%m\n\n#Test the function\nprint(find(10,3)) # Output: 1\nprint(find(15,4)) # Output: 3\nprint(find(7,2)) # Output: 1\nprint(find(12,8)) # Output: 0\n\n# Write a python function to find the sum of two numbers\ndef sum(a,b):\n    return a+b\n\n# Test the function\nprint(sum(5, 6)) # Output: 11\nprint(sum(10, 12)) # Output: 22\nprint(sum(3, 5)) # Output: 8\n\n# Write a python function to find the difference between two numbers\ndef diff(a,b):\n    return a-b\n\n# Test the function\nprint(diff(10,5)) # Output: 5\nprint(diff(15,8)) # Output: 7\nprint(diff(20,10)) # Output: 10\n\n# Write a python function to find the product of two numbers\ndef product(a,b):\n    return a*b\n\n# Test the function\nprint(product(5, 6)) # Output: 30\nprint(product(10, 2)) # Output: 20\nprint(product(3, 4)) # Output: 12\n\n# Write a python function to find the quotient of two numbers\ndef quotient(a,b):\n    return a/b\n\n#",
        "generated_testcode": "assert find(10,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    total = 0\n    count = 0\n    for i in range(len(nums)):\n        if i == 0:\n            total += nums[i]\n            count += 1\n        elif nums[i] - nums[i-1] == 1:\n            total += nums[i]\n            count += 1\n        else:\n            break\n    return total\n\n# Test the function\nprint(add_consecutive_nums([1, 2, 3, 4, 5])) # should return 10\nprint(add_consecutive_nums([1, 2, 4, 5, 6])) # should return 3\nprint(add_consecutive_nums([4, 5, 6, 7, 8])) # should return 0\nprint(add_consecutive_nums([])) # should return 0\nprint(add_consecutive_nums([1, 9, 10, 11, 12, 13])) # should return 0\nprint(add_consecutive_nums([1, 3, 5, 7, 9, 11])) # should return 0\nprint(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # should return 45",
        "generated_testcode": "assert add_consecutive_nums(range(1, 10)) == 45\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1,n+1): \n        sum += i**3\n    return sum \n  \n# Driver code \nn = 5\nprint(sum_Of_Series(n)) ",
        "generated_testcode": "assert sum_Of_Series(5) == 125\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    n = len(A)\n    while j < n:\n        if A[j] == 0:\n            j += 1\n        else:\n            A[i] = A[j]\n            i += 1\n            j += 1\n    while i < n:\n        A[i] = 0\n        i += 1\n    return A\n\ndef main():\n    A = [0,1,0,2,0,3,4,5,0]\n    print(re_order(A))\n\nif __name__ == \"__main__\":\n    main()\n\n# Output: [1,2,3,4,5,0,0,0]\n\n# Explanation: The function first iterates through the array and moves all non-zero elements to the beginning of the array by swapping them with the elements at the current index of the pointer i. Then, it sets the remaining\n# elements to zero. ",
        "generated_testcode": "assert re_order(A) == [1, 2, 3, 4, 5, 6, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Initialize the denominator and numerator\n    num = 1\n    den = 1\n    # Calculate the numerator\n    for i in range(1, k+1):\n        num *= n-i+1\n    # Calculate the denominator\n    for i in range(1, k+1):\n        den *= i\n    # Return the result\n    return num//den\n\n# Test the function\nn = 10\nk = 4\nprint(\"The permutation coefficient of p({}, {}) is {}\".format(n, k, permutation_coefficient(n, k)) ) ",
        "generated_testcode": "assert permutation_coefficient(5, 3) == 10\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for word in list1:\n        if word not in removewords:\n            new_list.append(word)\n    return new_list\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\nremove = [\"cherry\", \"elderberry\"]\nprint(remove_words(words, remove))\n# Output: ['apple', 'banana', 'fig', 'grape']\n\n# Using filter()\ndef remove_words(list1, removewords):\n    return list(filter(lambda x: x not in removewords, list1))\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\nremove = [\"cherry\", \"elderberry\"]\nprint(remove_words(words, remove))\n# Output: ['apple', 'banana', 'fig', 'grape'] ",
        "generated_testcode": "assert remove_words([\"hello\", \"world\", \"python\", \"is\", \"awesome\"], [\"python\", \"is\"]) == [\"hello\", \"world\", \"awesome\"]\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    common = set(l1) & set(l2)\n    if len(common) == 0:\n        return False\n    start1, end1 = l1.index(next(iter(common)), len(l1))\n    start2, end2 = l2.index(next(iter(common), 0), len(l2))\n    return l1[start1:end1] == l2[start2:end2]\n\n# Test the function\nprint(same_order([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]))  # True\nprint(same_order([1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8]))  # False\nprint(same_order([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]))  # False\nprint(same_order([1, 2, 3, 4, 5, 6], [3, 2, 4, 5, 6]))  # False\nprint(same_order([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))  # True\nprint(same_order([1, 2, 3, 4, 5, 6], [6",
        "generated_testcode": "assert same_order([\"apple\", \"banana\", \"orange\"], [\"banana\", \"orange\", \"apple\"]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    i = 1\n    while i <= n : \n        if i % 2 != 0 : \n            sum += i \n            count += 1\n        i += 1\n    return sum / count\n  \n# Test the function\nn = 15\nprint(\"Average of odd numbers till\", n, \"is\", average_Odd(n)) ",
        "generated_testcode": "assert average_Odd(5) == 3\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    arr.sort() \n    n = len(arr) \n    dp = [1] * (n + 1) \n    res = 0\n    mod = 10**9 + 7\n    for i in range(1, n + 1): \n        dp[i] = 1\n        for j in range(i): \n            if arr[i - 1] * dp[j] <= k: \n                dp[i] = (dp[i] + dp[j]) % mod \n            else: \n                break\n    return dp[n] \n\n# Test the function \narr = [1, 2, 3, 4, 5] \nk = 10\nprint(no_of_subsequences(arr, k)) \n\n# Output: 7 ",
        "generated_testcode": "assert no_of_subsequences(arr=[1, 2, 3, 4, 5], k=10) == 4\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    min_sum = sum(get_factors(num)[:2])\n    return min_sum\n\ndef get_factors(num):\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\n# Test the function\nprint(find_Min_Sum(12))  # Output: 3 (2+6)\nprint(find_Min_Sum(18))  # Output: 5 (2+6)\nprint(find_Min_Sum(33))  # Output: 4 (1+33) ",
        "generated_testcode": "assert find_Min_Sum(12) == 3 # Since 2 and 6 are the factors of 12, the minimum sum of factors is 2+6=8\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    flat_list = []\n    for i in test_tuple: \n        if type(i) == tuple: \n            flat_list.extend(flatten(i)) \n        else: \n            flat_list.append(i) \n    return flat_list \n    \ndef count_element_frequency(test_tuple): \n    flattened_tuple = flatten(test_tuple) \n    frequency = {} \n    for i in flattened_tuple: \n        if i in frequency: \n            frequency[i] += 1\n        else: \n            frequency[i] = 1\n    return frequency \n\ntest_tuple = (1, (2, (3, 4), (3, 2, (5, (3, 6)), 7, 3), 4, (4, 8)) \nprint(count_element_frequency(test_tuple)) ",
        "generated_testcode": "assert flatten(('a', ('b', 'c', 'd', ('e', 'f', 'g', ('h', 'i', 'j', ('k', 'l', 'm')), 'n')) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1}\n\n# The output should be a dictionary with the element as key and its frequency as value. ",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = []\n    for i in test_tup:\n        result.append(str(i) + K)\n    return result\n\n#Test case\nprint(add_str((1, 2, 3, 4, 5, 6, 7), \" hello\")) # Should print [\"1 hello\", \"2 hello\", \"3 hello\", \"4 hello\", \"5 hello\", \"6 hello\", \"7 hello\"]\nprint(add_str((\"Python\", \"Java\", \"C++\", \"C#\"), \" Programming Language\")) # Should print [\"Python Programming Language\", \"Java Programming Language\", \"C++ Programming Language\", \"C# Programming Language\"]\nprint(add_str((\"a\", \"b\", \"c\", \"d\"), \" is a good language\")) # Should print [\"a is a good language\", \"b is a good language\", \"c is a good language\", \"d is a good language\"]\n\n#Function implementation\ndef add_str(test_tup, K):\n    result = [str(i) + K for i in test_tup]\n    return result\n\n#Test case\nprint(add_str((1, 2, 3, 4, 5, 6, 7), \" hello\")) # Should print [\"1 hello\", \"2 hello\", \"3 hello\", \"4 hello\", \"5 hello\", \"6 hello\", \"7 hello\"]\nprint(add_str((\"Python\", \"Java\", \"C++\", \"C#\"), \" Programming Language\")) # Should print [\"Python Programming Language\",",
        "generated_testcode": "assert add_str(('a', 'b', 'c', 'd'), 'X') == ['aX', 'bX', 'cX', 'dX']\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    for i in test_tup:\n        total += i[0]\n        total += i[1]\n        total += i[2]\n    return total\n\n\n# Test the function with the given tuple\ntest_tup = ((1,2,3), (4,5,6), (7,8,9))\nprint(sum_elements(test_tup)) # Output: 45\n\n# Create a function to find the average of the tuple elements in the given tuple list\ndef average(test_tup):\n    total = sum_elements(test_tup)\n    length = len(test_tup) * 3\n    return total / length\n\n# Test the function with the given tuple\nprint(average(test_tup)) # Output: 5.0\n\n# Create a function to find the maximum element of the tuple list\ndef max_element(test_tup):\n    max_num = test_tup[0][0]\n    for i in test_tup:\n        for j in i:\n            if j > max_num:\n                max_num = j\n    return max_num\n\n# Test the function with the given tuple\nprint(max_element(test_tup)) # Output: 9\n\n# Create a function to find the minimum element of the tuple list\ndef min_element(test_tup):\n    min_num = test_tup[0][0]\n    for i in test_tup:\n        for j",
        "generated_testcode": "assert sum_elements(test_tup) == 10\n\n# Test the function with the following tuple\ntest_tup = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(sum_elements(test_tup)) # Output: 45\n\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Initialize a 2D table to store the results of subproblems\n    dp = [[False for _ in range(m+1)] for _ in range(n+1)]\n    # Base case, if sum is 0, there is always a subset with sum 0\n    for i in range(n+1):\n        dp[i][0] = True\n    # Iterate over the array\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if arr[i-1] <= j:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    # If the last element is divisible by m, there is a subset with sum divisible by m\n    for i in range(m, -1, -1):\n        if dp[n][i] == True:\n            return True\n    return False\n\n# Test the function with an example\narr = [3, 2, 5, 4, 6, 8]\nm = 6\nif modular_sum(arr, len(arr), m) == True:\n    print(\"There is a subset with sum divisible by m\")\nelse:\n    print(\"There is no subset with sum divisible by m\") ",
        "generated_testcode": "assert modular_sum(arr=[1, 2, 3, 4, 5, 6], n=3, m=2) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(nums) < 2:\n        return nums\n    \n    # Find the maximum number to know the number of digits\n    max_num = max(nums)\n    exp = 1\n    \n    while max_num // exp > 0:\n        counting_sort(nums, exp)\n        exp *= 10\n    \n    return nums\n\ndef counting_sort(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    \n    for i in range(n):\n        index = (nums[i] // exp)\n        count[index % 10] += 1\n    \n    for i in range(1, 10):\n        count[i] += count[i-1]\n        \n    for i in range(n-1, -1, -1):\n        index = (nums[i] // exp) % 10\n        output[count[index % 10] - 1] = nums[i]\n        count[index % 10] -= 1\n    \n    for i in range(n):\n        nums[i] = output[i]\n\n# Test the function\nnums = [170, 45, 75, 90, 802, 24, 2, 66]\nprint(radix_sort(nums)) # Output: [2, 2",
        "generated_testcode": "assert radix_sort(nums) == sorted(nums)\n\n# Test the function with an example input\nnums = [329, 457, 123, 64, 98, 2, 15, 234, 6, 34, 7, 12, 23, 45, 986, 123, 67, 34, 23]\nprint(radix_sort(nums)) # should print [2, 6, 7, 12, 15, 23, 34, 34, 64, 98, 123, 123, 234, 329, 45, 457, 67, 986]\n\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    max_num = list1[0] \n    for i in range(1, len(list1)): \n        if list1[i] > max_num: \n            max_num = list1[i] \n    return max_num\n\n#test the function\nlist1 = [10, -5, 20, 30, -20, 15] \nprint(\"Largest number in the list is:\", largest_pos(list1)) \n\n#output: Largest number in the list is: 30 ",
        "generated_testcode": "assert largest_pos([1, -5, 10, 4, -3, 8, 0, 2] ) == 10\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Find the square root of a number using binary search.\n    # We know that the square root of a perfect number is an integer, so we can use binary search to find it.\n    left = 1\n    right = num\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n        if square == num:\n            return mid\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1\n\n\n# Test the function with an example\nprint(sqrt_root(625))  # Output: 5\n\n# Test the function with an example where the square root is not an integer\nprint(sqrt_root(624))  # Output: 8\n\n# Test the function with a negative number\nprint(sqrt_root(-16))  # Output: None\n\n# Test the function with 0\nprint(sqrt_root(0))    # Output: 0\n\n# Test the function with 1\nprint(sqrt_root(1))   # Output: 1 ",
        "generated_testcode": "assert sqrt_root(16) == 4\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    volume = (num ** 3) / (6 * (2 - num) ** 2)\n    return volume\n\n# Test the function with a value of 2.\nprint(volume_tetrahedron(2))\n\n# Test the function with a value of 3.\nprint(volume_tetrahedron(3))\n\n# Test the function with a value of 4.\nprint(volume_tetrahedron(4))\n\n# Test the function with a value of 5.\nprint(volume_tetrahedron(5))\n\n# Test the function with a value of 6.\nprint(volume_tetrahedron(6))\n\n# Test the function with a value of 7.\nprint(volume_tetrahedron(7)) ",
        "generated_testcode": "assert volume_tetrahedron(6) == 120\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    lcm = (num1*num2) // gcd(num1,num2) \n    return lcm \n\ndef gcd(num1, num2): \n    if(num2==0): \n        return num1 \n    else: \n        return gcd(num2, (num1%num2) ) \n\ndef find_lcm_of_array(arr, size): \n    lcm = arr[0] \n    for i in range(1,size): \n        lcm = find_lcm(lcm, arr[i]) \n    return lcm \n\narr = [2, 7, 3, 9, 14] \nsize = len(arr) \nprint(\"LCM of given array is\", find_lcm_of_array(arr, size)) \n\n# Output: LCM of given array is 56\n\n# Time complexity of this algorithm is O(n) ",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    if x == y == z:\n        return False\n    elif x == y or x == z or y == z:\n        return True\n    else:\n        return False\n    \ndef is_scalene(x,y,z):\n    if x+y > z and y+z > x and x+z > y:\n        if x**2 + y**2 == z**2 or y**2 + z**2 == x**2 or x**2 + z**2 == y**2:\n            return False\n        else:\n            return True\n    else:\n        return False\n    \nprint(is_scalene(4,4,4))\nprint(is_scalene(3,4,5))\nprint(is_scalene(5,5,5))\nprint(is_scalene(1,2,2))\nprint(is_scalene(1,2,3))\nprint(is_scalene(5,5,3))\nprint(is_scalene(1,3,5))",
        "generated_testcode": "assert check_isosceles(3,4,5) == False\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    n = len(arr)\n    inc = [1] * n\n    dec = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + 1)\n            if arr[n-i-1] < arr[n-j-1]:\n                dec[n-i-1] = max(dec[n-i-1], dec[n-j-1] + 1)\n    l = 0\n    for i in range(n):\n        l = max(l, inc[i] + dec[i] - 1)\n    return l\n\n# Test the function\narr = [1, 2, 3, 1, 4, 5, 4, 7, 8, 6, 7, 9]\nprint(lbs(arr)) ",
        "generated_testcode": "assert lbs(arr=[1, 2, 3, 4, 5, 4, 3, 2, 1]) == 5\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return lambda: str1.isalpha() and str1.islower() and len(str1) == 5\n\n# Test cases\nprint(check_string(\"hello\")()) # Should return False\nprint(check_string(\"hEllo\")()) # Should return False\nprint(check_string(\"Hello\")()) # Should return False\nprint(check_string(\"Hello1\")()) # Should return False\nprint(check_string(\"Hello12\")()) # Should return True\nprint(check_string(\"Hello!\")()) # Should return False\nprint(check_string(\"Hello123\")()) # Should return False\nprint(check_string(\"Hello1234\")()) # Should return False\nprint(check_string(\"Hello12345\")()) # Should return True\nprint(check_string(\"Hello123456\")()) # Should return False\n\n# Explanation:\n# The function takes a string str1 and returns a lambda function. The lambda function checks whether the string has all lower case letters, length of 5 and contains a capital letter. It returns True if all the conditions are met, and False otherwise.\n\n# The first test case should return False because the string doesn't have a capital letter.\n# The second test case should return False because the string has a capital letter.\n# The third test case should return False because the string doesn't have a number.\n# The fourth test case should return False because the string doesn't have lower case letters.\n# The fifth test case should return True because the string has a capital letter and is ",
        "generated_testcode": "assert check_string(lambda x: len(x) >= 8 and any(c.isupper() for c in x) and any(c.islower() for c in x) and any(c.isdigit() for c in x))(\"Aa1bcdefg\") == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    dp = [0] * n\n    prev = [-1] * n\n    for i in range(n): \n        dp[i] = 1\n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]: \n                dp[i] = dp[j] + arr[i] \n                prev[i] = j \n    for i in range(n): \n        max_sum = max(max_sum, dp[i]) \n    return max_sum ",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[10, 22, 9, 33, 21, 50, 5, 35, 64, 2, 4, 3], n=8) == 161\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if line1[0] == line2[0] and line1[3] == line2[3] and line1[2] == -line2[2] and line1[1] == -line2[1]:\n        return True\n    elif line1[0] == line2[3] and line1[3] == line2[0] and line1[2] == -line2[1] and line1[1] == -line2[2]:\n        return True\n    else:\n        return False\n\nline1 = list(map(int, input(\"Enter the slope-intercept form of line 1: \").split()))\nline2 = list(map(int, input(\"Enter the slope-intercept form of line 2: \").split())\nif parallel_lines(line1, line2):\n    print(\"The lines are parallel\")\nelse:\n    print(\"The lines are not parallel\")\n    \n#Example Input/Output:\n#Input:\n#Enter the slope-intercept form of line 1: 1 2\n#Enter the slope-intercept form of line 2: 3 -4\n#Output: The lines are parallel ",
        "generated_testcode": "assert parallel_lines(Line(1, 0, 0, 0, 0, 0, 1, 0), Line(0, 1, 0, 0, 0, 1, 0)) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = str1.split()\n    result = \"\"\n    for word in words:\n        if len(word) > 1:\n            result += word[0].upper() + word[1:].lower() + \" \"\n        else:\n            result += word.upper() + \" \"\n    return result[:-1]\n\n\n\n# Test the function with an example string\nstring = \"python is an awesome programming language\"\nprint(capitalize_first_last_letters(string))  # Output: \"Python Is An Awesome Programming Language\"\n",
        "generated_testcode": "assert capitalize_first_last_letters(None) == None\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    arr.sort()\n    left, right = 0, n-1\n    count = 0\n    while left < right:\n        curr_sum = arr[left] + arr[right]\n        if curr_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif curr_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n\n# Test the function with sample input\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nn = len(arr)\nsum = 10\nprint(get_pairs_count(arr, n, sum)) # Output: 2\n\n# Time complexity: O(n)\n# Space complexity: O(1)\n\n# Note: This is a simple solution but the time complexity is not optimal as it has a time complexity of O(n^2) in the worst case. ",
        "generated_testcode": "assert get_pairs_count(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=7, sum=10) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_len = min(len(lst) for lst in list1)\n    min_list = [lst for lst in list1 if len(lst) == min_len]\n    return min_list\n\n# Example usage:\nlist1 = [['apple', 'banana', 'orange'], ['cat', 'dog'], ['hello', 'world', 'python', 'programming'], ['apple', 'banana']]\nprint(min_length(list1))  # Output: [['cat', 'dog'], ['apple', 'banana']]\n",
        "generated_testcode": "assert min_length([\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]) == [\"apple\", \"kiwi\"]\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return jacobsthal_lucas(n-1) + jacobsthal_lucas(n-2) \n\n# Test the function \nn = 10\nprint(jacobsthal_lucas(n)) ",
        "generated_testcode": "assert jacobsthal_lucas(0) == 2\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    negatives = 0\n    for num in nums:\n        if num < 0:\n            negatives += 1\n    return negatives / len(nums)\n\n# Test cases\nprint(negative_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # 0.0\nprint(negative_count([-1, 2, 3, 4, -5, 6, -7, 8, 9, -10])) # 0.5\nprint(negative_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])) # 1.0 ",
        "generated_testcode": "assert negative_count(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": " \n    # Create a table to store the answers \n    dp = [0] * (V + 1) \n    for i in range(V + 1): \n        dp[i] = float('inf') \n    dp[0] = 0 # Initializing the base case when V = 0 \n  \n    # Fill the table in bottom-up manner using the recurrence relation \n    for i in range(1, V + 1): \n        for j in range(len(coins)): \n            if coins[j] <= i: \n                dp[i] = min(dp[i], dp[i - coins[j]] + 1) \n  \n    return dp[V] if dp[V] != float('inf') else -1\n  \n# Example usage: \ncoins = [1, 2, 3] \nm = len(coins) \nV = 5\nprint(min_coins(coins, m, V)) # Output: 2 ",
        "generated_testcode": "assert min_coins(coins=[1, 2, 5], m=10, V=11) == 3\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(str1) != len(str2):\n        return False\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str2:\n        if char in char_count:\n            char_count[char] -= 1\n        else:\n            return False\n    for count in char_count.values():\n        if count != 0:\n            return False\n    return True\n\n\nprint(check_permutation(\"listen\", \"silent\"))  # True\nprint(check_permutation(\"hello\", \"world\"))  # False\nprint(check_permutation(\"abc\", \"cba\"))  # True\nprint(check_permutation(\"abc\", \"cbd\"))  # False\nprint(check_permutation(\"abc\", \"abcd\"))  # False\nprint(check_permutation(\"abbccc\", \"bbccca\"))  # True\nprint(check_permutation(\"abbccc\", \"bbcccd\"))  # False\nprint(check_permutation(\"abbccc\", \"bbcccd\"))  # False\nprint(check_permutation(\"abbccc\", \"aabbc\"))  # False\nprint(check_permutation(\"abbc\", \"abbc\"))  # False\n\n# Solution Explanation:\n# We first check if the lengths of the two strings are equal. If they are not equal, then",
        "generated_testcode": "assert check_permutation(str1='hello', str2='oleh') == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty list to store the non-data_type elements\n    result = []\n    # Traverse through each element of the tuple\n    for i in test_tuple:\n        # If the data_type of element is not equal to the given data_type, append it to the result list\n        if type(i) != data_type:\n            result.append(i)\n    # Return the result tuple\n    return tuple(result)\n\n\n# Test the function with sample input\nsample_tuple = (1, 2, \"hello\", 3.5, \"world\", 4, \"Python\", 5)\nprint(remove_datatype(sample_tuple, str))  # Output: (1, 2, 3.5, 4, 5)\nprint(remove_datatype(sample_tuple, int))  # Output: ('hello', 3.5, 'world', 'Python')\nprint(remove_datatype(sample_tuple, float))  # Output: (1, 2, 'hello', 'world', 4, 'Python', 5)\n",
        "generated_testcode": "assert remove_datatype(('hello', 123, 45.67, 'world', 89, 'python', 3.14, 'programming', 78, 9.89, 'is', 'fun', 3.14) == ('hello', 'world', 'python', 'programming', 'is')\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    Returns the index of the first occurrence of pattern in text.\n    If pattern is not found, return -1.\n    \"\"\"\n    n = len(text)\n    m = len(pattern)\n    for i in range(n-m+1):\n        if text[i:i+m] == pattern:\n            return i\n    return -1\n\nprint(search_literal(\"abc\",\"abcdefgabc\")) #0\nprint(search_literal(\"bc\",\"abcdefgabc\")) #1\nprint(search_literal(\"ghi\",\"abcdefgabc\")) #-1\nprint(search_literal(\"cde\",\"abcdefgabc\")) #2\nprint(search_literal(\"abc\",\"\")) #0\nprint(search_literal(\"\",\"abcdefgabc\")) #0\nprint(search_literal(\"\",\"\")) #0\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert search_literal(pattern,text) == True\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    area = 2*3.14*r**2\n    return area\n\n# Write a function to find the lateral surface area of a cylinder.\ndef lateral_surfacearea(r,h):\n    area = 2*3.14*r*h\n    return area\n\n# Write a function to find the volume of a cylinder.\ndef volume(r,h):\n    vol = 3.14*r**2*h\n    return vol\n\n# Write a function to find the surface area of a cylinder.\ndef surfacearea(r,h):\n    surf_area = 2*3.14*r**2 + 2*3.14*r*h\n    return surf_area\n\n# Write a function to find the total surface area of a cone.\ndef conesurfacearea(r,h):\n    surf_area = 3.14*r**2 + 3.14*r*math.sqrt(r**2 + h**2)\n    return surf_area\n\n# Write a function to find the volume of a cone.\ndef cone_volume(r,h):\n    vol = (1/3)*3.14*r**2*h\n    return vol\n\n# Write a function to find the surface area of a sphere.\ndef spheresurfacearea(r):\n    surf_area = 4*3.14*r**2\n    return surf_area\n\n# Write a function to find the",
        "generated_testcode": "assert topbottom_surfacearea(5) == 314.1592653589793936\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [list[i] for i in range(0,len(list),n)]\n\n#Example usage:\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],2)) #output:[1,3,5,7,9]\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],3)) #output:[1,4,7]\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],1)) #output:[1,2,3,4,5,6,7,8,9,10]\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],0)) #output:[]\nprint(nth_items([1,2,3,4,5,6,7,8,9,10],-1)) #output:[]\nprint(nth_items([],2)) #output:[]\n\n#Function to create a dictionary where keys are numbers 1 to n and values are squares of keys\ndef square_dict(n):\n    return {i:i*i for i in range(1,n+1)}\n\n#Example usage:\nprint(square_dict(5)) #{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\nprint(square_dict(0",
        "generated_testcode": "assert nth_items([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], 2) == \"cherry\"\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    word_dict = {}\n    words = str1.split()\n    for word in words:\n        if word in word_dict:\n            return word\n        else:\n            word_dict[word] = True\n\n# Test the function with the given string\nprint(first_repeated_word(\"Hello world, I am a string, hello world\"))  # Output: \"Hello\"\nprint(first_repeated_word(\"Python is awesome, isn't it?\"))  # Output: \"is\"\nprint(first_repeated_word(\"Python is not the only language with dictionaries\"))  # Output: \"not\"\nprint(first_repeated_word(\"Every string has a first word, right?\"))  # Output: None (None because no word is repeated)\n\n# Time Complexity: O(n) - where n is the length of the input string, as we are iterating over the string once to create the dictionary\n# Space Complexity: O(n) - where n is the number of unique words in the string, as we are using a dictionary to store the unique words\n",
        "generated_testcode": "assert first_repeated_word(input_string) == expected_output\n\n# Test the function with the following input and expected output\ninput_string = \"hello world hello\"\nexpected_output = \"hello\"\n\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(str1)\n\n\n# Test the function with example\nprint(string_list_to_tuple(['apple', 'banana', 'cherry'])) # ('apple', 'banana', 'cherry')\nprint(string_list_to_tuple(['apple', 'banana', 'cherry', 'orange'])) # ('apple', 'banana', 'cherry', 'orange')\nprint(string_list_to_tuple([])) # ()\nprint(string_list_to_tuple(['apple', 'banana'])) # ('apple', 'banana') ",
        "generated_testcode": "assert string_list_to_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return map(lambda x,y: x**y,bases_num,index)\n\n# Test the function with example\nprint(list(basesnum_coresspondingnum([2,3,4,5],[1,2,3])) # Output: [2,9,64]\n",
        "generated_testcode": "assert basesnum_coresspondingnum(2,[2,3,4,5]) == [4, 8, 16, 32]\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    freq = {}\n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    max_freq = 0\n    min_freq = n \n    for i in freq: \n        if freq[i] > max_freq: \n            max_freq = freq[i] \n        if freq[i] < min_freq: \n            min_freq = freq[i] \n    return max_freq - min_freq \n  \n# Driver code \narr = [1, 3, 5, 2, 8, 6, 3, 7, 3, 9, 9, 2] \nn = len(arr) \nprint(\"Difference between highest and lowest frequency is\", find_Diff(arr, n)) \n\ndef find_Diff_freq(arr,n): \n    freq = {}\n    for i in range(n): \n        if arr[i] in freq: \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    return max(freq.values()) - min(freq.values())\n\narr = [1, 3, 5, 2, 8, 6, 3, 7, 3, ",
        "generated_testcode": "assert find_Diff(arr=[1,2,3,4,5,6,7,8,9,10],n=9) == 9\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 1\n    for i in range(2, int(n ** 0.5) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                sum += i \n            else: \n                sum += (i + n // i) \n        else: \n            continue\n    return sum \n  \ndef is_abundant(n): \n    return get_sum(n) > 2 * n \n  \ndef is_perfect(n): \n    return get_sum(n) == n \n  \ndef is_deficient(n): \n    return get_sum(n) < n \n  \ndef is_neither(n): \n    return get_sum(n) == n + 2\n\n# Example usage\nprint(is_abundant(12))\nprint(is_perfect(28))\nprint(is_deficient(20))\nprint(is_neither(24)) ",
        "generated_testcode": "assert get_sum(12) == 18\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    return re.sub(\"[ ,.]\", \":\", text)\n\n# Example usage:\nprint(fill_spaces(\"Hello, world. This is a sentence.\")) # \"Hello:world:This:is:a:sentence\" ",
        "generated_testcode": "assert fill_spaces(text=\"Hello, world. How are you?\") == \"Hello:world:How:are:you?\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = num1+num2\n    count = 0\n    while(sum!=0):\n        count+=1\n        sum = sum//10\n    return count\n\n#Test Cases\nprint(count_digits(10, 20))  # Output: 2\nprint(count_digits(100, 20)) # Output: 3\nprint(count_digits(1000, 200)) # Output: 4\nprint(count_digits(10000, 2000)) # Output: 5\nprint(count_digits(100000, 20000)) # Output: 6\n\n#This function counts the number of digits in the sum of two numbers. ",
        "generated_testcode": "assert count_digits(123,456) == 3\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    flat_list = []\n    for item in test_list:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n\n\n# Test the function with the example\ntest_list = [(1, 2), 3, (4, 5), 6, (7, 8, 9), 10]\nprint(flatten_tuple(test_list))  # should output [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Test the function with an empty tuple\ntest_list = [()]\nprint(flatten_tuple(test_list))  # should output []\n\n# Test the function with a list of strings\ntest_list = [(\"hello\", \"world\"), \"python\", (\"is\", \"fun\")]\nprint(flatten_tuple(test_list))  # should output [\"hello\", \"world\", \"python\", \"is\", \"fun\"] ",
        "generated_testcode": "assert flatten_tuple(('a', ('b', 'c', ('d', 'e', 'f')) == 'abcdef')\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # clear the first and last bit \n    n = n & (n ^ 1) \n    # set the first and last bit \n    n = n | 1\n    return n \n  \n# Test the function with an example \nn = 10 \nprint(\"Number after toggling first and last bits is:\", \n                              take_L_and_F_set_bits(n)) ",
        "generated_testcode": "assert take_L_and_F_set_bits(10) == 11\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    index = string.rfind(char)\n    return index\n\n# Test the function with the example string and character\nstring = \"hello world\"\nchar = \"o\"\nprint(last_occurence_char(string,char)) # Output: 7\n\n# Test the function with another string and character\nstring = \"python\"\nchar = \"t\"\nprint(last_occurence_char(string,char)) # Output: 5 ",
        "generated_testcode": "assert last_occurence_char(string=\"hello world\", char=\"l\") == 9\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n < 1:\n        return 0\n    else:\n        total = 0\n        for i in range(1, n+1):\n            for j in range(i+1, n+1):\n                h = 0\n                xor = i ^ j\n                while xor > 0:\n                    h += 1\n                    xor &= xor - 1\n                total += h\n        return total\n\n# Example usage:\nprint(Total_Hamming_Distance(5)) # Output: 16\nprint(Total_Hamming_Distance(10)) # Output: 28 ",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 32\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n# Test the function\narr = [3, 10, 22, 9, 30, 5, 25, 10, 24, 15]\nprint(longest_increasing_subsequence(arr)) # Output: 4\n\narr = [3, 4, 5, 6, 2, 7]\nprint(longest_increasing_subsequence(arr)) # Output: 4\n\narr = [1, 2, 3, 4, 5]\nprint(longest_increasing_subsequence(arr)) # Output: 4\n\narr = []\nprint(longest_increasing_subsequence(arr)) # Output: 0\n\narr = [1, 1, 2, 2, 3, 4, 4]\nprint(longest_increasing_subsequence(arr)) # Output: 1\n\narr = [10, 9, 22, 33, 11, 45, 12",
        "generated_testcode": "assert longest_increasing_subsequence(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    num = 1\n    for i in range(n): \n        sum += (2*i + 1) ** 5\n    return sum\n\n# Test the function with example values \nprint(odd_Num_Sum(5)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225 # 1^5 + 3^5 + 5^5 + 7^5 + 9^5 + 11^5 = 2225\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if high < low: \n        return arr[0] \n    if high == low: \n        return arr[low] \n    if arr[low] > arr[high]: \n        return arr[high] \n    mid = int((low + high) / 2) \n    if (mid < high and arr[mid] > arr[mid + 1]) or (mid > low and arr[mid] > arr[mid - 1]): \n        return arr[mid] \n    if mid > 0 and arr[mid] < arr[mid - 1]: \n        return find_Max(arr, 0, mid - 1) \n    return find_Max(arr, mid + 1, high) \n\narr = [5, 6, 7, 9, 10, 15, 19, 2, 3] \nresult = find_Max(arr, 0, len(arr) - 1) \nprint(\"Maximum element in the given array is\", result) \n  \n#Output: 19 ",
        "generated_testcode": "assert find_Max(arr,0,len(arr)-1) == 10\n\n# Test the function with an example array\narr = [4,5,6,7,8,9,10,1,2,3]\nprint(find_Max(arr,0,len(arr)-1)) # Output: 10\n\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for sublist in list1:\n        result.append(sublist[n])\n    return result\n\n# Example usage:\nmy_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_column(my_list, 2)) # Output: [3, 6, 9] ",
        "generated_testcode": "assert extract_column(list1, 1) == [2, 4, 6, 8]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Check if all the differences between consecutive terms in the sequence are equal\n    seq_diff = [seq_nums[i+1] - seq_nums[i] for i in range(len(seq_nums)-1)]\n    if len(set(seq_diff)) == 1:\n        return True\n    else:\n        return False\n    \n# Testing the function\nseq_nums = [1,2,3,4,5,6,7,8,9]\nprint(Seq_Linear(seq_nums)) # Output: True\nseq_nums = [1,2,4,5,6,7,10,12]\nprint(Seq_Linear(seq_nums)) # Output: False\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert Seq_Linear(seq_nums=[1,2,3,4,5]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Convert tuple to string\n    test_str = \"\".join(test_tup)\n    # Convert string to float\n    return float(test_str)\n\n# Test the function with a tuple\ntest_tup = (1, 2, \".\", 3, 4)\nprint(tuple_to_float(test_tup))  # Output: 12.34\n\n# Test the function with another tuple\ntest_tup = (1, 2, 3, \".\", 4, 5)\nprint(tuple_to_float(test_tup))  # Output: 123.45\n\n# Test the function with a tuple containing only integers\ntest_tup = (1, 2, 3)\nprint(tuple_to_float(test_tup))  # Output: 123.0\n\n# Test the function with a tuple containing a negative number\ntest_tup = (-1, \".\", 2, 3)\nprint(tuple_to_float(test_tup))  # Output: -1.23 ",
        "generated_testcode": "assert tuple_to_float(('1', '2', '3', '.', '4') == 1.234)\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    odd_list = [] \n    for i in list: \n        if type(i) == int and i % 2 != 0: \n            odd_list.append(i) \n    return odd_list \n  \nlist = [1, 'hello', 2, 3, 'world', 4, 'python', 5, 6, 'program'] \nprint(\"Original List:\", list) \nprint(\"List of odd numbers:\", Split(list)) ",
        "generated_testcode": "assert Split([\"apple\", 3, \"banana\", 5, \"cherry\", 7, \"date\", 9, \"elderberry\"]) == [3, 5, 7, 9]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum_cubes = 0\n    sum_nums = 0\n    for i in range(1, n+1) : \n        sum_cubes += i**3\n        sum_nums += i\n    return abs(sum_cubes - sum_nums**2)  #Absolute value because the sum of cubes can be greater than the square of the sum\n\nprint(difference(5)) #Output: 55\nprint(difference(10)) #Output: 220\nprint(difference(15)) #Output: 5422\n\n#Time Complexity: O(n)\n#Space Complexity: O(1)\n\n#Note: The difference between the sum of cubes of first n natural numbers and the square of sum of first n natural numbers is the square of the sum of first n odd numbers. \n#So, we can also calculate the difference using the formula (n**3 * (n+1)**2) / 4 - n**2 * (n+1) / 2 - 1 \ndef difference(n) : \n    return (n**3 * (n+1)**2) / 4 - n**2 * (n+1) / 2 - 1 \n\nprint(difference(5)) #Output: 55\nprint(difference(10)) #Output: 220\nprint(difference(15)) #Output: 5422 ",
        "generated_testcode": "assert difference(5) == 125\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N) : \n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) % 2 != 0 : \n                count += 1\n    return count\n\n# Taking input \nN = int(input())\nA = list(map(int, input().split()))\nprint(find_Odd_Pair(A,N))\n\n# Example Test Case 1 \n# Input: \n# 5\n# 2 3 4 7 6 9 \n# Output: 3 \n\n# Example Test Case 2\n# Input: \n# 4\n# 4 2 8 5 7\n# Output: 2 ",
        "generated_testcode": "assert find_Odd_Pair(A = [1, 2, 3, 4, 5, 6, 7, 8, 9], N = 5) == 2\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n\n# Example usage:\nprint(toggle_string(\"Hello, WOrld!\"))  # Output: hELLO, wORLD!\n```\n\nThis function works by iterating over each character in the string, and checking if it's lowercase or uppercase using the `islower()` and `isupper()` methods. If it's lowercase, it appends the uppercase version of the character to the result string. If it's uppercase, it appends the lowercase version. The result is then returned. ",
        "generated_testcode": "assert toggle_string(None) == None\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a function that takes in two integers and returns the distance between them\n    # ex: digit_distance_nums(1234, 5678) should return 4\n    # ex: digit_distance_nums(12, 15) should return 3\n    # ex: digit_distance_nums(999, 101) should return 2\n    # Hint: You can use the abs() function to find the absolute value of a number\n    pass\n\n# Test cases\nprint(digit_distance_nums(1234, 5678)) # Should return 4\nprint(digit_distance_nums(12, 15)) # Should return 3\nprint(digit_distance_nums(999, 101)) # Should return 2\nprint(digit_distance_nums(100, 100)) # Should return 0\nprint(digit_distance_nums(123, 456)) # Should return 8\nprint(digit_distance_nums(0, 100)) # Should return 9\nprint(digit_distance_nums(-100, 100)) # Should return 200\nprint(digit_distance_nums(-123, -456)) # Should return 8\n\n# Explanation:\n# The distance between two integers is the absolute difference between their numerical values. \n# For example, the distance between 123 and ",
        "generated_testcode": "assert digit_distance_nums(123, 456) == 3\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n\n\ndef main():\n    a = list(map(int, input(\"Enter the array elements: \").split()))\n    size = len(a)\n    max_sum = max_sub_array_sum(a, size)\n    print(\"Largest sum of contiguous subarray:\", max_sum)\n\nif __name__ == '__main__':\n    main()\n\n# Example usage:\n# Input: -2, -3, 4, -1, -2, 1, 5, -3\n# Output: Largest sum of contiguous subarray: 7 ",
        "generated_testcode": "assert max_sub_array_sum(a=[1, -2, 3, 4, -1, 5, 2, -1, 6, 2, -5, 4], size=9) == 13\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create an empty set to store the unique elements\n    result = set()\n    # Create a set from the first tuple\n    set1 = set(test_tup1)\n    # Create a set from the second tuple\n    set2 = set(test_tup2)\n    # Union the two sets\n    result = set1.union(set2)\n    # Return the union set as a tuple\n    return tuple(result)\n\n\n# Test the function with the sample data\nprint(union_elements((1, 2, 3, 4), (3, 4, 5, 6)))  # Output: (1, 2, 3, 4, 5, 6)\nprint(union_elements((5, 6, 7), (1, 2, 3, 4)))  # Output: (1, 2, 3, 4, 5, 6, 7)\nprint(union_elements((1, 2, 3), (1, 2, 3)))  # Output: (1, 2, 3)\nprint(union_elements((1, 2, 3), ()))  # Output: (1, 2, 3)\nprint(union_elements((), (1, 2, 3))  # Output: (1, 2, 3)\nprint(union_elements((1, 2, 3, 4, 4), (3, 4, 5, 6))  # Output: (1",
        "generated_testcode": "assert union_elements(('a', 'b', 'c', 'd'), ('c', 'd', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                result.append((test_list[i], test_list[j]))\n    return result\n\n# test the function\nprint(assign_elements([1, 2, 3, 4, 5]))  # should print [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\nprint(assign_elements([7, 8, 9]))      # should print [(7, 8), (7, 9), (8, 9)]\nprint(assign_elements([]))            # should print []\nprint(assign_elements([10]))         # should print []\n\n\n# Solution\ndef assign_elements(test_list):\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            result.append((test_list[i], test_list[j]))\n    return result\n\n# test the function\nprint(assign_elements([1, 2, 3, 4, 5])  # should print [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd') == (('a', 'b', 'c', 'd', 'a', 'b', 'c', 'd', 'a', 'b', 'c', 'd')\n\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(lst)\n    max_len = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_lst = lst[i:j+1]\n            if len(set(sub_lst)) == len(sub_lst):\n                if len(sub_lst) > max_len:\n                    max_len = len(sub_lst)\n    return max_len\n\n#Example\nlst = [1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 6, 8, 9]\nprint(Find_Max_Length(lst))\n\n#Output: 3 (sublist [2, 3, 4, 5] has length 3)\n\n#Explanation: The sublist [2, 3, 4, 5] is the longest sublist with no repeating elements.\n\n#Time Complexity: O(n^2) as we are iterating over the list twice. ",
        "generated_testcode": "assert Find_Max_Length(lst) == 3\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    current_word = \"\"\n    in_quotes = False\n    for char in text:\n        if char == '\"':\n            if in_quotes:\n                result.append(current_word)\n                current_word = \"\"\n                in_quotes = False\n            else:\n                in_quotes = True\n        elif in_quotes:\n            current_word += char\n    return result\n\n# Example usage:\ntext = 'The password is \"mypass123\" and the user name is \"john.doe\"'\nprint(extract_values(text)) # Output: [\"mypass123\", \"john.doe\"]\n",
        "generated_testcode": "assert extract_values(r'Hello \"world\"') == [\"world\"]\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # create a dictionary to store count of each element\n    count = {} \n    for i in range(n): \n        if arr[i] in count: \n            count[arr[i]] += 1\n        else: \n            count[arr[i]] = 1\n  \n    # initialize count of unequal pairs \n    pairs = 0\n    for i in range(n): \n        if arr[i] != i + 1: \n            if arr[arr[i] - 1] == i + 1: \n                pairs += count[i + 1] \n            if arr[i] - 1 != i + 1: \n                pairs += 1\n  \n    return pairs \n  \n# get the size of array \nn = int(input())\n# input array elements \narr = list(map(int, input().split())) \n# function call \nprint(count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs(arr=[1,2,3,4,5,6,7,8,9,10],n=7) == 35\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [char for char in word] \n\n# Test the function with a sample input \nprint(split(\"hello\")) \n\n# Output: ['h', 'e', 'l', 'l', 'o'] ",
        "generated_testcode": "assert split(word) == ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']\n\n# Test the function with the string \"hello world\"\nprint(split(\"hello world\")) ",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    # your code here\n    sum = 0\n    while(n>0):\n        sum += n%10\n        n = n//10\n    return sum\n\n# Test the function with the following value\nprint(sum_digits(123)) # Output: 6\nprint(sum_digits(456)) # Output: 15\nprint(sum_digits(1000)) # Output: 1\nprint(sum_digits(0)) # Output: 0\n\n# A function to check if a number is prime or not\ndef is_prime(n):\n    # your code here\n    if n<=1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n\n# Test the function with the following values\nprint(is_prime(5)) # Output: True\nprint(is_prime(7)) # Output: True\nprint(is_prime(8)) # Output: False\nprint(is_prime(12)) # Output: False\n\n# A function to count the number of digits in a number\ndef count_digits(n):\n    # your code here\n    count = 0\n    while(n>0):\n        count += 1\n        n = n//10\n    return count\n\n# Test the function with the following values\nprint(count_digits(12345)) # Output: 4\nprint(count_digits(98)) #",
        "generated_testcode": "assert sum_digits(123) == 6\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [1, 3, 5, 2, 4]\nprint(issort_list(list1)) # Output: True\nprint(issort_list(list2)) # Output: False\n\n# The time complexity of this function is O(n) where n is the length of the list, since it iterates over the list once. ",
        "generated_testcode": "assert issort_list([]), True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return [{} for i in range(length)]\n\n# Example usage:\nempty_list(5)  # output: [{}, {}, {}, {}, {}, {}]\n\n# Write a function to flatten a nested list.\ndef flatten_list(lst):\n    return [item for sublist in lst for item in sublist]\n\n# Example usage:\nflatten_list([[1, 2], [3, 4], [5, 6]])  # output: [1, 2, 3, 4, 5, 6]\n\n# Write a function to find the max and min values in a list.\ndef min_max(lst):\n    return (min(lst), max(lst))\n\n# Example usage:\nmin_max([1, 2, 3, 4, 5, 6])  # output: (1, 6)\n\n# Write a function to concatenate two lists into a single list.\ndef concat_lists(list1, list2):\n    return list1 + list2\n\n# Example usage:\nconcat_lists([1, 2, 3], [4, 5, 6])  # output: [1, 2, 3, 4, 5, 6]\n\n# Write a function to find the length of a list.\ndef list_length(lst):\n    return len(lst)\n\n# Example usage:\nlist_length([1, 2, 3, 4, 5, 6])  # output: ",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n\n# Test the function with an example list\nexample_list = [['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird'], ['car', 'bus', 'plane']]\nprint(sort_sublists(example_list)) # [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog'], ['bus', 'car', 'plane']]\n\n# Write a function to remove duplicates from a list of strings\ndef remove_duplicates(list1):\n    new_list = []\n    for item in list1:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\n# Test the function with an example list\nexample_list = ['apple', 'banana', 'cherry', 'apple', 'dog', 'cat', 'bird', 'dog', 'car', 'bus', 'plane', 'bus']\nprint(remove_duplicates(example_list)) # ['apple', 'banana', 'cherry', 'dog', 'cat', 'bird', 'car', 'plane']\n\n# Write a function to count the number of strings in a list with length greater than or equal to 5\ndef count_long_strings(list1):\n    count = 0\n    for item in list1:\n        if len(item) >= 5:\n            count += 1\n    return count\n\n# Test the function with an",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for char in charlist:\n        list1 = [word for word in list1 if char not in word]\n    return list1\n\n\n# Test the function with an example\nlist1 = [\"hello\", \"world\", \"python\", \"java\", \"php\", \"python programming\", \"python is fun\", \"java is a great language\"]\ncharlist = [\"a\", \"o\", \"is\"]\nprint(remove_words(list1, charlist))  # Output: ['hello', 'world', 'python', 'python', 'java', 'fun', 'great']\n\n# Time Complexity: O(n*m), where n is the length of the list and m is the length of the character list\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert remove_words([\"hello\", \"world\", \"python\", \"programming\"], [\"o\", \"r\"]) == [\"hell\", \"pyth\", \"progammin\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    n = len(arr)\n    i, j = 0, 1\n    max_sum = 0\n    while j < n: \n        diff = arr[j] - arr[i] \n        if diff < K: \n            max_sum = max(max_sum, diff) \n            j += 1\n        else: \n            i += 1\n    return max_sum \n  \n# Driver code \nif __name__ == \"__main__\": \n    arr = [5, 10, 15, 20, 25, 30, 35, 40] \n    N = len(arr) \n    K = 15\n    print(\"Maximum possible sum of disjoint pairs with difference less than\", \n                                            K, \"is\", max_sum_pair_diff_lessthan_K(arr, N, K)) ",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K(arr=[1, 2, 3, 4, 5, 6, 7], N=5, K=3) == 10\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n# Test the function\nprint(two_unique_nums([1, 2, 3, 2, 4, 1, 5, 6, 4]))  # Output: [1, 2, 3, 5, 6]\nprint(two_unique_nums([7, 7, 7, 7, 8, 8, 9, 9, 9, 10, 10]))  # Output: [7, 8, 10]\nprint(two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(two_unique_nums([1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 10, 10]))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\n# Solution:\n# We can use a set to keep track of the unique numbers we",
        "generated_testcode": "assert two_unique_nums(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_list = set(list_data)\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n\n\n# Test cases\nprint(unique_product([1, 2, 2, 3, 4, 4]))  # Output: 24\nprint(unique_product([1, 2, 3, 4, 5]))  # Output: 120\nprint(unique_product([2, 2, 3, 4, 5]))  # Output: 60\nprint(unique_product([1, 1, 1, 1, 1]))  # Output: 1\nprint(unique_product([0, 0, 1, 0, 1]))  # Output: 0\n\n# In the first test case, there are two unique numbers 2 and 3, which multiply to 2*3 = 6. \n# In the second test case, there are two unique numbers 1 and 5, which multiply to 1*5 = 5.\n# In the third test case, there is only one unique number 2, which multiplies to 2*2*3*4*5 = 60. \n# In the fourth test case, there are no unique numbers, so the product is 1. \n# In the fifth test case, there are no unique numbers, so the product is 0. ",
        "generated_testcode": "assert unique_product(list_data=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3628800\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*(22/7)*(r**2+h**2)\n\n# test the function with an example\nprint(surfacearea_cylinder(5,10)) # output: 157.07963267948966475\n\n# Write a function to find the volume of a cylinder\ndef volume_cylinder(r,h):\n    return (22/7)*(r**2)*h\n\n# test the function with an example\nprint(volume_cylinder(5,10)) # output: 78.53981633397448\n\n# Write a function to find the volume of a cone\ndef volume_cone(r,h):\n    return (1/3)*(22/7)*r**2*h\n\n# test the function with an example\nprint(volume_cone(5,10)) # output: 31.41592653589793\n\n# Write a function to find the surface area of a sphere\ndef surfacearea_sphere(r):\n    return 4*(22/7)*r**2\n\n# test the function with an example\nprint(surfacearea_sphere(5)) # output: 314.1592653589793\n\n# Write a function to find the volume of a sphere\ndef volume_sphere(r):\n    return (4/3)*",
        "generated_testcode": "assert surfacearea_cylinder(3, 5) == 314.1592653589793936\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    i=L\n    while i<=R: \n        if A[i]%N != 0: \n            count += 1\n        if count == N: \n            return A[i]\n        i += 1\n    return -1\n  \n# Driver Code \nA = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] \nN = 3\nL = 0\nR = len(A)-1\nprint(count_no(A, N, L, R)) ",
        "generated_testcode": "assert count_no (2,3,10) == 12\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i=0\n    j=0\n    while i<n: \n        if A[i]==B[j]: \n            if j==m-1: \n                return True\n            j+=1\n        i+=1\n    return False\n\n#input array\nA= [1,2,3,4,5,6,7,8]\nB= [3,4,5]\nn=len(A)\nm=len(B)\n#output\nprint(is_Sub_Array(A,B,n,m) ) ",
        "generated_testcode": "assert is_Sub_Array(A,B,n,m) == True\n\n# Test case 1:\nA = [1,2,3,4,5,6,7,8,9]\nB = [2,4,6,8]\nn = len(A)\nm = len(B)\nprint(is_Sub_Array(A,B,n,m)) # Output: True\n\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initialize a variable to store the result\n    result = 1\n    # Iterate from 1 to n\n    for i in range(1,n+1): \n        # Multiply the result with i\n        result *= i\n    # Return the last digit of the result\n    return result%10\n# Test the function\nprint(last_Digit_Factorial(5)) ",
        "generated_testcode": "assert last_Digit_Factorial(5) == 5\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\n# Example usage:\nlist1 = [1,2,3,4]\nlist2 = [5,6,7]\nlist3 = [8,9,10]\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 5, 8, 2, 6, 9, 3, 7, 4, 10]\n\n# Example usage with lists of different length:\nlist1 = [1,2,3]\nlist2 = [4,5]\nlist3 = [6,7,8,9]\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 4, 6, 2, 5, 7, 3, 8]\n\n# Example usage with one empty list:\nlist1 = [1,2,3]\nlist2 = []\nlist3 = [4,5,6]\nprint(interleave_lists(list1,list2,list3)) # Output: [1, 4, 2, 5, 3, 6] ",
        "generated_testcode": "assert interleave_lists([\"a\",\"b\",\"c\"],[1,2,3],[True,False,True]) == [\"a\",1,True,\"b\",2,False,\"c\",3]\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    :param test_tup1: tuple 1\n    :param test_tup2: tuple 2\n    :return: a tuple of dissimilar elements\n    \"\"\"\n    # Convert the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Find the dissimilar elements\n    dissimilar_elements = []\n    for item in test_list1:\n        if item not in test_list2:\n            dissimilar_elements.append(item)\n            \n    for item in test_list2:\n        if item not in test_list1:\n            dissimilar_elements.append(item)\n    \n    # Convert the list back to tuple and return it\n    return tuple(dissimilar_elements)\n\n# Example usage:\nt1 = (1, 2, 3, 4, 5, 6)\nt2 = (4, 5, 6, 7, 8, 9)\nprint(find_dissimilar(t1, t2))  # Output: (1, 2, 3, 7, 8, 9)\n\nt3 = (1, 2, 3, 4, 5)\nt4 = (4, 5, 6, 7, 8)\nprint(find_dissimilar(t3, t4))  # Output: (1, 2, 3, 6,",
        "generated_testcode": "assert find_dissimilar(('apple', 'banana', 'cherry', 'date', 'elderberry'), ('apple', 'banana', 'kiwi', 'elderberry', 'fig')) == ('cherry', 'date', 'kiwi', 'fig')\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if type(test_tuple) == tuple: \n        return tuple(filter(even_fnc, test_tuple))\n    else: \n        return test_tuple \n\ndef is_even(num): \n    return num%2 == 0\n\ntest_tuple = (1, 2, (3, 4, 5, (6, 7, 8, 9), 10, (11, 12, 13, (14, 15)) ) \nprint(even_ele(test_tuple, is_even)) ",
        "generated_testcode": "assert even_ele(('a', 2, (3, 4, 'b', (5, 6, 7), 8, (9, 10), 'c', 11, 12), 13) == (2, 4, 6, 8, 12)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    surface_area = (b**2 + s**2) + (b*s) \n    return surface_area\n\n# take input values from user\nbase = int(input(\"Enter the base of the square pyramid: \"))\nslant = int(input(\"Enter the slant of the square pyramid: \")\n\n# pass the values to the function\nresult = surface_Area(base,slant) \n\n# print the result\nprint(\"The surface area of the square pyramid is:\",result) ",
        "generated_testcode": "assert surface_Area(4, 6) == 144.0\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if len(dict1) == 0:\n        return True\n    else:\n        return False\n\n#Test the function with an empty dictionary\ndict1 = {}\nprint(my_dict(dict1)) ",
        "generated_testcode": "assert my_dict(dict1) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if num == 0 or num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num - i - 1)\n    return catalan // (i + 1)\n\nprint(catalan_number(5))\n\n# Output: 42\n\n# Explanation: \n# The catalan number can be calculated using the formula C(n) = (2n)!/((n+1)!*(n!) \n# The above function calculates the catalan number using the recursive formula. \n# For n=5, the function first calls itself for i=0 and i=1, and then adds the results and then divides by i+1.\n# Now it calls itself for i=0 and i=1 and so on and adds the results until i=4 and then divides the result by i+1. ",
        "generated_testcode": "assert catalan_number(0) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    pattern = r'\\b[a-z]+ly\\b'\n    matches = re.findall(pattern, text)\n    result = {}\n    for i in matches:\n        result[i] = [match.start() for match in re.finditer(i, text)]\n    return result\n\n# Example usage:\ntext = \"She was running quickly and happily.\"\nprint(find_adverbs(text))  # Output: {'quickly': [7], 'happily': [15]}\ntext = \"She was running and happily.\"\nprint(find_adverbs(text))  # Output: {}\ntext = \"She was quickly running and happily.\"\nprint(find_adverbs(text))  # Output: {'quickly': [4], 'happily': [14]} ",
        "generated_testcode": "assert find_adverbs(text) == [('quickly', 1), ('slowly', 5), ('suddenly', 10)]\n\n# Test the function with the following text\ntext = \"The quick brown fox jumps over the lazy dog quickly. The fox was very slowly moving. The dog was moving suddenly.\"\n\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n > len(items):\n        return \"Not enough items\"\n    else:\n        min_heap = []\n        for item in items:\n            heapq.heappush(min_heap, item)\n            if len(min_heap) > n:\n                heapq.heappop(min_heap)\n        return [heapq.heappop(min_heap) for i in range(len(min_heap))]\n\n# Example usage:\nitems = [50, 30, 10, 20, 70, 100, 40, 80, 60]\nn = 3\nprint(expensive_items(items, n)) # Output: [80, 70, 60]\n\n# Time complexity: O(nlogn) - since we need to insert all the elements in the heap, then remove n elements from it, which takes log(n) time ",
        "generated_testcode": "assert expensive_items(items, 3) == [('item3', 100), ('item2', 90), ('item1', 80)]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if k>=n:\n        return a\n    else:\n        return a[:k]+a[k:]+a[:k]\n\n# Test the function\na = [1,2,3,4,5,6,7,8]\nn = len(a)\nk = 3\nprint(split_Arr(a,n,k))\n\n# Output: [3, 4, 5, 6, 7, 8, 1, 2]\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n# Above function will not work for negative k value and will not work if k is greater than n. To solve these issues, we can use the following function:\ndef split_Arr(a,n,k):  \n    if k<0 or k>n:\n        return \"Invalid value of k\"\n    else:\n        return a[:k]+a[k:]+a[:k]\n\na = [1,2,3,4,5,6,7,8]\nn = len(a)\nk = 3\nprint(split_Arr(a,n,k))\n# Output: [1, 2, 3, 4, 5, 6, 7, 8]\n\na = [1,2,3,4,5,6,7,8]\nn = len(a)\nk = 7\nprint(split_Arr(a,n,k))\n# Output: Invalid value of k\n\n# Time",
        "generated_testcode": "assert split_Arr([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],3,2) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"a\",\"b\"]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(listx)\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7]\nprint(list_tuple(my_list)) # Output: (1, 2, 3, 4, 5, 6, 7)\n\n\n# Write a function to find the length of a tuple.\ndef tuple_length(tup):\n    return len(tup)\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 5, 6, 7)\nprint(tuple_length(my_tuple)) # Output: 5\n\n# Write a function to count the number of occurrences of a value in a tuple.\ndef count_occurrences(tup, val):\n    count = 0\n    for i in tup:\n        if i == val:\n            count += 1\n    return count\n\n# Example usage:\nmy_tuple = (1, 2, 3, 3, 4, 5, 3, 6, 3)\nprint(count_occurrences(my_tuple, 3)) # Output: 3\n\n# Write a function to reverse a tuple.\ndef reverse_tuple(tup):\n    return tup[::-1]\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 5, 6)\nprint(reverse_tuple(my_tuple)) # Output:",
        "generated_testcode": "assert list_tuple([\"apple\", \"banana\", \"cherry\"]) == (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(nums) - min(nums)\n\n# Test cases\nprint(big_diff([10, 4, 1, -5, 8, -100, -99, 85, 90])) # Output: 145\nprint(big_diff([5, 2, 3, 9, 1, 6, 0, -12, -5, 8, -30])) # Output: 86\nprint(big_diff([1, 1, 1, 1, 1, 1, 1])) # Output: 0\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Explanation:\n# The function big_diff takes in an array of integers as input and returns the difference between the largest and smallest element in the array. \n# We can use the built-in max() and min() functions in Python to find the maximum and minimum values in the array respectively. \n# We can then subtract the minimum from the maximum to get the difference. \n# The time complexity of the function is O(n) as we need to iterate through the array once to find the maximum and minimum values, and the space complexity is also O(n) as we need to store the maximum and minimum values in memory. ",
        "generated_testcode": "assert big_diff(nums=[10, 2, 5, 8, 12, 15]) == 13\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    perfect_squares = []\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            perfect_squares.append(i)\n    return perfect_squares\n\n# Test the function\nprint(perfect_squares(1, 50))\nprint(perfect_squares(10, 100))\nprint(perfect_squares(100, 1000)) ",
        "generated_testcode": "assert perfect_squares(1, 25) == [1, 4, 9, 16, 25]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    r = sqrt(x**2 + y**2)\n    theta = atan(y/x)\n    return (r*cos(theta), r*sin(theta))\n\n# Example usage:\nprint(polar_rect(3, 4)) # Output: (5.0, 5.0)\n\n# Write a function to convert rectangular coordinates to polar coordinates.\ndef rect_polar(x,y):\n    r = sqrt(x**2 + y**2)\n    theta = atan(y/x)\n    return (r, theta)\n\n# Example usage:\nprint(rect_polar(5, 5)) # Output: (7.071067811865475555, 0.7853981633974483)\n\n# Create a list of tuples with the coordinates of the points (1,1), (2,2), (3,3) and (4,4)\npts = [(1,1), (2,2), (3,3), (4,4)]\n\n# Convert all the points to polar coordinates using the rect_polar function\npolar_pts = []\nfor p in pts:\n    polar_pts.append(rect_polar(*p))\n\nprint(polar_pts) # Output: [(1.414213562373095045, 0.78539816",
        "generated_testcode": "assert polar_rect(3, 45) == (3, 3)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n\n# Sample Testing\nmy_list = [1, 2, 3, 4, 5, 6] \nprint(swap_List(my_list)) # Output: [6, 2, 3, 4, 5, 1] ",
        "generated_testcode": "assert swap_List([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"elderberry\", \"banana\", \"cherry\", \"apple\"]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 1\n    if k > n-k: \n        k = n-k\n    for i in range(0 , k): \n        res *= (n-i) \n        res //= (i+1) \n    return res \n  \n# Function to find the sum of product of binomial co-efficients \ndef sum_of_product_of_binomial_coefficients(n, k): \n    sum = 0\n    for i in range(k+1): \n        sum += binomial_Coeff(n, i) \n    return sum \n  \n# Driver code \nn, k = 5, 2\nprint(\"Sum of product of binomial co-efficients is \", sum_of_product_of_binomial_coefficients(n, k)) ",
        "generated_testcode": "assert binomial_Coeff(5,3) == 10\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if '.' in ip:\n        ip = ip.lstrip('0').lstrip('0.')\n        ip = ip.replace('0.', '.')\n    else:\n        ip = ip.lstrip('0')\n    return ip\n\n# Test the function\nip = '001.000.00.001'\nprint(removezero_ip(ip)) # output: 1.0.0.1\nip = '010.0.001'\nprint(removezero_ip(ip)) # output: 10.0.1\nip = '00000'\nprint(removezero_ip(ip)) # output: 0\nip = '0.0.0.0'\nprint(removezero_ip(ip)) # output: 0.0.0\nip = '0.0.0.0.0'\nprint(removezero_ip(ip)) # output: 0.0.0.0\nip = '0000.0.00.00'\nprint(removezero_ip(ip)) # output: 0.0.0.0\nip = '0.0.000.00.0.0'\nprint(removezero_ip(ip)) # output: 0.0.0.0.0\nip = '00000.0.00.0000.00.0'\nprint(removezero_ip(ip)) # output: 0.0.",
        "generated_testcode": "assert removezero_ip(ip='192.0.168.001') == '192.168.1'\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return abs(even_sum - odd_sum)\n\n# Test the function\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 6\nprint(diff_even_odd([1, 3, 5, 7, 9]))  # Output: 0\nprint(diff_even_odd([2, 4, 6, 8]))  # Output: 0\nprint(diff_even_odd([1, 2, 3, 4, 6, 8, 10]))  # Output: 6\n\n# Another approach using list comprehension and built-in functions\ndef diff_even_odd(list1):\n    even_sum = sum([num for num in list1 if num % 2 == 0])\n    odd_sum = sum([num for num in list1 if num % 2 != 0])\n    return abs(even_sum - odd_sum)\n\n# Test the function\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 6\nprint(diff_even_odd([1, 3, 5",
        "generated_testcode": "assert diff_even_odd(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 6\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(str1)\n    arr1 = [0] * n \n    arr2 = [0] * n \n  \n    # Store the positions of all characters of str1[] \n    for i in range(n) : \n        arr1[ord(str1[i]) - ord('0')] = i \n  \n    # Store the positions of all characters of str2[] \n    for i in range(n) : \n        arr2[ord(str2[i]) - ord('0')] = i \n  \n    # Initialize two counts, count of same and different digits \n    sameCount = 0\n    diffCount = 0\n  \n    # Count the number of different and same digits \n    for i in range(n) : \n        if (arr1[i] == arr2[i]) : \n            sameCount += 1\n        else : \n            diffCount += 1\n  \n    # Return the minimum of total number of swaps needed \n    # and difference between count of same digits \n    return min(diffCount, n - (sameCount) ) \n  \n# Driver code \nstr1 = \"1001\"\nstr2 = \"1100\"\nprint(min_Swaps(str1, str2)) # Output: 2 ",
        "generated_testcode": "assert min_Swaps(str1=\"101010\",str2=\"111000\") == 1\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return len(tuple_list)\n\n#Example usage:\nprint(tuple_size((1,2,3,4)) # Output: 3\nprint(tuple_size(() # Output: 0\nprint(tuple_size(\"Hello\") # Output: 5\n\n#Example usage:\nprint(tuple_size((1,2,3,4)) # Output: 3\nprint(tuple_size(()) # Output: 0\nprint(tuple_size(\"Hello\") # Output: 5\n\n#Test your function with the examples above. ",
        "generated_testcode": "assert tuple_size((\"apple\", \"banana\", \"cherry\") == 3)\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    i = 0\n    j = 0\n    while k > 0:\n        if i == m:\n            return arr2[j]\n        if j == n:\n            return arr1[i]\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n    return min(arr1[i], arr2[j])\n\narr1 = [1, 3, 5, 7, 9]\narr2 = [2, 4, 6, 8, 10]\nm = len(arr1)\nn = len(arr2)\nk = 4\nprint(find_kth(arr1, arr2, m, n, k))  # Output: 5\n\n# Time Complexity: O(k)\n# Space Complexity: O(1)\n\n# Example:\n# arr1 = [1, 3, 5, 7, 9]\n# arr2 = [2, 4, 6, 8, 10]\n# m = 4\n# n = 4\n# k = 4\n# kth smallest element is 5.\n# 1st element is 1 in arr1, 2nd element is 2 in arr2, 3rd element is 3 in arr1, 4th element is 4 in arr2.\n# The 4th smallest element is 5.\n# Output: 5\n\n# arr",
        "generated_testcode": "assert find_kth(arr1=[1, 3, 5, 7, 9], arr2=[2, 4, 6, 8, 10], m=4, n=4, k=5) == 6\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    # Convert the number into string\n    num_str = str(number)\n    # Get the length of the number\n    length = len(num_str)\n    # Initialize sum variable\n    sum = 0\n    # Get the cube of each digit of the number\n    for digit in num_str:\n        sum += int(digit) ** length\n    # If the sum is equal to the number, then it is an armstrong number\n    if sum == number:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(armstrong_number(153))\nprint(armstrong_number(371))\nprint(armstrong_number(1634))\nprint(armstrong_number(9474))\nprint(armstrong_number(9475))\nprint(armstrong_number(9476))\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n\nprint(sum_average(5)) # (15, 3.0)\nprint(sum_average(10)) # (55, 5.5)\n\n# Write a function to find the square of a number\ndef square(num):\n    return num ** 2\n\nprint(square(5)) # 25\nprint(square(10)) # 100\n\n# Write a function to find the cube of a number\ndef cube(num):\n    return num ** 3\n\nprint(cube(3)) # 27\nprint(cube(5)) # 125\n\n# Write a function to find the factorial of a number\ndef factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n\nprint(factorial(0)) # 1\nprint(factorial(3)) # 6\nprint(factorial(5)) # 120\n\n# Write a function to find the sum of first n natural numbers using recursion\ndef sum_recursion(number):\n    if number == 0:\n        return 0\n    else:\n        return number + sum_recursion(number-1)\n\nprint(sum_recursion(5)) # 15\n\n# Write a function to find",
        "generated_testcode": "assert sum_average(5) == (15, 3)\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return (n & 1) == 0\n  \nn = 10\nif is_Even(n) : \n    print(\"Even\") \nelse : \n    print(\"Odd\") ",
        "generated_testcode": "assert is_Even(4) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "       self.a = a \n        self.b = b \n  \n    # Function to find the longest chain \n    def longestChain(self): \n        n = len(self.a) \n        self.a.sort(key = lambda x: x[1]) \n        self.b.sort(key = lambda x: x[1]) \n  \n        # Initialize the count of longest chain as 0 \n        maxLen = 0\n  \n        # Initialize the last element of chain to be -1 \n        last = -1\n  \n        # Initialize the position of chain ending elements \n        pos = [0]*n \n  \n        # Traverse through each pair \n        for i in range(n): \n            # If the current pair is the first pair or its first element is greater than the \n            # last element of the chain \n            if last == -1 or self.a[i][0] > self.b[last][1]: \n                j = self.binarySearch(self.b, self.a[i][1], 0, n-1, i) \n  \n                # If there is a chain ending after the current element \n                if j != -1: \n                    pos[i] = j \n                    maxLen = max(maxLen, j-i+1) \n                    last = j \n            else: \n                pos[i] = last \n  \n        # Return the count of longest chain \n        return maxLen \n  ",
        "generated_testcode": "assert __init__(1, 2) == 2\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return -1\n\nprint(first_repeated_char(\"geeksforgeeks\"))  # Output: e\nprint(first_repeated_char(\"hello\"))  # Output: e\nprint(first_repeated_char(\"abcdefg\"))  # Output: -1\n\n# using dictionary to find the first repeated character in a given string\ndef first_repeated_char(str1):\n    dict = {}\n    for char in str1:\n        if char in dict:\n            return char\n        else:\n            dict[char] = 1\n    return -1\n\nprint(first_repeated_char(\"geeksforgeeks\"))  # Output: e\nprint(first_repeated_char(\"hello\"))  # Output: e\nprint(first_repeated_char(\"abcdefg\"))  # Output: -1 ",
        "generated_testcode": "assert first_repeated_char(input_string) == expected_output\n\n# Test the function with the following input and expected output\ninput_string = \"hello\"\nexpected_output = \"l\"\n\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 1:\n        return n\n    ludics = [2]\n    for i in range(3, n+1, 2):\n        if all(i % j != 0 for j in range(2, int(i**0.5) + 1, 2)):\n            ludics.append(i)\n    return ludics[-1]\n\ndef get_lucid_number(n):\n    lucid_num = get_ludic(n)\n    while True:\n        if lucid_num == n:\n            return lucid_num\n        else:\n            lucid_num = get_ludic(lucid_num + 1)\n            if lucid_num > n:\n                return lucid_num - 1\n\n# Test the function\nprint(get_lucid_number(100)) # Output: 71\nprint(get_lucid_number(1000)) # Output: 89\nprint(get_lucid_number(10000)) # Output: 709\nprint(get_lucid_number(100000)) # Output: 5777\nprint(get_lucid_number(10000000)) # Output: 577961\nprint(get_lucid_number(100000000)) # Output: 577967\nprint(get_lucid_",
        "generated_testcode": "assert get_ludic(10) == 5\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)\n\n# Test the function\nprint(reverse_words(\"hello world\"))  # \"olleh dlrow\"\nprint(reverse_words(\"This is an example\"))  # \"sihT si na elpmaxe\"\nprint(reverse_words(\"racecar\"))  # \"racecar\"\nprint(reverse_words(\"the quick brown fox\"))  # \"ehT kciuq nworb xof\"\n\n# Test the function with a string containing punctuation\nprint(reverse_words(\"This, is an example!\"))  # \"sihT ,ni raelpxe\"\nprint(reverse_words(\"Hello, world!\"))  # \"olleH ,dlrow!\"\n",
        "generated_testcode": "assert reverse_words(None) == None\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if num<2:\n        return False\n    for i in range(2,int(num**0.5)+1):\n        if num%i==0:\n            return False\n    return True\n\n# Main function to check if a number is a circular prime number\ndef circular_prime(num):\n    # Convert the number to string\n    str_num = str(num)\n    # Get the length of the string\n    length = len(str_num)\n    # Create a list to store the circular numbers\n    circular_list = []\n    # Get the circular numbers\n    for i in range(length):\n        temp = str_num[i:] + str_num[:i]\n        circular_list.append(int(temp))\n    # Check if each number in the list is a prime number\n    for i in circular_list:\n        if prime_num(i)==False:\n            return False\n    return True\n\n# Test the function\nnum = 197\nif circular_prime(num):\n    print(num,\"is a circular prime number\")\nelse:\n    print(num,\"is not a circular prime number\")\n\n# Output: 197 is a circular prime number\n\nnum = 198\nif circular_prime(num):\n    print(num,\"is a circular prime number\")\nelse:\n    print(num,\"is not a circular prime number\")\n\n# Output: 198 is not a circular prime number ",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi = 3.14159265359\n    radian = degree * pi / 180\n    return radian\n\n# Test the function with a few values\nprint(radian_degree(90))  # Output: 1.57079632679\nprint(radian_degree(180)) # Output: 3.14159265359\nprint(radian_degree(360)) # Output: 6.2831853071\n\n# Create a function to convert radians to degrees.\ndef degree_radian(radian):\n    pi = 3.14159265359\n    degree = radian * 180 / pi\n    return degree\n\n# Test the function with a few values\nprint(degree_radian(1.57079632679)) # Output: 90.0\nprint(degree_radian(3.14159265359)) # Output: 180.0\nprint(degree_radian(6.2831853071)) # Output: 360.0\n\n# Convert the given number to radians and then to degrees.\nprint(degree_radian(radian_degree(45)) # Output: 45.0\n```\n\n### Exercise 4\n\n",
        "generated_testcode": "assert radian_degree(90) == 1.57079632679\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    pattern_regex = re.compile(re.escape(pattern))\n    match = pattern_regex.search(text)\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = \"fox\"\nprint(find_literals(text, pattern)) # Output: (10, 13)\n\n# Output: (10, 13)\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = \"dog\"\nprint(find_literals(text, pattern)) # Output: (29, 32)\n\n# Output: (29, 32)\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = \"cat\"\nprint(find_literals(text, pattern)) # Output: None\n\n# Output: None\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = \"o\"\nprint(find_literals(text, pattern)) # Output: (4, 5)\n\n# Output: (4, 5)\n\ntext = \"The quick brown fox jumps over the lazy dog\"\npattern = \"o\"\nprint(find_literals(text, pattern)) # Output: (21, 22)\n\n# Output: (21, 22) ",
        "generated_testcode": "assert find_literals(text=\"Hello world\", pattern=\"world\") == (6, 11)\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    bell = [[0 for x in range(n+1)] for y in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] = 1\n        for j in range(1, i): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n# Test the function \nn = 4\nprint(\"Bell Number for n =\", n, \"is\", bell_Number(n)) ",
        "generated_testcode": "assert bell_Number(0) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if A>B:\n        A,B=B,A\n    def min_val(x,A,B):\n        return A+B*(x//N)\n    def max_val(x,A,B):\n        return A+(x//N+1)*B\n    min_val_arr=[min_val(i,A,B) for i in range(N)]\n    max_val_arr=[max_val(i,A,B) for i in range(N)]\n    min_val_arr.sort()\n    max_val_arr.sort()\n    return min_val_arr[0]\n\n# Test the function\nprint(floor_Min(2,6,4)) # Output: 2\nprint(floor_Min(4,8,6)) # Output: 4\nprint(floor_Min(10,3,2)) # Output: 10\nprint(floor_Min(2,2,6)) # Output: 2\nprint(floor_Min(6,2,4)) # Output: 6\nprint(floor_Min(3,3,6)) # Output: 3\nprint(floor_Min(5,2,1)) # Output: 5\nprint(floor_Min(1,1,1)) # Output: 1\nprint(floor_Min(4,5,3)) # Output: 4\nprint(floor_Min(7,8,4)) # Output: 7 ",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if L > len(list1):\n        return \"The list is too short\"\n    else:\n        del list1[L-1]\n        return list1\n\n#Testing the function\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(remove_kth_element(list1, 3))\n\n#Output: [1, 2, 4, 5, 6, 7, 8, 9, 10]\n\n#Explanation: The function removes the third element of the list, which is 4. ",
        "generated_testcode": "assert remove_kth_element([\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\"], 2) == [\"apple\", \"orange\", \"kiwi\"]\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return max(list(zip(*test_list))[N-1])\n\n# Testing the function\ntest_list = [(2, 3, 4), (5, 4, 6), (9, 1, 7)]\nprint(max_of_nth(test_list, 1)) # Output: 9\nprint(max_of_nth(test_list, 2)) # Output: 6\nprint(max_of_nth(test_list, 3)) # Output: 7\ntest_list = [(3, 1, 4), (1, 5, 2), (9, 10, 11)]\nprint(max_of_nth(test_list, 1)) # Output: 9\nprint(max_of_nth(test_list, 2)) # Output: 10\nprint(max_of_nth(test_list, 3)) # Output: 11\n\n# Testing the function with empty tuple\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(max_of_nth(test_list, 0)) # Output: 7\nprint(max_of_nth(test_list, 1)) # Output: 9\nprint(max_of_nth(test_list, 3)) # Output: ValueError: tuple index out of range\ntest_list = [(1, 2, 3), (4, 5, ",
        "generated_testcode": "assert max_of_nth(test_list, 1) == 10\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    first = []  \n    last = []  \n    for i in range(len(lst)):  \n        first.append(lst[i][0])  \n        last.append(lst[i][-1])  \n    return first + last  \n\nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  \nprint(merge(lst)) ",
        "generated_testcode": "assert merge([[1,2,3], [4,5,6], [7,8,9]] ) == [[1, 7], [2, 8], [3, 9]]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] > max_value:\n            max_value = test_list[i][1]\n    return max_value\n\n# Test the function with the following data\ntest_list = [('Alice', 23), ('Bob', 35), ('Charlie', 27), ('David', 40), ('Eve', 30)]\nprint(maximum_value(test_list))  # Output: 40\n\n\n# Using the max() function\ndef maximum_value(test_list):\n    return max(test_list, key=lambda x: x[1])[1]\n\n# Test the function with the same data as above\nprint(maximum_value(test_list))  # Output: 40 ",
        "generated_testcode": "assert maximum_value(test_list) == (3, 'John', 25)\n\n# Test the function with the given test_list\ntest_list = [('Alice', 23, 34), ('Bob', 19, 27), ('John', 25, 30), ('Sara', 21, 22), ('David', 26, 32)]\nprint(maximum_value(test_list)) # Output: (3, 'John', 25)\n\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    cummulative_sum = 0\n    cummulative_list = []\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n        cummulative_list.append(cummulative_sum)\n    return cummulative_list\n\n# Test the function with a sample tuple\ntest_list = (1,2,3,4,5,6)\nprint(cummulative_sum(test_list))\n\n# Output: [1, 3, 6, 10, 15, 21]\n\n# Explanation:\n# The function iterates through the list and adds each value to the cummulative_sum variable and then appends it to the cummulative_list.\n# The list [1, 3, 6, 10, 15, 21] is returned as the result. ",
        "generated_testcode": "assert cummulative_sum(test_list) == (10, 15, 25, 40, 55, 70)\n\n# The expected output should be (10, 15, 25, 40, 55, 70)\n# The function should return a tuple with the cumulative sum of all the values in the given list. ",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    total = 0\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n    return total/count\n\n# Test the function with example tuples\ntup = ((1,2,3),(4,5,6),(7,8,9))\nprint(average_tuple(tup)) # Output: 5.0\n\ntup = ((1,2,3,4),(5,6,7),(8,9,10,11)\nprint(average_tuple(tup)) # Output: 5.5\n\ntup = (1,2,3)\nprint(average_tuple(tup)) # Output: TypeError: unsupported operand type(s) for /: 'int' and 'str' ",
        "generated_testcode": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9)) ) == 5.0\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n\n# Test the function with the given tuples\nprint(tuple_modulo((2,4,6,8,10,12), (3,5,7,11,13)) # Output: (2, 1, 1, 8, 1)\nprint(tuple_modulo((10,20,30,40,50), (2,5,7,11)) # Output: (0, 0, 3, 3)\nprint(tuple_modulo((2,4,6,8,10,12), (3,5,7,11,13,17)) # Output: TypeError\n",
        "generated_testcode": "assert tuple_modulo((2, 4, 6, 8, 10), (3, 5, 7, 11) ) == (2, 4, 2, 10)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    if a == 0 and b == 0: \n        return 0\n    elif b == 0: \n        return 1\n    else: \n        jumps = 0\n        i = 2\n        while (a % i == 0 or b % i == 0) and i * i <= max(a, b): \n            if a % i == 0: \n                a //= i \n            if b % i == 0: \n                b //= i \n            jumps += 1\n            i += 1\n        jumps += 1\n        return jumps ",
        "generated_testcode": "assert min_Jumps(1, 0, 2) == 1\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x/y, nums1,nums2))\n\n#Test the function with two lists\nnums1 = [10,20,30,40,50]\nnums2 = [2,4,6,8,10]\nprint(div_list(nums1,nums2))\n\n#Output: [5.0, 5.0, 5.0, 5.0]\n\n# Write a function to check if a number is prime using map and lambda function.\ndef is_prime(nums):\n    return list(map(lambda x: 'Yes' if x>1 and all(x%i!=0 for i in range(2,x)) else 'No', nums))\n\n#Test the function with a list of numbers\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(is_prime(numbers))\n\n#Output: ['Yes', 'Yes', 'No', 'Yes', 'No', 'No', 'No', 'No']\n\n# Write a function to filter only prime numbers using filter and lambda function.\ndef filter_primes(numbers):\n    return list(filter(lambda x: all(x%i!=0 for i in range(2,x)) if x>1 else False, numbers))\n\n#Test the function with a list of numbers\nnumbers = [2, 3, 4, 5, 6, ",
        "generated_testcode": "assert div_list([1,2,3,4,5], [2,2,2,2]) == [0.5,1.0,1.5,2.5]\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result = char + result\n    return result\n\n# Test the function with the given example\nprint(move_num('a1b2c3d4e5f6'))  # Output: '123456'\n\n# Test the function with a string without any numbers\nprint(move_num('hello world'))  # Output: ''\n\n# Test the function with a string with only numbers\nprint(move_num('1234567890'))  # Output: '1234567890'\n\n# Test the function with a string with digits and non-digit characters\nprint(move_num('a1b2c3d4e5f6g7h8i9j0k'))  # Output: '1234567890'\n",
        "generated_testcode": "assert move_num(test_str) == \"Hello World\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    a.sort()\n    i, j = 0, 0\n    max_len = 0\n    max_subset = []\n    for k in range(n):\n        if j == n or a[j] % a[i] != 0:\n            i += 1\n            if i == j:\n                i = k\n            if j - i + 1 > max_len:\n                max_len = j - i + 1\n                max_subset = a[i:j+1]\n        else:\n            j += 1\n    return max_subset\n\n# Test cases\nprint(largest_subset([4, 2, 10, 16, 8, 5, 6], 5)) # Output: [4, 8, 10]\nprint(largest_subset([1, 2, 3, 4, 5, 6, 7], 5)) # Output: [1, 2, 4, 6]\nprint(largest_subset([1, 3, 5, 9, 15, 27, 30, 36], 6)) # Output: [3, 6, 9, 15, 30]\nprint(largest_subset([1, 2, 3, 4, 5, 6, 7, 8], 6)) # Output: [1, 2, 4, 6, 8]\nprint(largest_subset([1",
        "generated_testcode": "assert largest_subset(a=[2, 3, 4, 6, 8, 12, 18, 24], n=6) == [2, 4, 6, 12, 18]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for string in test_list:\n        if string.isnumeric():\n            result.append(str(int(string) + K))\n        else:\n            result.append(string)\n    return result\n\n\n# Example usage:\ntest_list = [\"12\", \"hello\", \"world\", \"34\", \"56\", \"78\", \"99\"]\nK = 5\nprint(increment_numerics(test_list, K))  # Output: [\"17\", \"hello\", \"world\", \"39\", \"51\", \"83\", \"104\"]\n\n# Test the function with the given test cases\ndef test_function(test_case):\n    test_input, expected_output = test_case\n    output = increment_numerics(*test_input)\n    if output == expected_output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_cases = [\n    ([[\"12\", \"hello\", \"world\", \"34\", \"56\", \"78\", \"99\"], 5], [\"17\", \"hello\", \"world\", \"39\", \"51\", \"83\", \"104\"]),\n    ([[\"12\", \"hello\", \"world\", \"34\", \"56\", \"78\", \"99\"], 10], [\"22\", \"hello\", \"world\", \"44\", \"66\", \"88\", \"109\"]),\n    ([[\"1\", \"2\",",
        "generated_testcode": "assert increment_numerics([\"hello123\", \"world456\", \"python789\"], 10) == [\"hello1333\", \"world5666\", \"python899\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n % 2 == 0:\n        return (find_kth(arr1, arr2, n // 2) + find_kth(arr1, arr2, n // 2 + 1)) / 2.0\n    else:\n        return find_kth(arr1, arr2, n // 2 + 1)\n\ndef find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, len(arr1))\n    j = k - i\n    if arr1[i - 1] <= arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n\narr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nn = len(arr1)\nprint(\"Median is:\", get_median(arr1, arr2, n)) ",
        "generated_testcode": "assert get_median(arr1=[1, 3, 5, 7, 9], arr2=[2, 4, 6, 8], n=4) == 5\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x: x**n,nums))\nprint(nth_nums([1,2,3,4,5],2)) #[1,4,9,25]\nprint(nth_nums([1,2,3,4,5],3)) #[1,8,27,125]\nprint(nth_nums([1,2,3,4,5],4)) #[1,16,81,625]\n\n# Write a function to convert a list of strings to a list of integers using lambda function\ndef str_to_int(nums):\n    return list(map(lambda x: int(x),nums))\nprint(str_to_int(['1','2','3','4','5'])) #[1,2,3,4,5]\n\n# Write a function to convert a list of integers to a list of strings using lambda function\ndef int_to_str(nums):\n    return list(map(lambda x: str(x),nums))\nprint(int_to_str([1,2,3,4,5])) #['1','2','3','4','5']\n\n# Write a function to convert all the characters in a string to uppercase using lambda function\ndef str_to_upper(string):\n    return list(map(lambda x: x.upper(),string))\nprint(str_to_upper(\"hello world\")) #['H','E','L','L','O',' ','W','O','R','L','D']",
        "generated_testcode": "assert nth_nums(nums=[1,2,3,4,5],n=2) == [1,4,9,16]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    upper_case = 0\n    for char in string:\n        if char.isupper():\n            upper_case += 1\n    return upper_case == len(string)\n\n# Test the function with the given string\nprint(is_upper(\"PYTHON\")) # Output: True\nprint(is_upper(\"Python\")) # Output: False\n\n# Test the function with an empty string\nprint(is_upper(\"\")) # Output: True ",
        "generated_testcode": "assert is_upper(string) == True\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    length = len(newList) \n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n\n#Example usage:\nnewList = [1, 2, 3, 4, 5, 6, 7]\nprint(swap_List(newList)) ",
        "generated_testcode": "assert swap_List([\"apple\", \"banana\", \"cherry\"]) == [\"cherry\", \"banana\", \"apple\"]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    from math import sqrt\n    return 0.5 * r**2\n\ndef semicircle_area(r) : \n    from math import pi\n    return 0.5 * pi * r**2\n\ndef max_triangle_inscribed_semicircle(r) :\n    area_triangle = triangle_area(r)\n    area_semicircle = semicircle_area(r)\n    return area_semicircle * (r**2) / area_triangle\n\nr = 10\nprint(\"Maximum area of triangle that can be inscribed in a semicircle of radius\", r, \"is\", max_triangle_inscribed_semicircle(r))\n\n# Output : Maximum area of triangle that can be inscribed in a semicircle of radius 10 is 250.0\n\n# Note : The area of the triangle is 0.5 * r^2 and the area of the semicircle is 0.5 * pi * r^2. The largest triangle that can be inscribed in the semicircle has a side equal to the diameter of the semicircle.\n# Therefore, the maximum area of the triangle is given by area_semicircle * (r^2) / area_triangle. ",
        "generated_testcode": "assert triangle_area(3) == 9.0\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if start == end:\n        return start\n    mid = (start + end) // 2\n    left = find_First_Missing(array,start,mid)\n    right = find_First_Max(array,mid+1,end)\n    if array[mid] == array[mid+1]:\n        return max(left,right)\n    else:\n        return min(left,right)\ndef find_First_Max(array,start,end):\n    if start == end:\n        return start\n    mid = (start + end) // 2\n    left = find_First_Max(array,start,mid)\n    right = find_First_Max(array,mid+1,end)\n    if array[mid] > array[mid+1]:\n        return left\n    else:\n        return right\ndef find_Smallest(array,start,end):\n    if start == end:\n        return start\n    mid = (start + end) // 2\n    left = find_Smallest(array,start,mid)\n    right = find_Smallest(array,mid+1,end)\n    if array[mid] < array[mid+1]:\n        return left\n    else:\n        return right\ndef smallest_missing(array):\n    if array[0] != 0:\n        return 0\n    start = 0\n    end = len(array) - 1\n    first_missing = find_First_Missing(array,start,end)\n    smallest",
        "generated_testcode": "assert find_First_Missing(array=[3,7,1,2,8,4,5,6],start=0,end=5) == 0\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return string.replace(' ', '%20')\n\n# Test cases\nprint(replace_spaces('Hello World')) # Output: Hello%20World\nprint(replace_spaces('This is a string')) # Output: This%20is%20a%20string\nprint(replace_spaces('This string has spaces')) # Output: This%20string%20has%20spaces \nprint(replace_spaces('Python is awesome')) # Output: Python%20is%20awesome\nprint(replace_spaces('Python is awesome')) # Output: Python%20is%20awesome\n\n# Explanation:\n# The replace() method returns a new string where all occurrences of a substring in the original string are replaced with a new substring. In this case, we are replacing all the spaces with the character %20. The %20 represents a space character in a URL. ",
        "generated_testcode": "assert replace_spaces(None) == None\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    return [x for x in list if isinstance(x, int) and x%2==0]\n\ndef Odd(list): \n    return [x for x in list if isinstance(x, int) and x%2!=0]\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \"Hello\", 12, \"World\"]\n\nprint(\"Even numbers in the list are:\", Split(list)) \nprint(\"Odd numbers in the list are:\", Odd(list)) \n\n# Output:\n# Even numbers in the list are: [2, 4, 6, 8, 10]\n# Odd numbers in the list are: [1, 3, 5, 7] ",
        "generated_testcode": "assert Split([\"apple\", 2, \"cat\", 4, \"dog\", 6, \"elephant\", 8, \"fox\", 10, \"goat\"]) == [2, 4, 6, 8, 10]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(-1,2): \n        for j in range(-1,2): \n            if(i == 0 and j == 0): \n                continue\n            sub.append((ele[0] + i, ele[1] + j)) \n    return sub\n\n# Given a list of coordinates, extract all the adjacent coordinates of each coordinate and append them to the list\ndef adjac_list(lst): \n    adj_lst = [] \n    for i in range(len(lst)): \n        sub = adjac(lst[i]) \n        adj_lst.extend(sub) \n    return adj_lst \n\n# Function to check if a given coordinate is within the bounds of the matrix\ndef in_bounds(r, c, n): \n    if(r >= 0 and c >= 0 and r < n and c < n): \n        return True\n    else: \n        return False\n\n# Function to check if a given matrix cell is empty or not\ndef is_empty(matrix, r, c, n): \n    if(matrix[r][c] == \"X\"): \n        return True\n    else: \n        return False\n\n# Function to count the number of adjacent bombs of a given coordinate\ndef count_bombs(matrix, r, c, n): \n    count = 0\n    adj_lst = adjac((r,c)[:] + [n]\n    for i in adj_lst: \n        if(in_bounds(",
        "generated_testcode": "assert adjac((1, 2) ) == [(1, 3), (1, 1), (2, 2), (3, 2), (2, 1)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return re.sub(r'\\s+', '_', text)\n\n# Test the function with the given string\ntext = \"This is a test string with spaces\"\nprint(replace_spaces(text))\n\n# Expected output: \"This_is_a_test_string_with_spaces\"\n\n# Replace all occurrences of a particular word in a given string by using regex\ndef replace_word(text, old_word, new_word):\n    return re.sub(r'\\b'+old_word+r'\\b', new_word, text)\n\n# Test the function with the given string and the old and new word\ntext = \"This is a test string to replace a word\"\nold_word = \"test\"\nnew_word = \"example\"\nprint(replace_word(text, old_word, new_word))\n\n# Expected output: \"This is a example string to replace a word\" ",
        "generated_testcode": "assert replace_spaces(text=\"hello world\") == \"hello_world\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    zero_list = []\n    non_zero_list = []\n    for i in num_list:\n        if i == 0:\n            zero_list.append(i)\n        else:\n            non_zero_list.append(i)\n    return non_zero_list + zero_list\n\n#Example usage:\nprint(move_zero([0,1,0,2,3,0,4,5,0,6,7,0,8,9,0,10,0,11,12,0])) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0]\nprint(move_zero([1,2,3,4,5,6,7,8,9,10,11,12])) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(move_zero([0,0,0,0,0,0,0,0])) # Output: [0, 0, 0, 0, 0, 0, 0]\nprint(move_zero([1,0,0,0,2,0,0,3,0,0])) # Output: [1, 2, 3",
        "generated_testcode": "assert move_zero(num_list=[1, 2, 0, 3, 4, 0, 5, 6, 0, 7, 8, 0, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    max_sum = 0\n    for i in range(n-1): \n        for j in range(i+1, n): \n            max_sum = max(max_sum, arr[i]^arr[j]) \n    return max_sum \n  \n# Testing the function \narr = [1, 2, 3, 4, 5] \nn = len(arr) \nprint(pair_OR_Sum(arr,n)) ",
        "generated_testcode": "assert pair_OR_Sum(arr=[1,2,3,4,5],n=4) == 7\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        if i % 2 == 0: \n            sum += i**4\n    return sum \n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of fourth power of first\",n,\"even natural numbers is:\",even_Power_Sum(n)) ",
        "generated_testcode": "assert even_Power_Sum(5) == 225\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import heapq\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n\n# Example usage:\nprint(heap_sort([3, 2, 1, 4, 5, 6, 7, 8, 9, 10, 12, 15, 13, 11])) # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\n# This function has a time complexity of O(n log n) and a space complexity of O(n)\n# because we use a heap to store all the values and then pop off one by one. ",
        "generated_testcode": "assert heap_sort(iterable) == sorted(iterable)\n\n# Test the function with a list of integers\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a == 0: \n        return \"a cannot be zero\"\n    elif b**2 - 4*a*c > 0: \n        return \"roots are real and unequal\"\n    elif b**2 - 4*a*c == 0: \n        return \"roots are equal and real\"\n    elif b**2 - 4*a*c < 0: \n        return \"roots are imaginary\"\n    else: \n        return \"roots are real and equal\"\n    \na = int(input(\"Enter a: \")) \nb = int(input(\"Enter b: \")) \nc = int(input(\"Enter c: \")) \n\nprint(Check_Solution(a, b, c)) ",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if actual_cost > sale_amount:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(noprofit_noloss(10000, 800)) # Output: False\nprint(noprofit_noloss(1000, 200)) # Output: False\nprint(noprofit_noloss(10000, 1200)) # Output: True\nprint(noprofit_noloss(500, 400)) # Output: True\nprint(noprofit_noloss(5000, 300)) # Output: False ",
        "generated_testcode": "assert noprofit_noloss(100, 100) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return wci\n\n# Example usage:\n# print(wind_chill(10, -10))  # Output: 23.54\n# print(wind_chill(30, 0))   # Output: 29.42\n# print(wind_chill(40, -10)) # Output: 30.30\n\n# Write a function to calculate the heat index.\ndef heat_index(t,rh):\n    index = 0.5 * (t + 61.0 + ((t - 68.0) * 1.2) + (rh * 0.094))\n    if index >= 80.0:\n        index = -42.379 + 2.04901523 * t + 10.143333127 * rh - .224755541 * t * rh - .00683783 * t**2 - .05481717 * rh**2 - .00122874 * t**2 * rh + .00008528 * t * rh**2 + .0000000199 *",
        "generated_testcode": "assert wind_chill(10, 0) == 10\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if name[0].isupper()]\n    # Calculate the sum of the length of the names in the list\n    total_length = sum(len(name) for name in sample_names)\n    return total_length\n\n# Example usage:\nsample_names = [\"Alice\", \"Bob\", \"carol\", \"David\", \"Eve\", \"Frank\"]\nprint(sample_nam(sample_names))  # Output: 12 (Alice and Frank have been removed, so the total length of the remaining names is 10)\n\n# Test your function with the following list of names:\nnames = [\"Alice\", \"Bob\", \"carol\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"henry\", \"Isaac\", \"Jane\", \"king\", \"Oliver\", \"Paul\", \"Queen\", \"Rita\", \"Sophie\", \"Timothy\", \"Ursula\", \"Victor\", \"Wendy\"]\nprint(sample_nam(names))  # Output: 48\n\n# Test your function with an empty list\nempty_list = []\nprint(sample_nam(empty_list))  # Output: 0 ",
        "generated_testcode": "assert sample_nam([\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\"]) == 12\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    items = items.replace(\"(\", \"\")\n    items = items.replace(\")\", \"\")\n    return items\n\n\n\n# Test case\nprint(remove_parenthesis(\"(hello, world)\"))\n# Output: \"hello, world\"\nprint(remove_parenthesis(\"(hello), (world)\"))\n# Output: \"hello), world\"\nprint(remove_parenthesis(\"(hello), (world)\"))\n# Output: \"hello), world\"\nprint(remove_parenthesis(\"(hello), (world) and (Python)\"))\n# Output: \"hello), world and Python\"\nprint(remove_parenthesis(\"(hello), (world) and (Python) 123\"))\n# Output: \"hello), world and Python 123\"\nprint(remove_parenthesis(\"hello, world\"))\n# Output: \"hello, world\"\nprint(remove_parenthesis(\"(hello, (world)\"))\n# Output: \"hello, (world\"\nprint(remove_parenthesis(\"hello, (world)\"))\n# Output: \"hello, (world)\"\nprint(remove_parenthesis(\"hello, world)\"))\n# Output: \"hello, world\"\nprint(remove_parenthesis(\"hello, (world\"))\n# Output: \"hello, (world\" ",
        "generated_testcode": "assert remove_parenthesis(items=\"(hello world)\") == \"hello world\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return n * (3 * n - 1) // 2\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    nonagonal = is_nonagonal(n)\n    print(f\"The nth nonagonal number is {nonagonal}\") ",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in new_list:\n            new_list.append(test_list[i])\n    return new_list\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (4, 5, 6), (7, 8, 9), (1, 2, 3)]\nprint(remove_similar_row(test_list)) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n\n# Alternative Solution:\ndef remove_similar_row(test_list):\n    return list(set(test_list))\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (1, 2, 3), (7, 8, 9), (4, 5, 6), (7, 8, 9), (1, 2, 3)]\nprint(remove_similar_row(test_list)) # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)] ",
        "generated_testcode": "assert remove_similar_row(test_list) == expected_output\n\n# Test case 1:\ntest_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3), (2, 3, 4), (3, 4, 5), (1, 2, 3)]\nexpected_output = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n\n",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.search(r'\\bz\\w+z\\b', text)\n\nprint(text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog\")) # Output: None\nprint(text_match_wordz_middle(\"Python is an interpreted, high-level programming language\")) # Output: None\nprint(text_match_wordz_middle(\"My sister zipped her jacket\")) # Output: <re.Match object; span=(12, 18), match='zipped'>\nprint(text_match_wordz_middle(\"I love zebras\")) # Output: <re.Match object; span=(5, 9), match='zebra'> ",
        "generated_testcode": "assert text_match_wordz_middle([\"apple\", \"banana\", \"zebra\", \"dog\", \"zebra\", \"cat\", \"elephant\", \"zone\", \"ant\", \"python\", \"zone\"]) == [\"zebra\", \"zone\"]\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    input[0:k] = reversed(input[0:k]) \n    return input \n  \n#input array \ninput = [1, 2, 3, 4, 5, 6, 7, 8, 9] \n#position upto which array is to be reversed \nk = 3 \n  \n#calling function \nprint(reverse_Array_Upto_K(input, k)) ",
        "generated_testcode": "assert reverse_Array_Upto_K(input=[1, 2, 3, 4, 5, 6, 7, 8, 9], k=3) == [3, 2, 1, 4, 5, 6, 7, 8]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    product = 1\n    for i in range(len(val)) : \n        product *= val[i] \n    return product \n  \n# Driver code \ntuples = [(1, 2, 3), (2, 3, 4), (5, 6, 7, 8), (8, 9)] \nk = 2\n  \n# using for loop \nfor tup in tuples : \n    if len(tup) >= k : \n        print(get_product(tup[0:k+1]) * 1) ",
        "generated_testcode": "assert get_product(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p') == 'j'\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,N+1):\n        if i**3<=N:\n            if i**3%K==0:\n                count+=1\n        else:\n            break\n    return count\n\n#Test the function\nN=10\nK=2\nprint(No_of_cubes(N,K))\n\n#Time Complexity: O(N)\n#Space Complexity: O(1)\n\n#Test Cases\n#Input 1:\n#N = 10, K = 2\n#Output: 2\n#Explanation: There are only two cubes of size 2 in the cube of size 10, which are 2^3 and 3^3.\n\n#Input 2:\n#N = 10, K = 3\n#Output: 2\n#Explanation: There are only two cubes of size 3 in the cube of size 10, which are 1^3 and 3^3.\n\n#Input 3:\n#N = 10, K = 4\n#Output: 1\n#Explanation: There is only one cube of size 4 in the cube of size 10, which is 2^3. ",
        "generated_testcode": "assert No_of_cubes(10,2) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = []\n    word = \"\"\n    for char in text:\n        if char.isupper():\n            if word:\n                words.append(word)\n                word = \"\"\n        word += char\n    words.append(word)\n    return words\n\nprint(split_upperstring(\"HelloWorld\")) # should return ['Hello', 'World']\nprint(split_upperstring(\"HELLOWorld\")) # should return ['HELLO', 'World']\nprint(split_upperstring(\"HELLOWorldTHISisALLINUPPERCASE\")) # should return ['HELLO', 'World', 'THIS', 'IS', 'ALL', 'IN', 'UPPERCASE']\nprint(split_upperstring(\"hellothisismixtedcase\")) # should return ['hellothisismixtedcase']\nprint(split_upperstring(\"\")) # should return []\n\n# test your function with the examples above and any additional examples you can think of\n\n# You can use the isupper() method to check if a character is uppercase, and the join() method to concatenate words back to a string\n\n# You can also use the split() method to split the string at uppercase letters, but it's not recommended because it will split words at any uppercase letter, even if they are not at the start of a word. \n# Example: \"HelloWorld\" will be split to ['H', 'e', 'llo', 'W', 'orld'] with split() method. ",
        "generated_testcode": "assert split_upperstring(None) == []\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    n = len(lst)\n    for i in range(0,n-1,2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst\n\nprint(exchange_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n# output: [2, 1, 4, 3, 6, 5, 8, 7, 10] ",
        "generated_testcode": "assert exchange_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [\"b\", \"a\", \"d\", \"c\", \"f\", \"e\", \"g\"]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sum(nums[m:n+1])\n\n#Example usage:\nprint(sum_Range_list([1,2,3,4,5,6,7,8,9], 2, 5)) #Output: 18 (The sum of the numbers between index 2 and 5 is 3+4+5+6=12)\nprint(sum_Range_list([1,2,3,4,5,6,7,8,9], 0, 2)) #Output: 6 (The sum of the numbers between index 0 and 2 is 1+2+3=6) ",
        "generated_testcode": "assert sum_Range_list(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=2, n=5) == 22\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if(n!=m):\n        return False\n    else:\n        for i in range(n):\n            if(arr1[i]!=arr2[i]):\n                return False\n        return True\n\n# test the function\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\narr3 = [1,2,3,4,6]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal(arr1,arr2,n,m) ) # should return True\nprint(are_Equal(arr1,arr3,n,m) ) # should return False\n\n# Another way to write the same function using python built-in function\ndef are_Equal_builtIn(arr1,arr2,n,m):\n    if(n!=m):\n        return False\n    else:\n        return arr1==arr2\n\n# test the function\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\narr3 = [1,2,3,4,6]\nn = len(arr1)\nm = len(arr2)\nprint(are_Equal_builtIn(arr1,arr2,n,m) ) # should return True\nprint(are_Equal_builtIn(arr1,arr3,n,m) ) # should return False\n\n\n# Write a function to find the length of the longest common",
        "generated_testcode": "assert are_Equal(arr1,arr2,n,m) == True\n\n# Test the function with the following inputs\narr1 = [1,2,3,4,5]\narr2 = [1,2,3,4,5]\nn = 4\nm = 4\n\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in test_tup1:\n        if i in test_tup2:\n            continue\n        else:\n            return False\n    return True\n\n# Test the function with two tuples\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (1, 2, 3, 4, 5, 6, 7)\nresult = check_subset(test_tup1, test_tup2)\nprint(result) # Should print True\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (7, 8, 9, 10)\nresult = check_subset(test_tup1, test_tup2)\nprint(result) # Should print False\n\n# Test the function with two tuples of different sizes\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (1, 2, 3, 4, 5, 6)\nresult = check_subset(test_tup1, test_tup2)\nprint(result) # Should print False ",
        "generated_testcode": "assert check_subset(('a', 'b', 'c'), ('a', 'b', 'c', 'd')) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(test_list[0])):\n        new_list.append(tuple([row[i] for row in test_list]))\n    return new_list\n\n\n# Example usage:\ntest_list = ((1,2,3), (4,5,6), (7,8,9))\nprint(matrix_to_list(test_list))  # Output: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n",
        "generated_testcode": "assert matrix_to_list(test_list) == [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\n# Test the function with the given test_list\ntest_list = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(matrix_to_list(test_list)) ",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    from collections import defaultdict\n    my_dict = defaultdict(list)\n    for key, value in l:\n        my_dict[key].append(value)\n    return my_dict\n\n# Test cases\nprint(grouping_dictionary([(1, 'a'), (2, 'b'), (1, 'c'), (2, 'd'), (3, 'e')])  # should return {1: ['a', 'c'], 2: ['b', 'd'], 3: ['e']}\nprint(grouping_dictionary([('a', 1), ('a', 2), ('b', 3), ('b', 4)])  # should return {'a': [1, 2], 'b': [3, 4]}\nprint(grouping_dictionary([(1, 2), (2, 3), (1, 4), (2, 5)])  # should return {1: [2, 4], 2: [3, 5]}\nprint(grouping_dictionary([])  # should return {}\nprint(grouping_dictionary([(1, 1)])  # should return {1: [1]}\nprint(grouping_dictionary([('a', 'b'), ('a', 'c'), ('b', 'd'), ('a', 'e')])  # should return {'a': ['b', 'c', 'e'], 'b': ['d']} ",
        "generated_testcode": "assert grouping_dictionary([\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\", \"orange\", \"banana\", \"apple\", \"kiwi\"]) == {\"apple\": [\"apple\", \"apple\", \"apple\"], \"banana\": [\"banana\", \"banana\"], \"cherry\": [\"cherry\", \"cherry\"], \"orange\": [\"orange\"], \"kiwi\": [\"kiwi\"]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2*(l+b)\n\n# Test the function with a rectangle of length 5 and breadth 7\nprint(rectangle_perimeter(5,7))\n\n# Output: 24\n\n# Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n    return l*b\n\n# Test the function with a rectangle of length 5 and breadth 7\nprint(rectangle_area(5,7))\n\n# Output: 35\n\n# Write a function to find the area of a triangle given the base and height.\ndef triangle_area(base,height):\n    return 0.5*base*height\n\n# Test the function with a triangle of base 6 and height 8\nprint(triangle_area(6,8))\n\n# Output: 24.0\n\n# Write a function to find the area of a circle given its radius.\ndef circle_area(radius):\n    import math\n    return math.pi*radius**2\n\n# Test the function with a circle of radius 5\nprint(circle_area(5))\n\n# Output: 78.53975\n\n# Write a function to find the circumference of a circle given its radius.\ndef circle_circumference(radius):\n    import math\n    return 2*math.pi*radius\n\n# Test the function with a circle of radius 5\nprint(circle_circumference(5))\n\n# Output: 31.41591",
        "generated_testcode": "assert rectangle_perimeter(5, 10) == 20\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1) : \n        sum += i ** 5\n    return sum\n\n# Testing the function with n = 10\nprint(fifth_Power_Sum(10)) \n\n# Output: 326400 ",
        "generated_testcode": "assert fifth_Power_Sum(5) == 13265\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    a.sort()\n    b.sort()\n    i,j = 0,0\n    diff = 0\n    while i < n and j < n:\n        diff += abs(a[i] - b[j])\n        i += 1\n        j += 1\n    return diff\n\n# Test the function\na = [1, 4, 2, 5, 7]\nb = [2, 3, 4, 5]\nn = len(a)\nprint(find_Min_Sum(a, b, n))\n# Output: 2\n\n# Explanation: \n# a[0] and b[0] have the minimum absolute difference of |1-2| = 1 \n# a[1] and b[1] have the minimum absolute difference of |4-3| = 1 \n# a[2] and b[2] have the minimum absolute difference of |2-4| = 2 \n# a[3] and b[3] have the minimum absolute difference of |5-5| = 0 \n# The sum of all the absolute differences is 1+1+2+0 = 4 ",
        "generated_testcode": "assert find_Min_Sum(a,b,n) == 1\n\n# Test the function with the following inputs\na = [1, 4, 8, 10]\nb = [2, 6, 8, 11]\nn = 4\nprint(find_Min_Sum(a,b,n)) # Output: 1\n\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    fact = 1\n    for i in range(1, n + 1) : \n        fact = fact * i \n    while fact >= 10 : \n        fact //= 10\n        first_digit = fact % 10\n    return first_digit \n\n# Test the function\nn = int(input(\"Enter a number: \") )\nprint(\"The first digit in the factorial of\", n, \"is\", first_Digit(n)) ",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    max_count = 0\n    max_item = None\n    for item in set(list1):\n        if list1.count(item) > max_count:\n            max_count = list1.count(item)\n            max_item = item\n    return max_item\n\n# Test the function with the example list\nprint(max_occurrences([1, 2, 3, 2, 4, 5, 2, 6, 3, 2, 1, 7, 8, 2, 9, 0, 2, 1, 3, 2, 4, 5])) ",
        "generated_testcode": "assert max_occurrences([\"apple\", \"banana\", \"orange\", \"apple\", \"banana\", \"orange\", \"apple\", \"kiwi\"]) == \"apple\"\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(0, len(x)): \n        j = i + 1\n        while j < len(x): \n            if x[i] == x[j] and x[i] != 0: \n                x[i] = 0\n                x[j] = 0\n            j += 1\n    for i in x: \n        if i != 0: \n            print(i, end = \" \") \n  \n  \n# Driver code \nx = [1, 2, 3, 2, 4, 5, 3, 5, 1, 2] \nRepeat(x) \n\n# Output: 1 2 3 4 5 \n# Explanation: The function prints the unique elements of the list ",
        "generated_testcode": "assert Repeat([]), []\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes two ranges as input and returns a list of points which are not in both the ranges.\n    \n    Arguments:\n    l1,r1 : the left and right endpoints of range 1\n    l2,r2 : the left and right endpoints of range 2\n    \n    Returns:\n    A list of points which are not in both the ranges.\n    \n    Example:\n    find_Points(1,3,4,6) will return [1,2,3,4,5,6] as 1,2,3 are in range 1 and 4,5,6 are in range 2.\n    \"\"\"\n    points = []\n    for i in range(l1,r1+1):\n        points.append(i)\n    for i in range(l2,r2+1):\n        if i not in points:\n            points.append(i)\n    return points\n\n# test the function\nprint(find_Points(1,3,4,6)) # [1, 2, 3, 4, 5, 6]\nprint(find_Points(2,5,3,6)) # [2, 3, 4, 5, 6] ",
        "generated_testcode": "assert find_Points(1,5,3,7) == (1,7)\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n <= 2: \n        return 0\n    incl = arr[0] \n    excl = 0\n    excl_new = 0\n    for i in range(1, n): \n        # Current excluding sum\n        excl_new = max(incl, excl) \n  \n        # Current including sum\n        incl = excl + arr[i] \n  \n        # Previous excluding sum\n        excl = excl_new \n      \n        # Update max_sum \n        if i == 2: \n            max_sum = excl_new \n        elif i >= 2: \n            max_sum = max(max_sum, incl, excl_new) \n          \n    return max_sum ",
        "generated_testcode": "assert max_sum_of_three_consecutive(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=3) == 24\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dict2 = {}\n    for i in sorted(dict1.items()):\n        dict2[i[0]] = i[1]\n    return dict2\n\nprint(sorted_dict({'a':3, 'b':2, 'c':1, 'd':4, 'e':5, 'f':3}))\n\n# Output: {'c': 1, 'b': 2, 'a': 3, 'f': 3, 'd': 4, 'e': 5}\n\n# Example 3: Sort a dictionary by values in descending order\ndef sort_dict_by_value(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\nprint(sort_dict_by_value({'a':3, 'b':2, 'c':1, 'd':4, 'e':5, 'f':3}))\n\n# Output: {'e': 5, 'd': 4, 'f': 3, 'a': 3, 'b': 2, 'c': 1}\n\n# Example 4: Sort a dictionary by both keys and values in descending order\ndef sort_dict_by_key_and_value(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: (-x[1], x[0]))\n    return sorted_dict\n\nprint(sort_dict_by_key_and_value({'",
        "generated_testcode": "assert sorted_dict(dict1) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# Test the function with the following dictionary\ndict1 = {'c': 3, 'a': 1, 'b': 2, 'd': 4}\nprint(sorted_dict(dict1))\n\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Find the number of digits in x\n    count = len(str(x))\n    \n    # Create a list of possible values of k that can be divisible by x\n    k_list = []\n    for i in range(10**(count-1), 10**count):\n        if i % x == y:\n            k_list.append(i)\n    \n    # Return the largest value in the list\n    return max(k_list)\n\n# Test the function\nprint(find_max_val(10, 5, 0)) # Output: 999995\nprint(find_max_val(3, 2, 0)) # Output: 999\nprint(find_max_val(100, 3, 0)) # Output: 99999999\nprint(find_max_val(10, 5, 1)) # Output: 999950\nprint(find_max_val(2, 3, 0)) # Output: 98\nprint(find_max_val(7, 3, 1)) # Output: 9999999998\nprint(find_max_val(10, 2, 1)) # Output: 99990\n\n# Explanation:\n# The function works by generating a list of all possible values of k that are divisible by x and have the remainder y when divided by x.\n# It then returns the largest",
        "generated_testcode": "assert find_max_val(10, 3, 2) == 9\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    for i in range(2, n+1, 2) : \n        sum += i \n        count += 1\n    return sum / count \n\n# Test the function \nn = 10\nprint(\"Average of even numbers from 2 to\", n, \"is\", average_Even(n)) ",
        "generated_testcode": "assert average_Even(10) == 6\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(num_list) == 0:\n        return []\n    else:\n        return num_list[1:] + [num_list[0]]\n\n#Test cases\nprint(move_last([1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1])\nprint(move_last([]) == [])\nprint(move_last([1]) == [1])\nprint(move_last([1, 2]) == [2, 1])\n\n# Output:\n# True\n# True\n# True\n# True\n# True\n\n# Testing with a list with multiple elements\nprint(move_last([1, 2, 3, 4, 5, 6, 7]) == [2, 3, 4, 5, 6, 1])\n# Output:\n# True\n\n# Testing with an empty list\nprint(move_last([]) == []\n# Output:\n# True\n\n# Testing with a list with only one element\nprint(move_last([1]) == [1]\n# Output:\n# True ",
        "generated_testcode": "assert move_last(num_list=[1, 2, 3, 4, 5]) == [2, 3, 4, 5, 1]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n#Test the function\nstring = \"Hello, world!\"\nchar = \"l\"\nprint(count_char(string,char)) # output: 3 ",
        "generated_testcode": "assert count_char(string=\"hello world\", char=\"l\") == 3\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(string)): \n        if string[i] in vowels: \n            count += 1\n    return count \n\n# Driver code \nstring = input(\"Enter a string: \")\nvowels = ['a', 'e', 'i', 'o', 'u'] \nprint(\"Number of vowels in the string:\", Check_Vow(string, vowels)) \n\n# Output:\n# Enter a string: hello world \n# Number of vowels in the string: 3 \n",
        "generated_testcode": "assert Check_Vow(string, vowels) == 3\n\n# Test the function with the string \"Hello World\" and the vowels \"aeiouAEIOU\"\n# The output should be 3. ",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = string.replace(char, \"\") \n    return result \n  \n# Driver code \nstring = \"geeksforgeeks is a great platform to learn programming\"\nprint(replace(string, \"e\")) ",
        "generated_testcode": "assert replace(string=\"hello world\", char=\"l\") == \"heo word\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    ip_regex = \"^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$\"\n    if re.match(ip_regex, Ip):\n        return True\n    else:\n        return False\n\n# Test the function with an example\nprint(check_IP(\"192.168.1.1\")) # True\nprint(check_IP(\"192.256.1.1\")) # False\n\n# Another way to write the same function using a pattern match\ndef check_IP(Ip): \n    pattern = re.compile(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\")\n    return pattern.match(Ip)\n\n# Test the function with an example\nprint(check_IP(\"192.168.1.1\")) # True\nprint(check_IP(\"192.256.1.1\")) # False\n\n# We can also use the ipaddress module to check the validity of an IP address\nimport ipaddress\ndef check_IP(Ip): \n    try:\n        ipaddress.ip_",
        "generated_testcode": "assert check_IP(Ip) == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in range(len(nums) - 1):\n        if nums[i] < nums[i + 1]:\n            return False\n    return True\n\n# Example usage:\nprint(decreasing_trend([5, 4, 3, 2, 1]))  # True\nprint(decreasing_trend([5, 4, 4, 3, 2]))  # False\nprint(decreasing_trend([1, 2, 3, 4, 5]))  # False\nprint(decreasing_trend([1, 1, 1, 1]))    # False\nprint(decreasing_trend([1]))           # True\nprint(decreasing_trend([]))           # False ",
        "generated_testcode": "assert decreasing_trend(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (n & -n).bit_length()\n\n# Driver code \nn = 10\nprint(get_Pos_Of_Right_most_Set_Bit(n)) ",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(12) == 4\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if num1>=num2 and num1>=num3: \n        return num1 \n    elif num2>=num1 and num2>=num3: \n        return num2 \n    else: \n        return num3 \n\n# Test the function with sample values \nprint(max_of_three(2, 5, 10))  # Output: 10\nprint(max_of_three(10, 3, 1))  # Output: 10\nprint(max_of_three(9, 5, 3))   # Output: 9 ",
        "generated_testcode": "assert max_of_three(10,20,30) == 30\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i in list:\n        result = result*10 + i\n    return result\n\n#Test the function \nprint(convert([1,2,3,4])) # output: 1234\nprint(convert([4,5,6])) # output: 456 ",
        "generated_testcode": "assert convert([]), 0\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = string.split()\n    words = list(set(words))\n    return ' '.join(words)\n\n# Test the function\nstring = \"the quick brown fox jumps over the lazy dog the quick brown dog\"\nprint(remove_duplicate(string)) # Output: \"brown dog fox jumps lazy over the quick the\"\n",
        "generated_testcode": "assert remove_duplicate(string) == \"hello world\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if (x+y) > n and (x+y) < m:\n        return 20\n    else:\n        return x+y\nprint(sum_nums(3, 7, 10, 20)) # Output: 10\nprint(sum_nums(2, 15, 5, 20)) # Output: 20 \nprint(sum_nums(10, 10, 10, 20)) # Output: 20 \nprint(sum_nums(5, 6, 10, 20)) # Output: 20 \nprint(sum_nums(10, 20, 5, 20)) # Output: 20 ",
        "generated_testcode": "assert sum_nums(10, 20, 10, 30) == 30\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    import re\n    text1 = re.sub(r'[^a-zA-Z0-9]+', '', text1)\n    return text1\n\ntext1 = \"Hello, World! 123\"\nprint(remove_extra_char(text1)) # Output: HelloWorld123\n",
        "generated_testcode": "assert remove_extra_char(text1) == \"HelloWorld123\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False\n\n# Sample Input\na = 3\nb = 4\nc = 5\n\n# Sample Output: True (Triangle is valid)\nprint(validity_triangle(a,b,c)) ",
        "generated_testcode": "assert validity_triangle(3,4,5) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return str1.replace(' ', '')\n\n# Test the function with sample input\nprint(remove_spaces('hello world')) # Expected output: \"helloworld\"\nprint(remove_spaces('Python Programming')) # Expected output: \"PythonProgramming\" ",
        "generated_testcode": "assert remove_spaces(None) == None\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list(ditionary.keys())[key]\n\n#Test the function with an example\nditionary = {'apple': 1, 'banana': 2, 'cherry': 3, 'date': 4}\nprint(access_key(ditionary,2)) # should output 'cherry'\n\n#Explanation:\n# The keys() method of a dictionary returns a list of the keys in the dictionary, and the index() method returns the index of a given element in a list. \n# So, we first convert the dictionary keys into a list and then access the element at the specified index to get the key. ",
        "generated_testcode": "assert access_key(ditionary, 0) == \"apple\"\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    prev = nums[0]\n    for num in nums:\n        if num < prev:\n            return False\n        prev = num\n    return True\n\n# Test cases\nprint(increasing_trend([1,2,3,4,5,6])) # True\nprint(increasing_trend([1,2,3,4,5,4,3,2,1])) # False\nprint(increasing_trend([1,1,2,3,4,5,6])) # True\nprint(increasing_trend([1,1,1,1,2,2,2,3,3,4,4,4,5,5,6,6])) # True\nprint(increasing_trend([1,2,3,4,5,6,5,4,3,2,1])) # False\n",
        "generated_testcode": "assert increasing_trend(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 2\n    while i*i <= n: \n        if (n % i) == 0: \n            return i \n        i += 1\n    return n \n  \n# driver code \nn = 28\nprint(\"Smallest divisor of 28 is\",smallest_Divisor(n)) \n  \n# This will output: Smallest divisor of 28 is 2 ",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x*y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [5,6,7,8]\nprint(mul_list(nums1,nums2))\n\n# Output: [5, 12, 21, 32, 40]\n\n# Example 2:\n# Write a function to find the sum of two lists using map and lambda function.\ndef add_list(nums1,nums2):\n    return list(map(lambda x,y: x+y,nums1,nums2))\n\nnums1 = [1,2,3,4,5]\nnums2 = [5,6,7,8]\nprint(add_list(nums1,nums2))\n\n# Output: [6, 8, 10, 12, 13]\n\n# Example 3:\n# Write a function to create a list of cubes of elements in a given list using map and lambda function.\ndef cube(nums):\n    return list(map(lambda x: x**3,nums))\n\nnums = [1,2,3,4,5]\nprint(cube(nums))\n\n# Output: [1, 8, 27, 64, 125]\n\n# Example 4:\n# Write a function to find the square of elements in a given",
        "generated_testcode": "assert mul_list(list(range(1,5)),list(range(1,5)) == [1,4,9,16,25]\n\n# Test the function with the given input and check if the output is correct. ",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(int(n ** 0.5) + 1) : \n        j = 0\n        while i * i + j * j <= n : \n            if i * i + j * j == n : \n                return True\n            j += 1\n    return False\n\n# Testing the function\nn = 29\nif sum_Square(n) : \n    print(n, \"can be represented as sum of two squares\") \nelse : \n    print(n, \"cannot be represented as sum of two squares\") ",
        "generated_testcode": "assert sum_Square(16) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "13B",
        "pass": 9,
        "correct": true,
        "answer": "    count = 0\n    for i in str: \n        if i == x: \n            count += 1\n    return count\n\n# Test the function\nstr = \"Hello World\"\nx = \"l\"\nprint(count_Char(str, x)) # Output: 3 ",
        "generated_testcode": "assert count_Char(str, x) == 3\n\n# Test the function with the following inputs\nstr = \"hello world\"\nx = \"l\"\nprint(count_Char(str, x)) # Output: 3\n\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    # Iterate over all numbers from 2 to n\n    for num in range(2, n + 1): \n        # Check if a number is prime\n        if all(num % i != 0 for i in range(2, num)): \n            sum += num \n    return sum\n  \n# Test the function \nn = 10\nprint(\"Sum of primes between 1 and\", n, \"is\", sum_Of_Primes(n)) ",
        "generated_testcode": "assert sum_Of_Primes(10) == 17\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    freq_dict = {}\n    for i in test_tup:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# Test the function with the given test tuple\ntest_tup = (1, 2, 3, 4, 2, 5, 1, 6, 2, 7, 8, 3)\nprint(freq_element(test_tup))\n\n# Output: {1: 2, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\n\n# The output shows the frequency of each element in the tuple.\n\n# Example 2: Write a function to find the frequency of each character in a string.\ndef freq_string(test_str):\n    freq_dict = {}\n    for i in test_str:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n\n# Test the function with the given string\ntest_str = \"Hello World\"\nprint(freq_string(test_str))\n\n# Output: {'H': 1, 'e': 1, 'l': 3, 'o': 2,",
        "generated_testcode": "assert freq_element(('a', 'b', 'c', 'a', 'd', 'a', 'c') == {'a': 3, 'b': 1, 'c': 2, 'd': 1}\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n\nprint(recur_gcd(27, 18))  # Output: 9\n\n\n# 27 and 18 are co-prime numbers\n# 27 = 3 x 3 x 3\n# 18 = 2 x 3 x 3\n# Their gcd is 3\n",
        "generated_testcode": "assert recur_gcd(27, 18) == 9\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return math.sqrt(a**2+b**2)\n\n#Testing the function\nprint(len_complex(3,4)) # 5.0\nprint(len_complex(0,0)) # 0.0\nprint(len_complex(-3,4)) # 5.0\nprint(len_complex(5,5)) # 7.071067811865475555",
        "generated_testcode": "assert len_complex(3+4j) == 5\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1 or n == 0:\n        return 0\n    if arr[0] == 0:\n        return -1\n    max_reach = arr[0]\n    steps = arr[0]\n    jumps = 1\n    i = 1\n    while i < n:\n        if i + arr[i] > max_reach:\n            max_reach = i + arr[i]\n        if max_reach >= n - 1:\n            return jumps\n        if i + steps > max_reach:\n            return -1\n        steps = max(steps, arr[i])\n        jumps += 1\n        i += 1\n        while i > max_reach:\n            max_reach = max(max_reach, arr[max_reach] + max_reach)\n            if max_reach >= n - 1:\n                return jumps\n            if i + steps > max_reach:\n                return -1\n            steps -= 1\n    return -1\n\n\narr = [1, 3, 5, 8, 9, 2, 6, 7, 6, 9]\nn = len(arr)\nprint(min_jumps(arr, n))\n\n## the above function returns the minimum number of jumps required to reach the end of the array, or -1 if it is not possible. ",
        "generated_testcode": "assert min_jumps(arr=[1, 3, 5, 8, 9, 2, 6, 7, 6, 9, 1, 1, 1, 0, 2], n=10) == 3\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 1\n    for i in nums:\n        if i == 0:\n            return 0\n        result *= i\n    return result\n\n# Test cases\nprint(mul_consecutive_nums([1, 2, 3, 4, 5])) # Should return 24\nprint(mul_consecutive_nums([0, 2, 3, 4, 5])) # Should return 0\nprint(mul_consecutive_nums([-1, -2, -3, -4, -5])) # Should return -120\nprint(mul_consecutive_nums([1, 0, 3, 4, 5])) # Should return 0\nprint(mul_consecutive_nums([1, 2, 3, 0, 4])) # Should return 0\nprint(mul_consecutive_nums([1, 2, 3, -4, 5])) # Should return -24",
        "generated_testcode": "assert mul_consecutive_nums(range(1, 6)) == 120\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    output = {}\n    for element in test_list:\n        if element[1] not in output:\n            output[element[1]] = []\n        output[element[1].append(element[0])\n    return output\n\ntest_list = [(1, 'a'), (2, 'b'), (3, 'a'), (4, 'c'), (5, 'a'), (6, 'c'), (7, 'b')]\nprint(group_element(test_list))\n\n# Output: {'a': [1, 3, 5], 'b': [2, 7], 'c': [4, 6]}\n\n# Explanation: In the output, the key is the 2nd element of each tuple and the value is a list of 1st elements corresponding to that key.\n\n# The function uses a dictionary to store the elements. ",
        "generated_testcode": "assert group_element(test_list) == {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n\n# The output should be {'a': [1, 2, 3], 'b': [4, 5, 6], 'c': [7, 8, 9]}\n# The function should group the elements based on the second element of the tuple and return a dictionary with the first element as key and the list of elements as value. ",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if N < 0 or N > 100: \n        return -1\n\n    # Calculate the factorial of N \n    fact = 1\n    for i in range(1, N + 1): \n        fact = (fact * i) \n\n    # print the last two digits of the factorial \n    print(fact % 100) \n\n# Driver code \nN = 5\nlast_Two_Digits(N) \n\n# This will output 5 ",
        "generated_testcode": "assert last_Two_Digits(5) == 5\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub(r'\\s+', ' ', text1)\n# test the function\ntext1 = \"Multiple    spaces    are    present   in this    string.\"\nnew_text1 = remove_multiple_spaces(text1)\nprint(new_text1)\n\n# Output: \"Multiple spaces are present in this string.\" ",
        "generated_testcode": "assert remove_multiple_spaces(text1) == \"Hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_values = set()\n    for key in test_dict:\n        if type(test_dict[key]) == list:\n            for value in test_dict[key]:\n                unique_values.add(value)\n    return unique_values\n\n# Test the function with the following dictionary\ntest_dict = {'a': [1, 2, 3, 4], 'b': [2, 3, 5], 'c': [4, 5, 6], 'd': [5, 6, 7]}\nprint(extract_unique(test_dict))\n\n# Output: {1, 2, 3, 4, 5, 6, 7}\n\n# Explanation: The function iterates through each key in the dictionary, and if the value associated with the key is a list, it adds each element in the list to a set (to ensure uniqueness). Finally, it returns the set of unique values. In this case, the output is {1, 2, 3, 4, 5, 6, 7}. ",
        "generated_testcode": "assert extract_unique(test_dict) == {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n\n# Test the function with the following dictionary\ntest_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    # Your code goes here\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < i:\n            return False\n    return True\n\n# Test cases\nprint(check_greater((5, 3, 2), (2, 1, 4)))  # Output: False\nprint(check_greater((1, 2, 3), (0, 1, 2)))  # Output: True\nprint(check_greater((1, 2, 3), (1, 2, 3)))  # Output: True\nprint(check_greater((5, 3, 2), (0, 1, 4)))  # Output: True ",
        "generated_testcode": "assert check_greater((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    #list1 = ['a', 'b', 'c']\n    #list2 = [1, 2, 3]\n    #print(list(zip(list1, list2)) # Output: [('a', 1), ('b', 2), ('c', 3)]\n    return list(zip(list1, list2))\n\n# Test the function with example inputs\nprint(zip_list(['a', 'b', 'c'], [1, 2, 3])) # Output: [('a', 1), ('b', 2), ('c', 3)]\nprint(zip_list(['apple', 'banana', 'cherry'], [5, 6, 7, 8])) # Output: [('apple', 5), ('banana', 6), ('cherry', 7)]\nprint(zip_list(['x', 'y', 'z'], [9, 10])) # Output: [('x', 9), ('y', 10)]\nprint(zip_list([], [])) # Output: []\n\n# Write a function to remove duplicates from a list\ndef remove_duplicates(lst):\n    #lst = [1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8]\n    #new_lst = list(set(lst)) # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n    return list(set(lst))\n\n",
        "generated_testcode": "assert zip_list([\"a\",\"b\",\"c\"],[1,2,3]) == [(\"a\",1),(\"b\",2),(\"c\",3)]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in array_nums:\n        if i % 2 == 0:\n            count += 1\n    return count\n\narray_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(count_even(array_nums))\n\n# lambda function implementation\ncount_even_lambda = lambda array_nums: len([i for i in array_nums if i % 2 == 0])\nprint(count_even_lambda(array_nums))\n\n# using filter and len\ncount_even_filter = lambda array_nums: len(list(filter(lambda x: x % 2 == 0, array_nums))\nprint(count_even_filter(array_nums))\n\n# using reduce\nfrom functools import reduce\ncount_even_reduce = lambda array_nums: reduce(lambda acc, x: acc + 1 if x % 2 == 0 else acc, array_nums, 0)\nprint(count_even_reduce(array_nums))\n\n# using map and len\ncount_even_map = lambda array_nums: len(list(map(lambda x: x if x % 2 == 0 else None, array_nums))\n",
        "generated_testcode": "assert count_even(range(1, 10)) == 5\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return dict(sorted(test_dict.items(), key=lambda x: sum(x[0]))\n\n# Test\ntest_dict = {(2, 3): 4, (1, 2, 4): 2, (2, 3, 5): 5, (2, 4): 6, (1, 3): 3}\nprint(sort_dict_item(test_dict)) # {(2, 3): 4, (1, 3): 3, (2, 4): 6, (1, 2, 4): 2, (2, 3, 5): 5}\n\n# Explanation:\n# The key function in the sorted() method takes a lambda function that returns the sum of the keys (tuple) for each dictionary item.\n# The sorted() function sorts the items based on this key. The sorted() method returns a list of tuples (key, value) pairs, \n# and we convert it back to a dictionary using the built-in dict() function. ",
        "generated_testcode": "assert sort_dict_item(test_dict) == sorted_dict\nprint(sorted_dict)\n\n# Output: {(1, 2): 3, (2, 3): 4, (3, 4): 5, (4, 5): 6, (5, 6): 7}\n\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(str1) \n    count = 0\n    for i in range(n) : \n        if str1[i] != str2[i] : \n            count += 1\n    return count \n  \n# Driver code \nstr1 = \"10100\"\nstr2 = \"11100\"\nprint(min_Swaps(str1,str2)) ",
        "generated_testcode": "assert min_Swaps(str1=\"101010\",str2=\"111000\") == 3\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    count = 0\n    for num in li:\n        if num >= min and num <= max:\n            count += 1\n    return count\n\n# Test cases\nprint(count_range_in_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3, 7)) # should print 4\nprint(count_range_in_list([10, 20, 30, 40, 50, 60], 10, 30)) # should print 2\nprint(count_range_in_list([1, 2, 3, 4, 5], 10, 20)) # should print 0\nprint(count_range_in_list([], 10, 20)) # should print 0\n\n# Explanation:\n\n# The function takes three parameters - list, minimum value and maximum value.\n# It initializes a counter variable to 0.\n# It then loops through each element in the list and checks if the element is greater than or equal to the minimum value and less than or equal to the maximum value. If it is, then it increments the counter.\n# Finally, it returns the counter.\n# In the first test case, the list [1, 2, 3, 4, 5, 6, 7, 8, 9] has 4 elements between 3 and 7 (4, 5, 6, and 7).\n# In",
        "generated_testcode": "assert count_range_in_list(li=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], min=3, max=7) == 5\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(arr)\n    left_sum = 0\n    total_sum = sum(arr)\n    for i in range(n):\n        total_sum -= arr[i]\n        if left_sum == total_sum:\n            return i\n        left_sum += arr[i]\n    return -1\n\n# Test the function with the sample input\narr = [1, 3, 5, 2, 2, 2]\nprint(equilibrium_index(arr))  # Output: 3 ",
        "generated_testcode": "assert equilibrium_index(arr=[1, 3, 5, 2, 2) == 1\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "                   arr, k): \n    ans = 0\n    if arr[i] >= key - k: \n        return 0\n    while i < n and arr[i] < key - k: \n        ans += 1\n        key = arr[i] \n        i += 1\n    return ans \n  \ndef minElements(arr, n, k): \n    arr.sort() \n    mina = arr[0] \n    maxa = arr[-1] \n    if maxa - mina <= k: \n        return 0\n    min_index = 0\n    max_index = n - 1\n    while min_index < max_index: \n        mid = (min_index + max_index) // 2\n        if arr[mid] - mina <= k: \n            min_index = mid + 1\n        else: \n            max_index = mid \n    return n - min_index - 1\n  \n    min_index_left = find_ind(mina + k, 0, arr, k) \n    min_index_right = find_ind(maxa - k, n - 1, arr, k) \n    return min_index_left + min_index_right \n  \n  \n# Driver Code \narr = [1, 3, 5, 7, 9, 11] \nn = len(arr) \nk = 4\nprint(minElements(arr, n, k",
        "generated_testcode": "assert find_ind(10, 5, 10) == 0\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if x in d:\n        return True\n    else:\n        return False\n\n#Testing the function\nd = {'a':1,'b':2,'c':3,'d':4}\nprint(is_key_present(d,'a')) #True\nprint(is_key_present(d,'e')) #False ",
        "generated_testcode": "assert is_key_present(d, 'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n):\n        sum += 1/(i+1)\n    return sum\n\nprint(harmonic_sum(10)) # Output: 2.44932535288\n\n# Write a function to calculate the factorial of a number using recursion\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5)) # Output: 120\n\n# Write a function to reverse a string using recursion\ndef reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n\nprint(reverse_string(\"hello\")) # Output: \"olleh\"\n\n# Write a function to print the first n fibonacci numbers using recursion\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(5)) # Output: 5\n\n# Write a function to calculate the sum of digits of a number using recursion\ndef sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(list1, key=lambda x: (-len(x), -min(x)) if x else 0)\n\n# Example usage:\nlist1 = [['apple', 'banana', 'cherry'], [], ['orange', 'grape', 'strawberry'], ['pear'], ['kiwi', 'mango'], ['apple']]\nprint(sort_sublists(list1))  # [['orange', 'grape', 'strawberry'], ['apple', 'banana', 'cherry'], ['pear'], ['kiwi', 'mango'], []]\n\n# sort_sublists should return a new list with the original sublists sorted by length and value\n# If a sublist is empty, it should be placed at the end of the sorted list\n# If two sublists have the same length and value, the original order should be preserved\n\n# Test cases:\n# sort_sublists([[], ['apple'], ['banana', 'cherry'], ['orange', 'grape', 'strawberry'], ['pear'], ['kiwi', 'mango']]) => [['orange', 'grape', 'strawberry'], ['apple'], ['banana', 'cherry'], ['pear'], ['kiwi', 'mango'], []]\n# sort_sublists([]) => []\n# sort_sublists([['orange', 'grape', 'strawberry'], ['apple'], ['banana', 'cherry'], ['pear'], ['kiwi', 'mango'], []]) => [['orange', 'grape',",
        "generated_testcode": "assert sort_sublists([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\", \"kiwi\"]) == [\"kiwi\", \"fig\", \"date\", \"apple\", \"banana\", \"cherry\", \"elderberry\"]\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    j = 0\n    while i < n and j < m: \n        if arr1[j] == arr2[i]: \n            i += 1\n        j += 1\n    if i == n: \n        return True\n    return False\n\narr1 = [1, 2, 3] \narr2 = [1, 2, 3, 4, 5, 6] \nn = len(arr1) \nm = len(arr2) \nif is_subset(arr1, n, arr2, m): \n    print(\"Yes\") \nelse: \n    print(\"No\") \n\n# Output: Yes ",
        "generated_testcode": "assert is_subset(arr1, m, arr2, n) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    while n > 0 :  \n        count += n & 1\n        n >>= 1\n    return count\n\n# Test the function with an example \nprint(count_Set_Bits(9))   # Output: 2 ",
        "generated_testcode": "assert count_Set_Bits(10) == 2\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(string) \n\n# Example usage: \nstring = \"hello\"\nprint(Convert(string)) # Output: ['h', 'e', 'l', 'l', 'o'] ",
        "generated_testcode": "assert Convert(string) == ['a', 'b', 'c', 'd', 'e']\n\n# Test the function with the string \"abcde\"\nprint(Convert(\"abcde\")) ",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_dict = {}\n    for item in test_list:\n        if item not in unique_dict.keys():\n            unique_dict[item] = 1\n        else:\n            unique_dict[item] += 1\n    return unique_dict\n\n\n\ntest_list = ('a', 'b', 'c', 'a', 'd', 'a', 'b', 'e', 'c', 'f')\nprint(get_unique(test_list))\n# {'a': 3, 'b': 2, 'c': 2, 'd': 1, 'e': 1, 'f': 1}\n",
        "generated_testcode": "assert get_unique(('a', 'b', 'c', 'a', 'd', 'b', 'c') == {'a': 2, 'b': 2, 'c': 2, 'd': 1}\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (test_tup[0], test_tup[-1])\n\ntest_tup = (1, 2, 3, 4, 5, 6, 7)\nresult = front_and_rear(test_tup)\nprint(result)  # Output: (1, 7) ",
        "generated_testcode": "assert front_and_rear(('apple', 'banana', 'cherry', 'date') == ('apple', 'date')\n\n# Test the function with the given tuple\nprint(front_and_rear(('apple', 'banana', 'cherry', 'date')) # Output: ('apple', 'date')\n\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n<0: \n        n = -n \n    sum_odd = 1\n    sum_even = 1\n    while n > 0: \n        rem = n % 10\n        n = n // 10\n        if n % 2 != 0: \n            sum_odd *= rem \n        else: \n            sum_even *= rem \n    return sum_odd == sum_even \n\n#test the function \nn = 123456\nprint(product_Equal(n)) # Output: True ",
        "generated_testcode": "assert product_Equal(12345) == True\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for item in list1:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\n# Example usage:\nmy_list = [[1,2,3], [2,3,4], [3,4,5], [4,5,6]]\nprint(remove_duplicate(my_list)) # Output: [[1, 2, 3], [3, 4, 5], [4, 5, 6]]\n\n# Example usage:\nmy_list = [[1,2,3], [2,3,4], [3,4,5], [4,5,6], [1,2,3]]\nprint(remove_duplicate(my_list)) # Output: [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\n\n# Example usage:\nmy_list = [[1,2,3], [2,3,4], [3,4,5], [4,5,6], [1,2,3], [3,4,5]]\nprint(remove_duplicate(my_list)) # Output: [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]] ",
        "generated_testcode": "assert remove_duplicate([\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"orange\", \"grape\"]) == [\"apple\", \"banana\", \"orange\", \"grape\"]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    valid_types = (int, float, str, bool)\n    for item in test_tup:\n        if type(item) not in valid_types:\n            return False\n    return True\n\n# Test cases\nprint(check_valid((1, 2, 3, 4.5, \"hello\", True, False)) == True)  # Output: True\nprint(check_valid((1, 2, 3, 4.5, \"hello\", \"world\", True, False)) == False)  # Output: False\nprint(check_valid((1, 2, 3, 4.5, 7 + 3j, \"hello\", False)) == False)  # Output: False\nprint(check_valid((1, 2, 3, 4.5, \"hello\", False, []) == False)  # Output: False\nprint(check_valid(()) == True)  # Output: True\nprint(check_valid((1, 2, 3, 4.5, \"hello\", False, None) == False)  # Output: False\nprint(check_valid((1, 2, 3, None, \"hello\", False) == False)  # Output: False\nprint(check_valid((1, 2, 3, \"hello\", False, \"world\") == True)  # Output: False\nprint(check_valid((1, 2, 3, \"hello\", 5, \"world\") == False)  # Output: False\n",
        "generated_testcode": "assert check_valid(('a', 1, 2, 3) == True)\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    i = 2\n    while(n > 1): \n        while (n % i == 0): \n            count += 1\n            n = n // i \n        i += 1\n    return count \n   \ndef distinct_factors(n): \n    count = 0\n    i = 2\n    while i <= n: \n        if (n % i == 0): \n            count += count_Fac(i) \n        i += 1\n    return count \n\nn = int(input())\nprint(distinct_factors(n)) \n\n\n# Test cases\n# Test case 1\n# Input: 60\n# Output: 4\n# Explanation: 60 has 4 distinct prime factors - 2, 2, 2 and 3.\n\n# Test case 2\n# Input: 72\n# Output: 6\n# Explanation: 72 has 6 distinct prime factors - 2, 2, 2, 2, 2, 3 and 3. ",
        "generated_testcode": "assert count_Fac(12) == 2\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    str_list = test_str.split(\",\")\n    result = tuple(int(num) for num in str_list)\n    return result\n\n# Test cases\nprint(str_to_tuple(\"1,2,3,4,5\")) # should return (1, 2, 3, 4, 5)\nprint(str_to_tuple(\"10,20,30\")) # should return (10, 20, 30)\nprint(str_to_tuple(\"1\")) # should return (1,)\nprint(str_to_tuple(\"1,2,3,4,5,6,7,8,9,10\")) # should return (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) ",
        "generated_testcode": "assert str_to_tuple(test_str) == (1, 2, 3, 4, 5)\n\n# Test the function with the following input\ntest_str = \"1, 2, 3, 4, 5\"\nprint(str_to_tuple(test_str)) # Output: (1, 2, 3, 4, 5)\n\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    return 4 * a\n\n# Test the function with an example rombus\nprint(rombus_perimeter(5))  # Output: 20\n\n# Test the function with another rombus\nprint(rombus_perimeter(6))  # Output: 24 ",
        "generated_testcode": "assert rombus_perimeter(5) == 20\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(data) == 1:\n        return 0\n    mean = sum(data)/len(data)\n    sum_of_sq = 0\n    for num in data:\n        sum_of_sq += (num - mean)**2\n    return (sum_of_sq/len(data))**0.5\n\n# Test the function\ndata = [1,2,3,4,5,6,7,8,9,10]\nprint(sd_calc(data)) # Output: 3.027650410308400196\n\n# Define a function to calculate the mean of a dataset\ndef mean_calc(data):\n    return sum(data)/len(data)\n\n# Test the function\ndata = [1,2,3,4,5,6,7,8,9,10]\nprint(mean_calc(data)) # Output: 5.5\n\n# Define a function to calculate the median of a dataset\ndef median_calc(data):\n    data.sort()\n    n = len(data)\n    if n % 2 == 0:\n        return (data[n//2 - 1] + data[n//2]) / 2\n    else:\n        return data[n//2]\n\n# Test the function\ndata = [1,2,3,4,5,6,7,8,9,10]\nprint(median_calc(data)) # Output: 5.5",
        "generated_testcode": "assert sd_calc(data) == 1.58113888300841898\n\n# Test the function with the given data\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sd_calc(data)) # Output: 3.027650410256233646\n\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    list2 = []\n    for i in range(0, len(list1), 2):\n        list2.append(list1[i])\n    return list2\n\n\nprint(alternate_elements([1,2,3,4,5,6,7,8,9])) # should return [1,3,5,7]\nprint(alternate_elements([1,2,3,4,5,6,7]))  # should return [1,3,5] \nprint(alternate_elements([1,2,3,4,5]))     # should return [1,3] \nprint(alternate_elements([1,2,3]))        # should return [1] ",
        "generated_testcode": "assert alternate_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"]) == [\"a\", \"c\", \"e\", \"g\", \"i\", \"k\", \"m\", \"o\"]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return re.search(r'a.*b*', text) is not None\n\n# Test cases\nprint(text_match(\"ab\"))  # True\nprint(text_match(\"a\"))  # True\nprint(text_match(\"c\"))  # False\nprint(text_match(\"abc\"))  # True\nprint(text_match(\"abb\"))  # True\nprint(text_match(\"bb\"))  # False\nprint(text_match(\"aabb\"))  # True\n\n# The function should return True for \"ab\", \"a\", \"abc\", \"abb\", and \"aabb\" because they have an \"a\" followed by zero or more \"b\"s, and False for \"c\" because there is no \"a\" in the string. ",
        "generated_testcode": "assert text_match(text=\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_tup = test_tup + (test_dict,)\n    return new_tup\n\n# Test the function with sample data\ntup = (1, 2, 3)\ndict = {'a': 100, 'b': 200}\nprint(add_dict_to_tuple(tup, dict)) # output should be (1, 2, 3, {'a': 100, 'b': 200})\n\n# Explanation:\n# The function takes two arguments - a tuple and a dictionary. It concatenates the tuple and the dictionary using the '+' operator and returns the result as a new tuple. ",
        "generated_testcode": "assert add_dict_to_tuple(('a', 'b', 'c', 'd'), {'e': 1, 'f': 2}) == ('a', 'b', 'c', 'd', {'e': 1, 'f': 2})\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[0 for j in range(N)] for i in range(N)] \n    dp[0][0] = cost[0][0]\n    for i in range(1, N): \n        dp[0][i] = dp[0][i-1] + cost[0][i] \n    for j in range(1, N): \n        dp[j][0] = dp[j-1][0] + cost[j][0] \n    for i in range(1, N): \n        for j in range(1, N): \n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j] \n    for i in range(N): \n        for j in range(N): \n            if i + 1 < N: \n                dp[i+1][j] = max(dp[i+1][j], dp[i][j]) + cost[i+1][j] \n            if j + 1 < N: \n                dp[i][j+1] = max(dp[i][j+1], dp[i][j]) + cost[i][j+1] \n    return dp[N-1][N-1] / (N*N) \n\n# Driver code \nN = 3\ncost = [[1, 2, 3], [4, 5, 6], [",
        "generated_testcode": "assert maxAverageOfPath(cost, 3) == 10.0\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    filtered_students = []\n    for student in students:\n        if student[\"height\"] == h and student[\"width\"] == w:\n            filtered_students.append(student)\n    return filtered_students\n\nstudents = [\n    {\"name\": \"Alice\", \"height\": 165, \"width\": 1100},\n    {\"name\": \"Bob\", \"height\": 175, \"width\": 120},\n    {\"name\": \"Charlie\", \"height\": 165, \"width\": 100},\n    {\"name\": \"Dave\", \"height\": 190, \"width\": 90},\n    {\"name\": \"Emily\", \"height\": 165, \"width\": 1100},\n    {\"name\": \"Frank\", \"height\": 175, \"width\": 120},\n    {\"name\": \"George\", \"height\": 190, \"width\": 90},\n    {\"name\": \"Hannah\", \"height\": 165, \"width\": 1100},\n]\n\nfiltered_students = filter_data(students, 165, 100)\nprint(filtered_students)\n# Output: [{'name': 'Alice', 'height': 165, 'width': 100}, {'name': 'Charlie', 'height': 165, 'width': 100}, {'name': 'Emily',",
        "generated_testcode": "assert filter_data(students, 170, 60) == [{'name': 'John', 'age': 16, 'height': 170, 'width': 60}, {'name': 'Alice', 'age': 15, 'height': 170, 'width': 60}]\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # using map() function to return the count of same elements\n    count = len(list(filter(lambda x: x[1] > 0, map(lambda x: (x, nums1.count(x) - nums2.count(x), nums1)))\n    return count\n\n# Test the function\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnums2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_same_pair(nums1, nums2)) # Output: 0\n\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(count_same_pair(nums1, nums2)) # Output: 7\n\nnums1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nnums2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(count_same_pair(nums1, nums2)) # Output: 7",
        "generated_testcode": "assert count_same_pair(nums1=[1, 2, 3, 4, 5], nums2=[2, 3, 4, 6]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sum([int(digit) ** power for digit in str(base)])\n\n# Test cases\nprint(power_base_sum(123, 2)) # should return 14\nprint(power_base_sum(456, 3)) # should return 53\nprint(power_base_sum(789, 4)) # should return 77\n\n# Time Complexity : O(n) where n is the number of digits in the base",
        "generated_testcode": "assert power_base_sum(2, 10) == 12\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\nprint(extract_quotation('\"Hello, world!\"'))  # Output: ['Hello, world!']\nprint(extract_quotation('This is a \"Python\" course. We \"love\" Python!'))  # Output: ['Python', 'love']\nprint(extract_quotation('\"Python\" is a \"programming language\"'))  # Output: ['Python', 'programming language']\nprint(extract_quotation(\"This is a 'C++' programming language.\"))  # Output: [] ",
        "generated_testcode": "assert extract_quotation(r'Hello \"world\"') == ['world']\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 1\n    for i in range(len(test_tup) - 1):\n        result *= test_tup[i]\n    return result * test_tup[-1]\n\n\n\n# Test cases\nprint(multiply_elements((1, 2, 3, 4, 5)) == 24)\nprint(multiply_elements((1, 2, 3, 4, 5, 6)) == 120)\nprint(multiply_elements((1, 2)) == 2)\nprint(multiply_elements((2,)) == 2)\nprint(multiply_elements(()) == 1)\n\n\n# This will output:\n# True\n# True\n# True\n# True\n# True\n# True ",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4, 5) ) == 20\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub('[^a-zA-Z0-9]+', '', S)\n\n# Test the function\nprint(remove_char(\"This is a string with special characters !@#$%^&*()_+[]{};:,./?><\\n\")) ",
        "generated_testcode": "assert remove_char(S) == \"123abc\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return [x+y for x,y in zip(lst1,lst2)]\n\n# Test the function\nlst1 = [1,2,3,4,5]\nlst2 = [5,6,7,8]\nprint(sum_list(lst1,lst2))\n\n# Output: [6,8,10,12]\n\n# Write a function to check if a number is prime or not.\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n\n# Test the function\nprint(is_prime(7)) # True\nprint(is_prime(8)) # False\n\n# Write a function to return the nth Fibonacci number.\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function\nprint(fibonacci(6)) # 5\n\n# Write a function to find the length of a list.\ndef list_length(lst):\n    return len(lst)\n\n# Test the function\nlst = [1,2,3,4,5]\nprint(list_length(lst)) # 4\n\n# Write a function to reverse a list.\n",
        "generated_testcode": "assert sum_list(lst1=[1,2,3], lst2=[4,5,6]) == [5,7,9]\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x+y,nums1,nums2))\n\nnums1 = [1, 2, 3, 4]\nnums2 = [5, 6, 7, 8]\nprint(add_list(nums1,nums2))\n\n# Output: [6, 8, 10, 12]\n\n# Here map() function applies the lambda function to each element of the two lists and returns a new list containing the result of the function. ",
        "generated_testcode": "assert add_list(nums1=[1,2,3],nums2=[4,5,6]) == [5,7,9]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            result.append(nums[i])\n    return result\n\n# Test the function with the example\nprint(consecutive_duplicates([1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 6, 6, 6]))  # Output: [1, 2, 3, 4, 5, 6]\n",
        "generated_testcode": "assert consecutive_duplicates(nums=[1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pi=3.14159\n    return 2*pi*r*(r+h)\n    \n# Test the function with a radius of 4 and a height of 10\nradius = 4\nheight = 10\nprint(lateralsurface_cone(radius, height)) # Output: 153.86\n\n# Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n    pi=3.14159\n    return (1/3)*pi*r**2*h\n    \n# Test the function with a radius of 4 and a height of 10\nradius = 4\nheight = 10\nprint(volume_cone(radius, height)) # Output: 153.8550399\n\n# Write a function to find the surface area of a sphere.\ndef surface_sphere(r):\n    pi=3.14159\n    return 4*pi*r**2\n\n# Test the function with a radius of 5\nradius = 5\nprint(surface_sphere(radius)) # Output: 314.159\n\n# Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n    pi=3.14159\n    return (4/3)*pi*r**3\n\n# Test the function with a radius of 5\nradius = 5\nprint(volume_sphere(radius)) #",
        "generated_testcode": "assert lateralsurface_cone(3,5) == 94.04\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_text = \"\"\n    for char in text:\n        if char in [\",\", \".\", \" \"]:\n            new_text += \":\"\n        else:\n            new_text += char\n    return new_text\n\n# Test the function with sample input\nprint(replace_specialchar(\"Hello, world. How are you?\")) # should return \"Hello:world:How:are:you?\"\nprint(replace_specialchar(\"Python is awesome!\")) # should return \"Python:is:awesome!\"\nprint(replace_specialchar(\"\")) # should return \"\"\nprint(replace_specialchar(\"Hello world\")) # should return \"Hello:world\" ",
        "generated_testcode": "assert replace_specialchar(text=\"Hello, world!\") == \"Hello:world!\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n# Test the function with example\nA = [1, 2, 2, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9]\nx = 2\nprint(find_first_occurrence(A, x))  # Output: 1\n\n# Test the function with another example\nA = [1, 3, 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10]\nx = 4\nprint(find_first_occurrence(A, x))  # Output: 2\n\n# Test the function with a non-existing element\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = 10\nprint(find_first_occurrence(A, x))  # Output: -1\n\n# Test the function with an empty array",
        "generated_testcode": "assert find_first_occurrence(A, x) == expected_output\n\n# Test case 1:\nA = [1, 2, 3, 4, 4, 4, 5, 6, 7, 8, 9]\nx = 4\nexpected_output = 2\n\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    res = 0\n    for i in range(n):\n        temp = 1\n        for j in range(i,n):\n            temp *= arr[j]\n            res += temp\n    return res\n\narr = [1,2,3,4,5]\nn = len(arr)\nprint(sum_Of_Subarray_Prod(arr,n)) ",
        "generated_testcode": "assert sum_Of_Subarray_Prod(arr=[1,2,3,4,5],n=4) == 220\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # Find the middle bit\n    middle = n & (n >> 1)\n    # Unset the middle bit\n    n = n & ~middle\n    # Set the last bit\n    n |= 1\n    return n\n\n# Test the function\nn = 10\nprint(set_middle_bits(n)) # Output: 5 (1010 -> 10000)\n\nn = 7\nprint(set_middle_bits(n)) # Output: 3 (1111 -> 100)\n\nn = 32\nprint(set_middle_bits(n)) # Output: 0 (10000000 -> 00000000)\n\nn = 40\nprint(set_middle_bits(n)) # Output: 16 (1010000 -> 0000000)\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\n\n# Reference: https://www.geeksforgeeks.org/set-bits-number-except-first-and-last-bit-python/ ",
        "generated_testcode": "assert set_middle_bits(10) == 11\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\n# Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] <= x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\n# Write a function to perform a binary search for a specified value in a sorted list.\ndef binary_search(a, x):\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return -1\n\n# Write a function to perform a binary search for a specified value in a sorted list with duplicates.\ndef binary_search_with_duplicates(a, x):\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] == x:\n           ",
        "generated_testcode": "assert left_insertion(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 2\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = re.compile(\"^[aeiouAEIOU]\") \n    if pattern.match(string): \n        return True\n    else: \n        return False\n\n#Testing the function\nprint(check_str(\"apple\")) ",
        "generated_testcode": "assert check_str(input_str) == Tru",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # initialize sum as 1\n    sum = 1\n    # loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # add 1/(2^i) to sum\n        sum += 1/(2**i)\n    # return sum\n    return sum\n\n# test the function\nprint(geometric_sum(10)) # should print 1.91666666666666666665\nprint(geometric_sum(20)) # should print 1.984765625\nprint(geometric_sum(50)) # should print 1.999850814161026736\nprint(geometric_sum(100)) # should print 1.9999986991114466865\n\n# This function calculates the geometric sum of n-1 using the formula for geometric series. ",
        "generated_testcode": "assert geometric_sum(5) == 14.38\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    i = 1\n    while True: \n        t = int(i * (i + 1) / 2) \n        if len(str(t)) == n: \n            return i \n        elif len(str(t)) > n: \n            return -1\n        i += 1\n\nn = 2\nprint(find_Index(n)) ",
        "generated_testcode": "assert find_Index(1) == 1\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict\n\n# Example usage:\nmy_tup = ('a', 1, 'b', 2, 'c', 3, 'd', 4)\nprint(tuple_to_dict(my_tup))  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# Test your function with the example below\nmy_tup = ('a', 1, 'b', 2, 'c', 3, 'd', 4)\nprint(tuple_to_dict(my_tup))  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n# Test your function with an empty tuple\nmy_tup = ()\nprint(tuple_to_dict(my_tup))  # Output: {}\n\n# Test your function with a tuple with an odd number of elements\nmy_tup = ('a', 1, 'b', 2, 'c', 3, 'd')\nprint(tuple_to_dict(my_tup))  # Output: ValueError: Odd length tuple\n\n# Test your function with a tuple with non-adjacent key-value pairs\nmy_tup = (1, 2, 'a',",
        "generated_testcode": "assert tuple_to_dict(('a', 1, 'b', 2, 'c', 3) == {'a': 1, 'b': 2, 'c': 3})\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # If the length of the string is 1, then all characters are the same\n    if len(s) == 1 :\n        return True\n    # If the length of the string is greater than 1, then check whether the first character is same as all other characters or not\n    for i in range(1, len(s)) :\n        if s[i] != s[0] :\n            return False\n    # If all characters are same, return True\n    return True\n\n# Test the function\ns = \"aabcc\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Not all characters are same\")\n\ns = \"abc\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Not all characters are same\")\n\ns = \"aaa\"\nif all_Characters_Same(s) :\n    print(\"All characters are same\")\nelse :\n    print(\"Not all characters are same\")\n\n# Output :\n# All characters are same\n# Not all characters are same\n# All characters are same\n\n# Time Complexity : O(n) ",
        "generated_testcode": "assert all_Characters_Same(s = \"aaa\") == True\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return 2.0/3 * side ** 2 * (side ** 2 / (side ** 2 + (2 * side ** 2 / (3 ** 0.5)) ** 2) ** 0.5)\n\n# Test the function with a side of 4\nprint(area_tetrahedron(4)) # 8.918802453235502554\n\n# Test the function with a side of 6\nprint(area_tetrahedron(6)) # 31.30673921240138155\n\n# Test the function with a side of 10\nprint(area_tetrahedron(10)) # 173.6766968604471333\n\n# Test the function with a side of 8\nprint(area_tetrahedron(8)) # 68.0369340101647639\n\n# Test the function with a side of 12\nprint(area_tetrahedron(12)) # 403.7129835967495375\n\n# Test the function with a side of 0\nprint(area_tetrahedron(0)) # 0.0\n\n# Test the function with a side of -5\nprint(area_tetrahedron(-5)) # Error!\n\n# Test the function with a side",
        "generated_testcode": "assert area_tetrahedron(6) == 12.0\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list1[-m:] + list1[:n]\n\n# Test the function with an example\nlist1 = [1,2,3,4,5,6,7]\nm = 3\nn = 2\nprint(rotate_right(list1,m,n)) # Output: [4,5,6,7,1,2]\n\n# Solution:\ndef rotate_right(list1,m,n):\n    return list1[n:] + list1[:m]\n\n# Test the function with an example\nlist1 = [1,2,3,4,5,6,7]\nm = 3\nn = 2\nprint(rotate_right(list1,m,n)) # Output: [4,5,6,7,1,2] ",
        "generated_testcode": "assert rotate_right([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],2) == [\"d\",\"e\",\"f\",\"g\",\"a\",\"b\",\"c\"]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i is None:\n            return True\n    return False\n\ntest_tup = (1, 2, 3, None, 4, 5)\nprint(check_none(test_tup)) # Output: True\n\ntest_tup = (1, 2, 3, 4, 5)\nprint(check_none(test_tup)) # Output: False\n\n\n# Another way to do the same using any() function\ndef check_none(test_tup):\n    return any(x is None for x in test_tup)\n\ntest_tup = (1, 2, 3, None, 4, 5)\nprint(check_none(test_tup)) # Output: True\n\ntest_tup = (1, 2, 3, 4, 5)\nprint(check_none(test_tup)) # Output: False ",
        "generated_testcode": "assert check_none(('a', 'b', 'c', 'd')), False\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(i)]\n        divisible = True\n        for digit in digits:\n            if i % digit != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(i)\n    return result\n\n# Test the function with the example given in the prompt\nprint(divisible_by_digits(10, 50))  # Output: [12, 20, 35]\n\n# Test the function with a different range\nprint(divisible_by_digits(100, 200))  # Output: [110, 120, 130, 140, 150, 160, 180, 190]\n\n# Test the function with another range\nprint(divisible_by_digits(1000, 10000)) # Output: [120, 210, 220, 230, 240, 250, 260, 270, 280, 300, 330, 350, 360, 380, 400, 420, 430, 450, 480, 500, 600,",
        "generated_testcode": "assert divisible_by_digits(10, 100) == [12, 20, 30, 40, 50, 60, 70, 80, 90]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (1/2)*(r**2)*a\n\n#Test the function\nprint(sector_area(4,2)) #output should be 4\u03c0 \n\n# Write a function to find the surface area of a sphere\ndef surface_area(r):\n    return 4*3.14*(r**2)\n\n#Test the function\nprint(surface_area(5)) #output should be 314\u03c0\n\n# Write a function to find the volume of a sphere\ndef volume(r):\n    return (4/3)*3.14*(r**3)\n\n#Test the function\nprint(volume(5)) #output should be 523.6\n\n#Write a function to find the volume of a cylinder\ndef cylinder_volume(r,h):\n    return 3.14*(r**2)*h\n\n#Test the function\nprint(cylinder_volume(3,10)) #output should be 1138.24\n\n#Write a function to find the surface area of a cylinder\ndef cylinder_surface(r,h):\n    return 2*3.14*r*h+2*3.14*(r**2)\n\n#Test the function\nprint(cylinder_surface(5,10)) #output should be 314\n\n#Write a function to find the surface area of a cone\ndef cone_surface(r,h):\n    return 3.14*r*(r",
        "generated_testcode": "assert sector_area(3, 2*3.14) == 12.56\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[[0] * (o + 1) for i in range(n + 1)] for j in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else: \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) \n    return dp[m][n][o] \n\ndef main(): \n    X = \"AGGTAB\"\n    Y = \"GXTXAYB\"\n    Z = \"AGGXYZAB\"\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    result = lcs_of_three(X, Y, Z, m, n, o) \n    print(\"Length of Longest Common Subsequence is \", result) \n\nif __name__ == \"",
        "generated_testcode": "assert lcs_of_three(X, Y, Z, m, n, o) == \"ABD\"\n\n# Test case 2\nX = \"ABCDGH\"\nY = \"AEDFHR\"\nZ = \"AACDEF\"\nm = len(X)\nn = len(Y)\no = len(Z)\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.sub(r'([A-Z])', r' \\1', str1)\n    \n# Test the function with the sample string\nprint(capital_words_spaces('helloWorld'))  # Output: hello World \nprint(capital_words_spaces('PythonIsAwesome'))  # Output: Python Is Awesome\nprint(capital_words_spaces('HTMLisAwesome'))  # Output: HTML is Awesome ",
        "generated_testcode": "assert capital_words_spaces(input_string) == expected_output\n\n# Test case 1:\ninput_string = \"PythonIsAwesome\"\nexpected_output = \"Python Is Awesome\"\n\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums_int.sort()\n    # Convert the sorted list of integers back to a list of strings\n    nums_str_sorted = [str(num) for num in nums_int]\n    return nums_str_sorted\n\n# Example usage:\nnums_str = ['123', '45', '7', '99', '0', '6']\nprint(sort_numeric_strings(nums_str))  # Output: ['0', '7', '45', '123', '99']\n",
        "generated_testcode": "assert sort_numeric_strings([\"1\", \"2\", \"10\", \"5\", \"3\", \"1\", \"20\", \"5\"]) == [\"1\", \"1\", \"2\", \"3\", \"5\", \"10\", \"20\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n    return test_list\n\n# Test cases\nprint(add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, (4, 5, 6)]  # True\nprint(add_tuple([7, 8, 9], (10, 11, 12)) == [7, 8, 9, (10, 11, 12)]  # True\nprint(add_tuple([], (13, 14, 15)) == [(13, 14, 15)]  # True\nprint(add_tuple([], ()) == []  # True\nprint(add_tuple([], (16,)) == [(16,)])  # True\nprint(add_tuple([17, 18], 19)  # Should raise a TypeError with a message \"The second argument must be a tuple\"\n\n# Output:\n# True\n# True\n# True\n# True\n# True\n# TypeError: The second argument must be a tuple\n# ",
        "generated_testcode": "assert add_tuple(test_list, test_tup) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Test the function with the following inputs\ntest_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_tup = (11, 12, 13, 14, 15)\n\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if i < len(arr) and i > 0:\n        if arr[i] > arr[(i-1)//2] and arr[i] > arr[(2*i)+1]:\n            return False\n        return check_min_heap(arr, (2*i)+1) and check_min_heap(arr, (2*i)+2)\n    return True\n\narr = [4, 10, 20, 15, 12, 7, 8, 9, 11]\nprint(check_min_heap(arr, 2)) # Returns False as 15 is not greater than its children\n\narr = [4, 10, 20, 12, 15, 16, 7, 8, 9]\nprint(check_min_heap(arr, 2)) # Returns True as all nodes are greater than their children\n\narr = [4, 10, 20, 12, 7, 8, 9, 11]\nprint(check_min_heap(arr, 0)) # Returns True as root node is the minimum element\n\narr = [4, 10, 20, 12, 7, 8, 9, 11]\nprint(check_min_heap(arr, 1)) # Returns False as 10 is not greater than its children\n\narr = [4, 10, 20, 12",
        "generated_testcode": "assert check_min_heap(arr, 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if n<=0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) \n\n# Test the function \nn = 6\nprint(\"The\",n,\"th jacobsthal number is\", jacobsthal_num(n)) ",
        "generated_testcode": "assert jacobsthal_num(0) == 0\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    min_K = sorted(test_list, key=lambda x: x[1])[:K]\n    return min_K\n\n\n# Example usage\ntest_list = [(1, 5), (2, 3), (3, 7), (4, 9), (5, 1), (6, 2)]\nK = 3\nprint(min_k(test_list, K))  # [(5, 1), (6, 2), (2, 3)]\n",
        "generated_testcode": "assert min_k(test_list, 3) == [('a', 1), ('b', 2), ('c', 3)]\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Sort the lists\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    \n    # Initialize empty list to store common elements\n    common_indices = []\n    \n    # Initialize indices for each list\n    i = j = k = 0\n    \n    # Loop until one of the lists is exhausted\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] == l2[j] == l3[k]:\n            common_indices.append((i, j, k)\n            i += 1\n            j += 1\n            k += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        elif l2[j] < l3[k]:\n            j += 1\n        else:\n            k += 1\n    \n    return common_indices\n\n# Example usage:\nl1 = [1, 3, 5, 7, 9]\nl2 = [1, 2, 5, 8, 9]\nl3 = [2, 4, 5, 9, 10]\nprint(extract_index_list(l1, l2, l3)) # [(1, 2, 2)]\n\n# Time complexity: O(nlogn) - sorting takes O(nlogn) time\n# Space complexity: O(1) - only storing the indices\n\n# Another",
        "generated_testcode": "assert extract_index_list([\"apple\", \"banana\", \"cherry\"], [\"banana\", \"orange\", \"apple\"], [\"grape\", \"banana\", \"cherry\"]) == [1, 2]\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(numbers) < 2:\n        return None\n\n    smallest = min(numbers[0], numbers[1])\n    second_smallest = None\n    for num in numbers[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n\n    return second_smallest\n\n# Test the function with some sample inputs\nprint(second_smallest([7, 2, 5, 1, 3, 9]))  # Output: 2\nprint(second_smallest([1, 1, 1, 1, 1, 1]))  # Output: None\nprint(second_smallest([5, 3, 1, 9, 2]))    # Output: 2\nprint(second_smallest([-5, -10, 0, 10]))   # Output: -5\nprint(second_smallest([1]))              # Output: None\nprint(second_smallest([]))              # Output: None\n\n\n# Write a function to check if a number is prime\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function with some sample inputs\nprint(is_prime(7)) ",
        "generated_testcode": "assert second_smallest(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return bool(re.search(r'a(?:b)?', text))\n\n# Test cases\nprint(text_match_zero_one(\"ab\")) # True\nprint(text_match_zero_one(\"a\")) # True\nprint(text_match_zero_one(\"ac\")) # False\nprint(text_match_zero_one(\"aa\")) # False\nprint(text_match_zero_one(\"aab\")) # True\n\n# Match a followed by zero or more 'b'\ndef text_match_zero_more(text):\n    return bool(re.search(r'a(?:b)*', text))\n\n# Test cases\nprint(text_match_zero_more(\"ab\")) # True\nprint(text_match_zero_more(\"a\")) # True\nprint(text_match_zero_more(\"ac\")) # False\nprint(text_match_zero_more(\"aa\")) # False\nprint(text_match_zero_more(\"aab\")) # True\nprint(text_match_zero_more(\"abbbb\")) # True\nprint(text_match_zero_more(\"abbbbc\")) # False\n\n# Match a followed by one or more 'b'\ndef text_match_one_more(text):\n    return bool(re.search(r'a(?:b)+', text))\n\n# Test cases\nprint(text_match_one_more(\"ab\")) # False\nprint(text_match_one_more(\"a\")) # False\nprint(text_match_one_more(\"ac\"))",
        "generated_testcode": "assert text_match_zero_one(r'ab') == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n\ntest_list = ['hello', 'world', 'level', 'sell', 'palindrome', 'racecar']\nprint(count_reverse_pairs(test_list))\n\n# Output: 3\n# Explanation: The pairs of reverse strings in the list are 'level' and 'level', 'sell' and 'lels', and 'racecar' and 'racecar'\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\n\n# Test cases\nprint(count_reverse_pairs(['hello', 'world', 'level', 'sell', 'palindrome', 'racecar']) == 3)\nprint(count_reverse_pairs(['racecar', 'racecar', 'level', 'sell', 'hello', 'world']) == 5)\nprint(count_reverse_pairs(['hello', 'world']) == 0)\nprint(count_reverse_pairs([]) == 0)\nprint(count_reverse_pairs(['a']) == 0) ",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"bca\", \"cab\", \"abcd\", \"dcba\", \"dcab\", \"abcd\", \"dcba\"]) == 3\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sub_lists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sub_lists.append(list1[i:j])\n    return len(set(tuple(sub_lists))), len(sub_lists)\n\n# Test the function\nprint(unique_sublists([1, 2, 3, 2, 4, 5, 3, 4])) # Output: 6, 12\nprint(unique_sublists([1, 2, 3, 2, 4, 5])) # Output: 4, 10\nprint(unique_sublists([1, 2, 3])) # Output: 3, 6\nprint(unique_sublists([])) # Output: 0, 0\n\n# Explanation:\n# In the first example, there are 6 unique sublists [2,3], [2], [3], [2, 4], [4], [3, 4], [2, 4, 5], [2, 5], [3, 4, 5] and their respective reverses.\n# In the second example, there are 4 unique sublists [2], [3], [2, 4], [2, 3, 4, 5].\n# In the third example, there are 3 unique sublists [1], [2], [3]. ",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == 2\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    try:\n        float(num)\n        if float(num) - int(num) == 0:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False\n\n\n# Test cases\nprint(is_decimal(4.2))  # True\nprint(is_decimal(4))   # False\nprint(is_decimal(\"2.5\"))  # True\nprint(is_decimal(\"4\"))   # False\nprint(is_decimal(\"four\")) # False\n\n# This function should return True for decimal numbers, False for integers and False for non-numeric values\n# We are using the float() function to check if the input can be converted to a float, and then comparing it with its integer equivalent to check for decimal places. ",
        "generated_testcode": "assert is_decimal(3.14) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if len(set(arr))==1:\n        return True\n    else:\n        return False\n\n# test the function\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nif unique_Element(arr, n):\n    print(\"Array contains only one distinct element\")\nelse:\n    print(\"Array contains more than one distinct element\")\n\n# Output: Array contains more than one distinct element ",
        "generated_testcode": "assert unique_Element(arr=[1,2,3,4,5,6],n=5) == False\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import math\n    return d*a/360.0\nprint(arc_length(5,90)) #1.57\nprint(arc_length(10,60)) #3.14\n\n# Write a function to calculate the volume of a sphere.\ndef volume(r):\n    import math\n    return (4.0/3)*math.pi*(r**3)\nprint(volume(3)) # 113.09\nprint(volume(5)) # 523.6\n\n# Write a function to calculate the surface area of a sphere.\ndef surface_area(r):\n    import math\n    return 4.0*math.pi*(r**2)\nprint(surface_area(3)) # 51.6\nprint(surface_area(4)) # 125.66\n\n# Write a function to calculate the volume of a cylinder.\ndef cylinder_volume(r,h):\n    import math\n    return math.pi*(r**2)*h\nprint(cylinder_volume(3,5)) # 108.27\nprint(cylinder_volume(2,10)) # 125.6\n\n# Write a function to calculate the surface area of a cylinder.\ndef cylinder_surface(r,h):\n    import math\n    return (2.0*math.pi*r*h) + (2.0*math.pi*(r**2)\nprint(cylinder",
        "generated_testcode": "assert arc_length(1, 90) == 0.5\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 == 2:\n        return True\n    else:\n        return False\n\n# Test the function with sample inputs\nprint(check_monthnumber_number(2))  # True (February has 28/29 days depending on the year)\nprint(check_monthnumber_number(4))  # False (April has 30 days)\nprint(check_monthnumber_number(9))  # False (September has 30 days)\n\n# Define a function to check whether the given year is a leap year or not.\ndef is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n\n# Test the function with sample inputs\nprint(is_leap_year(20000))  # True (20000 is a leap year)\nprint(is_leap_year(2001))  # False (2001 is not a leap year)\nprint(is_leap_year(2004))  # True (2004 is a leap year)\n\n# Define a function to calculate the number of",
        "generated_testcode": "assert check_monthnumber_number(1) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort() \n    min_diff = abs(arr[1] - arr[0]) \n    for i in range(1, n): \n        if abs(arr[i] - arr[i-1]) < min_diff: \n            min_diff = abs(arr[i] - arr[i-1]) \n    return min_diff \n\n#test the function \narr = [3, 8, 2, 5, 10, 1, 4] \nn = len(arr) \nprint(\"Minimum difference is\", find_Min_Diff(arr, n)) ",
        "generated_testcode": "assert find_Min_Diff(arr=[1, 5, 3, 19, 18, 21], n=5) == 2\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\n# test the function\nprint(number_ctr(\"hello1234world5678\"))  # Output: 8\nprint(number_ctr(\"foo\"))  # Output: 0\nprint(number_ctr(\"1234\"))  # Output: 4\nprint(number_ctr(\"\"))  # Output: 0\nprint(number_ctr(\"123 456 789\"))  # Output: 6\n\n# using list comprehension\ndef number_ctr_lc(str):\n    return sum([1 for char in str if char.isdigit()])\n\n# test the function\nprint(number_ctr_lc(\"hello1234world5678\"))  # Output: 8\nprint(number_ctr_lc(\"foo\"))  # Output: 0\nprint(number_ctr_lc(\"1234\"))  # Output: 4\nprint(number_ctr_lc(\"\"))  # Output: 0\nprint(number_ctr_lc(\"123 456 789\"))  # Output: 6 ",
        "generated_testcode": "assert number_ctr(input_string) == expected_output\n\n# Test the function with the following input and expected output:\ninput_string = \"Hello 123 World 456\"\nexpected_output = 2\n\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    polite = True\n    for i in range(2, int(n**0.5)+1): \n        if n % i == 0: \n            polite = False\n            break\n    return polite\n\ndef nth_polite(n): \n    count = 1\n    while True: \n        if is_polite(count): \n            if n == 1: \n                return count\n            else: \n                n -= 1\n        count += 1\n\n# Testing the function\nprint(nth_polite(6)) # Output: 42\nprint(nth_polite(10)) # Output: 122\nprint(nth_polite(15)) # Output: 328\nprint(nth_polite(20)) # Output: 1220\nprint(nth_polite(25)) # Output: 4096\n",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    if len(l1) < 2:\n        return []\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n\n# Example usage:\nl1 = [1, 2, 3, 4, 5]\nprint(pair_wise(l1))  # Output: [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n# Test with empty list:\nl2 = []\nprint(pair_wise(l2))  # Output: []\n\n# Test with single item list:\nl3 = [1]\nprint(pair_wise(l3))  # Output: []\n\n# Test with odd number of items:\nl4 = [1, 2, 3, 4, 5, 6]\nprint(pair_wise(l4))  # Output: [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)] ",
        "generated_testcode": "assert pair_wise([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"e\")]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n\n# Example usage:\narr = [2, 3, 5, 7, 8, 9, 10, 12, 15]\nn = len(arr)\nsum = 15\nprint(\"Number of pairs with sum\",sum,\"is\",get_Pairs_Count(arr,n,sum))\n\n# Output: 3\n# Note: This function has a time complexity of O(n^2) ",
        "generated_testcode": "assert get_Pairs_Count(arr=[1,2,3,4,5,6,7,8,9],n=6,sum=10) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 != 0: \n        return True\n    else: \n        return False\n\n# test the function \nprint(check_Odd_Parity(3)) ",
        "generated_testcode": "assert check_Odd_Parity(5) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(set(li1) - set(li2)) + list(set(li2) - set(li1) )\n\n# Testing the function\nli1 = [1, 2, 3, 4, 5, 6]\nli2 = [4, 5, 6, 7, 8]\nprint(Diff(li1,li2)) # Output: [1, 2, 7, 8]\n\n# Another example\nli3 = [1, 2, 3, 4, 5]\nli4 = [4, 5, 6, 7, 8]\nprint(Diff(li3,li4)) # Output: [1, 2, 3, 6, 7, 8] \n\n# Explanation: \n# The set(li1) - set(li2) will give you the elements in li1 that are not in li2. \n# The set(li2) - set(li1) will give you the elements in li2 that are not in li1. \n# Adding both the results will give you the required output. ",
        "generated_testcode": "assert Diff([\"apple\",\"banana\",\"cherry\"],[\"banana\",\"orange\"]) == [\"apple\",\"cherry\",\"orange\"]\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n+1, 2) : \n        sum += i*i*i*i*i \n    return sum \n\n# Testing the function \nn = 3\nprint(\"Sum of fourth power of first\", n, \"odd numbers is\", odd_Num_Sum(n)) ",
        "generated_testcode": "assert odd_Num_Sum(5) == 225\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    stack = []\n    for i in range(len(exp)):\n        if exp[i] in ['(', '{', '[':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if not stack or stack.pop() != '(':\n                return False\n        elif exp[i] == '}':\n            if not stack or stack.pop() != '{':\n                return False\n        elif exp[i] == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n# Test the function\nprint(check_expression(\"{{([][])}\")  # True\nprint(check_expression(\"({[]})\")  # False\nprint(check_expression(\"({[]})\")  # False\nprint(check_expression(\"({[]})]\")  # False\nprint(check_expression(\"({[]([)]}\")  # True\n\n# Another approach using stacks\ndef check_expression(expression):\n    stack = []\n    for char in expression:\n        if char in ['(', '{', '[':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n        elif char == '}':\n            if not stack or stack.pop() != '{':\n                return False\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack\n\n# Test the function\nprint(check_",
        "generated_testcode": "assert check_expression(exp) == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n\n# Test the function with the sample input\ntest_str = \"I am a student. I am a computer science student.\"\nK = 3\nprint(remove_length(test_str, K)) # Output: \"student. computer science\"\n\n# Test the function with some edge cases\ntest_str = \"I am a student. I am a computer science student.\"\nK = 0\nprint(remove_length(test_str, K)) # Output: \"I am a student. I am a computer science student.\"\n\ntest_str = \"I am a student. I am a student.\"\nK = 8\nprint(remove_length(test_str, K)) # Output: \"I am a student. I am a student.\"\n\ntest_str = \"I am a student. I am a student.\"\nK = 4\nprint(remove_length(test_str, K)) # Output: \"student. student.\" ",
        "generated_testcode": "assert remove_length(test_str=\"Hello world, I am a Python programmer\", K=3) == \"Hello world, am a programmer\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result=[]\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            result.append(i)\n    return result\n\ntext = \"banana\"\npattern = \"an\"\nprint(occurance_substring(text,pattern)) #[1,3]\n\ntext = \"banana\"\npattern = \"na\"\nprint(occurance_substring(text,pattern)) #[2]\n\ntext = \"banana\"\npattern = \"anan\"\nprint(occurance_substring(text,pattern)) #[2]\n\ntext = \"banana\"\npattern = \"ban\"\nprint(occurance_substring(text,pattern)) #[0]\n\ntext = \"banana\"\npattern = \"nan\"\nprint(occurance_substring(text,pattern)) #[2,4]\n\ntext = \"banana\"\npattern = \"ba\"\nprint(occurance_substring(text,pattern)) #[0]\n\ntext = \"banana\"\npattern = \"ana\"\nprint(occurance_substring(text,pattern)) #[1,3]\n\ntext = \"banana\"\npattern = \"aa\"\nprint(occurance_substring(text,pattern)) #[]\n\ntext = \"banana\"\npattern = \"ban\"\nprint(occurance_substring(text,pattern)) #[0]\n\ntext = \"banana\"\npattern = \"ana\"\nprint(occurance_substring(text,",
        "generated_testcode": "assert occurance_substring(text=\"hello world\", pattern=\"l\") == (2, [1, 3] )\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    regex = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    if(re.match(regex, email)):\n        return True \n    else: \n        return False\n    \n#Test case\nprint(check_email(\"example@gmail.com\")) #True\nprint(check_email(\"example@gmail\")) #False\nprint(check_email(\"example@g.com\")) #True\nprint(check_email(\"example.com\")) #False\nprint(check_email(\"example@g.c\")) #False\nprint(check_email(\"example@g.co.in\")) #True\nprint(check_email(\"example@g.co.in.com\")) #True ",
        "generated_testcode": "assert check_email(email=\"example@example.com\") == True\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\nprint(odd_position([1, 3, 5, 7, 9, 11, 13])) # True\nprint(odd_position([1, 2, 3, 7, 9, 11, 13])) # False\n\n# Fibonacci Sequence\ndef fibonacci(n):\n    sequence = [0, 1]\n    for i in range(2, n):\n        next_num = sequence[i-1] + sequence[i-2]\n        sequence.append(next_num)\n    return sequence\n\nprint(fibonacci(10)) #[0, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n\n# Palindrome\ndef is_palindrome(word):\n    return word == word[::-1]\n\nprint(is_palindrome(\"racecar\")) # True\nprint(is_palindrome(\"hello\")) # False\n\n# Factorial\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nprint(factorial(5)) # 120\n\n# Collatz",
        "generated_testcode": "assert odd_position([]), True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiouAEIOU' and i > 0 and test_str[i-1] in 'aeiouAEIOU' or i < len(test_str)-1 and test_str[i+1] in 'aeiouAEIOU':\n            count += 1\n    return count\n\ntest_str = 'babebae'\nprint(count_vowels(test_str))  # Output: 3 ",
        "generated_testcode": "assert count_vowels(test_str=\"hello world\") == 3\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n): \n        if arr.count(arr[i]) == 1: \n            sum += arr[i] \n    return sum\n  \n# Driver code \narr = [1, 2, 3, 2, 4, 5, 3, 1] \nn = len(arr) \nprint(\"Sum of non-repeated elements is\", find_Sum(arr, n)) ",
        "generated_testcode": "assert find_Sum(arr=[1,2,3,2,4,5,3,1],n=6) == 9\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    >>> pack_consecutive_duplicates([1, 2, 2, 2, 3, 3, 3, 2, 2, 1, 1])\n    [[1], [2, 2], [3, 3], [2, 2], [1, 1]]\n    \"\"\"\n    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if i == 0 or list1[i] == list1[i - 1]:\n            sublist.append(list1[i])\n        else:\n            result.append(sublist)\n            sublist = [list1[i]]\n    result.append(sublist)\n    return result\n\n\n# Test the function with the given example\nprint(pack_consecutive_duplicates([1, 2, 2, 2, 3, 3, 3, 2, 2, 1, 1])  # Output: [[1], [2, 2], [3, 3], [2, 2], [1, 1]]\n\n# Test the function with an empty list\nprint(pack_consecutive_duplicates([]))  # Output: []\n\n# Test the function with a list with only one element\nprint(pack_consecutive_duplicates([1])  # Output: [[1]]\n\n# Test the function with a list with all the same elements\nprint(pack_consecutive_duplicates([1, ",
        "generated_testcode": "assert pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"a\", \"c\", \"c\", \"c\", \"c\"]) == [[\"a\", \"a\", \"a\"], [\"b\", \"b\"], [\"a\"], [\"c\", \"c\", \"c\"]]\n",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    unique_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            if sublist not in unique_list:\n                unique_list.append(sublist)\n    return len(unique_list)\n\n# Test the function with an example\nlist1 = [1,2,3,4,5,6,7,8,9,10]\nprint(unique_sublists(list1))\n\n# Output: 21\n# Explanation: There are 21 unique sublists in the list [1,2,3,4,5,6,7,8,9,10]\n\n# Time complexity: O(n^2) as we have two nested loops and each loop iterates n times ",
        "generated_testcode": "assert unique_sublists([\"a\", \"b\", \"c\", \"a\", \"b\", \"d\"]) == 3\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    combinations = []\n    for i in range(1, len(test_list) + 1):\n        for j in range(len(test_list) - i + 1):\n            combinations.append(sum(test_list[j:j+i]))\n    return combinations\n\n# Test the function with an example\ntest_list = (1, 2, 3, 4, 5)\nprint(find_combinations(test_list))\n\n# Output: [6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 3, 4, 5, 7, 8, 9, 10, 4, 5, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 6, 7, 8, 9, 10]\n# Explanation: 1 + 2 = 3, 1 + 2 + 3 = 6, 1 + 2 + 3 + 4 = 10, 2 + 3 = 5, 2 + 3 + 4 = 7, 2 + 3 + 4 + 5 = 10, 3 + 4 = 7, 3 + 4 + 5 = 11, 4 + 5 = 9, and 1 + 2 + 3 + 4 + ",
        "generated_testcode": "assert find_combinations(()) == []\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(1, n+1) : \n        if (n % i == 0) : \n            count += 1\n    if count % 2 == 0 : \n        return \"Even\"\n    else : \n        return \"Odd\"\n\n# Test the function with some inputs \nprint(count_Divisors(10)) ",
        "generated_testcode": "assert count_Divisors(12) == \"even\"\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n=len(arr)\n    res=0\n    for i in range(n):\n        for j in range(i,n):\n            for k in range(i,j+1,2):\n                if(k%2!=0):\n                    res+=arr[k]\n    return res\n\narr=[1,2,3,4,5,6,7,8]\nprint(Odd_Length_Sum(arr)) # Output: 25\n\narr=[10,15,20,25,30,40]\nprint(Odd_Length_Sum(arr)) # Output: 90 ",
        "generated_testcode": "assert Odd_Length_Sum(arr=[1,2,3,4,5,6,7,8,9]) == 16\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    # Normalize rgb values to be between 0 and 1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find the maximum and minimum values of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between max and min\n    delta = max_val - min_val\n    \n    # Calculate the value and saturation\n    v = max_val\n    s = 0 if max_val == 0 else delta/max_val\n    \n    # Calculate the hue\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g-b)/delta + (g < b) * 6) % 360)\n    elif max_val == g:\n        h = (60 * ((b-r)/delta + 2) % 360)\n    else:\n        h = (60 * ((r-g)/delta + 4) % 360)\n    \n    return h, s, v\n\n# Example usage:\nr, g, b = 255, 0, 0\nprint(rgb_to_hsv(r, g, b)) # Output: (0, 1.0, 1.0)\n\n# Convert rgb color",
        "generated_testcode": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even = 1\n    odd = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n    return even, odd\n\n\nlist1 = [2, 4, 6, 3, 8, 10, 5, 7]\nresult = mul_even_odd(list1)\nprint(\"Product of even numbers: \", result[0])\nprint(\"Product of odd numbers: \", result[1])\n\n# Output: Product of even numbers: 48\n#         Product of odd numbers: 1680\n\n# Time Complexity: O(n)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert mul_even_odd(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == 48\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_str) < 2:\n        return \"Invalid input\"\n    else:\n        return tuple(int(i) for i in test_str[1:-1].split(','))\n\n#Example usage:\nprint(tuple_str_int(\"(1,2,3,4)\")) #Output: (1, 2, 3, 4)\nprint(tuple_str_int(\"(1, 2, 3, 4)\")) #Output: (1, 2, 3, 4)\nprint(tuple_str_int(\"(1, 2, 3, 4, \")) #Output: Invalid input\n\n#Explanation: The function first checks if the length of input string is less than 2. If it is, it returns \"Invalid input\". If not, it creates a tuple using the integer conversion of the elements separated by comma. ",
        "generated_testcode": "assert tuple_str_int((\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    l = 0\n    r = len(a)-1\n    while l < r:\n        mid = l + (r-l)//2\n        if a[mid] < x:\n            l = mid+1\n        else:\n            r = mid\n    return l\n\n# Example usage:\na = [1,2,3,4,5,6,7,8,9]\nx = 5\nprint(right_insertion(a, x)) # Output: 3\n\n# This function returns the index at which x should be inserted to maintain the sorted order of a. ",
        "generated_testcode": "assert right_insertion(sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 3\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.search(r\"a.*bbb\", text)\n\n# Example usage:\nprint(text_match_three(\"abcbbbdef\"))  # Output: <re.Match object; span=(1, 4), match='abcb'>\nprint(text_match_three(\"abcbcdef\"))  # Output: None\nprint(text_match_three(\"abbbbdef\"))  # Output: <re.Match object; span=(0, 4), match='abbb'>\nprint(text_match_three(\"abbbcdef\"))  # Output: None\n\n# Test your function with the examples above\nprint(text_match_three(\"aabbbbbc\")) # None\nprint(text_match_three(\"aabbbbc\"))  # <re.Match object; span=(0, 5), match='aabbbb'>\nprint(text_match_three(\"abbbb\"))    # <re.Match object; span=(0, 4), match='abbb'>\nprint(text_match_three(\"abbbc\"))    # None\nprint(text_match_three(\"abcbb\"))    # None\nprint(text_match_three(\"abc\"))     # None ",
        "generated_testcode": "assert text_match_three(None) == False\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n\n# Test the function with an example\ntest_list = [1, 2, 3, 4]\ntest_str = \"hello\"\nprint(new_tuple(test_list, test_str))  # Output: (1, 2, 3, 4, 'hello')\n\n# Create a function to find the length of a tuple\ndef tuple_length(tup):\n    return len(tup)\n\n# Test the function with an example\nt = (1, 2, 3, 4, 5)\nprint(tuple_length(t))  # Output: 4\n\n# Create a function to check if a tuple is empty or not\ndef is_empty(tup):\n    if len(tup) == 0:\n        return True\n    else:\n        return False\n\n# Test the function with an example\nt = ()\nprint(is_empty(t))  # Output: True\nt = (1, 2, 3, 4)\nprint(is_empty(t))  # Output: False\n\n# Create a function to find the maximum and minimum value in a tuple\ndef min_max_tuple(tup):\n    return (min(tup), max(tup))\n\n# Test the function with an example\nt = (1, 2, 3, 4, 5, 6)\nprint(min_max_tuple(t))",
        "generated_testcode": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"hello\") == (\"apple\", \"banana\", \"cherry\", \"hello\")\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    perimeter = 2*s*(l-2)\n    return perimeter\n\n# Test the function with a regular hexagon with side length of 4\nprint(perimeter_polygon(4,6)) # output: 24\n\n# Test the function with a regular octagon with side length of 5\nprint(perimeter_polygon(5,8)) # output: 40\n\n# Test the function with a square with side length of 6\nprint(perimeter_polygon(6,4)) # output: 24\n\n# Test the function with a triangle with side length of 7\nprint(perimeter_polygon(7,3)) # output: 21\n\n# Test the function with a decagon with side length of 8\nprint(perimeter_polygon(8,10)) # output: 60\n",
        "generated_testcode": "assert perimeter_polygon(10,4) == 40\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nprint(even_position([1, 2, 4, 6, 8, 10])) # True\nprint(even_position([1, 2, 3, 4, 6, 8])) # False\nprint(even_position([2, 4, 6, 8, 10])) # True\nprint(even_position([2, 3, 4, 6, 7])) # False\nprint(even_position([])) # True\nprint(even_position([2, 4, 6, 8, 10, 12, 14, 16])) # True\nprint(even_position([2, 3, 4, 6, 7, 8, 10, 11])) # False\nprint(even_position([1, 3, 5, 7, 9, 11, 13])) # False\n\n# Time Complexity: O(n) - iterate through the list once ",
        "generated_testcode": "assert even_position([]), True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            result.extend(i)\n        else:\n            result.append(i)\n    return tuple(result)\n\n# Test the function\ntest_tup = (1, (2, 3), 4, (5, 6), 7, (8, 9, 10))\nprint(remove_nested(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n# Test the function with a nested tuple\ntest_tup = (1, (2, (3, (4, 5), 6), 7, 8)\nprint(remove_nested(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7, 8) ",
        "generated_testcode": "assert remove_nested(('a', ('b', 'c', ('d', 'e', 'f'))), 'g') == ('a', 'b', 'c', 'd', 'e', 'f', 'g')\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n\n# Test cases\nprint(count_list([1, 2, 3, 4, 5, 6])) # 0\nprint(count_list([1, 2, [3, 4], 5, 6])) # 1\nprint(count_list([1, [2, [3, 4], 5, [6, 7, 8]]) # 2\nprint(count_list([1, [2, [3, [4, 5], 6], [7, 8]]) # 3\nprint(count_list([1, [2, [3, [4, 5], [6, [7, 8, [9]]]) # 3\nprint(count_list([1, [2, [3, [4, 5], [6, [7, [8, [9, 10]]]) # 4\n",
        "generated_testcode": "assert count_list([]), 0\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    left = 0\n    right = n-1\n    result = -1\n    while left<=right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# driver code\narr = [1,2,3,4,4,4,4,4,5,6,7,7,7,8,9]\nn = len(arr)\nx = 4\nprint(last(arr,x,n))\n\n# Output: 5\n\n# Time Complexity: O(logn)\n# Space Complexity: O(1) ",
        "generated_testcode": "assert last(arr=[1,2,3,4,4,4,5,6,7,7,8],x=4,n=7) == 3\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    pattern = r\"a.*b$\"\n    return bool(re.search(pattern, text))\n\n# Test cases\nprint(text_starta_endb(\"catab\")) # True\nprint(text_starta_endb(\"waterbottle\")) # True\nprint(text_starta_endb(\"dog\")) # False\nprint(text_starta_endb(\"ab\")) # True\nprint(text_starta_endb(\"abcd\")) # False\nprint(text_starta_endb(\"a\")) # False\nprint(text_starta_endb(\"abcdab\")) # False\nprint(text_starta_endb(\"abcdba\")) # True\nprint(text_starta_endb(\"hello world\")) # False\nprint(text_starta_endb(\"abcdbe\")) # True\nprint(text_starta_endb(\"abcda\")) # False\nprint(text_starta_endb(\"abca\")) # False\nprint(text_starta_endb(\"ba\")) # True\nprint(text_starta_endb(\"aasdfasdfasdfb\")) # True\n\n# Regex explanation:\n# a : matches the character 'a'\n# .* : matches anything (zero or more occurrences)\n# b$ : matches the character 'b' at the end of the string\n# ^ : matches the start of the string\n# So, the pattern \"a.*b$\" matches a string that starts with an 'a', followed by anything, and ends with a 'b' at",
        "generated_testcode": "assert text_starta_endb(r'abc') == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    heap = []\n    for item in items:\n        heappush(heap,item)\n        if len(heap) > n:\n            heappop(heap)\n    return sorted(heap,reverse=True)\n\n#Example usage\nitems = [10,20,30,40,50,60,70,80,90]\nn = 3\nprint(cheap_items(items,n)) # Output: [10, 20, 30]\n\n#Time Complexity: O(n log n)\n#Space Complexity: O(n) ",
        "generated_testcode": "assert cheap_items(items,n) == expected_output\n\n# Test the function with the following inputs\nitems = [{\"name\": \"item1\", \"price\": 10}, {\"name\": \"item2\", \"price\": 20}, {\"name\": \"item3\", \"price\": 5}, {\"name\": \"item4\", \"price\": 15}, {\"name\": \"item5\", \"price\": 8}]\nn = 2\nexpected_output = [{\"name\": \"item3\", \"price\": 5}, {\"name\": \"item1\", \"price\": 10}]\n\n",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n\n# Test the function with sample dictionary\nprint(return_sum({'a': 100, 'b': 200, 'c': 300, 'd': 400})) # Output: 800\n\n# Write a function to find the length of a list in Python\ndef length_of_list(lst):\n    return len(lst)\n\n# Test the function with sample list\nprint(length_of_list([1, 2, 3, 4, 5, 6]) # Output: 5\n\n# Write a function to calculate the average of a list of numbers\ndef average(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        return sum(lst) / len(lst)\n\n# Test the function with sample list\nprint(average([1, 2, 3, 4, 5, 6]) # Output: 3.0\n\n# Write a function to find the factorial of a number\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n# Test the function with sample input\nprint(factorial(5)) # Output: 120\n\n# Write a function to check if a number is prime or not\ndef is_prime(n):\n    if n < 2:\n       ",
        "generated_testcode": "assert return_sum(my_dict) == 10\n\n# Test the function with the following dictionary\nmy_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n+1): \n        if i % 2 != 0: \n            sum += i \n    return sum\n\n# Driver code \nl = 1\nr = 10\nprint(\"Sum of all odd numbers between\", l, \"and\", r, \"is\", sum_Odd(r)) ",
        "generated_testcode": "assert sum_Odd(10) == 25 # 1 + 3 + 5 + 7 + 9 = 18\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = 0\n    for i in arr:  \n        result += i  \n    return result  \n  \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  \nprint(\"Sum of array elements is:\", _sum(arr))  \n",
        "generated_testcode": "assert _sum(arr=[1, 2, 3, 4, 5]) == 11\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # left rotate d bits\n    for i in range(d):\n        n = n << 1\n        n = n ^ (n & 0b1000000000000000000000000000000000000000) >> 32\n    return n\n\n# Test the function\nn = 0b100101000\nd = 2\nprint(left_Rotate(n,d)) # Output: 200\n\n# Explanation:\n# The binary representation of n is 0b100101000, which is 2^3 + 2^2 + 2^1 + 2^0 = 20 + 4 + 2 + 1 = 26.\n# The left rotation of d bits is 2*2^d = 2*2 = 4 bits, which means shifting all the bits to the left by 4 positions.\n# The resulting binary representation of n is 0b0000000000000000000101010000.\n# After the rotation, the binary representation is 0b00101010000000000000000000, which is 40 in decimal.\n\n# The time complexity of the function is O(d) because it takes d iterations to left shift the bits.",
        "generated_testcode": "assert left_Rotate(10,2) == 5\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return text.replace(\" \", \"\")\n\n# Example usage:\nprint(remove_all_spaces(\"Hello world!\"))  # Output: \"Helloworld!\"\nprint(remove_all_spaces(\"Python is awesome\"))  # Output: \"Pythonisawesome\"\nprint(remove_all_spaces(\"   Whitespaces   are   annoying   \"))  # Output: \"Whitespacesareannoying\"\nprint(remove_all_spaces(\"   Leading and trailing whitespaces   \"))  # Output: \"Leadingandtrailingwhitespaces\"\n\n# Example usage with empty string\nprint(remove_all_spaces(\"\"))  # Output: \"\"\nprint(remove_all_spaces(\"     \"))  # Output: \"\"\n\n# Example usage with no spaces\nprint(remove_all_spaces(\"HelloWorld\"))  # Output: \"HelloWorld\"\nprint(remove_all_spaces(\"Python\"))  # Output: \"Python\"\n",
        "generated_testcode": "assert remove_all_spaces(None) == None\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x == y and y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Test cases\nprint(test_three_equal(3, 3, 3)) # Should print 3\nprint(test_three_equal(3, 2, 3)) # Should print 2\nprint(test_three_equal(3, 4, 4)) # Should print 0\nprint(test_three_equal(3, 3, 2)) # Should print 2\nprint(test_three_equal(2, 2, 2)) # Should print 2\nprint(test_three_equal(3, 4, 5)) # Should print 0 ",
        "generated_testcode": "assert test_three_equal(1,2,3) == 0\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if(len(arr) == 0:\n        return 0\n    index = 0\n    for i in range(len(arr)):\n        if(arr[i] < arr[index])\n            index = i\n    return index\n\ndef count(arr,n):\n    index = count_Rotation(arr,n)\n    if index == 0:\n        return 0\n    return (index+1)\n\narr = [4,5,6,7,8,9,1,2,3]\nprint(count(arr, len(arr))\n\nTime Complexity: O(n)\nSpace Complexity: O(1) ",
        "generated_testcode": "assert count_Rotation(arr=[4, 5, 6, 7, 8, 9, 1, 2, 3], n=6) == 4\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 1\n    while (i * i <= n) :\n        if (i * i == n) :\n            return True\n        i += 1\n    return False\n\n# Test the function\nn = 20\nif is_Perfect_Square(n) :\n    print(n, \"is a perfect square\")\nelse :\n    print(n, \"is not a perfect square\")\n\nn = 15\nif is_Perfect_Square(n) :\n    print(n, \"is a perfect square\")\nelse :\n    print(n, \"is not a perfect square\")\n\n# Output:\n# 20 is a perfect square\n# 15 is not a perfect square ",
        "generated_testcode": "assert is_Perfect_Square(16) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if(n==0):\n        return True\n    else:\n        return (arr[0]%2==0) == (arr[1]%2==0) and is_Product_Even(arr[1:], n-1) \n\n# driver code \narr = [2,4,5,6] \nn = len(arr) \nif(is_Product_Even(arr,n)): \n    print(\"Product of all the numbers is even\") \nelse: \n    print(\"Product of all the numbers is odd\") ",
        "generated_testcode": "assert is_Product_Even(arr=[2, 3, 4, 5], n=3) == False\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_sum = 0\n    max_list = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n\n# Test the function\nlists = [[1, 2, 3], [4, 5, 6], [7, 8], [1, 2, 3, 4, 5], [6, 7, 8, 9]]\nprint(max_sum_list(lists))  # Output: [1, 2, 3, 4, 5]\n\n\n# Alternatively, using a lambda function\nlists = [[1, 2, 3], [4, 5, 6], [7, 8], [1, 2, 3, 4, 5], [6, 7, 8, 9]]\nmax_list = max(lists, key=lambda x: sum(x))\nprint(max_list)  # Output: [1, 2, 3, 4, 5]\n\n\n# Alternatively, using the built-in max() function with a key parameter\nlists = [[1, 2, 3], [4, 5, 6], [7, 8], [1, 2, 3, 4, 5], [6, 7, 8, 9]]\nmax_list = max(lists, key=lambda x: sum(x))\nprint(max_list",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [4, 5, 6]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n\n# Test the function with sample inputs\ntest_str = \"HelloWORLDwoRld\"\nprint(max_run_uppercase(test_str))  # Output: 5\ntest_str = \"HELLOwOrld\"\nprint(max_run_uppercase(test_str))  # Output: 5\ntest_str = \"AbCdEfG\"\nprint(max_run_uppercase(test_str))  # Output: 0\ntest_str = \"ABCDEfghi\"\nprint(max_run_uppercase(test_str))  # Output: 5\ntest_str = \"aBCDeFGHi\"\nprint(max_run_uppercase(test_str))  # Output: 2\n\n# Time Complexity : O(n) ",
        "generated_testcode": "assert max_run_uppercase(test_str) == 3\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nprint(first_odd([1, 2, 4, 5, 6, 8, 9])) # Output: 5\nprint(first_odd([2, 4, 6, 8, 10])) # Output: None\nprint(first_odd([])) # Output: None\nprint(first_odd([-2, -4, 0, 4, -6])) # Output: None\nprint(first_odd([1, 3, 5, 7, 9, 11])) # Output: 1\nprint(first_odd([2, 4, 6, 8])) # Output: None\n\n# Test your function with the examples above and see if it returns the expected output. ",
        "generated_testcode": "assert first_odd(range(10)) == 1\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    # iterate through each tuple in the list\n    for tup in test_tup:\n        # check if k is present in the tuple\n        if K in tup:\n            return True\n    # if k is not present in any of the tuples, return False\n    return False\n\n\n# Test the function with the given test cases\ntest_tup = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_K(test_tup, 5))  # Output: True\nprint(check_K(test_tup, 10))  # Output: False\n\ntest_tup = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nprint(check_K(test_tup, 10) or check_K(test_tup, 11))  # Output: True\nprint(check_K(test_tup, 13) and check_K(test_tup, 14))  # Output: False\nprint(check_K(test_tup, 12) or check_K(test_tup, 13))  # Output: True\nprint(check_K(test_tup, 13) and check_K(test_tup, 14))  # Output: False\n",
        "generated_testcode": "assert check_K(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'), 'k') == True\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] < i:\n            return False\n    return True\n\n# Test cases\nprint(check_smaller((4, 5, 10, 3, 8, 6), (0, 1, 2, 3, 4)) == True)\nprint(check_smaller((4, 5, 10, 3, 8, 6), (0, 1, 2, 3, 5)) == False)\nprint(check_smaller((1, 2, 3, 4, 5), (0, 1, 2, 3, 4) == True)\n\n# Test case 1\n# test_tup1 = (4, 5, 10, 3, 8, 6)\n# test_tup2 = (0, 1, 2, 3, 4)\n# print(check_smaller(test_tup1, test_tup2)) # Output: True\n\n# Test case 2\n# test_tup1 = (4, 5, 10, 3, 8, 6)\n# test_tup2 = (0, 1, 2, 3, 5)\n# print(check_smaller(test_tup1, test_tup2)) # Output: False\n\n# Test case 3\n# test_tup1 = (1",
        "generated_testcode": "assert check_smaller((1, 2, 3, 4, 5), (0, 1, 2, 3)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(c):\n        for j in range(d):\n            print(a,end=\"\")\n    print()\na = input(\"Enter the element: \")\nb = int(input(\"Enter the count: \"))\nc = int(input(\"Enter the number of times: \"))\nd = int(input(\"Enter the number of times to repeat: \"))\ncount_variable(a,b,c,d)\n\n#Example:\n#Input:\n#Enter the element: a\n#Enter the count: 3\n#Enter the number of times: 4\n#Enter the number of times to repeat: 2\n#Output:\n#aaaa\n#aaaa\n#Enter the element: b\n#Enter the count: 2\n#Enter the number of times: 5\n#Enter the number of times to repeat: 3\n#Output:\n#bbbbb\n#bbbbb\n#bbbbb\n#c = 3, d = 2\n#count_variable(a,b,c,d)\n#Output:\n#aa\n#aa\n#aa\n#bb\n#bb\n#bb\n#bb\n#cc\n#cc\n#cc\n#c = 4, d = 1\n#count_variable(a,b,c,d)\n#Output:\n#a\n#a\n#a\n#a\n#a\n#b\n#b\n#b\n#b\n#b\n#b\n#c\n#c\n#c\n#c\n#c\n#c\n",
        "generated_testcode": "assert count_variable([\"a\", \"b\", \"c\", \"d\"], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == [\"a\", \"b\", \"c\", \"d\", \"b\", \"b\", \"c\", \"c\", \"c\", \"d\", \"d\", \"d\", \"d\", \"d\"]\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_list1) != len(test_list2):\n        return False\n    for i in range(len(test_list1)):\n        if test_list1[i] != test_list2[i]:\n            return False\n    return True\n\n# Test the function\ntest_list1 = [(1,2), (3,4), (5,6)]\ntest_list2 = [(1,2), (3,4), (5,6)]\ntest_list3 = [(1,2), (3,4), (5,7)]\n\nprint(check_identical(test_list1, test_list2)) # Should print True\nprint(check_identical(test_list1, test_list3)) # Should print False\n\n# We can also use the built-in function 'zip' to compare the tuples\ndef check_identical_zip(test_list1, test_list2):\n    return test_list1 == test_list2\n\nprint(check_identical_zip(test_list1, test_list2)) # Should print True\nprint(check_identical_zip(test_list1, test_list3)) # Should print False\n\n# Explanation:\n# The 'zip' function takes in two or more iterables (in this case, test_list1 and test_list2) and returns a new iterable of tuples, where \n# the i-th tuple contains the i-th element from each of the input iterables. So, if the two iter",
        "generated_testcode": "assert check_identical([(1,2,3), (4,5,6), (7,8,9)], [(1,2,3), (4,5,6), (7,8,9)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return street.replace('road', 'rd.')\n\n# Test cases\nprint(road_rd('123 Main Street')) # Output: '123 Main St.'\nprint(road_rd('Highway 45')) # Output: 'Highway 45'\nprint(road_rd('Broadway')) # Output: 'Bdway'\nprint(road_rd('Oak Road')) # Output: 'Oak Rd.'\n\n# Test cases\nprint(road_rd('123 Main Street')) # Output: '123 Main St.'\nprint(road_rd('Highway 45')) # Output: 'Highway 45'\nprint(road_rd('Broadway')) # Output: 'Bdway'\nprint(road_rd('Oak Road')) # Output: 'Oak Rd.' ",
        "generated_testcode": "assert road_rd(street='123 Main Street') == '123 Main Rd.'\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in str1:\n        count += 1\n    return count\n\n# Test the function\nprint(string_length(\"Hello\"))  # Output: 5\nprint(string_length(\"world\"))  # Output: 5\nprint(string_length(\"\"))  # Output: 0\nprint(string_length(\"python\")  # Output: 6\n",
        "generated_testcode": "assert string_length(str1) == 10\n\n# Test the function with an empty string\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    area = 0.5 * p * q\n    return area\n\n# Test the function with the values 5 and 10\nprint(rombus_area(5,10)) # Expected output: 25.0\n\n# Test the function with the values 8 and 16\nprint(rombus_area(8,16)) # Expected output: 64.0\n\n# Test the function with the values 12 and 4\nprint(rombus_area(12,4)) # Expected output: 36.0\n\n# Test the function with the values 6 and 24\nprint(rombus_area(6,24)) # Expected output: 12.0\n\n\n# Test the function with the values 20 and 8\nprint(rombus_area(20,8)) # Expected output: 40.0\n\n# Test the function with the values 18 and 15\nprint(rombus_area(18,15)) # Expected output: 75.0 ",
        "generated_testcode": "assert rombus_area(5, 7) == 25\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    zero_count = 0\n    one_count = 0\n    two_count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            zero_count += 1\n        elif arr[i] == 1:\n            one_count += 1\n        else:\n            two_count += 1\n    return [0] * zero_count + [1] * one_count + [2] * two_count\n\n# test the function\narr = [0, 2, 1, 0, 1, 2, 0, 1, 2, 1, 0, 2, 0, 0, 2, 1]\nn = len(arr)\nprint(sort_by_dnf(arr, n))\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n",
        "generated_testcode": "assert sort_by_dnf(arr=[0, 1, 2, 0, 2, 1, 1, 2, 0, 1, 2, 0, 0], n=9) == [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    new_tup = ()\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            new_tup += clear_tuple(test_tup[i])\n        else:\n            new_tup += (test_tup[i],)\n    return new_tup\n\ntest_tup = (1,2,(3,4,()),\"hello\",(5,(6,7),\"world\",())\n\nresult = clear_tuple(test_tup)\nprint(result) # Output: (1, 2, 3, 4, 'hello', 5, 6, 7, 'world') ",
        "generated_testcode": "assert clear_tuple(('hello', 1, 2, 'world') == ())\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0,nums)\n\n# Example usage\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],3,5)) #[3,5,6,9,10,12,15]\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],2,4)) #[2,4,6,8,10,12,14]\nprint(div_of_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],3,7)) #[3,10] ",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15, 18]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    ctr = 0\n    for char in str:\n        if char.islower():\n            ctr += 1\n    return ctr\n\nprint(lower_ctr(\"Hello World\"))\n# Output: 8\n\n# Write a python function to count upper case letters in a given string.\ndef upper_ctr(str):\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr\n\nprint(upper_ctr(\"Hello World\"))\n# Output: 2\n\n# Write a python function to count digits in a given string.\ndef digit_ctr(str):\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n\nprint(digit_ctr(\"Hello World123\"))\n# Output: 3\n\n# Write a python function to count white spaces in a given string.\ndef space_ctr(str):\n    ctr = 0\n    for char in str:\n        if char == \" \":\n            ctr += 1\n    return ctr\n\nprint(space_ctr(\"Hello World\"))\n# Output: 1\n\n# Write a python function to count special characters in a given string.\ndef special_ctr(str):\n    ctr = 0\n    for char in str:\n        if not char.isalnum() and not char.isspace():\n            ctr += 1\n    return ctr\n\nprint(special_",
        "generated_testcode": "assert lower_ctr(input_string) == expected_output\n\n# Test the function with the following input and expected output:\ninput_string = \"Hello World\"\nexpected_output = 10\n\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(lists)-1):\n        if lists[i] == lists[i+1]:\n            count += 1\n    return count\n\nlists = [1,2,3,3,4,4,5,5,5,5,6,6,6,7,7,7,7,7]\nprint(count_duplic(lists)) # Output: 4\n\n# Example 2:\nlists = [1,2,3,4,5,6,7]\nprint(count_duplic(lists)) # Output: 0\n\n# Example 3:\nlists = [1,1,1,1,1]\nprint(count_duplic(lists)) # Output: 3\n\n# Example 4:\nlists = [1,1,1,1,1,2,2,2,2,2,3,3,3,3,3]\nprint(count_duplic(lists)) # Output: 6\n\n# Example 5:\nlists = [1,1,2,3,4,5,5,5,6,7,7,7,7,8,8,9,9,9,9]\nprint(count_duplic(lists)) # Output: 3\n\n# Example 6:\nlists = [1]\nprint(count_duplic(lists)) # Output: 0\n\n# Example 7:\nlists = [1,1,1,1,1,1,1,1,1",
        "generated_testcode": "assert count_duplic([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 1",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if monthnum1 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"This month has 30 days.\")\n    elif monthnum1 in [4, 6, 9, 11]:\n        print(\"This month has 31 days.\")\n    elif monthnum1 == 2:\n        print(\"This month has 28 days.\")\n    else:\n        print(\"Invalid month number.\")\n\n# Test the function with an example month number\ncheck_monthnum_number(3)\n\n# Test the function with an example month number that doesn't exist\ncheck_monthnum_number(13)\n\n# Output: Invalid month number. ",
        "generated_testcode": "assert check_monthnum_number(2) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return {**dict1,**dict2}\n#Example usage:\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\nmerged_dict = merge_dictionaries(dict1,dict2)\nprint(merged_dict) ",
        "generated_testcode": "assert merge_dictionaries(dict1={'a':1,'b':2},dict2={'c':3,'d':4}) == {'a':1,'b':2,'c':3,'d':4}\n\n# The function should return a dictionary that contains all the key-value pairs from both dictionaries. ",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # length should be at least 6 characters\n    if len(p) < 6:\n        return False\n    \n    # must contain at least one uppercase letter, one lowercase letter and one number\n    if not any(char.isupper() for char in p) or not any(char.islower() for char in p) or not any(char.isdigit() for char in p):\n        return False\n    \n    # must contain at least one special character from !@#$%^&*()_-\n    if not any(char in '!@#$%^&*()_-' for char in p):\n        return False\n    \n    # should not contain any white space\n    if any(char.isspace() for char in p):\n        return False\n    \n    # should not contain any repeated characters\n    if len(set(p)) != len(p):\n        return False\n    \n    return True\n\n# Test cases\nprint(pass_validity(\"Abc123456!@#\")) # True\nprint(pass_validity(\"Abc123456\")) # False\nprint(pass_validity(\"Abcdef12345\")) # False\nprint(pass_validity(\"Abc123456!\")) # False\nprint(pass_validity(\"AbcdefG!@#\")) # False\nprint(pass_validity(\"AbcdefG!@\")) # False\nprint(pass_validity(\"Abcdefg1!@\")) #",
        "generated_testcode": "assert pass_validity(p) == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    pattern = r'^'+sample\n    if re.search(pattern, string) : \n        return True\n    return False\n\n# Test the function with sample inputs\nprint(check_substring(\"Hello world\", \"Hello\")) ",
        "generated_testcode": "assert check_substring(string=\"hello world\", sample=\"he\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [num for num in l if num % 2 != 0]\n\n# Test the function with an example\nprint(remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # Output: [1, 3, 5, 7]\n\n# Test the function with another example\nprint(remove_even([2, 4, 6, 8, 10])) # Output: []\n\n# Test the function with an empty list\nprint(remove_even([])) # Output: [] ",
        "generated_testcode": "assert remove_even(list(range(10)) == [1, 3, 5, 7, 9]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in list_index:\n        result.append(nums[i])\n    return result\n\n# Test the function with example\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist_index = [0, 2, 5]\nprint(access_elements(nums, list_index))  # Output: [1, 4, 8] \n\n# Test the function with example\nnums = [2, 4, 6, 8, 10, 12, 14, 16, 18]\nlist_index = [1, 3, 5]\nprint(access_elements(nums, list_index))  # Output: [4, 12, 16] \n\n# Test the function with example\nnums = [9, 8, 7, 6, 5, 4, 3, 2, 1]\nlist_index = [0, 2, 4]\nprint(access_elements(nums, list_index))  # Output: [9, 7, 4] ",
        "generated_testcode": "assert access_elements([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"], [0, 2]) == [\"apple\", \"cherry\"]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a+b>c and a+c>b and b+c>a: \n        if a == b == c: \n            return \"Equilateral\" \n        elif a == b or b == c or a == c: \n            return \"Isosceles\" \n        else: \n            return \"Scalene\" \n    else: \n        return \"Not a valid triangle\" \n\n#example usage\nprint(check_Type_Of_Triangle(3,4,5)) \nprint(check_Type_Of_Triangle(4,4,4)) \nprint(check_Type_Of_Triangle(5,4,3)) \nprint(check_Type_Of_Triangle(3,4,7)) \nprint(check_Type_Of_Triangle(7,8,9)) ",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Isosceles\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    \"\"\"\n    returns the sum of a specific column in a list of lists\n    \"\"\"\n    total = 0\n    for row in list1:\n        total += row[C]\n    return total\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(sum_column(list1, 1))  # Output: 15 (the sum of the second column)\n",
        "generated_testcode": "assert sum_column(list1, 1) == 15\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    alpha = 0\n    digit = 0\n    spl = 0\n    for char in string:\n        if char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            digit += 1\n        else:\n            spl += 1\n    return (alpha, digit, spl)\n\n\n\n# Test the function\nprint(count_alpha_dig_spl(\"Hello123 World!\"))  # Output should be (7,3,3)\nprint(count_alpha_dig_spl(\"12345\"))  # Output should be (0,5,0)\nprint(count_alpha_dig_spl(\"Hi there!\"))  # Output should be (5,0,3)\nprint(count_alpha_dig_spl(\"1 2 3 4 5\"))  # Output should be (0,5,5)\nprint(count_alpha_dig_spl(\"H#e#l$l#o W#o#r#l#d\"))  # Output should be (5,0,8)\nprint(count_alpha_dig_spl(\"\"))  # Output should be (0,0,0)\n\n# Test the function with different inputs\nstring1 = input(\"Enter a string: \")\nprint(count_alpha_dig_spl(string1))\n\n# Test with empty input\nstring2 = input(\"Enter another string: \")\nprint(count_alpha_dig_spl(string2))\n\n# Test with different case\nstring3 = input(\"Enter a string: \")\n",
        "generated_testcode": "assert count_alpha_dig_spl(string) == (2, 3, 2)\n\n# Test the function with the following string\nstring = \"Hello123!@#\"\nprint(count_alpha_dig_spl(string))\n\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a dictionary to store count of each string in the sequence\n    freq_dict = {}\n    for string in input: \n        if string in freq_dict: \n            freq_dict[string] += 1\n        else: \n            freq_dict[string] = 1\n\n    # sort the dictionary by values in descending order\n    sorted_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict[1][0] ",
        "generated_testcode": "assert second_frequent([\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"cherry\", \"cherry\", \"banana\"]) == \"cherry\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return round(a + 0.5 * 10 ** (-digits), digits)\n\n# Test the function with the example provided in the prompt\nprint(round_up(3.29829, 3)) # Output: 3.299\n\n# Test the function with other examples\nprint(round_up(4.5678, 1)) # Output: 4.6\nprint(round_up(6.5432, 2)) # Output: 6.54\nprint(round_up(2.4957, 0)) # Output: 2.5\nprint(round_up(1.789, 1)) # Output: 1.8\nprint(round_up(1.2345, 0)) # Output: 1.0\nprint(round_up(5.1234, 1)) # Output: 5.1\nprint(round_up(1.2345, -1)) # Output: 1.0\nprint(round_up(12345.678, -2)) # Output: 12300.0\nprint(round_up(98765.4321, -3)) # Output: 9880000.0 ",
        "generated_testcode": "assert round_up(12345, 2) == 1200\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    d = {}\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] == arr[j]: \n                if (arr[i],arr[j]) not in d: \n                    d[(arr[i],arr[j])] = 1\n                else: \n                    d[(arr[i],arr[j])] += 1\n                    count += d[(arr[i],arr[j])]\n    return count \n  \n# Driver code \narr = [1, 2, 3, 4, 4, 5, 6, 6, 6] \nn = len(arr)\nprint(count_Pairs(arr, n)) ",
        "generated_testcode": "assert count_Pairs(arr=[1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9],n=10) == 6\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    This function will extract the maximum numeric value from a string using regex.\n    \n    Parameters:\n    input (string): The input string that needs to be parsed to extract the maximum numeric value\n    \n    Returns:\n    max_value (float): The maximum numeric value from the input string\n    \"\"\"\n    import re\n    numbers = re.findall(r'\\d+\\.\\d+|\\d+', input) # This will find all the numbers in the string\n    max_value = float(max(numbers)) # Convert the numbers to floats and find the maximum value\n    return max_value ",
        "generated_testcode": "assert extract_max(input=\"The maximum value is 99\") == 99\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    return list(dict.keys())\n\n# example usage:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(get_key(my_dict))  # output: ['a', 'b', 'c']\n\n# alternatively, you can also use the `keys()` method of the dictionary object to achieve the same result. ",
        "generated_testcode": "assert get_key(my_dict) == ['a', 'b', 'c']\n\n# Test the function with the following dictionary\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(get_key(my_dict)) # Output: ['a', 'b', 'c']\n\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # create a list of n lists, each with n elements, initialized to zero\n    matrix = [[0 for x in range(n)] for y in range(n)]\n    # initialize variables to keep track of the boundaries of the matrix\n    top, bottom, left, right = 0, n - 1, 0, n - 1\n    # initialize the current position to top left corner\n    i, j = 0, 0\n    # initialize the current number to 1\n    num = 1\n    # loop through the matrix, filling it in spiral order\n    while top <= bottom and left <= right:\n        # fill the top row\n        for j in range(left, right + 1):\n            matrix[top][j] = num\n            num += 1\n        top += 1\n        # fill the right column\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        # fill the bottom row\n        for j in range(right, left - 1, -1):\n            matrix[bottom][j] = num\n            num += 1\n        bottom -= 1\n        # fill the left column\n        for i in range(bottom, top - 1, -1):\n            matrix[i][left] = num\n            num += 1\n        left += 1\n    # return the completed matrix\n    return matrix\n\n# test the function\nn = 4\nprint(generate_matrix(n))\n#",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (y2-y1)/(x2-x1)\n#example: slope(2,4,8,10) will output 0.5\n\n#You can also write this function using numpy. \n#import numpy as np \n#def slope(x1,y1,x2,y2): \n#    return np.float64((y2-y1)/(x2-x1))\n\n\n#Test the function:\nprint(slope(2,4,8,10)) # 0.5 ",
        "generated_testcode": "assert slope(0,0,3,4) == 1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size): \n        max_ending_here += a[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n        elif (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    return max_so_far \n  \n# Driver function to check the above function \na = [-2, -3, 4, -1, -2, -1, 1, 5, -3] \nprint(\"Maximum contiguous sum is\", max_sub_array_sum(a, len(a)) ",
        "generated_testcode": "assert max_sub_array_sum(a=[1,2,3,-2,4,5,-6,7,8,1,2,3],size=9) == 15\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, 2*n, 2): \n        sum += i*i*i \n    return sum \n  \n# Driver code \nn = 5\nprint(cube_Sum(n)) \n",
        "generated_testcode": "assert cube_Sum(5) == 225\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s1) != len(s2):  \n        return \"Not possible\" \n    n = len(s1)  \n    count = 0\n    for i in range(n):\n        while s1[i] != s2[i]:\n            for j in range(i+1,n):\n                if s2[j] == s1[i]:\n                    s2[i],s2[j] = s2[j],s2[i]\n                    count+=1\n                    break\n    return count\n    \ns1 = input(\"Enter first binary string: \")\ns2 = input(\"Enter second binary string: \")\nprint(\"Minimum swaps required to make the two binary strings equal:\",min_Swaps(s1,s2)) ",
        "generated_testcode": "assert min_Swaps(s1=\"101010\", s2=\"111000\") == 1\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(tup, key=lambda x: x[0]) \n  \n# example usage \n  \n# tuple \ntup = (('apple', 2), ('banana', 3), ('orange', 1), ('kiwi', 4), ('grapes', 5)) \n  \n# using the function \nsorted_tup = sort_tuple(tup) \n  \nprint(sorted_tup) ",
        "generated_testcode": "assert sort_tuple(('apple', 'banana', 'cherry', 'date', 'fig') == ('apple', 'banana', 'cherry', 'date', 'fig')\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    if (b**2 - 4*a*c) < 0: \n        return False  # no real roots\n    else: \n        return (-b-((b**2 - 4*a*c)**0.5)/(2*a)) != (-b+((b**2 - 4*a*c)**0.5)/(2*a)) \n#Driver code \na = 1 \nb = 2 \nc = 1\nif Check_Solution(a,b,c): \n    print(\"Roots are not equal in sign\") \nelse: \n    print(\"Roots are equal in sign\") \n#Output: Roots are not equal in sign ",
        "generated_testcode": "assert Check_Solution(1,2,-3) == True\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n  \n# Driver code \narr = [1, 20, 6, 4, 5, 3] \nn = len(arr) \nresult = get_inv_count(arr, n) \nprint(\"Number of inversions are\", result) \n\n# Time Complexity : O(n^2) ",
        "generated_testcode": "assert get_inv_count(arr, n) == 3\n\n# Test the function with some sample inputs\narr = [1, 20, 6, 4, 5]\nn = len(arr)\nprint(get_inv_count(arr, n)) # Output: 3\n\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(0, arr_size):\n        count = 0\n        for j in range(0, arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n\narr = [1, 2, 3, 4, 1, 2, 3, 5, 1, 2, 3, 4, 5]\nn = len(arr)\nresult = get_odd_occurence(arr, n)\nprint(\"The number which occurs odd times in the array is : \", result)\n\n# Output: The number which occurs odd times in the array is :  1\n\n# Time Complexity: O(n^2)\n# This is a brute-force solution which has a time complexity of O(n^2) as it has two nested loops. We can do it in O(n) time complexity by using a hash table. ",
        "generated_testcode": "assert get_odd_occurence(arr=[1, 2, 3, 2, 4, 5, 4, 5, 3, 1, 2, 3], arr_size=8) == 3\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    h = []\n    ugly_nums = [1]\n    indexes = [0] * len(primes)\n    for i in range(len(primes)):\n        heapq.heappush(h, (primes[i], i) )\n\n    for i in range(1, n):\n        min_val, min_idx = heapq.heappop(h)\n        ugly_nums.append(min_val)\n        indexes[min_idx] += 1\n        while min_val * primes[min_idx] <= ugly_nums[-1]:\n            min_val, min_idx = heapq.heappop(h)\n        heapq.heappush(h, (ugly_nums[indexes[min_idx] * primes[min_idx], min_idx))\n\n    return ugly_nums[-1]\n\n# Time Complexity: O(n * k * log(k))\n# Space Complexity: O(k)\n# Note: k is the number of prime numbers and n is the index of the super ugly number to be found.\n\n\n# Test Cases\nprimes = [2, 3, 5]\nn = 10\nprint(nth_super_ugly_number(n, primes)) # Output: 32\n\nprimes = [2, 7, 13, 19]\nn = 100\nprint(nth_super_ugly_number(n, primes)) # Output:",
        "generated_testcode": "assert nth_super_ugly_number(12, [2, 7, 13, 19]) == 32\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    odd = []\n    even = []\n    for i in range(n):\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    if k <= len(odd):\n        return odd[k-1]\n    else:\n        return even[k-1-len(odd)]\n\nn = int(input(\"Enter the size of array: \"))\nk = int(input(\"Enter the kth position: \"):\nprint(get_Number(n, k)) ",
        "generated_testcode": "assert get_Number(5, 3) == 3\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += 1\n        n //= 10\n    return count \n\ndef factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * factorial(n-1)\n\ndef count_Digits_Factorial(n): \n    return find_Digits(factorial(n)) \n\n# Testing the function \nn = 5\nprint(\"Number of digits in factorial of\",n,\"is\",count_Digits_Factorial(n)) ",
        "generated_testcode": "assert find_Digits(5) == 1\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    arr.sort() \n    dep.sort() \n  \n    i = 0\n    j = 0\n    platform_count = 0\n    max_platform = 0\n  \n    while i < n and j < n: \n        if arr[i] < dep[j]: \n            platform_count += 1\n            i += 1\n            max_platform = max(max_platform, platform_count) \n        elif arr[i] == dep[j]: \n            i += 1\n            j += 1\n        else: \n            platform_count -= 1\n            j += 1\n  \n    return max_platform \n  \n# Test the function \narr = [900, 940, 950, 11000, 1500, 1800] \ndep = [910, 1200, 1500, 1530, 1900, 2300] \nn = len(arr) \nprint(find_platform(arr, dep, n)) ",
        "generated_testcode": "assert find_platform(arr=[900, 940, 950, 11000, 1500, 1800], dep=[910, 1200, 11200, 11300, 1900], n=5) == 3\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(xs)\n\n# Test the function\nprint(lcopy(([1,2,3,4])) # Output: [1, 2, 3, 4]\nprint(lcopy((\"hello\"))  # Output: ['h', 'e', 'l', 'l', 'o']\nprint(lcopy((1,))     # Output: [1]\nprint(lcopy((None)   # Output: [None]\n\n# The function takes a single argument, xs, which is a tuple containing a single item or a list. It returns a new list that contains the same items as the tuple/list.\n# Here's how the function works:\n# 1. The function creates an empty list, using the list() constructor.\n# 2. It uses the * operator to unpack the items in the tuple into a sequence of arguments for the list constructor.\n# 3. The * operator is applied to the tuple, so that each item in the tuple is treated as a separate argument to the list constructor.\n# 4. The list constructor creates a new list with those items.\n# 5. The function returns the new list.\n\n# The function works for tuples and lists, but not for other types of iterable objects. ",
        "generated_testcode": "assert lcopy(('a',) == ['a'])\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    area = (1/2)*(base1+base2)*height\n    return area\n\n# Test the function with different values\nprint(area_trapezium(10, 20, 5)) # should return 50.0\nprint(area_trapezium(12, 8, 10)) # should return 48.0\nprint(area_trapezium(7, 5, 12)) # should return 42.0\n\n# Define a function to find the area of a rectangle\ndef area_rectangle(length, width):\n    area = length*width\n    return area\n\n# Test the function with different values\nprint(area_rectangle(5, 10)) # should return 50.0\nprint(area_rectangle(12, 4)) # should return 48.0\nprint(area_rectangle(7, 6)) # should return 42.0\n\n# Define a function to find the area of a triangle\ndef area_triangle(base, height):\n    area = 0.5*base*height\n    return area\n\n# Test the function with different values\nprint(area_triangle(10, 5)) # should return 25.0\nprint(area_triangle(8, 7)) # should return 28.0\nprint(area_triangle(6, 9)) # should return 27.0 ",
        "generated_testcode": "assert area_trapezium(5, 10, 4) == 20\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, N): \n        while (N % i == 0): \n            sum += i \n            N /= i \n    return sum\n\n# Driver code \nN = 28\nprint(Sum(N)) ",
        "generated_testcode": "assert Sum(10) == 5 # 2 + 5 = 7\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if a+b>c and b+c>a and a+c>b: \n        return True\n    else:\n        return False\n\na = int(input())\nb = int(input())\nc = int(input())\n\nif is_triangleexists(a,b,c): \n    print(\"It's a triangle\")\nelse:\n    print(\"Not a triangle\") ",
        "generated_testcode": "assert is_triangleexists(30, 60, 90) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(1,N): \n        if (N % i == 0): \n            Sum += N / i \n    return Sum \n  \n# Driver Code \nN = 12\nSum = 0\nprint(\"Sum of Inverse divisors is\",Sum_of_Inverse_Divisors(N,Sum)) ",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(12,0) == 10\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [x for x in num_list if x >= 0]\n\n# Test cases\nprint(remove_negs([1, -5, 0, 2, -3, 4, -1, 8])) # should print [1, 0, 2, 4, 8]\nprint(remove_negs([-3, -1, -2, -7, -100])) # should print []\nprint(remove_negs([1, 2, 3, 4, 5, 6])) # should print [1, 2, 3, 4, 5, 6] ",
        "generated_testcode": "assert remove_negs([]), []\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Initializing sum variable \n    sum = 0 \n    # Loop through all odd numbers \n    for i in range(1, n+1, 2): \n        # If i is a factor of n, add it to the sum \n        if n % i == 0: \n            sum += i \n    return sum\n\n# Testing the function \nn = 12\nprint(\"Sum of odd factors of\", n, \"is\", sum_of_odd_Factors(n)) ",
        "generated_testcode": "assert sum_of_odd_Factors(12) == 5 # 3 + 5 = 8\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    heap = []\n    for item in rawheap:\n        if len(heap) == 0:\n            heap.append(item)\n        else:\n            i = len(heap) - 1\n            while i >= 0:\n                parent = (i - 1) // 2\n                if item > heap[parent]:\n                    heap.append(item)\n                    break\n                if parent < 0:\n                    heap.insert(0, item)\n                    break\n                if item <= heap[parent]:\n                    heap.insert(i, item)\n                    break\n                heap.insert(i, item)\n                i = parent\n    return heap\n\n\n# Test the function with sample input\nraw_list = [4, 1, 3, 2, 16, 9, 10, 14, 17]\nheap_list = raw_heap(raw_list)\nprint(heap_list)  # Output: [17, 14, 10, 2, 1, 3, 16, 9, 4]\n\n# Now let's test the function with a sorted list\nraw_list = [1, 2, 3, 4, 9, 10, 14, 16, 17]\nheap_list = raw_heap(raw_list)\nprint(heap_list)  # Output: [17, 14, 10",
        "generated_testcode": "assert raw_heap(rawheap) == heap\n\n# Test the function with an example\nrawheap = [4, 10, 3, 5, 1, 1, 8, 7, 6, 2, 9, 12, 11]\nheap = [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 1, 2, 1]\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return (x & 1) == 0\n\n# Test the function with a few values\nprint(check_Even_Parity(5))   # Output: False\nprint(check_Even_Parity(6))   # Output: True\nprint(check_Even_Parity(7))   # Output: False\nprint(check_Even_Parity(8))   # Output: True\nprint(check_Even_Parity(10))  # Output: True\n\n# Using the bitwise operator\n# In binary, the least significant bit of a number represents its parity.\n# A number is even if the least significant bit is 0, and odd if it's 1.\n# We can use the bitwise AND operator to check if the least significant bit is 0 or 1 and return True or False accordingly.\n# If x is an even number, then x & 1 will be 0\n# If x is an odd number, then x & 1 will be 1\n\n# For example:\n# 5 = 0101 (binary)\n# 5 & 1 = 001 (binary) \n# 6 = 0110 (binary)\n# 6 & 1 = 010 (binary)\n# 7 = 0111 (binary)\n# 7 & 1 = 011 (binary)\n# 8 = 1000 (binary)\n# 8 & 1 = 000 (binary)\n# 1",
        "generated_testcode": "assert check_Even_Parity(10) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    arr.sort() \n    vis = [0] * n \n    swap = 0\n    for i in range(n) : \n        if arr[i] != i+1 : \n            temp = arr[i] \n            while vis[temp-1] == 0 : \n                vis[temp-1] = 1\n                arr[temp-1], arr[i] = arr[i], temp\n                temp = arr[i] \n                swap += 1\n    return swap \n\n# Test the function \narr = [4, 7, 3, 1, 2, 5, 6, 8] \nn = len(arr) \nprint(\"Minimum swaps required to sort the array is\", find_Min_Swaps(arr, n)) ",
        "generated_testcode": "assert find_Min_Swaps(arr=[1,0,0,1,1,1,0,1,1,0,1,1,0],n=9) == 2\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(str,list1))\n\n# Test your function with the example below\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nprint(listify_list(list1))\n",
        "generated_testcode": "assert listify_list([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count**2\n\nprint(count_list([1,2,[3,4],[5,6],(7,8)]) # Output: 4\nprint(count_list([1,2,3,4,5,6]) # Output: 0\nprint(count_list([]) # Output: 0\nprint(count_list(1) # Output: Error\n\n# Bonus\n# Write a function that returns the count of all lists and the sum of their lengths in a given list of lists.\ndef count_and_sum_list(input_list): \n    count = 0\n    sum_length = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            sum_length += len(item)\n    return count, sum_length\n\nprint(count_and_sum_list([1,2,[3,4],[5,6],(7,8)]) # Output: (2, 5)\nprint(count_and_sum_list([1,2,3,4,5,6]) # Output: (0, 0)\nprint(count_and_sum_list([]) # Output: (0, 0)\nprint(count_and_sum_list(1) # Output: Error\n\n# Bonus 2\n# Write a function that counts the number of elements in a list that",
        "generated_testcode": "assert count_list([]), 0\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    if len(my_list) == 0:\n        return [[]]\n    else:\n        element = my_list[0]\n        rest = my_list[1:]\n        rest_sublists = sub_lists(rest)\n        all_sublists = []\n        for sublist in rest_sublists:\n            all_sublists.append(sublist)\n            all_sublists.append([element] + sublist)\n        return all_sublists\n\n# Test the function\nmy_list = [1, 2, 3]\nprint(sub_lists(my_list))\n\n# Output: [[], [2, 3], [1], [1, 2, 3], [2], [1, 3], [1, 2], [3]]\n# This output is in random order.\n# The function works, but can you modify it to generate all possible sublists in order? ",
        "generated_testcode": "assert sub_lists([]), []\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    import re \n    pattern = re.compile(r'\\w+$') \n    if(pattern.search(string) == None): \n        return False\n    else: \n        return True\n  \n# test the function \nstring = \"abc123\"\nprint(check_alphanumeric(string)) # Output: True ",
        "generated_testcode": "assert check_alphanumeric(string) == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = list(filter(lambda x: sorted(x)==sorted(str), texts))\n    return result\n\ntexts = [\"listen\",\"silent\",\"enlist\",\"evil\",\"eviler\",\"liev\",\"elvis\",\"lives\",\"evil\",\"lives\",\"levin\"]\nstr = \"levis\"\nprint(anagram_lambda(texts,str))\n\n# Output: ['listen', 'silent', 'levin']\n\n# Time complexity: O(N^2*N!), where N is the length of the string. \n# We have to compare each string in the list with the given string using lambda function, which has a time complexity of O(N) and then sort each string using sorted function which has a time complexity of O(N!).\n# Since we are using filter, the time complexity for sorting is applied to each string in the list and lambda function is applied to each string, which gives us a time complexity of O(N^2*N!). \n# The space complexity is O(1) since we are not creating any additional data structure. ",
        "generated_testcode": "assert anagram_lambda([\"listen\",\"silent\",\"enlist\",\"evil\",\"evil\",\"sublest\"],\"liste\") == [\"listen\",\"silent\",\"enlist\"]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # your code here\n    # convert text to lowercase\n    text = text.lower()\n    # split the text into words\n    words = text.split()\n    # create an empty dictionary to store the word count\n    word_count = {}\n    # loop through each word in the list of words\n    for word in words:\n        # remove non-alphanumeric characters from the word and add it to the dictionary\n        word = re.sub('[^a-z0-9]+', '', word)\n        word_count[word] = word_count.get(word,0) + 1\n    # sort the dictionary by values in descending order\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n    # return the n most common words as a list of tuples\n    return sorted_word_count[:n]\n# example usage:\ntext = \"The quick brown fox jumps over the lazy dog. The quick brown dog jumps over the fox.\"\nprint(n_common_words(text,2)) # should return [('the', 2), ('quick', 2), ('brown', 2)]\n\n# or\ntext = \"One fish two fish, red fish, blue fish.\"\nprint(n_common_words(text,1)) # should return [('fish', 3)]. ",
        "generated_testcode": "assert n_common_words(text, 3) == ['the', 'and', 'of']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n == 0 or n == 1: \n        return n \n    arr.sort() \n    longest = 1\n    max_length = 1\n    end = 0\n    for i in range(1, n): \n        if arr[i] != arr[i - 1]: \n            if arr[i] == arr[i - 1] + 1: \n                end += 1\n            else: \n                if end + 1 > longest: \n                    longest = end + 1\n                end = 1\n        else: \n            continue\n    return max(longest, end + 1) \n\n# example usage\narr = [1, 9, 3, 10, 4, 5, 6, 7, 8, 2, 11] \nn = len(arr) \nprint(\"Length of the longest consecutive subsequence is\", find_longest_conseq_subseq(arr, n)) ",
        "generated_testcode": "assert find_longest_conseq_subseq(arr=[1, 9, 3, 10, 4, 5, 6, 7, 8, 2, 12], n=7) == 4\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    palindrome_function = lambda text: text == text[::-1]\n    return list(filter(palindrome_function, texts))\n\nprint(palindrome_lambda([\"racecar\", \"level\", \"civic\", \"hello\", \"madam\", \"deified\", \"civic\", \"deified\"]))\n# Output: ['racecar', 'level', 'civic', 'madam']\n\n# write a lambda function to convert a list of strings to uppercase and return the first character of each word\ndef uppercase_lambda(words):\n    uppercase_function = lambda word: word.upper()[0]\n    return list(map(uppercase_function, words))\n\nprint(uppercase_lambda([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]))\n# Output: ['H', 'W', 'P', 'I', 'F']\n\n# Write a lambda function to filter out words that have length greater than 5\ndef filter_lambda(words):\n    filter_function = lambda word: len(word) > 5\n    return list(filter(filter_function, words))\n\nprint(filter_lambda([\"hello\", \"world\", \"python\", \"programming\", \"is\", \"fun\"]))\n# Output: ['programming'] ",
        "generated_testcode": "assert palindrome_lambda([\"racecar\", \"level\", \"deified\", \"civic\", \"hello\"]) == [\"racecar\", \"level\", \"deified\", \"civic\"]\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list(map(lambda x:nums*n,nums))\n\nprint(ntimes_list([1,2,3,4],3)) #[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\n# Using list comprehension\ndef ntimes_list(nums,n):\n    return [nums*n for i in range(n)]\nprint(ntimes_list([1,2,3,4],3)) #[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\n# Using recursion\ndef ntimes_list(nums,n,result=None):\n    if result is None:\n        result = []\n    if n==0:\n        return result\n    result.extend(nums)\n    return ntimes_list(nums,n-1,result)\nprint(ntimes_list([1,2,3,4],3)) #[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n\n# Using for loop\ndef ntimes_list(nums,n):\n    result = []\n    for i in range(n):\n        result.extend(nums)\n    return result\nprint(ntimes_list([1,2,3,4],3)) #[1,",
        "generated_testcode": "assert ntimes_list([\"a\",\"b\",\"c\"],3) == [\"a\",\"b\",\"c\",\"a\",\"b\",\"c\",\"a\",\"b\",\"c\"]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    month_name = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 31, 30, 31, 30, 31]\n    for i in range(len(month_name)):\n        if month_name[i] == monthname2:\n            return month_days[i] == 31\n\n# Testing the function\nprint(check_monthnumb('February'))  # Output: False\nprint(check_monthnumb('June'))     # Output: True\nprint(check_monthnumb('December')) # Output: True\nprint(check_monthnumb('July'))    # Output: True\nprint(check_monthnumb('April'))   # Output: False\nprint(check_monthnumb('May'))     # Output: False\n\n# Explanation:\n# We have defined a list of month names and the number of days in each month. Then we iterate through the list of month names to check the given month name and return True if the number of days is 31 and False otherwise.\n# We can also use a dictionary to store the number of days for each month instead of using two separate lists. ",
        "generated_testcode": "assert check_monthnumb(monthname2='January') == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    if sum(arr)%2 == 0: \n        return 0\n    elif n == 1: \n        return arr[0] + 1 if arr[0] % 2 != 0 else 0\n    else: \n        min_num = min(arr) \n        for i in range(n): \n            if arr[i] % 2 == 1: \n                min_num = min(min_num, arr[i]) \n        return min_num \n  \n# driver code \narr = [1, 3, 5, 2, 6, 4] \nn = len(arr) \nprint(min_Num(arr, n)) ",
        "generated_testcode": "assert min_Num(arr=[1,2,3,4,5],n=4) == 1\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return len(a.split()[-1]) \n  \n# Testing the function \na = \"Hello World\"\nprint(length_Of_Last_Word(a)) \n\n# Testing the function \nb = \"   fly me to the moon  \"\nprint(length_Of_Last_Word(b)) ",
        "generated_testcode": "assert length_Of_Last_Word(a) == 5\n\n# Test the function with the following input\na = \"Hello World\"\nprint(length_Of_Last_Word(a)) # Output: 5\n\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    \"\"\"\n    This function removes all sublists from a given list of lists, which are outside a given range.\n\n    :param list1: The list of lists to remove sublists from\n    :param leftrange: The left range of the sublists\n    :param rigthrange: The right range of the sublists\n    :return: A new list with the sublists that are within the range\n    \"\"\"\n    newlist = []\n    for sublist in list1:\n        if len(sublist) >= leftrange and len(sublist) <= rigthrange:\n            newlist.append(sublist)\n    return newlist\n\n# Testing the function\nprint(remove_list_range([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10], [11, 12, 13, 14, 15], [16, 17], [18, 19, 20, 21, 22]], 2, 4))\n# Should return [[4, 5], [10], [11, 12, 13, 14, 15], [18, 19, 20, 21, 22]]\nprint(remove_list_range([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10], [11, 12, ",
        "generated_testcode": "assert remove_list_range(list1, 2, 5) == [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(filter(lambda x: x>0, nums) or 0)\n\n# Test the function\nprint(sum_positivenum([1, 2, 3, 4, 5, -3, -1, -2, 0, 6]))\n\n# Output: 15\n\n# Explanation:\n# The lambda function will filter the positive numbers (1, 2, 3, 4, 5, 0, 6) and return their sum which is 15. ",
        "generated_testcode": "assert sum_positivenum(range(1, 11)) == 55\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(string1) != len(string2):\n        return False\n    temp = string1 + string1\n    if string2 in temp:\n        return True\n    else:\n        return False\nstring1 = \"AACD\"\nstring2 = \"ACDA\"\nif are_Rotations(string1,string2):\n    print(\"The two strings are rotations of each other\")\nelse:\n    print(\"The two strings are not rotations of each other\") \n# Output: The two strings are rotations of each other \n\nstring1 = \"AACD\"\nstring2 = \"ACDB\"\nif are_Rotations(string1,string2):\n    print(\"The two strings are rotations of each other\")\nelse:\n    print(\"The two strings are not rotations of each other\") \n# Output: The two strings are not rotations of each other \n\n# Time Complexity : O(n)\n# Space Complexity : O(n)\n",
        "generated_testcode": "assert are_Rotations(string1=\"waterbottle\", string2=\"erbottlewa\") == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if set(list1) <= set(list2):\n        return True\n    else: \n        return False\n\n# Test the function with some sample inputs\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5,6,7]\nprint(check_subset(list1, list2)) # True\n\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9]\nprint(check_subset(list1, list2)) # False\n\nlist1 = [1,2,3,4,5]\nlist2 = [5,6,7,8,9]\nprint(check_subset(list1, list2)) # False\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5]\nprint(check_subset(list1, list2)) # True\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5,5]\nprint(check_subset(list1, list2)) # True\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5,5,5]\nprint(check_subset(list1, list2)) # True\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4]\nprint",
        "generated_testcode": "assert check_subset([\"a\",\"b\",\"c\"],[\"a\",\"b\",\"c\",\"d\"]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Example usage:\nprint(fibonacci(6))  # Output: 8\n\n# Explanation: 0, 1, 1, 1, 2, 3, 5, 8\n# 6th number in the sequence is 5.\n\n# Time Complexity: O(2^n)\n# Space Complexity: O(n)\n\n# Better solution using memoization\nfib_dict = {0: 0, 1: 1}\ndef fibonacci_memo(n):\n    if n in fib_dict:\n        return fib_dict[n]\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        fib_dict[n] = fibonacci_memo(n-1) + fibonacci_memo(n-2)\n        return fib_dict[n]\n\n# Example usage:\nprint(fibonacci_memo(6))  # Output: 8\n\n# Explanation: 0, 1, 1, 1, 2, 3, 5, 8\n# 6th number in the sequence is 5.\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "13B",
        "pass": 7,
        "correct": true,
        "answer": "    #if len(str1) != len(str2):\n    #    return False\n    #for i in range(len(str1)):\n    #    if str1[i] not in str2:\n    #        return False\n    #return True\n    if str2 in str1:\n        return True\n    else:\n        return False\n    \nprint(check_Concat(\"HelloWorld\",\"HelloWorld\")) ",
        "generated_testcode": "assert check_Concat(str1=\"hello\", str2=\"he\") == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    n = len(test_list)\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                diff = abs(test_list[i][0] - test_list[j][1])\n                min_diff = min(min_diff, diff)\n    return min_diff\n\n# Example usage:\ntest_list = [(2, 4), (5, 9), (1, 7), (8, 11)]\nprint(min_difference(test_list)) # Output: 2\n\n# Example usage 2:\ntest_list = [(10, 20), (40, 60), (30, 50)]\nprint(min_difference(test_list)) # Output: 10\n\n# Example usage 3:\ntest_list = [(5, 10), (15, 25), (100, 120)]\nprint(min_difference(test_list)) # Output: 5\n\n# Example usage 4:\ntest_list = [(10, 20), (40, 60), (30, 50), (80, 90)]\nprint(min_difference(test_list)) # Output: 20\n",
        "generated_testcode": "assert min_difference([(1, 4), (2, 6), (8, 10), (3, 9)] ) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "  if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(\"LCM of\", a, \"and\", b, \"is\", lcm(a, b))\n\n#Example output:\n#Enter first number: 12\n#Enter second number: 15\n#LCM of 12 and 15 is 60\n\n#Time complexity: O(n), where n is the greater of the two input numbers.\n#Space complexity: O(1)\n#Note: We used the fact that lcm(a, b) = (a*b) / gcd(a, b) to calculate the lcm using the Euclidean Algorithm. ",
        "generated_testcode": "assert lcm(12, 15) == 30\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return ''.join(sorted(str)) \n  \n# Driver code \nstr = \"geeksforgeeks\"\nprint(sort_String(str)) ",
        "generated_testcode": "assert sort_String(None) == None\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(test_tuple) == K:\n        return True\n    else:\n        return False\n\n\nprint(check_tuples((1, 2, 3), 3))  # True\nprint(check_tuples((1, 2, 3, 4), 3))  # False\nprint(check_tuples((1, 2, 3), 2))  # False\n\n\n# If the given tuple has only k elements, return the first element.\ndef get_first_element(test_tuple, K):\n    if len(test_tuple) == K:\n        return test_tuple[0]\n    else:\n        return \"The tuple should have only \" + str(K) + \" elements.\"\n\n\nprint(get_first_element((1, 2, 3, 4, 5), 3))  # The tuple should have only 3 elements.\nprint(get_first_element((1, 2, 3), 3))  # 1\n\n\n# If the given tuple has only k elements, return the first k elements as a list.\ndef get_first_k_elements(test_tuple, K):\n    if len(test_tuple) == K:\n        return list(test_tuple)\n    else:\n        return \"The tuple should have only \" + str(K) + \" elements.\"\n\n\nprint(get_first_k_elements((1, 2, 3, 4, 5), 3))  # The tuple should",
        "generated_testcode": "assert check_tuples(('a', 'b', 'c', 'd', 'e', 'f'), 5) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abc\")) # True\nprint(text_match(\"abcde\")) # True\nprint(text_match(\"adcb\")) # False\nprint(text_match(\"ac\")) # False\nprint(text_match(\"abbb\")) # True\nprint(text_match(\"abcd\")) # True\nprint(text_match(\"a\")) # False\nprint(text_match(\"cdb\")) # False ",
        "generated_testcode": "assert text_match(r'abc') == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    D = b**2 - 4*a*c\n    if D < 0 : \n        return 0\n    elif D == 0 : \n        return 1\n    else : \n        return 2\n\na = int(input(\"Enter the coefficient of x^2 : \"))\nb = int(input(\"Enter the coefficient of x : \"))\nc = int(input(\"Enter the constant term : \"))\n\nprint(\"Number of solutions : \",Check_Solution(a,b,c))\n\n# Output :\n# Enter the coefficient of x^2 : 1\n# Enter the coefficient of x : -5\n# Enter the constant term : 6\n# Number of solutions : 2\n\n# Enter the coefficient of x^2 : 2\n# Enter the coefficient of x : 4\n# Enter the constant term : -8\n# Number of solutions : 1\n\n# Enter the coefficient of x^2 : 3\n# Enter the coefficient of x : -6\n# Enter the constant term : -9\n# Number of solutions : 0 ",
        "generated_testcode": "assert Check_Solution(1,2,3) == 1\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return (even_sum, odd_sum)\n\n# Test the function with an example list\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven, odd = sum_even_odd(list1)\nprint(\"Sum of even numbers:\", even)\nprint(\"Sum of odd numbers:\", odd)\n\n# Output:\n# Sum of even numbers: 20\n# Sum of odd numbers: 25\n\n# Explanation:\n# Even numbers in the list are 2, 4, 6, 8, 10, and their sum is 20.\n# Odd numbers in the list are 1, 3, 5, 7, 9, and their sum is 25. ",
        "generated_testcode": "assert sum_even_odd(list1=[1, 2, 3, 4, 5, 6, 7, 8, 9]) == (20, 16)\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    perimeter = 2*(b+h)\n    return perimeter\n\n#Test the function with values\nprint(parallelogram_perimeter(5, 7)) # Expected output: 24\nprint(parallelogram_perimeter(10, 8)) # Expected output: 32\n\n#Write a function to calculate area of a triangle\ndef triangle_area(base, height):\n    area = (1/2)*base*height\n    return area\n\n#Test the function with values\nprint(triangle_area(5, 7)) # Expected output: 17.5\nprint(triangle_area(10, 8)) # Expected output: 40\n\n#Write a function to calculate the area of a rectangle\ndef rectangle_area(length, width):\n    area = length*width\n    return area\n\n#Test the function with values\nprint(rectangle_area(5, 7)) # Expected output: 35\nprint(rectangle_area(10, 8)) # Expected output: 80\n\n#Write a function to calculate the area of a circle\nimport math\ndef circle_area(radius):\n    area = math.pi*(radius**2)\n    return area\n\n#Test the function with values\nprint(circle_area(5)) # Expected output: 78.53975\nprint(circle_area(8)) # Expected output: 201.06192980463\n\n",
        "generated_testcode": "assert parallelogram_perimeter(5, 10) == 30\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 and x%n==0, nums))\n    \n# Example usage:\nprint(div_of_nums([1,2,3,4,6,9,12,15,18],3,6)) # Output: [12, 18] ",
        "generated_testcode": "assert div_of_nums(range(1,20),3,5) == [3, 6, 9, 12, 15]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return n & ((1<<(l) - 1) ^ ((1 << (r+1)) - 1) == 0) \n  \n# driver code \nn = 37 \nl = 3 \nr = 5\nif(all_Bits_Set_In_The_Given_Range(n, l, r)): \n    print(\"All bits are set in the given range\") \nelse: \n    print(\"Some bits are not set in the given range\") ",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(10,2,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(str1) != len(str2):\n        return False\n    mapping = {}\n    for i in range(len(str1)):\n        if str1[i] not in mapping:\n            if str2[i] in mapping.values():\n                return False\n            mapping[str1[i]] = str2[i]\n        elif str2[i] != mapping[str1[i]]:\n            return False\n    return True\n\n#Test cases\nprint(is_Isomorphic(\"egg\", \"add\")) #True\nprint(is_Isomorphic(\"foo\", \"bar\")) #False\nprint(is_Isomorphic(\"paper\", \"title\")) #True\nprint(is_Isomorphic(\"ab\", \"aa\")) #False\nprint(is_Isomorphic(\"aba\", \"baa\")) #False\nprint(is_Isomorphic(\"aba\", \"abb\")) #False\nprint(is_Isomorphic(\"abc\", \"bcd\")) #True\nprint(is_Isomorphic(\"hello\", \"world\")) #False\nprint(is_Isomorphic(\"hello\", \"hello\")) #True\nprint(is_Isomorphic(\"\", \"\")) #True\nprint(is_Isomorphic(\"\", \"a\")) #False\nprint(is_Isomorphic(\"a\", \"aa\")) #False\nprint(is_Isomorphic(\"aa\", \"aa\")) #True\nprint(is_Isomorphic(\"xyyyxyxyx\", \"yxyxxxyxy\")) #False\nprint(is_Isomorphic(\"xyyyxyxy\", \"yxyxxxyx\")) #True\nprint",
        "generated_testcode": "assert is_Isomorphic(str1=\"egg\", str2=\"add\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sum(numbers) / len(numbers)\n\n\n# Test the function with a list of numbers\nprint(sum_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # Should return 5.5\n\n# Test the function with an empty list\nprint(sum_num([]))  # Should return 0\n\n# Test the function with a list of strings\nprint(sum_num([1, \"two\", 3, \"four\", 5, \"six\"]))  # Should return a TypeError\n\n# Test the function with a list of booleans\nprint(sum_num([True, False, False, True, True, True])  # Should return a TypeError\n\n# Test the function with a tuple\nprint(sum_num((1, 2, 3, 4, 5, 6))  # Should return a TypeError\n\n# Test the function with a dictionary\nprint(sum_num({1: \"one\", 2: \"two\", 3: \"three\"})  # Should return a TypeError\n\n# Test the function with a set\nprint(sum_num({1, 2, 3, 4, 5, 6})  # Should return a TypeError\n",
        "generated_testcode": "assert sum_num([]), 0\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    # Using bitwise operator to check whether the number is odd or not \n    if n & 1 == 1: \n        return True\n    else : \n        return False\n# test the function with some test cases \nprint(is_odd(7)) \nprint(is_odd(8)) \nprint(is_odd(10)) \nprint(is_odd(20)) ",
        "generated_testcode": "assert is_odd(3) == True\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n\n\n# Example usage:\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (-4, -4, -4, -4)\n\ntest_tup1 = (10, 5, 15, 20)\ntest_tup2 = (3, 7, 11, 13)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (7, -2, 4, 7)\n\ntest_tup1 = (12, 14, 16)\ntest_tup2 = (5, 6, 7, 8)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (7, 8, 9)\n\ntest_tup1 = (1, 2)\ntest_tup2 = (3, 4, 5)\nprint(substract_elements(test_tup1, test_tup2))  # Output: (-2, -2, -3) ",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(lists)):\n        lists[i] = lists[i][::-1]\n    return lists\n\n# Test the function with the example given\nlists = [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\nprint(reverse_list_lists(lists)) # should print [[3, 2, 1], [7, 6, 5, 4], [9, 8]]\n\n# Test the function with an empty list\nlists = []\nprint(reverse_list_lists(lists)) # should print []\n\n# Test the function with a list of one list\nlists = [[1, 2, 3, 4, 5]]\nprint(reverse_list_lists(lists)) # should print [[5, 4, 3, 2, 1]\n\n# Test the function with a list of multiple lists with different lengths\nlists = [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10, 11], [12]]\nprint(reverse_list_lists(lists)) # should print [[1], [3, 2], [6, 5, 4], [11, 10, 8, 7], [12]] ",
        "generated_testcode": "assert reverse_list_lists([]), []\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    extra_index = 0\n    for i in range(n) : \n        if arr1[i] != arr2[i] : \n            extra_index = i\n            break\n    return extra_index\n\n# Take input of two sorted arrays and their sizes\narr1 = list(map(int,input(\"Enter the elements of the first array: \").split()))\narr2 = list(map(int,input(\"Enter the elements of the second array: \").split())\nn = len(arr1)\n\n# Find the index of the extra element\nindex = find_Extra(arr1,arr2,n)\nprint(\"Index of extra element is:\",index)\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# Example:\n# Input:\n# Enter the elements of the first array: 5 4 1 2 3 6 8\n# Enter the elements of the second array: 5 4 1 2 3 6 7 8\n# Output:\n# Index of extra element is: 4\n\n# Here, 7 is the extra element in the second array and its index is 4. ",
        "generated_testcode": "assert find_Extra(arr1=[1,2,3,4,4,5,6,7,7],arr2=[1,2,3,4,5,6,7,8],n=6) == 8\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    str1 = str(A) \n    str2 = str(B) \n    return len(str1) == len(str2) \n  \n# Testing the function \nA = 12345 \nB = 54321\nprint(same_Length(A, B)) # Output: True ",
        "generated_testcode": "assert same_Length(1234, 5678) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return ' '.join(text.split())\n\n# Test the function with an example string\nprint(remove_spaces(\"   hello    world!   \")) # Expected output: \"hello world!\"\nprint(remove_spaces(\"   hello    world!   \")) # Expected output: \"hello world!\"\nprint(remove_spaces(\"   hello   world!   \")) # Expected output: \"hello world!\"\nprint(remove_spaces(\"   hello world!   \")) # Expected output: \"hello world!\"\nprint(remove_spaces(\"hello world!\")) # Expected output: \"hello world!\"\n\n# Should remove extra spaces and keep the original capitalization and punctuation\nprint(remove_spaces(\"   Hello   World, how are you?   \")) # Expected output: \"Hello World, how are you?\"\nprint(remove_spaces(\"Hello   World,   how are   you?\")) # Expected output: \"Hello World, how are you?\"\n\n# Should handle empty strings and return an empty string\nprint(remove_spaces(\"\")) # Expected output: \"\"\nprint(remove_spaces(\"     \")) # Expected output: \"\"\n\n# Should remove spaces between words and characters\nprint(remove_spaces(\"hello    world\")) # Expected output: \"helloworld\"\n\n# Should remove spaces before and after a punctuation mark\nprint(remove_spaces(\"hello    world!   \")) # Expected output: \"hello world!\"\nprint(remove_spaces(\"   hello, world!   \")) # Expected output: \"hello, world!\"",
        "generated_testcode": "assert remove_spaces(None) == None\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return [sublist[-1] for sublist in lst] \n  \n# Test the function \nlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] \nprint(Extract(lst) ) ",
        "generated_testcode": "assert Extract([\"apple\", \"banana\", \"cherry\"]) == \"cherry\"\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_list = test_str.split(\",\")\n    return tuple(float(i) for i in test_list)\n\n\n# Test the function\nprint(float_to_tuple(\"(2.5, 3.14, 6.28, 1.61)\"))  # Output: (2.5, 3.14, 6.28, 1.61)\nprint(float_to_tuple(\"(12.5, 3.4, 10.2, -2.8)\"))  # Output: (12.5, 3.4, 10.2, -2.8)\nprint(float_to_tuple(\"(0.0, 0.0, 0.0, 0.0)\"))  # Output: (0.0, 0.0, 0.0, 0.0)\nprint(float_to_tuple(\"(2.25, -1.5, 12.6, 7.8)\"))  # Output: (2.25, -1.5, 12.6, 7.8)\nprint(float_to_tuple(\"(1.0, -2.0, 3.5, -4.0)\"))  # Output: (1.0, -2.0, 3.5, -4.0)\n\n#",
        "generated_testcode": "assert float_to_tuple(3.14) == (3, 1, 4)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n = len(A)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return A[0]\n    else:\n        B = [0] * n\n        B[0] = A[0]\n        B[1] = max(A[0], A[1])\n        for i in range(2, n):\n            B[i] = max(B[i-1], B[i-2] + A[i])\n        return B[n-1]\n\nA = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_sum_subseq(A))  # Output: 25 (1, 3, 4, 9)\nA = [1, 2, -1, 3, 4, -5, 7, 8, 9]\nprint(max_sum_subseq(A))  # Output: 16 (1, 7, 8, 9)\n\n# Time Complexity: O(n) ",
        "generated_testcode": "assert max_sum_subseq(A) == 10\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return n[-1]\n\ndef sort_list_of_tuples(tuples_list):\n    return sorted(tuples_list, key=last)\n\n# Example usage:\ntuples_list = [(1, 7), (1, 3), (3, 4, 1), (2, 2, 9), (1, 1, 4)]\nprint(sort_list_of_tuples(tuples_list))  # Output: [(1, 1, 4), (1, 3), (2, 2, 9), (3, 4, 1)]\n\n# Or, using a lambda function:\ntuples_list = [(1, 7), (1, 3), (3, 4, 1), (2, 2, 9), (1, 1, 4)]\nprint(sorted(tuples_list, key=lambda x: x[-1]))  # Output: [(1, 1, 4), (1, 3), (2, 2, 9), (3, 4, 1)] ",
        "generated_testcode": "assert last([(1, 3, 2), (2, 1, 4), (4, 1, 3), (2, 5, 1)] ) == [(2, 1, 4), (1, 3, 2), (2, 5, 1), (4, 1, 3)]\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if word in sentence: \n        return True\n    else: \n        return False\n\n#example usage\nsentence = \"I am going to school\"\nword = \"school\"\nprint(is_Word_Present(sentence,word)) ",
        "generated_testcode": "assert is_Word_Present(sentence=\"Hello world\", word=\"world\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": true,
        "answer": "    result = []\n    count = 0\n    for i in range(len(numbers)):\n        if count == n:\n            break\n        result.append(numbers[i])\n        count += 1\n    return result\n\n# Test the function\nprint(extract_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))  # Output: [1, 2, 3]\nprint(extract_elements([10, 20, 30, 40, 50, 60, 70], 4))  # Output: [10, 20, 30, 40]\nprint(extract_elements([5, 8, 9, 12, 14, 17, 21, 23], 2))  # Output: [5, 8]\n",
        "generated_testcode": "assert extract_elements(range(10), 3) == [0, 1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 0\n    j = n-1\n    while i<=j: \n        if arr[i] <= arr[j]: \n            i+=1\n        else: \n            j-=1\n    if i==n: \n        return True\n    else: \n        return False\n\n# Example usage:\n#arr = [3, 2, 1, 5, 4, 6, 8, 7] \n#n = len(arr) \n#if check(arr, n): \n#    print(\"Array can be sorted by picking corner elements\") \n#else: \n#    print(\"Array cannot be sorted by picking corner elements\") \n\n# Output: Array can be sorted by picking corner elements ",
        "generated_testcode": "assert check(arr=[1,2,3,4,5,6,7,8,9],n=6) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    for char in string:\n        if char.isdigit():\n            return char == \"1\"\n        else:\n            return False\n\n# Test cases\nprint(match_num(\"1abc\")) # True\nprint(match_num(\"2efg\")) # False\nprint(match_num(\"1234abc\")) # True\nprint(match_num(\"efg1234\")) # False\nprint(match_num(\"1abc123\")) # True\nprint(match_num(\"efg\")) # False\nprint(match_num(\"\")) # False ",
        "generated_testcode": "assert match_num(string=\"123abc\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "13B",
        "pass": 3,
        "correct": true,
        "answer": "    factors = set()\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                factors.add(j)\n    ans = 1\n    for factor in factors:\n        ans *= factor\n    return ans\n\n# Test the function\nprint(smallest_multiple(20))\nprint(smallest_multiple(10))\nprint(smallest_multiple(1))\nprint(smallest_multiple(0))\n",
        "generated_testcode": "assert smallest_multiple(2) == 2\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    new_dict = {}\n    for key in d1:\n        if key in d2:\n            new_dict[key] = d1[key] + d2[key]\n        else:\n            new_dict[key] = d1[key]\n    for key in d2:\n        if key not in new_dict:\n            new_dict[key] = d2[key]\n    return new_dict\n\n# Test the function with the following dictionaries\nd1 = {'a': 100, 'b': 200, 'c': 300}\nd2 = {'a': 50, 'b': 100, 'd': 400}\nprint(add_dict(d1,d2))\n\n# Output: {'a': 150, 'b': 300, 'c': 300, 'd': 400}\n\nd1 = {'a': 100, 'b': 200, 'c': 300}\nd2 = {'a': 50, 'b': 100, 'd': 400}\nprint(add_dict(d2,d1))\n\n# Output: {'a': 150, 'b': 300, 'c': 300, 'd': 400}\n\n# Expected output: {'a': 150, 'b': 300, 'c': 300",
        "generated_testcode": "assert add_dict(dict(a=1, b=2), dict(b=3, c=4)) == {'a': 1, 'b': 5, 'c': 4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(n+1):\n        count += bin(i).count('1')\n    return count\n\n# Test the function\nprint(count_Unset_Bits(10)) # Output: 16\nprint(count_Unset_Bits(20)) # Output: 28\nprint(count_Unset_Bits(50)) # Output: 60\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n# You can also use Brian Kernighan's algorithm to count the unset bits in a number. \n# This algorithm is based on the fact that if we subtract 1 from a number then all the set bits are unset except the rightmost set bit, \n# and all the unset bits are shifted to the left.\n\ndef count_Unset_Bits(n):\n    count = 0\n    while(n):\n        count += 1\n        n &= (n-1)\n    return count\n\n# Test the function\nprint(count_Unset_Bits(10)) # Output: 16\nprint(count_Unset_Bits(20)) # Output: 28\nprint(count_Unset_Bits(50)) # Output: 60\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\n\n# You can also use bit manipulation to count the unset bits in a number. \n#",
        "generated_testcode": "assert count_Unset_Bits(5) == 2\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if x%2==0:\n        return True\n    else:\n        return False\n\n# Example usage:\nprint(even_num(4)) # Output: True\nprint(even_num(5)) # Output: False\n\n# Write a function to return the square of a number\ndef square(x):\n    return x*x\n\n# Example usage:\nprint(square(2)) # Output: 4\nprint(square(7)) # Output: 49\n\n# Write a function to return the cube of a number\ndef cube(x):\n    return x*x*x\n\n# Example usage:\nprint(cube(3)) # Output: 27\nprint(cube(5)) # Output: 125\n\n# Write a function to return the factorial of a number\ndef factorial(n):\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n# Example usage:\nprint(factorial(3)) # Output: 6\nprint(factorial(5)) # Output: 120\n\n# Write a function to return the sum of all numbers from 1 to n (inclusive)\ndef sum_numbers(n):\n    if n==0:\n        return 0\n    else:\n        return n + sum_numbers(n-1)\n\n# Example usage:\nprint(sum_numbers(3)) # Output: 6\nprint(sum_numbers(5)) # Output: 15\n\n",
        "generated_testcode": "assert even_num(4) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if start>end: \n        return 1\n    res = 1\n    for i in range(start,end+1): \n        res *= i \n    return res \n\ndef binomial_coefficient(n, k): \n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef sum_of_squares(n): \n    sum = 0\n    for i in range(n+1): \n        sum += binomial_coefficient(n, i)**2\n    return sum \n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Sum of squares of binomial coefficients:\", sum_of_squares(n)) ",
        "generated_testcode": "assert factorial(5,10) == 24*30240\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    import re\n    regex = r\"^https:\\/\\/www\\.example\\.com\\/([0-9]{4})\\/([0-9]{2})\\/([0-9]{2})\\/\"\n    pattern = re.compile(regex)\n    match = re.search(pattern, url)\n    if match:\n        return match.group(1), match.group(2), match.group(3)\n    return None\n\n# Example usage:\nurl = \"https://www.example.com/2020/05/23/\"\nyear, month, date = extract_date(url)\nprint(year)  # Output: 2020\nprint(month) # Output: 05\nprint(date)  # Output: 23\n\n# If the url doesn't match the pattern, the function will return None\nurl = \"https://www.example.com/posts\"\nprint(extract_date(url))  # Output: None\n\n# You can use this function to extract year, month and date from any url that has the following format: \n# https://www.example.com/YYYY/MM/DD/ \n# where YYYY is a 4 digit year, MM is a 2 digit month, and DD is a 2 digit day. ",
        "generated_testcode": "assert extract_date(url) == (2020, 10, 20)\n\n# Test the function with the following url\nurl = \"https://www.example.com/blog/2020/10/20/blog-post-title\"\nprint(extract_date(url)) # should print (2020, 10, 20)\n\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    num = 1\n    while count < n:\n        if sum(int(digit)**2 for digit in str(num)) % 10 == 0:\n            print(num)\n            count += 1\n        num += 1\n\n# Test the function\nlucky_num(10) ",
        "generated_testcode": "assert lucky_num(5) == [4, 7, 13, 16, 23, 28]\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(n): \n        if arr[i] == i: \n            return i \n    return -1\n\n# Example usage:\narr = [5, 7, 10, 3, 4, 2, 6, 8, 1, 9] \nn = len(arr) \nprint(find_fixed_point(arr, n)) ",
        "generated_testcode": "assert find_fixed_point(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9], n=7) == None\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num -= 1\n    while not is_palindrome(num):\n        num -= 1\n    return num\n\n# Test cases\nprint(previous_palindrome(12321))  # Output: 1221\nprint(previous_palindrome(123123))  # Output: 1221\nprint(previous_palindrome(123221))  # Output: 12221\nprint(previous_palindrome(123321))  # Output: 1221\nprint(previous_palindrome(123421))  # Output: 1221\nprint(previous_palindrome(1234321))  # Output: 12321\nprint(previous_palindrome(1234421))  # Output: 12321\nprint(previous_palindrome(12343321))  # Output: 12321\nprint(previous_palindrome(12344321))  # Output: 12321\nprint(previous_palindrome(12344421))  # Output: 123321\nprint(previous_palindrome(1234554321))  # Output: 1",
        "generated_testcode": "assert previous_palindrome(12321) == 1221\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if m < 1 or m > 12 or d < 1 or d > 31 or y < 1:\n        return False\n    if m == 2:\n        if d > 29:\n            return False\n        if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n            return True\n        elif d > 28:\n            return False\n    elif m in [4, 6, 9, 11]:\n        if d > 30:\n            return False\n    return True\n\nprint(check_date(2, 29, 20000))  # Output: True\nprint(check_date(2, 29, 1900))  # Output: False\nprint(check_date(9, 31, 2021))  # Output: True\nprint(check_date(11, 31, 2021))  # Output: True\nprint(check_date(2, 30, 2021))  # Output: False\nprint(check_date(2, 31, 2021))  # Output: False\nprint(check_date(13, 31, 2021))  # Output: False\n\n# Output:\n# False\n# False\n# True\n# True\n# False\n# False\n\n# This function checks if the date is valid or not. It first checks",
        "generated_testcode": "assert check_date(2, 29, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max1 = float('-inf')\n    max2 = float('-inf')\n    max3 = float('-inf')\n    min1 = float('inf')\n\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n\n        if num < min1:\n            min1 = num\n\n    return max(max1 * max2 * max3, max1 * min1 * max1)\n\n\n# Test the function with example\nprint(maximum_product([1, 2, 3, -6, -10, 8, 2, 3, 4]))  # Output: 216\nprint(maximum_product([-10, -10, -10, -10, -10, -10]))  # Output: 10000\nprint(maximum_product([-2, -3, 0, -1]))  # Output: 0\nprint(maximum_product([1, 2, 3, 4, 5]))  # Output: 60\nprint(maximum_product([1, 2, 3, 4, 5, 6]))  # Output: 360\nprint(maximum_product([-10, -20, -30",
        "generated_testcode": "assert maximum_product(nums) == 60\n\n# Test case 1:\nnums = [1, 2, 3, -1, -2, 4]\nprint(maximum_product(nums)) # Output: 60\n\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    else: \n        return (n * binomial_coeff(n-1, k-1)) // k \n\ndef ln_lobb_number(n): \n    sum = 0\n    for i in range(n+1): \n        sum += binomial_coeff(n, i)\n    return sum ",
        "generated_testcode": "assert binomial_coeff(5, 3) == 10\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if string[-1].isdigit():\n        return True\n    else:\n        return False\n\n# Test the function\nprint(end_num(\"hello1\")) # True\nprint(end_num(\"hello\")) # False\nprint(end_num(\"123\")) # True\nprint(end_num(\"123hello\")) # False\n\n\n# Write a function to check for a string at the end of a string\ndef end_str(string):\n    if string[-1].isalpha():\n        return True\n    else:\n        return False\n\n# Test the function\nprint(end_str(\"hello1\")) # False\nprint(end_str(\"hello\")) # True\nprint(end_str(\"123\")) # False\nprint(end_str(\"hello world\")) # True\n\n# Write a function to check for a specific string at the end of a string\ndef end_specific(string, specific_str):\n    if string[-len(specific_str):] == specific_str:\n        return True\n    else:\n        return False\n\n# Test the function\nprint(end_specific(\"hello world\", \"world\")) # True\nprint(end_specific(\"hello world\", \"hello\")) # False\nprint(end_specific(\"hello\", \"llo\")) # True\nprint(end_specific(\"hello world\", \"ld\")) # False\nprint(end_specific(\"hello world\", \"llo wor\")) # False\nprint(end_specific(\"hello world\", \"d\")) # False\n\n# Write a function to check for a specific string anywhere in",
        "generated_testcode": "assert end_num(string=\"hello123\") == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(s) <= 1:  \n        return True\n    else:\n        return (s[0] != s[1]) and is_Two_Alter(s[2:])\n    \n#Testing the function\ns = \"ABABAB\"\nprint(is_Two_Alter(s)) #True\ns = \"ABABA\"\nprint(is_Two_Alter(s)) #False\ns = \"ABAAB\"\nprint(is_Two_Alter(s)) #True\ns = \"AABBA\"\nprint(is_Two_Alter(s)) #True\ns = \"AAA\"\nprint(is_Two_Alter(s)) #True\ns = \"AB\"\nprint(is_Two_Alter(s)) #False ",
        "generated_testcode": "assert is_Two_Alter(s=\"ABABAB\") == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    neg = list(filter(lambda x: x < 0, array_nums))\n    pos = list(filter(lambda x: x >= 0, array_nums))\n    return neg + pos\n\n\narray_nums = [-1, 2, 3, 0, -5, 6, 8, -3, 7, 9]\nprint(rearrange_numbs(array_nums))\n\n# Output: [-1, -5, -3, 2, 3, 0, 6, 8, 7, 9]\n\n# Explanation: The function filters out the negative numbers and then positive numbers and joins them using the lambda function. ",
        "generated_testcode": "assert rearrange_numbs(array_nums=[1, -2, 3, -4, 5, 6, -7, 8, 9, -10]) == [-2, -4, -7, -10, 1, 3, 5, 6, 8, 9]\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    A.sort() \n    for i in range(0, arr_size - 2): \n        left = i + 1\n        right = arr_size - 1\n        while (left < right): \n            curr_sum = A[i] + A[left] + A[right] \n            if (curr_sum == sum): \n                return True\n            elif (curr_sum < sum): \n                left += 1\n            else: \n                right -= 1\n    return False\n  \n# Driver code \nA = [1, 4, 45, 13, 7, 23, 5, 22, 21, 3, 5] \nsum = 21\narr_size = len(A) \nif find_triplet_array(A, arr_size, sum): \n    print(\"Triplet found\") \nelse: \n    print(\"No triplet found\") \n\n# Output: Triplet found ",
        "generated_testcode": "assert find_triplet_array(A, arr_size, sum) == True\n\n# Test the function with an example\nA = [1, 4, 45, 6, 10, 15, 15]\narr_size = len(A)\nsum = 32\nprint(find_triplet_array(A, arr_size, sum)) # Output: True\n\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    seq = []\n    upper = False\n    current_seq = ''\n    for char in text:\n        if char.isupper():\n            if upper:\n                seq.append(current_seq)\n                current_seq = ''\n            current_seq += char\n            upper = True\n        else:\n            current_seq += char\n            upper = False\n    seq.append(current_seq)\n    return seq\n\n# Example usage:\nprint(text_uppercase_lowercase(\"HeLlO WoRLd\")) # ['He', 'Ll', 'o', 'Wo', 'RLd']\nprint(text_uppercase_lowercase(\"Python\")) # []\nprint(text_uppercase_lowercase(\"I Am Handling This\")) # ['I', ' Am', ' Handling ', 'This'] ",
        "generated_testcode": "assert text_uppercase_lowercase(text) == True\n\n# Test the function with the following input\ntext = \"Hello world\"\nprint(text_uppercase_lowercase(text)) # should return True\n\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    # Create a table to store the solutions of subproblems\n    dp = [[0 for x in range(n+1)] for x in range(m+1)] \n    # Base case: Fill the first row with the coin value\n    for i in range(m+1): \n        dp[i][0] = 1\n    # Fill the first column with 0 as we can't make any amount with 0 coins\n    for j in range(n+1): \n        dp[0][j] = 0\n    # Fill the table in bottom-up manner using the recurrence relation\n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            # If the coin value is greater than the current amount, we can't include this coin\n            if S[i-1] > j: \n                dp[i][j] = dp[i-1][j] \n            else: \n                # If the coin value is not greater, we have two options: \n                # including the coin or excluding the coin\n                dp[i][j] = dp[i-1][j] + dp[i][j-S[i-1]] \n    return dp[m][n] \n# Example usage:\nS = [1, 2, 3] \nm = len(S) \nn = 4\nprint(coin_change(S, m, n)) # Output",
        "generated_testcode": "assert coin_change(10, [1, 5, 3, 2], 3) == 5\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for item in items:\n        result *= item\n    return result\n\n# Example usage:\nprint(multiply_list([2, 3, 4, 5, 6]))  # Output: 120\nprint(multiply_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # Output: 3628880\nprint(multiply_list([-2, 3, 4, -5, 6]))  # Output: -120\nprint(multiply_list([1, 0, 3, 5, 7]))  # Output: 0\nprint(multiply_list([0, 0, 0, 0, 0]))  # Output: 0\nprint(multiply_list([]))  # Output: 1\n\n# Write a function to reverse the order of a list\ndef reverse_list(lst):\n    return lst[::-1]\n\n# Example usage:\nprint(reverse_list([1, 2, 3, 4, 5, 6]))  # Output: [6, 5, 4, 3, 2, 1]\nprint(reverse_list([\"apple\", \"banana\", \"cherry\"]))  # Output: ['cherry', 'banana', 'apple']\nprint(reverse_list([\"dog\", \"cat\", \"bird\"]))  # Output: ['bird', 'cat',",
        "generated_testcode": "assert multiply_list([]), 1\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in test_list:\n        if None not in i:\n            result.append(i)\n    return result\n\n# Example usage:\ntest_list = [(1, 2, 3, 4), (None, None, None), (5, 6, 7), (8, None, 9)]\nprint(remove_tuple(test_list)) # Output: [(1, 2, 3, 4), (5, 6, 7)] ",
        "generated_testcode": "assert remove_tuple(test_list) == expected_output\n\n# Test the function with the following input\ntest_list = [(1, 2, 3), (None, None), (4, 5, None), (6, None, 7), (None, None, None), (8, 9, 10)]\nexpected_output = [(1, 2, 3), (4, 5, None), (6, None, 7), (8, 9, 10)]\n\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return [test_tup[i:i + N] for i in range(0, len(test_tup), N)]\n\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\nN = 3\nresult = chunk_tuples(test_tup, N)\nprint(result)\n\n# Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\n\n\n# Example usage 2:\ntest_tup = (1, 2, 3, 4, 5)\nN = 2\nresult = chunk_tuples(test_tup, N)\nprint(result)\n\n# Output: [(1, 2), (3, 4), (5,)] \n\n# Note: If the length of the tuple is not divisible by N, then the last element will be a tuple with less than N elements. ",
        "generated_testcode": "assert chunk_tuples(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p'), 3) == [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i'), ('j', 'k', 'l'), ('m', 'n', 'o'), ('p',)]\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    arr.sort()\n    return max(arr[-1] * arr[-2], arr[0] * arr[1])\n\n# Example usage:\nprint(max_product([10, 3, 5, 1, 7, 2, 8, 9])) # Output: 70\nprint(max_product([-10, -3, -5, -1, -7, -2, -8, -9])) # Output: 56\nprint(max_product([-2, 0, -1, -3])) # Output: 0\nprint(max_product([-2, 4, 3, 5, -1, 0, 6])) # Output: 30\nprint(max_product([1, -2, 3, 4, 5])) # Output: 20\nprint(max_product([1, 2, 3, 4, 5])) # Output: 20\nprint(max_product([-2, -1, 0, 1, 3])) # Output: 0\nprint(max_product([-2, 4, 3, -5, 6, 7])) # Output: 42\nprint(max_product([-2, 4, -3, -5, 6, 7])) # Output: 42 ",
        "generated_testcode": "assert max_product(arr=[-10, -10, 5, 2, 6]) == 500\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dp = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if not i:\n                dp[i][j] = j\n            elif not j:\n                dp[i][j] = i\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n            for k in range(max(0, i - 1):\n                if X[i - 1] == Y[k]:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][k])\n    return dp[m][n]\n\n# Test the function\nprint(super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 6))\n# Output: 4\nprint(super_seq(\"AGGTAB\", \"GXTXB\", 6, 4))\n# Output: 4\nprint(super_seq(\"ABC\", \"BCD\", 3, 3))\n# Output: 1",
        "generated_testcode": "assert super_seq(X, Y, m, n) == \"abcd\"\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x > y:\n        return x\n    else:\n        return y\n\n# Test the function\nprint( max_of_two( 10, 20 ) ) # should output 20\nprint( max_of_two( 10, -20 ) ) # should output 10\nprint( max_of_two( -10, 0 ) ) # should output 0\n\n# Function to find the minimum of two numbers\ndef min_of_two( x, y ):\n    if x < y:\n        return x\n    else:\n        return y\n\n# Test the function\nprint( min_of_two( 10, 20 ) ) # should output 10\nprint( min_of_two( 10, -20 ) ) # should output -20\nprint( min_of_two( -10, 0 ) ) # should output -10\n\n# Function to add two numbers\ndef add_two_numbers( x, y ):\n    return x + y\n\n# Test the function\nprint( add_two_numbers( 10, 20 ) ) # should output 30\nprint( add_two_numbers( 10, -20 ) ) # should output -10\nprint( add_two_numbers( -10, 0 ) ) # should output -10\n\n# Function to multiply two numbers\ndef multiply_two_numbers( x, y ):\n    return x * y\n\n# Test the",
        "generated_testcode": "assert max_of_two(5, 10 ) == 10\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    result = 1\n    for num in nums:\n        result *= num\n    return result\n\n# Test the function with the following tuple\nnums = (2, 3, 4, 5, 6, 7)\nprint(mutiple_tuple(nums))  # Output: 5040\n\n# Test the function with another tuple\nnums = (1, 2, 3, 4, 5)\nprint(mutiple_tuple(nums))  # Output: 120\n\n# Test the function with an empty tuple\nnums = ()\nprint(mutiple_tuple(nums))  # Output: 1 (since an empty tuple multiplies to 1) ",
        "generated_testcode": "assert mutiple_tuple(()) == 1\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if k == 0 or k == n: \n        return 1\n    elif k > n: \n        return 0\n    else: \n        return binomial_coeffi(n-1, k-1) + binomial_coeffi(n-1, k) \n  \ndef nth_rencontres_number(n, p): \n    C = binomial_coeffi(2*n, n) \n    return C * (p**n) * ((1-p)**n) \n  \nn = 5\np = 0.5\n  \nprint(\"The nth Rencontres number is: \", nth_rencontres_number(n, p)) ",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 10\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef height(node):\n\tif node is None:\n\t\treturn 0\n\telse:\n\t\treturn max(height(node.left), height(node.right))+1\n\n#This function will return the height of the binary tree. ",
        "generated_testcode": "assert __init__(10) == 1\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    dt_split = dt.split(\"-\")\n    year = dt_split[0]\n    month = dt_split[1]\n    day = dt_split[2]\n    new_dt = day + \"-\" + month + \"-\" + year\n    return new_dt\n\n\n# Test the function with an example\ndt = \"2021-10-09\"\nprint(change_date_format(dt)) # Output: \"09-10-2021\"\n\n# Test the function with another example\ndt = \"2020-03-29\"\nprint(change_date_format(dt)) # Output: \"29-03-2020\" ",
        "generated_testcode": "assert change_date_format(2021-05-15) == \"15-05-2021\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0  \n    for item in tuplex:  \n        if item == value:  \n            count = count + 1  \n    return count  \n  \n# example usage  \nmytuple = (1, 2, 3, 4, 1, 2, 3, 4, 5)  \nprint(count_tuplex(mytuple, 3)) # output: 2  \nprint(count_tuplex(mytuple, 6)) # output: 0  \nprint(count_tuplex(mytuple, 1)) # output: 2  ",
        "generated_testcode": "assert count_tuplex(('hello', 'world', 'hello', 'python', 'world', 'python', 'python', 'python') == 3\n\n# Output: 3\n\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    pattern = r'a.*b+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(text_match(\"ab\")) # True\nprint(text_match(\"abc\")) # True\nprint(text_match(\"abb\")) # True\nprint(text_match(\"a\")) # False\nprint(text_match(\"bc\")) # False\nprint(text_match(\"abcbb\")) # True\nprint(text_match(\"abbc\")) # True\nprint(text_match(\"aab\")) # True\nprint(text_match(\"\")) # False\n\n# This function matches a followed by zero or more b's and returns True if a match is found, False otherwise. ",
        "generated_testcode": "assert text_match(r'ab') == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**3\n    return sum\n\n# Test the function with the value of n=5\nprint(sum_series(5)) # Output: 225\n\n# Test the function with the value of n=10\nprint(sum_series(10)) # Output: 3225\n\n# Test the function with the value of n=15\nprint(sum_series(15)) # Output: 124000 ",
        "generated_testcode": "assert sum_series(3) == 36\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    return list(dict.fromkeys(l))\n\n#Test the function\nl = ['apple', 'banana', 'cherry', 'apple', 'orange', 'banana', 'pear', 'orange', 'apple']\nprint(remove_duplic_list(l))\n\n#Output: ['cherry', 'pear', 'banana', 'orange', 'apple']\n\n#Another example\nl = ['cat', 'dog', 'fish', 'cat', 'cat', 'elephant', 'bird', 'dog']\nprint(remove_duplic_list(l))\n\n#Output: ['fish', 'bird', 'elephant']\n\n\n#Another example\nl = ['apple', 'banana', 'cherry', 'apple', 'orange', 'banana', 'pear', 'orange', 'apple', 'cat', 'dog', 'fish', 'cat', 'cat', 'elephant', 'bird', 'dog']\nprint(remove_duplic_list(l))\n\n#Output: ['pear', 'orange', 'cherry', 'bird', 'apple', 'dog', 'fish', 'cat', 'banana'] ",
        "generated_testcode": "assert remove_duplic_list([\"hello\", \"world\", \"hello\", \"python\", \"world\"]) == [\"hello\", \"world\", \"python\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return re.sub(r'(?<!^)(?=[A-Z])', '_', text).lower()\n\n# Example usage:\nprint(camel_to_snake(\"camelCaseString\")) # Output: \"camel_case_string\"\nprint(camel_to_snake(\"longCamelCaseString\")) # Output: \"long_camel_case_string\"\nprint(camel_to_snake(\"CamelCaseString\")) # Output: \"camel_case_string\"\nprint(camel_to_snake(\"camelCaseString123\")) # Output: \"camel_case_string123\"\nprint(camel_to_snake(\"camelCase\")) # Output: \"camel_case\"\n\n# This function will replace all capital letters with an underscore and lowercase the string. ",
        "generated_testcode": "assert camel_to_snake(text=\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if (n == 0 or m == 0): \n        return 1\n    elif (n == 1 or m == 1): \n        return 1\n    else: \n        return (dealnnoy_num(n-1, m) + dealnnoy_num(n, m-1)) \n  \n# Function to find the sum of delannoy number upto n \ndef sum_delannoy_num(n): \n    sum = 0\n    for i in range(n+1): \n        sum += dealnnoy_num(n, i) \n    return sum \n  \nn = 4\nprint(\"Sum of Delannoy numbers upto\", n, \"is\", sum_delannoy_num(n)) ",
        "generated_testcode": "assert dealnnoy_num(5, 2) == 15\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, number+1):\n        sum += i**2\n    return sum\n\n# Test the function with different values of n\nprint(series_sum(5))  # Output: 55\nprint(series_sum(10))  # Output: 385\nprint(series_sum(15))  # Output: 1240\n\n# Explanation:\n# The function takes an integer n as input and initializes a variable sum to 0. It then loops through a range from 1 to n and adds the square of each number to the sum. Finally, it returns the sum.\n# The range function generates a sequence of numbers from 1 to n, and the square operator (**) raises each number to the power of 2. ",
        "generated_testcode": "assert series_sum(5) == 55 # 1\u00b2+2\u00b2+3\u00b2+4\u00b2+5\u00b2 = 1+4+9+16+25 = 31\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for i in ord_list:\n        for j in test_list:\n            if i == j[1]:\n                result.append(j)\n    return result\n\n# Test Cases\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nord_list = [2, 4, 1, 8, 6, 5, 9]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(3, 4), (1, 2), (7, 8), (9, 10), (5, 6)]\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nord_list = [2, 4, 1, 8, 3, 5]\nprint(re_arrange_tuples(test_list, ord_list))  # Output: [(1, 2), (3, 4), (7, 8), (5, 6), (9, 10)]\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nord_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1",
        "generated_testcode": "assert re_arrange_tuples(test_list, ord_list) == [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\n\n# Test the function with the following inputs\ntest_list = [(1, 'a', 'apple'), (2, 'b', 'banana'), (3, 'c', 'cherry'), (4, 'd', 'date')]\nord_list = [1, 2, 3, 4]\nprint(re_arrange_tuples(test_list, ord_list)) ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    freq = {}\n    for i in str1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_char = \"\"\n    max_count = 0\n    for key, value in freq.items():\n        if value > max_count:\n            max_char = key\n            max_count = value\n    return max_char, max_count\n\nprint(max_char(\"Hello World\"))\n# Output: ('l', 3)\n\n# OR\n\nfrom collections import Counter\n\ndef max_char(str1):\n    return Counter(str1).most_common(1)[0]\n\nprint(max_char(\"Hello World\"))\n# Output: ('l', 3)\n\n#OR\n\ndef max_char(str1):\n    count = {}\n    max_char = \"\"\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n        if count[char] > count.get(max_char, 0):\n            max_char = char\n    return max_char, count[max_char]\n\nprint(max_char(\"Hello World\"))\n# Output: ('l', 3)\n",
        "generated_testcode": "assert max_char(input_string) == expected_output\n\n# Test the function with the following input and expected output:\ninput_string = \"Hello World\"\nexpected_output = \"l\"\n\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    n1 = len(A)\n    n2 = len(B)\n    n3 = len(C)\n\n    i = 0\n    j = 0\n    k = 0\n    closest = float('inf')\n    res = []\n\n    while i < n1 and j < n2 and k < n3:\n        a = abs(p - A[i])\n        b = abs(q - B[j])\n        c = abs(r - C[k])\n\n        if a == b == c:\n            return A[i], B[j], C[k]\n\n        if a == b:\n            if b == c:\n                return A[i], B[j], C[k]\n            elif a < c:\n                res = A[i], B[j], C[k]\n                k += 1\n            else:\n                res = A[i], B[j], C[k]\n                j += 1\n        elif b == c:\n            if a < c:\n                res = A[i], B[j], C[k]\n                i += 1\n            else:\n                res = A[i], B[j], C[k]\n                k += 1\n        elif a == c:\n            if b < a:\n                res = A[i], B[j], C[k]\n                j += 1\n            else:\n                res = A[i], B[j], C[k]\n                i += 1\n        elif",
        "generated_testcode": "assert find_closet(A, B, C, 0, 0, 0) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return sorted(models, key=lambda x: x['id'])\n\n\n# example usage\nmodels = [\n    {\"id\": 3, \"name\": \"Car\"},\n    {\"id\": 1, \"name\": \"Bike\"},\n    {\"id\": 2, \"name\": \"Boat\"}\n]\nprint(sorted_models(models))\n# Output: [{\"id\": 1, \"name\": \"Bike\"}, {\"id\": 2, \"name\": \"Boat\"}, {\"id\": 3, \"name\": \"Car\"}]\n\n# Write a function to sort a list of dictionaries by multiple keys using lambda function.\ndef sorted_models_multiple(models):\n    return sorted(models, key=lambda x: (x['price'], x['id'])\n\n# example usage\nmodels = [\n    {\"id\": 3, \"name\": \"Car\", \"price\": 100000},\n    {\"id\": 1, \"name\": \"Bike\", \"price\": 5000},\n    {\"id\": 2, \"name\": \"Boat\", \"price\": 20000}\n]\nprint(sorted_models_multiple(models))\n# Output: [{\"id\": 1, \"name\": \"Bike\", \"price\": 5000}, {\"id\": 3, \"name\": \"Car\", \"price\": 10000}, {\"id\": 2, \"name\": \"Boat\", \"price\": 20000}] ",
        "generated_testcode": "assert sorted_models(models) == sorted(models, key=lambda x: x['name'])\n\n# Test the function with the following input\nmodels = [\n    {'name': 'A', 'price': 1000},\n    {'name': 'B', 'price': 200},\n    {'name': 'C', 'price': 50},\n    {'name': 'D', 'price': 150},\n    {'name': 'E', 'price': 75},\n]\n\n",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort(arr):\n        n = len(arr)\n\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n - 1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n    heap_sort(arr)\n    return arr\n\n\n# Example usage:\narr = [12, 11, 13, 5, 6, 5, 3, 1, 10, 8]\nprint(\"Sorted array is\", heap_sort(arr))\n",
        "generated_testcode": "assert heap_sort(arr) == sorted(arr)\n\n# Test the function with an example array\narr = [3, 1, 4, 2, 5, 6, 7, 8, 9, 10]\nprint(heap_sort(arr)) # should print [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in num:\n        if isinstance(i, tuple):\n            break\n        count += 1\n    return count\n\n# Test cases\nprint(count_elim([1, 2, 3, (4, 5, 6), 7, 8]))  # Should print 3\nprint(count_elim([1, 2, 3, 4, 5]))        # Should print 4\nprint(count_elim([1]))                    # Should print 1\nprint(count_elim([]))                    # Should print 0\nprint(count_elim((1, 2, 3, 4, 5))        # Should print 0 (empty tuple)\n\n# Test the function with the given examples\nprint(count_elim([1, 2, 3, (4, 5, 6), 7, 8]))  # Should print 3\nprint(count_elim([1, 2, 3, 4, 5]))        # Should print 4\nprint(count_elim([1]))                    # Should print 1\nprint(count_elim([]))                    # Should print 0\nprint(count_elim((1, 2, 3, 4, 5))        # Should print 0 (empty tuple) ",
        "generated_testcode": "assert count_elim(1) == 1\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return any(elem in test_tup for elem in check_list)\n\n# Test case\nprint(check_element((1, 2, 3, 4, 5), [3, 6, 8, 9]))  # Output: True\nprint(check_element((1, 2, 3, 4, 5), [7, 8, 9]))  # Output: False\nprint(check_element((1, 2, 3, 4, 5), [])  # Output: False\n\n# Check if all elements of the tuple are present in the given list\ndef check_elements(test_tup, check_list):\n    return all(elem in check_list for elem in test_tup)\n\n# Test case\nprint(check_elements((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6, 7, 8])  # Output: True\nprint(check_elements((1, 2, 3, 4, 5), [1, 2, 3, 4])  # Output: False\nprint(check_elements((1, 2, 3, 4, 5), [1, 2, 3, 4, 5, 6])  # Output: False\nprint(check_elements((1, 2, 3, 4, 5), [])  # Output: False\n\n# Check if any element of the tuple is not present",
        "generated_testcode": "assert check_element(('a', ['a', 'b', 'c']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    res = []\n    i = 0\n    j = 0\n    while i<len(num1) and j<len(num2):\n        if num1[i]<num2[j]:\n            res.append(num1[i])\n            i += 1\n        else:\n            res.append(num2[j])\n            j += 1\n    res.extend(num1[i:])\n    res.extend(num2[j:])\n    return res\n\n# Example usage:\nnum1 = [1, 3, 5, 7, 9, 11, 13]\nnum2 = [2, 4, 6, 8, 10, 12, 14, 16]\nprint(combine_lists(num1, num2)) # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16]\n\n# Function to combine two sorted lists using heapq module\nimport heapq\ndef combine_lists_heapq(num1, num2):\n    res = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    while num1 and num2:\n        if num1[0] <= num2[0]:\n            res.append(heapq.heappop(num1))\n",
        "generated_testcode": "assert combine_lists(num1=[1,3,5,7], num2=[2,4,6,8]) == [1,2,3,4,5,6,7,8]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    numbers = []\n    position = []\n    for i in range(len(text)):\n        if text[i].isdigit():\n            numbers.append(int(text[i])); position.append(i)\n    print(\"Numbers:\",numbers)\n    print(\"Position:\",position)\n\n# Example usage:\ntext = \"The price of toothpaste is 12.99, not 9.99\"\nnum_position(text)\n\n# Output:\n# Numbers: [1, 2, 9, 9, 9, 2, 9, 9]\n# Position: [15, 16, 18, 19, 22, 24, 25]\n\n# Note: The position of each digit in the string is printed in the order they appear, not in numerical order. ",
        "generated_testcode": "assert num_position(input_string) == expected_output\n\n# Test the function with the following input and expected output:\ninput_string = \"The quick brown fox jumps over the lazy dog\"\nexpected_output = {'The': 0, 'quick': 1, 'brown': 2, 'fox': 3, 'jumps': 4, 'over': 5, 'the': 6, 'lazy': 7, 'dog': 8}\n\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return set(t)\n\n#Example usage:\nt = (1, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 8)\nprint(tuple_to_set(t)) # Output: {1, 2, 3, 4, 5, 6, 7, 8} ",
        "generated_testcode": "assert tuple_to_set((\"apple\", \"banana\", \"cherry\", \"apple\") == {\"apple\", \"banana\", \"cherry\"}\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    words = s.split()\n    count_dict = {}\n    for word in words:\n        if word not in count_dict:\n            count_dict[word] = 1\n        else:\n            count_dict[word] += 1\n    sorted_dict = sorted(count_dict.items(), key=lambda x:x[1], reverse=True)\n    for i in range(a):\n        print(sorted_dict[i][0], sorted_dict[i][1])\n\n\ns = input(\"Enter the text: \")\na = int(input(\"Enter the number of most common elements you want to see: \"))\nmost_common_elem(s,a) ",
        "generated_testcode": "assert most_common_elem([\"hello\", \"world\", \"hello\", \"python\", \"world\", \"python\", \"python\", \"python\", \"java\", \"java\", \"java\", \"java\", \"java\", \"java\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"c++\", \"",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    shortest = len(list1[0])\n    for word in list1:\n        if len(word) < shortest:\n            shortest = len(word)\n    return shortest\n\n\n# Test the function\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nprint(len_log(list1))  # Output: 5\nlist2 = [\"python\", \"is\", \"awesome\", \"programming\", \"language\"]\nprint(len_log(list2))  # Output: 4\nlist3 = [\"short\", \"long\", \"very\", \"very\", \"longest\", \"word\"]\nprint(len_log(list3))  # Output: 4\n",
        "generated_testcode": "assert len_log([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == 5\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    return tup1[index]\n\n# Define a tuple\ntup1 = (1, 2, 3, 4, 5, 6)\n\n# Get the third item of the tuple\nprint(get_item(tup1, 2)) # Output: 3\n\n# Get the first item of the tuple\nprint(get_item(tup1, 0)) # Output: 1 ",
        "generated_testcode": "assert get_item(('apple', 'banana', 'cherry'), 1) == 'banana'\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    count = 0\n    for i in tup:\n        if type(i) == int:\n            count += 1\n        else:\n            for j in i:\n                if type(j) == int:\n                    count += 1\n    return count\n\ndef sort_tuple(tup):\n    return sorted(tup, key=count_digs)\n\n# Test the function with an example\ntup = (1, (2, 3, 4), \"hello\", (5, 6, 7, 8, 9), 10, (11, 12, 13), 14, (15, 16, 17, 18, 19, 20))\nprint(sort_tuple(tup)) # Output: (1, 14, 'hello', (2, 3, 4), (5, 6, 7, 8, 9), (11, 12, 13), (15, 16, 17, 18, 19, 20)) ",
        "generated_testcode": "assert count_digs(('123', '456', '789') == 27)\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "13B",
        "pass": 4,
        "correct": true,
        "answer": "    zodiac = [\"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Goat\", \"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\"]\n    return zodiac[(year-4)%12]\n\n# Test cases\nprint(chinese_zodiac(2019)) # output: \"Rat\"\nprint(chinese_zodiac(1988)) # output: \"Dog\"\nprint(chinese_zodiac(1997)) # output: \"Pig\"\nprint(chinese_zodiac(2002)) # output: \"Rat\"\nprint(chinese_zodiac(2020)) # output: \"Ox\" ",
        "generated_testcode": "assert chinese_zodiac(1996) == \"Rat\"\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    # create a dictionary to store the values of the tuples in the first list as keys and their index as value\n    dict1 = {}\n    for i in range(len(test_list1)):\n        dict1[test_list1[i][0]] = i\n\n    # iterate through the second list and check if the value in the first position of each tuple is in the dictionary\n    # if it is, append the index to the list of similar indices\n    similar_indices = []\n    for j in range(len(test_list2)):\n        if test_list2[j][0] in dict1:\n            similar_indices.append(dict1[test_list2[j][0]])\n    return similar_indices\n\n\n# example usage\ntest_list1 = [(1, \"apple\"), (2, \"banana\"), (3, \"orange\"), (4, \"grape\"), (5, \"pear\")]\ntest_list2 = [(\"apple\", \"fruit\"), (3, \"fruit\"), (6, \"vegetable\"), (4, \"fruit\")]\nprint(max_similar_indices(test_list1, test_list2))  # should return [0, 2]\n\n# time complexity: O(n)\n# space complexity: O(n)\n",
        "generated_testcode": "assert max_similar_indices([(1, 2, 3), (4, 5, 6), (7, 8, 9)], [(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [0, 1, 2]\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    C = [0 for i in range(r+1)] \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p \n    return C[r] \n\n# Function to compute (a^b)%m in O(log b) time\ndef power(a, b, m): \n    res = 1\n    a = a % m \n    while b > 0: \n        if b & 1: \n            res = (res * a) % m \n        b = b >> 1\n        a = (a * a) % m \n    return res \n\n# Function to compute (a^b)%m in O(log b) time\ndef power(a, b, m): \n    res = 1\n    a = a % m \n    while b > 1: \n        if b % 2 == 0: \n            a = (a * a) % m \n            b = b // 2\n        else: \n            res = (res * a) % m \n            b = b - 1\n            a = (a * a) % m \n    return res \n\n# Function to compute n! % p in O(n) time\ndef factorial(n, p): \n    fact = 1\n   ",
        "generated_testcode": "assert nCr_mod_p(5, 3, 10) == 10\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return 2**n \n\n# Driver code \nar = [1, 2, 3] \nn = len(ar) \nprint(\"Minimum number of subsets with distinct elements = \", subset(ar, n)) ",
        "generated_testcode": "assert subset([\"a\", \"b\", \"c\", \"d\"], 2) == 4\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if sale_amount>actual_cost: \n        return sale_amount-actual_cost \n    else: \n        return None\n\nprint(profit_amount(1000,200)) # Output: 100\nprint(profit_amount(200,100)) # Output: None\n\n# Alternative solution\ndef profit_amount(actual_cost,sale_amount): \n    return sale_amount-actual_cost if sale_amount>actual_cost else None \n\nprint(profit_amount(100,200)) # Output: 100\nprint(profit_amount(200,100)) # Output: None\n\n# Can you write a function that tells if a number is prime or not?\ndef is_prime(num): \n    if num < 2: \n        return False \n    for i in range(2,int(num**0.5)+1): \n        if num%i==0: \n            return False \n    return True \n\nprint(is_prime(7)) # Output: True\nprint(is_prime(15)) # Output: False\n\n# Alternative solution\ndef is_prime(num): \n    return num > 1 and all(num%i!=0 for i in range(2,num)) \n\nprint(is_prime(7)) # Output: True\nprint(is_prime(15)) # Output: False ",
        "generated_testcode": "assert profit_amount(100, 150) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(divisors(n)) > n\n\ndef divisors(n):\n    div = []\n    for i in range(1, n):\n        if n % i == 0:\n            div.append(i)\n    return div\n\n# Write a function to find all the abundant numbers less than or equal to a given number.\ndef abundant_numbers(n):\n    abundants = []\n    for i in range(1, n):\n        if is_abundant(i):\n            abundants.append(i)\n    return abundants\n\n# Write a function to find all the numbers that cannot be written as a sum of two abundant numbers.\ndef cannot_write_as_sum_of_abundant(n):\n    cannot = []\n    abundants = abundant_numbers(n)\n    for i in range(1, n):\n        found = False\n        for j in range(len(abundants)):\n            if i - abundants[j] in abundants:\n                found = True\n                break\n        if not found:\n            cannot.append(i)\n    return cannot\n\n# Test the functions.\nprint(is_abundant(12)) # True\nprint(divisors(12)) # [1, 2, 3, 4, 6]\nprint(abundant_numbers(24)) # [12]\nprint(cannot_write_as_sum_of_abundant(28)) # [1, 2",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return re.findall('[A-Z][a-z]*', text)\n\n# Example usage:\nprint(split_list('HelloWorldPython')) # Output: ['Hello', 'Python']\nprint(split_list('BonjourPython')) # Output: ['Bonjour', 'Python']\nprint(split_list('ThisIsAString')) # Output: ['This', 'Is', 'A', 'String']\nprint(split_list('Python')) # Output: ['Python']\nprint(split_list('ThisIsA1String')) # Output: ['This', 'Is', 'A1', 'String']\nprint(split_list('ThisIsAnotherString')) # Output: ['This', 'Is', 'Another', 'String'] ",
        "generated_testcode": "assert split_list(text=\"PythonIsAwesome\") == [\"P\", \"Y\", \"T\", \"H\", \"O\", \"N\", \"I\", \"S\", \"A\", \"W\", \"S\", \"O\", \"M\", \"E\"]\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "13B",
        "pass": 5,
        "correct": true,
        "answer": "    return n & -n\n\n# Test the function with the following input.\nn = 7\nprint(\"Position of rightmost set bit is\", get_First_Set_Bit_Pos(n))\n\n# Output: 3\n# The rightmost set bit in 7 is at position 3. \n\n# Here, the function uses bitwise AND operation to find the rightmost set bit. ",
        "generated_testcode": "assert get_First_Set_Bit_Pos(12) == 4\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    val = [\n        10000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n    ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\n# Test the function with some sample inputs\nprint(int_to_roman(1234))  # Output: \"CXXIII\"\nprint(int_to_roman(4999))  # Output: \"CDXCIX\"\nprint(int_to_roman(39999))  # Output: \"MMMCMXCIX\"\n\n\n# Now, write a function to convert a roman numeral to an integer\ndef roman_to_int(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}",
        "generated_testcode": "assert int_to_roman(1) == \"I\"\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "13B",
        "pass": 8,
        "correct": true,
        "answer": "    return sum(lst) / len(lst) \n\n# Sample usage\nlst = [1, 2, 3, 4, 5]\nprint(Average(lst)) ",
        "generated_testcode": "assert Average(lst) == 3.",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_noOfways(n-1) + get_noOfways(n-2)\n\nprint(get_noOfways(int(input(\"Enter the number of tiles: \")))\n\n# Output:\n# Enter the number of tiles: 4\n# 3\n# Time Complexity: O(2^n)\n# Space Complexity: O(n) ",
        "generated_testcode": "assert get_noOfways(3) == 1\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    roman_to_int = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    ans = 0\n    prev = 0\n    for c in s[::-1]:\n        curr = roman_to_int[c]\n        ans += curr\n        if curr > prev:\n            ans -= 2 * prev\n        prev = curr\n    return ans\n\n\n# Test the function\nprint(roman_to_int('III'))  # Output: 3\nprint(roman_to_int('LVIII'))  # Output: 58\nprint(roman_to_int('MCMXCIV'))  # Output: 1994\nprint(roman_to_int('MMMCMXCIX'))  # Output: 39999\n",
        "generated_testcode": "assert roman_to_int(s) == expected_output\n\n# Test cases:\n# Test case 1:\ns = \"III\"\nexpected_output = 3\n\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "13B",
        "pass": 6,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(2, n+1): \n        if i % 2 == 0: \n            sum += i \n    return sum\n\n# Driver code \nl = 2\nr = 10\nprint(\"Sum of even numbers in the range [\", l, \",\", r, \"] is\", sum_Natural(r)) \n  ",
        "generated_testcode": "assert sum_Natural(10) == 30\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    return (x**2) * (y**2) - 4*x*y*z\n\n# Input the value of x, y, and z\nx = int(input(\"Enter the value of x: \"))\ny = int(input(\"Enter the value of y: \"): \")\nz = int(input(\"Enter the value of z: \")\n\n# Calculate the discriminant value\ndiscriminant = discriminant_value(x,y,z)\n\n# Print the discriminant value\nprint(\"The discriminant value is:\", discriminant)\n\n# Check if the discriminant is negative or positive or zero\nif discriminant < 0:\n    print(\"Discriminant is negative\")\nelif discriminant == 0:\n    print(\"Discriminant is zero\")\nelse:\n    print(\"Discriminant is positive\")\n\n# Calculate the roots of the equation\nimport math\nroot1 = (-y + math.sqrt(discriminant))/2*x\nroot2 = (-y - math.sqrt(discriminant))/2*x\n\n# Print the roots\nprint(\"Root 1 =\", root1)\nprint(\"Root 2 =\", root2)\n```\n\nThe above program will ask the user to input the values of x, y, and z and will calculate the discriminant value and check if it is positive, negative, or zero. It will then calculate the roots of the equation and print them. ",
        "generated_testcode": "assert discriminant_value(1,2,3) == 1\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return True\n    else:\n        return False \n\n#Example usage: \nprint(word_len(\"Hello\")) #Output: False\nprint(word_len(\"World\")) #Output: True\nprint(word_len(\"Python\")) #Output: False\n\n#Explanation: \n#The function checks whether the length of the input string is even or not using the modulo operator(%). \n#If the length is even, the function returns True, else it returns False. \n#The modulo operator returns the remainder of the length of the string divided by 2. If the remainder is zero, the length is even, \n#else it is odd. ",
        "generated_testcode": "assert word_len(s) == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    snake_case = \"\"\n    for char in text:\n        if char.isupper():\n            snake_case += \"_\" + char.lower()\n        else:\n            snake_case += char\n    return snake_case.strip(\"_\")\n\n# Test the function with sample input\nprint(camel_to_snake(\"camelCaseString\")) # should return \"camel_case_string\"\nprint(camel_to_snake(\"camelCase\")) # should return \"camel_case\"\nprint(camel_to_snake(\"CamelCaseString\")) # should return \"camel_case_string\"\nprint(camel_to_snake(\"Snake_case_string\")) # should return \"snake_case_string\"\nprint(camel_to_snake(\"snake_case_string\")) # should return \"snake_case_string\"\nprint(camel_to_snake(\"snake_case_String\")) # should return \"snake_case_string\"\nprint(camel_to_snake(\"\")) # should return \"\"\nprint(camel_to_snake(\"one\")) # should return \"one\"\nprint(camel_to_snake(\"ONE\")) # should return \"one\"\nprint(camel_to_snake(\"One\")) # should return \"one\"\nprint(camel_to_snake(\"oneTwo\")) # should return \"one_two\"\nprint(camel_to_snake(\"OneTwo\")) # should return \"one_two",
        "generated_testcode": "assert camel_to_snake(text=\"helloWorld\") == \"hello_world\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = []\n    for t in tuple1:\n        if len(t) != 0:\n            result.append(t)\n    return result\n\nprint(remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])) #output: [('a', 'b', 'c')] ",
        "generated_testcode": "assert remove_empty(L) == [('a', 'b', 'c'), ('d')]\n\n# Test the function with the following input:\nL = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\nprint(remove_empty(L)) # should output [('a', 'b', 'c'), ('d')]\n\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in string:\n        if i in vowels:\n            return True\n    return False\n\n# Test Cases\nprint(check(\"hello\"))  # Output: True\nprint(check(\"world\")) # Output: True\nprint(check(\"python\")) # Output: True\nprint(check(\"programming\")) # Output: True\nprint(check(\"example\")) # Output: True\nprint(check(\"test\")) # Output: False\nprint(check(\"space\")) # Output: False ",
        "generated_testcode": "assert check(input_string) == Tru",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if B == 0:\n        return 0\n    elif A == 0:\n        return N*B\n    elif B%A == 0:\n        return N*B//A\n    else:\n        return N*(A//B)*(B//A) + N*(A//B)\n\nA = 5\nB = 10\nN = 10\nprint(floor_Max(A,B,N))\n\n# Test Cases\n# Test Case 1\n# Input:\n# A = 5, B = 10, N = 10\n# Output: 20\n\n# Test Case 2\n# Input:\n# A = 0, B = 10, N = 10\n# Output: 100\n\n# Test Case 3\n# Input:\n# A = 5, B = 0, N = 10\n# Output: 0\n\n# Test Case 4\n# Input:\n# A = 5, B = 15, N = 10\n# Output: 15\n\n# Time Complexity: O(1)\n# Space Complexity: O(1)\n\n# Explanation:\n# The function only performs a few arithmetic operations and returns the result directly, hence the time and space complexity is constant. ",
        "generated_testcode": "assert floor_Max(1,2,3) == 6\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    final_list = []\n    temp_list = []\n    for i in test_list:\n        if len(temp_list) == 0:\n            temp_list.append(i)\n        elif i[0] == temp_list[-1][0]:\n            temp_list.append(i)\n        else:\n            final_list.append(temp_list)\n            temp_list = [i]\n    final_list.append(temp_list)\n    return final_list\n\n# Test the function\ntest_list = [(1,2),(1,3),(1,4),(2,5),(3,6),(3,7),(3,8),(4,9)]\nprint(join_tuples(test_list)) # Output: [[(1, 2), (1, 3), (1, 4)], [(2, 5)], [(3, 6), (3, 7), (3, 8)], [(4, 9)]]\n\n# Explanation:\n# The function iterates through the list of tuples and checks if the first element of current tuple is same as the last element of the temp_list. If yes, it appends the tuple to the temp_list. If not, it appends the temp_list to the final_list and creates a new temp_list with current tuple.\n# The final_list contains the tuples that have similar initial elements grouped together. ",
        "generated_testcode": "assert join_tuples(test_list) == [('a', 'b', 'c', 'd'), ('e', 'f', 'g'), ('h', 'i', 'j', 'k', 'l'), ('m', 'n', 'o', 'p', 'q', 'r')]\n\n# The output should be [('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r')]\n\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "13B",
        "pass": 2,
        "correct": true,
        "answer": "    if x < y:\n        return x\n    else:\n        return y\n\n# Test the function with some sample inputs\nprint(min_of_two(5, 7))  # Output: 5\nprint(min_of_two(2, 3))  # Output: 2\nprint(min_of_two(-2, -7))  # Output: -7\nprint(min_of_two(0, 0))  # Output: 0\n\n# Can you find a case where it fails? ",
        "generated_testcode": "assert min_of_two(3, 5 ) == 3\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    max_segments = 0\n    if n >= a + b + c : \n        max_segments = n // (a + b + c)\n    else : \n        if n >= a + b : \n            max_segments += n // (a + b)\n            n -= (a + b) * (n // (a + b) + n % (a + b) // a)\n        if n >= b : \n            max_segments += n // b\n            n -= b * (n // b)\n        if n >= c : \n            max_segments += n // c\n    return max_segments\n\n\n# Test the function with an example \nprint(maximum_segments(10, 4, 5)) ",
        "generated_testcode": "assert maximum_segments(10, 2, 3) == 3\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] + test_tup2[i],)\n    return result\n\n# Test the function with the example tuples\ntup1 = ((1, 2, 3), (4, 5), (6, 7, 8, 9))\ntup2 = ((10, 11, 12), (13, 14), (15, 16, 17))\nprint(concatenate_nested(tup1, tup2))  # Output: ((1, 2, 3, 10, 11, 12), (4, 5, 13, 14), (6, 7, 8, 9, 15, 16, 17))\n\n# Test the function with the empty tuple\ntup1 = ()\ntup2 = ((1, 2, 3), (4, 5), (6, 7, 8, 9))\nprint(concatenate_nested(tup1, tup2))  # Output: ((1, 2, 3), (4, 5), (6, 7, 8, 9))\n\n# Test the function with one empty tuple\ntup1 = ((1, 2, 3), (4, 5), (6, 7, 8, 9))\ntup2",
        "generated_testcode": "assert concatenate_nested(('a', (1, 2, 3), (4, 5, 6)) == ('a', (1, 2, 3, 4, 5, 6))\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "13B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) == 0:\n        return s\n    else:\n        return s[d:] + s[:d]\n\n# Test the function\nprint(left_rotate(\"hello\", 2))  # Output: llohe\nprint(left_rotate(\"world\", 3))  # Output: ldwor\nprint(left_rotate(\"python\", 0))  # Output: python\nprint(left_rotate(\"python\", 7))  # Output: python\nprint(left_rotate(\"python\", 10)) # Output: python\nprint(left_rotate(\"\", 5))  # Output: \"\"\n\n# Time complexity : O(n) \n# Space complexity: O(n) ",
        "generated_testcode": "assert left_rotate(s=\"hello\",d=2) == \"llohe\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "13B",
        "pass": 10,
        "correct": false,
        "answer": "    for i in range(len(A)-2, -1, -1): \n        for j in range(len(A[i])): \n            A[i][j] += min(A[i+1][j], A[i+1][j+1]) \n    return A[0][0] \n\n# Test the function \nA = [ [ [3, 2, 4, 1], \n       [5, 4, 2], \n       [1, 3, 2, 4]] \nprint(min_sum_path(A)) ",
        "generated_testcode": "assert min_sum_path(A) == 11\n\n# Test case 1:\nA = [[3], [2, 4], [6, 5, 1]]\n\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]